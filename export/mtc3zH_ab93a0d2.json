{"ver":"0.1","info":{"id":"mtc3zH","date":"1682193784","viewed":89,"name":"fresneltest","username":"quadrortx8000","description":"asd","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["asd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    col /= texture(iChannel0, fragCoord / iResolution.xy).w;\n    col = film(col);\n    col = lin2rgb(col);\n    fragColor = vec4(col, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int renders = 4;\n\nint bounces = 4;\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n \nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n \nvec3 RandomUnitVector(inout uint state)\n{\n    float z = RandomFloat01(state) * 2.0f - 1.0f;\n    float a = RandomFloat01(state) * 3.14159265358979323 * 2.0;\n    float r = sqrt(1.0f - z * z);\n    float x = r * cos(a);\n    float y = r * sin(a);\n    return vec3(x, y, z);\n}\n\nfloat fresnel(float n1, float n2, vec3 normal, vec3 incident, float f0, float f90)\n{\n        // Schlick aproximation\n        float r0 = (n1-n2) / (n1+n2);\n        r0 *= r0;\n        float cosX = -dot(normal, incident);\n        if (n1 > n2)\n        {\n            float n = n1/n2;\n            float sinT2 = n*n*(1.0-cosX*cosX);\n            // Total internal reflection\n            if (sinT2 > 1.0)\n                return f90;\n            cosX = sqrt(1.0-sinT2);\n        }\n        float x = 1.0-cosX;\n        float ret = r0+(1.0-r0)*x*x*x*x*x;\n \n        // adjust reflect multiplier for object reflectivity\n        return mix(f0, f90, ret);\n}\n\nvoid scene(in vec3 ro, in vec3 rd, inout hitinfo hit) { \n    vec3 b = vec3(-2.0, 4.0, -6.0);\n    vec3 b1 = vec3(-2.0, 4.0, -2.0);\n    vec3 c = vec3(2.0, 4.0, -6.0);\n    vec3 c1 = vec3(2.0, 4.0, -2.0);\n    \n    vec3 f1 = vec3(25.0, -5.0, 5.0);\n    vec3 f2 = vec3(-25.0, -5.0, 5.0);\n    vec3 f3 = vec3(-25.0, -5.0, -5.0);\n    vec3 f4 = vec3(25.0, -5.0, -5.0);\n    \n    vec3 l1 = vec3(-1.0, 3.999, -3.0);\n    vec3 l2 = vec3(-1.0, 3.999, -5.0);\n    vec3 l3 = vec3(1.0, 3.999, -5.0);\n    vec3 l4 = vec3(1.0, 3.999, -3.0);\n    \n    vec3 t1 = vec3(2.0, 1.0, -4.0);\n    vec3 t2 = vec3(2.0, -1.0, -4.0);\n    vec3 t3 = vec3(-2.0, -1.0, -4.0);\n    vec3 t4 = vec3(-2.0, 1.0, -4.0);\n    \n    if (iQuad(ro, rd, hit, b, b1, c1, c)) { //top\n        hit.material.albedo = vec3(1.0, 1.0, 1.0);\n        hit.material.emissive = vec3(0.0, 0.0, 0.0);\n        hit.material.specular = 0.0;\n        hit.material.specrough = 1.0;\n        hit.material.speccol = vec3(1.0);\n        hit.material.IOR = 1.0;\n        hit.material.refract = 0.0;\n        hit.material.refractrough = 0.0;\n        hit.material.refractcol = vec3(1.0);\n    }\n    if (iQuad(ro, rd, hit, l1, l2, l3, l4)) { //light\n        hit.material.albedo = vec3(1.0, 1.0, 1.0);\n        hit.material.emissive = vec3(10.0, 10.0, 10.0);\n        hit.material.specular = 0.0;\n        hit.material.specrough = 1.0;\n        hit.material.speccol = vec3(1.0);\n        hit.material.IOR = 1.0;\n        hit.material.refract = 0.0;\n        hit.material.refractrough = 0.0;\n        hit.material.refractcol = vec3(1.0);\n    }\n    if (iQuad(ro, rd, hit, f1, f2, f3, f4)) { //floor\n        hit.material.albedo = vec3(1.0, 1.0, 1.0);\n        hit.material.emissive = vec3(0.0, 0.0, 0.0);\n        hit.material.specular = 0.0;\n        hit.material.specrough = 1.0;\n        hit.material.speccol = vec3(1.0);\n        hit.material.IOR = 1.0;\n        hit.material.refract = 0.0;\n        hit.material.refractrough = 0.0;\n        hit.material.refractcol = vec3(1.0);\n    }\n    if (iBox(ro, rd, boxparams(vec3(0.0, 1.0, 0.0), 0.0, vec3(0.0, -2.0, -10.0)), vec3(50.0, 5.0, 0.25), hit)) { //big box\n        hit.material.albedo = vec3(floor(mod((ro + rd * hit.distance).x, 1.0f) * 2.0f));\n        hit.material.emissive = vec3(0.0, 0.0, 0.0);\n        hit.material.specular = 0.0;\n        hit.material.specrough = 1.0;\n        hit.material.speccol = vec3(1.0);\n        hit.material.IOR = 1.0;\n        hit.material.refract = 0.0;\n        hit.material.refractrough = 0.0;\n        hit.material.refractcol = vec3(1.0);\n    }\n    if (iSphere(ro, rd, vec4(4.0, -2.0, -6.0, 3.0), hit)) {\n        hit.material.albedo = vec3(0.9, 0.25, 0.25);\n        hit.material.emissive = vec3(0.0, 0.0, 0.0);\n        hit.material.specular = 0.01;\n        hit.material.specrough = 0.0;\n        hit.material.speccol = vec3(0.8);\n        hit.material.IOR = 2.0;\n        hit.material.refract = 0.0;\n        hit.material.refractrough = 0.0;\n        hit.material.refractcol = vec3(1.0);\n    }\n    if (iSphere(ro, rd, vec4(-4.0, -2.0, -6.0, 3.0), hit)) {\n        hit.material.albedo = vec3(0.0, 1.0, 1.0);\n        hit.material.emissive = vec3(0.0, 0.0, 0.0);\n        hit.material.specular = 0.02;\n        hit.material.specrough = 0.0;\n        hit.material.speccol = vec3(0.8);\n        hit.material.IOR = 1.1;\n        hit.material.refract = 1.0;\n        hit.material.refractrough = 0.0;\n        hit.material.refractcol = vec3(0.0, 1.0, 1.0);\n    }\n}\n\nvec3 shade(in vec3 startRayPos, in vec3 startRayDir, inout uint rngState)\n{\n    // initialize\n    vec3 ret = vec3(0.0f, 0.0f, 0.0f);\n    vec3 throughput = vec3(1.0f, 1.0f, 1.0f);\n    vec3 rayPos = startRayPos;\n    vec3 rayDir = startRayDir;\n    \n    for (int bounceIndex = 0; bounceIndex < bounces; ++bounceIndex)\n    {\n        // shoot a ray out into the world\n        hitinfo hitInfo;\n        hitInfo.material = blankmat();\n        hitInfo.distance = far;\n        hitInfo.inside = false;\n        scene(rayPos, rayDir, hitInfo);\n        hitInfo.material.refractcol = abs(hitInfo.material.refractcol - 1.0);\n        // if the ray missed, we are done\n        if (hitInfo.distance == far)\n        {\n            ret += rgb2lin(texture(iChannel1, rayDir).rgb) * throughput;\n            break;\n        }\n        \n        // do absorption if we are hitting from inside the object\n        if (hitInfo.inside)\n            throughput *= exp(-hitInfo.material.refractcol * hitInfo.distance);\n        \n        // get the pre-fresnel chances\n        float specularChance = hitInfo.material.specular;\n        float refractionChance = hitInfo.material.refract;\n        //float diffuseChance = max(0.0f, 1.0f - (refractionChance + specularChance));\n        \n        // take fresnel into account for specularChance and adjust other chances.\n        // specular takes priority.\n        // chanceMultiplier makes sure we keep diffuse / refraction ratio the same.\n        float rayProbability = 1.0;\n        if (specularChance > 0.0f)\n        {\n        \tspecularChance = fresnel(\n            \thitInfo.inside ? hitInfo.material.IOR : 1.0,\n            \t!hitInfo.inside ? hitInfo.material.IOR : 1.0,\n            \trayDir, hitInfo.normal, hitInfo.material.specular, 1.0);\n            \n            float chanceMultiplier = (1.0 - specularChance) / (1.0 - hitInfo.material.specular);\n            refractionChance *= chanceMultiplier;\n            //diffuseChance *= chanceMultiplier;\n        }\n        \n        // calculate whether we are going to do a diffuse, specular, or refractive ray\n        float doSpecular = 0.0;\n        float doRefraction = 0.0;\n        float raySelectRoll = RandomFloat01(rngState);\n\t\tif (specularChance > 0.0 && raySelectRoll < specularChance)\n        {\n            doSpecular = 1.0;\n            rayProbability = specularChance;\n        }\n        else if (refractionChance > 0.0 && raySelectRoll < specularChance + refractionChance)\n        {\n            doRefraction = 1.0;\n            rayProbability = refractionChance;\n        }\n        else\n        {\n            rayProbability = 1.0 - (specularChance + refractionChance);\n        }\n        \n        // numerical problems can cause rayProbability to become small enough to cause a divide by zero.\n\t\trayProbability = max(rayProbability, 0.001);\n        \n        // update the ray position\n        if (doRefraction == 1.0)\n        {\n            rayPos = (rayPos + rayDir * hitInfo.distance) - hitInfo.normal * 0.001;\n        }\n        else\n        {\n            rayPos = (rayPos + rayDir * hitInfo.distance) + hitInfo.normal * 0.001;\n        }\n         \n        // Calculate a new ray direction.\n        // Diffuse uses a normal oriented cosine weighted hemisphere sample.\n        // Perfectly smooth specular uses the reflection ray.\n        // Rough (glossy) specular lerps from the smooth specular to the rough diffuse by the material roughness squared\n        // Squaring the roughness is just a convention to make roughness feel more linear perceptually.\n        vec3 diffuseRayDir = normalize(hitInfo.normal + RandomUnitVector(rngState));\n        \n        vec3 specularRayDir = reflect(rayDir, hitInfo.normal);\n        specularRayDir = normalize(mix(specularRayDir, diffuseRayDir, hitInfo.material.specrough*hitInfo.material.specrough));\n\n        vec3 refractionRayDir = refract(rayDir, hitInfo.normal, hitInfo.inside ? hitInfo.material.IOR : 1.0 / hitInfo.material.IOR);\n        refractionRayDir = normalize(mix(refractionRayDir, normalize(-hitInfo.normal + RandomUnitVector(rngState)), hitInfo.material.refractrough*hitInfo.material.refractrough));\n                \n        rayDir = mix(diffuseRayDir, specularRayDir, doSpecular);\n        rayDir = mix(rayDir, refractionRayDir, doRefraction);\n        \n\t\t// add in emissive lighting\n        ret += hitInfo.material.emissive * throughput;\n        \n        // update the colorMultiplier. refraction doesn't alter the color until we hit the next thing, so we can do light absorption over distance.\n        if (doRefraction == 0.0)\n        \tthroughput *= mix(hitInfo.material.albedo * dot(hitInfo.normal, rayDir), hitInfo.material.speccol, doSpecular);\n        \n        // since we chose randomly between diffuse, specular, refract,\n        // we need to account for the times we didn't do one or the other.\n        throughput /= rayProbability;\n        \n        // Russian Roulette\n        // As the throughput gets smaller, the ray is more likely to get terminated early.\n        // Survivors have their value boosted to make up for fewer samples being in the average.\n        {\n        \tfloat p = max(throughput.r, max(throughput.g, throughput.b));\n        \tif (RandomFloat01(rngState) > p)\n            \tbreak;\n\n        \t// Add the energy we 'lose' by randomly terminating paths\n        \tthroughput *= 1.0 / p;            \n        }\n    }\n \n    // return pixel color\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 m = iMouse;\n    m.x = m.x/iResolution.x;\n    m.y = m.y*2.0/iResolution.y;\n    m = m * 2.0 - 1.0;\n    m.x *= iResolution.x/iResolution.y;\n    \n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float distance = 1.0 / tan(90.0 * 0.5 * PI / 180.0);\n    \n    vec3 ro = vec3(0.0, 0.0, 4.0);\n    vec3 rd = normalize(vec3(uv, -distance));\n    \n    //ro = vec3(uv.x, uv.y + 1.0, 3.0);\n    //rd = vec3(0.0, 0.0, -1.0);\n    \n    ro *= rotateX(m.y-1.5);\n    ro *= rotateY(m.x);\n    rd *= rotateX(m.y-1.5);\n    rd *= rotateY(m.x);\n    \n    vec3 col = texture( iChannel0, fragCoord/iResolution.xy ).xyz;\n    float temp = texture( iChannel0, fragCoord/iResolution.xy ).w;\n    \n    if (iFrame == 0 || m.z > 0.0) {\n        col = vec3(0.0);\n        temp = 0.0;\n    }\n\n    for (int i = 0; i < renders; i++) col += shade(ro, rd, rngState) / float(renders);\n    temp += 1.0;\n\n    fragColor = vec4(col,temp);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265358979323\n\nfloat far = 1000000.0;\n\nvec3 LessThan(vec3 f, float value)\n{\n    return vec3(\n        (f.x < value) ? 1.0f : 0.0f,\n        (f.y < value) ? 1.0f : 0.0f,\n        (f.z < value) ? 1.0f : 0.0f);\n}\n \nvec3 lin2rgb(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0f, 1.0f);\n     \n    return mix(\n        pow(rgb, vec3(1.0f / 2.4f)) * 1.055f - 0.055f,\n        rgb * 12.92f,\n        LessThan(rgb, 0.0031308f)\n    );\n}\n \nvec3 rgb2lin(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0f, 1.0f);\n     \n    return mix(\n        pow(((rgb + 0.055f) / 1.055f), vec3(2.4f)),\n        rgb / 12.92f,\n        LessThan(rgb, 0.04045f)\n    );\n}\nvec3 film(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0f, 1.0f);\n}\n\nstruct material {\n    vec3 albedo;\n    vec3 emissive;\n    float specular;\n    float specrough;\n    vec3 speccol;\n    float IOR;\n    float refract;\n    float refractrough;\n    vec3 refractcol;\n};\n\nstruct hitinfo {\n    float distance;\n    vec3 normal;\n    bool inside;\n    material material;\n};\n\nmaterial blankmat() {\n    material ret;\n    ret.albedo = vec3(0.0f, 0.0f, 0.0f);\n    ret.emissive = vec3(0.0f, 0.0f, 0.0f);\n    ret.specular = 0.0f;\n    ret.specrough = 0.0f;\n    ret.speccol = vec3(0.0f, 0.0f, 0.0f);\n    ret.IOR = 1.0f;\n    ret.refract = 0.0f;\n    ret.refractrough = 0.0f;\n    ret.refractcol = vec3(0.0f, 0.0f, 0.0f);\n    return ret;\n}\n\nmat4 rotate4( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\nfloat ScalarTriple(vec3 u, vec3 v, vec3 w) {\n    return dot(cross(u, v), w);\n}\n\nstruct box {\n    mat4 rot;\n\tmat4 tra;\n\tmat4 txi; \n\tmat4 txx;\n};\n\nbox boxparams(vec3 rotdir, float deg, vec3 loc) {\n    mat4 rot = rotate4(normalize(rotdir), radians(deg));\n\tmat4 tra = translate(loc.x, loc.y, loc.z);\n\tmat4 txi = tra * rot; \n\tmat4 txx = inverse( txi );\n    return box(rot, tra, txi, txx);\n}\n\nbool iSphere(in vec3 rayPos, in vec3 rayDir, in vec4 sphere, inout hitinfo info)\n{    \n\t//get the vector from the center of this sphere to where the ray begins.\n\tvec3 m = rayPos - sphere.xyz;\n\n    //get the dot product of the above vector and the ray's vector\n\tfloat b = dot(m, rayDir);\n\n\tfloat c = dot(m, m) - sphere.w * sphere.w;\n\n\t//exit if r's origin outside s (c > 0) and r pointing away from s (b > 0)\n\tif(c > 0.0 && b > 0.0)\n\t\treturn false;\n\n\t//calculate discriminant\n\tfloat discr = b * b - c;\n\n\t//a negative discriminant corresponds to ray missing sphere\n\tif(discr < 0.0)\n\t\treturn false;\n    \n\t//ray now found to intersect sphere, compute smallest t value of intersection\n    bool fromInside = false;\n\tfloat dist = -b - sqrt(discr);\n    if (dist < 0.0f)\n    {\n        fromInside = true;\n        dist = -b + sqrt(discr);\n    }\n    \n\tif (dist > 0.001 && dist < info.distance)\n    {\n        info.inside = fromInside;\n        info.distance = dist;        \n        info.normal = normalize((rayPos+rayDir*dist) - sphere.xyz) * (fromInside ? -1.0f : 1.0f);\n        return true;\n    }\n    \n    return false;\n}\n\nbool iQuad(in vec3 rayPos, in vec3 rayDir, inout hitinfo info, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    // calculate normal and flip vertices order if needed\n    vec3 normal = normalize(cross(c-a, c-b));\n    if (dot(normal, rayDir) > 0.0f)\n    {\n        normal *= -1.0f;\n        \n\t\tvec3 temp = d;\n        d = a;\n        a = temp;\n        \n        temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    vec3 p = rayPos;\n    vec3 q = rayPos + rayDir;\n    vec3 pq = q - p;\n    vec3 pa = a - p;\n    vec3 pb = b - p;\n    vec3 pc = c - p;\n    \n    // determine which triangle to test against by testing against diagonal first\n    vec3 m = cross(pc, pq);\n    float v = dot(pa, m);\n    vec3 intersectPos;\n    if (v >= 0.0f)\n    {\n        // test against triangle a,b,c\n        float u = -dot(pb, m);\n        if (u < 0.0f) return false;\n        float w = ScalarTriple(pq, pb, pa);\n        if (w < 0.0f) return false;\n        float denom = 1.0f / (u+v+w);\n        u*=denom;\n        v*=denom;\n        w*=denom;\n        intersectPos = u*a+v*b+w*c;\n    }\n    else\n    {\n        vec3 pd = d - p;\n        float u = dot(pd, m);\n        if (u < 0.0f) return false;\n        float w = ScalarTriple(pq, pa, pd);\n        if (w < 0.0f) return false;\n        v = -v;\n        float denom = 1.0f / (u+v+w);\n        u*=denom;\n        v*=denom;\n        w*=denom;\n        intersectPos = u*a+v*d+w*c;\n    }\n    \n    float dist;\n    if (abs(rayDir.x) > 0.1f)\n    {\n        dist = (intersectPos.x - rayPos.x) / rayDir.x;\n    }\n    else if (abs(rayDir.y) > 0.1f)\n    {\n        dist = (intersectPos.y - rayPos.y) / rayDir.y;\n    }\n    else\n    {\n        dist = (intersectPos.z - rayPos.z) / rayDir.z;\n    }\n    \n\tif (dist > 0.001 && dist < info.distance)\n    {\n        info.inside = false;\n        info.distance = dist;        \n        info.normal = normal;        \n        return true;\n    }    \n    \n    return false;\n}\n\n\nbool iBox(in vec3 ro, in vec3 rd, in box box, in vec3 rad, inout hitinfo hit) {\n    mat4 txx = box.txx;\n    mat4 txi = box.txi;\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n    vec3 m = 1.0/rdd;\n    \n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max(max(t1.x,t1.y),t1.z);\n    float tF = min(min(t2.x,t2.y),t2.z);\n    \n\tif( tN>tF || tF<0.0 ) {tN = far; return false;}\n\n    vec4 res = vec4(tN, step(tN,t1));\n\n    if (tN > 0.001 && tN < hit.distance) {\n    hit.distance = tN;\n    hit.normal = (txi * vec4(-sign(rdd)*res.yzw,0.0)).xyz;\n\n\treturn true; }\n}","name":"Common","description":"","type":"common"}]}