{"ver":"0.1","info":{"id":"sd3BDs","date":"1657438788","viewed":80,"name":"Slow Ripples","username":"echosum","description":"Learning some of the basics.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["ripples","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Coordinate system which centers on (0,0).\n    vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n    vec3 col = vec3(0.);\n\n    // Outermost Ring.\n    vec2 source = vec2(0.);\n    float d = distance(uv, source);  \n    float radius = .2 + abs(0.5*sin(mod(0.05*iTime, PI/2.)));\n    vec3 ringCol1 = vec3(pow(19.,-abs(d-radius)*20.)); \n    col += ringCol1-1.1;\n    \n    // Inner Rings.\n    vec2 cPrev = source;\n    float ringDelta = 0.04;\n    float numRings = 20.;\n    for(float i=0.; i<numRings; i++){\n        vec2 cCurrent;\n        if (mod(i,2.)==1.) {\n            cCurrent = source;\n        } else {\n            cCurrent = vec2(ringDelta*sin(1./2.*iTime),ringDelta*cos(1./2.*iTime)) + cPrev;\n            // cCurrent = vec2(ringDelta*sin(1./2.*iTime), 0.) + cPrev;\n        } \n        d = distance(uv, cCurrent);\n        radius = .15 - i*ringDelta + abs(0.5*sin(mod(0.05*iTime, PI/2.)));\n        vec3 currRing = vec3(pow(19.,-abs(d-radius)*12.));\n        col += currRing;\n        cPrev = cCurrent; \n    }\n    \n    // Output to screen\n    vec4 bg = texture(iChannel0, uv);\n    fragColor = vec4(col,1.0) + bg;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1);\n}","name":"Buffer A","description":"","type":"buffer"}]}