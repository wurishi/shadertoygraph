{"ver":"0.1","info":{"id":"Wd2Gzh","date":"1548145571","viewed":286,"name":"[twitch] Crystal Land","username":"NuSan","description":"Shader coded live on twitch (https://www.twitch.tv/nusan_fx)\nYou can disable the BLUR effect at the top.\nYou can also lower the STEPS or the QUALITY if too slow","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","transparency","live","twitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nShader coded live on twitch (https://www.twitch.tv/nusan_fx)\nYou can disable the BLUR effect at the top.\nYou can also lower the STEPS or the QUALITY if too slow\n\nThe blur effect has been added after the stream, and floor texture has been moved from SDF to \"normal map\" to gain framerate.\n*/\n            \n\n#define BLUR 1\n#define STEPS 80\n#define QUALITY 4\n\n#define time iTime\n\n\nfloat sph(vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat cyl(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 s) {\n  vec3 ap=abs(p)-s;\n  return length(max(vec3(0.0), ap)) + min(0.0, max(ap.x,max(ap.y,ap.z)));\n}\n\nfloat box(vec2 p, float s) {\n  vec2 ap=abs(p)-s;\n  return length(max(vec2(0.0), ap)) + min(0.0, max(ap.x,ap.y));\n}\n\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\n\nfloat smin(float a, float b, float h) {\n  float k=clamp((a-b)/h*0.5+0.5,0.0,1.0);\n  return mix(a,b,k) - k*(1.0-k)*h;\n}\n\nfloat rnd(float t) {\n  return fract(sin(t*732.496)*5653.352);\n}\n\nvec3 rnd(vec3 t) {\n  return fract(sin(t*732.496)*5653.352);\n}\n\nfloat csize = 15.0;\n\nfloat mat = 0.0;\nfloat at = 0.0;\nfloat map(vec3 p) {\n\n  p.y = abs(p.y+5.0)-10.0;\n\n  float d = 10000.0f;\n  for(int i=0; i<QUALITY; ++i) {\n    vec3 off = float(i)*vec3(0.3,0.0,0.7);\n    vec3 size = vec3(2.0+float(i)*0.1);\n    vec3 rotp = p;\n    float t1 = float(i)+0.2;\n    rotp.xy *= rot(t1);\n    rotp.yz *= rot(t1*0.7);\n    vec3 rp = (fract((rotp-off)/size-0.5)-0.5)*size;\n    float s = box(rp, vec3(0.5,1.0,0.3)*2.0);\n    d = min(d, s);\n  }\n\n  vec3 cp = p;\n  \n  cp.xz = (fract((cp.xz)/csize-0.5)-0.5)*csize;\n\n  float f2 = 0.3;\n  //f2 = texture(texNoise, p.xz * 0.05).x;\n  float f = 0.5-p.y + f2 * 2.0;\n\n  //d = smin(d, f*5-5, -5.0);\n  d = smin(d, cyl(cp.xz, 5.0), -3.0);\n\n  d = smin(d, -30.0-p.y, -30.0);\n \n  d = min(d, cyl(cp.xz,1.0));\n  \n\n  d = max(d,0.1-f);\n  //if(d<0) {\n    at += 0.5 * abs(d) * max(0.5-d,0.0);\n  //}\n  \n\n  mat = d<f?1.0:0.0;\n  return min(d, f);\n}\n\nvec3 norm(vec3 p) {\n  vec2 off=vec2(0.01, 0);\n  return normalize(map(p)-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx)));\n}\n\nvec3 floornorm(vec2 p) {\n  vec2 off=vec2(0.005, 0);\n  float center=texture(iChannel0, p).x;\n  return -normalize(vec3(center - texture(iChannel0, p-off.xy).x, 0.3, center - texture(iChannel0, p-off.yx).x));\n}\n\nvec3 fog(vec3 r, float dd) {\n  return vec3(0.5,0.3,1) * 0.02 * exp(dd*0.06);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  float loop=0.2;\n  float t1 = 0.4*fract(time*loop)/loop + rnd(floor(time*loop))*175.532;\n\n  vec3 motion = vec3(0);\n  motion.z += t1*10.0;\n\n  vec3 s=vec3(0,-7.0,-6);\n  s.xz *= rot(t1*0.7);\n  s.xz -= 2.0;\n  s.xz *= rot(t1*0.3);\n  s += motion;\n  vec3 t=vec3(0.0,-6.0 - sin(t1*0.8)*2.0,0) + motion;\n  vec3 cz = normalize(t-s);\n  vec3 cx = normalize(cross(cz, vec3(0,1,0)));\n  vec3 cy = normalize(cross(cz,cx));\n  //vec3 r=normalize(vec3(-uv, 1));\n  vec3 r=normalize(uv.x*cx + uv.y*cy + cz);\n\n  vec3 col = vec3(0);\n\n  vec3 l = normalize(-vec3(0.4,0.7,1.0));\n\n  vec3 p=s;\n  float dd=0.0;\n  float side=sign(map(p));\n  float prod=1.0;\n  for(int i=0; i<STEPS; ++i) {\n    float d=map(p) * side;\n    if(d<0.001) {\n      float curmat = mat;\n      vec3 n=norm(p) * side;\n      vec3 h=normalize(l-r);\n\n      if(mat<0.5) n=floornorm(p.xz * 0.03);\n      \n      float curid = dot(floor((p.xz)/csize-0.5), vec2(0.3,1.5));\n      vec3 crys = vec3(0.2, 0.4,0.7);\n      float t2 = rnd(curid*124.453) * 12.75;\n      crys.xy *= rot(t2);\n      crys.yz *= rot(t2*0.7);\n      crys = abs(crys);\n      vec3 base = mix(vec3(1,0.7,0.5)*1.5, crys, mat);\n      float spec = mix(0.1,1.0, mat);\n      float dnh = max(0.0,dot(n,h));\n      float f=pow(1.0-max(0.0,dot(n,-r)), 3.0);\n      float sky = -n.y*0.5+0.5;\n      col += at*crys*0.2;\n      //col += sky * pow(f,0.8) * vec3(0.5,0.3,1) * 0.2 * base;\n      col += max(0.0, dot(n, l)) * (0.2*f + 0.4*pow(dnh,spec*7.0) + 3.0*pow(dnh,spec*30.0)) * base * 30.0 / max(1.0,dd*dd);\n      col += fog(r, dd) * prod;\n      \n      if(mat<0.5) break;\n      //if(prod<0.1) break;\n\n      side = -side;\n      prod = 0.8;\n      d = 0.03;\n      r = refract(r,n, 1.0+side*0.05);\n#if BLUR\n      vec3 blur = normalize(rnd(p)-0.5)*.01;\n      r += blur;\n#endif\n    }\n    if(dd>100.0) {\n      dd=100.0;\n      break;\n    }\n    p+=r*d;\n    dd+=d;\n  }\n  col += fog(r, dd) * prod;\n\n  //col = pow(col, vec3(0.4545));\n\n  fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}