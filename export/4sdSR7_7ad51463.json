{"ver":"0.1","info":{"id":"4sdSR7","date":"1458405983","viewed":220,"name":"peaks","username":"hclarke","description":"voronoi gradient mountains","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","raymarch","gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 hash(vec4 x) {\n  const vec4 m = vec4(.1072947, .1068421, .10281,.1092345)*1000.;\n    const vec3 one = vec3(1.);\n  vec4 r = fract(x*m);\n  r += dot(r,r.yzwx+19.19);\n    \n  return fract(vec4(\n      dot(r.yzw,one)*r.x,\n      dot(r.xzw,one)*r.y,\n      dot(r.zyw,one)*r.z,\n      dot(r.xyz,one)*r.w));\n}\n\nvec2 voronoi(vec2 x) {\n\tvec2 p = floor(x);\n    vec2 f = x-p;\n    \n    float b=100.;\n    vec2 id;\n    for(float i = -1.; i <= 1.; ++i) \n    for(float j = -1.; j <= 1.; ++j) {\n    \tvec2 c = p+vec2(i,j);\n        vec2 r = hash(c.xyxy).xy;\n        vec2 m = c+r;\n        vec2 dx = m-x;\n        float d = dot(dx,dx);\n        if(d<b) {\n            b=d;\n            id=m;\n        }\n    }\n    return id;\n}\n\nfloat voronoi_edge(vec2 x, vec2 v) {\n    vec2 c = floor(v);\n    vec2 p = floor(x);\n    vec2 f = x-p;\n    vec2 vf = v-c;\n    \n    vec2 A = v-x;\n    float b = 100.;\n    for(float i = -2.; i <= 2.; ++i) \n    for(float j = -2.; j <= 2.; ++j) {\n        vec2 c1 = c+vec2(i,j);\n        vec2 B = hash(c1.xyxy).xy+c1-x;\n        \n        vec2 AB = B-A;\n        \n        if(dot(AB,AB) > 0.0001) {\n            b = min(b, dot( 0.5*(A+B), normalize(AB)));\n        }\n        \n    }\n    return b;\n}\n\nvec3 cubehelix(float v, float m, float M, float s) {\n \tconst mat3 YUV_to_RGB = mat3(\n         1.0,1.0,1.0,\n        0.0,-0.39465,2.03211,\n        1.13983,-0.58060,0.0);\n    \n    float a = 3.14159*(v+iTime*0.5)*2.0 * s;\n    vec3 c = vec3(mix(m,M,pow(v,.7)),sin(a),cos(a));\n   \tc.yz *= 0.08;\n    \n    return YUV_to_RGB*c;\n}\n\nfloat DE(vec3 p) {\n\t//approximate as vertical distance\n    vec2 x = p.xz;\n    vec2 v = voronoi(x);\n    if(dot(v,v) > 2.6) return p.y;\n    float height = voronoi_edge(x,v);\n    return p.y-height;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy -iResolution.xy*0.5) / iResolution.yy;\n    \n    vec3 ro = vec3(-0.1,.3,-2.8);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    float d = 0.0;\n    float de;\n    const int steps = 64;\n    for(int i=0; i < steps; ++i) {\n        vec3 p = ro+rd*d;\n    \tde = DE(p);\n        d += de+0.001;\n        if(de < 0.0) break;\n    }\n    \n    vec3 hit = ro+rd*d;\n    if(de < 0.1) {\n    \tvec3 c = cubehelix(hit.y*2.0,0.0,.7, 1.0);\n    \tc = mix(c, vec3(0.3), clamp(d*0.15, 0., 1.));\n\t\tfragColor = vec4(c,1.0);\n    }\n    else {\n        vec3 sd = normalize(vec3(-0.5, .3,1.0));\n        vec3 c = cubehelix(pow(dot(rd,sd), 20.), 0.2, 0.9, 2.0);\n     \tfragColor = vec4(c,1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}