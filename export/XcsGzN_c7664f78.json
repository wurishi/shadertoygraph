{"ver":"0.1","info":{"id":"XcsGzN","date":"1702839242","viewed":47,"name":"ColorYard #2","username":"xtr1984","description":"Color particles dynamic","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["particles","dynamics"],"hasliked":0,"parentid":"Mff3R4","parentname":"ColorYard"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool sphere(vec2 uv,vec2 pos, float r){\n    if (distance(uv-pos,vec2(0))<r){\n        return true;\n    }\n    else return false;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x*iResolution.x/iResolution.y;\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    for (int i = 0; i< NUMPARTICLES ;i++){\n        vec2 pos = texelFetch(iChannel0, ivec2(i,BUF_POS),0).xy;\n        vec4 colrad = texelFetch(iChannel0, ivec2(i,BUF_COL_RAD),0);\n        vec3 scol = colrad.rgb;\n        float rad = colrad.w;\n        bool b = sphere(uv, pos, rad);\n        col = mix(col, scol, float(b)); \n    }\n\n    //Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = texture(iChannel0, uv);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int i = int(fragCoord.x);\n    ivec2 ifrag = ivec2(fragCoord);  //this is nigthmare!\n    float aspect = iResolution.x/iResolution.y;\n    vec2 pos,vel,pos_i,pos_j,vel_i;\n    \n    if(iFrame==0){\n        if (ifrag.y==BUF_POS){\n            pos.x = rand(vec2(i))*aspect;\n            pos.y = rand(vec2(i+1));\n            fragColor = vec4(pos.x, pos.y,1.0,1.0);\n        }\n        if (ifrag.y==BUF_VEL){\n            vel.x = (rand(vec2(i))-0.5)*VELFACTOR;\n            vel.y = (rand(vec2(i+1))-0.5)*VELFACTOR;\n            fragColor = vec4(vel.x, vel.y,1.0,1.0);\n        }\n        if (ifrag.y==BUF_COL_RAD){\n            float crand= rand(vec2(i));\n            float r = RADIUSFACTOR * crand;\n            fragColor = vec4(rand(vec2(i)), rand(vec2(i+1)),rand(vec2(i+2)),r);\n        }\n\n        return;\n    }\n    //iFrame>0\n    if(ifrag.y==BUF_POS){  //pos\n        pos = texelFetch(iChannel0, ivec2(i,BUF_POS),0).xy;\n        vel = texelFetch(iChannel0, ivec2(i,BUF_VEL),0).xy;\n        float rad_i = texelFetch(iChannel0, ivec2(i,BUF_COL_RAD),0).w;\n        vec2 newpos=pos+vel;\n        newpos.x = clamp(newpos.x, rad_i, aspect-rad_i);\n        newpos.y = clamp(newpos.y, rad_i, 1.0 - rad_i);\n        fragColor = vec4(newpos.x,newpos.y,1.0,1.0);\n    }\n    if(ifrag.y==BUF_VEL){ //vel\n        pos = texelFetch(iChannel0, ivec2(i,BUF_POS),0).xy;\n        float rad_i = texelFetch(iChannel0, ivec2(i,BUF_COL_RAD),0).w;\n        pos_i = pos;\n        vel   = texelFetch(iChannel0, ivec2(i,BUF_VEL),0).xy;\n        vec2 newvel = vel;\n        if (pos.x + vel.x < rad_i){\n            newvel.x = - vel.x;\n        }\n        if (pos.x + vel.x > aspect-rad_i){\n            newvel.x = - vel.x;\n        }\n        if (pos.y + vel.y < rad_i){\n            newvel.y = - vel.y;\n        }\n        if (pos.y + vel.y > 1.0-rad_i){\n            newvel.y = - vel.y;\n        }\n\n        vec2 E = vec2(0,0);\n        for (int j=0;j<NUMPARTICLES;j++){\n            float a = 0.0;\n            if(i==j) continue;\n            pos_j = texelFetch(iChannel0, ivec2(j,BUF_POS),0).xy;\n            float rad_j = texelFetch(iChannel0, ivec2(j,BUF_COL_RAD),0).w;\n            vec2 delta = pos_i- pos_j;\n            float r = distance(pos_i, pos_j);\n            if (r<(rad_i+rad_j)){\n                a= 1.0/r* REPULSION_KOEFF1;\n            }\n            E +=  delta/r*a;\n        }\n        \n        newvel += E;\n        newvel = clamp(newvel, vec2(-MAXVEL,-MAXVEL), vec2(MAXVEL,MAXVEL));\n        //newvel.x = clamp(newvel.x, -MAXVEL,MAXVEL);\n        //newvel.y = clamp(newvel.y, -MAXVEL,MAXVEL);\n\nfragColor = vec4(newvel.x,newvel.y,1.0,1.0);\n    }\n    if(ifrag.y==BUF_COL_RAD){\n        fragColor = texelFetch(iChannel0, ivec2(i,BUF_COL_RAD),0);\n    }\n\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUMPARTICLES 100\n#define VELFACTOR 0.01\n#define MAXVEL 0.005\n#define RADIUSFACTOR 0.05 \n#define REPULSION_KOEFF1  0.0001\n\n#define BUF_POS 0\n#define BUF_VEL 1\n#define BUF_COL_RAD 2\nvec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n","name":"Common","description":"","type":"common"}]}