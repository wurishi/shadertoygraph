{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//Koch Snowflake again by nimitz (@stormoid)\n\n/*\n\tFollow up to my koch snowflake shader: https://www.shadertoy.com/view/XsfXDH\n\tUsing a much more elegant way of computing it.\n*/\n\n#define time iTime*0.35\n\nfloat koch(vec2 p)\n{\n    float ft = mod(floor(time),6.)+1.;\n    p = abs(fract(p)-0.5);\n    for(int i=0;i<12;++i)\n    {\n        if (floor(float(i)*.5) > ft)break; //\"animation\"\n#if 0\n        p += vec2(p.y*1.735, -p.x*1.735);\n        p.x = abs(p.x)-0.58;\n        p = -vec2(-p.y, p.x)*.865;\n#else\n        p = -vec2(-p.y + p.x*1.735, abs(p.x + p.y*1.735) - 0.58)*.865; //One loc version\n#endif\n    }\n    \n    return mod(floor(time*2.),2.)>0. ? abs(p.x)/(ft*ft)*14. : p.x/(ft*ft)*16.;\n    //return p.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = q-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n    p = clamp(p,-.55,.55);\n    \n\tfloat rz = koch(p.yx*.9+vec2(0.5,0));\n    rz = 1.-clamp(rz,0.,1.);\n    \n    vec3 col = vec3(rz)*vec3(1,.97,.92);\n\tfloat lp = length(p*6.);\n\tcol -= pow(lp*.23,2.)*rz;\n\t\n\t//background coloring\n\tvec3 bg = vec3(0.1,0.2,0.3)*1.3;\n\tcol = mix(bg,col, rz);\n\tcol -= lp*.03;\n    \n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mlf3RX","date":"1423716262","viewed":2669,"name":"Koch Snowflake again","username":"nimitz","description":"Improvement over: [url]https://www.shadertoy.com/view/XsfXDH[/url]","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","koch"],"hasliked":0,"parentid":"","parentname":""}}