{"ver":"0.1","info":{"id":"DdsBzN","date":"1688526943","viewed":40,"name":"SDF practise","username":"hbbdmc","description":"the practise of SDF","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","practise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCube(vec2 uv,float r)//r is half of square\n{\n    uv=abs(uv)-r;\n    float i=min(max(uv.x,uv.y),0.),//inner\n          o=length(max(uv,0.));//outter \n    return i+o;\n}\nfloat sdCube2(vec2 uv,float r)//r is half of square\n{\n    uv = abs(uv);\n    float x =uv.x;\n    float y = uv.y;\n    if(x < r && y< r){\n        return .99;\n    }\n    else{\n        return max(abs(x),abs(y));\n    }\n}\n\nfloat SDF(vec2 uv){\n    float result = length(uv - vec2(0)) - 0.2;\n    result=sdCube(uv,.2);\n    return result;\n}\nvoid mainImage( out vec4 O, in vec2 C )\n{\n    vec2 uv = (C-.5*iResolution.xy) / iResolution.y;\n    //uv*=2.;\n    float s = SDF(uv)*20.;\n//    float s = SDF(uv);\n\n    float border = floor(s);\n    float borderWidth = .2;\n    s = s - border;//from 0 to 1\n    //s = smoothstep(0.01,1.0,s);\n    //O.xyz = vec3(s);\n    O.xyz = mix(\n    vec3(1.0,0.0,0.0),\n    vec3(0.0,1.,0.),\n    s);\n    O=mix(vec4(0),O,smoothstep(0.0,borderWidth,.5-abs(s-.5)));//draw the border of circle\n}","name":"Image","description":"","type":"image"}]}