{"ver":"0.1","info":{"id":"NtVcD3","date":"1662821176","viewed":145,"name":"Sphere FBM 2D","username":"spalmer","description":"2D version of iq's Sphere FBM noise that shows how it works.\nultimately results in a 'swiss cheese' appearance.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","noise","distancefield","sdf","fbm","distance"],"hasliked":0,"parentid":"Ws3XWl","parentname":"Sphere FBM"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fork of iq's inspiring http://shadertoy.com/view/Ws3XWl\n\n// using MIT since iq's was:\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Article explaining technique:  http://iquilezles.org/articles/fbmsdf\n\n// Carving a series of sphere fields of higher frequencies and smaller sizes. \n// Unlike simply doing an FBM displacement on a solid, this yields a distance field (bound).\n// Which means the resulting field is Eikonal, or satisfies the Eikonal equation,\n// which is that the length of the gradient is everywhere <= 1.0\n\n/*\nfloat hash(vec2 p)  \n{\n    p  = 17. * fract(.3183099 * p + vec2(.11,.13));\n    return fract(p.x*p.y*(p.x+p.y));\n}\n*/\nvec3 hash3(vec2 p)  \n{\n    p  = 17. * fract(.3183099 * p + vec2(.11,.13));\n    return fract(p.x*p.y*(p.x+p.y)*vec3(11,3,7));\n}\n\n/*\n// hashing noise by IQ - from http://shadertoy.com/view/7tyyW1\nfloat hash(int k) {\n    uint n = uint(k);\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731u + 789221u) + 1376312589u;\n    return uintBitsToFloat((n>>9) | 0x3f800000u) - 1.;\n}\n*/\n\n// http://iquilezles.org/articles/distfunctions\nfloat sdBox(vec2 p, vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return min(max(d.x,d.y), 0.) + length(max(d, 0.));\n}\n\n// http://iquilezles.org/articles/smin\nfloat smax(float a, float b, float k)\n{\n    float h = max(k-abs(a-b), 0.);\n    return max(a, b) + .25*h*h/k;\n}\n\n// 'subtractive' fbm using max\nfloat op(float a, float b, float k)\n{\n    return smax(a, b, k);\n    return max(a, b);\n}\n\nfloat sqr(float x) { return x*x; }\n\nfloat rad(float r) \n{\n    return 1./3. * (r - .25); // bias to distribute between holes and no holes, resulting in -.25/3. to +.25 range\n    return r < .75 ? .25 : -.25; // some big holes, some not\n    return .3 * sqr(r); // iq's I think, all different sizes\n    return .25; // big wigglable holes\n    return .49999; // all gigantic holes, can't be wiggled at all\n}\n\n// iq's way doesn't wiggle the sphere positions at all, locked to grid,\n//float sph(vec2 i, vec2 f, vec2 c) { return length(f-c)-rad(hash(i+c)); }\n// but I think it works much better with offsets\nfloat sph(vec2 i, vec2 f, vec2 c) \n{\n    float seed = floor(iTime / 7. / 2.); //const float seed = 7.; //\n    vec3 h = vec3(0);\n    h = hash3(i+c+seed);\n    // 0 = iq's way (all at center), 1 = randomly offset, or can oscillate to better see what is happening\n    float dbgos = 1.; //0.; //1. - abs(sin(iTime*6.) * sin(iTime*.4)); //\n    f += .5 * (h.xy - .5) * dbgos; // be careful not to bleed into neighbor cells\n    return length(f-c) - rad(h.z); \n}\n\n// A random SDF - places spheres of random sizes in a grid\n\nfloat sdBase(vec2 p)\n{\n    vec2 i = floor(p), f = fract(p);\n    return min(min(sph(i,f,vec2(0,0)),\n                   sph(i,f,vec2(0,1))),\n               min(sph(i,f,vec2(1,0)),\n                   sph(i,f,vec2(1,1))));\n}\n\nfloat sdFbm(vec2 p)\n{\n    // iq's without sub-cell offsets was heavily reliant on rotation to bust up the grid pattern\n    const mat2 m = 2. * \n        mat2(.866,  .5, -.5,  .866); //mat2(1); //\n    // once wiggled, doesn't matter nearly so much\n    float anim = sin(iTime*3.14159*2./7.)*.5+.5; // add more layers of holes depending on time\n    float s = 1.;\n    float d = -3.4e38;\n    for (float i = 6.*anim; --i >= 0.; )\n    {\n        float n = s * sdBase(p);\n    \td = op(d, -n, .2*s);\n        p = m * p;\n        s *= .5;\n    }\n    return d;\n}\n\nfloat map(vec2 p)\n{\n    float d = sdBox(p, vec2(.9));\n    d = max(d, sdFbm(p + .5));\n    //d += p.y; // carve a mountain mesa instead of a cheese slice\n    return d;\n}\n\nvec3 debugSDF(float d)\n{\n    float aa = iResolution.y / 2.; //4.; //\n    float s = 8., b = .5;\n    s = aa;\n    switch (int(iTime * .1) & 3)\n    {\n        case 0:\n            //b = 1.*(sin(5.*iTime)*.5+.5) + .5;\n            break;\n        case 1:\n            //s = 12.*(sin(5.*iTime)*.5+.5) + 4.;\n            break;\n    }\n    return vec3(clamp(b - s*d, 0., 1.));\n}\n\nvoid mainImage(out vec4 o, vec2 u)\n{\n    vec2 r = iResolution.xy, p = (u+u-r)/r.y;\n\n    float d = map(p);\n    vec3 c = debugSDF(d);\n\n    c *= vec3(1,.9,.7); // may as well do... swiss cheese-colored  :)\n\n    // gamma\n    c = pow(c,vec3(.45));\n    \n    o = vec4(c, 1);\n}\n\n// apparently Shadertoy and/or Firefox have bugs with fullscreen aspect on my ultrawidescreen monitor","name":"Image","description":"","type":"image"}]}