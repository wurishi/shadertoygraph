{"ver":"0.1","info":{"id":"l3XcDH","date":"1726341838","viewed":22,"name":"Bouncing balls #2","username":"cesio","description":"Bouncing balls with a radius changing in a function of... a ball's height","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bounceball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// a number of seconds - loop\n#define N 7. \n// a dumping coefficient\n#define K 0.6 \n// a ball radius\n#define R 0.05\n#define R2 0.046\n// speed of a ball\n#define S 2.\n// a number of balls\n#define NB 16\n// a time slot between balls in seconds\n#define TS 0.05\n\nvec4 circle (vec2 st, vec2 pos, float radius,vec3 color){\n    float pct = distance(st,pos);\n    vec3 colorR = vec3(smoothstep(radius,radius * 0.96,pct)) * color;\n //   vec3 colorR = vec3(step(pct,radius)) * color;\n\treturn vec4(colorR, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    float ballsOffset = (2.) / float (NB + 1);\n    vec3 color1 = vec3(0.6, 0.8, 1.0);\n    vec3 color2 = vec3(0.0, 0.2, 0.6);\n   //   vec3 color2 = vec3(1.0, 0.0, 0.0);\n    \n\n    vec4 col = vec4(0.);\n    \n    for (int i = 0; i < NB; i++) {\n        float offsetTime = iTime - TS * float(i);\n        \n      \n        // check whether it is time to start Nth ball\n        if (offsetTime >= 0.) {\n            // we want to limit time to cycle of N seconds\n            float localTime = mod(offsetTime,float(N));\n            // we want to increase the speed as time passes by\n            float speed = S + pow(1.4, localTime);\n            // we use consius shaping function to'simulate' falling ball, 'abs' is to bounce\n            float y = abs(cos(localTime * speed)) * pow(K,localTime);\n            //if (y < R2) y = R2;\n            float x = float(i) * ballsOffset + R;\n\n           col += circle(uv, vec2(x,y),3.*R*y,vec3(smoothstep(color1, color2, vec3(1.-x))));\n           //col += circle(uv, vec2(x,y),abs(sin(y)),vec3((1.0-y),x,0.));\n        }\n    }\n    \n    // Time varying pixel color\n    vec3 colBg = 0.3 - 0.2*cos(uv.xxy);\n\n\n    fragColor = vec4(colBg, 1.);\n    fragColor += col;\n }\n    ","name":"Image","description":"","type":"image"}]}