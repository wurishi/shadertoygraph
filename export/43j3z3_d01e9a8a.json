{"ver":"0.1","info":{"id":"43j3z3","date":"1710287177","viewed":64,"name":"Blur Study","username":"Balas","description":"My first time implementing blur algorithms. And trying out different ones while I am at it.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define lerp(x, y, a) mix(x, y, a)\n#define PI 3.14159265359\n#define E 2.71828182846\n#define PXL_S 1.0/iResolution.xy\n\n#define GB_D 1\n#define SAMPLES 10\n\n\n\nfloat gaussianKernel(vec2 vPos, float iGD){\n    float iGD_S = iGD*iGD;\n    float ans = (1.0 / sqrt(2.0*PI*iGD_S)) * pow(E, -((vPos.x*vPos.x+vPos.y*vPos.y)/(2.0*iGD_S)));\n    return max(ans, 1.0);\n}\n\nvec3 gaussianBlur(sampler2D sTex, vec2 vUV, int str){\n    vec3 blurPxl = vec3(0.0, 0.0, 0.0);\n    float iA = 0.0;\n    for(int i=-str; i<=str; ++i){\n        for(int j=-str; j<=str; j++){\n            float gK = gaussianKernel(vec2(i, j), float(GB_D));\n            blurPxl+=texture(sTex, vUV+(vec2(i, j) * PXL_S)).rgb * gK;\n            iA+=gK;\n        }\n    }\n    blurPxl=blurPxl/iA;\n    return blurPxl;\n}\n\nvec3 boxBlurOnePass(sampler2D sTex, vec2 vUV, int str){    \n    vec3 blurPxl = vec3(0.0, 0.0, 0.0);\n    int iC = 0;\n    for(int i=-str; i<=str; ++i){\n        for(int j=-str; j<=str; j++, iC++){\n            blurPxl+=texture(sTex, vUV+(vec2(i, j) * PXL_S) ).rgb;\n        }\n    }\n    blurPxl=blurPxl/float(iC);\n    return blurPxl;\n}\n\nvec3 boxBlurTwoPass(sampler2D sTex, vec2 vUV, int str){    \n    vec3 blurPxl = vec3(0.0, 0.0, 0.0);\n    int iC = 0;\n    for(int i=-str; i<=str; ++i, iC++){\n        blurPxl+=texture(sTex, vUV+(vec2(i, 0) * PXL_S) ).rgb;\n    }\n    for(int i=-str; i<=str; ++i, iC++){\n        blurPxl+=texture(sTex, vUV+(vec2(0, i) * PXL_S) ).rgb;\n    }\n    blurPxl=blurPxl/float(iC);\n    return blurPxl;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 ogImg = texture(iChannel0, uv).rgb;\n    \n    vec3 vAlbedo = ogImg;\n    \n    float alpha = sin(iTime)*0.5+0.5;    \n    //vAlbedo = lerp(gaussianBlur(iChannel0, uv, SAMPLES), ogImg, alpha);\n    vAlbedo = lerp(boxBlurTwoPass(iChannel0, uv, 10), ogImg, 0.0);\n    \n    // sample texture and output to screen\n    fragColor = vec4(vAlbedo, 1.0);\n}","name":"Image","description":"","type":"image"}]}