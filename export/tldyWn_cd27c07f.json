{"ver":"0.1","info":{"id":"tldyWn","date":"1608829190","viewed":57,"name":"Basic Truchet pattern","username":"Tarquin","description":"Basic Truchet pattern.\nYou can switch between different tiles on lines 82 to 84.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["truchetpattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Arthur Jacquin - 2020\n// https://www.linkedin.com/in/arthur-jacquin-631921153/\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define PI 3.14159265359\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvec2 rotate2D(in vec2 _st, in float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\n//Subdivide viewport in quares\nvec2 subdivide(in vec2 st, in float subdivisions)\n{\n    st *= subdivisions;\n    return fract(st);\n}\n\nfloat circle(in vec2 p, in float r)\n{\n    return smoothstep(r - (r * 0.1), r + (r * 0.1), dot(p, p) * 4.0);\n}\n\nfloat duo(in vec2 st)\n{\n    return step(st.y, st.x);\n}\n\nfloat line(in vec2 st)\n{\n    float thickness = 0.05;\n    float upper = smoothstep(st.y + thickness + 0.01, st.y + thickness - 0.01, st.x);\n    float lower = smoothstep(st.y - thickness - 0.01, st.y - thickness + 0.01, st.x);\n    return upper * lower;\n}\n\nfloat circleTile(in vec2 st, in float outerRadius, in float innerRadius)\n{\n    //Bottom left circle\n    vec2 posBL = st - vec2(0.0);\n    float outerCircleBL = 1.0 - circle(posBL, outerRadius);\n    float innerCircleBL = circle(posBL, innerRadius) * -1.0 + 1.0; //Circle reversed\n    float circleBL = outerCircleBL - innerCircleBL;\n\n    //Top right circle\n    vec2 posTR = st - vec2(1.0);\n    float outerCircleTR = 1.0 - circle(posTR, outerRadius);\n    float innerCircleTR = circle(posTR, innerRadius) * -1.0 + 1.0; //Circle reversed\n    float circleTR = outerCircleTR - innerCircleTR;\n    \n    return circleBL + circleTR;\n}\n\nvec2 truchetPattern(in vec2 st, in float _index)\n{\n    //Rotate in a random direction\n    if (_index > 0.75) {\n        st = rotate2D(st, PI * 0.5);\n    } else if (_index > 0.5) {\n        st = rotate2D(st, PI);\n    } else if (_index > 0.25) {\n        st = rotate2D(st, PI * -0.5);\n    }\n\n    return st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    \n    float subdivisions = 10.0;\n    vec2 fpos = floor(st * subdivisions);\n    st = subdivide(st, subdivisions);\n    \n    vec2 truchet = truchetPattern(st, random(fpos));\n    \n    //Different patterns\n    float tile = circleTile(truchet, 1.21, 0.81);\n    //float tile = duo(truchet);\n    //float tile = line(truchet);\n\n    vec3 color = tile * vec3(0.8157, 0.3725, 0.9529);\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}