{"ver":"0.1","info":{"id":"McBGzz","date":"1704349448","viewed":28,"name":"myFirstShader_mb19","username":"bam028","description":"Learnt this from a youtube video. (I shall reference later :P)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["firstproject"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n    vec3 a = vec3(0.5, 0.5, 0.5); \n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    return a + b*cos(6.28318*(c*t+d) );\n}\n\n\n// each shader is defined in the \"main image\" function with 2 parameters:\n    // fragColor: output parameter of Vector4 (holds the red, green, blue, and alpha channels)\n        // Alpha is for the \"Transparency of the pixel\n    // fragCoord: input parameter of Vector2 (x, and y coordinates of the current pixel)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // contains our transformed pixel coordinates\n    // iResolution is a global constant provided by shadertoy that contains 3 components \n        // holding the current Canvas size in pixels (vec3(x, y, z); x = width; y = height; z = depth)\n        // Since we have stated \"iResolution.xy\" we are only using a vec2 command with x. and y (z is used for 3D)\n    // ###### CODE #########\n    //vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    \n    // ###### CODE #########\n    //uv.x *= iResolution.x / iResolution.y; // This prevents any \"unwanted streching or Distortions\"\n    \n    // combining the 2 previous codes we can do:    \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv; // Kepps track of the original UV coordinates\n    \n    vec3 finalColor = vec3(0.0, 0.0, 0.0);\n    \n    for (float i = 0.0; i < 3.0; i++) {\n        // ###### CODE #########\n        // uv *= 2.0;\n        // uv = fract(uv);\n        // uv -= 0.5;\n        // We can summarize these top codes as:\n        uv = fract(uv * 1.5) - 0.5;\n\n\n\n        // uv = uv - 0.5;\n        // uv = uv * 2.0;\n    \n        float d = length(uv) * exp(-length(uv0));\n        // at this point we have a dark circle in the middle fading out into white\n            // the values outside of the circle are: \"positive\" (hence white)\n            // the values within the circle are: \"negative\" (hence black)\n    \n        // Sets the Color of our image\n    \n        // ###### CODE #########\n        // vec3 color = vec3(1.0, 2.0, 3.0);\n    \n        vec3 color = palette(length(uv0) + i * 0.4 + iTime * 0.4);\n    \n        // ###### CODE #########\n        // d -= 0.5;\n        \n        // We can Also use the \"sine function here\" to create a \"Radial Repetition of Rings\"\n        d = sin(d * 8.0 + iTime)/8.0; \n        // \"iTime\" creates an infinitely loop of rings that shrink towards the center\n        // \"sin(d * 8.0) creates Repetitive Rings\n        // \"sin(d * 8.0) / 8.0\" creates THICKER repetitive rings\n        \n        d = abs(d); //this converst the negative values to \"positive\" and gives us a \"dark lining\"\n        // inside values are now \"positive\"= white-r \n        \n        // To achieve a better transition we use \"Step\"\n        // Step has 2 parameters: \n            // 1. Threshold value\n            // 2. Regular value\n        // output = 2 states\n            // \"0\" when the \"Regular value\" is < the \"Threshold value\"\n            // \"1\" when the \"Regular value\" is > the \"Threshold value\"\n        \n        // ###### CODE #########\n        //d = step(0.1, d); // allows a \"sharper transition\"\n        \n        // Therefore all Regular values < 0.1 are assigned the default value of \"0\" = Black \n            // and all Regular Values > 0.1 are assigned the default value of \"1\" = White\n            \n        // We can also use \"Smoothstep\"\n        // d = smoothstep(0.0, 0.1, d);\n        \n        // This inverses our values\n        d = pow(0.01 / d, 1.2);\n        \n        // ###### CODE #########\n        // color *= d;\n        finalColor += color * d;\n    }\n    \n    // fragColor = vec4(color, 1.0);    \n    fragColor = vec4(finalColor, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}