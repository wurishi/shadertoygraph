{"ver":"0.1","info":{"id":"lXK3Ry","date":"1717856021","viewed":22,"name":"-Pi to Pi","username":"rdj_07","description":"renders the function given","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14\n\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n//y = f(x)\nfloat f(float x)\n{\n   return pow(x,sin(iTime));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    vec2 xrange = vec2(-10.0,10.0);\n    vec2 yrange = vec2(-10.0,10.0);\n    float eps = 0.1;\n\n    vec3 funcColor = vec3(1.0,0.5,0.0);\n    vec3 axisColor = vec3(0.0);\n    vec3 bgCol = vec3(1.0,1.0,1.0);\n    float axisWidth = 0.15;\n    \n    vec3 col = bgCol;\n    \n    //map to xrange,yrange\n    uv.x = map(uv.x,0.0,1.0,xrange.x,xrange.y);\n    uv.y = map(uv.y,0.0,1.0,yrange.x,yrange.y);\n    \n  \n   \n    //render the x and y axis\n    float midx = 0.0; // axis location x\n    float midy = 0.0; // axis location y\n    if(uv.y> midy - axisWidth &&  uv.y < midy + axisWidth)\n        col = axisColor;\n    if(uv.x> midx - axisWidth &&  uv.x < midx + axisWidth)\n        col = axisColor;\n    \n    \n      //render the function\n    if(uv.y>f(uv.x) - eps &&  uv.y < f(uv.x)+eps)\n         col = funcColor;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}