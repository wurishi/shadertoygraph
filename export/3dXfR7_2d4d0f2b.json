{"ver":"0.1","info":{"id":"3dXfR7","date":"1587868390","viewed":92,"name":"Lurnin;SimpleCircle","username":"nimda32","description":"just a test\n\ncredit:\nhttps://www.shadertoy.com/view/MssXDn","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Pi 3.141592\n#define Pi2 6.2918\n#define NumberOfParticles 64\n\nfloat starline(vec2 relpos,float confradius,float filmsize)\n{\n\tif(abs(relpos.y)>confradius) return 0.0;\n\tfloat y=relpos.y/confradius;\n\tfloat d=abs(relpos.x/filmsize);\n\treturn sqrt(1.0-y*y)/(0.0001+d*d)*0.00001;\n}\n\nfloat star(vec2 relpos,float confradius,float filmsize)\n{\n\tvec2 rotpos=mat2(cos(Pi/3.0),-sin(Pi/3.0),sin(Pi/3.0),cos(Pi/3.0))*relpos;\n\tvec2 rotpos2=mat2(cos(Pi/3.0),sin(Pi/3.0),-sin(Pi/3.0),cos(Pi/3.0))*relpos;\n\n    return starline(relpos,confradius,filmsize)+\n\t\tstarline(rotpos,confradius,filmsize)+\n\t\tstarline(rotpos2,confradius,filmsize);\n}\nvec3 palette(float x)\n{\n\treturn vec3(\n\t\tsin(x*2.0*Pi)+1.5,\n\t\tsin((x+1.0/3.0)*2.0*Pi)+1.5,\n\t\tsin((x+2.0/3.0)*2.0*Pi)+1.5\n\t)/2.5;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenpos=(2.0*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);\n\n\tfloat focaldistance=0.5+sin(iTime*0.05)*0.013;\n\tfloat focallength=0.100;\n\tfloat filmsize=0.036;\n\tfloat minconf=filmsize/10000.0;\n\tfloat lensradius=focallength/(1.5 + (.5 * 1.0+cos(iTime )) ) ;\n\n\tfloat filmdistance=1.0/(1.0/focallength-1.0/focaldistance);\n\t\n\tvec3 c=vec3(0.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0,0.0,0.0);// 0.25*sin(iTime+uv.xyx+vec3(0,2,4));\n    \n    float r = iResolution.y * .2;\n    float r2 = r * r;\n    \n    float x = iResolution.x * .5;\n    float y = iResolution.y * .5;\n        \n    float xPos = fragCoord.x - x;\n    float yPos = fragCoord.y - y;\n    \n    xPos = xPos * xPos;\n    yPos = yPos * yPos;\n    \n    if( xPos + yPos < r2  ){\n\t    //col =  .5 + 0.5 * sin( 10.0 * iTime + uv.xyx + vec3(0, 2, 4));\n    }\n\n     //(x0 + r cos theta, y0 + r sin theta)\n    \n    for(int i=0;i<NumberOfParticles;i++)\n\t{\n        float fi = float(i);\n        float fNum = float(NumberOfParticles);\n\t\tfloat t= fi / fNum;\n\t\tfloat a= t * Pi2 + iTime*0.1;\n        \n\t\t//vec3 pos = vec3( sin(2.0*a), -cos(2.0*a), -sin(3.0*a)) * 0.01;\n\t\tvec3 pos = vec3((.5 +cos(iTime)) + (r * sin(  a )) , (r * -sin( 2.0 * a )), 0) * .0002;\n\n\t\tpos.z+= 0.5 + (.01* (sin(sin(iTime))));\n\n\t\t\n\t\tfloat intensity=0.00005 + 0.00005 *(cos(iTime * 1.0)) ;\n\n\t\tvec2 filmpos=pos.xy/pos.z*filmdistance;\n\t\tfloat confradius=lensradius*filmdistance*abs(1.0/focaldistance-1.0/pos.z)+minconf;\n\n\t\tfloat diffusedintensity=intensity/(confradius*confradius);\n\n\t\tvec3 colour = palette(t);\n\n\t\tvec2 relpos=filmpos-screenpos/2.0*filmsize;\n\t\tif(length(relpos)<confradius) c+=colour*diffusedintensity;\n\n\t\tc+=colour*diffusedintensity*star(relpos,confradius,filmsize);\n\t}\n    \n    \n    // Output to screen    \n    fragColor = vec4(pow(c,vec3(1.0/1.0)),1.0) +  vec4( pow(col,vec3(1.0/2.2)),1.0);\n\n}","name":"Image","description":"","type":"image"}]}