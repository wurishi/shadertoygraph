{"ver":"0.1","info":{"id":"cdXSWX","date":"1669629857","viewed":109,"name":"Voronoïd Thought","username":"madax","description":"Voronoïd expérimentation to learn shaders","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoilearning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// method give a random number between 0 and 1.\nvec2 N22(vec2 p)\n{\n    vec3 a = fract(p.xyx*vec3(123.34, 234.34, 345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float m = 0.;\n    float t = iTime *.5;   // because points will moving, store time.\n   \n    float minDst = 100.; // Need to keep track on the minimum Dst between a given uv pos and the closest point\n    float cellIndex = 0.;\n     \n    vec3 col = vec3(0);\n    \n    if (false) {\n        // Generate a bunch of random moving points\n        for(float i=0.; i<50.; i++)\n        {\n            vec2 n = N22(vec2(i));\n            vec2 pointPos = sin(n*t);\n\n            float dst = length(uv-pointPos);\n            m += smoothstep(.03, .02, dst);\n\n            if (dst<minDst){\n                minDst = dst;\n                cellIndex = i;\n            }\n        }\n    }\n    else {\n        uv *= 10.;\n\n        vec2 grid = fract(uv)-.5;\n        vec2 id = floor(uv); \n        \n        vec2 cellId = vec2(0);\n        \n        for(float y=-1.; y<=1.; y++) {\n            for(float x=-1.; x<=1.; x++) {\n                vec2 offs = vec2(x,y);\n                \n                vec2 n = N22(id+offs);\n                vec2 pointPos = offs + sin(n*t)*.5;\n                float dst = length(grid-pointPos);\n                \n                if (dst<minDst){\n                    minDst = dst;\n                    cellId = id+offs;\n                }\n            }\n        }\n        \n        col = vec3(minDst);\n        col.rg = cellId * .12;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}