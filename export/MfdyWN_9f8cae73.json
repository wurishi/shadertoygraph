{"ver":"0.1","info":{"id":"MfdyWN","date":"1730838127","viewed":60,"name":"Audio scope - sin error","username":"dray","description":"Trig function input range is sometimes exceeded when using GPU sound.\nHere, 20 seconds is added every second to time of sine waves.\nOne audio channel uses sin directly (blue) and the other limits the input using mod(TAU) (green).  Red is difference.\n","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["sound","fm","scope","synthfest"],"hasliked":0,"parentid":"X3GXWy","parentname":"Audio scope - FM Synth"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nTest of sin accuracy for large inputs.\nSound generation is in Common.\nDepending on platform, sin() can break suddenly, gradually,\nor float resolution can be a limiting factor.\n\nOn my Windows laptop Chrome browser, chrome://flags/#use-angle choice D3D9 and D3D11on12\ndeteriorates sin() slowly while default, OpenGL and D3D11 break suddenly \nafter a few seconds.\nOld iphone Safari deteriorates sin() slowly.\n*/\n\nvec3 plot(float y,float va,float vb,vec3 clr) {\n    return abs( y*2. - (va+vb) ) <= abs(va-vb)+1.1/iResolution.y ? clr : vec3(0);\n}\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    U = U/iResolution.xy; // 0-1,0-1\n    float scale = 3./FREQ; // show 3 cycles of this frequency\n    float start = floor(iTime/scale)*scale;\n    vec2 v1 = sound( start + U.x*scale );\n    vec2 v2 = sound( start + (U.x+1.)*scale );\n    vec3 col = \n      plot( U.y - .75, v1.y, v2.y, vec3(0,1,0) ) +\n      plot( U.y - .25, v1.x, v2.x, vec3(0,0,1) ) + \n      plot( U.y - .5, v1.x-v1.y, v2.x-v2.y, vec3(1,0,0) ) +\n      plot( U.y - .5, 0., 0., vec3(.3) );\n    O = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592653589793\n#define TAU (2.*PI)\n\n#define FREQ  220.\n\nvec2 sound(float t) {\n    //t = round(t*5000.)/5000.;  // simulate low resolution floats\n    t += floor(t)*20.;      // add 20 seconds every second\n    t = TAU*FREQ*t;         // phase of sin\n    return vec2( sin(t), sin(mod(t,TAU)) ) * .2;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"\n// Fun stuff is in Common, not here\n\nvec2 mainSound( int samp, float time ) {\n    return sound(time);\n}\n","name":"Sound","description":"","type":"sound"}]}