{"ver":"0.1","info":{"id":"X3VGzz","date":"1717220016","viewed":46,"name":"A Really Dark Elevator","username":"Joshy20XX","description":"This is reworked example from a Shadertoy tutorial for drawing SDF lines. I imagined a person riding inside a descending dark elevator without knowing who will surprise him/her when the doors open.\n\nThe Shadertoy SDF line source commented in code.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["beginner","reworkedexample"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//====================================================================================\n// A Really Dark Elevator\n// Fork of \"A thin line\" by Joshy20XX. https://shadertoy.com/view/msBcRc\n// 2024-06-01 01:34:01\n//\n// Code for SDF line segment function\n// https://inspirnathan.com/posts/51-shadertoy-tutorial-part-5#using-the-sdsegment-sdf\n//====================================================================================\n\n// Modified SDF line segment function for scrolling the lines\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n  vec2 pa = p-a, ba = b-a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), tan(0.7), 1.0 );\n  return length( pa - ba*h );\n}\n\n// Original SDF line segment function\nfloat sdSegmentRegular( in vec2 p, in vec2 a, in vec2 b )\n{\n  vec2 pa = p-a, ba = b-a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h );\n}\n\nvec3 drawScene(vec2 uv) {\n  vec3 col = vec3(0);\n  \n  // Line segment's screen, placement, size\n  float segment = sdSegment(uv, vec2(0, 0), vec2(.7, tan(iTime/.65) * cos(.9)));\n  float segment2 = sdSegment(uv, vec2(-.1, 0), vec2(-.7, tan(iTime/.65) * cos(.9)));\n  float segment3 = sdSegmentRegular(uv, vec2(-0.1, -1.5), vec2(-.1, 1.));\n  \n  // Output lines to the screen\n  col = mix(vec3(0.725,0.749,0.608), col, smoothstep(-.1*tan(iTime/.65)*tan(iTime/.65), cos(0.07), segment));\n  col = mix(vec3(0.725,0.749,0.608), col, smoothstep(-.1*tan(iTime/.65)*tan(iTime/.65), cos(0.07), segment2));\n  col = mix(vec3(0.725,0.749,0.608), col, smoothstep(-.1*tan(iTime/.65)*tan(iTime/.65), 0.09, segment3));\n  \n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n  uv -= 0.5; // <-0.5,0.5>\n  uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n  vec3 col = drawScene(uv);\n\n  // Output to screen\n  fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}