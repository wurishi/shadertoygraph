{"ver":"0.1","info":{"id":"wsjfWy","date":"1590766872","viewed":186,"name":"simple plasma demo","username":"tripzilch","description":"for #genartcllub\n\nupdated with weird feedback effect","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["plasma","genartclub"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n  \tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 col = texture( iChannel0, uv ).xyz;\n    // do something to the colour\n    vec3 grey = vec3(dot(col, vec3(0.333)));\n    col = smoothstep(0.2, 0.9, mix(grey, col, 3.0));\n    fragColor = vec4(pow(col, vec3(0.45, 0.45, 0.45)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float plasma(vec2 uv, float t, float v) {\n    // these are just random values with time added (I'm not sure if I actually need this many)\n    vec2 p0 = vec2(0.23 + t + v, 0.76 - 0.4 * t - v * 0.3);\n    vec2 p1 = vec2(-0.77 + 0.1 * t - v, 0.11 + 0.7 * t + v * 0.25);\n    vec2 p2 = vec2(0.63 - 0.3 * t - v * 0.4, 0.26 + 0.2 * t + v);\n    vec2 p3 = vec2(-0.47 - 0.55 * t + v * 0.35, 0.91 - 0.35 * t - v);\n    float a = clamp(0.5 + v * 1.5, 0.5, 1.5);\n    // here is the formula\n    float grey = dot(sin(p0 + uv + a * sin(p1 + 1.6 * uv.yx)), sin(p2 - 1.2 * uv.yx + a * sin(p3 + 1.8 * uv)));\n    return smoothstep(0.0, 1.0, 0.5 + grey * 0.25);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.y;\n    // Time varying pixel color\n    uv *= 4.0;\n    vec3 cc = texture( iChannel0, fragCoord/iResolution.xy ).xyz;\n    cc = cc.rgb * vec3(.4,.5,.6) - cc.brg * vec3(.7,.5,.3);\n    vec3 col = vec3(plasma(uv, iTime, cc.r), plasma(uv, iTime, cc.g), plasma(uv, iTime, cc.b));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}