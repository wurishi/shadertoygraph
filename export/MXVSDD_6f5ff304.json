{"ver":"0.1","info":{"id":"MXVSDD","date":"1719989287","viewed":81,"name":"Digital London","username":"prosumer","description":"hw3","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 prosumer\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// the following code is altered from https://www.shadertoy.com/view/lsVBWy https://www.shadertoy.com/view/4dVyDd https://www.shadertoy.com/view/4s3BR8\n\n\n#define CELLS vec2(64.0,30.0)\n#define FALLERS 14.0\n#define FALLERHEIGHT 12.0\n#define PI 3.1415\n\nmat2 rotate2D(float angle)\n{\n    return mat2(cos(angle), -sin(angle), \n                sin(angle), cos(angle));\n}\n\nfloat radar(vec2 uv, vec2 center)\n{\n    const float tau =atan(1.)*8.;\n    vec2 v = uv - center;\n    float theta = atan(v.y, v.x);   \n    float ret;\n    ret = mod(theta + iTime*1.5, tau);\n    return ret;\n}\n\n\nvec2 rand(vec2 uv) {\n    return floor(abs(mod(cos(\n        uv * 652.6345 + uv.yx * 534.375 +\n        iTime * 0.0000005 * dot(uv, vec2(0.364, 0.934))),\n     0.001)) * 16000.0);\n}\n\nfloat fallerSpeed(float col, float faller) {\n    return mod(cos(col * 363.435  + faller * 234.323), 0.1) * 1.0 + 0.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    const vec2 TILES = vec2(400.0, 300.0);\n    float RATIO = iResolution.x / iResolution.y;\n    vec2 TILES_RATIO = TILES * vec2(RATIO, 1.0);\n    vec2 st = fragCoord.xy / iResolution.xy;   \n    st *= TILES;\n    st.x *= RATIO;\n    vec2 pix = mod(uv, 1.0/CELLS);\n    vec2 cell = (uv - pix) * CELLS;\n    pix *= CELLS * vec2(0.8, 1.0) + vec2(0.1, 0.0);\n   \n    float c = texture(iChannel0, (rand(cell) + pix) / 16.0).x;\n    \n    float b = 0.0;\n    for (float i = 0.0; i < FALLERS; ++i) {\n        float f = 3.0 - cell.y * 0.05 -\n            mod((iTime + i * 3534.34) * fallerSpeed(cell.x, i), FALLERHEIGHT);\n        if (f > 0.0 && f < 1.0)\n            b += f;\n    }\n    vec3 color = vec3(0.0);\n    color.g = c * b;\n    \n    vec2 rot = st - (TILES_RATIO * 0.5);\n    rot = rotate2D(sin(iTime * 0.2) * PI) * rot;\n    rot += (TILES_RATIO * 0.5);\n    \n    float f1 = radar(rot, TILES_RATIO * 0.5);\n    \n    float noise = texture(iChannel1, uv).x;\n\t\n    color.rgb += smoothstep(.6,0.,f1*noise)/1.5;\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}