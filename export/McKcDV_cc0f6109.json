{"ver":"0.1","info":{"id":"McKcDV","date":"1732446028","viewed":99,"name":"16.7 Milion Voxels","username":"DerShade","description":"lowres. fast. the 256x256x256 space to crunch easily by mobile phone or some ten years old intelHD graphics.\n16 milion voxels with \"rediffraction\" at your disposal. explore the pleasure inside a concrete block or drop of watter.","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["voxels","landscape","boolean","world","diffraction","infinte"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfloat r=1./float(iResolution),f,l=3.;\nvec2 uv;vec4 col;\n\nuv.x = fragCoord.x/(iResolution.x*(iResolution.x/640.));\nuv.y = fragCoord.y/(iResolution.y*(iResolution.y/360.));\n \n     for(f=0.;f<l;f++){\n                     col+= texture(iChannel0, uv);\n     uv.x+=r;        col+= texture(iChannel0, uv);  \n             uv.y+=r;col+= texture(iChannel0, uv);  \n     uv.x-=r;        col+= texture(iChannel0, uv);  \n     \n     }\n\n    fragColor = vec4(col)/(l*4.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//still at least 30fps at the crap gpu. different \"redirfraction\" and more than double the res.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{ \nif (floor(fragCoord.x)<640.&&floor(fragCoord.y)<360.){\nint s1,s2,s3,s4,s5;\n    float a,aa,df,rf,s,r,b,g,z,x,mx,mz,my,yy,\n          xx,zz,y,gl,sy,sy1,o1,o2,o3,o4,o5,l=256.,f=0.; //l is view quality/depth\n    vec2 uv=fragCoord/iResolution.xy;\n\n    a  =sin((iTime/11.7)+cos(iTime/13.3))/5.; // roxanglez\n    aa =sin(iTime/5.)/2.+0.4; // rotyngle.\n    mz =iTime*3. ;                // camz movement\n    mx =sin(iTime)/4.+iTime*1.1; // xcam movement\n    my = 45.+cos(iTime/9.2)*40.;      // camy movement\n    \n    for(f=0.;f<l;f++){ // do 256 layers\n    df= 1.+(o4/880.);\n    rf= (o4/(8.-df));//inverted diffraction index    \n    zz = (f/(10.-f/35.))+((sin(fragCoord.x*f*933./uv.y)+cos(fragCoord.y*f*345./uv.x))/20.); // z+ noise                                  \n    \n    s  = 0.8; // thickness base of some/ puffiness of the sandwaves                  \n    \n    xx = ((fragCoord.x-320.)/640.)*     // coords -0.5 to 0.5\n        (iResolution.x/iResolution.y)*zz;    // aspect r.   \n    yy = ((fragCoord.y-180.)/360.)*zz;\n    \n    z  = cos(a-rf)*(zz)-sin(a-rf)*(xx);       //rotyrant\n    x  = sin(a-rf)*(zz)+cos(a-rf)*(xx); \n    y  = yy;\n    \n    xx = cos(a/2.3)*(x)-sin(a/2.3)*(y); //rotzilla\n    yy = sin(a/2.3)*(x)+cos(a/2.3)*(y); \n    zz = z;\n    \n    y =  cos(aa+rf)*(yy)-sin(aa+rf)*(zz); // rotox\n    z =  sin(aa+rf)*(yy)+cos(aa+rf)*(zz); \n    x =  xx;\n   \n    x+=mx;y+=my;z+=mz; // add movement\n    //x=floor(x);y=floor(y);z=floor(z);\n    // objects geometry\n    sy = (sin(x/5.)+sin(z/4.)/5.+sin(x/3.)+cos(z/6.)+cos(z*2.)/6.+cos(z/1.1)/3.); // sand source  \n    s1 |= int(y+sy>-s&&y+sy<s); //sand\n    s2 |= (0xf01111>>int(x/5.2)&1)&(0x4f030f>>int(z/5.2)&1)&int(y>0.&&y<5.)>>s1; // gray buildings\n    s3 |= (0xf0f1001>>int(x)&1)&(0xaaf44f>>int(z)&1)&int(y*2.>0.&&y*2.<7.)>>s2>>s1; // red buildings\n    s5 += int(y+sy*sin(z-sin(y))*sin(x-cos(y+iTime*2.))*18.-50.>-s&&y+sy-50.<s)>>s1>>s2>>s3;// green lianaworms\n    s4 += int(0.7+(sin(x/13.2)*sin(z/13.2)*cos(y/13.2))<0.)>>s1>>s2>>s3; // big balls\n    s4 += int(0.85+mod(y/80.,0.1)+(sin(x/5.2)*sin(z/5.2))<0.&&y+sy>s&&y+sy<s+150.)>>s1>>s2>>s3; // erected towers\n    // objects visibility/priority\n    o1 += float(s1>>s2>>s3);\n    o2 += float(s2>>s3);\n    o3 += float(s3);\n    o4 += float(s4)/(l*8.);\n    o5 += float(s5);\n    \n    r = (o1/2. +o2/3.+o3/2.+o4/8.+o5/12.-rf*2.)*(1.-f/l);\n    g = (o1/3. +o2/3.+o3/8.+o4/4.+o5/8.-rf*2.)*(1.-f/l);\n    b = (o1/12.+o2/2.+o3/12.+o4/3.-rf*2.)*(1.-f/l);\n    \n    if (o1+o2+o3+o5>0.) {break;}\n    \n    }\n    // objects color\n\n    // Output to screen\n    fragColor = vec4(r,g,b,1.0)*4.+rf;  \n}}\n","name":"Buffer A","description":"","type":"buffer"}]}