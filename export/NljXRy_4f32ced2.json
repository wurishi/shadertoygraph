{"ver":"0.1","info":{"id":"NljXRy","date":"1627951442","viewed":86,"name":"Simplest Mandelbrot Shader","username":"Peace","description":"Simplest implementation of mandelbrot fractal","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Enable high precision if the gpu and the shading language supports it\nprecision highp float;\n\nfloat mandelbrot(vec2 c, int max_iter)\n{\n    vec2 z = vec2(0.0);\n    int iter = 0;\n    for(int i = 0; i < max_iter; ++i)\n    {\n        //Real number math from complex formula: z = z ^ 2 + c\n        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n        //If z is out of bounds of the screen break\n        if(z.x * z.x + z.y * z.y > 4.)\n            break;\n        ++iter;\n    }\n    //Returns how complex this pixel\n    return float(iter) / float(max_iter);\n}\n\n//You can ignore these one, it returns heatmap like image \n//based on complexity of the pixels (more complex = red)\nvec3 colorMandelbrot(float m)\n{\n    vec3 col = vec3(0);      \n    col.b = smoothstep(0.4, 0.8, m);\n\n    float OutColorGreen = smoothstep(0.0, 0.7, m);\n    float InColorGreen = smoothstep(1.0, 0.9, m);\n    col.g = min(InColorGreen,OutColorGreen);\n\n\n    float OutColorBlue = smoothstep(1.0, 0.0, m);          \n    float InColorBlue = smoothstep(0.0, 0.25, m); \n    col.r = pow(min(OutColorBlue,InColorBlue), 1.);  \n\t\n    return pow(col, vec3(0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    float zoom = 3.5 * pow(1.0 - iMouse.x / iResolution.x, 8.0);\n    uv *= zoom;\n    uv += vec2(-.69955, .37999); //Just nice spot to zoom to\n    \n    vec3 col = colorMandelbrot(mandelbrot(uv, 256));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}