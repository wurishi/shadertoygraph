{"ver":"0.1","info":{"id":"3tKXWy","date":"1594229671","viewed":913,"name":"Kuwahara Filter","username":"mithrandir","description":"Kuwahara filter. \nCould be used as post-process effects in video games for a paint-like effect.","likes":14,"published":1,"flags":0,"usePreview":1,"tags":["kuwahara"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ACTIVATE_FILTER 1\n#define SLOPE_FILTER 1\n#define X_RANGE 2.0\n#define Y_RANGE\t2.0\n\nfloat GetPixelAngle(vec2 uv)\n{\n    float GradientX = 0.0;\n    float GradientY = 0.0;\n    \n    float SobelX[9] = float[9](-1.0, -2.0, -1.0, \n        \t\t\t\t0.0, 0.0, 0.0, \n        \t\t\t\t1.0, 2.0, 1.0);\n        \n    float SobelY[9] = float[9](-1.0, 0.0, 1.0,\n        \t\t\t   -2.0, 0.0, 2.0,\n        \t\t\t   -1.0, 0.0, 1.0);\n        \n    int i = 0;\n    \n    for (float x = -1.0; x <= 1.0; x++)\n    {\n        for (float y = -1.0; y <= 1.0; y++)\n        {\n            vec2 offset = vec2(x,y);\n            vec2 Coords = uv + offset;\n            vec3 PixelColor = texture(iChannel0, Coords).rgb;\n            float PixelValue = dot(PixelColor, vec3(0.3, 0.59, 0.11));\n            \n            GradientX += PixelValue * SobelX[i];\n            GradientY += PixelValue * SobelY[i];\n            i++;\n        }\n    }\n    \n    return atan(GradientY/GradientX);\n}\n\nvec4 GetKernelMeanAndVariance(vec2 uv, vec4 Range, mat2 RotationMatrix)\n{\n    vec3 Mean = vec3(0.0);\n    vec3 Variance = vec3(0.0);\n    float Samples = 0.0;\n    \n    for (float x = Range.x; x <= Range.y; x++)\n    {\n        for (float y = Range.z; y <= Range.w; y++)\n        {            \n            vec2 offset = vec2(0.0);\n            \n            #if SLOPE_FILTER\n            offset = vec2(x,y) * RotationMatrix;\n            #else\n            offset = vec2(x,y);\n            #endif\n            \n            vec2 Coords = (uv + offset) / iResolution.xy;\n            vec3 PixelColor = texture(iChannel0, Coords).rgb;\n            \n            Mean+= PixelColor;\n            Variance += PixelColor * PixelColor;\n            Samples++;\n        }\n    }\n    \n    Mean /= Samples;\n    Variance = Variance / Samples - Mean * Mean;\n    \n    float TotalVariance = Variance.r + Variance.g + Variance.b;\n    return vec4(Mean.r, Mean.g, Mean.b, TotalVariance);\n}\n\nvec3 KuwaharaFilter(vec2 uv)\n{    \n    vec4 MeanAndVariance[4];\n    vec4 Range;\n    \n    float Angle = GetPixelAngle(uv);\n    mat2 RotationMatrix = mat2(cos(Angle), -sin(Angle),\n                               sin(Angle), cos(Angle));\n    \n    Range = vec4(-X_RANGE, 0.0, -Y_RANGE, 0);\n    MeanAndVariance[0] = GetKernelMeanAndVariance(uv, Range, RotationMatrix);\n    \n    Range = vec4(0.0, X_RANGE, -Y_RANGE, 0.0);\n    MeanAndVariance[1] = GetKernelMeanAndVariance(uv, Range, RotationMatrix);\n    \n    Range = vec4(-X_RANGE, 0.0, 0.0, Y_RANGE);\n    MeanAndVariance[2] = GetKernelMeanAndVariance(uv, Range, RotationMatrix);\n    \n    Range = vec4(0.0, X_RANGE, 0.0, Y_RANGE);\n    MeanAndVariance[3] = GetKernelMeanAndVariance(uv, Range, RotationMatrix);\n    \n    vec3 FinalColor = MeanAndVariance[0].rgb;\n    float MinVariance = MeanAndVariance[0].a;\n    \n    for (int i = 1; i < 4; i++)\n    {\n       \tif (MeanAndVariance[i].a < MinVariance)\n        {\n            FinalColor = MeanAndVariance[i].rgb;\n            MinVariance = MeanAndVariance[i].a;\n        }\n    }\n    \n    return FinalColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec3 Color = vec3(0.0);\n    \n     #if ACTIVATE_FILTER > 0\n    Color = KuwaharaFilter(fragCoord);\n    #else \n    Color = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    #endif\n    fragColor = vec4(Color.rgb, 1.);\n}","name":"Image","description":"","type":"image"}]}