{"ver":"0.1","info":{"id":"dtfBzX","date":"1693251731","viewed":44,"name":"Mandelbrot set, purple to blue","username":"c0b0w","description":"Inspired by Pezzza's Work : https://www.youtube.com/watch?v=uc2yok_pLV4","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 multiplicationVectorielle(vec2 a, vec2 b) {\n    mat2 matriceA = mat2(a.x, a.y, -a.y, a.x);\n    return matriceA * b;\n}\n\n// Inigo Quilez : https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) \n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// Zn+1 = Z^2n + C\nvec2 computeNext(vec2 current, vec2 c) {\n    vec2 z = multiplicationVectorielle(current, current) + c;\n    return z;\n}\n\nfloat mod2(vec2 z) {\n    return z.x * z.x + z.y * z.y;\n}\n\n// Progressivly zoom to a destination c = −0,067 + 0,661i\nvec2 zoom(vec2 c, vec2 cDestination) {\n    return vec2(c.x / (12./4.*iTime), c.y / (12./4.*iTime));\n}\n\n\nfloat fractal(vec2 uv, float N) {\n    float nb_iterations = N;\n    float i = 0.; // a quelle itération on est rendu\n    vec2 z = vec2(0.); // Iteration 1 : z = z0\n    \n    \n    vec2 c = uv * 2.; // dezoomer c range : <-1.777, 1.777>\n    c.x -= 0.5; // offset pour centrer c = (-1.5, 1)\n    \n    \n    //Variation au cours du temps\n    // c = vec2(0.8 * sin(iTime), -0.8 * sin(iTime));\n    // c = zoom(c, vec2(0));\n    // c = vec2(-0.067, 0.661);\n    // c /= iTime;\n    \n    while(i < nb_iterations && mod2(z) < 4.) {\n        z = computeNext(z, c);\n        i ++;\n    }\n    \n    // if (i == nb_iterations) i = 0.; // Interior in outside color\n    \n    \n    // smooth-iteration-count formula Inigo Quilez : https://iquilezles.org/articles/msetsmooth/\n    float mod = sqrt(mod2(z)); \n    float smooth_iteration = i - log2(max(1., log2(mod)));\n    \n    return i;\n    \n}\n\n\n// palette colors values : http://dev.thi.ng/gradients/ \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // range : <0, 1>\n    uv -= 0.5; // draw from the center, range : <-0.5,0.5> \n    uv.x *= iResolution.x/iResolution.y; // range x : <−0.888, 0.888> -- y : <-0.5, 0.5>\n    \n    float N = 64.;\n    float iteration = fractal(uv, N);\n\n    \n    // vec3 col = vec3(iteration);\n    // vec3 col = palette(iteration, vec3(2., 0.2, 0.), vec3(0., 0.5, 0.), vec3(0., -0.66, 0.0), vec3(0., 0.333, 0.));\n    // vec3 col = palette(iteration/N, vec3(0.948, 0.218, 0.000), vec3(0.028, 0.418, 0.000), vec3(-0.672, -1.612, 0.000), vec3(0.000, 0.248, 0.000));\n    \n    vec3 col = palette(iteration/N, vec3(0.168, 0.278, 0.500), vec3(0.000, 0.500, 0.500), vec3(1.778, 1.000, 1.000), vec3(0.000, 0.333, 0.667));\n    if (iteration == N) col = vec3(0.); // Interior in black\n    \n    fragColor = vec4(col,1.0); // Output to screen\n}","name":"Image","description":"","type":"image"}]}