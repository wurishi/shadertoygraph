{"ver":"0.1","info":{"id":"MlByzw","date":"1507886394","viewed":448,"name":"Glowing lines","username":"Zanhu","description":"Testing particles in shadertoy with simple lines that accumulate color to a buffer.\nMouse click clears the accumulation.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["line","screensaver","particle","accumulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//-----------------------------------------------------------------------------\n// The MIT License\n// Copyright © 2017 Daniel Forsberg\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//-----------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch( iChannel0, ivec2( fragCoord ), 0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//-----------------------------------------------------------------------------\n// The MIT License\n// Copyright © 2017 Daniel Forsberg\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// Buffer A contains particles state (position and velocity) in texels (0, 0) ... (0, NUM_PARTICLES).\n// Each frame previous particle state is loaded, simulated and saved back to the same buffer.\n// Particles form a line ring where every particle tries to approach its neighbors leading to unpredictable motion.\n//-----------------------------------------------------------------------------\n\n#define NUM_PARTICLES 16\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int index = int( fragCoord.x );\n    if( index >= NUM_PARTICLES )\n        return;\n    \n    vec4 particleState = texelFetch( iChannel0, ivec2( index, 0 ), 0 );\n    \n    if( iFrame < 10 )\n    {\n        // Initialize particle state\n        particleState = texelFetch( iChannel1, ivec2( index, 0 ), 0 );\n        particleState.zw = 0.3 * ( particleState.zw - 0.5 );\n    }\n    \n    vec2 position = particleState.xy;\n    vec2 velocity = particleState.zw;\n    \n    float timeStep = iTimeDelta;\n    float halfTimeStep = 0.5 * timeStep;\n    \n    // Half position update\n    position += velocity * halfTimeStep;\n    \n    // Accelerate towards next particle\n    int nextIndex = ( index + 1 ) % NUM_PARTICLES;\n    vec2 nextPos = texelFetch( iChannel0, ivec2( nextIndex, 0 ), 0 ).xy;\n    velocity += 0.01 * normalize( nextPos - position ) * timeStep;\n    \n    // Accelerate towards previous particle\n    int prevIndex = ( index - 1 ) % NUM_PARTICLES;\n    vec2 prevPos = texelFetch( iChannel0, ivec2( prevIndex, 0 ), 0 ).xy;\n    velocity += 0.01 * normalize( prevPos - position ) * timeStep;\n    \n    // Half position update\n    position += velocity * halfTimeStep;\n    \n    // Screen edge collisions\n    if( position.y < 0.0 )\n       \tvelocity.y *= -1.0;\n    if( position.x < 0.0 )\n       \tvelocity.x *= -1.0;\n    if( position.y >= 1.0 )\n       \tvelocity.y *= -1.0;\n    if( position.x >= 1.0 )\n       \tvelocity.x *= -1.0;\n    \n    fragColor = vec4( position.xy, velocity.xy );\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//-----------------------------------------------------------------------------\n// The MIT License\n// Copyright © 2017 Daniel Forsberg\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// Buffer B contains the accumulated color seen in the final image.\n// Each frame particle lines from Buffer A are additively rendered on top of the image \n// from previous frame while the whole image slowly blends back to the background gradient.\n//-----------------------------------------------------------------------------\n\n#define NUM_PARTICLES 16\n\n#define MOD3 vec3( 443.8975, 397.2973, 491.1871 )\n\nfloat hash12( vec2 p )\n{\n\tvec3 p3 = fract( vec3( p.xyx ) * MOD3 );\n\tp3 += dot( p3, p3.yzx + 19.19 );\n\treturn fract( ( p3.x + p3.y ) * p3.z );\n}\n\nvec3 hash32( vec2 seed )\n{\n\tvec3 p3 = fract( vec3( seed.xyx ) * MOD3 );\n\tp3 += dot( p3, p3.yxz + 19.19 );\n\treturn fract( vec3( ( p3.x + p3.y ) * p3.z, ( p3.x + p3.z ) * p3.y, ( p3.y + p3.z ) * p3.x ) );\n}\n\nvec3 ditherRGB( vec3 color, vec2 seed )\n{\n\treturn color + hash12( seed ) / 255.0f;\n}\n\nfloat distanceToLine( vec2 a, vec2 b, vec2 p )\n{\n\tvec2 v = b - a;\n    vec2 w = p - a;\n    float c1 = dot( v, w );\n    if( c1 <= 0.0 )\n        return distance( p, a );\n    float c2 = dot( v, v );\n    if( c2 <= c1 )\n        return distance( p, b );\n    float c = c1 / c2;\n    vec2 d = a + c * v;\n    return distance( p, d );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float c = mix( 0.1, 0.6, uv.y );\n    vec4 bgColor = vec4( ditherRGB( vec3( c, c, c ), fragCoord.xy ), 1.0 );\n    \n    vec4 newColor = texelFetch( iChannel1, ivec2( fragCoord ), 0 );\n\n    for( int index = 0; index < NUM_PARTICLES; ++index )\n    {\n        vec4 state0 = texelFetch( iChannel0, ivec2( index, 0 ), 0 );\n        vec2 pos0 = state0.xy * iResolution.xy;\n        \n        int nextIndex = ( index + 1 ) % NUM_PARTICLES;\n        vec4 state1 = texelFetch( iChannel0, ivec2( nextIndex, 0 ), 0 );\n        vec2 pos1 = state1.xy * iResolution.xy;\n        \n        if( distanceToLine( pos0, pos1, fragCoord.xy ) < 1.0 )\n        {\n            newColor.rgb += 0.05 * vec3( 243, 60, 10 ) / 255.0;\n        }\n    }\n    \n\tfloat t = 0.5 * iTimeDelta;\n    if( iMouse.z > 0.0 )\n       t = 1.0;\n    \n    fragColor = mix( newColor, bgColor, t );\n}\n","name":"Buf B","description":"","type":"buffer"}]}