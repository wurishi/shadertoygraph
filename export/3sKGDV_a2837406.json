{"ver":"0.1","info":{"id":"3sKGDV","date":"1570993260","viewed":113,"name":"Spiral - Baldwin Shape Extension","username":"mujina","description":"Spiraling shader, that can create arbitrary geometric shapes as particular case (just comment out the right parts).","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["spiral","shape","baldwin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5; // -0.5 <> 0.5\n    uv.x *= iResolution.x / iResolution.y;\n\t\n    int N = 4; // SIDES OF SHAPE\n    \n    // angle\n    float a = atan(uv.y, uv.x); // radians(180.); // ROTATE SHAPE\n    \n    // extension of Baldwin's shape: transforming to a spiral\n    float spiral_step = 2.; // SET TO 0 FOR SIMPLE GEOMETRIC SHAPE (removes spiral)\n    a += spiral_step * iTime * length(uv);\n    \n    // slice of circle\n    float f = radians(360.)/float(N);\n    \n    // distance function\n    // float d = floor(0.5 + a/f) * f -a ; // UNCOMMENT TO UNDERSTAND CONSTRUCTION\n    float d = cos(floor(0.5 + a/f) * f - a) * length(uv);\n\n    // vec3 col = vec3(d); // UNCOMMENT TO SEE SMOTH VERSION AND UNDERSTAND CONSTRUCTION\n    vec3 col = vec3(1. - smoothstep(.24,.34,d)); // UNCOMMENT TO CUT\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}