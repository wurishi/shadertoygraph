{"ver":"0.1","info":{"id":"NtfcWl","date":"1648867253","viewed":41,"name":"sdf_practice_heart","username":"riveranb","description":"signed distance field practice series - heart","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ref: https://www.ronja-tutorials.com/post/034-2d-sdf-basics/#base-setup\n\nvec2 prim_translate(vec2 pos, vec2 translate)\n{\n    return pos - translate;\n}\n\nvec2 prim_rotate(vec2 pos, float rotation)\n{\n    const float PI = 3.14159;\n    float radian = rotation * PI * -2.0;\n    float sine = sin(radian);\n    float cosine = cos(radian);\n    return vec2(cosine * pos.x + sine * pos.y, cosine * pos.y - sine * pos.x);\n}\n\nvec2 prim_scale(vec2 pos, float scale)\n{\n    return pos / scale;\n}\n\nfloat rectangle(vec2 pos, vec2 center, vec2 hsize)\n{\n    vec2 edge_distance = abs(pos - center) - hsize;\n    float out_distance = length(max(edge_distance, 0.0));\n    float in_distance = min(max(edge_distance.x, edge_distance.y), 0.0);\n    return out_distance + in_distance;\n}\n\nfloat circle(vec2 pos, vec2 center, float radius)\n{\n    return length(pos - center) - radius;\n}\n\nfloat heart(vec2 pos, vec2 center, float range)\n{\n    pos = (pos - center) * vec2(2.2, 2.95);\n    return pow(pos.x, 2.0) + pow(pos.y - sqrt(abs(pos.x)), 2.0) - range;\n}\n\nfloat prepare_scene(vec2 uv)\n{\n    vec2 center = vec2(0.9, 0.33);\n    vec2 pos = uv;\n    float scaler_anim = (sin(iTime) * 0.5 + 0.9) * 2.0;\n    \n    //pos = prim_translate(uv, vec2(sin(iTime) * 0.1, cos(iTime) * 0.08));\n    pos -= center;\n    pos = prim_rotate(pos, iTime * 0.04);\n    pos = prim_scale(pos, scaler_anim);\n    pos += center;\n    float distance = 0.0;\n    //distance = rectangle(pos, center, vec2(0.4, 0.3));\n    //distance = circle(pos, center, 0.33);\n    distance = heart(pos, center, 0.5);\n    \n    // fix scaled distance\n    distance *= scaler_anim;\n    \n    return distance;\n}\n\nvec4 paint_scene(float dis)\n{\n    float dgradient = fwidth(dis) * 0.5;\n    float aacutoff = smoothstep(dgradient, -dgradient, dis);\n    vec4 in_color = vec4(1.0, 0.4, 0.0, 1.0);\n    vec4 out_color = vec4(0.0, 0.3, 1.0, 1.0);\n    float line_spacing = 1.0;\n    float line_thinkness = 0.02;\n    float sublines_count = 4.0;\n    float subline_thinkness = 0.001;\n    \n    vec4 color = mix(in_color, out_color, step(0.0, dis));\n    \n    float linespace_sdf = abs(fract(dis / line_spacing + 0.5) - 0.5) * line_spacing;\n    float lines = smoothstep(line_thinkness - dgradient, \n        line_thinkness + dgradient, \n        linespace_sdf);\n\n    float subline_spacing = line_spacing / sublines_count;\n    float sublinespace_sdf = abs(fract(dis / subline_spacing + 0.5) - 0.5) * subline_spacing;\n    float sublines = smoothstep(subline_thinkness - dgradient, \n        subline_thinkness + dgradient, \n        sublinespace_sdf);\n\n    return color * lines * sublines;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.yy;\n    //uv.x *= iResolution.x / iResolution.y; \n\n    float distance = prepare_scene(uv);\n    \n    // Output to screen\n    fragColor = paint_scene(distance);\n}","name":"Image","description":"","type":"image"}]}