{"ver":"0.1","info":{"id":"ft3fW7","date":"1663148677","viewed":91,"name":"Breathing blurry circle","username":"Grapix","description":"Experiment when trying the book of shader chapiter 1 on shapes","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(in vec2 _uv, in vec2 _center, in float _radius, in float _boundary_factor){\n    vec2 dist = _uv - _center;\n\treturn 1.-smoothstep(_radius-(_radius*_boundary_factor),\n                         _radius+(_radius*_boundary_factor),\n                         dot(dist,dist)*4.0);\n}\n\n//  Function from IÃ±igo Quiles\n//  www.iquilezles.org/www/articles/functions/functions.htm\nfloat cubicPulse( float c, float w, float x ){\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uvRatio = uv;\n    uvRatio.x *= ratio;\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float radius = cubicPulse(0.5,0.2,fract(0.5 * iTime));//cubicPulse(0.5,0.2,iTime);//mod(cubicPulse(0.5,0.2,iTime), 1.0); //0.5 * cos(iTime) + 0.5;\n    float boundary = cubicPulse(0.6,0.3,fract(0.5 * iTime + 14455.0));\n    \n    // Output to screen\n    fragColor = vec4(vec3(circle(uvRatio, vec2(0.5 * ratio, 0.5), radius, boundary)),1.0);\n}","name":"Image","description":"","type":"image"}]}