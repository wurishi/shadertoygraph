{"ver":"0.1","info":{"id":"4c2SRm","date":"1706157353","viewed":57,"name":"Torii space :)","username":"jcponcemath","description":"Torii space :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tutorial","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D rotation function\nmat2 rot2D(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// Torus\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n// Scene distance\nfloat map(vec3 p) {\n\n    p.z += iTime * 0.3;\n    \n    vec3 q = p;\n  \n    q = fract(p) - 0.5;\n\n    return sdTorus(q, vec2(0.2, 0.068)); // distance to an object\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( fragCoord -.5* iResolution.xy ) / iResolution.y;\n\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n  \n\t// Default circular motion if mouse not clicked\n    //if(iMouse.z) m = vec2(-1.0, 0.0); \n  \n    vec3 ro = vec3(0.0, 0.0, -3.0); // ray origin\n    vec3 rd = normalize(vec3(uv, 1.0)); // ray direction\n    vec3 col = vec3(0.0); // final pixel color\n    \n    float t = 0.0; // total distance travelled\n  \n    // Horizontal camera rotation\n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n  \n    // Horizontal camera rotation\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n  \n    // Raymarching\n  \n    for(int i = 0; i < 80; i++){\n      vec3 p = ro + rd * t; // position aling the ray\n\n      p.xy *= rot2D(t*0.06);  // rotate ray around z-axis\n\t\t\t\n\t\t\tp.y += sin(t*0.1)*0.3; // wiggle ray\n  \n      float d = map(p);\n    \n      t += d;\n      \n      if (d < 0.001 || t > 100.0) break; // \"d\" early stop if close enough\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // \"t\" early stop if too far\n    }\n  \n    // Coloring\n    col = vec3(t * 0.09);\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}