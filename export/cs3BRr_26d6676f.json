{"ver":"0.1","info":{"id":"cs3BRr","date":"1696778230","viewed":234,"name":"warp particles","username":"kastorp","description":".","likes":27,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","particles"],"hasliked":0,"parentid":"Nd2SWc","parentname":"Large scale Flocking (analysis)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Warp Particles by Kastorp\n//-----------------------------\n\nGETTERS\n\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{   \n        fragColor=vec4(0);\n    ivec4 nb = getClosest(ivec2(pos/ZOOM));\n  \n    float d0 = 0.;\n    bool ghost;\n    for(int i = ZERO; i<4; i++)\n    {\n        if(nb[i]<0) continue;\n        vec4 pi = getParticle(nb[i],ghost);\n        \n        d0 = distance(pos/ZOOM,pi.xy);\n        fragColor.xyz += smoothstep(1.,.5,d0)*vec3(.1,.3,1);   //DISTANCE    \n        \n        float dv= sdSegment( pos/ZOOM, pi.xy, pi.xy - 3.*pi.zw);        \n        fragColor.x +=  step(dv,.2) *length(pi.zw)*.6; //VELOCITY  \n        \n        float md=0.;\n        //CONNECTIONS\n        #ifdef N8  \n            ivec4[2] nb = getNeighbor2(nb[i]);\n            for(int n = ZERO; n < 2; n++)\n            for(int j = ZERO; j < 4; j++)\n            {\n            \n                if(nb[n][j]<=0) continue;\n                vec2 pn=getParticle(nb[n][j],ghost).xy;\n                float dv= sdSegment( pos/ZOOM, pi.xy,pn ); \n                fragColor.y += smoothstep(0.5,.2,dv) *.15*(1.- exp(-d0*d0*.2) );\n                md= max(md,distance(pi.xy,pn));\n                \n            }\n           \n        #else\n            ivec4 nb = getNeighbor(nb[i]);\n            for(int j = ZERO; j < 4; j++)\n            {\n                if(nb[j]<=0) continue;\n                vec2 pn=getParticle(nb[j],ghost).xy;\n                 float dv= sdSegment( pos/ZOOM, pi.xy,pn ); \n                fragColor.y +=  smoothstep(0.5,.2,dv) *.25*(1.- exp(-d0*d0*.2) );\n                md= max(md,distance(pi.xy,pn));\n            }\n        #endif\n         //fragColor.z *= .5 +.5*smoothstep(8.,7.,md); \n    }\n    \n    \n    //gauge\n    if(all(lessThan(pos,vec2(N.x,5)))) {\n        float s = textureLod(iChannel3, vec2(pos/iResolution.xy),5.).x,\n               ss = smoothstep(s+.01,s-.01,pos.x/float(N.x));\n        fragColor=mix(vec4(.5),vec4(1,1,0,0),ss);\n     }\n  \n  /*\n    //mouse closest particle\n    float d = 0.;   \n    ivec4 nbm = getClosest(ivec2(iMouse.xy/ZOOM));\n    for(int i = 0; i<4; i++)\n    {\n        if(nbm[i]<0) continue;\n        vec4 pi = getParticle(nbm[i],ghost);\n        \n        d += exp(-distance(pos/ZOOM,pi.xy)*3.);\n     }\n     \n    fragColor += 5.*vec4(4,3,2,1)*d;\n   */\n\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//configurable settings:\n#define NP 4000. //number of particles,  must be <=  (iResolution.x)^2\n#define NGH 200 // number of ghosts scanned each frame\n#define dt 1.5 // time interval;  dt<0.5 => 1% ghosts,  dt>2. => 50% ghosts\n#define DIST .8 //average dist\n#define N8  //interact with 8 particles (default is with 4 particle)\n\n//-----------------------\n#define ZERO  min(iFrame,0)\n#define N ivec2(int(sqrt(NP)),int(sqrt(NP)))\n#define size vec2(300.,300.*iResolution.y/iResolution.x) // (iResolution.xy/ZOOM)\n#define ZOOM (iResolution.x/300.) // 1.= full resolution 2.=half resolution with faster movement and lower max density\n\n#define mouse (iMouse/ZOOM)\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define GETTERS ivec4 getClosest(ivec2 p){ return floatBitsToInt(texel(iChannel2, p));} \\\nivec4 getNeighbor(int id){ return floatBitsToInt(texel(iChannel1, i2xy(id)));} \\\nivec4[2] getNeighbor2(int id){ uvec4 v= floatBitsToUint(texel(iChannel1, i2xy(id))); return ivec4[2](ivec4(v&65535u), ivec4(v>>16)); }\\\nvec4 getParticle(int id,out bool ghost){ vec4 p= texel(iChannel0, i2xy(id));ghost=min(p.x,p.y)<0.;return vec4(abs(p.xy),p.zw); }\n\nconst int tot_n = N.x*N.y;\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nivec2 i2xy(int id)\n{\n    return ivec2(id%N.x, id/N.x);\n}\n\nint xy2i(ivec2 p)\n{\n    return p.x + p.y*N.x;\n}\n\n//Iq SDF functions\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//particle physics\n\nGETTERS\n\nint cid;\n\n\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\nU=vec4(0);\n    ivec2 p = ivec2(pos);\n    if(p.x < N.x && p.y < N.y)\n    {\n        pos = floor(pos); \n        //this pixel value\n        U = texel(iChannel0, pos);\n        U.xy=abs(U.xy);\n        int id = xy2i(p);\n        cid = id;\n        \n        //Init:\n        if(iFrame<1)\n        {\n            U.xy = size*hash22(pos);\n\t\t\tU.zw = vec2(0);\n      \t\treturn;\n        }\n        \n        vec2 cn = size*.5;\n        if(iMouse.z > 0.) cn=size-mouse.xy;\n       \n        float d = distance(cn.xy, U.xy);\n        vec2 F =- .25*normalize(cn.xy - U.xy)/(sqrt(d)+2.);\n        \n        U.zw += F*dt;\n        U.xy += U.zw*dt;\n\n        //recycle\n        if(any(lessThan(U.xy,vec2(1))) || any(greaterThan(U.xy,size.xy-1.))){\n            if((id%6)==0) U=vec4(size*.4+.2*hash22(U.xy)*size,0.,0.);\n            else{\n                bool gh;\n                vec4 pp= getParticle(id/6,gh);\n                U=vec4(pp.xy -8.+16.*hash22(U.xy),0.,0.);\n            }\n            U.xy=-U.xy;\n            return;\n        }\n       \n       \n        bool ghost=true;\n        ivec4 nb = getClosest(ivec2(U.xy));\n        for(int i = 0; i<4; i++)\n        {\n            if(nb[i]==id) {ghost=false; break;}\n        }\n        if(ghost) U.xy=-U.xy;\n        \n    }\n    else discard;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//particcle connection\n\nGETTERS\n\n#ifndef N8\n//sorting closest 4 particles\n\n\nivec4 u; //ids\nvec4 d; //distances\nvec2 pos; //this particle position\nint tid;\nbool ghost;\n\n//insertion sort\nvoid sort(int utemp)\n{\n    if(utemp == tid || utemp < 0) return;\n       \n   \tvec4 part = getParticle(utemp,ghost);\n    vec2 dx = part.xy - pos;\n    float dtemp = length(dx);\n    //closest in 4 directions\n    if(dx.x > abs(dx.y) && (d.x > dtemp) )\n    {\n            d.x = dtemp;\n        \tu.x = utemp;\n    }\n    else if(dx.x < -abs(dx.y) && (d.y > dtemp) )\n   {     \n            d.y = dtemp;\n        \tu.y = utemp;\n        \n    }\n    else if(dx.y > abs(dx.x) && (d.z > dtemp) )\n    {    \n            d.z = dtemp;\n        \tu.z = utemp;\n        \n    }\n    else if(dx.y <-abs(dx.x) && (d.w > dtemp) )\n    {\n        d.w = dtemp;\n        u.w = utemp;\n    }\n}\n\nvoid sortneighbor(int id)\n{\n    ivec4 nb = getNeighbor(id);\n    for(int j = 0; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n}\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{  \n    \nU=vec4(0);\n    ivec2 p = ivec2(fragCoord);\n\n    if(p.x > N.x || p.y > N.y) discard;\n    \n    int id = xy2i(p);\n     \n    u = ivec4(-1); d = vec4(1e10); \n   \n    tid = id;\n    pos = getParticle(id,ghost).xy;\n    \n    sortneighbor(id); \n    \n    for(int i = 0; i < NGH; i++)\n    {\n        //sort(hash(ivec4(p, iFrame, i)).x%tot_n); //random sort  \n        int id=(iFrame*NGH+i) % tot_n;\n        vec4 pp= getParticle(id,ghost);\n        if(ghost) sort(id); //random sort \n    }\n    ivec4 nc = getClosest(ivec2(pos));\n    for(int i = ZERO; i < 4; i++)\n    {\n        sort(nc[i]); \n    }\n    \n    ivec4 nb = getNeighbor(id);\n    for(int i = 0; i < 4; i++)\n    {\n        //sort 4x4  particles \n        sortneighbor(nb[i]); \n         ivec4 nbb = getNeighbor(nb[i]);\n        for(int j = 0; j < 4; j++)\n    \t{\n            //sort 4x4x4  particles\n            sortneighbor(nbb[j]); \n        }\n    }\n    \n    if( any(lessThan(u, ivec4(-1))) || any(greaterThan(u, ivec4(tot_n))))\n    {\n        u = ivec4(0);\n    }\n    \n    \n    U = intBitsToFloat(u);\n}\n#else\n\n//sorting closest 8 particles \n\nuvec4[2] u; //ids\nvec4[2] d; //distances\nvec2 pos; //this particle position\nuint tid;\nbool ghost;\n\n//insertion sort\nvoid sort(uint utemp)\n{\n    if(utemp == tid || utemp >=65536u) return; \n     if(  any(equal(u[0], uvec4(utemp))) ||  any(equal(u[1], uvec4(utemp)))) return;\n     \n       \n   \tvec4 part = getParticle(int(utemp),ghost);\n    vec2 dx = part.xy - pos;\n    float dtemp = length(dx);\n     \n\n    //sorting\n    if(d[0].x > dtemp )\n    {\n     \n        d[1]= vec4(d[0].w, d[1].xyz);\n        u[1]= uvec4(u[0].w, u[1].xyz);         \n        d[0] = vec4(dtemp, d[0].xyz);\n        u[0] = uvec4(utemp, u[0].xyz);\n    }\n    else if(d[0].y > dtemp && dtemp > d[0].x)\n    {\n     \n        d[1]= vec4(d[0].w, d[1].xyz);\n        u[1]= uvec4(u[0].w, u[1].xyz);\n         \n        d[0].yzw = vec3(dtemp, d[0].yz);\n        u[0].yzw = uvec3(utemp, u[0].yz);\n    }\n    else if(d[0].z > dtemp && dtemp > d[0].y)\n    {\n     \n        d[1]= vec4(d[0].w, d[1].xyz);\n        u[1]= uvec4(u[0].w, u[1].xyz);\n        \n        d[0].zw = vec2(dtemp, d[0].z);\n        u[0].zw = uvec2(utemp, u[0].z);\n    }\n    else if(d[0].w > dtemp && dtemp > d[0].z)\n    {\n  \n        d[1]= vec4(d[0].w, d[1].xyz);\n        u[1]= uvec4(u[0].w, u[1].xyz);\n          \n        d[0].w = dtemp;\n        u[0].w = utemp;\n    }\n     \n    else if(d[1].x > dtemp && dtemp > d[0].w)\n    {\n        d[1] = vec4(dtemp, d[1].xyz);\n        u[1] = uvec4(utemp, u[1].xyz);\n\n    }   \n    else if(d[1].y > dtemp && dtemp > d[1].x)\n    {\n        d[1].yzw = vec3(dtemp, d[1].yz);\n        u[1].yzw = uvec3(utemp, u[1].yz);\n    }\n    else if(d[1].z > dtemp && dtemp > d[1].y)\n    {\n        d[1].zw = vec2(dtemp, d[1].z);\n        u[1].zw = uvec2(utemp, u[1].z);\n    }\n    else if(d[1].w > dtemp && dtemp > d[1].z)\n    {\n        d[1].w = dtemp;\n        u[1].w = utemp;\n    }\n\n}\n\n\nvoid sortneighbor(int id)\n{\n    ivec4[2] nb = getNeighbor2(id);\n    for(int n=min(iFrame,0);n<2;n++)\n    for(int j = min(iFrame,0); j < 4; j++)\n    {\n        sort(uint(nb[n][j]));\n    }\n}\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{  \n    \n    ivec2 p = ivec2(fragCoord);\n\n    if(p.x > N.x || p.y > N.y) discard;\n    \n    int id = xy2i(p);\n     \n    u = uvec4[2](uvec4(65536u),uvec4(65536u));\n    \n    d = vec4[2](vec4(1e10),vec4(1e10)); \n   \n    tid = uint(id);\n    pos = getParticle(id,ghost).xy;\n    \n    sortneighbor(id); \n    \n    for(int i = ZERO; i < NGH + ZERO; i++)\n    {\n \n        int id=(iFrame*NGH+i) % tot_n;\n        vec4 pp= getParticle(id,ghost);\n        if(ghost) sort(uint(id)); //random sort \n    }\n    ivec4 nc = getClosest(ivec2(pos));\n    for(int i = ZERO; i < 4; i++)\n    {\n        sort(uint(nc[i])); \n    }\n    \n    ivec4[2] nb = getNeighbor2(id);\n    for(int n1= ZERO;n1<2;n1++)\n    for(int i =ZERO; i < 4; i++)\n    {\n        //sort 4x4  particles \n        sortneighbor(int(nb[n1][i])); \n         ivec4[2] nbb = getNeighbor2(nb[n1][i]);\n         for(int n2=ZERO;n2<2;n2++)\n        for(int j = ZERO; j < 4; j++)\n    \t{\n            //sort 4x4x4  particles\n            sortneighbor(nbb[n2][j]); \n        }\n    }\n    \n    U = uintBitsToFloat(u[0]+(u[1]*65536u));\n}\n\n\n#endif","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//4th order voronoi particle tracking for each screen position\n\nGETTERS\n\nivec2 cross_distribution(int i)\n{\n    return (1<<(i/4)) * ivec2( ((i&2)/2)^1, (i&2)/2 ) * ( 2*(i%2) - 1 );\n}\n\nivec4 u; //ids\nvec4 d; //distances\nvec2 pos; //pixel position\nbool ghost;\n\nfloat particleDistance(int id, vec2 p)\n{\n    return distance(getParticle(id,ghost).xy, p);\n}\n\n//insertion sort\nvoid sort(int utemp)\n{\n    if(utemp <0) return; \n   \tfloat dtemp = particleDistance(utemp, pos);\n    //sorting\n    if(d.x > dtemp)\n    {\n        d = vec4(dtemp, d.xyz);\n        u = ivec4(utemp, u.xyz);\n    }\n    else if(d.y > dtemp && dtemp > d.x)\n    {\n        d.yzw = vec3(dtemp, d.yz);\n        u.yzw = ivec3(utemp, u.yz);\n    }\n    else if(d.z > dtemp && dtemp > d.y)\n    {\n        d.zw = vec2(dtemp, d.z);\n        u.zw = ivec2(utemp, u.z);\n    }\n    else if(d.w > dtemp && dtemp > d.z)\n    {\n        d.w = dtemp;\n        u.w = utemp;\n    }\n}\n\nvoid sortpos(ivec2 p)\n{\n    ivec4 nb = getClosest(p);\n    for(int j = ZERO; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n}\n\nvoid sortPart(int id)\n{\n#ifdef N8  \n    ivec4[2] nb = getNeighbor2(id);\n    for(int n = ZERO; n < 2; n++)\n    for(int j = ZERO; j < 4; j++)\n    {\n        sort(nb[n][j]);\n    }\n#else\n    ivec4 nb = getNeighbor(id);\n    for(int j = ZERO; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n#endif\n}\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{\nU=vec4(0);\n    pos = fragCoord;\n    \n    if (any(greaterThan(pos,ceil(size) ))) { discard;} //skip pixels out of screen\n    \n    ivec2 p = ivec2(pos);\n     \n    u = ivec4(-1); d = vec4(1e10); \n   \n    sortpos(p); //resort this position, cause particles are moving\n    \n    \n    for(int i = ZERO; i < 12; i++)\n    {\n        //sortpos(p -ivec2(4.) + 8* ivec2(hash22(vec2(p)+ vec2(i,iFrame))));//\n        sortpos(p+cross_distribution(i)); \n    }\n         \n    \n    // sort neighbors of closest particles\n    for(int i = ZERO; i<4; i++)\n    {\n        if(u[i]<0) continue;\n        sortPart(u[i]);       \n    }\n    \n    // if( any(lessThan(u, ivec4(-1))) || any(greaterThan(u, ivec4(tot_n))) )  u = ivec4(0); \n    \n    \n    U = intBitsToFloat(u);\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// ghost particles dump\nGETTERS\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{   \n    fragColor=vec4(0.);    \n\n    if(all(lessThan(pos,vec2(N)))) {\n        vec4 p = texel(iChannel0,pos);\n        if(p.x<0. || p.y<0.) fragColor=vec4(1.);\n        \n     }else discard;\n    \n\n}","name":"Buffer D","description":"","type":"buffer"}]}