{"ver":"0.1","info":{"id":"l3d3Df","date":"1717199720","viewed":50,"name":"rays test","username":"nahuel36","description":"ray test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rays"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid Unity_PolarCoordinates(vec2 UV, vec2 Center, float RadialScale, float LengthScale, out vec2 Out)\n{\n    vec2 delta = UV - Center;\n    float radius = length(delta) * 2.0 * RadialScale;\n    float angle = atan(delta.x, delta.y) * 1.0/6.28 * LengthScale;\n    Out = vec2(radius, angle);\n\n}\n\n\n\nvoid Unity_Rotate_Radians(vec2 UV, vec2 Center, float Rotation, out vec2 Out)\n{\n    UV -= Center;\n    float s = sin(Rotation);\n    float c = cos(Rotation);\n    mat2 rMatrix = mat2(c, -s, s, c);\n    rMatrix *= 0.5;\n    rMatrix += 0.5;\n    rMatrix = rMatrix * 2.0 - 1.0;\n    UV.xy = UV.xy * rMatrix;\n    UV += Center;\n    Out = UV;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n    vec2 polarout = vec2(0,0);\n       \n    Unity_Rotate_Radians(uv ,  vec2 (0.5,0.5) , iTime , polarout);\n    \n    Unity_PolarCoordinates(polarout, vec2 (0.5,0.5), 1.0, 0.5, polarout);\n\n    float rayosOut = polarout.y * 200.0;\n    \n    fragColor = vec4(sin(iTime*uv.x),sin(iTime*2.0*uv.y),sin(iTime*3.0),1) * sin(rayosOut);\n}\n\n\n","name":"Image","description":"","type":"image"}]}