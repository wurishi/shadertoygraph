{"ver":"0.1","info":{"id":"tlXXWl","date":"1572095654","viewed":461,"name":"Refractive Forest","username":"nr4","description":"Refractive forest scene from the PC-32k Intro \"Lightcyber\" by Team210, 2nd at Evoke 2019.\nhttps://www.pouet.net/prod.php?which=82625","likes":24,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","refraction","demoscene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Lightcyber by Team210 - 64k intro by Team210 at Evoke 2k19\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float fsaa = 144.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float bound = sqrt(fsaa)-1.;\n   \tfor(float i = -.5*bound; i<=.5*bound; i+=1.)\n        for(float j=-.5*bound; j<=.5*bound; j+=1.)\n        {\n     \t\tcol += texture(iChannel0, fragCoord/iResolution.xy+vec2(i,j)*mix(3.,20.,2.*abs(fragCoord.y/iResolution.y-.5))*exp(-abs(1.e-2*length(fragCoord.xy)/iResolution.y-.5))/max(bound, 1.)/iResolution.xy).xyz;\n        }\n    col /= fsaa;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* Lightcyber by Team210 - 64k intro by Team210 at Evoke 2k19\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n// Global constants\nconst vec3 c = vec3(1.0, 0.0, -1.0);\nconst float pi = acos(-1.);\n\n// Hash function\nvoid rand(in vec2 x, out float n)\n{\n    x += 400.;\n    n = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n}\n\n// Value noise\nvoid lfnoise(in vec2 t, out float n)\n{\n    vec2 i = floor(t);\n    t = fract(t);\n    t = smoothstep(c.yy, c.xx, t);\n    vec2 v1, v2;\n    rand(i, v1.x);\n    rand(i+c.xy, v1.y);\n    rand(i+c.yx, v2.x);\n    rand(i+c.xx, v2.y);\n    v1 = c.zz+2.*mix(v1, v2, t.y);\n    n = mix(v1.x, v1.y, t.x);\n}\n\n// Stroke\nvoid stroke(in float d0, in float s, out float d)\n{\n    d = abs(d0)-s;\n}\n\n// Add sdfs\nvoid add(in vec2 sda, in vec2 sdb, out vec2 sdf)\n{\n    sdf = sda.x<sdb.x?sda:sdb;\n}\n\n// iq's smooth minimum\nvoid smoothmin(in float a, in float b, in float k, out float dst)\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    dst = min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\n//distance to spline with parameter t\nfloat dist3(vec3 p0,vec3 p1,vec3 p2,vec3 x,float t)\n{\n    t = clamp(t, 0., 1.);\n    return length(x-pow(1.-t,2.)*p0-2.*(1.-t)*t*p1-t*t*p2);\n}\n\n//minimum dist3ance to spline\nvoid dspline3(in vec3 x, in vec3 p0, in vec3 p1, in vec3 p2, out float ds)\n{\n    //coefficients for 0 = t^3 + a * t^2 + b * t + c\n    vec3 E = x-p0, F = p2-2.*p1+p0, G = p1-p0,\n    \tai = vec3(3.*dot(G,F), 2.*dot(G,G)-dot(E,F), -dot(E,G))/dot(F,F);\n\n\t//discriminant and helpers\n    float tau = ai.x/3., p = ai.y-tau*ai.x, q = - tau*(tau*tau+p)+ai.z, dis = q*q/4.+p*p*p/27.;\n    \n    //triple real root\n    if(dis > 0.) \n    {\n        vec2 ki = -.5*q*c.xx+sqrt(dis)*c.xz, ui = sign(ki)*pow(abs(ki), c.xx/3.);\n        ds = dist3(p0,p1,p2,x,ui.x+ui.y-tau);\n        return;\n    }\n    \n    //three dist3inct real roots\n    float fac = sqrt(-4./3.*p), arg = acos(-.5*q*sqrt(-27./p/p/p))/3.;\n    vec3 t = c.zxz*fac*cos(arg*c.xxx+c*pi/3.)-tau;\n    ds = min(\n        dist3(p0,p1,p2,x, t.x),\n        min(\n            dist3(p0,p1,p2,x,t.y),\n            dist3(p0,p1,p2,x,t.z)\n        )\n    );\n}\n\n// Voronoi distance\nvoid dvoronoi(in vec2 x, out float d, out vec2 z)\n{\n    vec2 y = floor(x);\n       float ret = 1.;\n    vec2 pf=c.yy, p;\n    float df=10.;\n    \n    for(int i=-1; i<=1; i+=1)\n        for(int j=-1; j<=1; j+=1)\n        {\n            p = y + vec2(float(i), float(j));\n            float pa;\n            rand(p, pa);\n            p += pa;\n            \n            d = length(x-p);\n            \n            if(d < df)\n            {\n                df = d;\n                pf = p;\n            }\n        }\n    for(int i=-1; i<=1; i+=1)\n        for(int j=-1; j<=1; j+=1)\n        {\n            p = y + vec2(float(i), float(j));\n            float pa;\n            rand(p, pa);\n            p += pa;\n            \n            vec2 o = p - pf;\n            d = length(.5*o-dot(x-pf, o)/dot(o,o)*o);\n            ret = min(ret, d);\n        }\n    \n    d = ret;\n    z = pf;\n}\n\nvec2 vind,vind2;\nfloat v, fn, r1, fb;\nvoid scene(in vec3 x, out vec2 sdf)\n{\n    x.y = mix(x.y, -x.y, step(150., iTime));\n    x.y += mix(.2,-.2,step(150., iTime))*iTime;\n    \n    dvoronoi(1.5*x.xy, v, vind);\n    \n    vec3 y = vec3(vind/1.5-x.xy,x.z);\n    \n    float n, n2;\n    \n    lfnoise(c.xx-.3*iTime+vind*3., n);\n    lfnoise(5.*x.z*c.xx-iTime-vind*4., n2);\n    n2 *= .2;\n    \n    mat2 RR = mat2(cos(n2), sin(n2), -sin(n2), cos(n2));\n    vec2 a = x.xy;\n    x.xy = RR * x.xy;\n    rand(vind, r1);\n    float r2;\n    rand(vind -1336., r2);\n    \n    float phi = atan(y.y, y.x),\n        dp = pi/24.,\n        phii = mod(phi, dp)-.5*dp,\n        pa = phi - phii, \n        R1 = .05,\n        R2 = mix(.4,.25,1.-r2);\n    \n    R2 = mix(R1, R2, .5+.5*n2);\n    \n    float r0;\n    rand(pa*c.xx, r0);\n    r0 = mix(r0,.5+.5*n,.5);\n    \n    dspline3(y, vec3(1.4*R1*cos(pa), 1.4*R1*sin(pa), -.5), vec3(R1*cos(pa), R1*sin(pa), .1*r1), vec3(mix(R1,R2,.5)*cos(pa), mix(R1,R2,.5)*sin(pa), .1*r1), sdf.x);\n    float da;\n    dspline3(y, vec3(mix(R1,R2,.5)*cos(pa), mix(R1,R2,.5)*sin(pa), .1*r1), vec3(R2*cos(pa), R2*sin(pa), .1*r1), vec3(R2*cos(pa), R2*sin(pa), .1-.4*r0), da);\n    sdf.x = min(sdf.x, da);\n    stroke(sdf.x, .25*mix(.02,.05, .5+.5*n2), sdf.x);\n    sdf.y = 2.;\n    \n    add(sdf, vec2(length(y-vec3(R2*cos(pa), R2*sin(pa), .1-.4*r0))-.01, 3.), sdf);\n    \n    float fa;\n    lfnoise(4.*a,  fa);\n    dvoronoi(a,fn, vind2); \n    fa = x.z+.4+.1*mix((v+fn),fa,.5);\n    add(sdf, vec2(fa,4.), sdf);\n    smoothmin(sdf.x, fa, .1, sdf.x);\n}\n\nvoid normal(in vec3 x, out vec3 n, in float dx)\n{\n    vec2 s, na;\n    \n    scene(x,s);\n    scene(x+dx*c.xyy, na);\n    n.x = na.x;\n    scene(x+dx*c.yxy, na);\n    n.y = na.x;\n    scene(x+dx*c.yyx, na);\n    n.z = na.x;\n    n = normalize(n-s.x);\n}\n\nfloat sm(float d)\n{\n    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);\n}\n\nvoid dsmoothvoronoi(in vec2 x, out float d, out vec2 z)\n{\n    float n;\n    vec2 y = floor(x);\n       float ret = 1.;\n    vec2 pf=c.yy, p;\n    float df=10.;\n    \n    for(int i=-1; i<=1; i+=1)\n        for(int j=-1; j<=1; j+=1)\n        {\n            p = y + vec2(float(i), float(j));\n            float pa;\n            rand(p, pa);\n            p += pa;\n            \n            d = length(x-p);\n            \n            if(d < df)\n            {\n                df = d;\n                pf = p;\n            }\n        }\n    for(int i=-1; i<=1; i+=1)\n        for(int j=-1; j<=1; j+=1)\n        {\n            p = y + vec2(float(i), float(j));\n            float pa;\n            rand(p, pa);\n            p += pa;\n            \n            vec2 o = p - pf;\n            d = length(.5*o-dot(x-pf, o)/dot(o,o)*o);\n            smoothmin(ret, d, .05, ret);\n        }\n    \n    d = ret;\n    z = pf;\n}\n\nfloat nan;\nvoid vs(in vec3 x, out vec2 sdf)\n{\n    vec2 vi;\n    dsmoothvoronoi(3.*(x.xy+.2*iTime*c.yx), sdf.x, vi);\n    sdf.x = x.z-.1-.2*sdf.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord -.5* iResolution.xy) / iResolution.y, \n        s;\n    \n    uv *= 2.;\n    \n    vec3 col = c.yyy, \n        o = c.yzx,\n        r = c.xyy, \n        u = normalize(c.yxx), \n        t = c.yyy, \n        dir,\n        n,\n        x;\n    int N = 200,\n        i;\n    t = uv.x * r + uv.y * u;\n    dir = normalize(t-o);\n\n    float d = -(o.z-.3)/dir.z;\n    for(i = 0; i<N; ++i)\n    {\n     \tx = o + d * dir;\n        vs(x,s);\n        if(s.x < 1.e-4)break;\n        d += s.x;\n    }\n    float v1, rar, dx = 1.e-3;\n    vec2 vi1, na;\n    vec3 cv, l;\n    x = o + d * dir;\n    dsmoothvoronoi(3.*(x.xy+.2*iTime*c.yx), v1, vi1);\n\n    rand(vi1, rar);\n    cv = mix(c.yyy,vec3(.23,.23,.23), rar);\n    v1 = abs(v1)-.01;\n    cv = mix(cv, c.yyy, sm(v1));\n    v1 = abs(v1-.01)-.005;\n    cv = mix(cv, c.xxx, sm(v1));\n    vs(x,s);\n    vs(x+dx*c.xyy, na);\n    n.x = na.x;\n    vs(x+dx*c.yxy, na);\n    n.y = na.x;\n    vs(x+dx*c.yyx, na);\n    n.z = na.x;\n    n = normalize(n-s.x);\n    l = normalize(x+c.yyx);\n    cv = .2*cv\n        +.2*cv*abs(dot(l,n))\n        +.4*cv*pow(abs(dot(reflect(-l,n),dir)),3.);\n    cv = mix(cv, 1.5*vec3(0.76,0.20,0.13), smoothstep(0.858, 1.02, dot(n, c.yyx)));\n    dir = refract(dir, n, .98);\n    \n    for(i = 0; i<N; ++i)\n    {\n     \tx = o + d * dir;\n        scene(x,s);\n        if(s.x < 1.e-4)break;\n\n        d += min(s.x,3.e-2);\n    }\n    \n    if(i < N)\n    {\n        normal(x,n, 1.e-4);\n       \n        if(s.y == 3.)\n        {\n            l = normalize(x+c.yyx);\n            float r;\n            \n            col = mix(c.xxx, vec3(0.76,0.20,0.13), .8);\n            col = .2*col\n                + .2*col * abs(dot(l,n))\n                + .8*col * pow(abs(dot(reflect(-l,n),dir)),2.);\n        }\n        else if(s.y == 4.)\n        {\n            l = normalize(x+c.yyx);\n            float r;\n            rand(vind+vind2,r);\n            \n            col = mix(.023*c.xxx, vec3(0.76,0.40,0.23), r);\n            col = .2*col\n                + .2*col * abs(dot(l,n))\n                + .6*col * pow(abs(dot(reflect(-l,n),dir)),3.);\n            stroke(v, .01, v);\n            stroke(fn, .01, fn);\n            col = mix(col, c.yyy, sm(v));\n            col = mix(col, col*col, sm(fn));\n        }\n\t\tif(s.y == 2.)\n        {\n            l = normalize(x+c.yyx);\n            float r;\n            rand(vind, r);\n            \n            col = mix(mix(vec3(0.76,0.20,0.23),vec3(.18,.32,.13), r), vec3(0.23,0.23,0.23),  clamp((x.z)/r1/.1,0.,1.));\n            col = .2*col\n                + .2*col * abs(dot(l,n))\n                + .6*col * pow(abs(dot(reflect(-l,n),dir)),3.);\n            col = mix(col, 5.*col, .25*n.x*n.x);\n        }\n        \n    }\n    \n    col *=3.6;\n    col *= col;\n\n    if(s.y != 3.)\n    {\n        col = mix(length(col)/sqrt(3.)*c.xxx, col,.3);\n    }\n    \n    col = mix(col,cv,.8);\n    col = mix(col, c.yyy, smoothstep(1.,5.,d));\n    \n    col *= mix(1.,15.,.28);\n    col *= col;\n    \n    col = mix(col, .01*col, smoothstep(-.6,-1.,uv.y));\n    \n    fragColor = vec4(clamp(col,0.,1.),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}