{"ver":"0.1","info":{"id":"ll2BD1","date":"1565946094","viewed":80,"name":"#Evoke 2019 - Sine Wave 1D","username":"VJSpackOMat","description":"Hybridising sine wave example as example that escape time hybridisation works the same","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n\nSine Wave 1D\n\nc.Kleinhuis evoke 2019 - talk 'hybrid fractals'\n\nControls:\n\n- use mouse x to scale view\n\nexample for hybridising a sine wave like it is done for ages in demo programming,\n\nsine parameters are stored as vector3 values with \nsine1/sine2/sine3 parameters stored in x/y/z of the parameter vector\n\nthe wavelengths control the scale of the wave\nthe frequencies controls the speed of the wave\nthe amplitude controls the amplitude of the wave\n*/\n\n\nvec3 wavelengths=vec3(100.,200.,300.);\nvec3 frequencies=vec3(1.,1.,1.);\nvec3 amplitudes=vec3(1.,1.,1.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 mouse=iMouse.xy/iResolution.xy;\n     \n    uv=uv*2.0-1.0;\n\tvec4 color=vec4(1,1,1,1);\n    \n   float val = sin(iTime*frequencies.x+uv.x*mouse.x*wavelengths.x)*amplitudes.x;    \n    val += sin(iTime*frequencies.y+uv.x*mouse.x*wavelengths.y)*amplitudes.y;\n    val += sin(iTime*frequencies.z+uv.x*mouse.x*wavelengths.z)*amplitudes.z;\n    val/=3.;\n    fragColor = color*(val>uv.y?1.:0.);\n}","name":"Image","description":"","type":"image"}]}