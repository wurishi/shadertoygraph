{"ver":"0.1","info":{"id":"3dKczh","date":"1602233852","viewed":83,"name":"Example 17 - polar coordinates","username":"jt","description":"How to rotate a texture using polar coordinates.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["example","rotation","polarcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized device coordinates\n    //vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    vec2 uv = ( 2.0 * fragCoord - iResolution.xy ) / iResolution.y; // with correct aspect ratio\n\n    // Polar coordinates\n    float angle = atan(uv.y, uv.x);\n    float dist = length(uv);\n    \n    angle += iTime; // rotate\n    //dist = pow(dist, 2.0); // \"fisheye\"\n    //angle += dist * iTime; // spiral\n    \n    // Rectangular coordinates\n    uv.x = dist * cos(angle);\n    uv.y = dist * sin(angle);\n    \n    // Texture coordinates\n    uv = 0.5 + 0.5 * uv;\n    \n    //fragColor = vec4(angle, dist, 0.0, 1.0);\n    //fragColor = vec4(uv,0.0,1.0);\n    fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"}]}