{"ver":"0.1","info":{"id":"MtlyDB","date":"1506313795","viewed":150,"name":"Twin Shade - LightB2 AA/Subpixel","username":"tgsstdio","description":"Duo - Shade light with \n-subpixel AA * constant\n- none \n- antialiasing * constant\n- antialiasing\n- subpixel antialiasing\n\nUsing https://www.shadertoy.com/view/4dsSzs as a basis\nUPDATE: Added magnification code by click from ssell\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// TWIN SHADE - subpixels/anti-aliasing\n\n// USING CODE FROM \n// Twin Shade - Light B2 https://www.shadertoy.com/view/XtscWS \n// Subpixel Rendering - https://www.shadertoy.com/view/4dsSzs\n\nconst float SUBPIXEL_CONSTANT = 1.4;\nconst float AA_CONSTANT = 1.555; \n\nconst mat4 lightB2 = mat4(\n    251,166,10,165,\n    142,9,212,250,\n    7,165,250,168,\n    220,250,142,4\n)/255.;\n\nvec4 lightColorB2(vec2 fragCoord)\n{        \n    ivec2 gridPos = ivec2(fragCoord) % 4;         \n\n    float factor = lightB2[gridPos.x][3 - gridPos.y];\n\n    return vec4(vec3(factor), 1.);\n}\n\nfloat f(vec2 pixels)\n{\n    ivec2 gridPos = ivec2(pixels) % 4;         \n\n    return lightB2[gridPos.x][3 - gridPos.y];\n}\n\nfloat sampleSubpixel(vec2 pixels)\n{\n\tconst int size = 4; \n\tfloat disp = 1.0 / (float(size) + 2.0);\n\tfloat contrb = 0.0;\n\tfloat maxContrb = 0.0;\n\t\n\tfor (int j = -size; j <= size; j++)\n\t{\n\t\tfor (int i = -size; i <= size; i++)\n\t\t{\n\t\t\tcontrb += f(pixels + vec2(float(i) * (disp / 3.0), float(j) * disp));\n\t\t\tmaxContrb += 1.0;\n\t\t}\n\t}\n\t\n\treturn 1.0 - (contrb / maxContrb);\n}\n\nvec4 sampleAntialiased(vec2 pixels)\n{\n\tconst int size = 4; \n\tfloat disp = 1.0 / (float(size) + 2.0);\n\tfloat contrb = 0.0;\n\tfloat maxContrb = 0.0;\n\t\n\tfor (int j = -size; j <= size; j++)\n\t{\n\t\tfor (int i = -size; i <= size; i++)\n\t\t{\n\t\t\tcontrb += f(pixels + vec2(float(i) * disp, float(j) * disp));\n\t\t\tmaxContrb += 1.0;\n\t\t}\n\t}\n\t\n\tfloat c = 1.0 - (contrb / maxContrb);\n\treturn vec4(c, c, c, 1);\n}\n\nvec4 sampleAntialiasedSubpixel(vec2 pixels)\n{\n\treturn vec4(sampleSubpixel(pixels - vec2(1.0 / 3.0, 0)),\n\t\t\t\tsampleSubpixel(pixels),\n\t\t\t\tsampleSubpixel(pixels + vec2(1.0 / 3.0, 0)),\n\t\t\t\t1);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{     \n    // UPDATE: PATTERN MAGNIFICATION\n     // - suggestion by FabriceNeyret2 \n     // - code from ssell\n    float d = distance(fragCoord, iMouse.xy);\n    \n    if(d < 50.0)\n    {\n      fragCoord = (iMouse.xy + normalize(fragCoord - iMouse.xy) * d * 0.5);\n    }\n\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n    \n  \t//vec4 color = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    vec4 color = vec4(1.);\n    \n    if (uv.x < 0.2)\n    \tfragColor = SUBPIXEL_CONSTANT * sampleAntialiasedSubpixel(fragCoord) * color;\t    \n    else if (uv.x < 0.4)\n        fragColor = lightColorB2(fragCoord) * color;\n\telse if (uv.x < 0.6)       \n    \tfragColor = AA_CONSTANT * sampleAntialiased(fragCoord) * color;\n\telse if (uv.x < 0.8)       \n    \tfragColor = sampleAntialiased(fragCoord) * color;        \n    else\n        fragColor = sampleAntialiasedSubpixel(fragCoord) * color;\n}\n","name":"Image","description":"","type":"image"}]}