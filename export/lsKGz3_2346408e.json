{"ver":"0.1","info":{"id":"lsKGz3","date":"1455695010","viewed":1924,"name":"contrast-corrected blending","username":"FabriceNeyret2","description":"blending sprites can be seemless if correcting the variance, for contrast preserving.\nleft: linear  right :-variance normalized","likes":25,"published":3,"flags":0,"usePreview":0,"tags":["sprite","blend","variance","lagrangian","smartblend"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// NB: trick published in https://hal.inria.fr/inria-00536064v2\n// deeper conservation: see histogram-preserving here: https://hal.inria.fr/hal-01824773\n//                      partly in https://www.shadertoy.com/view/MdyfDV\n\n                                          // try textures random, checker, etc\n#define T(U) texture(iChannel0,2.*U)*1.3      // *1.3 only for dark texture\n#define mean texture(iChannel0,2.*U,10.)*1.3\n                                       // variants: \n// #define mean vec4(65,54,46,1)/255.     // mean for Britney video\n// #define T(U) vec4(.5+.5*sin(120.*U.x)) // Gabor noise. mean = .5\n// #define T(U) K(U)                      // simple blob. mean = .5\n// #define mean .5\n\n#define K(U) smoothstep(.2, .0, length(U))      // smooth kernel\n#define rnd(i) fract(1e4*sin(i+vec2(0,73.17)))  // texture\n\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O-=O;\n    vec2 R = iResolution.xy, r=R/R.y;\n    if (abs(U.x-R.x/2.)<2.) return;\n\tU /= R.y;\n    float s=0., s2=0., v;\n    for (float i=0.; i<150.; i++) \n    {\n        vec2 V = U-rnd(i)*r  + .1*cos(i+iTime+vec2(0,1.6)); // sprite position\n        v = K(V); s += v; s2 += v*v;                          // kernel and momentums\n\t    O += v*T(V);\n    }\n    // normalization\n    if     (U.x<r.x/2.)\n            O /= s;                          // linear blend\n    else    O = mean + (O-s*mean)/sqrt(s2);  // variance preserving blend\n}","name":"Image","description":"","type":"image"}]}