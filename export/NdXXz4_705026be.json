{"ver":"0.1","info":{"id":"NdXXz4","date":"1618667704","viewed":85,"name":"CS_MG","username":"Michael_CS","description":"dz","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["csmg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst int MAX_ITER = 10;\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\nvec3 randDir;\n\n//для воды\n#define F length(.5-fract(k.xyw*=mat3(-2,-1,2, 3,-2,1, 1,2,2)*\n\n\n//количество источников\nconst int LIGHT_NUM = 3;\n//описывает источники света\nstruct light\n{\n    vec3 position;\n    float radius;\n    vec3 color;   \n};\n\n//все LIGHT_NUM источников света будут здесь. сразу же инициализирую\nlight LIGHTS[ LIGHT_NUM ] = light[ LIGHT_NUM ](light(vec3(-3, 1.5, 5), 0.5, vec3(1, 1, 1)), \n                                    light(vec3(-4, 0.5, -2), 0.25, vec3(0.8, 1, 0.1)),\n                                 light(vec3(7.5, 0.5, 3), 0.25, vec3(0.8, 1, 0.1))\n                                 );\n\n\n\n//получаем значения t\n//пересечение точки с плоскостью\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) \n    {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) \n    {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\n//пересекаем луч света с объектом - сферой\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) \n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) \n    //не пересекли сферу\n    {\n        return INF;\n    }\n    \n    float t = -b - sqrt(D);\n    if (t > 0.0) \n    //не пересекли сферу\n    {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = -b + sqrt(D);\n    if (t < 0.0) \n    //cфера за нами или мы внутри\n    {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n//подставка\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) \n{\n//-1.0 высота от шара - прилегает\n    float size = 1.5;\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) \n    {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < size) \n    {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n  \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - size;\n    float D = b * b - a * c;\n    if (D < 0.0) \n    {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) \n    {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) \n        {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) \n    {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) \n    {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\n\n\n\n//проверка препятсвия для луча\n//нужно для тени\nbool isOccluded(vec3 pos, vec3 target) \n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n//вычисление света для теней\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) \n{\n    vec3 toLight1 = LIGHTS[0].position - pos;\n    vec3 toLight2 = LIGHTS[1].position - pos;\n    vec3 toLight3 = LIGHTS[2].position - pos;\n    \n    //для мягких теней\n    float att1 = isOccluded(pos, LIGHTS[0].position + randDir * LIGHTS[0].radius) ? 0.0 : 20.0f / dot(toLight1, toLight1);\n    float att2 = isOccluded(pos, LIGHTS[1].position + randDir * LIGHTS[1].radius) ? 0.0 : 10.0f / dot(toLight2, toLight2);\n    float att3 = isOccluded(pos, LIGHTS[2].position + randDir * LIGHTS[2].radius) ? 0.0 : 10.0f / dot(toLight3, toLight3);\n\n    return color * (\n            max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHTS[0].color\n        +   max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHTS[1].color\n        +   max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHTS[2].color\n        +   texture(iChannel1, normal).rgb * 0.05\n                  );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) \n{\n    if (dot(v, normal) < 0.0) \n    {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) \n{\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    //делаю мягким свет\n    for(int i; i<LIGHT_NUM; i++)\n    {\n        LIGHTS[i].position = LIGHTS[i].position + randVals*0.1;\n    }\n    //для мягких теней \n    randDir = normalize(randVals - 0.5);\n\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const int WATER = 4;\n    vec3 colour_water;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    // коэф приломления\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float WATER_N =1.5;\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    \n    //для вычисления воды\n    vec2 p;\n    vec4 k;\n    //мультиплектаро\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < MAX_ITER; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        //пол\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            //в качестве света - текстура \n            color = texture(iChannel0, worldPos.xz* 0.5 ).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.1)\n            {\n                //materialType = REFLECTION;\n            }\n        }\n        \n        for (int j = 0; j < LIGHT_NUM; j++)\n        {\n            vec3 lNorm;\n            float lightT = traceSphere(curPos - LIGHTS[j].position, curDir, LIGHTS[j].radius, lNorm);\n            if (lightT < t) \n            {\n                t = lightT;\n                materialType = EMISSION;\n                color = LIGHTS[j].color;\n                normal = lNorm;\n            }\n        }\n\n        vec3 sphNorm;\n       //сфера \n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            //комбенируем REFLECTION и REFRACTION\n            if (randVals.x* 0.1 < GLASS_R) \n            {\n                materialType = REFLECTION;\n            } else \n            {\n                colorMult = vec3(0.8, 0.5, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) \n                {\n                    nEnter = AIR_N;\n                } else \n                {\n                    nEnter = GLASS_N;\n                }\n            }\n        }    \n        //вода\n        float sph2T = traceSphere(curPos, curDir, 0.5, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            if (randVals.x < WATER_R) {\n                 materialType = REFLECTION;\n            } else {\n                materialType = WATER;\n                k = fragColor ;\n                p = fragCoord;\n               k.xy = p*(sin(k=iDate*.5).w+2.)/2e2;\n               k = pow(min(min(F.5)),F.4))),F.3))), 7.)*25.+vec4(0,.35,.5,1);\n               nEnter = 1.34;\n           }\n        }\n        \n        vec3 cylNorm;\n        //подставка \n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) \n        {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3, worldPos.xz+ worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF) \n        {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            //перемесчение\n            if (materialType == EMISSION) \n            {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) \n            {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) \n            {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } \n            else if (materialType == REFRACTION) \n            {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-4;\n                n1 = nEnter;\n           }\n           else if (materialType == WATER)\n           {\n                fragColor = k;\n           }\n        } else\n        {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}