{"ver":"0.1","info":{"id":"sdtSWB","date":"1633895198","viewed":91,"name":"Spinning Morphing Shapes","username":"LoganLang","description":"Look at em go","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","translate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159;\nconst vec3 sunglow = vec3(255., 202., 58.)/255.;\nconst vec3 skyBlue = vec3(76., 201., 240.)/255.;\nconst vec3 royalBlue = vec3(73., 109., 219.)/255.;\nconst vec3 rubineRed = vec3(202., 46., 85.)/255.;\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat stroke(float x, float w){\n    float d = smoothstep(0.,.01,x+w*.5) - smoothstep(0.,.01,x-w*.5);\n    return clamp(d,0.,1.);\n}\n\nfloat fill(float sdf){\n    return 1.-smoothstep(0.,.025,sdf);\n}\n\nfloat mixedSDF(vec2 st, vec2 pos){\n    float circleSDF = sdCircle(st-pos,.2);\n    float triSDF = sdTriangleIsosceles((st-vec2(0.,.2))-pos,vec2(.2,-.4));\n    float squareSDF = sdBox(st-pos,vec2(.2));\n    \n    float circleTimer = smoothstep(.1,.9,sin(iTime));\n    float triTimer = smoothstep(.1,.9,sin(iTime-2.1));\n    float squareTimer = smoothstep(.1,.9,sin(iTime-4.2));\n    \n    float mixSDF = 0.;\n    mixSDF += mix(0.,circleSDF,circleTimer);\n    mixSDF += mix(0.,triSDF,triTimer);\n    mixSDF += mix(0.,squareSDF,squareTimer);\n    \n    return mixSDF;\n}\n\nvec2 offset(float x){\n    return vec2(cos(iTime - x),sin(iTime - x))*.8;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    vec2 st = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float bgCircle = sdCircle(st,.8);\n    float bgSquare = sdBox(st,vec2(.8));\n    float sinLine = st.y + .25*sin((st.x*2.*PI)/1.6);\n    \n    col += fill(bgSquare)*skyBlue*step(0.,sinLine);\n    col += fill(bgSquare)*royalBlue*step(0.,-sinLine);\n    if (bgCircle < 0. && sinLine > 0.) {\n        col = royalBlue;\n    } else if (bgCircle < 0. && sinLine < 0.) {\n        col = skyBlue;\n    }\n    \n    float bgShape = stroke(bgCircle,.025);\n    bgShape += stroke(bgSquare,.025);\n    bgShape += stroke(sinLine, .025) * fill(sdBox(st,vec2(.802)));\n    col *= 1.-bgShape;\n    col += clamp(bgShape,0.,1.) * sunglow;\n    if (bgShape > .7) {\n        col = sunglow;\n    }\n\n    float movingShapes = stroke(mixedSDF(st,offset(0.)),.05);\n    movingShapes += stroke(mixedSDF(st,offset(2.*PI / 3.)),.05);\n    movingShapes += stroke(mixedSDF(st,offset(4.*PI / 3.)),.05);\n    col = mix(col, rubineRed, movingShapes);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}