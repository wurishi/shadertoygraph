{"ver":"0.1","info":{"id":"7tVyWm","date":"1661630496","viewed":99,"name":"Mandelbrot music visualizer","username":"HF","description":"mandelbrot, visualizer","likes":3,"published":1,"flags":112,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Switch to Buffer A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n   \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Ml2Xzw","filepath":"https://soundcloud.com/micronude/rock-raiders-03-lava","previewfilepath":"https://soundcloud.com/micronude/rock-raiders-03-lava","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Select a song in iChannel2\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat getfft(float tx){\n    // the sound texture is 512x2\n    return texelFetch( iChannel2, ivec2(int(tx*512.0),0), 0 ).x;\n}\n\nconst float pi = 3.141592;\nconst int maxint = 768;\nfloat zoom = 2.5;\n\n\nvec2 cmpmlt(vec2 a, vec2 b){\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\n\nfloat MBcheck(vec2 pos){\n    vec2 z = vec2(getfft(0.01), getfft(0.6));\n    for (int i = 1; i <= maxint; i++){\n        z = cmpmlt(z,z) + pos;\n        if (length(z) > 2.0){\n            float nsmooth = float(i) + 1.0 - log(log( length(z) ))/log(2.0);\n            nsmooth /= float(maxint);\n            //return 1.0-1.0/length(z);\n            return 98.0*nsmooth; \n        }\n    }\n    return 0.0;\n}\n\nvec3 getColor(int i){\n\n    vec3 colors[8];\n  colors[0] = vec3( 0.0, 0.0, 0.3 );\n  colors[1] = vec3( 0.1, 0.3, 0.7 );\n  colors[2] = vec3( .93, 1.0, 1.0 );\n  colors[3] = vec3( 1.0, 0.6, 0.0 );\n  colors[4] = vec3( 0.0, 0.0, 0.0 );\n  colors[5] = vec3( .3, 0.6, 0.0 );\n  \n    return colors[int(mod(float(i),float(colors.length())))];\n}\n\n\n\n\nconst int KEY_LEFT  = 65;\nconst int KEY_UP    = 87;\nconst int KEY_RIGHT = 68;\nconst int KEY_DOWN  = 83;\nconst int KEY_Q  = 81;\nconst int KEY_E  = 69;\n\nfloat getKey(int key){\n    return texelFetch( iChannel1, ivec2(key,0), 0 ).x;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec2 viewpos = texture(iChannel0, vec2(0.0,0.0)).xy;\n    float zoom = texture(iChannel0, vec2(0.0,0.0)).z;\n\n    if (zoom == 0.0)\n        zoom = 1.0;\n    float speed = -0.01;\n    float zoomspeed = 0.99;\n    \n    \n    if (fragCoord.x <= 1.0 && fragCoord.y <= 1.0){\n        speed *= zoom;\n        fragColor.xy = viewpos + speed*\n        vec2(-getKey(KEY_LEFT) +getKey(KEY_RIGHT), getKey(KEY_UP) - getKey(KEY_DOWN));\n        fragColor.z = zoom;\n        if (getKey(KEY_Q) > 0.1){\n            fragColor.z *= zoomspeed;     \n        }if (getKey(KEY_E) > 0.1){\n            fragColor.z /= zoomspeed;     \n        }\n    }else{\n        vec2 p = ((uv-vec2(0.5, 0.5))*zoom-viewpos);\n        \n        float explode = float(MBcheck(p))/float(maxint);\n        //fragColor.rgb = hsv2rgb(vec3(explode, 1.0, 1.0));\n        float kick = MBcheck(p);\n        float fft = getfft(kick);\n        //fragColor.rgb = getColor(kick + int(fft*float(maxint)));\n        fragColor.rgb = hsv2rgb(vec3(fft, 1.0, kick));\n        //fragColor.b = getfft(2.0*kick);\n        //fragColor.g = getfft(3.0*kick);\n        //fragColor.r = getfft(kick_);\n        //if (length(iMouse.zw/iResolution.xy - viewpos) > 0.01){\n        //    fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        //}\n\n        //fragColor.rgb = texture(iChannel1, uv).rgb;\n    }\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"}]}