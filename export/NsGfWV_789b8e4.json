{"ver":"0.1","info":{"id":"NsGfWV","date":"1658849072","viewed":257,"name":"RayTracer by SWS3005 Group 7","username":"Makalou","description":"A simple GPU raytracer for SWS3005 class project.","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["raytracing","raymarching","raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID: \n//\n// GROUP NUMBER: 7\n//\n// STUDENT NAME:Wang Zeyuan\n// NUS User ID.:\n//\n// STUDENT NAME:Zhang Guoxi\n// NUS User ID.:\n//\n// STUDENT NAME:\n// NUS User ID.:\n//\n// COMMENTS TO GRADER:\n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 3;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 5;\nconst int NUM_PLANES = 1;\nconst int NUM_SPHERES = 3;\nconst int NUM_BOXS = 4;\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\n//Geometry objects\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nBox_t Box[NUM_BOXS];\n//Lights\nLight_t Light[NUM_LIGHTS];\n//Materials\nMaterial_t Material[NUM_MATERIALS];\n\nfloat seed;\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = sign(sin(0.2*iTime))>0.0?3:0;\n    \n    Sphere[0].center = vec3( 1.5 * cos(iTime), 0.5 + abs(cos(6.2831 * iTime)), 1.5 *sin(iTime) );\n    Sphere[0].radius = 0.5;\n    Sphere[0].materialID = 2;\n\n    // Center bouncing sphere.\n    Sphere[1].center = vec3( 0.0, abs(sin(6.2831 * iTime)) + 0.7, 0.0 );;\n    Sphere[1].radius = 0.7;\n    Sphere[1].materialID = 1;\n\n    // Circling sphere.\n    Sphere[2].center = vec3( 1.5 * cos(-iTime), 0.5 + abs(cos(6.2831 * iTime)), 1.5 *sin(-iTime) );\n    Sphere[2].radius = 0.5;\n    Sphere[2].materialID = 2;\n    \n    Box[0].size = vec3(.3,.3,.3);\n    Box[0].center = vec3(3.0*cos(iTime),sin(iTime)+1.5,3.0*sin(iTime));\n    Box[0].materialID = 4;\n    \n    Box[1].size = vec3(.3,.3,.3);\n    Box[1].center = vec3(3.0*cos(iTime+PI/2.0),sin(iTime+PI)+1.5,3.0*sin(iTime+PI/2.0));\n    Box[1].materialID = 4;\n    \n    Box[2].size = vec3(.3,.3,.3);\n    Box[2].center = vec3(3.0*cos(iTime-PI/2.0),sin(iTime+HalfPI)+1.5,3.0*sin(iTime-PI/2.0));\n    Box[2].materialID = 4;\n    \n    Box[3].size = vec3(.3,.3,.3);\n    Box[3].center = vec3(3.0*cos(iTime+PI),cos(iTime+3.0*HalfPI)+1.5,3.0*sin(iTime+PI));\n    Box[3].materialID = 4;\n    \n    // floor material 1.\n    Material[0].k_d = vec3( 0.3, 0.3, 0.3 );\n    Material[0].k_a = 0.1 * Material[0].k_d;\n    Material[0].k_r = 0.9 * Material[0].k_d;\n    Material[0].k_rg = 1.0 * Material[0].k_r;\n    Material[0].n = 128.0;\n    Material[0].ior = -1.0;\n    Material[0].fuzz = 0.07*(sin(0.5*iTime)+1.0)*0.5;\n\n    // center sphere material.\n    Material[1].k_d = vec3( 1.0, 1.0, 1.0 );\n    Material[1].k_a = 0.0 * Material[1].k_d;\n    Material[1].k_r = 1.0 * Material[1].k_d;\n    Material[1].k_rg = 1.0 * Material[1].k_r;\n    Material[1].n = 128.0;\n    Material[1].ior = 1.5;\n    Material[1].fuzz = -1.0;\n    // circling sphere material.\n    Material[2].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n    Material[2].ior = -1.0;\n    Material[2].fuzz = -1.0;\n    \n    //floor material 2.\n    Material[3].k_d = vec3( 0.2, 0.2, 0.2 );\n    Material[3].k_a = 0.0 * Material[3].k_d;\n    Material[3].k_r = 0.0 * Material[3].k_d;\n    Material[3].k_rg = 2.0 * Material[0].k_r;\n    Material[3].n = 128.0;\n    Material[3].ior = 1.1;\n    Material[3].fuzz = -1.0;\n    \n    //Box material.\n    Material[4].k_d = vec3( 0.2, 0.2, 0.2 );\n    Material[4].k_a = 0.2 * Material[2].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.5 * Material[2].k_r;\n    Material[4].n = 128.0;\n    Material[4].ior = -1.0;\n    Material[4].fuzz = -1.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.2, 0.2, 0.2 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0, 3.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg,out float ior, out float fuzz )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    \n    for (int i = 0; i < NUM_PLANES; i++ ) {\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                      temp_t, temp_hitPos, temp_hitNormal);\n\n        if (temp_hasHit && temp_t < nearest_t ) {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Plane[i].materialID;\n        }\n        \n    }\n    \n    temp_hasHit = IntersectMergeSpheres(Sphere[0],Sphere[2], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                    temp_t, temp_hitPos, temp_hitNormal);\n    if (temp_hasHit && temp_t < nearest_t) {\n        hasHitSomething = true;\n        nearest_t = temp_t;\n        nearest_hitPos = temp_hitPos;\n        nearest_hitNormal = temp_hitNormal;\n        nearest_hitMatID = Sphere[0].materialID;\n    } \n    \n     temp_hasHit = IntersectSphere(Sphere[1], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                    temp_t, temp_hitPos, temp_hitNormal);\n    if (temp_hasHit && temp_t < nearest_t) {\n        hasHitSomething = true;\n        nearest_t = temp_t;\n        nearest_hitPos = temp_hitPos;\n        nearest_hitNormal = temp_hitNormal;\n        nearest_hitMatID = Sphere[1].materialID;\n    } \n       \n    for (int i = 0; i < NUM_BOXS; i++ ) {\n        temp_hasHit = IntersectBox(Box[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                      temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit && temp_t < nearest_t) {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Box[i].materialID;\n        }   \n    }\n    \n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ){\n        vec3 skyBox1 = texture(iChannel0,ray.d).rgb;\n        vec3 skyBox2 = texture(iChannel1,ray.d).rgb;\n        return mix(skyBox1,skyBox2,(sin(0.3*iTime)+1.0)*0.5);\n    }\n    \n    if(nearest_hitMatID==2){\n        vec2 uv = get_sphere_uv(nearest_hitNormal);\n        vec3 diffuse_color = texture(iChannel2,uv).rgb;\n        Material[2].k_d = diffuse_color;\n        Material[2].k_a = 0.5 * Material[2].k_d;\n        Material[2].k_rg = 0.05 * Material[2].k_r;\n    }\n    \n    if(nearest_hitMatID==3){\n       if(IntersectNUS(nearest_hitPos.zx)){   \n         nearest_hitNormal = vec3(0,-1,0); \n         Material[3].ior = -1.0;\n       }else{\n       float x = nearest_hitPos.x;\n       float z = nearest_hitPos.z;\n       float x2z2 = x*x + z*z;\n       if(x2z2>1e-5){\n        float A1 = 0.2;\n        float A2 = 0.9;\n        float w = 10.0;\n        float w2 = 0.1;\n        float temp = A1*2.0*A2*x*cos(A2*(x*x+z*z)-w*iTime);\n        float dydx = temp*x/x2z2*w2;\n        float dydz = temp*z/x2z2*w2;\n       nearest_hitNormal = normalize(vec3(dydx,-1,dydz));\n       }\n      }\n    }\n    \n    if(nearest_hitMatID==0){\n       if(IntersectNUS(nearest_hitPos.zx))\n           Material[0].k_a *=20.0;\n    }\n    \n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    Ray_t ShadowRay[NUM_LIGHTS];\n    bool inshadow[NUM_LIGHTS];\n    for (int i = 0; i < NUM_LIGHTS; i++ ) {\n        //We actually don't need to cast shadowray for transparent material(glass ball)\n        if(nearest_hitMatID == 1) continue;\n        ShadowRay[i].o = nearest_hitPos;\n        ShadowRay[i].d = normalize(Light[i].position - ShadowRay[i].o);\n\n        for (int j = 0; j < NUM_SPHERES; j++ ) {\n           \n            if(!inshadow[i]) {\n            inshadow[i] = IntersectSphere(Sphere[j], ShadowRay[i], DEFAULT_TMIN,\n                distance(nearest_hitPos, Light[i].position));\n            }\n        }\n       \n        for(int j = 0; j < NUM_BOXS; j++ ) {\n            if(!inshadow[i]) {\n            inshadow[i] = IntersectBox(Box[j], ShadowRay[i], DEFAULT_TMIN,\n                distance(nearest_hitPos, Light[i].position));\n            }\n        }\n        \n        I_local += PhongLighting( ShadowRay[i].d, nearest_hitNormal, -ray.d, inshadow[i],\n            Material[nearest_hitMatID], Light[i] );\n    }\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n    ior = Material[nearest_hitMatID].ior;\n    fuzz = Material[nearest_hitMatID].fuzz;\n    return I_local;\n}\n\nfloat reflectance(float cosine, float ref_idx) {\n    // Use Schlick's approximation for reflectance.\n    float r0 = (1.0-ref_idx) / (1.0+ref_idx);\n    r0 = r0*r0;\n    float temp = 1.0-cosine;\n    float temp2 = temp*temp;\n    return r0 + (1.0-r0)*temp*temp2*temp2;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nconst int TOTAL_RAY_NUM = 10;\nconst int GLOSSY_RAY_NUM = 10;\nconst float GLOSSY_RAY_WEIGHT = 1.0/float(GLOSSY_RAY_NUM);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n    \n    //Seed for generate random number on GPU\n    vec2 p = (-iResolution.xy + 2.*fragCoord - 1.)/iResolution.y;\n    seed = float(baseHash(floatBitsToUint(p*iTime)))/float(0xffffffffU);\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec2 mouse_pos = iMouse.xy /iResolution.xy;\n    vec3 cam_pos = 6.0*normalize(vec3(sin(0.11 * iTime + 3.0*mouse_pos.x), 0.8*mouse_pos.y+0.2, cos(0.11 * iTime + 3.0*mouse_pos.x))) - vec3(0.0,0.1,0.0);\n    //vec3 cam_pos = vec3( 2.5*1.5, (min(0.5,max(-0.5,sin(0.5*iTime)))+0.6)*3.0, 2.5*1.5 );\n    vec3 cam_lookat = vec3( 0.25, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    vec3 er = normalize(vec3(pixel_pos,pixel_pos_z));\n    pRay.d = normalize(mat3(cam_x_axis,cam_y_axis,cam_z_axis)*er);\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    \n    Ray_t nextRay[TOTAL_RAY_NUM];\n    nextRay[0] = pRay;\n    nextRay[0].should_cast = true;\n    nextRay[0].weight = 1.0;\n    \n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n        float ior,fuzz;\n        \n        vec3 I_local;\n        //Cast at least one ray\n        //Maybe we need to cast more ray\n        for(int i=0;i<TOTAL_RAY_NUM;++i)\n        {\n            if(!nextRay[i].should_cast)\n                break;\n            I_local += CastRay( nextRay[i], hasHit, hitPos, hitNormal, k_rg,ior,fuzz)*nextRay[i].weight;\n            nextRay[i].should_cast = false;\n        }\n        \n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n        \n        vec3 reflected = reflect(nextRay[0].d, hitNormal);\n        \n        if(ior<0.0){ \n            if(fuzz<0.0){\n                //For specular surface, we only cast one ray\n                nextRay[0] = Ray_t( hitPos, reflected,true,1.0);\n            }else{\n                //For glossy surface, we need to sample more ray\n                for(int i=0;i<GLOSSY_RAY_NUM;++i){\n                    nextRay[i] = Ray_t( hitPos, reflected+fuzz*random_in_unit_sphere(seed),true,GLOSSY_RAY_WEIGHT);\n                    //refresh seed\n                    seed = hash1(seed);\n                }\n            }\n        }\n        else{\n        //For trasparent surface,we trace one or two ray\n            vec3 dir = nextRay[0].d;\n            if(dot(-dir,hitNormal)>=0.0){\n                ior = 1.0/ior;\n            }else{\n                hitNormal = -hitNormal;\n            }\n            float cos_theta = min(dot(-dir, hitNormal), 1.0);\n            float sin2_theta = 1.0 - cos_theta*cos_theta;\n            bool total_internal_reflect = ior*ior*sin2_theta > 1.0;\n            if(total_internal_reflect){\n            //For total internal reflection, we only cast one ray\n               nextRay[0] = Ray_t( hitPos, reflected,true,1.0);\n            }\n            else{\n            //We cast one ray for reflection, one ray for refraction\n               float reflective = reflectance(cos_theta,ior);\n               nextRay[0] = Ray_t(hitPos,reflected,true,reflective);\n               nextRay[1] = Ray_t(hitPos,refract(-dir,hitNormal,ior),true,1.0-reflective);\n            }\n       }\n    }\n    \n    fragColor = vec4(I_result,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.1415926536;\nconst float HalfPI = PI/2.0;\nconst float TAU = 2.0*PI;\n\nuint baseHash( uvec2 p ) {\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\nfloat hash1( inout float seed ) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));\n    return float(n)/float(0xffffffffU);\n}\n\nvec2 hash2( inout float seed ) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));\n    uvec2 rz = uvec2(n, n*48271U);\n    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nfloat cuberoot( float x ) { return sign(x)*pow(abs(x),1.0/3.0); }\n\nvec3 random_in_unit_sphere(float seed) {\n    float u = hash1(seed);\n    float v = hash1(seed);\n    float theta = u*2.0*PI;\n    float phi = acos(2.0*v-1.0);\n    float r = cuberoot(hash1(seed));\n    float sinTheta = sin(theta);\n    float cosTheta = cos(theta);\n    float sinPhi = sin(phi);\n    float cosPhi = cos(phi);\n    float x = r*sinPhi*cosTheta;\n    float y = r*sinPhi*sinTheta;\n    float z = r*cosPhi;\n    return vec3(x,y,z);\n}\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n    bool should_cast;\n    float weight;\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Box_t{\n    vec3 center;\n    vec3 size;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n    float ior;\n    float fuzz;\n};\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d,ray.d);\n    float half_b = dot(oc,ray.d);\n    float c = dot(oc,oc) - sph.radius * sph.radius;\n    \n    float discr = half_b*half_b - a*c;\n    if(discr>=0.0){\n        float sqrtd = sqrt(discr);\n        t = (-half_b-sqrtd)/a;\n        hitPos = ray.o + t * ray.d;\n        vec3 normal = normalize(hitPos - sph.center);\n        hitNormal = normal;\n        return (t >= tmin && t<= tmax);\n        \n    }\n    \n    return false;\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d,ray.d);\n    float half_b = dot(oc,ray.d);\n    float c = dot(oc,oc) - sph.radius * sph.radius;\n    \n    float discr = half_b*half_b - a*c;\n    if(discr>=0.0){\n        float sqrtd = sqrt(discr);\n        float t1 = (-half_b-sqrtd)/a;\n        float t2 = (-half_b+sqrtd)/a;\n        return ((t1 >= tmin && t1<= tmax) || (t2 >= tmin && t2 <= tmax));\n    }\n    \n    return false;\n}\n\nbool IntersectBox( in Box_t box, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal)\n{\n    vec3 ro = ray.o;\n    ray.o -= box.center;\n    vec3 m = sign(ray.d)/max(abs(ray.d), 1e-8);\n    vec3 n =m*ray.o;\n    vec3 k = abs(m)*box.size;\n    \n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    \n    if( tN>tF || tF<=0.0) return false;\n    \n    if(tN >= tmin && tF<=tmax){\n        t = tN;\n        hitPos = ro + t*ray.d;\n        hitNormal = -sign(ray.d)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n        return true;\n    }\n    if(tF >= tmin && tF <= tmax){\n        t = tF;\n        hitPos = ro + t*ray.d;\n        hitNormal = -sign(ray.d)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n        return true;\n    }\n    \n    return false;\n}\n\nbool IntersectBox( in Box_t box, in Ray_t ray, in float tmin, in float tmax )\n{\n    ray.o -= box.center;\n    vec3 m = sign(ray.d)/max(abs(ray.d), 1e-8);\n    vec3 n =m*ray.o;\n    vec3 k = abs(m)*box.size;\n    \n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    \n    if( tN>tF || tF<=0.0) return false;\n    \n    return (tN >= tmin && tF<=tmax)||(tF >= tmin && tF <= tmax);\n}\n\nvec2 get_sphere_uv(in vec3 normal){\n     float theta = acos(normal.z);\n     float _atan = atan(normal.z, normal.x);\n     float phi = _atan*_atan + PI;\n     return vec2(phi/TAU,theta/PI);\n}\n\nfloat merge_sphere_sdf(in Sphere_t sph1,in Sphere_t sph2, in vec3 p){\n    float d1 = length(p-sph1.center)-sph1.radius;\n    float d2 = length(p-sph2.center)-sph2.radius;\n    const float k = 2.0;\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nvec3 calculate_normal(in Sphere_t sph1,in Sphere_t sph2,in vec3 p)\n{\n/*\n    const vec3 small_step = vec3(1e-5, 0.0, 0.0);\n    float gradient_x = deformable_sphere_sdf(sph,p + small_step.xyy) - deformable_sphere_sdf(sph,p - small_step.xyy);\n    float gradient_y = deformable_sphere_sdf(sph,p + small_step.yxy) - deformable_sphere_sdf(sph,p - small_step.yxy);\n    float gradient_z = deformable_sphere_sdf(sph,p + small_step.yyx) - deformable_sphere_sdf(sph,p - small_step.yyx);\n\n    return normalize(vec3(gradient_x, gradient_y, gradient_z));\n*/\n    const float h = 1e-6;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*merge_sphere_sdf(sph1,sph2,p + k.xyy*h ) + \n                      k.yyx*merge_sphere_sdf(sph1,sph2,p + k.yyx*h ) + \n                      k.yxy*merge_sphere_sdf(sph1,sph2,p + k.yxy*h ) + \n                      k.xxx*merge_sphere_sdf(sph1,sph2,p + k.xxx*h ) );\n}\n\nbool IntersectMergeSpheres( in Sphere_t sph1,in Sphere_t sph2, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    t = tmin;\n    const float MINIMUM_HIT_DISTANCE = 1e-6;\n    \n    vec3 ro = ray.o;\n    vec3 rd = ray.d;\n    \n     for (int i = 0; i < 32; ++i)\n    {\n        vec3 cur_pos = ro + t * rd;\n        \n        float distance_to_closest = merge_sphere_sdf(sph1,sph2,cur_pos);\n        if ( distance_to_closest< MINIMUM_HIT_DISTANCE) \n        {\n            hitPos = cur_pos;\n            hitNormal = calculate_normal(sph1,sph2,cur_pos);\n            return true;\n        }\n\n        if (t > tmax)\n        {\n            return false;\n        }\n        t += distance_to_closest;\n    }\n    return false;\n} \n\n//Signed Distance Function of segment shape\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\n//Signed Distance Function of horsehoe shape\nfloat sdHorseshoe( in vec2 p, in vec2 c, in float r, in vec2 w )\n{\n    p.x = abs(p.x);\n    float l = length(p);\n    p = mat2(-c.x, c.y, \n              c.y, c.x)*p;\n    p = vec2((p.y>0.0 || p.x>0.0)?p.x:l*sign(-c.x),\n             (p.x>0.0)?p.y:l );\n    p = vec2(p.x,abs(p.y-r))-w;\n    return length(max(p,0.0)) + min(0.0,max(p.x,p.y));\n}\n\n//Signed Distance Function of Letter 'N'\nfloat N_sdf(in vec2 p)\n{\n    vec2 offset = vec2(-2.0,0.0);\n    float d = udSegment( p-offset, vec2(-0.6,-1.0), vec2(-0.6,1.0)) - 0.1;\n    float d1 = udSegment( p-offset, vec2(-0.6,1.0), vec2(0.6,-1.0)) - 0.1;\n    float d2 = udSegment( p-offset, vec2(0.6,-1.0), vec2(0.6,1.0)) - 0.1;\n    return min(d2,min(d,d1)); \n}\n\n//Signed Distance Function of Letter 'U'\nfloat U_sdf(in vec2 p)\n{\n    float d = udSegment( p, vec2(-0.6,-0.4), vec2(-0.6,1.0)) - 0.1;\n    float d1 = sdHorseshoe(p-vec2(0.0,-0.4),vec2(cos(1.6),sin(1.6)), 0.6, vec2(0.1,0.1));\n    float d2 = udSegment( p, vec2(0.6,-0.4), vec2(0.6,1.0)) - 0.1;\n    return min(d2,min(d,d1));\n}\n\n////Signed Distance Function of Letter 'S'\nfloat S_sdf(in vec2 p)\n{\n    vec2 offset = vec2(2.0,0.0);\n    float d1 = udSegment( p-offset, vec2(-0.6,-1.0), vec2(0.2,-1.0)) - 0.1;\n    float d2 = udSegment( p-offset, vec2(-0.2,1.0), vec2(0.6,1.0)) - 0.1;\n    float d3 = udSegment( p-offset, vec2(-0.2,0.0), vec2(0.2,0.0)) - 0.1;\n    float d4 = sdHorseshoe(p.yx-offset.yx-vec2(0.5,-0.2),vec2(cos(1.6),sin(1.6)), 0.5, vec2(0.1,0.1));\n    float d5 = sdHorseshoe(-p.yx+offset.yx-vec2(0.5,-0.2),vec2(cos(1.6),sin(1.6)), 0.5, vec2(0.1,0.1));\n    \n    return min(d1,min(d2,min(d3,min(d4,d5))));\n}\n\nbool IntersectNUS(in vec2 p)\n{\n    return N_sdf(p)<0.0||U_sdf(p)<0.0||S_sdf(p)<0.0;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"// Created by inigo quilez - iq/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat base( in float time )\n{\n    float y = 0.0;\n\n    {\n    float f = 220.0;\n    float im = 10.0 + 9.0*sin(0.25*6.2831*time);\n    float v = 0.0;\n    //v += 1.0*sin( 6.2831*f*time*1.0 + 1.0*im*sin(0.25*6.2831*f*time) );\n    v += 0.3*sin( 6.2831*f*time*0.5 + 8.0*im*sin(0.5*6.2831*f*time) );\n    v *= exp(-2.0*fract(8.0*time));\n    y += 0.3*v;\n    }\n\n    {\n    float t = fract(time*2.0);\n    float f = 220.0*exp(-5.0*t);\n    float a = sin( 6.2831*f*t*0.5 );\n    float v = 0.0;\n    v += clamp(a*8.0,-1.0,1.0)*(exp(-10.0*t) + exp(-1.0*t));\n    v += a*8.0*exp(-1.0*t);\n    y += 0.4*v;\n    }\n\n    return y;\n}\n\n\nvec2 mainSound( in int samp, float time )\n{\n    float y = 0.0;\n    float s = 1.0;\n    float o = 0.0;\n    for( int i=0; i<5; i++ )\n    {\n        y += s*base( time-o );\n        s *= 0.2;\n        o += 0.25;\n    }\n \n    \n    return vec2(y*0.15);\n}","name":"Sound","description":"","type":"sound"}]}