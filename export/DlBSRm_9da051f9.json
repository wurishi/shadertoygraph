{"ver":"0.1","info":{"id":"DlBSRm","date":"1675808991","viewed":291,"name":"MOTIONTRACK_TIMEBASED_GRAPHICS","username":"SimonOakey","description":"This setup is done to track and visualize motion of any kind in some kind of buffery graphic. Simple Color shift is used to draw some kind of temporal  aspect into it. The framerate fps \"steps\" still suck. ideas? :)","likes":4,"published":1,"flags":38,"usePreview":0,"tags":["visualization","webcam","motion"],"hasliked":0,"parentid":"4lKGDz","parentname":"Neon motion detection"},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n   \n  \n       float fps = 30.0;\n    \n     if(mod(float(iFrame), 30.0 / fps) == 0.0){\n  \n    vec3 col_0 = texture(iChannel0, uv).rgb;\n    \n   \n     col_0 = 1. - bg_col - col_0;\n     fragColor = vec4(col_0,1.);\n     }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = 1.0 - uv.x;\n    \n    vec3 col = vec3(0.0);\n    vec2 off = 2.0 / iResolution.xy;\n    \n    float tick = 0.;\n    \n    \n    \n    \n     \n    for (float i=-blur_fac; i<blur_fac; i++) {\n        \n    \tfor (float j=-blur_fac; j<blur_fac; j++) {\n        \n              \n    \t\t  col += texture(iChannel0, uv + vec2(i, j) * off).rgb  ;\n             tick++;\n        }\n    }\n    \n    \n    fragColor = vec4(col / tick, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n   \n    \n     vec2 uv = fragCoord.xy / iResolution.xy; \n    // float amp =   texture(iChannel2,vec2(0,1)).r *5.;\n     \n    //float amp = texelFetch(iChannel0, ivec2(1., 1.), 0).r * 11.;\n   \n     \n       \n         \n        vec3 color1 = texture(iChannel0, uv).rgb;\n        vec3 color2 = texture(iChannel1, uv).rgb;\n        \n        \n\n        float motion = abs((0.299*color1.r + 0.587*color1.g + 0.114*color1.b) - (0.299*color2.r + 0.587*color2.g + 0.114*color2.b));\n\n        vec3 color = vec3(draw_intensity * motion    )  ;\n\n        color -=  rand(uv.x * iTime + uv.y * iTime)*noise_intensity;\n\n        color =   hue2rgb(iTime*.1)* color;\n\n   \n        fragColor = vec4(color, 1.0);\n     \n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n     uv.y +=feedback_displace_y;\n     \n     \n     \n            vec3 col_0 = texture(iChannel0, uv).rgb;\n            vec3 col_1 = texture(iChannel1, uv).rgb;\n            fragColor = vec4(mix(col_1, clamp(col_0, col_1 - .7 /255.0, col_1 +32.0 / 255.0), fade_speed), 1.0);\n\n     \n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// random function\n#define rand(n) fract(cos(n*89.42)*343.42)\n\n#define blur_fac 1.0   // blur the trails > higher = more blur\n#define draw_intensity 5.0  // how strong the diff is drawn to the canvas \n#define noise_intensity .1 // how much noise is mixed in diff\n\n#define fade_speed 0.999 //\n\n#define bg_col vec3(.1,.1,.1) // set some fixed background color\n\n#define feedback_displace_y  .0005\n\n\n#ifndef saturate\n#define saturate(v) clamp(v,0.,1.)\n//      clamp(v,0.,1.)\n#endif\n\nvec3 hue2rgb(float hue){\n\thue=fract(hue);\n\treturn saturate(vec3(\n   \n\t\tabs(hue*6.-3.)-1.,\n\t\t2.-abs(hue*6.-2.),\n\t\t2.-abs(hue*6.-4.)\n\t));\n}","name":"Common","description":"","type":"common"}]}