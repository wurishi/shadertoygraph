{"ver":"0.1","info":{"id":"ds3BDM","date":"1700756409","viewed":37,"name":"noise.fbm","username":"alesteba","description":"noise, brownian motion, layers, uv remapping\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","uv","remap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(in vec2 _st, in float _radius){\n\n    vec2 l = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\nfloat rand1dTo1d(float value){\n\n\tfloat mutator = 0.546;\n    \n    float random = fract(sin(value + mutator) * 143758.5453);\n    \n\treturn random;\n}\n\nfloat EaseInOutQuint(float x)\n{\n  float inValue = 16.0 * x * x * x * x * x;\n  float outValue = 1.0 - pow(-2.0 * x + 2.0, 5.0) / 2.0;\n  return step(inValue , 0.5) * inValue + step(0.5,outValue) * outValue;\n}\n\nfloat gradientNoise(float value){\n\n    float previousCellNoise = rand1dTo1d(floor(value));\n    float nextCellNoise = rand1dTo1d(ceil(value));\n    float interpolator = fract(value);\n    interpolator = EaseInOutQuint(interpolator);\n    return mix(previousCellNoise, nextCellNoise, interpolator);\n}\n\nfloat rand(float x)\n{\n    return fract(sin(x)*1.0);\n}\n\nfloat hash( uint n );\n\nfloat bnoise( in float x )\n{\n    float i = floor(x);\n    float f = fract(x);\n    float s = sign(fract(x/2.0)-0.5);\n    \n    return mix(rand(i), rand(i + 1.0), smoothstep(0.,1.,f));\n}\n\nfloat sampleLayeredNoise(float value){\n\n    float noise = gradientNoise(value);\n    float highFreqNoise = gradientNoise(value * 6.0);\n    noise = noise + highFreqNoise * 0.2;\n    return noise;\n}\n\n#define OCTAVES 3 \n\nfloat _CellSize = 1.0;\nfloat _Roughness = 2.0;\nfloat _Persistance = 0.75;\n\nfloat sampleLayeredNoise_OCTAVES(float value){\n\n    float noise = 0.0;\n    float frequency = 1.0;\n    float factor = 0.85;\n\n    for(int i=0; i<OCTAVES; i++){\n    \n        noise = noise + gradientNoise(value * frequency + float(i) * 0.72354) * factor;\n        \n        factor *= _Persistance;\n        \n        frequency *= _Roughness;\n    }\n\n    return noise;\n}\n\nvec3 rgb(float r, float g, float b)\n{\n    return vec3(r/255.0, g/255.0, b/255.0);\n}\n\n\nvec2 brickTile(vec2 _st, float _zoom){\n    _st *= _zoom;\n\n    // Here is where the offset is happening\n    _st.x += step(1., mod(_st.y,2.0)) * 0.5;\n\n    return fract(_st);\n}\n\nfloat box(vec2 _st, vec2 _size){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 uv = smoothstep(_size,_size+vec2(1e-4),_st);\n    uv *= smoothstep(_size,_size+vec2(1e-4),vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\n// second space\n\nfloat random (in float x) {\n    return fract(sin(x)*1e4);\n}\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(10.0,25.0)))* 35000.12345);\n}\n\nfloat randomSerie(float x, float freq, float t) {\n    return step(.8,random( floor(x*freq)-floor(t) ));\n}\n\nvec3 cyber_punk( in vec2 st )\n{\n    st.x *= iResolution.x/iResolution.y;\n\n    vec3 color = vec3(0.0);\n\n    float cols = 5.;\n    float freq = random(floor(iTime))+abs(atan(iTime)*0.01);\n    float t = 60.+iTime*(1.0-freq)*30.;\n\n    freq += random(floor(st.y));\n\n    float offset = 0.01;\n    \n    color = vec3(randomSerie(st.y, freq*50., t+offset),\n                 randomSerie(st.y, freq*50., t),\n                 randomSerie(st.y, freq*50., t-offset));\n\n    return 1.0-color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float px = 1.0/iResolution.y;\n    \n    vec2 p = fragCoord*px;\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n\t\n    vec3 col = vec3( 0.0 );\n        \n    // high function: \n    \n    p.x += iTime*0.1;\n    \n    {\n        float height = 0.25;\n    \n        float y = 0.5+height*bnoise( 6.0*p.x );\n        \n        vec3 col_r = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        \n        col = mix( col, vec3(255/255, 75/255, 145/255), 1.0 - smoothstep( 0.0, 4.0*px, abs(p.y-y) ) );\n        \n        float shape = step(uv.y, y);\n\n        col = mix(col, col_r, shape);\n    }\n        \n    \n    // mid function\n    \n    p.x += iTime*0.125;\n  \n    {\n        float height = 0.1;\n    \n        float y = 0.25+height*sampleLayeredNoise_OCTAVES( 5.0*p.x );\n        \n        col = mix( col, rgb(80.0, 25.0, 163.0), 1.0 - smoothstep( 0.0, 4.0*px, abs(p.y-y) ) );\n        \n        vec2 uv1 = brickTile(uv,10.0);\n        \n        float shape = step(uv.y, y);\n        \n        //col = mix(col, vec3(vec3(circle(uv1,0.5))), shape);  \n        \n        vec3 col_33 = cyber_punk(uv);\n        \n        col = mix(col, col_33, shape);  \n    }\n    \n    // low function\n    \n    p.x -= iTime*0.15;\n    {\n        float height = 0.25;\n    \n        float y = height*gradientNoise( 6.0*p.x );\n        \n        vec2 uv1 = brickTile(uv,10.0);\n        \n        float shape = step(uv.y, y);\n\n        col = mix(col, vec3(box(uv1,vec2(0.9))), shape);\n        \n        col = mix( col, rgb(255.0, 118.0, 118.0), 1.0 - smoothstep( 0.0, 5.0*px, abs(p.y-y) ) );\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}