{"ver":"0.1","info":{"id":"mtcGD8","date":"1682328647","viewed":213,"name":"GammaCorrectionTest","username":"ITSanta","description":"Error mixing when not in linear space.\nUse the mouse to control the amplitude of the blend.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 white = vec3(1.0,1.0,1.0);\nvec3 black = vec3(0.0,0.0,0.0);\nvec3 red = vec3(1.0,0.0,0.0);\nvec3 green = vec3(0.0,1.0,0.0);\nvec3 blue = vec3(0.0,0.0,1.0);\n\n// Gamma correction\nvoid gammaCorrection( inout vec4 fragColor )\n{\n    fragColor = pow(fragColor, vec4(1./2.2));\n}\n\nvec4 stepGrayColor( in vec2 uv, in float colorLevel )\n{\n    float x = float(int(uv.x * colorLevel)) / colorLevel;\n    return vec4(white,1.0) * x;\n}\n\nvec4 stepGrayColorWithGamma( in vec2 uv, in float colorLevel  )\n{\n    vec4 fragColor = stepGrayColor(uv, colorLevel);\n    gammaCorrection(fragColor);\n    return fragColor;\n}\n\nvoid circle( inout vec4 fragColor, in vec2 uv, vec2 center, float radius, vec3 color)\n{\n    float d = length(uv - center);\n    float fade = iMouse.x / iResolution.x;\n    if(fade == 0.0)\n    {\n        fade = 0.5;\n    }\n    fragColor.rgb = mix( fragColor.rgb, color, smoothstep( 0.0, fade, radius - d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Human perception of black and white color.\n    /*\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    if(uv.y < 0.25)\n    {\n        fragColor = stepGrayColor(uv, 10.0);\n        //[0,25, 51, 76,102,127,153,178,204,229]\n    }\n    else if(uv.y < 0.5)\n    {\n        fragColor = stepGrayColorWithGamma(uv, 10.0);\n        //[0,90,123,147,168,186,202,217,230,243]\n    }\n    else if(uv.y < 0.75)\n    {\n        fragColor = stepGrayColor(uv, 10000.0);\n    }\n    else\n    {\n        fragColor = stepGrayColorWithGamma(uv, 10000.0);\n    }\n    */\n    \n    // The effect of gamma correction on color mixing.\n    fragColor.rgb = white;\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    circle(fragColor, uv, vec2(-1.0,-0.25), 0.5, red);\n    circle(fragColor, uv, vec2(-0.5,-0.25), 0.5, blue);\n    circle(fragColor, uv, vec2(-0.75,0.25), 0.5, green);\n    gammaCorrection(fragColor);\n    circle(fragColor, uv, vec2(0.5,-0.25), 0.5, red);\n    circle(fragColor, uv, vec2(1.0,-0.25), 0.5, blue);\n    circle(fragColor, uv, vec2(0.75,0.25), 0.5, green);\n}","name":"Image","description":"","type":"image"}]}