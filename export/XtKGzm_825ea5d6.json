{"ver":"0.1","info":{"id":"XtKGzm","date":"1473887567","viewed":384,"name":"Super Psychedelic Spectrogram","username":"ttoinou","description":"Upgraded https://www.shadertoy.com/view/XtV3zw\nBuffer A is used to store the previous spectrum values\nMouse click : horizontal -> grey/color, vertical -> width of fft\n\nYou need to load a music, in channel 1 in buffer A tab, and adjust adjust fftSamples !","likes":11,"published":1,"flags":96,"usePreview":0,"tags":["fft","spectrum","music","audio","memory","temporal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define dx iMouse.x/iResolution.x\n#define dy iMouse.y/iResolution.y\n\n#define temporalSpeed 6.0\n\n// fft Options\n#define inputSound iChannel0\n#define fftWidth \t\t1.0\t\t\t// width of fft texture (why not 512.0 ?! )\n#define fftRadius \t\t0.0001 + 0.02*dy\t\t// width of window for fft sampling\n#define fftSmooth \t\t1.0\t\t\t// smoothness coeff\n#define fftRadiusCoeff \t(6.0*dx+1.0) \t// enlargment of radius with G and B\n#define fftPreamp\t\t0.6\t\t\t// pre amp before dynamic\n#define fftBoost  \t\t0.2\t\t\t// dynamic amp\n#define fftSamples \t\t11 // 111 \t// number of iteration for fft sampling, increases quality !\n#define fftMinBass \t\t0.00196 \t// 1.0/512.0\n#define fftRadiusR\t\tfftRadius\n#define fftRadiusG\t\tfftRadius*fftRadiusCoeff\n#define fftRadiusB\t\tfftRadius*fftRadiusCoeff*fftRadiusCoeff\n\n#define to01(x) clamp(x,0.0,1.0)\n\n#define background 1.8\n#define background2 1.5\n\nfloat bassHyperbola(float f){\n  //return 0.0;\n  return 0.8 /(16.0*f + 1.5) - 0.05;\n  //return 1.0/(7.0*f + 3.0);\n  //return 1.0/(15.0*f + 2.0);\n}\n\nfloat bass(float f,float i){\n  //return i; \t\t\t\t\t\t// nothing\n  //return bassHyperbola(f);// see graph\n  //return i - dx*1.0 /(16.0*f + 1.3);    // bass attenuation\n  return (i - bassHyperbola(f))/(1.0 - bassHyperbola(f));    // bass attenuation\n}\n\nfloat trebles(float f,float i){\n  //return i; \t\t\t\t\t\t// nothing\n  float k = f-1.0;\n  //return i * ( 3.0 - 2.0*k*k );\t// amplify trebles, x3 for trebles, x1 for bass\n  return i * ( 2.0 - 1.0*k*k );\t\t// amplify trebles, x2 for trebles, x1 for bass\n}\n\nfloat remapIntensity(float f, float i){\n    //return i; // nothing\n    float k = to01( trebles(f,bass(f,i))*fftPreamp);\n    //return k; // no dynamic\n    return k*(k+fftBoost); // more dynamic\n}\n\nfloat remapFreq(float freq){\n // linear scale\n //return clamp(freq,fftMinBass,1.0);\n // log scale\n return clamp(to01(- log(1.0-freq/2.0 + 0.01)),fftMinBass,1.0);\n}\n\nfloat fft(float f,float r,float time){\n    float sum = 0.0;\n    float val = 0.0;\n    float coeff = 0.0;\n    \n    float k = 0.0;\n    \n     // loop sampling\n    for( int i = 0; i < fftSamples ; i++ ){\n        k = float(i)/float(fftSamples-1)-0.5;\n        // decreasing factor, more important around 0\n        coeff = exp(-k*k/(fftSmooth*fftSmooth)*2.0);\n        //coeff = 1.0;\n        \n\t\tval += texture(inputSound, vec2( remapFreq(f + k * r)*fftWidth, time) ).r * coeff;\n        \n        // simulation for test\n        //float freq = ( remapFreq(f + k * r)*fftWidth - 0.5 ) / 0.008;//(iMouse.x/iResolution.x);\n\t\t//val += exp(  - freq*freq/2.0 ) * coeff;\n        \n        sum += coeff;\n    }\n    \n    return remapIntensity(f,val/sum);\n    \n}\n\nfloat fft(float f,float r){\n    return fft(f,r,0.0);\n}\n\nfloat lum(float k){\n    //return k;\n    return sqrt(k-0.01);\n}\n\nfloat spectr(float k){\n    return background2*k*k;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float minCoord = min(iResolution.x,iResolution.y);\n\tfloat freq = uv.x;\n    float i1,i2,i3;\n\n    i1 = fft(freq,fftRadiusR);\n    i2 = fft(freq,fftRadiusG);\n    i3 = fft(freq,fftRadiusB);\n        \n\tfragColor = vec4(\n        i1*background*float(i1 > uv.y),\n        i2*background*float(i2 > uv.y) ,\n        i3*background*float(i3 > uv.y) ,\n        1.0);\n    \n    // see spectrogram\n    fragColor.r = lum(fragColor.r+spectr(fft(uv.x,fftRadiusR,uv.y/temporalSpeed)));\n    fragColor.g = lum(fragColor.g+spectr(fft(uv.x,fftRadiusG,uv.y/temporalSpeed)));\n    fragColor.b = lum(fragColor.b+spectr(fft(uv.x,fftRadiusB,uv.y/temporalSpeed)));\n    //fragColor = texture(iChannel0,uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfSW2","filepath":"https://soundcloud.com/guts/back-to-the-streets","previewfilepath":"https://soundcloud.com/guts/back-to-the-streets","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define buffer iChannel0\n#define sound  iChannel1\n#define soundRes iChannelResolution[1]\n#define step 1.0/iResolution.y\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n   \t// black by default\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n\n    if( iFrame != 0 ){\n        // store current fft\n        if( fragCoord.y <= 1.0 ){\n            fragColor=texture(iChannel1,vec2(uv.x, 0.0 ));\n        // store previous fft\n        } else if( fragCoord.y < iResolution.y - 1.0 ) {\n            fragColor=texture(buffer,vec2(uv.x,uv.y - step));\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}