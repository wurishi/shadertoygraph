{"ver":"0.1","info":{"id":"tdySRV","date":"1574684914","viewed":379,"name":"falling sand Test","username":"sapporo_dynamite","description":"falling sand test\n[control]\nsand : Click mouse\nwall: 1 + Click mouse\nerase: 2 + Click mouse\n","likes":10,"published":1,"flags":48,"usePreview":0,"tags":["falling","gpgpu","sand","fallingsand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tfalling sand Test\n\n\tImplements falling sand Test\n\n\tauthor:\n\tsapporo_dynamite/2019 \n\n\tLicense :\n\tCreative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n　　URL：\n    EL-EMENT\n    http://el-ement.com/labs/sand/\n\n\tShader:\n\tdemofox\n\thttps://www.shadertoy.com/view/MdGGzh\n*/\n\n/*\n\n2019/11/25\n  1.0.0 → 1.0.0\n    ・1st release \n\n2019/11/24\n  0.0.0 → 1.0.0\n    ・start\n*/\n\nvec4 getBuffer( in vec2 fragCoord)\n{\n    if (fragCoord.x >= 0. && fragCoord.x < float(iResolution.x) && fragCoord.y >= 0. && fragCoord.y < float(iResolution.y))\n    {\n     \tvec2 uv =  (fragCoord.xy + 0.5) / vec2(iResolution.xy);\n     \treturn texture(iChannel0, uv, -100.0);\n    }\n    return vec4(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = getBuffer(fragCoord).xyz;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool keyPress(int ascii){\n    return (texture(iChannel1,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\nvec4 getBuffer( in vec2 fragCoord)\n{\n    if (fragCoord.x >= 0. && fragCoord.x < float(iResolution.x) && fragCoord.y >= 0. && fragCoord.y < float(iResolution.y))\n    {\n     \tvec2 uv =  (fragCoord.xy + 0.5) / vec2(iResolution.xy);\n     \treturn texture(iChannel0, uv, -100.0);\n    }\n    return vec4(0.);\n}\n\nfloat disk(vec2 r, vec2 center, float radius) \n{\n\treturn 1.0 - smoothstep( radius-0.5, radius+0.5, length(r-center));\n}\n\nconst int w = 360;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat RandomFloat (vec2 cell)\n{\n    return rand(vec2(float(iFrame)*0.123+cell.x*0.645, float(iFrame)*0.453+cell.y*0.329));\n}\n\nconst vec4 wall  = vec4(0.3);\nconst vec4 sand  = vec4(1);\nconst vec4 black = vec4(0);\n\nvec4 isMove(vec2 cell, int dirType)\n{\n    vec4 cellTypeResult = black;\n    \n    // direction down\n    if(dirType == 0)\n    {\n        for(int i = 0; i < w; i++)\n        {\n            vec4 celltypeCurrent = getBuffer(vec2(cell.x, i) );\n            vec4 celltypeBelow = cellTypeResult;\n\n            cellTypeResult = celltypeCurrent;\n            \n            // check sand\n            if(all(equal(celltypeCurrent.xyz, sand.xyz)))\n            {\n                // cell below is empty?\n                if(all(equal(celltypeBelow.xyz, black.xyz))) {\n                \tcellTypeResult = black;\n                }\n            }\n            if(cell.y <= float(i) )break;\n        }\n    }\n    return cellTypeResult;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cell = floor(fragCoord);\n    \n    if(iFrame == 0) {\n        fragColor = black;\n    }\n    else {\n        vec4 cellType   = getBuffer( cell );\n        vec4 cellTypeUp = getBuffer( cell + vec2( 0., 1.0 ) ); \n       \n        \n        fragColor = cellType;\n        \n        vec4 cellTypeblow = black;\n           \n        // check wall\n        if( cellType.xyz == wall.xyz ) {\n            cellTypeblow = wall;\n        }\n        // check sand\n        else if( cellType.xyz == sand.xyz ) {\n            cellTypeblow = isMove(cell, 0);\n        }\n        \n        // is move ? \n        if( cellTypeblow.xyz == black.xyz )\n        {\n            if( cellTypeUp.xyz != wall.xyz ) {\n              fragColor = cellTypeUp;\n            } else {\n               fragColor = black;\n            }\n        }\n    }\n    \n    float size = 4.0;\n    if( keyPress( 49 )) size = 10.0;\n    if( keyPress( 50 )) size = 10.0;\n    \n    if( iMouse.z * disk(iMouse.xy, cell.xy, size) > 0.0) { \n        \n        if( all( equal( fragColor.xyz, black.xyz ))) {\n        \tfragColor = sand * step( RandomFloat( cell ), 0.5);\n        }\n        if( keyPress( 49 )) fragColor = wall;\n        if( keyPress( 50 )) fragColor = black;\n    }    \n    if(iTime<=11.0){\n        if(0.8<0.9*smoothstep(1.0,0.0,length(fragCoord.xy-iResolution.xy*0.5+vec2(sin(iTime*2.0)*100.0,0.0))*0.026)){\n        \tfragColor = sand * step( RandomFloat( cell ), 0.5);\n        }\n        if(0.8<0.9*smoothstep(1.0,0.0,length(fragCoord.xy-iResolution.xy*0.5+vec2(sin(iTime*2.0)*200.0, 100 ))*0.026)){\n        \tfragColor = wall;\n        }\n        if(0.8<0.9*smoothstep(1.0,0.0,length(fragCoord.xy-iResolution.xy*0.5+vec2(sin(iTime*2.0)*100.0, cos(iTime*2.0)*100.0 ))*0.026)){\n        \tfragColor = wall;\n        }\n    }    \n}","name":"Buffer A","description":"","type":"buffer"}]}