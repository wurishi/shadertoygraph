{"ver":"0.1","info":{"id":"XXffz4","date":"1728060013","viewed":19,"name":"moving neon waves","username":"355113","description":"practice using matrices","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["matrix","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// formulae from https://thebookofshaders.com/08/\n// YUV to RGB matrix\nmat3 yuv2rgb = mat3(1.0, 0.0, 1.13983,\n                    1.0, -0.39465, -0.58060,\n                    1.0, 2.03211, 0.0);\n\n// RGB to YUV matrix\nmat3 rgb2yuv = mat3(0.2126, 0.7152, 0.0722,\n                    -0.09991, -0.33609, 0.43600,\n                    0.615, -0.5586, -0.05639);\n\n// 2D rotation\nmat2 rotate2d(float ang)\n{\n    return mat2(cos(ang), -sin(ang),\n                sin(ang), cos(ang));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    // Rotate and scale\n    uv = rotate2d(3. * sin(iTime/ 4.)) * uv;\n    uv *= 2. + cos(iTime / 3.5);\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Alter color\n    col = yuv2rgb * col;\n    col = smoothstep(0.5, 0.51, col);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}