{"ver":"0.1","info":{"id":"4lB3W3","date":"1432899900","viewed":2105,"name":"MachineRoom","username":"dila","description":"Inspired by reinder's \"Abandoned base\" (https://www.shadertoy.com/view/XsSSRW)\nThe environment is generated by a technique documented here http://www.fractalforums.com/new-theories-and-research/exact-de-formulas-and-fractal-types","likes":41,"published":1,"flags":0,"usePreview":0,"tags":["procedural","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float pi = 3.14159;\n\nmat3 xrot(float t)\n{\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nvec3 paxis(vec3 p)\n{ /* thanks to eiffie */\n    vec3 a=abs(p),r = vec3(1.0,0.0,0.0);\n    if(a.z>=max(a.x,a.y))r=r.yzx;\n    else if(a.y>=a.x)r=r.zxy;\n    return r*sign(p);\n}\n\nfloat udBox( vec3 p, vec3 b )\n{ /* thanks to iq */\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdBoxInfinite(vec3 p, vec3 b)\n{\n  vec2 d = abs(p.xy) - b.xy;\n  return min(max(d.x,d.y),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdCylinderInfinite(vec3 p, float r)\n{\n    return length(p.xz) - r;\n}\n\nvec3 func(vec3 p, float s)\n{\n    vec3 off = paxis(p) * s * 1.5;\n    p -= off;\n    p -= sign(p) * s * 2.75;\n    return p;\n}\n\nvec2 map(vec3 p)\n{\n    p.x += sin(p.z);\n    \n    vec3 op = p;\n    \n    float k = 16.0;\n    p.z = (fract(p.z/k) * 2.0 - 1.0) * k * 0.5;\n    \n    vec3 ip = p;\n    \n    float bs = 1.0;\n    float r = 0.0;\n    float d = 1000.0;\n\n    for (int i = 0; i < 5; ++i) {\n        \n        ip = func(ip, bs);\n\n        float fd = udBox(ip, vec3(bs));\n        if (fd < d) {\n            d = fd;\n            r = float(i);\n        }\n        \n        bs *= 0.5;\n\t}\n    \n    d = max(d, -sdBoxInfinite(p,vec3(1.0)));\n    \n    float ck = 8.0;\n    vec3 pc = vec3(p.x, p.y, (fract(op.z/ck)*2.0-1.0)*ck*0.5);\n    d = max(d, -sdCylinderInfinite(pc, 2.0));\n    \n    float ground = p.y + 0.9;\n    if (ground < d) {\n        d = ground;\n        r = 6.0;\n    }\n\n    return vec2(d,r);\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy).x - map(p-o.xyy).x,\n                          map(p+o.yxy).x - map(p-o.yxy).x,\n                          map(p+o.yyx).x - map(p-o.yyx).x));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n \tfloat t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p).x;\n        t += d * 0.5;\n    }\n    return t;\n}\n\nvec3 _texture(vec3 p)\n{\n    vec3 ta = texture(iChannel0, vec2(p.y,p.z)).xyz;\n    vec3 tb = texture(iChannel0, vec2(p.x,p.z)).xyz;\n    vec3 tc = texture(iChannel0, vec2(p.x,p.y)).xyz;\n    return (ta + tb + tc) / 3.0;\n}\n\nfloat aoc(vec3 origin, vec3 ray) {\n    float delta = 0.1;\n    const int samples = 6;\n    float r = 0.0;\n    for (int i = 1; i <= samples; ++i) {\n        float t = delta * float(i);\n     \tvec3 pos = origin + ray * t;\n        float dist = map(pos).x;\n        float len = abs(t - dist);\n        r += len * pow(2.0, -float(i));\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n\tvec3 o = vec3(0.0, 0.0, 0.0);\n    o.z += iTime * 0.5;\n    o.x = sin(-o.z);\n    vec3 r = normalize(vec3(uv, 1.3));\n    r *= yrot(o.x);\n    \n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec2 mp = map(w);\n    float fd = mp.x;\n    float it = mp.y;\n    vec3 sn = normal(w);\n\n\tfloat fog = 1.0 / (1.0 + t * t * 0.1 + fd * 100.0);\n    \n    vec3 diff = _texture(w);\n    \n    if (it == 3.0) {\n        diff *= 0.5;\n    } else if (it == 2.0) {\n        diff = diff.xxx * 1.5;\n    } else if (it == 1.0) {\n        diff *= vec3(1.0, 1.0, 0.0);\n    }\n    \n    float sz = w.x + sin(w.z);\n    \n    if (it == 6.0) {\n        float m = 0.5+0.5*sign(fract(w.z*10.0+abs(sz)*10.0)-0.5);\n        float k = 0.5+0.5*sign(abs(sz)-0.8);\n        float ik = 0.5+0.5*sign(abs(sz)-0.9);\n        float cm = k*(1.0-ik);\n        vec3 tape = vec2(m*k,0.0).xxy;\n        diff = mix(diff*0.5, tape, cm);\n    }\n    \n    vec3 lighting = vec3(0.6);\n    for (int i = -2; i <= 2; ++i) {\n        float lz = floor(w.z+float(i)+0.5);\n        vec3 lpos = vec3(-sin(lz), 0.0, lz);\n        vec3 lcol = vec3(1.0);\n        float lmod = mod(lz,3.0);\n        if (lmod == 0.0) {\n            lcol = vec3(0.0,0.0,1.0) * (0.5+0.5*sin(iTime));\n            lpos.y = 1.0;\n        } else if (lmod == 2.0) {\n            lcol = vec3(0.0, 1.0, 0.0);\n            lpos.y = 0.25;\n            lpos.x += cos(lz);\n        } else {\n         \tlcol = vec3(1.0, 0.0, 0.0);\n            lpos.y = -0.25;\n            lpos.x -= cos(lz);\n        }\n        vec3 ldel = lpos - w;\n        float ldist = length(ldel);\n        ldel /= ldist;\n        float lprod = max(dot(sn,ldel),0.0);\n        float latten = 1.0 / (1.0 + ldist * ldist);\n        lighting += lprod * latten * lcol;\n    }\n    \n    diff *= lighting * fog;\n\n\tfragColor = vec4(diff,1.0);\n}","name":"Image","description":"","type":"image"}]}