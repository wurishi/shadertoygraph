{"ver":"0.1","info":{"id":"4lB3Wt","date":"1433386730","viewed":179,"name":"Study iQ's Synth - FM","username":"tyleeer","description":"Well, there seems to be no way to remember the time when mouse is released...","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["study"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Created by inigo quilez - iq\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Modified by Tyler\n\nvec2 pixelSpaceToUVSpace(vec2 p, vec2 resolution) {\n  vec2 uv = 2.0*p/resolution-1.0;\n  if (resolution.x > resolution.y)\n      uv[0] *= resolution.x/resolution.y;\n  else\n      uv[1] *= resolution.y/resolution.x;\n  return uv;\n}\n\nfloat signedDistanceToLine(vec2 p, vec2 n,float d) {\n \t// the line passes point d*n and has n as its normal\n    return dot(p-d*n,n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = pixelSpaceToUVSpace(fragCoord.xy,iResolution.xy); // get pixel position\n    vec2 m_uv = pixelSpaceToUVSpace(iMouse.xy,iResolution.xy); // get mouse position\n    \n    vec2 n = normalize(m_uv); // define the normal of the line\n    \n    // Calculate the scanning range required to cover the whole screen\n    float D = max(abs(signedDistanceToLine(vec2(iResolution.x/iResolution.y,-1.0),n,0.0)),\n                  abs(signedDistanceToLine(vec2(iResolution.x/iResolution.y,1.0),n,0.0)));\n    \n    float d;\n    if (iMouse.z < 0.01) {\n    \td = D*sin(iTime); // if mouse is released, let the line scan\n    }\n    else {\n        d = length(m_uv); // if mouse is clicked, let the line pass the mouse's position\n    }\n   \n    float a = smoothstep(0.0,0.001,signedDistanceToLine(uv,n,d)); // define region\n    float c = mix(0.0,0.4,a); // color the region\n    fragColor = vec4(c,c,c,1.0); \n}","name":"","description":"","type":"image"}]}