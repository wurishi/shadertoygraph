{"ver":"0.1","info":{"id":"wdB3zt","date":"1549675502","viewed":217,"name":"Baby's First Toy","username":"FergoTheGreat","description":"Something of no consequence.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","motionblur","antialias"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n#define ISQRT_2 0.7071067811865475\n\nuint hash(uint x)\n{\n    x = ((x >> 16) ^ x) * 0x85ebca6bu;\n    x = ((x >> 13) ^ x) * 0xc2b2ae35u;\n    x = ((x >> 16) ^ x);\n    return x;\n}\n \nuint hash(uvec2 v) { return hash(v.y ^ hash(v.x)); }\nuint hash(uvec3 v) { return hash(v.z ^ hash(v.y ^ hash(v.x))); }\nuint hash(uvec4 v) { return hash(v.w ^ hash(v.z ^ hash(v.y ^ hash(v.x)))); }\n\nfloat floatConstruct(uint m)\n{\n    m &= 0x007FFFFFu;\n    m |= 0x3F800000u;\n\n    float  f = uintBitsToFloat(m);\n    return f - 1.0;\n}\n\nfloat random(float x) { return floatConstruct(hash(floatBitsToUint(x))); }\nfloat random(vec2 v) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random(vec3 v) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random(vec4 v) { return floatConstruct(hash(floatBitsToUint(v))); }\n\nfloat sdCircle(vec2 p, float r)\n{\n\treturn length(p) - r;\n}\n\nfloat sdBox(vec2 p, vec2 b)\n{\n\tvec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nvec2 rotate(vec2 p, float r)\n{\n\tfloat angle = r * PI * -2.0;\n    float s = sin(angle), c = cos(angle);\n    return vec2(c * p.x + s * p.y, c * p.y - s * p.x);\n}\n\nvec2 translate(vec2 p, vec2 offset)\n{\n\treturn p - offset;   \n}\n\nfloat sdComplexShape(vec2 p)\n{\n\tfloat circle = sdCircle(p, 100.0);\n    float h0 = sdCircle(translate(rotate(p, 0.0), vec2(0.0, 60.0)), 25.0);\n    float h1 = sdCircle(translate(rotate(p, 0.2), vec2(0.0, 60.0)), 25.0);\n    float h2 = sdCircle(translate(rotate(p, 0.4), vec2(0.0, 60.0)), 25.0);\n    float h3 = sdCircle(translate(rotate(p, 0.6), vec2(0.0, 60.0)), 25.0);\n    float h4 = sdCircle(translate(rotate(p, 0.8), vec2(0.0, 60.0)), 25.0);\n    float h = min(min(min(min(h0, h1), h2), h3), h4);\n    return max(circle, -h);\n}\n\nfloat visibility(float d)\n{\n\tfloat g = length(vec2(dFdx(d), dFdy(d))) * ISQRT_2;\n    return smoothstep(g, -g, d);\n}\n\nfloat LinearFromSRGB(float srgb)\n{\n    if(srgb < 0.04045)\n        srgb /= 12.92;\n    else\n        srgb = pow((srgb + 0.055) / 1.055, 2.4);\n    return srgb;\n}\n\nvec3 LinearFromSRGB(vec3 srgb)\n{\n\treturn vec3(\n    \tLinearFromSRGB(srgb.x),\n        LinearFromSRGB(srgb.y),\n        LinearFromSRGB(srgb.z)\n    );   \n}\n\nvec4 tex(sampler2D samp, vec2 uv)\n{\n    vec4 t = texture(samp, uv);\n\treturn vec4(LinearFromSRGB(t.xyz), t.w);\n}\n\nvec3 scene(vec2 fragCoord, float time)\n{\n    vec2 pBox = rotate(translate(fragCoord, vec2(200.0, 200.0)), time * 0.3);\n    float box = sdBox(pBox, vec2(100.0, 100.0));\n    vec2 uvBox = pBox / 100.0 * 0.5 + 0.5;\n    \n\tvec2 pComplexShape = rotate(translate(fragCoord, iMouse.xy), time * 2.0);\n    float complexShape = sdComplexShape(pComplexShape);  \n    vec2 uvComplexShape = pComplexShape / 100.0 * 0.5 + 0.5;\n    \n    float shadow = sdCircle(pComplexShape, 100.0);\n    float cShadow = clamp(sqrt(clamp(shadow / 150.0, 0.0, 1.0)) + 0.5, 0.0, 1.0);\n    \n    vec3 bg = tex(iChannel0, fragCoord / iResolution.xy).xyz;\n    vec3 cBox = tex(iChannel1, uvBox).xyz;\n    vec3 cComplexShape = tex(iChannel2, uvComplexShape).xyz;\n    \n    return mix(mix(bg, cBox * cShadow, visibility(box)), cComplexShape, visibility(complexShape));\n}\n\n#define SAMPLES 64\n#define FPS 24\n#define GAMMA 2.2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec3 color;\n    for (int i = 0; i < SAMPLES; i++)\n    {\n        float jitter = random(vec4(fragCoord, iTime, i));\n        float t = floor(iTime * float(FPS)) / float(FPS);\n        color += scene(fragCoord, t + jitter / (float(FPS) * 2.0)) / float(SAMPLES);\n    }\n    vec3 dither = vec3(\n    \trandom(vec4(fragCoord, iTime, 0.0)) / 255.0,\n        random(vec4(fragCoord, iTime, 1.0)) / 255.0,\n        random(vec4(fragCoord, iTime, 2.0)) / 255.0\n    );\n    fragColor = vec4(pow(color, vec3(1.0/GAMMA)) + dither, 1.0);\n}","name":"Image","description":"","type":"image"}]}