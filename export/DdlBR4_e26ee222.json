{"ver":"0.1","info":{"id":"DdlBR4","date":"1688511934","viewed":57,"name":"Im Blue","username":"Ronush","description":"Da bu dee da bu die...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat smin( float a, float b )\n{\n    float k=1.;\n\tfloat res = exp2( -k*a ) + exp2( -k*b );\n\treturn -log2( res )/k;\n}\n\n\nfloat Sphere(vec3 p, float r){\n    float sphere = (length(p)-r);\n    return sphere;\n}\nfloat Capsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat Box( vec3 p, vec3 r)\n{\n  p=abs(p)-r;\n  return max(max(p.x, p.y), p.z);\n}\n\n\n//global variables\nfloat g1=0.; vec3 np, bp;\n\nvec2 getDist(vec3 p){\n    \n\tvec2 t=vec2(Box(p, vec3(2, 4, 0.1)), 5.);\n    vec2 h=vec2(Capsule(p-vec3(0, -1.5, 0), 3., 1.), 1);\n    t = (t.x<h.x)?t:h;\n    h = vec2(Sphere(abs(p)-vec3(0, 1.5, 0), 1.1), 0.);\n    t = (t.x<h.x)?t:h;\n\tt.x*=0.5;\n    return t;\n    \n}\n\nmat2 r2(float r){return mat2(cos(r), sin(r), -sin(r), cos(r));}\nvec2 map(vec3 p)\n{\n\tfloat tt=mod(iTime,100.);\n    p.xy*=r2(tt*0.5);\n    np=p;\n    float s=(sin(tt)-0.5)*1.5;\n    for(int i=0; i<10; i++){\n        np = abs(np)-vec3(4.-4.*s, 0, max(4.*s, 0.6));\n        np.xy*=r2(0.4+s);\n        //np.xz*=r2(0.3+s);\n    }\n\tvec2 h, t=getDist(np);\n\n    bp = np; bp.xy*=r2(1.);\n    h = getDist(abs(bp*0.5+1.));\n    h.x*=2.5;\n    t = (t.x<h.x)?t:h;\n    return t;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    \n    float dO = 0.;\n    float dS = 0.;\n    \n    for (int i=0; i<100; i++) {\n   \t vec3 p = ro+rd*dO;\n   \t dS = map(p).x;\n   \t dO+=dS;\n   \t if (dS<0.1) break;\n    \tdO+=map(p).x;\n    }\n    return dO;\n}\n\nvec3 getNormal(vec3 p){\n    float d0 = map(p).x;\n    vec2 e = vec2(0.00, 0.0001);\n    vec3 d1 = vec3(\n   \t map(p-e.yxx).x,\n   \t map(p-e.xyx).x,\n   \t map(p-e.xxy).x);\n    vec3 n = normalize(d0-d1);\n    \n    \n    \n    return n;\n}\n\n\n\nfloat GetLight(vec3 p){\n    vec3 lightpos = vec3(-3, 4, -200);\n    vec3 n = getNormal(p);\n    vec3 d = normalize(lightpos-p);\n    float strength = (dot(n, d))+.5;\n    return strength;\n\t//return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat tt=iTime;\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n    \n\tvec3 ro = vec3(-3, 4, -50.);\n\tvec3 cw=normalize(vec3(0, 0, 0)-ro);\n    //vec3 cw = normalize(vec3(0, 1, 0)-ro);\n    vec3 cu = normalize(cross(cw, vec3(0, 1, 0)));\n    vec3 cv = normalize(cross(cw, cu));\n    vec3 rd = mat3(cu, cv, cw)*normalize(vec3(-uv, 0.5));\n    \n    \n    \n \n\tvec3 col = vec3(0);\n\tfloat d = RayMarch(ro, rd);\n\tvec3 p = ro+rd*d;\n\tvec3 n = getNormal(p);\n\tfloat basecol = map(p).y;\n\tvec3 firstcol;\n\tif (basecol == 5.) firstcol = vec3(0., 0., 1.);\n\tif (basecol == 0.) firstcol = vec3(0.2, 0.2, 0.2);\n\tif (basecol == 1.) firstcol = vec3(1., 1., 1.);\n\tcol = vec3(GetLight(p)*firstcol);\n\t//col = vec3(n);\n    \n\tcol+=g1*0.03;\n\t// Output to screen\n\tfragColor = vec4(col,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}