{"ver":"0.1","info":{"id":"wl3yRf","date":"1609607344","viewed":74,"name":"Quasiperiodic noise","username":"ZiMMaBuE","description":".","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","quasiperiodic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//---------------------------------------\n/*\n\n    Quasiperiodic function\n\n    sin(A*x) + sin(B*x)\n    If the ratio A/B is rational, this will have a true period,\n    but if A/B is irrational there is no true period,\n    but a succession of increasingly accurate \"almost\" periods.\n    \n    https://en.wikipedia.org/wiki/Quasiperiodic_function\n    \n    I'm using A/B = golden ratio\n\n*/\n//---------------------------------------\n\n\nfloat qpsin(float x)\n{\n    const float a = 1.0+sqrt(5.0);\n    const float b = 2.0;\n    \n    float s = sin(a*x) + sin(b*x);\n    return s*0.5;\n}\n\nfloat fbm(float x)\n{\n    float f = 1.0;\n    float a = 1.0;\n    float r = 0.0;\n    float s = 0.0;\n    \n    for(int i=0; i<5; i++)\n    {\n        r += qpsin(x*f)*a;\n        f *= 2.0;\n        s += a;\n        a *= 0.5;\n    }\n    \n    return r/s;\n}\n\nfloat map(vec2 p)\n{\n    float x = p.x + iTime*.5;\n\n    float s = qpsin(x);\n    float n = fbm(x);\n    \n    float mask = step(0.0,p.x);\n    float h = mix(s,n,mask);\n    \n    return p.y - h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.0-1.0;\n\n    uv *= DISP_SCALE;\n\n    vec3 col = vec3(0);\n    \n    float mask = step(0.0,uv.x);\n    col = mix(vec3(.2), vec3(.3), mask);\n    \n    PLOT(map, vec3(1,0,0), col, uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//---------------------------------------\n// Implicit Plotter\n// by Flyguy\n// https://www.shadertoy.com/view/4tB3WV\n//---------------------------------------\nconst vec2 GRAD_OFFS = vec2(0.001, 0);\n#define DISP_SCALE 5.0\n#define LINE_SIZE 3.0\n#define GRAD(f, p) (vec2(f(p) - f(p + GRAD_OFFS.xy), f(p) - f(p + GRAD_OFFS.yx)) / GRAD_OFFS.xx)\n#define PLOT(f, c, d, p) d = mix(c, d, smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), abs(f(p) / length(GRAD(f,p)))))\n","name":"Common","description":"","type":"common"}]}