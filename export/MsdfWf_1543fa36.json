{"ver":"0.1","info":{"id":"MsdfWf","date":"1527093537","viewed":850,"name":"Kinda Glitchy Ball Physics","username":"DJDoomz","description":"sometimes a ball consumes another :(","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["2d","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 3)\n        fragColor = vec4(fragCoord*25.,sin(fragCoord.x*3534.)*7.,sin(fragCoord.x*345.)*7.+14.);\n    else\n        if(fragCoord.y < 1. && fragCoord.x < float(num)){\n            int i = int(fragCoord.x);\n\n            vec4 ball = texelFetch(iChannel0, ivec2(i,0),0);\n            \n            \n            \n            //update balls's position\n            ball.xy+=ball.zw;\n\n            //check for collisions against walls\n\n            if((ball.x+size) > iResolution.x || (ball.x-size) < 0.) ball.z = -ball.z;\n            if(ball.y + size > iResolution.y) ball.w = -ball.w;\n            \n            ball.x = clamp(ball.x, size+1., iResolution.x-size);\n            ball.y = clamp(ball.y, size, iResolution.y-size);\n            \n            bool onground = false;\n            \n            if(ball.y-size <= 0.)\n            {\n                ball.w = -ball.w;\n                ball.y = size;\n                //slightly decrease vel each bounce\n                ball.w *= .8;\n                ball.z *= .99;\n                onground = true;\n            }\n            \n            //gravity? who cares about gravity?\n            ball.w -= .3;\n            if(onground && abs(ball.w) < .7) ball.w = 0.;\n            \n            //ball collision\n            for(int z = 0; z < num; z++)\n            {\n                if(z==i) continue;\n                vec4 nball = texelFetch(iChannel0, ivec2(z,0),0);\n                if(distance(ball.xy,nball.xy) < size*1.9){\n                    //get angle of collision\n                    vec2 a = normalize(ball.xy - nball.xy);\n                    //steal collision's vel\n                    \n                    vec2 newvel = nball.zw;\n                    \n                    newvel = ball.zw+newvel+length(ball.zw)*a;\n                    \n                    //also balls need to roll off each other\n                    newvel.x += (ball.x-nball.x)/size;\n                    \n                    newvel = normalize(newvel)*length(ball.zw)*.7+.3*nball.zw;\n   \n                    \n                    if(i > z)\t//if current ball's index is greater than the collision, that means we move this one out of the way\n                    {\n                        ball.xy = nball.xy+1.9*size*normalize(ball.xy-nball.xy);\n                    }\n                    if(length(newvel) < .2) newvel = vec2(0);\n                    ball.zw = newvel;\n                }\n            }\n            \n            //if ball is stopped, reset it\n            if((iFrame/10+i)%(60)<1 ){\n                ball.xy = vec2(40,iResolution.y-size-10.);//fract(sin(vec2(343,235)*iTime+22345.*float(i)))*iResolution.xy*.8+size+1.;\n                ball.zw = sin(vec2(822,354)*iTime+float(i)*16.)*2.+vec2(10,2);\n            }\n            \n            ball.x = clamp(ball.x, size, iResolution.x-size);\n            ball.y = clamp(ball.y, size, iResolution.y-size);\n            \n            fragColor = ball;\n        }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float size = 13.;\nconst int num = 20;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float noise(float t){\n    return fract(353454.*sin(t*30.));\n}\n\nfloat ball(in vec4 c, in vec2 f){\n    return smoothstep(size,size-2.,distance(c.xy-c.zw*noise(2.*iTime+f.x+f.y)*.4, f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 a = vec4(0);\n    \n    for(int i = 0; i < num; i++)\n    {\n        vec4 c = texelFetch(iChannel0,ivec2(i,0),0);\n        vec4 col = .5+.5*sin(vec4(2.1,24.,23,1)+2.*float(i)+iTime);\n        a += ball(c, fragCoord)*col;\n    }\n    \n    fragColor = a + .4*texture(iChannel1,fragCoord/iResolution.xy);\n}","name":"Buf B","description":"","type":"buffer"}]}