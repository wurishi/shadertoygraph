{"ver":"0.1","info":{"id":"ttSyz1","date":"1593701680","viewed":205,"name":"Golden ratio sunflower algorithm","username":"madware","description":"https://stackoverflow.com/questions/9600801/evenly-distributing-n-points-on-a-sphere/44164075#44164075\nthis is some kind of playground to play with a properties of sunflower algorithm from a link above","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["goldenratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_SAMPLES 1300.0\n#define USE_GOLDEN_RATIO\n#define EVEN_SPACED\n\nfloat circle(in vec2 uv, in vec2 p, in float rad)\n{\n    vec2 puv = uv - p;\n    float rsquare = rad*rad;\n    return smoothstep(rsquare + 0.000005, rsquare - 0.000005, dot(puv, puv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = radians(180.0);\n    float aspect = iResolution.y / iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= aspect;\n\n    vec3 col = vec3(.5, .5, .5);\n    \n    for(float i = 0.0; i < NUM_SAMPLES; i += 1.0) {\n        #ifdef EVEN_SPACED\n            float r = sqrt((i + 0.5) / NUM_SAMPLES) * 0.5;\n        #else\n            float r = ((i + 0.5) / NUM_SAMPLES) * 0.5;\n        #endif\n        #ifdef USE_GOLDEN_RATIO\n            float theta = pi * (1.0 + sqrt(5.0)) * i;\n        #else\n            float theta = pi / 0.931 * i; // some interesting random ratio\n        #endif\n        vec2 p2 = vec2(r * cos(theta), r * sin(theta)) * aspect + vec2(0.5, 0.5 * aspect);\n        float plot = circle(uv, p2, 0.0025);\n        col = mix(col, vec3(1.0, 1.0, 1.0), plot);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}