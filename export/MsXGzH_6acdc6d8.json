{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"music","id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"    const float T = 20.;\n\n    float freqs[4];\n\n    vec3 grid( in vec2 p )\n    {\n        float t0 = iTime;\n    \tfloat f = texture( iChannel0, vec2(0.2,0.25) ).x;\n\t\tfloat f2 = texture( iChannel0, vec2(0.7,0.25) ).x;\n\t\t\n\t\t// move over time\n\t\tt0 = iTime + 2.*f;\n\t\tif (t0 > T) t0 = T+10. + mod(t0, 10.);\n        float v = 0.0;\n\t\t\n\t\t// primary squares cos & sin FM applied over time\n        if (floor(mod(cos(t0*cos(sin(t0*3.)*t0*.01))*(.1+p.x)*10., 2.)) == 0.0) {\n          v = 1.0;\n        }\n        if (floor(mod(t0*2.+p.y*10., 2.)) == 0.0) {\n          v = 1.0;\n        }\n\t\t\n\t\t// small background triangles\n        float l = .02*sin(t0+.1*f2)/2.;\n        if ((mod(p.y, .025) + mod(p.x, .025)) < l) {\n          v = 0.0;\n        }\n        \n\t\t// the final color is either black or white\n        return vec3(v,v,v);\n    }\n\n\t// plane deformation, learned from the original shader toy :D\n    vec3 deform( in vec2 p )\n    {\n        float t0 = max(iTime - 2., 0.);\n\t\tfloat f = texture( iChannel0, vec2(0.9,0.25) ).x;\n\t\t\n\t\t// this is a hack to make the shader toy preview look better\n\t\tif (f > .02 && f < .03) \n\t\t\tf = .3;\n\t\t\n        if ((t0-20.) > T) t0 = T + mod(t0,T); \n        vec2 uv;\n\n\t\t// apply deformation with a little FM\n        vec2 q = vec2( sin(sin(t0*.1)*1.1*t0+p.x),\n                       sin(sin(t0*.1)*1.2*t0+p.y) );\n\t\t//q = vec2(f, f);\n\n        float r = dot(q,q);\n\n        uv.x = sin(0.0+1.0*t0)+p.x*sqrt(r+1.0);\n        uv.y = sin(0.6+1.1*t0)+p.y*sqrt(r+1.0);\n\n\t\t// tone down the deformation for the vignette\n\t\tfloat rm = r * .5;\n\t\t\n\t\t// create a bloomy vignette, mix in the deformation parameter\n\t\tfloat vin = 3.3/(4.0+dot(rm*p*p,rm*p*p));\n\n\t\t// apply a vignette to both grid input uv \n\t\t// and to the final resuls\n\t\treturn vin*grid(vin*uv*.5 * (3. * sin(f))); \n    }\n\n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {\n        float t0 = iTime+5.;\n        if (t0 > T) t0 = T + mod(t0, 10.);;\n\n\t\t// setup some coords\n        vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\t\tvec2 uv = fragCoord.xy / iResolution.xy;\n        vec2 s = p;\n\n\t\t// accumulator for blur\n        vec3 total = vec3(0.0);\n\t\t\n\t\t// two different blur factors\n        vec2 d1 = (vec2(0.0,0.0)-p)/240.0;\n        vec2 d2 = (p-vec2(0.0,0.0))/240.0;\n\n\t\t// lerp between the blur factors based on low-end frequency\n\t\tfloat f = texture( iChannel0, vec2(0.99,0.25) ).x;\n        vec2 d = mix(d1,d2, f*3.);\n\t\t\n\t\t// this was the old FM effect, with no music input\n\t\t//.5+.5*sin(sin(sin(t0)*t0)*t0));\n\n\t\t// apply the radial blur to the result of the plane deformation\n        float w = 1.5;\n        for( int i=0; i<40; i++ )\n        {\n            vec3 res = deform(s);\n            res = smoothstep(0.1,1.0,res*res);\n            total += w*res;\n            w *= .99;\n            s += d;\n        }\n\t\t\n        total /= 40.0;\n\t\t\n\t\t// used to apply a vignette here, but because it was static\n\t\t// it looked too obvious\n        float r = 1.0; //1.5/(1.0+dot(p,p));\n        vec4 c = vec4( total*r,1.0);\n\t\t\n\t\t// grab high, mid and low freqs and shift the output color\n\t\tfloat fr = texture( iChannel0, vec2(0.99,0.25) ).x;\t\t\n\t\tfloat fg = texture( iChannel0, vec2(0.5,0.25) ).x;\n\t\tfloat fb = texture( iChannel0, vec2(0.1,0.25) ).x;\n\t\tc.rgb += .5* vec3(fr,fg,fb);\n\t\t\n\t\t// bam!\n\t\tfragColor = c;\n    }\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsXGzH","date":"1362810801","viewed":1112,"name":"Thumper","username":"jcowles","description":"Frequency modulation with time feedback creating a base thump effect that changes over time. It also mixes in some of the music frequencies to make it beat to the music.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","music","fm","grayscale","radial","deformation"],"hasliked":0,"parentid":"","parentname":""}}