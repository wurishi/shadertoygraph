{"ver":"0.1","info":{"id":"csfBRH","date":"1688565838","viewed":89,"name":"Pixelated with scanlines","username":"kmooney","description":"fork of shadertoy version of pixelate shader from qt540 sample \"qmlvideofx\" integrated in my splitter effect framework\n\nincludes quantized color palette and scanlines\nMouse x => control divider\nMouse Y => control granularity","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["video","pixelate","quantizedpalette"],"hasliked":0,"parentid":"4lXGzS","parentname":"Video Pixelate"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Splitter framework\n// put tranform effect in effect function\n// put source to tranform in bg function\n// getUV is the func for the define the coord system\n// global yVar is the var controled by y mouse axis from range 0. to 1.\n// s => iResolution.xy\n// g => fragCoord.xy\n// m => iMouse.xy\n/////VARS//////////////\nfloat yVar;\nvec2 s,g,m;\n///////////////////////\n\n//your funcs here if you want\n\n///////////////////////\n// source to transform\nvec3 bg(vec2 uv)\n{\n    return texture(iChannel0, uv).rgg;\n}\n\nvec3 colorFilter(vec3 col) {\n    float q = 8.;\n    vec3 r = col;\n    r.x = floor(r.x * q) / q;\n    r.y = floor(r.y * q) / q;\n    r.z = floor(r.z * q) / q;\n    \n    return r;\n}\n\nvec3 scanLine(vec2 coord, vec3 col) {\n   vec3 r = col;\n   \n   float mod = 1.0 + abs((sin(iTime) * 0.01));\n   vec2 pc = (coord / s) * (480.0 * mod);\n   \n   if (int(pc.y) % 2 == 0) {\n       r.x = 0.;\n       r.y = 0.;\n       r.z = 0.;\n   }\n\n   return r;\n}\n\n///////////////////////\n// transform effect\nvec3 effect(vec2 uv, vec3 col)\n{\n\n    float granularity = yVar*10.0+s.x/100.;\n    if (granularity > 0.0)\n    {\n        float dx = granularity / s.x;\n        float dy = granularity / s.y;\n        uv = vec2(dx*(floor(uv.x/dx) + 0.5),\n                  dy*(floor(uv.y/dy) + 0.5));\n        return bg(uv);\n    }\n\n    return (col);\n}\n\n///////////////////////\n// screen coord system\nvec2 getUV()\n{\n    return g / s;\n}\n\n///////////////////////\n/////do not modify////\n///////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   \ts = iResolution.xy;\n    g = fragCoord.xy;\n    m = iMouse.x==0.?m = s/2.:iMouse.xy;\n    yVar = m.y/s.y;\n    \n   \tvec2 uv = getUV(); \n    vec3 tex = bg(uv);\n    vec3 col = g.x<m.x?effect(uv,tex):tex;\n\tfragColor = vec4(scanLine(fragCoord, colorFilter(col)),1.);\n}","name":"Image","description":"","type":"image"}]}