{"ver":"0.1","info":{"id":"dtS3zy","date":"1673472007","viewed":145,"name":"another clock 5","username":"jonasfrey","description":"the classic one","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["classic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec2 f_o_rotd(vec2 o, float n_angle_nor){\n    float n_tau = 6.283185;\n    float n_ang_rad = n_angle_nor * n_tau;\n    return vec2(\n        cos(n_ang_rad)*o.x - sin(n_ang_rad)*o.y, \n        sin(n_ang_rad)*o.x + cos(n_ang_rad)*o.y\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float n_ratio_1to_iresx = 1./ iResolution.x;\n    //needed for anti aliasing ?\n    vec2 o_trn_fc_nor = fragCoord.xy / iResolution.xy;\n    vec2 o_trn_mo_nor = iMouse.xy / iResolution.xy;\n    \n    float n_ratio_x_to_y = iResolution.x / iResolution.y; \n    \n    vec2 o_trn_fc_nor_offset = (o_trn_fc_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    vec2 o_trn_mo_nor_offset = (o_trn_mo_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    // by default the rotation starts between quadrant II and quadrant III\n    // so this rotation compensates one quadrant\n    o_trn_fc_nor_offset = f_o_rotd(o_trn_fc_nor_offset, (1./4.)*3.);\n    \n    o_trn_fc_nor_offset *= 1.2;\n    vec2 o_fc_nor = fragCoord.xy / iResolution.xy;\n    float n_tau = 6.283185;\n    float n_freq_sec = fract(iTime)*n_tau;\n    //float n_t_sec = (iTime);\n    //n_t_sec = floor(iTime);// for snapping handle\n    float n_ang_nor = fract(atan(o_trn_fc_nor_offset.y, o_trn_fc_nor_offset.x)/n_tau);\n    vec4 o_col = vec4(0.);\n    float n_t_yea = (iDate.x);//year-1\n    float n_t_mon = (iDate.y);//month-1\n    float n_t_day = (iDate.z);//day-1\n    float n_t_sec_since_midnight = (iDate.w);//secs since midnight\n    \n    float n_w, n_dcenter, n_radius, n_pointerstart, n_pointerend, n, n_radians_nor,n_divisor, n_glow; \n    vec2 o;\n    n_dcenter = length(vec2(0.)-o_trn_fc_nor_offset);\n    \n    float n_aa = n_ratio_1to_iresx*20.;\n    \n    //sec\n    n_pointerstart = 0.;\n    n_pointerend = 0.5;\n    n_radius = max(n_dcenter, n_pointerstart);\n    n_radius = min(n_radius, n_pointerend);\n    n_radians_nor = -n_t_sec_since_midnight/60.;\n    n_radians_nor = -floor(n_t_sec_since_midnight)/60.;//make it tick tock!\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nsec = length(o-o_trn_fc_nor_offset);\n    n_w = 0.01;\n    nsec = smoothstep(n_w+n_aa, n_w, nsec);\n\n    //min\n    n_pointerstart = 0.0;\n    n_pointerend = 0.3;\n    n_radius = max(n_dcenter, n_pointerstart);\n    n_radius = min(n_radius, n_pointerend);\n    n_radians_nor = -n_t_sec_since_midnight/n_divisor;\n    n_radians_nor = -floor(n_t_sec_since_midnight/60.)/60.;//make it tick tock!\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nmin = length(o-o_trn_fc_nor_offset);\n    n_w = 0.01;\n    nmin = smoothstep(n_w+n_aa, n_w, nmin);\n\n\n    //hou\n    n_pointerstart = 0.0;\n    n_pointerend = 0.2;\n    n_radius = max(n_dcenter, n_pointerstart);\n    n_radius = min(n_radius, n_pointerend);\n    n_radians_nor = -(n_t_sec_since_midnight/60./60./12.);\n    n_radians_nor = -floor(n_t_sec_since_midnight/60./60.)/12.;//make it tick tock!\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nhou = length(o-o_trn_fc_nor_offset);\n    n_w = 0.01;\n    nhou = smoothstep(n_w+n_aa, n_w,nhou);\n    \n    //minutes indicators\n    n_pointerstart = 0.45;\n    n_pointerend = 0.5;\n    n_radius = max(n_dcenter, n_pointerstart);\n    n_radius = min(n_radius, n_pointerend);\n    n_radians_nor = floor(n_ang_nor*60.+0.5)/60.;\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nminind = length(o-o_trn_fc_nor_offset);\n    n_w = 0.001;\n    n_aa = n_ratio_1to_iresx*20.;\n    nminind = smoothstep(n_w+n_aa,n_w, nminind);\n    \n    //hours indicators\n    n_pointerstart = 0.35;\n    n_pointerend = 0.5;\n    n_radius = max(n_dcenter, n_pointerstart);\n    n_radius = min(n_radius, n_pointerend);\n    n_radians_nor = floor(n_ang_nor*12.+0.5)/12.;\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nhouind = length(o-o_trn_fc_nor_offset);\n    n_w = 0.001;\n    n_aa = n_ratio_1to_iresx*20.;\n    nhouind = smoothstep(n_w+n_aa,n_w, nhouind);\n    \n    //border\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nborder = length(vec2(0.)-o_trn_fc_nor_offset);\n    nborder=sin(nborder*n_tau+1.5)*0.5+0.5;\n    nborder= pow(nborder, 1./3.);\n    n_w = 0.1;\n    n_aa = n_ratio_1to_iresx*123.;\n    nborder = smoothstep(n_w+n_aa,n_w, nborder);\n    //n = min(pow(nsec,1.),nmin);\n    //n = min(n, nhou);\n    //n = 1.-sqrt(n);\n    //n_glow = 1.;\n    //n = pow(n, 1./n_glow);\n    n = nsec;\n    n += nmin;\n    n += nhou;\n    n += nminind;\n    n += nhouind;\n    n += nborder;\n    fragColor = vec4(n);\n}","name":"Image","description":"","type":"image"}]}