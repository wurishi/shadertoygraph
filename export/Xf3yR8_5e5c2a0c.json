{"ver":"0.1","info":{"id":"Xf3yR8","date":"1730199497","viewed":64,"name":"Frozen","username":"Elsio","description":"continuando no caminho de socar tangente hiperb√≥lica em tudo!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","light","snow","path","tunel","tanh","neve"],"hasliked":0,"parentid":"MfSyDR","parentname":"Corre! 3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a + vec4(0, 33, 11, 0)))\n#define path(z) .5 * vec2(2.1 * sin(z * .3), 3.2 * cos(z * .2))\n#define t iTime\n#define r iResolution\n\n\n#define crapGpu 1. // 1., 2., 3.\n\n// inspiratione: \n//     https://www.shadertoy.com/view/dsKczW\n\nfloat map(vec3 p, vec3 k, float a){\n        float d, dd = length(p - k) - .1;\n        p.xy -= path(p.z);\n\n        a = 1.; // bola\n        while((a += a) < 17. / crapGpu) \n            dd += abs(\n                      dot(\n                          cos(p     * a * 3.), \n                          sin(p.zxy * a * 2. - t * 3.)\n                    )) / a * .07 - .1;\n                    \n                  \n        a = 1.; // tunel\n        d = length(path(p.z) * .2) - length(p.xy);\n        while((a += a) < 33. / crapGpu) \n            d -= abs(\n                    dot(\n                        sin(p * a * 1.), \n                        vec3(8)\n                    )) / a * .08 - .4;\n\n        return min(d, dd);\n}\n\nvoid mainImage(out vec4 o, vec2 u) {    \n    o -= o;\n    u = (u - r.xy / 2.) / r.y;\n    \n    if(crapGpu > 1.)\n        if(abs(u.x + u.y) > .4 || abs(u.x - u.y) > .4)\n            if(abs(u.x) > .1 && abs(u.y) > .1) \n                discard;\n    \n    vec3 D = vec3(u, 1);     \n    \n    float a, i, s, dd, d = 1., T;\n\n    // camera\n    vec3 lookAt   = vec3(0., 0., -iTime * 3.),\n         ro       = lookAt + vec3(0., 0., -.1),\n         lightPos = \n          tanh(\n             cos( // controla o movimento da bola\n                 vec3(2, 3, 2) * t / 3.\n             ) * vec3(5, 3, 4)\n          ) * vec3(1.2, .8, 4)\n             + vec3(0, 0, 8) + ro;\n\n    lookAt.xy   += path(lookAt.z);\n    ro.xy       += path(ro.z);\n    lightPos.xy += path(lightPos.z);\n\n    vec3 fw = normalize(lookAt - ro),\n         rt = vec3(fw.z, 0., -fw.x),\n         up = cross(fw, rt),\n         rd = fw + (u.x * rt + u.y * up) / 1.4;\n\n    // raymarch\n    while(i++ < 430. && d > .01)\n        d = map(ro, lightPos, a),\n        ro += rd * d * .08;\n    \n    o += (5.+ cos(t*.6)*4.) / i \n         + vec4(6, 7, 8, 0) / length(ro - lightPos) * .06 \n         - 5. * d; \n}","name":"Image","description":"","type":"image"}]}