{"ver":"0.1","info":{"id":"ftdyzX","date":"1660237664","viewed":172,"name":"Bilinear filtering for noobs","username":"paperjack","description":"Or is it trilinear? Protip: don't use mipmaps to avoid ugly lines","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bilinear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    float scale = 32.0;\n    uv -= vec2(0.5 * scale);  \n    vec2 bottomleft = vec2(floor(uv.x*scale), floor(uv.y*scale));\n    vec2 bottomright = vec2(bottomleft.x+1.0, bottomleft.y)/scale;\n    vec2 topleft = vec2(bottomleft.x, bottomleft.y+1.0)/scale;\n    vec2 topright = vec2(bottomleft.x+1.0, bottomleft.y+1.0)/scale; \n    bottomleft /= scale;\n       \n    vec2 distxy = vec2((uv.x - bottomleft.x), (uv.y - bottomleft.y))*scale;\n    vec4 distances = vec4(\n        (1.0-distxy.x) * (    distxy.y), (    distxy.x) * (    distxy.y),\n        (1.0-distxy.x) * (1.0-distxy.y), (    distxy.x) * (1.0-distxy.y));\n        \n    //distances = pow(distances, vec4(2.0));\n\n    vec3 col = vec3(.0,.0,.0);\n    col += texture(iChannel0, topleft, -9999.0).xyz * distances.x;\n    col += texture(iChannel0, topright, -9999.0).xyz * distances.y;\n    col += texture(iChannel0, bottomleft, -9999.0).xyz * distances.z;\n    col += texture(iChannel0, bottomright, -9999.0).xyz * distances.w;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}