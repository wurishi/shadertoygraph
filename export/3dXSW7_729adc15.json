{"ver":"0.1","info":{"id":"3dXSW7","date":"1551359416","viewed":292,"name":"synth_experiment","username":"nabr","description":"Something i looking after for a while now. It necessary for a good mix to arrange different instruments, assign each one of them to a specific place in a mixing/virtual room, this implies to give them depth. And who though it would be that easy. \n","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["sound","distortion","fm","random","generative","osc","wet","riff","loopless","modular","arpeggio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nabr\n// https://www.shadertoy.com/view/3dXSW7\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\n// soundin shader by FabriceNeyret2\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n} // EOL soundin shader\n\n\n#define R(p, a) p = cos(a) * p + sin(a) * vec2(p.y, -p.x)\nfloat map(vec3 p) \n{\n    R(p.xy, iTime * .25);\n    R(p.yz, iTime * .25);\n    p = 1.001 * abs(fract(p * sin(.1)) - .5);\n    p = smoothstep(0.21, 1., 6.28 * p * p); //p *= p * 6.28318;\n    return length( p -  k( mod(iTime, .5), 0.51 ) ) - 1.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n        // call soundin shader \n\tif (iResolution.y<2000.) {float c=message((fragCoord/iResolution.y-vec2(.051,.12))*8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    // ----------------------- INIT\n    vec3 ip = vec3(0), ld = vec3(1);\n    \n    vec2 st = 2.0 * gl_FragCoord.xy / iResolution.xy - 1.0;\n    st.x *= 2. / 1.;\n\t\n    vec3 rd = normalize(vec3(st, -1.));\n\tfloat stereo = (.005 / abs( sin(rd.z * 12. + k( mod(iTime, .5), 1. ) ) - cos(rd.x * 2. )));\n    \n    if (abs(st.y) > .65 || abs(st.x) > 1.98) \n    {\n        fragColor.rgb = vec3(.9);\n        return;\n    };\n\n    // ----------------------- RAYMARCH\n    float t = 0.1, d = 0.0;\n    for (float i = 0.; i < 64.0; i++) {\n        if (d >= 0.001 && t > 50.0) break;\n        d = .5001 + map(t * rd);\n        t += d; //max(d, 0.03);    \n    };\n    ip = vec3(.501) * t + 25.;\n    vec3 n = normalize(cross(\n        vec3(map(vec3(ip.x + 2., ip.y, ip.z)),\n             map(vec3(ip.x, ip.y-2., ip.z)),\n             map(vec3(ip.x, ip.y, ip.z+2.))\n            ), vec3(5, 23, 20)) );\n\n    vec3 l = max(dot(normalize(ld), n), 0.0) * vec3( .29, .2, .8) ;\n    R(rd.xz, iTime * .5);\n    vec3 cattex = texture(iChannel0, vec2( 0.5 - (atan(rd.z, rd.x ) / 6.28318), - acos(rd.y  / sqrt(dot(rd, rd)) ) / 3.14159) * 6. ).rgb; \n\n    // ----------------------- SHADE\n    fragColor.rgb = stereo + 2.5 * l \n        \t\t\t+ pow(max(dot(normalize( l + rd), n), 0.0), 12.0) * 1.5 * cattex;\n   //  fragColor.rgb = l + pow(max(dot(normalize(l + rd), n), 0.0), 2.0);\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp,float time )\n{\n\treturn f(time);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// nabr\n// https://www.shadertoy.com/view/3dXSW7\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n/*\n __          ________ _______                    \n \\ \\        / /  ____|__   __|                   \n  \\ \\  /\\  / /| |__     | |                      \n   \\ \\/  \\/ / |  __|    | |  _____       _______ \n    \\  /\\  /  | |____   | | / ____|   /\\|__   __|\n  _ _\\/ _\\/ _ |______|_ |_|| |       /  \\  | |   \n | '_ \\| | | / __/ __| | | | |      / /\\ \\ | |   \n | |_) | |_| \\__ \\__ \\ |_| | |____ / ____ \\| |   \n | .__/ \\__,_|___/___/\\__, |\\_____/_/    \\_\\_|   \n | |                   __/ |                     \n |_|                  |___/                      \n\n*/ // the title of this little riff\n\n\n\n// volume\n#define VOLUME .5\n\n\n#define g 1390. \n#define o 14.\n#define Brot(p, a) p = (sin(o * a) + cos(g * a)) * p + sin(g * a) * vec2(p.y, -p.x)\n\n#define rand(x, lgth)  ((1315313 % int(x))+1) % lgth\n\n#define tau (8. * atan(1.))\n\n\n// echo/delay early reflection effect\n// will create a resonance frequency\n// time difference creates the illusion of depth\nfloat k(float t, float p)\n{\n    float f = sin(tau * t * p );  // kick of whatever\n\tfloat resonance = -10.; \n    f *= exp( resonance  * t );// impulse\n    \n    float wet = 6.; // higher means more room\n    \n    float d = .25; // interpolate value, take it or leave it\n    \n    return f - (d + asin( f * t * wet ));\n    \n}\n\nvec2 f(float time )\n{\n    \n    float x = time; // + 60.; // // will support widening the synth, possible to hold and/or reset, decrement it \n    \n    /* \n\t// sidenote: this is actually the same idea as when back in the 60ties guitar player try to \n\t// get more distortion out of their amps, before marshall, they have to pull every knob to \n\t// the top early recordings you hear for example from black sabbath, deep purple using this\n\t// technique, they simple have no choise.\n    // in this synth: i push everything to the very max their is a lot of hum and noise\n    // and then i try to adjust the volume back again to a pleasant level\n\t*/\n    \n    vec2 p = vec2( x * tau + 60000., x + tau * 1.0025 );\n    \n    // tunned by ear, or something can't remember\n    Brot(p, time * (float[](.894, .564, .992, 1.14, .684, 1.34)[rand(time * 4., 6)]));\n    Brot(p, time  * (float[](1., .2, .992, 0.57, .684, 1.34)[rand(time * 4., 6)]));\n    \n    \n    vec2 kick = vec2(k(mod(x  , .5 ), float[](180., 100.)[int(time * 2. )%2] ));\n    \n    vec2 synth =  .25 * sign(p);//bad bits\n    \n    // return kick*.2; //debug standalone \n\n\treturn mix(kick*.85, synth, 0.3) * VOLUME;\n}","name":"Common","description":"","type":"common"}]}