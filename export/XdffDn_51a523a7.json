{"ver":"0.1","info":{"id":"XdffDn","date":"1495554394","viewed":335,"name":"Psy Matrix (Raymarching)","username":"otiose","description":"This one could make you feel a little dizzy.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p){\n    //vec3 q = fract(p) * 2.0 - 1.0;\n    float r = 1.0 * (sin(iTime) + 3.0);\n    vec3 q = mod(p,r)-0.5*r;\n    \n    vec3 c = vec3(0.0, 0.0, 0.05);\n    \n\treturn min(min(min(length(q) - (1.1 + sin(iTime + length(p * 0.4) * 2.0)) * 0.25, length(q.xz-c.xy)-c.z), length(q.xy-c.xy)-c.z), length(q.yz-c.xy)-c.z);\n}\n\nfloat trace(vec3 o, vec3 r){\n\tfloat t = 0.0;\n    for(int i = 0; i < 30; ++i){\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.8;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float fov = 2.0 * (sin(iTime)+2.0);\n    \n    uv = uv * fov - fov / 2.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv,  1.0));\n    \n    float the =  0.2 * iTime;\n    r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    r.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    vec3 o = vec3(0.0, iTime* 0.5, -3.0 - iTime);\n    \n    float t = trace(o, r);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    \n    if(fog < 0.3)fog *= 2.0 * (1.5 + sin(iTime * 0.2));\n    \n    vec3 fc = vec3(fog);\n    \n\tfragColor = vec4(fog * uv.x, fog, fog * uv.y, 1.0);\n}","name":"Image","description":"","type":"image"}]}