{"ver":"0.1","info":{"id":"dd2Xzm","date":"1670360499","viewed":553,"name":"PHONK - Audio Visualizer","username":"Poisson","description":"My first attempt at creating an audio visualizer. Phonk music by Kordhell.","likes":16,"published":1,"flags":64,"usePreview":1,"tags":["procedural","2d","noise","fbm","music","audio","bloom","visualizer","ca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XtjXzK","filepath":"https://soundcloud.com/kordhell/murder-in-my-mind","previewfilepath":"https://soundcloud.com/kordhell/murder-in-my-mind","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// press pause and play if there's no music\n\n// music frequency\nfloat freq;\n\n// hash vec2 to float\nfloat hash21(vec2 p) {\n    p = fract(p*vec2(452.127,932.618));\n    p += dot(p, p+123.23);\n    return fract(p.x*p.y);\n}\n\n// noise function by me\nfloat noise(vec2 p) {\n    vec2 q = floor(p);\n    vec2 f = fract(p);\n    return mix(mix(hash21(q+vec2(0,0)),hash21(q+vec2(1,0)),f.x),\n               mix(hash21(q+vec2(0,1)),hash21(q+vec2(1,1)),f.x),f.y);\n}\n\n// fractal noise\nfloat fbm(vec2 p) {\n    float f = 0.;\n    f +=     .5*noise(p);\n    f +=    .25*noise(p*2.);\n    f +=   .125*noise(p*4.);\n    f +=  .0625*noise(p*8.);\n    f += .03125*noise(p*16.);\n    return f;\n}\n\n// background noise\nfloat func(vec2 p) {\n    return fbm(vec2(sin(iTime*.8),cos(iTime*.8))+p*fbm(p+.2*iTime)+noise(p+noise(p+noise(p))));\n}\n\n// rendering function\nvec3 render(vec2 p) {\n    p *= .55+.2*freq; // bounce\n            \n    // background\n    vec3 colA = vec3(0,.18,0);\n    vec3 colB = vec3(1.15,.75,.83);\n    float k = pow(func(9.*p),1.2);\n    vec3 col = smoothstep(colA,colB,vec3(k));\n    \n    // ball\n    float x = atan(p.x,p.y); // polar x value\n    // frequencies\n    float f = texture(iChannel1, vec2(x*.018+.4,.25)).r;\n    // radius\n    float r = .2+4.*min(pow(f,8.),.1)*clamp(p.y+.06,0.,1.);\n    // hollow circle\n    float m = abs(length(p)-r)-.02;\n    \n    // draw the ball\n    float b = fwidth(m); // blur value\n    col = mix(col, vec3(1), smoothstep(b,-b,m));\n    \n    return clamp(col,0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates centered at the origin\n    vec2 p = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    // normalized pixel coordinates\n    vec2 q = fragCoord/iResolution.xy;\n    \n    // music frequency\n    freq = texture(iChannel1, vec2(.01,.25)).r;\n    \n    // render with chromatic aberration\n    vec2 off = (q-.5) * .03*pow(freq,4.); // CA offset\n    vec3 col = vec3(render(p+off).r,\n                    render(p).g,\n                    render(p-off).b);\n\n    col += .5*col*pow(freq,8.); // flash\n    // vignette\n    col *= .5+.5*pow(64.*q.x*q.y*(1.-q.x)*(1.-q.y),.1);\n    \n    col *= 1.-exp(-iTime*2.); // fade\n                \n    // output\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}