{"ver":"0.1","info":{"id":"43fcW8","date":"1726068663","viewed":15,"name":"Flower Puzzle 3 AaronT","username":"seeda","description":"my custom flower","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n#define PI 3.141519\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    a = degrees(a) - iTime * 80.0 - abs(sin(iTime)) * 60.0;\n    \n    float mm = mod(a, 72.0);\n    if (mm > 72.0 * 0.5) mm = 72.0 - mm;\n    //float add = smoothstep(-72.0 * 0.5, 72.0 * 0.5, mm * (sin(iTime)));\n    float add = mm * min(max(sin(iTime), -0.3), 0.3);\n    \n    radius += add * 10.0;\n    \n    return radius;\n}\n\nfloat noise1D( vec2 p ) {\n    return fract(sin(dot(p, vec2(127.1, 311.7))) *\n                 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    float ft = iTime * 4.0;\n    center += vec2(cos(ft), sin(ft)) * (sin(iTime) + 1.0) * 40.0;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 215.0, 210.0), 1.0);\n    float noise = noise1D(fragCoord + \n    abs(\n        sin(fragCoord + vec2(iTime))\n        ));\t\n    \n    layer1 += vec4(noise) * abs(sin(iTime)) * 0.25;\n    \n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n    vec3 white = rgb(0.0, 0.0, 0.0);\n    vec3 finalColor = mix(white, red, radius / 108.0);\n\tvec4 layer2 = circle(uv, center, radius, finalColor);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}