{"ver":"0.1","info":{"id":"wtjyRd","date":"1595254007","viewed":106,"name":"Function Plot shader","username":"Baruch","description":"A shader that draws any mathematical function (replace the content of function f).","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","graph","function","plot","draw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright (c) 2020, Daniel Bi≈üar\n// License CC BY 4.0\n#define PI 3.141\n\nfloat drawCurve(float y, float value)\n{\n    float lineWidth = 0.01;\n    return smoothstep(value - lineWidth, value, y) -\n           smoothstep(value, value+lineWidth, y);\n}\n\nfloat f(float x)\n{\n    // input x is from 0 to 1\n    \n    float maxValue = PI*2.0;\n    x = x*maxValue;\n    \n    x = sin(x); // makes it more round\n    x *= maxValue;\n    \n    return sin(x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;    \n    float y = f(uv.x);\n    \n    // set the graph up by 1 and limit its values from 0 to 1 (at least for trigonometry functions)\n    // adjust as necessary\n    float normalizedY = (y + 1.0) / 2.0;\n    \n    // draw multiple graphs\n    y = drawCurve(uv.y, normalizedY);    \n    y += drawCurve(uv.y, 0.5);\n    y += drawCurve(uv.y, 0.4);\n    \n    fragColor = vec4(y, y, y, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}