{"ver":"0.1","info":{"id":"XfjBDG","date":"1725456690","viewed":30,"name":"Distort and magnify","username":"Makzter","description":"Simple shader that simulates a lens distortion and magnification.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distortion","magnify"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float saturate(float value)\n{\n    return clamp(value, 0.0f, 1.0f);\n}\n\nvec2 BarrelDistortion(in vec2 Uv, in float distortionStrength)\n{    \n    vec2 remappedUv = (Uv * 2.0f) - 1.0f;\n    float r2 = remappedUv.x * remappedUv.x + remappedUv.y * remappedUv.y;\n    vec2 outUv = remappedUv / (1.0f + distortionStrength * r2);\n    return (outUv + 1.0f) / 2.0f;\n}\n\nvec2 Zoom(in vec2 Uv, in float distortionZoom)\n{\n\tvec2 translatedCoord = (Uv - 0.5f) * 2.0f;\n\ttranslatedCoord *= (1.0f - saturate(distortionZoom));\n\treturn (translatedCoord + 1.0f) / 2.0f;\n}\n\n#define DISTORTION_STRENGTH_SCALE -0.5f\n#define DISTORTION_ZOOM_SCALE 1.0f\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float distortionStrength = (iMouse.x / iResolution.x) * DISTORTION_STRENGTH_SCALE;\n    float distortionZoom = (1.0-(iMouse.y / iResolution.y)) * DISTORTION_ZOOM_SCALE;\n\n    if (iMouse.xy == vec2(0))\n    {\n        distortionStrength = sin(iTime);\n        distortionZoom = cos(iTime);\n    }\n\n    vec2 distortedUv = Zoom(BarrelDistortion(uv, distortionStrength), distortionZoom);\n\n    // Output to screen\n    if (distortedUv.x <= 1.0f && distortedUv.y <= 1.0f &&\n          distortedUv.x >= 0.0f && distortedUv.y >= 0.0f)\n    {\n        fragColor = texture(iChannel0, distortedUv);\n    }\n    else\n        fragColor = vec4(0);\n}","name":"Image","description":"","type":"image"}]}