{"ver":"0.1","info":{"id":"Dl3XDn","date":"1685229254","viewed":88,"name":"recursive rejection","username":"satorielectronics","description":"testing out new shapes! Feedback highly appreciated ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["trippy","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdRoundedX( in vec2 p, in float w, in float r )\n{\n    p = abs(p);\n    return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.821, 0.328, 0.242);\n    vec3 b = vec3(0.659, 0.481, 0.896);\n    vec3 c = vec3(0.612, 0.340, 0.296);\n    vec3 d = vec3(2.820, 3.026, -0.273);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0 - iResolution.xy)/iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    for (float i = 0.0; i<=2.; i++) {\n        uv = fract(uv * 1.4) - 0.5;\n        float d = sdRoundedX(uv, 3., i*5.);\n        d = tan(d*12. + iTime)/12.;\n        d = abs(d);\n        d = pow(0.015 / d, 1.2);\n\n        // Time varying pixel color\n        vec3 col = palette(length(uv0) + iTime*0.1);\n        finalColor = col * d;\n    }\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}