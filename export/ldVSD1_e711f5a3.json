{"ver":"0.1","info":{"id":"ldVSD1","date":"1464208750","viewed":322,"name":"Monitor Gamma","username":"JasonD","description":"INSTRUCTIONS:\nStep back until you cannot see the horizontal lines.\nThe box that matches the background is the gamma correction your monitor currently has.\n\nMOUSE:\nclick and move mouse up/down to change custom gamma.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["test","gamma","correction","monitor","check"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Jason Allen Doucette\n// http://xona.com/jason/\n//\n// Monitor Gamma\n// May 25, 2016\n\n// ---- TEXT -------------------------------------------\n\n// ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ----\n// ---- GLSL NUMBER PRINTING --------------------------------\n// ---- @P_Malin --------------------------------\n\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\n\nconst vec2 gvFontSize = vec2(8.0, 15.0); // Multiples of 4x5 work best\nconst float gvFontSpacing = 0.0;\n\nfloat DigitBin(const in int x)\n{\n    if (x < 10)\n        return // originals:\n           x==0 ? 480599.0\n          :x==1 ? 139810.0\n          :x==2 ? 476951.0\n          :x==3 ? 476999.0\n          :x==4 ? 350020.0\n          :x==5 ? 464711.0\n          :x==6 ? 464727.0\n          :x==7 ? 476228.0\n          :x==8 ? 481111.0\n          :       481095.0;\n#ifndef DEBUG_DISABLE_TEXT\n    else\n    if (x < 78)\n        return // Glyphs added by Michael Pohoreski\n           x==42 ?  21072.0 // *\n          :x==45 ?   3840.0 // -\n          :x==46 ?      2.0 // .\n          :x==61 ?  61680.0 // =\n          :x==65 ? 434073.0 // A\n          :x==66 ? 497559.0 // B\n          :x==67 ? 921886.0 // C\n          :x==68 ? 498071.0 // D\n          :x==69 ? 988959.0 // E\n          :x==70 ? 988945.0 // F\n          :x==71 ? 925086.0 // G\n          :x==72 ? 630681.0 // H\n          :x==73 ? 467495.0 // I\n          :x==74 ? 559239.0 // J\n          :x==75 ? 611161.0 // K\n          :x==76 ?  69919.0 // L\n          :        653721.0 // M\n          ;\n    else\n    if (x < 91)\n        return // Glyphs added by Michael Pohoreski\n           x==78 ? 638361.0 // N\n          :x==79 ? 432534.0 // O\n          :x==80 ? 497425.0 // P\n          :x==81 ? 432606.0 // Q\n          :x==82 ? 497561.0 // R\n          :x==83 ? 923271.0 // S\n          :x==84 ? 467490.0 // T\n          :x==85 ? 629142.0 // U\n          :x==86 ? 349474.0 // V\n          :x==87 ? 629241.0 // W\n          :x==88 ? 628377.0 // X\n          :x==89 ? 348706.0 // Y\n          :        475671.0;// Z\n#endif\n    return 0.0;\n}\n\n// ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ----\n\n// ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ---- 8< ----\n// ---- TEXT RENDERING --------------------------------\n// ---- @MichaelPohoreski --------------------------------\n\nvec2 gvPrintCharXY = vec2( 0.0, 0.0 );\n\nvec3 Char(  vec3 backgroundColor, vec3 textColor, vec2 fragCoord, float fValue )\n{\n    vec2 vStringCharCoords = (fragCoord.xy - gvPrintCharXY) / gvFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return backgroundColor;\n    if ( vStringCharCoords.x < 0.0)                                  return backgroundColor;\n\n    float fCharBin = (vStringCharCoords.x < 1.0) ? DigitBin(int(fValue)) : 0.0;\n\n    // Auto-Advance cursor one glyph plus some extra padding\n    float fAdvance = gvFontSpacing; \n    gvPrintCharXY.x += gvFontSize.x + fAdvance;\n        \n    float a = floor(\n        mod(\n            (fCharBin / pow(\n                2.0, \n                floor(fract(vStringCharCoords.x) * 4.0) + \n                (floor(vStringCharCoords.y * 5.0) * 4.0))), \n            2.0)\n    );\n    return mix( backgroundColor, textColor, a );\n}\n\n\n// ---- METHODS -----------------------------------------\n\nvec3 rectangle(vec2 uv, vec2 fragCoord, vec3 colorIn, vec2 pcen, vec2 psize, float colorBox, \n               float gamma) {\n    vec3 color = colorIn;\n    if ((uv.x >= pcen.x - psize.x * 0.5) &&\n        (uv.x <= pcen.x + psize.x * 0.5) &&\n        (uv.y >= pcen.y - psize.y * 0.5) &&\n        (uv.y <= pcen.y + psize.y * 0.5))\n    {\n        float gammaCorrect = pow(colorBox, 1. / gamma);        \n        color = vec3(gammaCorrect);\n    }\n\n    // ---- text\n    vec3 textColor = vec3(0,0,0);\n    gvPrintCharXY = pcen * iResolution.xy; // yup, converting BACK to pxels.\n    const float charWidth = gvFontSize.x + gvFontSpacing;\n    const float numChars = 4.0;\n    gvPrintCharXY.x -= (numChars / 2.) * charWidth;\n    \n    // easier with integers\n    int digits = int(gamma * 100.0 + 0.5);    \n    int digit100ths = digits - ((digits/10)*10); // integer mod 10\n    digits /= 10;\n    int digit10ths  = digits - ((digits/10)*10); // integer mod 10\n    digits /= 10;\n    int digit1s     = digits - ((digits/10)*10); // integer mod 10\n    \n    // draw the numbers\n    color = Char( color, textColor, fragCoord, float(digit1s)     ); // 1's place\n    color = Char( color, textColor, fragCoord, 46.0               ); // .\n    color = Char( color, textColor, fragCoord, float(digit10ths)  ); // 0.1's place\n    if (digit100ths != 0)\n    color = Char( color, textColor, fragCoord, float(digit100ths) ); // 0.01's place\n\n    return color;\n}\n\n// ---- MAIN -----------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // ---- make horizontal stripes\n    \n    // horizontal is important! Don't checkerboard pattern mix, or do vertical lines!\n    // Since some monitors (CRTs) take time to switch the color output during the scan,\n    // which skews the result.\n    vec3 color;\n    if (mod(fragCoord.y, 2.0) < 1.0) {\n        color = vec3(1.);        \n    } else {\n        color = vec3(0.);\n    }\n    \n    // ---- show different gammas\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float userGamma = floor(\n        (1.0 + (iMouse.y / iResolution.y) * 2.0) * 100.0\n        ) / 100.0;\n   \n    const vec2 size = vec2(0.07, 0.8);\n    color = rectangle(uv, fragCoord, color, vec2(0.050, 0.5), size, 0.5, 1.0 ); // none\n    color = rectangle(uv, fragCoord, color, vec2(0.175, 0.5), size, 0.5, 1.5 );\n    color = rectangle(uv, fragCoord, color, vec2(0.300, 0.5), size, 0.5, 1.8 ); // Mac OS X 10.6 (!!)\n    color = rectangle(uv, fragCoord, color, vec2(0.430, 0.5), size, 0.5, 2.0 );\n    color = rectangle(uv, fragCoord, color, vec2(0.570, 0.5), size, 0.5, userGamma );\n    color = rectangle(uv, fragCoord, color, vec2(0.700, 0.5), size, 0.5, 2.2 ); // standard\n    color = rectangle(uv, fragCoord, color, vec2(0.825, 0.5), size, 0.5, 2.35);\n    color = rectangle(uv, fragCoord, color, vec2(0.950, 0.5), size, 0.5, 2.55);\n        \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}