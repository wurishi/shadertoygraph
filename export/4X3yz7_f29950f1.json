{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define MAX_STEPS 120\n#define MAX_DIST 250.0\n#define SURF_DIST 0.001\n\nfloat gTime = 0.0;\nfloat fov = 82.0;\n\n// Gentle warm->cool palette\nvec3 palette(float t) {\n    return mix(vec3(1.0, 0.7, 0.4), vec3(0.2, 0.6, 1.0), t);\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\n// Tetrahedron SDF\nfloat sdTetrahedron(vec3 p) {\n    const float K = sqrt(2.0/3.0);\n    p = abs(p);\n    float m = p.x+p.y+p.z - 1.0;\n    vec3 q = p - 0.5;\n    float m2 = max(q.x, max(q.y, q.z));\n    return max(m, m2)*K; \n}\n\n// 2 tetrahedrons combined\nfloat tetra_set(vec3 pos, float scale) {\n    vec3 origin = pos;\n    pos.xy *= rot(gTime*0.2);\n    pos *= scale;\n\n    float d1 = sdTetrahedron(pos - vec3(0.0, 1.0, 0.0));\n    pos = origin;\n    pos.xz *= rot(-gTime*0.3);\n    pos *= 0.8*scale;\n    float d2 = sdTetrahedron(pos + vec3(0.5, -1.5, 0.5));\n    \n    return min(d1, d2);\n}\n\n// Audio\nfloat getAudioScale(float freq) {\n    return texture(iChannel0, vec2(freq, 0.5)).r * 3.0;\n}\n\nfloat mapScene(vec3 pos) {\n    float audioVal = getAudioScale(0.75);\n    return tetra_set(pos, 1.0 + audioVal*0.5);\n}\n\nvec4 rayMarch(vec3 ro, vec3 rd) {\n    float t = 2.0;\n    vec3 col = vec3(0.);\n    float d;\n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*t;\n        d = mapScene(p);\n        if(d<SURF_DIST || t>MAX_DIST) break;\n        t += d;\n        float c = length(p)*0.03;\n        col += palette(c)*0.02;\n    }\n    if(d<SURF_DIST) {\n        col *= 9.0;\n    }\n    return vec4(col, 1.-t*0.1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    gTime = iTime;\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    float aspect = iResolution.x / iResolution.y;\n    uv *= tan(radians(fov)*0.1)*aspect;\n\n    vec3 ro = vec3(0., 0., -25.);\n    vec3 rd = normalize(vec3(uv, 2.0));\n\n    // Rotate ray direction for swirl\n    rd.xy *= rot(sin(gTime*0.5)*0.8);\n\n    // Slight up/down camera bounce\n    ro.y += sin(gTime)*2.0;\n\n    vec4 col = rayMarch(ro, rd);\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4X3yz7","date":"1734853503","viewed":70,"name":"Twintrahedrons","username":"profmitchell","description":"get i?","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["neon","tetrahedtron"],"hasliked":0,"parentid":"","parentname":""}}