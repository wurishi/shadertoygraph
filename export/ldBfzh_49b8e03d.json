{"ver":"0.1","info":{"id":"ldBfzh","date":"1499381199","viewed":195,"name":"Strange Glyphs","username":"wutzhuhn","description":"What does it say? No idea :(","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","animated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 edges[] = vec2[](\n    vec2(-0.5, -0.6), vec2( 0.0, -1.0), // a, b\n    vec2( 0.0, -1.0), vec2( 0.5, -0.6), // b, c\n    vec2( 0.5, -0.6), vec2( 0.0, -0.2), // c, d\n    vec2( 0.0, -0.2), vec2(-0.5, -0.6), // d, a\n    \n    vec2(-0.5,  0.6), vec2( 0.0,  0.2), // e, f\n    vec2( 0.0,  0.2), vec2( 0.5,  0.6), // f, g\n    vec2( 0.5,  0.6), vec2( 0.0,  1.0), // g, h\n    vec2( 0.0,  1.0), vec2(-0.5,  0.6), // h, e\n    \n    vec2(-0.5, -0.6), vec2(-0.5,  0.6), // a, e\n    vec2( 0.0, -1.0), vec2( 0.0,  0.2), // b, f\n    vec2( 0.0, -0.1), vec2( 0.0,  1.0), // d, h\n    vec2( 0.5, -0.6), vec2( 0.5,  0.6));// c, g\n\nfloat box(vec2 p, vec2 s)\n{\n    vec2 a = abs(p) - s;\n    return min(max(a.x, a.y), 0.0) + length(max(a, 0.0));\n}\n\nfloat line(vec2 p1, vec2 p2, float f)\n{\n    vec2 d = (p1 - p2) * f;\n    return length(p1 - d * clamp(dot(p1, d) / dot(d, d), 0.0, 1.0));\n}\n\nfloat animate(float d, float o)\n{\n    return 1.0 / (1.0 + exp(-sin((iTime + o) / d + 1.0) * 8.0 * d));\n}\n\nfloat scene(vec2 p)\n{\n    float all = 100000.0;\n    for (int c = 0; c < 5; ++c)\n    {\n        vec2 o = vec2(float(c) - 2.0, 0.0);\n        for (int i = 0; i < 11; ++i)\n        {\n            float pwr = pow(2.0, float(i));\n            // feeding a sin into a sigmoid function to get a nice animation:\n            float t = animate(pwr, float(c) * 1234.5);\n            if (t > 0.001)\n            {\n                all = min(all, line(edges[i * 2] - p + o, edges[i * 2 + 1] - p + o, t));\n            }\n        }\n    }\n    all = max(all, -box(p + vec2(0.0, 0.1), vec2(100.0, 0.1)));\n    all = min(all, line(p - vec2(2.5, 0.0), p + vec2(2.5, 0.0), 1.0));\n    return all;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float thickness = 16.0 / iResolution.y;\n\n\tvec2 uv = (fragCoord.xy - vec2((iResolution.x - iResolution.y) / 2.0, 0.0)) / iResolution.yy * 2.0 - 1.0;\n    float d = scene(uv / 0.5);\n    float p = smoothstep(0.0, 1.0, (d - thickness) * iResolution.y / 4.0) * // main lines\n              smoothstep(0.0, 1.0, d * 1.25 + 0.75); // shadow around main lines\n\tfragColor = vec4(mix(vec3(0.25, 0.3, 0.35), vec3(0.75, 0.85, 0.9), p), 1.0);\n}","name":"Image","description":"","type":"image"}]}