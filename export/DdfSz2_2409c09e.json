{"ver":"0.1","info":{"id":"DdfSz2","date":"1669219938","viewed":91,"name":"munching squares simple","username":"baordog","description":"Put three munching squares algorithms together in one mess. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["munching"],"hasliked":0,"parentid":"csXSz2","parentname":"XOR Attempt"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 p)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = p/iResolution.xy;\n    float t = fract(iTime * 0.5);\n    ivec2 iuv = ivec2(int(uv.x),int(uv.y));\n    int it = int(iTime) % 255;\n    float r = float(int(p.y) == (int(p.x) ^ (iFrame % 512)));// / iResolution.x;  // / 255. + 0.3; \n    \n    //float g = float(int(p.x) ^ int(p.y)) / iResolution.x; \n    \n    float g = float((int(p.x) ^ int(p.y)) / (iFrame % 256));\n    float b = float((int(p.x)  & int(p.y)) / (iFrame % 256));  \n    \n    //r*=atan(iTime) / iResolution.x; \n    g*=cos(iTime)+0.3; \n    \n    vec3 col = vec3(r,g,b+sin(iTime));\n    \n    // Output to screen\n    o = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}