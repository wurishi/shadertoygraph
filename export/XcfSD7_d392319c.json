{"ver":"0.1","info":{"id":"XcfSD7","date":"1705321662","viewed":146,"name":"Visible spectrum mapped","username":"Nazlbit","description":"Mapping the visible spectrum using the CIE 2006 color matching function.\n1) Mapped chroma + normalized luma.\n2) Mapped chroma + tonemapped luma.\n3) Mapped chroma + clamped luma.\n4) Clamped chroma and luma.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["spectrum","color","rgb","function","gamma","mapping","xyz","wavelength","gamut","cie","matching","2006"],"hasliked":0,"parentid":"Dl3GWl","parentname":"Wavelength to Wide-gamut RGB"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://en.wikipedia.org/wiki/CIE_1931_color_space#Color_matching_functions\n// https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space\n// https://en.wikipedia.org/wiki/Standard_illuminant#Illuminant_E\n// https://bottosson.github.io/posts/gamutclipping/\n\n#define xyz2xyY(xyz) vec3((xyz).xy / ((xyz).x + (xyz).y + (xyz).z), (xyz).y)\n#define xyY2xyz(xy) vec3(xy.x * xy.z / xy.y, xy.z, (1.0 - xy.x - xy.y) * xy.z / xy.y)\n\n// https://cie.co.at/datatable/cie-2006-lms-cone-fundamentals-2-field-size-terms-energy\nvec3 cie2006lms2e[] = vec3[](\nvec3(0.0004150019,0.0003683495,0.009547289543613),\nvec3(0.001051914,0.0009586496,0.02382484),\nvec3(0.002408353,0.002269917,0.05665002),\nvec3(0.004833371,0.004700132,0.1224503),\nvec3(0.008721273,0.008793667,0.2330076),\nvec3(0.01338382,0.0145278,0.3813643),\nvec3(0.01844803,0.02166506,0.5436132),\nvec3(0.0229319,0.02957127,0.6744815),\nvec3(0.02818772,0.03945663,0.8025461),\nvec3(0.03410515,0.0518203,0.9035662),\nvec3(0.04025595,0.06477837,0.9910145),\nvec3(0.04493761,0.07588048,0.9915166),\nvec3(0.04986433,0.08705225,0.9553885),\nvec3(0.05534138,0.09819288,0.8602408),\nvec3(0.06471575,0.1162733,0.7867016),\nvec3(0.08069006,0.1445407,0.7382611),\nvec3(0.09947639,0.1758936,0.6463534),\nvec3(0.118801,0.2053998,0.5164164),\nvec3(0.1401458,0.2357545,0.3903373),\nvec3(0.1639532,0.2680649,0.290322),\nvec3(0.1915579,0.3036267,0.2118654),\nvec3(0.2329271,0.357059,0.160524),\nvec3(0.2889615,0.4277598,0.12284),\nvec3(0.3597162,0.5155847,0.08889554),\nvec3(0.4436801,0.6155169,0.0608205),\nvec3(0.536488,0.7191508,0.04281244),\nvec3(0.6285647,0.8166012,0.02920317),\nvec3(0.7047255,0.8855437,0.01939099),\nvec3(0.7706373,0.9356857,0.01260114),\nvec3(0.8257146,0.9688577,0.0080945),\nvec3(0.8810083,0.9952221,0.005088971),\nvec3(0.919073,0.9971948,0.003168911),\nvec3(0.9401995,0.9771922,0.001958935),\nvec3(0.9657395,0.9565771,0.001202763),\nvec3(0.9814541,0.9177407,0.000740167),\nvec3(0.994489,0.8732126,0.000455985),\nvec3(1,0.8135046,0.000281799),\nvec3(0.992316,0.7402868,0.000175037),\nvec3(0.9694379,0.653281,0.0001094536),\nvec3(0.9556085,0.5725982,0.00006899855),\nvec3(0.9276625,0.492595,0.00004390257),\nvec3(0.885972,0.4112444,0.00002822280),\nvec3(0.8339884,0.334426,0.00001834593),\nvec3(0.775104,0.2648744,0.00001206675),\nvec3(0.7057161,0.2052721,0.000008034895),\nvec3(0.6307685,0.1562428,0.000005418387),\nvec3(0.55423,0.1166407,0.0),\nvec3(0.4799434,0.08558743,0.0),\nvec3(0.4007098,0.06211264,0.0),\nvec3(0.3278612,0.0444877,0.0),\nvec3(0.2657847,0.03142824,0.0),\nvec3(0.2132849,0.02180369,0.0),\nvec3(0.1651391,0.01544792,0.0),\nvec3(0.1247498,0.01071199,0.0),\nvec3(0.09300794,0.007302475,0.0),\nvec3(0.06850937,0.004971759,0.0),\nvec3(0.04986664,0.003436687,0.0),\nvec3(0.03582284,0.002376184,0.0),\nvec3(0.02537932,0.001637344,0.0),\nvec3(0.01772025,0.00112127,0.0),\nvec3(0.01216998,0.000761044,0.0),\nvec3(0.008471687,0.000525461,0.0),\nvec3(0.005897527,0.000365317,0.0),\nvec3(0.004091288,0.00025342,0.0),\nvec3(0.002804465,0.000174401,0.0),\nvec3(0.00192057,0.000120609,0.0),\nvec3(0.001326875,0.00008417245,0.0),\nvec3(0.000917783,0.00005893455,0.0),\nvec3(0.000639367,0.00004160449,0.0),\nvec3(0.000446036,0.00002943542,0.0),\nvec3(0.0003108708,0.00002088575,0.0),\nvec3(0.0002193310,0.00001504562,0.0),\nvec3(0.0001545503,0.00001082007,0.0));\n\n// https://en.wikipedia.org/wiki/LMS_color_space#physiological_CMFs\nconst mat3 LMS2XYZ = mat3(\n1.94735469, -1.41445123, 0.36476327,\n0.68990272,  0.34832189, 0.0,\n0.0,         0.0,        1.93485343\n);\n\nvec3 wl2lms_cie2006(float wl)\n{\n    const int sample_num = cie2006lms2e.length();\n    const float wl_min = 390.;\n    const float wl_max = 750.;\n    float x = clamp((wl - wl_min) / (wl_max - wl_min), 0., 1.) * float(sample_num - 1);\n    int index1 = int(x);\n    int index2 = min(index1 + 1, sample_num - 1);\n    x -= float(index1);\n    return mix(cie2006lms2e[index1], cie2006lms2e[index2], x);\n}\n\n// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\nconst mat3 XYZ_WGRGB = mat3( 1.4628067, -0.1840623, -0.2743606,\n                            -0.5217933,  1.4472381,  0.0677227,\n                             0.0349342, -0.0968930,  1.2884099);\nconst mat3 WGRGB_XYZ = inverse(XYZ_WGRGB);\n\n// http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html\nconst mat3 E_D50 = mat3( 0.9977545, -0.0041632, -0.0293713,\n                        -0.0097677,  1.0183168, -0.0085490,\n                        -0.0074169,  0.0134416,  0.8191853);\nconst mat3 D50_E = inverse(E_D50);\n\nconst vec3 white_d50 =   vec3(1, 1, 1)*WGRGB_XYZ;\nconst vec3 red_wgrgb =   vec3(1, 0, 0)*WGRGB_XYZ;\nconst vec3 green_wgrgb = vec3(0, 1, 0)*WGRGB_XYZ;\nconst vec3 blue_wgrgb =  vec3(0, 0, 1)*WGRGB_XYZ;\n\nvec3 project_to_gamut(const vec3 xyY, const vec3 white, const vec3 red, \n                          const vec3 green, const vec3 blue)\n{\n    vec3 primaries[] = vec3[](red, green, blue);\n    vec3 prev = blue;\n    vec2 d0 = normalize(xyY.xy - white.xy);\n    for(int i = 0; i < 3; ++i)\n    {\n        vec2 d1 = white.xy - prev.xy;\n        vec2 d2 = primaries[i].xy - prev.xy;\n        float t1 = (d1.x *  d0.y - d1.y * d0.x) / (d2.x * d0.y - d2.y * d0.x);\n        float t2 = (d2.x * t1 - d1.x) / d0.x;\n        if(t1 >= 0. && t1 <= 1. && t2 >= 0.)\n        {\n            vec2 mix_xy = white.xy + d0 * t2;\n            float mix_Y = prev.z * primaries[i].z * mix_xy.y * (prev.y - primaries[i].y) / (prev.z * primaries[i].y * (prev.y - mix_xy.y) - primaries[i].z * prev.y * (primaries[i].y - mix_xy.y));\n            return vec3(mix_xy, mix_Y);\n        }\n        prev = primaries[i];\n    }\n    return vec3(0.0);\n}\n\nvec3 linear2gamma(const vec3 x)\n{\n    return pow(x, vec3(1.0/2.2));\n}\n\nfloat tonemap_reinhard(const float x, const float a, const float b)\n{\n    return a > 0. ? x * (1. + 1. / a) / (x + b / a) : x / b;\n}\n\nvec3 tonemap_reinhard(const vec3 x, const vec3 a, const vec3 b)\n{\n    return vec3(tonemap_reinhard(x.r, a.r, b.r), tonemap_reinhard(x.g, a.g, b.g), tonemap_reinhard(x.b, a.b, b.b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    const float visible_range_min = 390.0;\n    const float visible_range_max = 720.0;\n    float w = mix(visible_range_min, visible_range_max, uv.x);\n\n    vec3 xyz = wl2lms_cie2006(w) * LMS2XYZ;\n    vec3 rgb;\n\n    if(int(fragCoord.y) % int(iResolution.y / 4.) == 0)\n    {\n        rgb = vec3(0.);\n    }\n    else if(int(fragCoord.y) < int(iResolution.y) / 4)\n    {\n        rgb = xyz * XYZ_WGRGB;\n        // Clamp the values outside of the gamut.\n        rgb = clamp(rgb, vec3(0), vec3(1));\n    }\n    else\n    {\n        // Map chromaticity to Wide-gamut RGB\n        vec3 xyY = xyz2xyY(xyz);\n        const vec3 white_e = xyz2xyY(white_d50 * D50_E);\n        const vec3 red_wgrgb_e = xyz2xyY(red_wgrgb * D50_E);\n        const vec3 green_wgrgb_e = xyz2xyY(green_wgrgb * D50_E);\n        const vec3 blue_wgrgb_e = xyz2xyY(blue_wgrgb * D50_E);\n        vec3 proj = project_to_gamut(xyY, white_e, red_wgrgb_e, green_wgrgb_e, blue_wgrgb_e);\n        if(int(fragCoord.y) < int(iResolution.y) / 4 * 2)\n        {\n            // Clamp luminance.\n            xyz = xyY2xyz(vec3(proj.xy, xyz.y));\n            rgb = xyz * E_D50 * XYZ_WGRGB;\n            rgb = clamp(rgb, 0., 1.);\n        }\n        else if(int(fragCoord.y) < int(iResolution.y) / 4 * 3)\n        {\n            // Tonemap luminance.\n            xyz = xyY2xyz(vec3(proj.xy, xyz.y));\n            rgb = xyz * E_D50 * XYZ_WGRGB;\n            rgb = tonemap_reinhard(rgb, vec3(1.3), vec3(1.73));\n        }\n        else\n        {\n            // Normalize luminance.\n            xyz = xyY2xyz(proj);\n            rgb = xyz * E_D50 * XYZ_WGRGB;\n        }\n    }\n    rgb = linear2gamma(rgb);\n    fragColor = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}