{"ver":"0.1","info":{"id":"Ml2cRR","date":"1507225374","viewed":173,"name":"PA4 Reveal","username":"Cameron_Belcher","description":"im trying to reveal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["reveal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//All my variables\nfloat Radius = 0.15;\nvec3 BgColor = vec3(1.0,1.0,1.0);\nvec3 FgColor = vec3(1.0,0.0,0.0);\n\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\nmat3 sharpen = mat3(\n 0.0, -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0.0, -1, 0.0 // third column\n);\n\nmat3 emboss = mat3 (\n\t -2.0,  -1.0,  0.0,\n     -1.0, 1.0,  1.0,\n     0.0,  1.0, 2.0\n);\n\nmat3 edgeDec = mat3 (\n\t -1.0, -1.0, -1.0,\n     -1.0, 8.0,  -1.0,\n     -1.0, -1.0, -1.0\n);\n\nvec3 aSample(const int x, const int y, in vec2 fragCoord)\n{\n vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n uv = (uv + vec2(x, y)) / iChannelResolution[0].xy ;\n return texture(iChannel0, uv).xyz;\n}\n\nvec3 bSample(const int x, const int y, in vec2 fragCoord)\n{\n vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n uv = (uv + vec2(x, y)) / iChannelResolution[0].xy ;\n return texture(iChannel1, uv).xyz;\n}\n\nvec3 aFilter(in vec2 fragCoord, mat3 kernel)\n{\n vec3 sum;\n    \n for(int i = 0; i < 3; i++)\n {\n     for(int j = 0; j < 3; j++)\n     {\n      sum += aSample(i-1, j-1, fragCoord) * kernel[i][j];\n         \n     }\n }\n    return sum;\n}\n\nvec3 bFilter(in vec2 fragCoord, mat3 kernel)\n{\n vec3 sum;\n    \n for(int i = 0; i < 3; i++)\n {\n     for(int j = 0; j < 3; j++)\n     {\n      sum += bSample(i-1, j-1, fragCoord) * kernel[i][j];\n         \n     }\n }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initiating variables\n    vec4 ball;\n    float maybe;\n    float howFast = 165.0;\n    vec2 Location = iMouse.xy/iResolution.xy;// vec2(abs(sin(iTime)),0.5);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t\n    vec2 fc = fragCoord.xy;\n    \n    // Correct for aspect ratio\n    float aspect = iResolution.y / iResolution.x;\n    uv.y *= iResolution.y / iResolution.x;\n    Location.y *= aspect;\n    \n    // getting the alpha for the ball\n    maybe = step(length(Location-uv),Radius);\n    \n    // ball = vec4(aFilter(fc,sharpen),maybe);\n    // ball = vec4(aFilter(fc,blur),maybe);\n    // ball = vec4(aFilter(fc,emboss),maybe);\n    ball = vec4(aFilter(fc,edgeDec),maybe);\n\n    \n    vec4 BG = vec4(bFilter(fc,blur),1.0);\n    vec4 mixture = mix(BG, ball, ball.a);\n    \n   fragColor = mixture;\n}","name":"Image","description":"","type":"image"}]}