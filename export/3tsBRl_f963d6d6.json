{"ver":"0.1","info":{"id":"3tsBRl","date":"1597464173","viewed":269,"name":"FFT Sierpinski Gasket","username":"rory618","description":"Frequency synthesising an image of a Menger Sponge and more. Mouse to rotate, Select shapes at the beginning of buffer A. Space to show spectrum.","likes":14,"published":1,"flags":48,"usePreview":0,"tags":["3d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"FFT\" by rory618. https://shadertoy.com/view/4dGyWD\n// 2019-02-07 18:55:18\n\nvoid mainImage( out vec4 O, in vec2 I ) {\n\t\n\n    \n    if(texelFetch(iChannel2,ivec2(32,2),0).x>0.){\n    \tO = .5-.5*cos(.3*vec4(2,3,4,0)*max(0.,1.+log(length(texture(iChannel0, fract(I/R.xy+0.5)).xy))));\n    } else {\n    \tO = .5-.5*cos(.3*vec4(2,3,4,0)*max(0.,1.+log(length(texture(iChannel1, fract(I/R.xy+0.5)).xy))));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n#define W(i,n) cexp(vec2(0,2.*pi*float(i)/float(n)))\n#define R iResolution\n#define fradix float(radix)\n#define T(c,x,y) texelFetch(c, ivec2(x,y), 0)\n#define SUM(expr, ind, len) \\\n    sum = vec2(0);\\\n    for(int ind = 0; ind < 64; ind++){\\\n        if (ind >= len) break;\\\n        sum += expr;\\\n    }\nvec2 sum;\n\nint x_N0;\nint y_N0;\nint x_N1;\nint y_N1;\n\nfloat factor(float x){\n    x = floor(x);\n    float f = floor(sqrt(x));\n    while(fract(x/f)>.5/x){f--;}\n    return x/f;\n}\n\nvoid setRadix(vec3 R){\n    \n    x_N0 = int(R.x/factor(R.x));\n    y_N0 = int(R.y/factor(R.y));\n    x_N1 = int(R.x)/x_N0;\n    y_N1 = int(R.y)/y_N0;\n    \n}\n\nvec2 cprod(vec2 a, vec2 b){\n    return mat2(a,-a.y,a.x) * b;\n}\n\nvec2 cis(float t){\n    return cos(t - vec2(0,pi/2.));\n}\nvec2 cexp(vec2 z) {\n    return exp(z.x)*cis(z.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#define Tetrahedron\n//#define Cube\n//#define Vicsec\n//#define Octahedron\n#define Dodecahedron\n//#define Icosahedron\n//#define SnubTetrahedron\n\nbool fake_occlusion = true;\t\t//set to false for a perfectly transparent volumetric image\nbool dof = true;\t\t\t\t//Depth of feild enabled, does not really work if the object crosses the focal plane\nbool animate = true;\t\t\t//Animate by growing and shrinking the smaller simmilar copies\n\n#ifdef Dodecahedron\nfloat focal_length = 1.0;\nfloat sm = 8.;\t\t\t\t\t//smoothing/windowing\nfloat sf = 2.6180339;\t\t\t//scaling factor\nfloat v = 16.;\t\t\t\t\t//amplitude divider\n//(±φ, ±φ, ±φ)\n//(0, ±φ2, ±1)\n//(±φ2, ±1, 0)\n//(±1, 0, ±φ2)\nconst float phi = 1.6180339;\nconst float ph2 = 2.6180339;\nvec3[] vertecies = vec3[](\n    vec3( phi, phi, phi)/2.,\n    vec3( phi, phi,-phi)/2.,\n    vec3( phi,-phi, phi)/2.,\n    vec3( phi,-phi,-phi)/2.,\n    vec3(-phi, phi, phi)/2.,\n    vec3(-phi, phi,-phi)/2.,\n    vec3(-phi,-phi, phi)/2.,\n    vec3(-phi,-phi,-phi)/2.,\n    vec3(   0, ph2,   1)/2.,\n    vec3(   0, ph2,  -1)/2.,\n    vec3(   0,-ph2,   1)/2.,\n    vec3(   0,-ph2,  -1)/2.,\n    vec3( ph2,   1,   0)/2.,\n    vec3( ph2,  -1,   0)/2.,\n    vec3(-ph2,   1,   0)/2.,\n    vec3(-ph2,  -1,   0)/2.,\n    vec3(   1,   0, ph2)/2.,\n    vec3(  -1,   0, ph2)/2.,\n    vec3(   1,   0,-ph2)/2.,\n    vec3(  -1,   0,-ph2)/2.\n);\n#endif\n\n#ifdef SnubTetrahedron\nfloat focal_length = 1.0;\nfloat sm = 8.;\nfloat sf = 3.;\nfloat v = 10.;\n//(0, ±2, ±1)\n//(±2, ±1, 0)\n//(±1, 0, ±2)\n//( 0, 0,  0)\nvec3[] vertecies = vec3[](\n    vec3( 0, 2, 1)/1.3,\n    vec3( 0, 2,-1)/1.3,\n    vec3( 0,-2, 1)/1.3,\n    vec3( 0,-2,-1)/1.3,\n    vec3( 2, 1, 0)/1.3,\n    vec3( 2,-1, 0)/1.3,\n    vec3(-2, 1, 0)/1.3,\n    vec3(-2,-1, 0)/1.3,\n    vec3( 1, 0, 2)/1.3,\n    vec3(-1, 0, 2)/1.3,\n    vec3( 1, 0,-2)/1.3,\n    vec3(-1, 0,-2)/1.3,\n    vec3( 0, 0, 0)/1.3\n);\n#endif\n\n#ifdef Icosahedron\nfloat focal_length = 1.0;\nfloat sm = 8.;\nfloat sf = 2.6180339;\nfloat v = 10.;\n//(±φ, ±φ, ±φ)\n//(0, ±φ2, ±1)\n//(±φ2, ±1, 0)\n//(±1, 0, ±φ2)\nconst float phi = 1.6180339;\nvec3[] vertecies = vec3[](\n    vec3(   0, phi,   1)/1.3,\n    vec3(   0, phi,  -1)/1.3,\n    vec3(   0,-phi,   1)/1.3,\n    vec3(   0,-phi,  -1)/1.3,\n    vec3( phi,   1,   0)/1.3,\n    vec3( phi,  -1,   0)/1.3,\n    vec3(-phi,   1,   0)/1.3,\n    vec3(-phi,  -1,   0)/1.3,\n    vec3(   1,   0, phi)/1.3,\n    vec3(  -1,   0, phi)/1.3,\n    vec3(   1,   0,-phi)/1.3,\n    vec3(  -1,   0,-phi)/1.3,\n    vec3(   0,   0,   0)/1.3\n);\n#endif\n\n\n#ifdef Cube\nfloat focal_length = 1.5;\nfloat sm = 8.;\nfloat sf = 3.;\nfloat v = 15.;\nvec3[] vertecies = vec3[](\n    vec3(-1,-1,-1),\n    vec3(-1,-1, 0),\n    vec3(-1,-1, 1),\n    vec3(-1, 0,-1),\n    vec3(-1, 0, 1),\n    vec3(-1, 1,-1),\n    vec3(-1, 1, 0),\n    vec3(-1, 1, 1),\n    vec3( 0,-1,-1),\n    vec3( 0,-1, 1),\n    vec3( 0, 1,-1),\n    vec3( 0, 1, 1),\n    vec3( 1,-1,-1),\n    vec3( 1,-1, 0),\n    vec3( 1,-1, 1),\n    vec3( 1, 0,-1),\n    vec3( 1, 0, 1),\n    vec3( 1, 1,-1),\n    vec3( 1, 1, 0),\n    vec3( 1, 1, 1)\n);\n#endif\n\n\n#ifdef Vicsec\nfloat focal_length = 1.0;\nfloat sm = 8.;\nfloat sf = 3.;\nfloat v = 5.5;\nvec3[] vertecies = vec3[](\n    vec3( 0, 0,-1),\n    vec3( 0, 0, 1),\n    vec3( 0,-1, 0),\n    vec3( 0, 1, 0),\n    vec3(-1, 0, 0),\n    vec3( 1, 0, 0),\n    vec3( 0, 0, 0)\n);\n#endif\n\n#ifdef Tetrahedron\nfloat focal_length = 1.1;\nfloat sm = 12.;\nfloat sf = 2.;\nfloat v = 3.;\nvec3[] vertecies = vec3[](\n    vec3(-.5,-.5,-.5),\n    vec3(-.5, .5, .5),\n    vec3( .5,-.5, .5),\n    vec3( .5, .5,-.5)\n);\n#endif\n\n#ifdef Octahedron\nfloat focal_length = 1.0;\nfloat sm = 12.;\nfloat sf = 2.;\nfloat v = 4.;\nvec3[] vertecies = vec3[](\n    vec3( 0, 0, 1),\n    vec3( 0, 0,-1),\n    vec3( 0, 1, 0),\n    vec3( 0,-1, 0),\n    vec3( 1, 0, 0),\n    vec3(-1, 0, 0)\n);\n#endif\n\n\nvec2 spectrum( vec2 f, int iters)\n{\n    \n    vec2 c = ((iMouse.xy-R.xy/2.)/100.);\n    \n    mat2 rotx = mat2(cos(c.x),sin(c.x),-sin(c.x),cos(c.x));\n    mat2 roty = mat2(cos(c.y),sin(c.y),-sin(c.y),cos(c.y));\n    \n    \n    vec2 spec = vec2(1,0);\n    float d = 1.;\n    \n    for(int k = 0; k < vertecies.length(); k++){\n        vertecies[k].xz *= rotx;\n        vertecies[k].yz *= roty;\n    }\n    \n    for(int i = 0; i < iters; i++){\n        vec2 sum = vec2(0);\n        \n        for(int k = 0; k < vertecies.length(); k++){\n            vec3 v = vertecies[k];\n            float z = v.z - focal_length;\n            sum += cos(dot(f,v.xy*d) + vec2(0,-1.5707)) * min(1.,dof?exp(-z*abs(z)*d*0.0002*-dot(f,f)):1.) * (fake_occlusion?exp(.2+v.z*.8 /*.4+v.z*d*/):1.6);\n        }\n        d /= sf+(animate?(sin(iTime)+1.)/4.:0.);\n        spec = mat2(sum,-sum.y,sum.x)*spec/v;\n    }\n    return spec;\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 f= (mod(I-.5+R.xy/2.,R.xy)*2.-R.xy)/R.xy*R.y/1.5;\n    O = vec4(spectrum(f,10),0,0);\n    \n    O *= exp(-sm/R.y/R.y*dot(f,f));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    setRadix(R);\n    O = vec4(0);\n    int x = int(I.x);\n    int y = int(I.y);\n    \n    int n = (x/x_N1);\n    SUM( cprod(T(iChannel0, x%x_N1+i*x_N1, y).xy,W(-i*n,x_N0)),i,x_N0 );\n    O.xy = cprod(sum, W(-(x%x_N1)*n,int(R.x)));\n    \n    \n    n = (x/x_N0);\n    SUM( cprod(T(iChannel1, (x%x_N0)*x_N1+i, y).xy,W(-i*n,x_N1)),i,x_N1 );\n    O.zw = sum;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    setRadix(R);\n    O = vec4(0);\n    int x = int(I.x);\n    int y = int(I.y);\n    \n    int n = (y/y_N1);\n    SUM( cprod(T(iChannel0, x, y%y_N1+i*y_N1).zw,W(-i*n,y_N0)),i,y_N0 );\n    O.zw = cprod(sum, W(-(y%y_N1)*n,int(R.y)));\n    \n    \n    n = (y/y_N0);\n    SUM( cprod(T(iChannel1, x, (y%y_N0)*y_N1+i).zw,W(-i*n,y_N1)),i,y_N1 );\n    O.xy = sum/sqrt(R.x*R.y);\n}","name":"Buffer C","description":"","type":"buffer"}]}