{"ver":"0.1","info":{"id":"cstfzf","date":"1697483665","viewed":39,"name":"16. Angel","username":"Ladus","description":"Inktober 2023 Day 16. A stained glass angel","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["angel","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//// Common functions\n#define PI 3.14159265359\nmat2 rotate(float a) {\n    a *= PI * 2.;\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 normalizeScreenSpace(vec2 fragCoord, out float aa) {\n    aa = 0.003;\n    vec2 normalized = fragCoord /= iResolution.y ;\n    return normalized;\n}\n// Function from IÃ±igo Quiles - https://iquilezles.org/articles/distfunctions2d/\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\nfloat sdCircle(vec2 p, float r) {\n    return distance(vec2(0), p)-r;\n}\nfloat dot2(in vec2 v ) { return dot(v,v); }\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n// Angel figure\nvec3 Angel(vec2 p, float aa) {\n    vec3 color = vec3(1.,1.,0.8) * smoothstep(0.+aa,0.-aa,sdCircle(p+vec2(-0.6,-0.7),0.05)); // Head\n    color = mix(color, vec3(1.,0.1,0.), smoothstep(0.+aa,0.-aa, sdTrapezoid(p+vec2(-0.6, -0.45), 0.08, 0.03, 0.15))); //Body\n    p.x = abs(p.x - 0.6); // mirror space\n    color = mix(color, vec3(0.,0.4,1.), smoothstep(0.+aa,0.-aa, sdTriangle((p*rotate(0.035))+vec2(0.12, -0.42), vec2(0.2,0.3), vec2(0.1,0.1), vec2(0.06,0.2)))); //wing\n    return color;\n}\n\n// Sample rays towards the light source and add colors\nvec3 GetGodRays(vec2 p, vec2 light, float aa) {\n    float d = distance(p,light);\n    vec2 direction = normalize(light - p);\n    vec2 path = direction * d;\n    \n    vec3 result = vec3(0.,0.,0.);\n    vec3 resultFromMax = vec3(0.,0.,0.);\n    for(float i = 0.; i < 1.; i += 0.005){\n        float dropoff = i;\n        result = max(result, Angel(p+(path*i), aa)); // use max for sharp edges\n        result = result + (Angel(p+(path*i), aa)*(0.01)); // use addetive for more volume\n    }\n    result *= 1.-sqrt(sqrt(d*0.7));\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float loopingTime = sin(iTime/1.);\n    float aa = 0.;\n    vec2 p = normalizeScreenSpace(fragCoord, aa);\n    \n    // Get angel color\n    vec3 angelColor = Angel(p, aa);\n    \n    // place point light\n    vec2 light = vec2(0.2,1.+sin(loopingTime)*.5);\n    \n    // Trace path from pixel to light, and find colors\n    vec3 godRays = GetGodRays(p, light, aa);\n    \n    // Output to screen\n    fragColor = vec4(max(godRays, angelColor),1.);\n}","name":"Image","description":"","type":"image"}]}