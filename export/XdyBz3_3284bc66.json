{"ver":"0.1","info":{"id":"XdyBz3","date":"1531915660","viewed":109,"name":"lancer de rayon","username":"elgecko","description":"lancer de rayon","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//pos : position on screen. 0,0 is the center and max(pos.x,pos.y)=1\nvec3 rayon(in vec2 pos, in float fov, in vec3 dir)\n{\n    float angle = radians(fov)/2.0;\n    vec3 ray = vec3(pos.x,pos.y,1.0/tan(angle));\n    return ray/length(ray);\n}\n\nfloat interSphere(in sphere s, in vec3 r, in vec3 cam)\n{\n    vec3 o = cam-s.pos;\n    float a = dot(r,r);\n    float b = 2.*dot(r,o);\n    float c = dot(o,o)-s.size*s.size;\n    float det = b*b-4.*a*c;\n    if(det<0.) return -1.;\n    return (-b-sqrt(det))/(2.*a);\n}\n\nint loopOnObject(inout vec3 ray, inout vec3 origin)\n{\n    float len = -1.;\n    int match = -1;\n    \n    for(int i = 0; i < nbSphere; i++)\n    {\n        float tmp = interSphere(tab[i], ray, origin);\n        if(tmp>=0. && (len < 0. || tmp < len))\n        {\n            len = tmp;\n            match = i;\n        }\n    }\n    \n    if(match != -1)\n    {\n        origin = origin + ray*len;\n        ray = reflect(ray, origin-tab[match].pos);\n    }\n    \n    return match;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 cam = vec3(0.,0.,0.);\n\tvec3 dir = vec3(0.,0.,1.);//unused\n\tfloat fov = 30.;\n    \n\ttab[0].pos = vec3(15.987*sin(iTime),0.,100.+15.987*cos(iTime));\n\ttab[0].size = 3.;\n\ttab[1].pos = vec3(10.737*sin(-iTime),0.,100.+10.737*cos(-iTime));\n\ttab[1].size = 1.;\n\ttab[2].pos = vec3(10.737*sin(iTime*1.523),10.737*cos(iTime*1.523),100.);\n\ttab[2].size = 2.;\n\ttab[3].pos = vec3(0,0.,100.);\n\ttab[3].size = 2.;\n    // if you add more sphere, increase the value of nbSphere in common\n    \n    // Normalized pixel coordinates (from -1 to 1 on largest axis)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/max(iResolution.x,iResolution.y);\n\n    vec3 ray = rayon(uv,fov,dir);\n    vec3 origin = cam;\n    int match = 1;\n    for(int i = 0; (i<3 && match!=-1); i++)\n        match = loopOnObject(ray, origin);\n    \n    fragColor = texture(iChannel0, ray);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct sphere{\n    vec3 pos;\n    float size;\n};\n    \nconst int nbSphere = 4;\n    \nsphere tab[nbSphere];","name":"Common","description":"","type":"common"}]}