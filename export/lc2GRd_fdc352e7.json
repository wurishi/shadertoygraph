{"ver":"0.1","info":{"id":"lc2GRd","date":"1704547243","viewed":43,"name":"squares rotating","username":"nayk","description":"stars, squares, rotate","likes":1,"published":1,"flags":1,"usePreview":0,"tags":["rotate","stars","squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* originals https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/MfBGz3*/\n#define iterations 14\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\n#define rot(a)    mat2(cos((a)+vec4(0,11,33,0)))         \n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.02);\n\tfloat time=iTime*speed+.25;\n\nvec4 O =fragColor;\nvec2 U = fragCoord;\n\tfloat t=9., l, i, r;\n    vec3  R = iResolution, a,\n          D = normalize(vec3(U+U, -4.*R.y) - R),              // ray direction\n          p = vec3(0,0,40), q,                                // marching point along ray \n          C = iMouse.z > 0. ? 8.*iMouse.xyz/R -4.             // camera control\n                          : 3.* cos(.3*iTime + vec3(0,11,0)); // demo mode\n    vec2 v;\n    \n  \n       \n    for ( O=vec4(1); O.y > 0. && t > .01; O-=.01 ) {          // march scene\n        q = p, \n                               \n        q.zy *= rot(90.);\n        for (r =10.; r > .15; r -= 0.55 )                        // for each ring\n            q.xz = vec2(q.z,-q),\n          \n            // swap axis by PI/2\n            q.zx *= rot(clamp( mod(iTime*0.1,1.) * 3.14*r, 2.1,2.14*tan(iTime))), // rotate the ring\n             \n              q.yz *= rot(clamp( mod(iTime,1.) - 3.14*r, 2.1,0.1)), // rotate the ring\n            a = abs(q), t = min(t,  max( abs( max(a.x,a.z) - r+.1225 ) -0.323  , a.y - 0.2 ) ); // draw frame\n\n        p += 0.125*t*D;                                          // step forward = dist to obj    \n    }\n    O += O*O*O*2.5;                   \n\t\n\tvec3 from=vec3(1.,.5,0.5)*O.xyz;\n\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=O;\n}\n","name":"Image","description":"","type":"image"}]}