{"ver":"0.1","info":{"id":"sdBczd","date":"1643929076","viewed":98,"name":"Magic bubble","username":"Dubswitcher","description":"Just some fun with random noise.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","noise","random","abstract"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float pi = 3.141592653;\nconst float squaresize = 10.;\n\nfloat ease(in float x) {\n    return x*x*(3.-2.*x);\n}\n\nfloat hash (in vec2 uv) {\n    vec3 p = vec3(\n    dot(uv.xy,vec2(123.,456.)),\n    dot(uv.xy,vec2(789.,112.)),\n    dot(uv.xy,vec2(345.,678.))\n    );\n    p = fract(sin(p*10.)*5000.);\n    return fract(dot(p,vec3(987.,654.,321.)));\n}\n\nvoid findRatio (in vec2 res, out vec2 rat) {\n    vec2 r = res;\n    float gcf;\n    for(float i = 1.; i <= r.x && i <= r.y; ++i)  \n    {  \n        if (mod(r.x,float(i)) == 0. && mod(r.y,float(i)) == 0.)  \n            gcf = float(i);\n    }\n    r /= gcf;\n    rat = r;\n}\n\nvoid rgb2hsv(inout vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    c = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvoid hsv2rgb(inout vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    c = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 passcol(in vec2 coord )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = coord/res.yy;\n    vec2 baseuv = coord/res.xy;\n    vec2 rat;\n    \n    float distTime = iTime+uv.y*0.2;\n    \n    findRatio(res,rat);\n    uv.x += 0.1111111+0.5-1.;\n    uv -= 0.5;\n    float wobble = sin(distTime*2.*pi)/2.+0.9;\n    float p = sin((1.-sqrt(uv.x*uv.x+uv.y*uv.y)*(2.+wobble*0.2))*(pi/2.));    \n    \n    vec3 col = vec3(p);\n    \n    return col;\n}\n\n//------------------------------\n\nconst float thres = 0.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 rand;\n\n    float distTime = iTime+uv.y*0.2;\n    float distTimeStrong = iTime+uv.y*2.;\n    \n    vec3 mask = passcol(fragCoord);\n    \n    vec2 ratio;\n    findRatio (iResolution.xy,ratio);\n    \n    float t = thres+ease(hash(uv.xy+iTime/100.))*0.1;\n    \n    uv.x += hash(uv.xy+(iTime/100.))/ratio.x;\n    if (mask.x > t) {\n        \n        uv *= (mask.xy)*abs(sin(distTimeStrong))+0.2;\n    } else {\n        uv.y += hash(uv.xy+(iTime/100.+10.))/ratio.y;\n    }    \n        \n    uv += iTime/10.;\n    \n    vec2 uvp = floor(uv*ratio)/ratio;\n    \n    rand.x = hash(uvp+floor(distTime));\n    rand.y = hash(uvp+ceil(distTime)); \n    \n    vec3 col = mix(vec3(rand.xx,0.5),vec3(rand.yy,0.5),ease(fract(distTime)));\n    \n    if (mask.x > t) {\n        rgb2hsv(col);\n        col.x *= 100.-(col.y*1.5);\n        col.x += distTime/10.;\n        col.y *= 1.3;\n        col.z *= 2.4;\n        col.z -= 0.4;\n        col.z = (col.z + (col.z/(mask.x*5.)))/3.;\n        hsv2rgb(col);\n    } else {\n        mask.x += 0.08;\n        mask.x *= 4.;\n        mask.x = clamp(mask.x,0.,1.);\n        col = vec3(col.x+mask.x);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}