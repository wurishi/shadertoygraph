{"ver":"0.1","info":{"id":"dlcfRf","date":"1701438953","viewed":8,"name":"kougeikadai","username":"Shangyuyang","description":"2321041","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Sphere center and radius\n    vec3 sphereCenter = vec3(0.5, 0.5, 0.0);\n    float sphereRadius = 0.2;\n\n    // Light position\n    vec3 lightPos = vec3(0.8, 0.8, 1.0);\n\n    // Calculate distance from pixel to sphere center\n    float distanceToSphere = length(uv - sphereCenter.xy);\n\n    // Check if pixel is inside the sphere\n    if (distanceToSphere < sphereRadius)\n    {\n        // Calculate the normal vector of the sphere\n        vec3 sphereNormal = normalize(vec3(uv - sphereCenter.xy, sqrt(sphereRadius * sphereRadius - distanceToSphere * distanceToSphere)));\n\n        // Calculate the vector from the sphere to the light\n        vec3 lightDir = normalize(lightPos - sphereCenter);\n\n        // Calculate the dot product of the normal and light direction\n        float lambertian = max(dot(sphereNormal, lightDir), 0.0);\n\n        // Set the shadow color based on the Lambertian reflection\n        vec3 shadowColor = vec3(0.0, 0.0, 0.0);\n        float shadowIntensity = 0.5;  // Adjust the shadow intensity\n        vec3 finalColor = mix(shadowColor, vec3(1.0, 0.0, 0.0), lambertian * (1.0 - shadowIntensity));\n\n        // Inside the sphere, color the pixel with shadow\n        fragColor = vec4(finalColor, 1.0);\n    }\n    else\n    {\n        // Outside the sphere, make the pixel transparent\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}