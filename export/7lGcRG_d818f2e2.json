{"ver":"0.1","info":{"id":"7lGcRG","date":"1661772868","viewed":79,"name":"gaussian blur_one optimization","username":"ruc_X","description":"高斯模糊一维优化","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["optimization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define boxSize 3\n#define center 1\n#define step1 10.0\nfloat gaussian(float x,float sigma){\n    return exp(-(x*x)/(2.0*sigma*sigma));\n}\nvec3 blurY(vec2 uv,vec2 imageSize){\n    float weights = 0.0;\n    vec3 ret = vec3(0.0);\n    for(int i =0;i<boxSize;i++) // i-center : -1~1\n    {\n        float fy = gaussian(step1*float(i-center),5.0);\n        \n        float offsetY = (step1*float(i-center))/imageSize.y;\n        weights += fy;\n        ret += texture(iChannel0,uv + vec2(0.0,offsetY)).rgb*fy;\n    }\n    return ret/weights;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Output to screen\n    //fragColor = vec4(vec3(blurY(uv,iResolution.xy)),1.0);\n    fragColor = textureLod(iChannel0, uv,0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define boxSize 3\n#define center 1\n#define step1 10.0\nfloat gaussian(float x,float sigma){\n    return exp(-(x*x)/(2.0*sigma*sigma));\n}\nvec3 blurX(vec2 uv,vec2 imageSize){\n    float weights = 0.0;\n    vec3 ret = vec3(0.0);\n    for(int i =0;i<boxSize;i++) // i-center : -1~1\n    {\n        float fx = gaussian(step1*float(i-center),5.0);\n        \n        float offsetX = (step1*float(i-center))/imageSize.x;\n        weights += fx;\n        ret += texture(iChannel0,uv + vec2(offsetX,0.0)).rgb*fx;\n    }\n    return ret/weights;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Output to screen\n    fragColor = vec4(vec3(blurX(uv,iResolution.xy)),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}