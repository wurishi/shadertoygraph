{"ver":"0.1","info":{"id":"tltXzH","date":"1580426786","viewed":80,"name":"Rolling Cube","username":"hZzAaa","description":"A cube rolling along a blank plane.\n\nThe cube and plane are raymarched individually to achieve shading on the cube but not the plane","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 10000\n#define MAX_DIST 1000.\n#define SURF_DIST .001\n\n#define PI 3.1415926535897932384626433832795\n#define ROLLSPEED iTime\n\n#define CUBE_COLOUR vec3(.8, .843, .922)\n#define PLANE_COLOUR vec3(.635, .761, .851)\n\n//#define MOUSE_MOVEMENT\n\nmat2 Rot(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, -s, s, c);\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nvec3 rotation(vec3 point, vec3 axis, float angle){\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    mat4 rot= mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,0.0,0.0,1.0);\n    return (rot*vec4(point,1.)).xyz;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec4 GetCubeDist(vec3 p)\n{\n  float sqrt2 = 1.41421356237;\n  float yMov = max(sin(2.*ROLLSPEED), sin(2.*ROLLSPEED + PI))/(sqrt2+1.) + 1.;\n  vec3 rotatedCubePos = rotation(p-vec3(0,yMov,0), vec3(0,0,1), ROLLSPEED);\n  rotatedCubePos-=vec3(0,-1,0);\n\n  return vec4(CUBE_COLOUR, sdBox(rotatedCubePos - vec3(0, 1, 0), vec3(1)));\n}\n\n// Can remove\nvec4 GetDist(vec3 p) {\n  //Floor\n  vec4 plane = vec4(PLANE_COLOUR, p.y);\n\n  //Cube\n  vec4 box = GetCubeDist(p);\n\n  return plane.w < box.w ? plane : box;\n}\n\nvec4 RayMarchCube(vec3 ro, vec3 rd) {\n  float dO = 0.;\n  vec3 col = vec3(0);\n\n  for (int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = GetCubeDist(p).w;\n    dO += dS;\n    if (dO > MAX_DIST || dS < SURF_DIST) {\n      col = GetCubeDist(p).xyz;\n      break;\n    }\n  }\n\n  return vec4(col, dO);\n}\n\nvec4 RayMarchPlane(vec3 ro, vec3 rd) {\n  float dO = 0.;\n  vec3 col = vec3(0);\n\n  for (int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + rd * dO;\n    float dS = p.y;\n    dO += dS;\n    if (dO > MAX_DIST || dS < SURF_DIST) {\n      col = PLANE_COLOUR;\n      break;\n    }\n  }\n\n  return vec4(col, dO);\n}\n\nvec3 GetNormal(vec3 p) {\n  float d = GetDist(p).w;\n  vec2 e = vec2(.001, 0);\n\n  vec3 n = d - vec3(GetCubeDist(p - e.xyy).w, GetCubeDist(p - e.yxy).w, GetCubeDist(p - e.yyx).w);\n\n  return normalize(n);\n}\n\nfloat Shadow(vec3 p) {\n  vec3 lightPos = vec3(0, 5, -25);\n  vec3 l = normalize(lightPos - p);\n  \n  //Get Normal\n  float d = GetDist(p).w;\n  vec2 e = vec2(.001, 0);\n\n  vec3 n = d - vec3(GetDist(p - e.xyy).w, GetDist(p - e.yxy).w, GetDist(p - e.yyx).w);\n  n = normalize(n);\n\n  float dif = 1.;\n\n  // Shadow\n  float d2 = RayMarchCube(p + n * SURF_DIST * 2., l).w;\n  if(p.y<.01 && d2<length(lightPos-p)) dif *= .5;\n\n  return dif;\n}\n\nfloat DiffuseLight(vec3 p){  \n  vec3 lightPos = vec3(0, 5, -25);\n  vec3 l = normalize(lightPos - p);\n\n  //Get Normal\n  float d = GetDist(p).w;\n  vec2 e = vec2(.001, 0);\n\n  vec3 n = d - vec3(GetDist(p - e.xyy).w, GetDist(p - e.yxy).w, GetDist(p - e.yyx).w);\n  n = normalize(n);\n\n  float dif = clamp(dot(n, l) * .5 + .5, 0., 1.);\n\n  return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n  vec3 f = normalize(l - p), r = normalize(cross(vec3(0, 1, 0), f)),\n       u = cross(f, r), c = p + f * z, i = c + uv.x * r + uv.y * u,\n       d = normalize(i - p);\n  return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n  vec3 col = vec3(0);\n\n  vec3 ro = vec3(40); // Camera pos\n  \n  #ifdef MOUSE_MOVEMENT\n    vec2 m = iMouse.xy / iResolution.xy;\n    ro.yz *= Rot(-m.y * 3.14 + 1.);\n    ro.xz *= Rot(-m.x * 6.2831);\n  #endif\n\n  vec3 rd = R(uv, ro, vec3(0, 1, 0), 5.); // Camera direction/zoom\n\n  vec4 cube = RayMarchCube(ro, rd);\n  vec4 plane = RayMarchPlane(ro, rd);\n\n  if (cube.w < MAX_DIST || plane.w < MAX_DIST) {\n    col = cube.xyz;\n  \n    vec3 cube_p = ro + rd * cube.w;\n    float dif = DiffuseLight(cube_p);\n    col.yz *= dif/.2;\n    col.x *= dif/.5;\n\n    if (plane.w < cube.w)\n    {      \n      vec3 plane_p = ro + rd * plane.w;\n      col.xyz = plane.xyz;\n      col.yz *= Shadow(plane_p);\n    }\n\n  }\n\n  fragColor = vec4(col, 0.0);\n}","name":"Image","description":"","type":"image"}]}