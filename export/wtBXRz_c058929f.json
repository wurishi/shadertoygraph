{"ver":"0.1","info":{"id":"wtBXRz","date":"1564769561","viewed":2514,"name":"barrel distortion","username":"ttyy","description":"pincushion and barrel distortion","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["barreldistortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on meshula https://www.shadertoy.com/view/MlSXR3\n\n/* notes : \n\tuv: range [0:1]\n\tk1: the main distortion \n\t\tpositive = barrel, negative = pincushion\n\tk2: tweaks the edges of distortion\n\t\tcan be 0.0\n*/\n\nvec2 brownConradyDistortion(in vec2 uv, in float k1, in float k2)\n{\n    uv = uv * 2.0 - 1.0;\t// brown conrady takes [-1:1]\n\n    // positive values of K1 give barrel distortion, negative give pincushion\n    float r2 = uv.x*uv.x + uv.y*uv.y;\n    uv *= 1.0 + k1 * r2 + k2 * r2 * r2;\n    \n    // tangential distortion (due to off center lens elements)\n    // is not modeled in this function, but if it was, the terms would go here\n    \n    uv = (uv * .5 + .5);\t// restore -> [0:1]\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n    \n    float k1 = -.2 + .7 * (sin( iTime * .5) * .5 + .5);  // [-.25 : 0.75 ]\n    float k2 = 0.;//\n    \n    if (iMouse.z > 0.){\n        k1 = iMouse.x / iResolution.x * .7 - .2;\n        k2 = 1. - (iMouse.y / iResolution.y) * 1.25 - .25;\n    }\n\n    uv = brownConradyDistortion( uv, k1, k2 );\n    \n    // using the distortion param as a scale factor, to keep the image close to the viewport dims\n    float scale = abs(k1) < 1. ? 1.-abs(k1) : 1./ (k1+1.);\t\t\n    \n    uv = uv * scale - (scale * .5) + .5;\t// scale from center\n    vec3 c = texture(iChannel0, uv).rgb;\n   \n    \n    // darken outside uv range\n    vec2 uv2 = abs(uv * 2. - 1.);\n    vec2 border = 1.-smoothstep(vec2(.95),vec2(1.0),uv2);\n    c *= mix(.2, 1.0, border.x * border.y);\n    \n    // vignette\n    float vignetteRange = clamp(k1, 0., .2);\n    float dist = distance(uv, vec2(0.5, 0.5));\n    dist = (dist - (.707 - vignetteRange)) / vignetteRange;\n    float mult = smoothstep(1.0, .0, dist);\n    c *= mult;\n\n    \n\tfragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}