{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//controls size of each ball\n// (actually represents size with bloom included)\nconst float threshold=50.0;\n\n//higher values mean thinner metaballs\n//1.0 or higher means one ball is not enough to form a solid\nconst float metaballFactor=0.75;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat dist;\n\tvec2 cPoint;\n\tfloat sum=0.0;\n\t//not normalized: circles are not stretched\n\tvec2 uv = fragCoord.xy;\n\t\n\t\n\t//let's make some points...\n\t// hurr durr, counting to a hundred in a shader program\n\t//  what could possibly go wrong\n\tfor (float i=1.0;i<100.0;i++) {\n\t\t//animate each point to wobble around\n\t\tcPoint=vec2(0.5*iResolution);\n\t\tcPoint.x+=sin(cos(i)*iTime*0.273)*iResolution.x*0.5;\n\t\tcPoint.y+=cos((sin(i*1.51))*iTime*0.32)*iResolution.y*0.5;\n\t\t\n\t\t//add current ball weight if within range\n\t\tdist=distance(cPoint,uv);\n\t\tif (dist<threshold) {\n\t\t\tsum+=1.0-sqrt(dist/threshold);\n\t\t}\n\t}\n\t//cutoff based on accumulated total weight\n\tif (sum>metaballFactor) {\n\t\tsum*=0.5;\n\t\tsum=min(sum,.5);\n\t\tsum*=1.8;\n\t\tfragColor = vec4(sum,sum,sum*1.2,1.0);\n\t} else {\n\t\t//not strong enough to be solid\n\t\t//(act as bloom instead)\n\t\tsum*=.3;\n\t\tfragColor = vec4 (sum,sum,sum*1.4,1.0);\n\t}\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sfXzN","date":"1397268675","viewed":294,"name":"Glowing Metaballs","username":"2DArray","description":"My first shader written as code instead of using Strumpy's wonderful Shader Editor.  Starting nice and simple: metaballs with some cheesy bluish glow.  FEEL the innovation (cough)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","metaball"],"hasliked":0,"parentid":"","parentname":""}}