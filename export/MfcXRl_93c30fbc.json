{"ver":"0.1","info":{"id":"MfcXRl","date":"1714302388","viewed":103,"name":"Silly Fox Noise","username":"efi","description":"A very simple noise function that works well for game purposes. In contrast to Simplex, this noise takes integers as input and does not interpolate, which makes it more suitable for deep fractalization, hopefully?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","pattern","generator","videogame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Silly Fox Noise by Efi\n// Trans rights are human rights\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // This would be the invariant input in a game\n    // You could call this noise again with the value you got from this noise as seed to fractalize it\n    // Here I use time on it to animate it and see many iterations of it\n    // If you look long enough you start seeing a background pattern spiraling around???\n    highp int seed = 0xBB + int(iTime * 30.0);\n    // This would be the variant inputs\n    highp float x = fragCoord.x;\n    highp float y = fragCoord.y;\n    // Basic shear to remove some very obvious \"walls\" that happen otherwise and\n    // multiply by large primes to use the entire integer byte space as much as possible\n    highp int ix = (int(x + 1.1 * y) * 0xFB) + (seed * 0xF1);\n    highp int iy = (int(y - 1.0 * x) * 0xF1) + (seed * 0xFB);\n    // Regular ass hash of a * b ^ c form wrapping around our desired range of values\n    // Then divide by the range to get a float within (0 - 1)\n    float r = float(((0xFF - ix - iy) * ix ^ iy) % 0xFF) / float(0xFF);\n    // Apply that value as gray for this coordinate\n    vec3 col = vec3(r);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}