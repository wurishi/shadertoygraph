{"ver":"0.1","info":{"id":"X3sSD8","date":"1709458955","viewed":51,"name":"Inverse Circle","username":"SrFox","description":"001","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n\n    // Calculate the distance from the center of the screen\n    vec2 center = iResolution.xy / 2.0;\n    float distance = length(fragCoord - center);\n\n    // Invert the color inside the circle\n    if (distance < iResolution.y / 4.0) {\n        col = 1.0 - col;\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}