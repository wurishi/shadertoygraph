{"ver":"0.1","info":{"id":"sd3SWf","date":"1729979758","viewed":291,"name":"Mushroom Forest","username":"BigWIngs","description":"Doodle from a couple of years ago. Figured it fits with the spirit of Halloween so why not make it public?","likes":45,"published":1,"flags":0,"usePreview":0,"tags":["sadf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Mushroom Forest\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2021\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvec3 Transform(vec3 p) {\n    float w = 1.;\n   // p.xy = BendUv(p.xy, -w, w, 3.1415);\n    return p;\n}\n\nfloat Mushroom2(vec3 p, float height, float bend) {\n    p.yx = BendUv(p.yx, 0., 1., bend);\n    \n    p*=2.;\n    \n    float stem = length(p.xz)-.1;\n    stem = max(stem, p.y-height);\n    float cap = length(p-vec3(0,.5,0));\n    \n    \n    \n    float under = S(height+.1, height-.1, p.y);\n    \n    cap = smin(cap-(height-.2), height-p.y, -.01);\n    \n    if(cap<.01) {\n    float pat = sdGyroid(p, 30., .5,.6)*.7;\n    cap = mix(smin(cap, smin(pat, cap-.005,-.03),.01), cap, under);\n    }\n    \n    float a = atan(p.x, p.z);\n    float wobbly = sin(a*30.);\n    \n    cap += wobbly*.02*under;\n    \n    \n    float y = p.y-(height-.2);\n    stem += sin(a*10.)*S(.005, .0, y*y)*.02;\n    float d = min(stem, cap)/2.;\n    return d;\n}\n\nfloat Mushroom(vec3 p, float height, float bend, float age) {\n    bend *=(1.-height*.5);\n    height *= 2.;\n    mat2 rot = Rot(height);\n    p.xz*=rot;\n    p.yx = BendUv(p.yx, 0.2, 1., bend);\n    p.xz*=inverse(rot);\n    \n    float t = age*.98;//(cos(iTime)*.5+.5)*.98;\n    height *= t;\n    \n    t = max(0.,t-.5)*2.;\n    t *= t;\n    \n    float cd = length(p.xz);\n    float stem = length(p-vec3(0,min(p.y, height),0))-.1;\n    float y = p.y-height;\n    \n    \n    \n    // hood\n    vec3 P = p-vec3(0,height,0); // coord system centered on hood\n    float a = atan(P.x, P.z);\n    float k = sin(a*3.)*.2+.7;\n    \n    vec2 hUv = ArcUvSimple(vec2(cd, y), tan(k-1.57));\n    hUv=SpiralUv(hUv, t*.7, -.1*(1.-t), .1);\n    \n    float hood = length(hUv-vec2(min(hUv.x, 1.), 0))-.02;\n    \n    float dg = sdGyroid(vec3(a, hUv.x, hUv.y), 20., 0., .2)*.7;\n    float pat = smin(abs(hood-.02)-.02, dg, -.02);\n    hood = smin( hood, pat, .1 );\n    //hood += sin(hUv.x*200.)*.003;\n    \n    float dg2 = sdGyroid(p*vec3(1,.3,1), 30., 0., .0);\n    float dg3 = sdGyroid(p, 34., 0.2, .0);\n   \n    stem -= dg2*dg2*3.+dg*.03;//min(dg, dg3)*.2;\n    \n   // hood = max(hood, p.z);\n    float d = smin(stem, hood,.1);\n    //d = hood;\n    return d*.7;\n}\n\nfloat Ground(vec3 G, float size) {\n    float s2=size;\n    G = G*s2;\n    float n2 = N21(floor(G.xz));\n\n    if(n2<.95) {\n        G.xz = fract(G.xz)-.5;\n        float grnd = length(G)-.5*n2;\n        G.xz*=Rot(n2*6.2832*2.*fract(n2*4.));\n        G.yz*=Rot(fract(n2*100.)*6.2832*2.);\n        float boxes = sdBox(G, vec3(.3*fract(n2*11.)))-.01;\n        \n        grnd = mix(grnd, boxes, S(-.1, .1, sin(iTime*.2)));\n        return grnd/s2; \n    }\n    return MAX_DIST;\n}\n\nfloat GetDist(vec3 p) {\n    p = Transform(p);\n    \n    float d = p.y;\n    float ang = atan(p.x, p.z);\n    vec3 P = vec3((ang/6.2832+.5)*6., p.y, length(p.xz) );\n    \n    float scale = max(.05,P.z);\n      \n    P.y /= scale;\n    \n    P.z = log(P.z);\n    P.z -= (iTime*.2);\n    vec2 id = floor(P.xz);\n    \n    vec3 G = P;\n    \n    P.xz = fract(P.xz)-.5;\n    \n    P.y*=1.+P.z;\n    \n    float y;\n    //y = WaveletNoise(G.xz, 1.,1.);\n        //y = sin(G.z*2.+iTime*0.5+ang)*.5;//sin(ang*2.)+sin(ang*7.)*.3;\n        y*= .1;\n    d += y;\n    \n    if(P.y<.25) {\n        \n        G.y+=y;\n        \n        for(float i=0.; i<1.; i+=1./4.) {\n            d = min(d, Ground(G, mix(10., 40., i)));\n            G.xz *= Rot(2.);\n        }\n    }\n    P.y+=y;\n    \n    float n = N21(id);\n    \n    float age = clamp((length(p.xz)-length(P.xz))*fract(n*10.)+n, 0.,1.);\n    \n    float shroom = Mushroom(P*2., .5+n, (fract(n*10.)*2.-1.), age)/2.;\n    float cell = -sdBox(P,vec3(1,100,1)*.55);\n    d = smin(d, shroom,.1);\n    d = min(d, cell);\n    \n   \n    return d*scale;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    float a = sin(iTime*.1)*.5;\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(sin(a),cos(a),0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n\n    vec3 ro = vec3(0, 3, -3)*.5;\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831+iTime*.1);\n    \n    ro.y = max(ro.y,.1);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), .5);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        vec3 L = -normalize(p-vec3(0.2,1.75+sin(iTime*.0)*.0,0));\n        L = normalize(vec3(1,2,3));\n        \n        float dif = dot(n, L)*.5+.5;\n        col = vec3(dif);\n        \n        float dShad = RayMarch(p+n*SURF_DIST*3., L);\n        \n        float shadow = mix(.01, 1., S(1., 20., dShad));\n        \n        col *= shadow;\n        float depth = exp(.1-d*.5);\n        \n        col *= depth;\n        \n        vec3 tint = sin(vec3(1., .25,.01)*100.+iTime*.1)*.5+.5;\n        tint = vec3(1., .25,.01);\n        col += tint*max(-.5, -n.y)*depth;\n        //*(sin(iTime*.1)*.5+.5);\n        \n        \n        float spec = pow(max(0., dot(r, L)),50.);\n        col += spec*S(.1,.0,p.y)*shadow;//*shadow;\n        \n        \n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    col = vec3(col/(col+1.))*2.;\n   // col = vec3(S(0.,1.,col.r));\n    uv = fragCoord.xy/iResolution.xy;\n    uv = abs(uv-.5);\n    col *= S(.6, .3, uv.x)*S(.6, .3, uv.y);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592\n#define TWOPI 6.283184\n\n#define MAX_STEPS 200\n#define MAX_DIST 50.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nfloat sabs(float x, float k) {\n    return sqrt(x*x+k);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdGyroid(vec3 p, float scale, float bias, float thickness) {\n    p *= scale;\n    float d = abs(dot(sin(p), cos(p.yzx))+bias)-thickness;\n\treturn d/scale;\n}\n\n// From http://mercury.sexy/hg_sdf\nvec2 pModPolar(inout vec2 p, float repetitions, float fix) {\n\tfloat angle = 6.2832/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - (angle/2.)*fix;\n\tp = vec2(cos(a), sin(a))*r;\n\n\treturn p;\n}\n\nfloat N21(vec2 p) {\n    p = fract(p*vec2(345.45,2345.3));\n    p += dot(p, p+123.345);\n\treturn fract(p.x*p.y);\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat WaveletNoise(vec2 p, float z, float k) {\n    // https://www.shadertoy.com/view/wsBfzK\n    float d=0.,s=1.,m=0., a;\n    for(float i=0.; i<4.; i++) {\n        vec2 q = p*s, g=fract(floor(q)*vec2(123.34,233.53));\n    \tg += dot(g, g+23.234);\n\t\ta = fract(g.x*g.y)*1e3;// +z*(mod(g.x+g.y, 2.)-1.); // add vorticity\n        q = (fract(q)-.5)*mat2(cos(a),-sin(a),sin(a),cos(a));\n        d += sin(q.x*10.+z)*smoothstep(.25, .0, dot(q,q))/s;\n        p = p*mat2(.54,-.84, .84, .54)+i;\n        m += 1./s;\n        s *= k; \n    }\n    return d/m;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec2 BendUv(vec2 p, float start, float end, float a) {\n    // p = coord to bend\n    // start = where the bend starts\n    // end = where the bend ends\n    // a = angle of the bend\n    \n    float dir = end-start >= 0.?1.:-1.;\n  \n    p.x *= dir; \n    start*=dir;\n    end*=dir;\n    \n    p.x -= start;\n    \n    vec2 \n        n = vec2(cos(a), -sin(a)),\n        n2 = vec2(cos(a/2.), -sin(a/2.));\n    \n    float \n        sg = sign(a),\n        len = end-start,\n        r = len/a;\n    \n    float side = dot(p+vec2(0,r), n2);\n    if(!((side<0. && p.x<0.) || abs(a)<1e-3)) {    \n        p.y += r;\n        vec2 st = vec2(atan(p.x, sg*p.y), length(p));\n\n        if(dot(p, n)<0.&& st.x<abs(a)) { // bend that shit!\n            st *= sg;\n            p = vec2(st.x*r, st.y-r);\n        } else { // straight rotated\n            p *= mat2(n.x, n.y, -n.y, n.x);\n            p.x += len;\n            p.y-=r;\n        }\n    }\n    \n    return vec2(dir*(p.x+start), p.y);\n}\n\nfloat SpiralDist(float a, float w) {\n    // definite integral from 0 to <a> radians\n    // <w> = the width of the spiral arm\n    return 0.5*(a*sqrt(a*a+w) + w*log(sqrt(a*a+w)+a));\n}\n\nvec2 SpiralUv(vec2 p, float start, float r, float width) {\n    \n    if(abs(r)<1e-3) r = 1e-3; // prevent straightline errors\n    \n    p.x -= start;\n    \n    float radius = abs(r);\n    width = min(width, radius);\n    \n    float s = sign(r);\n    float w = width*.5;\n    \n    p.y -= r;\n    vec2 st = vec2(atan(-p.x, -p.y*-s)+PI, length(p));\n    float x = st.x/TWOPI;\n    \n    st.y += width*x; // shift concentric rings into spiral\n    \n    float \n        maxTurns = radius/width,   // total turns from center to straight part\n        turns = min(maxTurns, st.y/width); // turns from pixel to straight part\n    \n    st.y -= radius;\n    \n    // return original p if..\n    // closer to the straight line than the spiral\n    // to the left of the spiral    \n    if(p.y*s+radius < st.y  && p.x<=0.) \n        return vec2(p.x+start, p.y+r); \n    \n    float \n        a = round(turns-maxTurns)-x+maxTurns,\n        len = SpiralDist(a, width),   // distance of current pixel\n        mLen = SpiralDist(maxTurns, width); // maximum distance\n      \n    st.x = start+(mLen-len)*TWOPI*width;\n    \n    if(st.y<w) // only repeat within outer radius\n        st.y = mod(st.y+w, width)-w;\n    \n    st.y *= -s;\n    return st;\n}\n\nvec2 ArcUvSimple(vec2 p, float r) {\n    vec2 c = vec2(p.x, p.y-r);\n    float s = -sign(r);\n    r = abs(r);  \n    return vec2(atan(c.x, c.y*s)*r, (length(c)-r)*s);\n}\n\n\nfloat Noise(vec2 p) {\n    float s=1., m=0.;\n    for(int i=0; i<20; i++) {\n        s *= 1.19;\n        vec2 P = p*s*Rot(s*123.);\n        m += (dot(sin(P+s*s*10.),vec2(1)))/s;\n    }\n    return m;\n}","name":"Common","description":"","type":"common"}]}