{"ver":"0.1","info":{"id":"MXSfRw","date":"1729279638","viewed":57,"name":"Total variation denoising","username":"luckyballa","description":"inspired by\nhttps://en.wikipedia.org/wiki/Total_variation_denoising","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["tv","diffusion","denoising","variation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 orig = texture(iChannel1, uv).xyz;\n    vec2 m = iMouse.xy / iResolution.xy;\n    if(m.x <= 0.0 &&  m.y <= 0.0) m.x = .5;\n    \n    vec3 curr = texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4( m.x > uv.x ? orig : curr, 1.0);  \n    fragColor += step(abs(m.x - uv.x), 0.001);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define uLambda 0.1\n#define uStepSize iTimeDelta * 0.5\n\n#define strengthLuma 0.5\n#define strengthChroma 2.0\n\nvec3 rgb2yuv(vec3 rgb) {\n    float y = dot(rgb, vec3(0.299, 0.587, 0.114));\n    float u = dot(rgb, vec3(-0.14713, -0.28886, 0.436));\n    float v = dot(rgb, vec3(0.615, -0.51499, -0.10001));\n    return vec3(y, u, v);\n}\n\nvec3 yuv2rgb(vec3 yuv) {\n    float y = yuv.x;\n    float u = yuv.y;\n    float v = yuv.z;\n    float r = y + 1.13983 * v;\n    float g = y - 0.39465 * u - 0.58060 * v;\n    float b = y + 2.03211 * u;\n    return vec3(r, g, b);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n        \n    vec3 fRgb = texture(iChannel0, uv).rgb;\n    vec3 uRgb = iFrame <= 1 ? fRgb : texture(iChannel1, uv).rgb;\n\n    if (iFrame <= 1) { \n        fragColor = vec4(fRgb, 1.0); \n        return; \n    }\n\n    vec3 f = rgb2yuv(fRgb);\n    vec3 u = rgb2yuv(uRgb);\n\n    vec3 uRight = rgb2yuv(texture(iChannel1, uv + vec2(pixelSize.x, 0.0)).rgb);\n    vec3 uLeft  = rgb2yuv(texture(iChannel1, uv - vec2(pixelSize.x, 0.0)).rgb);\n    vec3 uDown  = rgb2yuv(texture(iChannel1, uv + vec2(0.0, pixelSize.y)).rgb);\n    vec3 uUp    = rgb2yuv(texture(iChannel1, uv - vec2(0.0, pixelSize.y)).rgb);\n\n    vec3 ux = (uRight - u) / pixelSize.x;\n    vec3 uxBack = (u - uLeft) / pixelSize.x;\n    vec3 uy = (uDown - u) / pixelSize.y;\n    vec3 uyBack = (u - uUp) / pixelSize.y;\n\n    float eps = 1e-6;\n\n    vec3 uxNorm = ux / (length(ux) + eps);\n    vec3 uxBackNorm = uxBack / (length(uxBack) + eps);\n    vec3 uyNorm = uy / (length(uy) + eps);\n    vec3 uyBackNorm = uyBack / (length(uyBack) + eps);\n\n    vec3 divTerm = (uxNorm - uxBackNorm) + (uyNorm - uyBackNorm);\n\n    float stepSizeLuma = uStepSize / (strengthLuma + 1.0);\n    float stepSizeChroma = uStepSize / (strengthChroma + 1.0);\n    vec3 stepSize = vec3(stepSizeLuma, stepSizeChroma, stepSizeChroma);\n\n    vec3 lambda = uLambda * vec3(strengthLuma, strengthChroma, strengthChroma);\n\n    vec3 update = u + stepSize * (lambda * divTerm - (u - f));\n    vec3 updateRgb = yuv2rgb(update);\n\n    fragColor = vec4(clamp(updateRgb, 0.0, 1.0), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Adding noise \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 position = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 originalTexture = texture(iChannel0, uv).rgb;\n    float noiseAmplitude = 0.15;\n    \n    vec3 f = originalTexture + noiseAmplitude * (texture(iChannel2, position).rgb - 0.5);\n    \n    fragColor = vec4(f, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}