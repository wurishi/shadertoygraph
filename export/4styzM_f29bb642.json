{"ver":"0.1","info":{"id":"4styzM","date":"1518228577","viewed":332,"name":"House in a Box","username":"lsx","description":"Based on https://www.shadertoy.com/view/Xds3zN","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Adapted from https://www.shadertoy.com/view/Xds3zN\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n    \n\n// A list of useful distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\n\n#define AA 1   // make this 1 is your machine is too slow\n#define PI 3.141592654\n#define repeat(v,c) (mod(v,c)-c/2.)\nfloat amod (inout vec2 p, float count) { \n    float an = 2. * PI /count; \n    float a = atan(p.y,p.x)+an/2.; \n    float c = floor(a/an); \n    c = mix(c,abs(c),step(count*.5,abs(c))); \n    a = mod(a,an)-an/2.; \n    p.xy = vec2(cos(a),sin(a))*length(p); \n    return c; \n}\n//------------------------------------------------------------------\n// __ Matrix functions __ _____________________________________\n\n// Return 2x2 rotation matrix\n// With vector swizzle/mask can use as a 3x3 xform\n// For y, you need to invert \n// angle in radians\n// ========================================\nmat2 Rot2(float a ) {\n    float c = cos( a );\n    float s = sin( a );\n    return mat2( c, -s, s, c );\n}\n\n// http://www.songho.ca/opengl/gl_anglestoaxes.html\n\n// Return 4x4 rotation X matrix\n// angle in radians\n// ========================================\nmat4 Rot4X(float a ) {\n    float c = cos( a );\n    float s = sin( a );\n    return mat4( 1, 0, 0, 0,\n                    0, c,-s, 0,\n                    0, s, c, 0,\n                    0, 0, 0, 1 );\n}\n\n// Return 4x4 rotation Y matrix\n// angle in radians\n// ========================================\nmat4 Rot4Y(float a ) {\n    float c = cos( a );\n    float s = sin( a );\n    return mat4( c, 0, s, 0,\n                    0, 1, 0, 0,\n                -s, 0, c, 0,\n                    0, 0, 0, 1 );\n}\n\n// Return 4x4 rotation Z matrix\n// angle in radians\n// ========================================\nmat4 Rot4Z(float a ) {\n    float c = cos( a );\n    float s = sin( a );\n    return mat4(\n        c,-s, 0, 0,\n        s, c, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n        );\n}\n\n// Translate is simply: p - d\n// opTx will do transpose(m)\n// p' = m*p\n//    = [m0 m1 m2 m3 ][ p.x ]\n//      [m4 m5 m6 m7 ][ p.y ]\n//      [m8 m9 mA mB ][ p.z ]\n//      [mC mD mE mF ][ 1.0 ]\n// ========================================\nmat4 Loc4( vec3 p ) {\n    p *= -1.;\n    return mat4(\n        1,  0,  0,  p.x,\n        0,  1,  0,  p.y,\n        0,  0,  1,  p.z,\n        0,  0,  0,  1\n    );\n}\n\n\n// if no support for GLSL 1.2+\n//     #version 120\n// ========================================\nmat4 transposeM4(in mat4 m ) {\n    vec4 r0 = m[0];\n    vec4 r1 = m[1];\n    vec4 r2 = m[2];\n    vec4 r3 = m[3];\n\n    mat4 t = mat4(\n            vec4( r0.x, r1.x, r2.x, r3.x ),\n            vec4( r0.y, r1.y, r2.y, r3.y ),\n            vec4( r0.z, r1.z, r2.z, r3.z ),\n            vec4( r0.w, r1.w, r2.w, r3.w )\n    );\n    return t;\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdEquilateralTriangle(  in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n#if 1\n    // distance bound\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n#else\n    // correct distance\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;\n#endif\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    float d1 = -p.y - h;\n    float q = p.y - h;\n    float si = 0.5*(r1-r2)/h;\n    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdPryamid4(vec3 p, vec3 h ) // h = { cos a, sin a, height }\n{\n    // Tetrahedron = Octahedron - Cube\n    float box = sdBox( p - vec3(0,-2.0*h.z,0), vec3(2.0*h.z) );\n \n    float d = 0.0;\n    d = max( d, abs( dot(p, vec3( -h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y, h.x )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y,-h.x )) ));\n    float octa = d - h.z;\n    return max(-box,octa); // Subtraction\n }\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length2(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length8(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n    return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//------------------------------------------------------------------\n\nvec2 opS( vec2 d1, vec2 d2 )\n{\n    return (-d1.x>d2.x) ? vec2(-d1.x, d1.y): d2;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTx( vec3 p, mat4 m ) {   // BUG in iq's docs, should be q\n    return (transposeM4(m)*vec4(p,1.0)).xyz;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n//------------------------------------------------------------------\n//http://mercury.sexy/hg_sdf/\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\nfloat fOpTongue(float a, float b, float ra, float rb) {\n\treturn min(a, max(a - ra, abs(b) - rb));\n}\n\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\nvec2 map( in vec3 pos )\n{  \n    //ground\n    vec2 res =  vec2( sdPlane(     pos + vec3(0., 1, 0.)), 3.0 );\n\t//                 vec2( sdSphere(    pos-vec3( 0.0,0.25, 0.0), 0.25 ), 46.9 ) );\n\n    //back\n    vec3 size;\n    vec3 translate;\n    vec3 newpos;\n    float angle = -PI/2.0; // 90 degrees\n    newpos = opTx( pos + vec3(0., 0., 2.0), Rot4X( angle ) );\n    res = opU( res, vec2( sdPlane(newpos), 3.));\n\n    //right\n    newpos = pos;\n    angle = -PI/2.0; // 90 degrees\n    newpos = opTx( pos + vec3(-2.0, 0., 0.0), Rot4Z( angle ) );\n    res = opU( res, vec2( sdPlane(newpos), 3.));\n\n    //left\n    newpos = pos;\n    angle = PI/2.0; // 90 degrees\n    newpos = opTx( pos + vec3(2.0, 0., 0.0), Rot4Z( angle ) );\n    res = opU( res, vec2( sdPlane(newpos), 3.));\n\n    //round box\n    newpos = pos;\n    //newpos.y -= 5.0;\n    newpos.y -= 4. * abs(-sin(iTime/2.0));\n    //newpos.y -= min(5.0, iTime);\n    vec2 roundboxout = vec2( udRoundBox(       newpos+vec3( 0.0,0.0, 0.0), vec3(1.0) , 0.0), 41.0 );\n    vec2 roundboxin = vec2( sdBox(       newpos+vec3( 0.0,0.2, 0.0), vec3(0.9, 0.9, 0.9)), 41.0 );\n    vec2 roundbox = opS(roundboxin, roundboxout);\n    res = opU( res, roundbox);\n\n    //middle stage\n    newpos = pos;\n    size = vec3(0.5, 0.35, 0.5);\n    translate = vec3(0.0, 1.0 - size.y, 0.0);\n    vec2 stage = vec2( sdBox(newpos+translate, size), 3.0 );\n\n    size = vec3(0.00, 0.1, 2.0);\n    translate = vec3(0.0, size.y - 1., 0.0);\n    vec2 door = vec2( udRoundBox(newpos-translate, size , 0.1), 3.0 );\n    stage = opS( door, stage);\n    res = opU( res, stage);\n\n    newpos = pos;\n    float shrink = 0.5;\n    // size = vec3(0.3, 0.5, 0.45);\n    // translate = vec3(0.0, -0.2, 0.0);\n    size = vec3(0.25, 0.5, 0.45);\n    translate = vec3(0.0, -0.2, 0.0);\n    vec2 stagetopout = vec2( sdBox(newpos+translate, size), 3.0 );\n    // size = vec3(0.4, 0.8, 0.5);\n    // translate = vec3(0.0, -0.6, -0.1);\n    size = vec3(0.2, 0.3, 0.4);\n    translate = vec3(0.0, -0.2,-0.2);  \n    // size = vec3(0.25, 0.5, 0.5);\n    // translate = vec3(0.0, -0.375,-0.3);     \n    vec2 stagetopin = vec2( sdBox(newpos+translate, size), 3.0 );\n    vec2 stagetop = opS(stagetopin, stagetopout);\n\n    angle = PI/2.0; // 90 degrees\n    newpos = opTx( pos - vec3(0.0, 1.0, 0.0), Rot4X( angle ) );\n\tvec2 prism = vec2( sdHexPrism( newpos, vec2(0.08,0.3) ),17.0  );\n\n    vec2 toppryam = vec2( sdCapsule(   pos - vec3(0.0, 1.15, 0.0),vec3(0.0,0.01,0.0), vec3(0.0,0.0,0.0), 0.1  ), 31.9 ) ;\n\n    float prismandtop = fOpUnionStairs(prism.x, toppryam.x, 0.075, 3.0);\n    float prismandstage = fOpUnionStairs(stagetop.x, prismandtop, 0.1, 3.0);\n    \n    size = vec3(0.3, 0.5, 0.02);\n    translate = vec3(0.0, 0.0,-0.52);    \n    vec2 stagewide = vec2( sdBox(newpos-translate, size), 3.0 );\n    \n    float stageandwide = fOpTongue(prismandstage, stagewide.x, 0.02, 0.01);\n    \n    size = vec3(0.3, 0.5, 0.02);\n    translate = vec3(0.0, 0.0,0.4);    \n    vec2 stagewidetop = vec2( sdBox(newpos+translate, size), 3.0 );\n    \n    float stageandwidetop = fOpUnionRound(stageandwide, stagewidetop.x, 0.05);\n\n    size = vec3(0.3, 0.5, 0.02);\n    translate = vec3(0.0, 0.0,1.16);    \n    vec2 stagewide2 = vec2( sdBox(newpos+translate, size), 3.0 );\n    \n    float stageandwide2 = fOpTongue(stageandwidetop, stagewide2.x, 0.02, 0.01);\n\n    res = opU( res, vec2(stageandwide2, 3.0));\n\n    newpos = pos;\n    vec2 smallbox = vec2( udRoundBox(newpos+vec3( 0.0,0.0, 0.0), vec3(0.1) , 0.0), 41.0 );\n    res = opU( res, smallbox);\n    \n    //house base\n    newpos = pos;\n    size = vec3(0.7, 0.6, 0.4);\n    translate = vec3(0.0, 1.0 - size.y, 0.0);\n    vec2 housebase = vec2( sdBox(newpos+translate, size), 3.0 );\n    //left\n    newpos = pos;\n    angle = PI * (3.1/4.0); // 90 degrees\n    newpos = opTx( pos - vec3(-0.6, -0.1, 0.0), Rot4Z( angle ) );\n    housebase = opS( vec2( sdPlane(newpos), 3.), housebase);\n    //right\n    newpos = pos;\n    angle = -PI * (3.1/4.0); // 90 degrees\n    newpos = opTx( pos - vec3(0.6, -0.1, 0.0), Rot4Z( angle ) );\n    housebase = opS( vec2( sdPlane(newpos), 3.), housebase);\n    housebase = opS( stagetopin, housebase);\n\n    //add leftroof\n    newpos = pos;\n    size = vec3(0.75, 0.62, 0.45);\n    translate = vec3(0.0, 1.0 - size.y, 0.0);\n    vec2 leftroof = vec2( sdBox(newpos+translate, size), 3.0 );\n    //left top\n    newpos = pos;\n    angle = PI * (3.1/4.0); // 90 degrees\n    newpos = opTx( pos - vec3(-0.82, -0.23, 0.0), Rot4Z( angle ) );\n    leftroof = opS( vec2( sdPlane(newpos), 3.), leftroof);\n    //left down\n    newpos = pos;\n    angle = PI * (3.1/4.0) + PI; // 90 degrees\n    newpos = opTx( pos - vec3(-0.8, -0.25, 0.0), Rot4Z( angle ) );\n    leftroof = opS( vec2( sdPlane(newpos), 3.), leftroof);\n    float housebaseandleftroof = fOpUnionStairs(leftroof.x, housebase.x, 0.05, 2.0);\n\n    //add rightroof\n    newpos = pos;\n    size = vec3(0.75, 0.62, 0.45);\n    translate = vec3(0.0, 1.0 - size.y, 0.0);\n    vec2 rightroof = vec2( sdBox(newpos+translate, size), 3.0 );\n    //left top\n    newpos = pos;\n    angle = -PI * (3.1/4.0); // 90 degrees\n    newpos = opTx( pos - vec3(0.82, -0.23, 0.0), Rot4Z( angle ) );\n    rightroof = opS( vec2( sdPlane(newpos), 3.), rightroof);\n    //left down\n    newpos = pos;\n    angle = -(PI * (3.1/4.0) + PI); // 90 degrees\n    newpos = opTx( pos - vec3(0.8, -0.25, 0.0), Rot4Z( angle ) );\n    rightroof = opS( vec2( sdPlane(newpos), 3.), rightroof);\n    float housebaseandroof = fOpUnionStairs(rightroof.x, housebaseandleftroof, 0.05, 2.0);\n\n    res = opU( res, vec2(housebaseandroof, 3.0));\n\n    res = opU( res, vec2( sdPryamid4(  pos-vec3(0.0,-0.5,0.45), vec3(0.8,0.7,0.2) ),3.0 ) );\n\n    angle = PI/2.0; // 90 degrees\n    newpos = opTx( pos - vec3(-0.18, -0.8, 0.65), Rot4X( angle ) );\n\tvec2 frontleftprism = vec2( sdHexPrism( newpos, vec2(0.02,0.3) ),3.0  );\n\n    res = opU( res, frontleftprism );\n\n    angle = PI/2.0; // 90 degrees\n    newpos = opTx( pos - vec3(0.18, -0.8, 0.65), Rot4X( angle ) );\n\tvec2 frontrightprism = vec2( sdHexPrism( newpos, vec2(0.02,0.3) ),3.0  );\n\n    res = opU( res, frontrightprism );\n        \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.0;\n    float tmax = 50.0;\n   \n#if 0\n    // bounding volume\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n    /*\n\tvec3 eps = vec3( 0.0005, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n\t*/\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    //float sca = 1.0;\n    float sca = (sin(iTime - PI / 2.0)/2.0+0.5);\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    float anime = (sin(iTime - PI / 2.0)/2.0+0.5);\n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = checkersGradBox( 5.0*pos.xz );\n            col = 0.3 + f*vec3(0.1);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n         lin +=  0.5 * occ;\n         lin += 1.30*dif*vec3(1.00,0.80,0.55) * anime;\n         lin += 1.00*amb*vec3(0.40,0.60,1.00)*occ;\n         lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ * anime;\n         lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ * anime;\n         lin += 0.25*fre*vec3(1.00,1.00,1.00) * anime;\n\t\t col = col*lin;\n\t\t col += 10.00*spe*vec3(1.00,0.90,0.70) * anime;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nmat3 setCamera2( in vec3 from, in vec3 to, in vec3 tmp )\n{\n    vec3 forward = normalize(from - to); \n    vec3 right = cross(normalize(tmp), forward); \n    vec3 up = cross(forward, right); \n    return mat3( right, up, forward );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t// TODO: make a Raymarcher!\n    //vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(gl_FragCoord.xy+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*gl_FragCoord.xy)/iResolution.y;\n#endif\n\n\t\t// camera\t\n        float far = 8.2;\n        float near = 5.0;\n        float far2 = 0.62;\n        float near2 = 0.5;\n\n        float roz = near - (near - near2) * (sin(mod(iTime/2.0, PI) - PI / 2.0)/2.0+0.5);\n        vec3 ro = vec3( 0.0, 0.0, roz );\n        vec3 ta = vec3( 0.0, 0.0, 0.0 );\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n        tot += col;\n\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}