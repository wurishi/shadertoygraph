{"ver":"0.1","info":{"id":"dd3GD4","date":"1677754375","viewed":54,"name":"TP 1 Primitives","username":"ByWizKi","description":"Primitives Shaders","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["enzomarc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n\n\n// Plan\n// n : normale\n// q : point du plan\nfloat Plan(vec3 p, vec3 q, vec3 n)\n{\n    return dot((p-q), normalize (n));\n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n\nfloat Intersection(float a, float b){\nreturn max(a,b);\n}\n\n\n//boite cubique\n//d : demi longueur des cotés de la boite\nfloat boite(vec3 p, vec3 c, float d){\n    float r1 = Plan(p,c+vec3(0.,0.,d),vec3(0.,0.,1.));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,0.,-d),vec3(0.,0.,-1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,d,0.),vec3(0.,1.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,-d,0.),vec3(0.,-1.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(d,0.,0.),vec3(1.,0.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(-d,0.,0.),vec3(-1.,0.,0.)));\n    return r1;\n\n}\n\n\n//boite avec des longeur diferente en z et x,y\nfloat boite_bis(vec3 p, vec3 c, float d, float e){\n    float r1 = Plan(p,c+vec3(0.,0.,d),vec3(0.,0.,1.));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,0.,-d),vec3(0.,0.,-1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,e,0.),vec3(0.,1.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,-e,0.),vec3(0.,-1.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(e,0.,0.),vec3(1.,0.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(-e,0.,0.),vec3(-1.,0.,0.)));\n    return r1;\n\n}\n\n\nfloat boite_incline_d(vec3 p, vec3 c, float d, float e){\n    float r1 = Plan(p,c+vec3(0.,-d,d),vec3(0.,-1.,1.));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,d,-d),vec3(0.,1.,-1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,e,e),vec3(0.,1.,1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,-e,-e),vec3(0.,-1.,-1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(e,0.,0.),vec3(1.,0.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(-e,0.,0.),vec3(-1.,0.,0.)));\n    return r1;\n}\n\nfloat boite_incline_g(vec3 p, vec3 c, float d, float e){\n    float r1 = Plan(p,c+vec3(0.,d,d),vec3(0.,1.,1.));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,-d,-d),vec3(0.,-1.,-1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,e,-e),vec3(0.,1.,-1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,-e,e),vec3(0.,-1.,1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(e,0.,0.),vec3(1.,0.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(-e,0.,0.),vec3(-1.,0.,0.)));\n    return r1;\n}\n\n// Boite \n// p : point quelconque\n// c : milieu de la boite\n// d : demi-distance entre les faces opposees\n// e : demi-distance entres les faces sur l'axe z \nfloat boite_z(vec3 p, vec3 c, float d, float e){\n    float r1 = Plan(p,c+vec3(0.,0.,e),vec3(0.,0.,1.));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,0.,-d),vec3(0.,0.,-1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,d,0.),vec3(0.,1.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,-d,0.),vec3(0.,-1.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(d,0.,0.),vec3(1.,0.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(-d,0.,0.),vec3(-1.,0.,0.)));\n    return r1;\n}\n\n//cylindre infinie orienté en z\nfloat cylindre_inf (vec3 p, vec3 c, float r){\n    float n=length(p.xy-c.xy)-r;\n    return n;\n}\n\n\n\n//difference entre 2 forme/objet\nfloat difference(float a, float b){\n    return max(a,-b);\n}\n\n\n\n//cylindre orienté en z\n// p : point quelconque\n// c : centre du cylindre\n// d : demi-hauteur du cylindre\n// r : rayon du cylindre\nfloat cylindre_z(vec3 p, vec3 c, float r, float d){\n    float n=length(p.xy-c.xy)-r;\n    n=difference(n,Plan(p,c+vec3(0.,0.,-d),vec3(0.,0.,1.)));\n    n=difference(n,Plan(p,c+vec3(0.,0.,d),vec3(0.,0.,-1.)));\n    return n;\n}\n\n\n//cylindre orienté en y\nfloat cylindre_y(vec3 p, vec3 c, float r, float d){\n    float n=length(p.xz-c.xz)-r;\n    n=difference(n,Plan(p,c+vec3(0.,-d,0.),vec3(0.,1.,0.)));\n    n=difference(n,Plan(p,c+vec3(0.,d,0.),vec3(0.,-1.,0.)));\n    return n;\n}\n\n\n//cylindre orienté en x\nfloat cylindre_x(vec3 p, vec3 c, float r, float d){\n    float n=length(p.yz-c.yz)-r;\n    n=difference(n,Plan(p,c+vec3(-d,0.,0.),vec3(1.,0.,0.)));\n    n=difference(n,Plan(p,c+vec3(d,0.,0.),vec3(-1.,0.,0.)));\n    return n;\n}\n\n\n//capsules\n// p point quelconque\n// c centre du cylindre\n// d demi-hauteur du cylindre\n// r rayon du cylindre et des spheres\nfloat capsule_x(vec3 p, vec3 c, float r, float d){\n    float n=length(p.yz-c.yz)-r;\n   \n    n=difference(n,Plan(p,c+vec3(-d,0.,0.),vec3(1.,0.,0.)));\n    n=difference(n,Plan(p,c+vec3(d,0.,0.),vec3(-1.,0.,0.)));\n    n=Union(n,Sphere(p,(c+vec3(d,0.,0.)),r));\n    n=Union(n,Sphere(p,(c+vec3(-d,0.,0.)),r));\n    return n;\n}\n\n\n\n\nfloat capsule_y(vec3 p, vec3 c, float r, float d){\n    float n=length(p.xz-c.xz)-r;\n    n=difference(n,Plan(p,c+vec3(0.,-d,0.),vec3(0.,1.,0.)));\n    n=difference(n,Plan(p,c+vec3(0.,d,0.),vec3(0.,-1.,0.)));\n    n=Union(n,Sphere(p,(c+vec3(0.,d,0.)),r));\n    n=Union(n,Sphere(p,(c+vec3(0.,-d,0.)),r));\n    return n;\n}\n\n\nfloat capsule_z(vec3 p, vec3 c, float r, float d){\n    float n=length(p.xy-c.xy)-r;\n    n=difference(n,Plan(p,c+vec3(0.,0.,-d),vec3(0.,0.,1.)));\n    n=difference(n,Plan(p,c+vec3(0.,0.,d),vec3(0.,0.,-1.)));\n    n=Union(n,Sphere(p,(c+vec3(0.,0.,d)),r));\n    n=Union(n,Sphere(p,(c+vec3(0.,0.,-d)),r));\n    return n;\n}\n\n\n//Tore\n// p : point\n// r :\n// R : \n// c : centre du tore\n\nfloat Tore (vec3 p, float r, float R, vec3 c){\nvec3 u= (p-c);\nvec2 q = vec2(length (u.xz)-R, u.y) ;\nreturn length(q)-r;\n}\n\nfloat Tore_y (vec3 p, float r, float R, vec3 c){\n//cabane a oiseaux coupee en//cabane a oiseaux coupee en\nvec3 u= (p-c);\nvec2 q = vec2(length (u.yz)-R, u.x) ;\nreturn length(q)-r;\n}\n\nfloat cabane_oiseaux(vec3 p, vec3 centre){\n\n    float taille_maison = 3.; //taille de la base cubique sur laquelle s'appuie la maison \n    float hauteur_pignon = 6.; // hauteur de la cabane du socle \n    \n    float v = difference(boite_z(p,centre,taille_maison, hauteur_pignon),(boite(p,centre,taille_maison-0.1)));\n    v = difference(v,cylindre_x(p,centre+vec3(taille_maison-0.1,0.,0.),0.7,1.));\n    vec3 q = centre+vec3(taille_maison-0.1, 0., 3.6);\n    v = Union(v,boite_incline_g(p,centre+vec3(0,-1.5,4.7),0.2,5.));\n    v = Union(v,boite_incline_d(p,centre+vec3(0,1.5,4.7),0.2,5.));\n    v = difference(v,Plan(p, q, vec3(0.,1.,-1.)));\n    v = difference(v,Plan(p, q, vec3(0.,-1.,-1.)));\n    v = Union(v,cylindre_x(p,centre+vec3(taille_maison+1.1,0.,-1.4),0.3,1.2));\n    v = Union(v,capsule_x(p,centre+vec3(0.,taille_maison,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_x(p,centre+vec3(0.,-3.,-3.),0.3,taille_maison));\n    v = Union(v,capsule_x(p,centre+vec3(0.,taille_maison,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_y(p,centre+vec3(taille_maison,0.,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_y(p,centre+vec3(-(taille_maison),0.,-(taille_maison)),0.3,taille_maison));\n    v = Union(v, cylindre_z(p, centre+vec3(0.,0.,-(taille_maison)-15.),1.,15.));\n    v = Union(v, cylindre_z(p, centre+vec3(0.,0.,-3.-15.),1.,15.));\n    v = Union(v, Plan(p, centre+vec3(0,0,-3.-15.), vec3(0.,0.,1.)));\n    return v;\n\n}\n\n\n\n\n//centre = centre de la figure\nfloat cabane_oiseaux_moitierG(vec3 p, vec3 centre){\n    \n    float taille_maison = 3.; //taille de la base cubique sur laquelle s'appuie la maison \n    float hauteur_pignon = 6.; // hauteur de la cabane du socle \n    \n    float v = difference(boite_z(p,centre,taille_maison, hauteur_pignon),(boite(p,centre,taille_maison-0.1)));\n    v = difference(v,cylindre_x(p,centre+vec3(taille_maison-0.1,0.,0.),0.7,1.));\n    vec3 q = centre+vec3(taille_maison-0.1, 0., 3.6);\n    v = Union(v,boite_incline_g(p,centre+vec3(0,-1.5,4.7),0.2,5.));\n    v = Union(v,boite_incline_d(p,centre+vec3(0,1.5,4.7),0.2,5.));\n    v = difference(v,Plan(p, q, vec3(0.,1.,-1.)));\n    v = difference(v,Plan(p, q, vec3(0.,-1.,-1.)));\n    v = Union(v,cylindre_x(p,centre+vec3(taille_maison+1.1,0.,-1.4),0.3,1.2));\n    v = Union(v,capsule_x(p,centre+vec3(0.,taille_maison,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_x(p,centre+vec3(0.,-3.,-3.),0.3,taille_maison));\n    v = Union(v,capsule_x(p,centre+vec3(0.,taille_maison,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_y(p,centre+vec3(taille_maison,0.,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_y(p,centre+vec3(-(taille_maison),0.,-(taille_maison)),0.3,taille_maison));\n    v = Union(v, cylindre_z(p, centre+vec3(0.,0.,-(taille_maison)-15.),1.,15.));\n    v = difference(v, Plan(p, centre+vec3(0,0,0), vec3(0.,1.,0.)));\n    return v;\n\n}\n\n//centre = centre de la figure\nfloat cabane_oiseaux_moitierD(vec3 p, vec3 centre){\n    \n    float taille_maison = 3.; //taille de la base cubique sur laquelle s'appuie la maison \n    float hauteur_pignon = 6.; // hauteur de la cabane du socle \n    \n    float v = difference(boite_z(p,centre,taille_maison, hauteur_pignon),(boite(p,centre,taille_maison-0.1)));\n    v = difference(v,cylindre_x(p,centre+vec3(taille_maison-0.1,0.,0.),0.7,1.));\n    vec3 q = centre+vec3(taille_maison-0.1, 0., 3.6);\n    v = Union(v,boite_incline_g(p,centre+vec3(0,-1.5,4.7),0.2,5.));\n    v = Union(v,boite_incline_d(p,centre+vec3(0,1.5,4.7),0.2,5.));\n    v = difference(v,Plan(p, q, vec3(0.,1.,-1.)));\n    v = difference(v,Plan(p, q, vec3(0.,-1.,-1.)));\n    v = Union(v,cylindre_x(p,centre+vec3(taille_maison+1.1,0.,-1.4),0.3,1.2));\n    v = Union(v,capsule_x(p,centre+vec3(0.,taille_maison,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_x(p,centre+vec3(0.,-3.,-3.),0.3,taille_maison));\n    v = Union(v,capsule_x(p,centre+vec3(0.,taille_maison,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_y(p,centre+vec3(taille_maison,0.,-(taille_maison)),0.3,taille_maison));\n    v = Union(v,capsule_y(p,centre+vec3(-(taille_maison),0.,-(taille_maison)),0.3,taille_maison));\n    v = Union(v, cylindre_z(p, centre+vec3(0.,0.,-(taille_maison)-15.),1.,15.));\n    v = difference(v, Plan(p, centre, vec3(0.,-1.,0.)));\n    return v;\n\n}\n\n//cabane a oiseaux couper en deux \nfloat presentation(vec3 p, vec3 centre){\n\n    float v = Union(cabane_oiseaux_moitierD(p, centre+vec3(0.,5.,0.)),(cabane_oiseaux_moitierG(p, centre+vec3(0.,-5.,0.))));\n    return v;\n\n}\n\n\n\nfloat double_cube(vec3 p, float d, float r){\n\n// premiere boite avec la difference des cylindres\nfloat v = boite(p,vec3(0.,0.,0), d);\nv = difference(v, boite(p,vec3(0.,0.,0.), d-0.2));\nv = difference(v, cylindre_z(p,vec3(0.,0.,0.),r,d));\nv = difference(v, cylindre_y(p,vec3(0.,0.,0.),r,d));\nv = difference(v, cylindre_x(p,vec3(0.,0.,0.),r,d));\n\n// deuxieme boite avec la diffenrence des cylindres\n// centre de la boite est egale a un des sommets de la premiere boite\nfloat u =boite(p,vec3(d,d,d), d);\nu = difference(u, boite(p,vec3(d,d,d), d-0.2));\nu = difference(u, cylindre_z(p,vec3(d,d,d),r,d));\nu = difference(u, cylindre_y(p,vec3(d,d,d),r,d));\nu = difference(u, cylindre_x(p,vec3(d,d,d),r,d));\n\nv = Union(u,v);\nreturn v;\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n//objet cabane a oiseaux\nfloat v = cabane_oiseaux(p, vec3(2., 2., 2.));\n\n//objet presentation\n//float v = presentation(p,vec3(0.,0.,0.));\n\n// objet double cube\n//float v = double_cube(p, 3., 2.);\n  return v;\n \n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n \n  // Start at the origin\n  float t=0.;\n \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n \n  // Trace ray\n \n  // Hit and number of steps\n  bool hit;\n  int s;\n \n  float t=SphereTrace(ro,rd,100.,hit,s);\n \n  // Shade background\n  vec3 rgb=background(rd);\n \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n   \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n   \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}