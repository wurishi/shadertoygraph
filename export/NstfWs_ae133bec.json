{"ver":"0.1","info":{"id":"NstfWs","date":"1657640383","viewed":251,"name":"Uber noise","username":"challe535","description":"An attempt at implementing something like the Uber noise described by Sean Murray (https://youtu.be/C9RyEiEzMiU).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","perlin","gradient"],"hasliked":0,"parentid":"XdXGW8","parentname":"Noise - gradient - 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n\n// Gradient Noise (http://en.wikipedia.org/wiki/Gradient_noise), not to be confused with\n// Value Noise, and neither with Perlin's Noise (which is one form of Gradient Noise)\n// is probably the most convenient way to generate noise (a random smooth signal with \n// mostly all its energy in the low frequencies) suitable for procedural texturing/shading,\n// modeling and animation.\n//\n// It produces smoother and higher quality than Value Noise, but it's of course slighty more\n// expensive.\n//\n// The princpiple is to create a virtual grid/latice all over the plane, and assign one\n// random vector to every vertex in the grid. When querying/requesting a noise value at\n// an arbitrary point in the plane, the grid cell in which the query is performed is\n// determined, the four vertices of the grid are determined and their random vectors\n// fetched. Then, the position of the current point under  evaluation relative to each\n// vertex is doted (projected) with that vertex' random vector, and the result is\n// bilinearly interpolated with a smooth interpolant.\n\n\n// Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n// Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n// Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n// Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n// Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n// Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n// Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n// Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n// Wave     Noise 2D             : https://www.shadertoy.com/view/tldSRj\n\n\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n#if 0\n\n    // simple random vectors\n    return vec2(cos(float(n)),sin(float(n)));\n    \n#else\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                              gr;\n#endif                              \n}\n\nvec3 noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n    \n    vec2 ga = grad(i+ivec2(0,0));\n    vec2 gb = grad(i+ivec2(1,0));\n    vec2 gc = grad(i+ivec2(0,1));\n    vec2 gd = grad(i+ivec2(1,1));\n   \n    float va = dot(ga, f-vec2(0.0,0.0));\n    float vb = dot(gb, f-vec2(1.0,0.0));\n    float vc = dot(gc, f-vec2(0.0,1.0));\n    float vd = dot(gd, f-vec2(1.0,1.0));\n\n    return vec3(va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd), //value\n                ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) +  // derivatives\n                du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va)\n    );\n    \n}\n\nvec3 fbm(in vec2 p, in int oct) {\n    float sum = 0.0, amp_sum = 0.0, amp = 1.0;\n    vec2 dsum = vec2(0,0);\n    mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\n\n    for(int i = 0; i < oct; i++) {\n        vec3 n = noise(p);\n\n        dsum += n.yz * amp;\n        sum += n.x * amp;\n        \n        amp_sum += amp;\n        amp *= 0.5;\n        p = m*p;\n    }\n    \n    return vec3(sum, dsum) / amp_sum;\n}\n\nfloat get_max_slope(vec2 derivative) {\n    float max_slope_angle = atan(derivative.y/derivative.x);\n    return abs(derivative.x * cos(max_slope_angle) + derivative.y * sin(max_slope_angle));\n}\n\n//Sharpness should be a value between -1.0 (sharp) and 1.0 (smooth)\n//  Determines how ridged vs regular vs billowy the noise is.\n//\n//Feature Amp should be a value between 0.0 and 1.0\n//  Modifies the noise amplitude.\n//Slope Erosion should be a value between 0.0 (no erosion) and 1.0 (eroded)\n//  Determines how much the noise is eroded on the slopes.\n//\n//Altitude Erosion should be a value between 0.0 (no erosion) and 1.0 (eroded)\n//  Determines how much the noise is eroded at low altitudes.\n//\n//Ridge Erosion should be a value between 0.0 (no erosion) and 1.0 (eroded)\n//  Determines how much the noise is eroded due to sharpness.\nvec3 uber_noise(\n    vec2 p, \n    int oct, \n    float sharpness,\n    float feature_amp,\n    float slope_erosion,\n    float altitude_erosion,\n    float ridge_erosion,\n    float lacunarity,\n    float gain\n    ) {\n    float sum = 0.0, amp_sum = 0.0, amp = 1.0, damped_amp = 1.0;\n    vec2 slope_dsum = vec2(0,0), ridge_dsum = vec2(0,0);\n    mat2 m = mat2(cos(0.5), -sin(0.5), sin(0.5), cos(0.5)) * lacunarity;\n    \n    for(int i = 0; i < oct; i++) {\n        vec3 n = noise(p);\n        \n        //Sharpness\n        float feature = n.x;\n        \n        float ridged = 1.0 - abs(n.x);\n        float billow = n.x * n.x;\n        \n        feature = mix(feature, billow, max(0.0, sharpness));\n        feature = mix(feature, ridged, abs(min(0.0, sharpness)));\n        \n        feature *= feature_amp;\n        \n        ridge_dsum += -abs(n.yz) * amp * abs(min(0.0, sharpness));\n        \n        //Slope erosion\n        slope_dsum += n.yz * damped_amp * slope_erosion;\n        sum += feature * damped_amp / (1.0 + get_max_slope(slope_dsum));\n        \n        //Amplitude & Ridge erosion\n        amp_sum += damped_amp;\n        amp *= mix(gain, gain * smoothstep(0.0, 1.0, 0.5 * sum + 0.5), altitude_erosion);\n        damped_amp = amp * (1.0 - (ridge_erosion / (1.0 + dot(ridge_dsum, ridge_dsum))));\n        \n        p = m*p;\n    }\n    \n    return vec3(sum, slope_dsum);\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.xy;\n\n    vec2 uv = p*vec2(iResolution.x/iResolution.y,1.0) + iTime * 0.25;\n    \n    mat2 m = mat2(cos(0.5), -sin(0.5), sin(0.5), cos(0.5));\n    \n    uv *= 10.0;\n    \n    float sharpness = noise(uv * 0.2 * 1.5).x; uv = m*uv;\n    float slope_erosion = 0.5 * noise(uv * 0.2).x + 0.5; uv = m*uv;\n    float alt_erosion =  0.5 * noise(uv.yx * 0.2).x + 0.5; uv = m*uv;\n    float ridge_erosion =  0.5 * noise(uv.yx * 0.4).x + 0.5; uv = m*uv;\n    float feature_amp = 0.5 * noise(uv.yx * 0.2 * 0.8).x + 0.5; uv = m*uv;\n    \n    float warp = min(pow(max(0.0, noise(uv * 0.2 * 0.2).x + 0.82), 20.0), 1.0); uv = m*uv;\n    //warp = iMouse.x / iResolution.x;\n    \n    vec2 uv_warp = uv;\n    \n    for(int i = 0; i < 2; i++) {\n        uv_warp += vec2(fbm(uv_warp + vec2(5.4, 7.3) * float(i+1), 2).x, \n                      fbm(uv_warp + vec2(8.2, 1.4) * float(1-i), 2).x);\n    }\n    \n    vec2 uv_in = mix(uv, uv_warp, warp);\n    \n    vec3 n = uber_noise(\n        uv_in,\n        8,\n        sharpness,\n        feature_amp,\n        slope_erosion,\n        alt_erosion,\n        ridge_erosion,\n        1.8,\n        0.6\n    ) * 0.5 + 0.5;\n    \n    float f = n.x;\n    \n    vec3 river = uber_noise(\n        uv_warp,\n        8,\n        0.0,\n        1.0,\n        0.0,\n        0.0,\n        0.0,\n        2.0,\n        0.5\n    ) * 0.5 + 0.5;\n    \n    f -= (1.0-river.x) * 0.1 / (1.0 + dot(n.yz, n.yz));\n   \n    //f = warp;\n    fragColor =  vec4(f, f, f, 1.0) ;\n}","name":"Image","description":"","type":"image"}]}