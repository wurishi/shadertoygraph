{"ver":"0.1","info":{"id":"flSBzw","date":"1651885508","viewed":216,"name":"CPC 464 CHR","username":"gigatron","description":"Cpc 464 symbols 33 to 255;  \ntag fonts; Power on screen , missing text ; and Locomotive Software Ltd . (compilation time is take time in slower machine);\nClick left mouse button to zoom the screen (iMouse.z);","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fonts","cpc464"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DOWN_SCALE 1.0\n\n#define MAX_INT_DIGITS 4\n\n#define CHAR_SIZE vec2(8, 12)\n#define CHAR_SPACING vec2(8, 12)\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\n#define NORMAL 0\n#define INVERT 1\n#define UNDERLINE 2\n\nint TEXT_MODE = NORMAL;\n\n/*\n--------\n-###----\n##-##---\n##-##---\n-###----\n#####-#-\n##-####-\n##--##--\n##-###--\n-###-##-\n--------\n--------\n\n00000000\n01110000\n11011000\n11011000\n01110000\n11111010\n11011110\n11001100\n11011100\n01110110\n00000000\n00000000\n\n//Broken up into 4 8x3 (24 bit) chunks for each component of the vec4.\n//Hexadecimal is being used to reduce clutter in the code but decimal still works.\n\n00000000\n01110000 -> 00000000 01110000 11011000 -> 0x0070D8\n11011000\n\n11011000\n01110000 -> 11011000 01110000 11111010 -> 0xD870FA\n11111010\n\n11011110\n11001100 -> 11011110 11001100 11011100 -> 0xDECCDC\n11011100\n\n01110110\n00000000 -> 01110110 00000000 00000000 -> 0x760000\n00000000\n\nvec4(0x0070D8,0xD870FA,0xDECCDC,0x760000)\n*/\n\n//Automatically generated from the 8x12 font sheet here:\n//http://www.massmind.org/techref/datafile/charset/extractor/charset_extractor.htm\n\nvec4 ch_spc = vec4(0x000000,0x000000,0x000000,0x000000);\nvec4 ch_exc = vec4(0x003078,0x787830,0x300030,0x300000);\nvec4 ch_quo = vec4(0x006666,0x662400,0x000000,0x000000);\nvec4 ch_hsh = vec4(0x006C6C,0xFE6C6C,0x6CFE6C,0x6C0000);\nvec4 ch_dol = vec4(0x30307C,0xC0C078,0x0C0CF8,0x303000);\nvec4 ch_pct = vec4(0x000000,0xC4CC18,0x3060CC,0x8C0000);\nvec4 ch_amp = vec4(0x0070D8,0xD870FA,0xDECCDC,0x760000);\nvec4 ch_apo = vec4(0x003030,0x306000,0x000000,0x000000);\nvec4 ch_lbr = vec4(0x000C18,0x306060,0x603018,0x0C0000);\nvec4 ch_rbr = vec4(0x006030,0x180C0C,0x0C1830,0x600000);\nvec4 ch_ast = vec4(0x000000,0x663CFF,0x3C6600,0x000000);\nvec4 ch_crs = vec4(0x000000,0x18187E,0x181800,0x000000);\nvec4 ch_com = vec4(0x000000,0x000000,0x000038,0x386000);\nvec4 ch_dsh = vec4(0x000000,0x0000FE,0x000000,0x000000);\nvec4 ch_per = vec4(0x000000,0x000000,0x000038,0x380000);\nvec4 ch_lsl = vec4(0x000002,0x060C18,0x3060C0,0x800000);\nvec4 ch_0 = vec4(0x007CC6,0xD6D6D6,0xD6D6C6,0x7C0000);\nvec4 ch_1 = vec4(0x001030,0xF03030,0x303030,0xFC0000);\nvec4 ch_2 = vec4(0x0078CC,0xCC0C18,0x3060CC,0xFC0000);\nvec4 ch_3 = vec4(0x0078CC,0x0C0C38,0x0C0CCC,0x780000);\nvec4 ch_4 = vec4(0x000C1C,0x3C6CCC,0xFE0C0C,0x1E0000);\nvec4 ch_5 = vec4(0x00FCC0,0xC0C0F8,0x0C0CCC,0x780000);\nvec4 ch_6 = vec4(0x003860,0xC0C0F8,0xCCCCCC,0x780000);\nvec4 ch_7 = vec4(0x00FEC6,0xC6060C,0x183030,0x300000);\nvec4 ch_8 = vec4(0x0078CC,0xCCEC78,0xDCCCCC,0x780000);\nvec4 ch_9 = vec4(0x0078CC,0xCCCC7C,0x181830,0x700000);\nvec4 ch_col = vec4(0x000000,0x383800,0x003838,0x000000);\nvec4 ch_scl = vec4(0x000000,0x383800,0x003838,0x183000);\nvec4 ch_les = vec4(0x000C18,0x3060C0,0x603018,0x0C0000);\nvec4 ch_equ = vec4(0x000000,0x007E00,0x7E0000,0x000000);\nvec4 ch_grt = vec4(0x006030,0x180C06,0x0C1830,0x600000);\nvec4 ch_que = vec4(0x0078CC,0x0C1830,0x300030,0x300000);\nvec4 ch_ats = vec4(0x007CC6,0xC6DEDE,0xDEC0C0,0x7C0000);\nvec4 ch_A = vec4(0x003078,0xCCCCCC,0xFCCCCC,0xCC0000);\nvec4 ch_B = vec4(0x00FC66,0x66667C,0x666666,0xFC0000);\nvec4 ch_C = vec4(0x003C66,0xC6C0C0,0xC0C666,0x3C0000);\nvec4 ch_D = vec4(0x00F86C,0x666666,0x66666C,0xF80000);\nvec4 ch_E = vec4(0x00FE62,0x60647C,0x646062,0xFE0000);\nvec4 ch_F = vec4(0x00FE66,0x62647C,0x646060,0xF00000);\nvec4 ch_G = vec4(0x003C66,0xC6C0C0,0xCEC666,0x3E0000);\nvec4 ch_H = vec4(0x00CCCC,0xCCCCFC,0xCCCCCC,0xCC0000);\nvec4 ch_I = vec4(0x007830,0x303030,0x303030,0x780000);\nvec4 ch_J = vec4(0x001E0C,0x0C0C0C,0xCCCCCC,0x780000);\nvec4 ch_K = vec4(0x00E666,0x6C6C78,0x6C6C66,0xE60000);\nvec4 ch_L = vec4(0x00F060,0x606060,0x626666,0xFE0000);\nvec4 ch_M = vec4(0x00C6EE,0xFEFED6,0xC6C6C6,0xC60000);\nvec4 ch_N = vec4(0x00C6C6,0xE6F6FE,0xDECEC6,0xC60000);\nvec4 ch_O = vec4(0x00386C,0xC6C6C6,0xC6C66C,0x380000);\nvec4 ch_P = vec4(0x00FC66,0x66667C,0x606060,0xF00000);\nvec4 ch_Q = vec4(0x00386C,0xC6C6C6,0xCEDE7C,0x0C1E00);\nvec4 ch_R = vec4(0x00FC66,0x66667C,0x6C6666,0xE60000);\nvec4 ch_S = vec4(0x0078CC,0xCCC070,0x18CCCC,0x780000);\nvec4 ch_T = vec4(0x00FCB4,0x303030,0x303030,0x780000);\nvec4 ch_U = vec4(0x00CCCC,0xCCCCCC,0xCCCCCC,0x780000);\nvec4 ch_V = vec4(0x00CCCC,0xCCCCCC,0xCCCC78,0x300000);\nvec4 ch_W = vec4(0x00C6C6,0xC6C6D6,0xD66C6C,0x6C0000);\nvec4 ch_X = vec4(0x00CCCC,0xCC7830,0x78CCCC,0xCC0000);\nvec4 ch_Y = vec4(0x00CCCC,0xCCCC78,0x303030,0x780000);\nvec4 ch_Z = vec4(0x00FECE,0x981830,0x6062C6,0xFE0000);\nvec4 ch_lsb = vec4(0x003C30,0x303030,0x303030,0x3C0000);\nvec4 ch_rsl = vec4(0x000080,0xC06030,0x180C06,0x020000);\nvec4 ch_rsb = vec4(0x003C0C,0x0C0C0C,0x0C0C0C,0x3C0000);\nvec4 ch_pow = vec4(0x10386C,0xC60000,0x000000,0x000000);\nvec4 ch_usc = vec4(0x000000,0x000000,0x000000,0x00FF00);\nvec4 ch_a = vec4(0x000000,0x00780C,0x7CCCCC,0x760000);\nvec4 ch_b = vec4(0x00E060,0x607C66,0x666666,0xDC0000);\nvec4 ch_c = vec4(0x000000,0x0078CC,0xC0C0CC,0x780000);\nvec4 ch_d = vec4(0x001C0C,0x0C7CCC,0xCCCCCC,0x760000);\nvec4 ch_e = vec4(0x000000,0x0078CC,0xFCC0CC,0x780000);\nvec4 ch_f = vec4(0x00386C,0x6060F8,0x606060,0xF00000);\nvec4 ch_g = vec4(0x000000,0x0076CC,0xCCCC7C,0x0CCC78);\nvec4 ch_h = vec4(0x00E060,0x606C76,0x666666,0xE60000);\nvec4 ch_i = vec4(0x001818,0x007818,0x181818,0x7E0000);\nvec4 ch_j = vec4(0x000C0C,0x003C0C,0x0C0C0C,0xCCCC78);\nvec4 ch_k = vec4(0x00E060,0x60666C,0x786C66,0xE60000);\nvec4 ch_l = vec4(0x007818,0x181818,0x181818,0x7E0000);\nvec4 ch_m = vec4(0x000000,0x00FCD6,0xD6D6D6,0xC60000);\nvec4 ch_n = vec4(0x000000,0x00F8CC,0xCCCCCC,0xCC0000);\nvec4 ch_o = vec4(0x000000,0x0078CC,0xCCCCCC,0x780000);\nvec4 ch_p = vec4(0x000000,0x00DC66,0x666666,0x7C60F0);\nvec4 ch_q = vec4(0x000000,0x0076CC,0xCCCCCC,0x7C0C1E);\nvec4 ch_r = vec4(0x000000,0x00EC6E,0x766060,0xF00000);\nvec4 ch_s = vec4(0x000000,0x0078CC,0x6018CC,0x780000);\nvec4 ch_t = vec4(0x000020,0x60FC60,0x60606C,0x380000);\nvec4 ch_u = vec4(0x000000,0x00CCCC,0xCCCCCC,0x760000);\nvec4 ch_v = vec4(0x000000,0x00CCCC,0xCCCC78,0x300000);\nvec4 ch_w = vec4(0x000000,0x00C6C6,0xD6D66C,0x6C0000);\nvec4 ch_x = vec4(0x000000,0x00C66C,0x38386C,0xC60000);\nvec4 ch_y = vec4(0x000000,0x006666,0x66663C,0x0C18F0);\nvec4 ch_z = vec4(0x000000,0x00FC8C,0x1860C4,0xFC0000);\nvec4 ch_lpa = vec4(0x001C30,0x3060C0,0x603030,0x1C0000);\nvec4 ch_bar = vec4(0x001818,0x181800,0x181818,0x180000);\nvec4 ch_rpa = vec4(0x00E030,0x30180C,0x183030,0xE00000);\nvec4 ch_tid = vec4(0x0073DA,0xCE0000,0x000000,0x000000);\nvec4 ch_lar = vec4(0x000000,0x10386C,0xC6C6FE,0x000000);\n\n// CPC 464 chr$(33 - 255); converted with my own routine ;\n\nvec4 chr_33  = vec4(0x181818,0x181800,0x180000,0x000000);\nvec4 chr_34  = vec4(0x6c6c6c,0x000000,0x000000,0x000000);\nvec4 chr_35  = vec4(0x6c6cfe,0x6cfe6c,0x6c0000,0x000000);\nvec4 chr_36  = vec4(0x183e58,0x3c1a7c,0x180000,0x000000);\nvec4 chr_37  = vec4(0x00c6cc,0x183066,0xc60000,0x000000);\nvec4 chr_38  = vec4(0x386c38,0x76dccc,0x760000,0x000000);\nvec4 chr_39  = vec4(0x181830,0x000000,0x000000,0x000000);\nvec4 chr_40  = vec4(0x0c1830,0x303018,0x0c0000,0x000000);\nvec4 chr_41  = vec4(0x30180c,0x0c0c18,0x300000,0x000000);\nvec4 chr_42  = vec4(0x00663c,0xff3c66,0x000000,0x000000);\nvec4 chr_43  = vec4(0x001818,0x7e1818,0x000000,0x000000);\nvec4 chr_44  = vec4(0x000000,0x000018,0x180000,0x000000);\nvec4 chr_45  = vec4(0x000000,0x7e0000,0x000000,0x000000);\nvec4 chr_46  = vec4(0x000000,0x000018,0x180000,0x000000);\nvec4 chr_47  = vec4(0x060c18,0x3060c0,0x800000,0x000000);\nvec4 chr_48  = vec4(0x7cc6ce,0xd6e6c6,0x7c0000,0x000000);\nvec4 chr_49  = vec4(0x183818,0x181818,0x7e0000,0x000000);\nvec4 chr_50  = vec4(0x3c6606,0x3c6066,0x7e0000,0x000000);\nvec4 chr_51  = vec4(0x3c6606,0x1c0666,0x3c0000,0x000000);\nvec4 chr_52  = vec4(0x1c3c6c,0xccfe0c,0x1e0000,0x000000);\nvec4 chr_53  = vec4(0x7e6260,0x7c0666,0x3c0000,0x000000);\nvec4 chr_54  = vec4(0x3c6660,0x7c6666,0x3c0000,0x000000);\nvec4 chr_55  = vec4(0x7e6606,0x0c1818,0x180000,0x000000);\nvec4 chr_56  = vec4(0x3c6666,0x3c6666,0x3c0000,0x000000);\nvec4 chr_57  = vec4(0x3c6666,0x3e0666,0x3c0000,0x000000);\nvec4 chr_58  = vec4(0x000018,0x180018,0x180000,0x000000);\nvec4 chr_59  = vec4(0x000018,0x180018,0x180000,0x000000);\nvec4 chr_60  = vec4(0x0c1830,0x603018,0x0c0000,0x000000);\nvec4 chr_61  = vec4(0x00007e,0x00007e,0x000000,0x000000);\nvec4 chr_62  = vec4(0x603018,0x0c1830,0x600000,0x000000);\nvec4 chr_63  = vec4(0x3c6666,0x0c1800,0x180000,0x000000);\nvec4 chr_64  = vec4(0x7cc6de,0xdedec0,0x7c0000,0x000000);\nvec4 chr_65  = vec4(0x183c66,0x667e66,0x660000,0x000000); // A\nvec4 chr_66  = vec4(0xfc6666,0x7c6666,0xfc0000,0x000000);\nvec4 chr_67  = vec4(0x3c66c0,0xc0c066,0x3c0000,0x000000);\nvec4 chr_68  = vec4(0xf86c66,0x66666c,0xf80000,0x000000);\nvec4 chr_69  = vec4(0xfe6268,0x786862,0xfe0000,0x000000);\nvec4 chr_70  = vec4(0xfe6268,0x786860,0xf00000,0x000000);\nvec4 chr_71  = vec4(0x3c66c0,0xc0ce66,0x3e0000,0x000000);\nvec4 chr_72  = vec4(0x666666,0x7e6666,0x660000,0x000000);\nvec4 chr_73  = vec4(0x7e1818,0x181818,0x7e0000,0x000000);\nvec4 chr_74  = vec4(0x1e0c0c,0x0ccccc,0x780000,0x000000);\nvec4 chr_75  = vec4(0xe6666c,0x786c66,0xe60000,0x000000);\nvec4 chr_76  = vec4(0xf06060,0x606266,0xfe0000,0x000000);\nvec4 chr_77  = vec4(0xc6eefe,0xfed6c6,0xc60000,0x000000);\nvec4 chr_78  = vec4(0xc6e6f6,0xdecec6,0xc60000,0x000000);\nvec4 chr_79  = vec4(0x386cc6,0xc6c66c,0x380000,0x000000);\nvec4 chr_80  = vec4(0xfc6666,0x7c6060,0xf00000,0x000000);\nvec4 chr_81  = vec4(0x386cc6,0xc6dacc,0x760000,0x000000);\nvec4 chr_82  = vec4(0xfc6666,0x7c6c66,0xe60000,0x000000);\nvec4 chr_83  = vec4(0x3c6660,0x3c0666,0x3c0000,0x000000);\nvec4 chr_84  = vec4(0x7e5a18,0x181818,0x3c0000,0x000000);\nvec4 chr_85  = vec4(0x666666,0x666666,0x3c0000,0x000000);\nvec4 chr_86  = vec4(0x666666,0x66663c,0x180000,0x000000);\nvec4 chr_87  = vec4(0xc6c6c6,0xd6feee,0xc60000,0x000000);\nvec4 chr_88  = vec4(0xc66c38,0x386cc6,0xc60000,0x000000);\nvec4 chr_89  = vec4(0x666666,0x3c1818,0x3c0000,0x000000);\nvec4 chr_90  = vec4(0xfec68c,0x183266,0xfe0000,0x000000);\nvec4 chr_91  = vec4(0x3c3030,0x303030,0x3c0000,0x000000);\nvec4 chr_92  = vec4(0xc06030,0x180c06,0x020000,0x000000);\nvec4 chr_93  = vec4(0x3c0c0c,0x0c0c0c,0x3c0000,0x000000);\nvec4 chr_94  = vec4(0x183c7e,0x181818,0x180000,0x000000);\nvec4 chr_95  = vec4(0x000000,0x000000,0x000000,0x000000);\nvec4 chr_96  = vec4(0x30180c,0x000000,0x000000,0x000000);\nvec4 chr_97  = vec4(0x000078,0x0c7ccc,0x760000,0x000000);\nvec4 chr_98  = vec4(0xe0607c,0x666666,0xdc0000,0x000000);\nvec4 chr_99  = vec4(0x00003c,0x666066,0x3c0000,0x000000);\nvec4 chr_100 = vec4(0x1c0c7c,0xcccccc,0x760000,0x000000);\nvec4 chr_101 = vec4(0x00003c,0x667e60,0x3c0000,0x000000);\nvec4 chr_102 = vec4(0x1c3630,0x783030,0x780000,0x000000);\nvec4 chr_103 = vec4(0x00003e,0x66663e,0x060000,0x000000);\nvec4 chr_104 = vec4(0xe0606c,0x766666,0xe60000,0x000000);\nvec4 chr_105 = vec4(0x180038,0x181818,0x3c0000,0x000000);\nvec4 chr_106 = vec4(0x06000e,0x060666,0x660000,0x000000);\nvec4 chr_107 = vec4(0xe06066,0x6c786c,0xe60000,0x000000);\nvec4 chr_108 = vec4(0x381818,0x181818,0x3c0000,0x000000);\nvec4 chr_109 = vec4(0x00006c,0xfed6d6,0xc60000,0x000000);\nvec4 chr_110 = vec4(0x0000dc,0x666666,0x660000,0x000000);\nvec4 chr_111 = vec4(0x00003c,0x666666,0x3c0000,0x000000);\nvec4 chr_112 = vec4(0x0000dc,0x66667c,0x60f000,0x000000);\nvec4 chr_113 = vec4(0x000076,0xcccc7c,0x0c0000,0x000000);\nvec4 chr_114 = vec4(0x0000dc,0x766060,0xf00000,0x000000);\nvec4 chr_115 = vec4(0x00003c,0x603c06,0x7c0000,0x000000);\nvec4 chr_116 = vec4(0x30307c,0x303036,0x1c0000,0x000000);\nvec4 chr_117 = vec4(0x000066,0x666666,0x3e0000,0x000000);\nvec4 chr_118 = vec4(0x000066,0x66663c,0x180000,0x000000);\nvec4 chr_119 = vec4(0x0000c6,0xd6d6fe,0x6c0000,0x000000);\nvec4 chr_120 = vec4(0x0000c6,0x6c386c,0xc60000,0x000000);\nvec4 chr_121 = vec4(0x000066,0x66663e,0x067c00,0x000000);\nvec4 chr_122 = vec4(0x00007e,0x4c1832,0x7e0000,0x000000);\nvec4 chr_123 = vec4(0x0e1818,0x701818,0x0e0000,0x000000);\nvec4 chr_124 = vec4(0x181818,0x181818,0x180000,0x000000);\nvec4 chr_125 = vec4(0x701818,0x0e1818,0x700000,0x000000);\nvec4 chr_126 = vec4(0x76dc00,0x000000,0x000000,0x000000);\nvec4 chr_127 = vec4(0xcc33cc,0x33cc33,0xcc0000,0x000000);\nvec4 chr_128 = vec4(0x000000,0x000000,0x000000,0x000000);\nvec4 chr_129 = vec4(0xf0f0f0,0xf00000,0x000000,0x000000);\nvec4 chr_130 = vec4(0x0f0f0f,0x0f0000,0x000000,0x000000);\nvec4 chr_131 = vec4(0xffffff,0xff0000,0x000000,0x000000);\nvec4 chr_132 = vec4(0x000000,0x00f0f0,0xf00000,0x000000);\nvec4 chr_133 = vec4(0xf0f0f0,0xf0f0f0,0xf00000,0x000000);\nvec4 chr_134 = vec4(0x0f0f0f,0x0ff0f0,0xf00000,0x000000);\nvec4 chr_135 = vec4(0xffffff,0xfff0f0,0xf00000,0x000000);\nvec4 chr_136 = vec4(0x000000,0x000f0f,0x0f0000,0x000000);\nvec4 chr_137 = vec4(0xf0f0f0,0xf00f0f,0x0f0000,0x000000);\nvec4 chr_138 = vec4(0x0f0f0f,0x0f0f0f,0x0f0000,0x000000);\nvec4 chr_139 = vec4(0xffffff,0xff0f0f,0x0f0000,0x000000);\nvec4 chr_140 = vec4(0x000000,0x00ffff,0xff0000,0x000000);\nvec4 chr_141 = vec4(0xf0f0f0,0xf0ffff,0xff0000,0x000000);\nvec4 chr_142 = vec4(0x0f0f0f,0x0fffff,0xff0000,0x000000);\nvec4 chr_143 = vec4(0xffffff,0xffffff,0xffff00,0x000000);\nvec4 chr_144 = vec4(0x000000,0x181800,0x000000,0x000000);\nvec4 chr_145 = vec4(0x181818,0x181800,0x000000,0x000000);\nvec4 chr_146 = vec4(0x000000,0x1f1f00,0x000000,0x000000);\nvec4 chr_147 = vec4(0x181818,0x1f0f00,0x000000,0x000000);\nvec4 chr_148 = vec4(0x000000,0x181818,0x180000,0x000000);\nvec4 chr_149 = vec4(0x181818,0x181818,0x180000,0x000000);\nvec4 chr_150 = vec4(0x000000,0x0f1f18,0x180000,0x000000);\nvec4 chr_151 = vec4(0x181818,0x1f1f18,0x180000,0x000000);\nvec4 chr_152 = vec4(0x000000,0xf8f800,0x000000,0x000000);\nvec4 chr_153 = vec4(0x181818,0xf8f000,0x000000,0x000000);\nvec4 chr_154 = vec4(0x000000,0xffff00,0x000000,0x000000);\nvec4 chr_155 = vec4(0x181818,0xffff00,0x000000,0x000000);\nvec4 chr_156 = vec4(0x000000,0xf0f818,0x180000,0x000000);\nvec4 chr_157 = vec4(0x181818,0xf8f818,0x180000,0x000000);\nvec4 chr_158 = vec4(0x000000,0xffff18,0x180000,0x000000);\nvec4 chr_159 = vec4(0x181818,0xffff18,0x180000,0x000000);\nvec4 chr_160 = vec4(0x10386c,0xc60000,0x000000,0x000000);\nvec4 chr_161 = vec4(0x0c1830,0x000000,0x000000,0x000000);\nvec4 chr_162 = vec4(0x666600,0x000000,0x000000,0x000000);\nvec4 chr_163 = vec4(0x3c6660,0xf86066,0xfe0000,0x000000);\nvec4 chr_164 = vec4(0x3844ba,0xa2ba44,0x380000,0x000000);\nvec4 chr_165 = vec4(0x7ef4f4,0x743434,0x340000,0x000000);\nvec4 chr_166 = vec4(0x1e3038,0x6c3818,0xf00000,0x000000);\nvec4 chr_167 = vec4(0x18180c,0x000000,0x000000,0x000000);\nvec4 chr_168 = vec4(0x40c044,0x4c541e,0x040000,0x000000);\nvec4 chr_169 = vec4(0x40c04c,0x524408,0x1e0000,0x000000);\nvec4 chr_170 = vec4(0xe01062,0x16ea0f,0x020000,0x000000);\nvec4 chr_171 = vec4(0x001818,0x7e1818,0x7e0000,0x000000);\nvec4 chr_172 = vec4(0x181800,0x7e0018,0x180000,0x000000);\nvec4 chr_173 = vec4(0x000000,0x7e0606,0x000000,0x000000);\nvec4 chr_174 = vec4(0x180018,0x306666,0x3c0000,0x000000);\nvec4 chr_175 = vec4(0x180018,0x181818,0x180000,0x000000);\nvec4 chr_176 = vec4(0x000073,0xdeccde,0x730000,0x000000);\nvec4 chr_177 = vec4(0x7cc6c6,0xfcc6c6,0xf80000,0x000000);\nvec4 chr_178 = vec4(0x006666,0x3c6666,0x3c0000,0x000000);\nvec4 chr_179 = vec4(0x3c6060,0x3c6666,0x3c0000,0x000000);\nvec4 chr_180 = vec4(0x00001e,0x307c30,0x1e0000,0x000000);\nvec4 chr_181 = vec4(0x386cc6,0xfec66c,0x380000,0x000000);\nvec4 chr_182 = vec4(0x00c060,0x30386c,0xc60000,0x000000);\nvec4 chr_183 = vec4(0x000066,0x66667c,0x600000,0x000000);\nvec4 chr_184 = vec4(0x000000,0xfe6c6c,0x6c0000,0x000000);\nvec4 chr_185 = vec4(0x000000,0x7ed8d8,0x700000,0x000000);\nvec4 chr_186 = vec4(0x03060c,0x3c663c,0x600000,0x000000);\nvec4 chr_187 = vec4(0x03060c,0x66663c,0x600000,0x000000);\nvec4 chr_188 = vec4(0x00e63c,0x18386c,0xc70000,0x000000);\nvec4 chr_189 = vec4(0x000066,0xc3dbdb,0x7e0000,0x000000);\nvec4 chr_190 = vec4(0xfec660,0x3060c6,0xfe0000,0x000000);\nvec4 chr_191 = vec4(0x007cc6,0xc6c66c,0xee0000,0x000000);\nvec4 chr_192 = vec4(0x183060,0xc08000,0x000000,0x000000);\nvec4 chr_193 = vec4(0x180c06,0x030100,0x000000,0x000000);\nvec4 chr_194 = vec4(0x000000,0x010306,0x0c0000,0x000000);\nvec4 chr_195 = vec4(0x000000,0x80c060,0x300000,0x000000);\nvec4 chr_196 = vec4(0x183c66,0xc38100,0x000000,0x000000);\nvec4 chr_197 = vec4(0x180c06,0x030306,0x0c0000,0x000000);\nvec4 chr_198 = vec4(0x000000,0x81c366,0x3c0000,0x000000);\nvec4 chr_199 = vec4(0x183060,0xc0c060,0x300000,0x000000);\nvec4 chr_200 = vec4(0x183060,0xc18306,0x0c0000,0x000000);\nvec4 chr_201 = vec4(0x180c06,0x83c160,0x300000,0x000000);\nvec4 chr_202 = vec4(0x183c66,0xc3c366,0x3c0000,0x000000);\nvec4 chr_203 = vec4(0xc3e77e,0x3c3c7e,0xe70000,0x000000);\nvec4 chr_204 = vec4(0x03070e,0x1c3870,0xe00000,0x000000);\nvec4 chr_205 = vec4(0xc0e070,0x381c0e,0x070000,0x000000);\nvec4 chr_206 = vec4(0xcccc33,0x33cccc,0x330000,0x000000);\nvec4 chr_207 = vec4(0xaa55aa,0x55aa55,0xaa0000,0x000000);\nvec4 chr_208 = vec4(0xffff00,0x000000,0x000000,0x000000);\nvec4 chr_209 = vec4(0x030303,0x030303,0x030000,0x000000);\nvec4 chr_210 = vec4(0x000000,0x000000,0xff0000,0x000000);\nvec4 chr_211 = vec4(0xc0c0c0,0xc0c0c0,0xc00000,0x000000);\nvec4 chr_212 = vec4(0xfffefc,0xf8f0e0,0xc00000,0x000000);\nvec4 chr_213 = vec4(0xff7f3f,0x1f0f07,0x030000,0x000000);\nvec4 chr_214 = vec4(0x010307,0x0f1f3f,0x7f0000,0x000000);\nvec4 chr_215 = vec4(0x80c0e0,0xf0f8fc,0xfe0000,0x000000);\nvec4 chr_216 = vec4(0xaa55aa,0x550000,0x000000,0x000000);\nvec4 chr_217 = vec4(0x0a050a,0x050a05,0x0a0000,0x000000);\nvec4 chr_218 = vec4(0x000000,0x00aa55,0xaa0000,0x000000);\nvec4 chr_219 = vec4(0xa050a0,0x50a050,0xa00000,0x000000);\nvec4 chr_220 = vec4(0xaa54a8,0x50a040,0x800000,0x000000);\nvec4 chr_221 = vec4(0xaa552a,0x150a05,0x020000,0x000000);\nvec4 chr_222 = vec4(0x010205,0x0a152a,0x550000,0x000000);\nvec4 chr_223 = vec4(0x008040,0xa050a8,0x540000,0x000000);\nvec4 chr_224 = vec4(0x7eff99,0xffbdc3,0xff0000,0x000000);\nvec4 chr_225 = vec4(0x7eff99,0xffc3bd,0xff0000,0x000000);\nvec4 chr_226 = vec4(0x3838fe,0xfefe10,0x380000,0x000000);\nvec4 chr_227 = vec4(0x10387c,0xfe7c38,0x100000,0x000000);\nvec4 chr_228 = vec4(0x6cfefe,0xfe7c38,0x100000,0x000000);\nvec4 chr_229 = vec4(0x10387c,0xfefe10,0x380000,0x000000);\nvec4 chr_230 = vec4(0x003c66,0xc3c366,0x3c0000,0x000000);\nvec4 chr_231 = vec4(0x003c7e,0xffff7e,0x3c0000,0x000000);\nvec4 chr_232 = vec4(0x007e66,0x666666,0x7e0000,0x000000);\nvec4 chr_233 = vec4(0x007e7e,0x7e7e7e,0x7e0000,0x000000);\nvec4 chr_234 = vec4(0x0f070d,0x78cccc,0xcc0000,0x000000);\nvec4 chr_235 = vec4(0x3c6666,0x663c18,0x7e0000,0x000000);\nvec4 chr_236 = vec4(0x0c0c0c,0x0c0c3c,0x7c0000,0x000000);\nvec4 chr_237 = vec4(0x181c1e,0x1b1878,0xf80000,0x000000);\nvec4 chr_238 = vec4(0x995a24,0xc3c324,0x5a0000,0x000000);\nvec4 chr_239 = vec4(0x103838,0x383838,0x7c0000,0x000000);\nvec4 chr_240 = vec4(0x183c7e,0xff1818,0x180000,0x000000);\nvec4 chr_241 = vec4(0x181818,0x18ff7e,0x3c0000,0x000000);\nvec4 chr_242 = vec4(0x103070,0xffff70,0x300000,0x000000);\nvec4 chr_243 = vec4(0x080c0e,0xffff0e,0x0c0000,0x000000);\nvec4 chr_244 = vec4(0x000018,0x3c7eff,0xff0000,0x000000);\nvec4 chr_245 = vec4(0x0000ff,0xff7e3c,0x180000,0x000000);\nvec4 chr_246 = vec4(0x80e0f8,0xfef8e0,0x800000,0x000000);\nvec4 chr_247 = vec4(0x020e3e,0xfe3e0e,0x020000,0x000000);\nvec4 chr_248 = vec4(0x383892,0x7c1028,0x280000,0x000000);\nvec4 chr_249 = vec4(0x383810,0xfe1028,0x440000,0x000000);\nvec4 chr_250 = vec4(0x383812,0x7c9028,0x240000,0x000000);\nvec4 chr_251 = vec4(0x383890,0x7c1228,0x480000,0x000000);\nvec4 chr_252 = vec4(0x003c18,0x3c3c3c,0x180000,0x000000);\nvec4 chr_253 = vec4(0x3cffff,0x180c18,0x300000,0x000000);\nvec4 chr_254 = vec4(0x183c7e,0x18187e,0x3c0000,0x000000);\nvec4 chr_255 = vec4(0x002466,0xff6624,0x000000,0x000000);\n\n\n\nvec2 res = vec2(0);\nvec2 print_pos = vec2(0);\n\n//Extracts bit b from the given number.\n//Shifts bits right (num / 2^bit) then ANDs the result with 1 (mod(result,2.0)).\nfloat extract_bit(float n, float b)\n{\n    b = clamp(b,-1.0,24.0);\n\treturn floor(mod(floor(n / pow(2.0,floor(b))),2.0));   \n}\n\n//Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(vec4 spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    \n    //Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    //Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));\n    \n    float pixels = 0.0;\n    pixels += extract_bit(spr.x, bit - 72.0);\n    pixels += extract_bit(spr.y, bit - 48.0);\n    pixels += extract_bit(spr.z, bit - 24.0);\n    pixels += extract_bit(spr.w, bit - 00.0);\n    \n    return bounds ? pixels : 0.0;\n}\n\n//Prints a character and moves the print position forward by 1 character width.\nfloat char(vec4 ch, vec2 uv)\n{\n    if( TEXT_MODE == INVERT )\n    {\n      //Inverts all of the bits in the character.\n      ch = pow(2.0,24.0)-1.0-ch;\n    }\n    if( TEXT_MODE == UNDERLINE )\n    {\n      //Makes the bottom 8 bits all 1.\n      //Shifts the bottom chunk right 8 bits to drop the lowest 8 bits,\n      //then shifts it left 8 bits and adds 255 (binary 11111111).\n      ch.w = floor(ch.w/256.0)*256.0 + 255.0;  \n    }\n\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    return px;\n}\n\n\n//Returns the digit sprite for the given number.\nvec4 get_digit(float d)\n{\n    d = floor(d);\n    \n    if(d == 0.0) return ch_0;\n    if(d == 1.0) return ch_1;\n    if(d == 2.0) return ch_2;\n    if(d == 3.0) return ch_3;\n    if(d == 4.0) return ch_4;\n    if(d == 5.0) return ch_5;\n    if(d == 6.0) return ch_6;\n    if(d == 7.0) return ch_7;\n    if(d == 8.0) return ch_8;\n    if(d == 9.0) return ch_9;\n    return vec4(0.0);\n}\n\n//Prints out the given number starting at pos.\nfloat print_number(float number, vec2 uv)\n{\n    float result = 0.0;\n    \n\tfor(int i = 3;i >= -1;i--)\n    {\n        float digit = mod( number / pow(10.0, float(i)) , 10.0);\n        \n        if(i == -1) //Add a decimal point.\n        {\n            result += char(ch_per,uv);\n        }\n        \n        if(abs(number) > pow(10.0, float(i)) || i == 0) //Clip off leading zeros.\n        {\n        \tresult += char(get_digit(digit),uv);\n        }\n    }   \n    return result;\n}\n\nfloat print_integer(float number, int zeros, vec2 uv)\n{\n    float result = 0.0;\n    \n\tfor(int i = MAX_INT_DIGITS;i >= 0;i--)\n    {\n        float digit = mod( number / pow(10.0, float(i)) , 10.0);\n\n        if(abs(number) > pow(10.0, float(i)) || zeros > i  || i == 0) //Clip off leading zeros.\n        {\n        \tresult += char(get_digit(digit),uv);\n        }\n    }   \n    return result;\n}\n\nfloat text(vec2 uv)\n{\n    float col = 0.0;\n    \n    vec2 center = res/2.0;\n \n    \n    print_pos = floor(center - vec2(STRWIDTH(19.0),STRHEIGHT(-5.0)));\n       \n    col += char(chr_65,uv);\n    col += char(chr_109,uv);\n    col += char(chr_115,uv);\n    col += char(chr_116,uv);\n    col += char(chr_114,uv);\n    col += char(chr_97,uv);\n    col += char(chr_100,uv);\n    col += char(ch_spc,uv);\n    col += char(chr_54,uv);\n    col += char(chr_52,uv);\n    col += char(chr_75,uv); //K\n    col += char(ch_spc,uv);\n    col += char(chr_77,uv);\n    col += char(chr_105,uv);\n    col += char(chr_99,uv);\n    col += char(chr_114,uv);\n    col += char(chr_111,uv);\n    col += char(chr_99,uv);\n    col += char(chr_111,uv);\n    col += char(chr_109,uv);\n    col += char(chr_112,uv);\n    \n    col += char(chr_117,uv);\n    col += char(chr_116,uv);\n    col += char(chr_101,uv);\n    col += char(chr_114,uv);\n    \n    col += char(ch_spc,uv);\n    col += char(ch_spc,uv);\n    \n    col += char(chr_40,uv);\n    col += char(chr_118,uv);\n    col += char(chr_49,uv);\n    col += char(chr_41,uv);\n    \n    \n    print_pos = floor(center - vec2(STRWIDTH(19.0),STRHEIGHT(-3.8)));\n  \n    col += char(chr_164,uv);\n    col += char(chr_49,uv);\n    col += char(chr_57,uv);\n    col += char(chr_56,uv);\n    col += char(chr_52,uv);\n    \n    col += char(ch_spc,uv);\n    \n    col += char(chr_65,uv);\n    col += char(chr_109,uv);\n    col += char(chr_115,uv);\n    col += char(chr_116,uv);\n    col += char(chr_114,uv);\n    \n    col += char(chr_97,uv);\n    col += char(chr_100,uv);\n    col += char(ch_spc,uv);\n    col += char(chr_67,uv);\n    col += char(chr_111,uv);\n    \n    \n    col += char(chr_110,uv);\n    col += char(chr_115,uv);\n    col += char(chr_117,uv);\n    col += char(chr_109,uv);\n    col += char(chr_101,uv);\n    col += char(chr_114,uv);\n    col += char(ch_spc,uv);\n    col += char(chr_69,uv);\n    col += char(chr_108,uv);\n    col += char(chr_101,uv);\n    col += char(chr_99,uv);\n    col += char(chr_116,uv);\n    col += char(chr_114,uv);\n    col += char(chr_111,uv);\n    col += char(chr_110,uv);\n    col += char(chr_105,uv);\n    col += char(chr_99,uv);\n    col += char(chr_115,uv);\n    col += char(ch_spc,uv);\n    \n    col += char(chr_112,uv);\n    col += char(chr_108,uv);\n    col += char(chr_99,uv);\n    \n    print_pos = floor(center - vec2(STRWIDTH(19.0),STRHEIGHT(-2.0)));\n    \n    col += char(chr_66,uv);\n    col += char(chr_65,uv);\n    col += char(chr_83,uv);\n    col += char(chr_73,uv);\n    col += char(chr_67,uv);\n    col += char(ch_spc,uv);\n    col += char(chr_49,uv);\n    col += char(chr_46,uv);\n    col += char(chr_48,uv);\n    \n    print_pos = floor(center - vec2(STRWIDTH(19.0),STRHEIGHT(-0.5)));\n    \n    \n    col += char(chr_82,uv);\n    col += char(chr_101,uv);\n    col += char(chr_97,uv);\n    col += char(chr_100,uv);\n    col += char(chr_121,uv);\n    \n    print_pos = floor(center - vec2(STRWIDTH(19.0),STRHEIGHT(0.2)));\n    \n    col += char(chr_143,uv);\n    \n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    res =  iResolution.xy/DOWN_SCALE ;\n \tvec2 duv = floor(fragCoord.xy / DOWN_SCALE) ;\n    \n    if(iMouse.z>0.0) { // left click\n    res =  iResolution.xy /2.*DOWN_SCALE  ;\n    duv = floor(fragCoord.xy /2.*DOWN_SCALE) ;\n    }\n    \n    \n\tfloat pixel = text(duv);\n    \n    //Shading stuff\n    vec3 col = vec3(1);\n   // col *= (1.-distance(mod(uv,vec2(1.0)),vec2(0.65)))*1.2;\n    col *= mix(vec3(0.0,0.05,0.5),vec3(1,1,0),pixel);\n\n\tfragColor = vec4(vec3(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}