{"ver":"0.1","info":{"id":"ldcfDN","date":"1525738967","viewed":319,"name":"Keep State","username":"jpechevarria","description":"Keep state between frames.\nChange the states after mouse clicks.\nThe idea is to have a cumulative value in order to use it to implement a \"track ball\" to rotate de space.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["mouse","persistentstate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    //fragColor = texture(iChannel0, uv);\n    if ( uv.y < 0.1 )\n    {\n    \tfragColor = texture(iChannel0, uv);\n    }\n    else {\n        vec2 squareId = vec2(5.0,0.0);\n        vec2 squareCoord = (squareId + 0.5) * side / iResolution.xy;\n        fragColor = texture(iChannel0, squareCoord);\n    }\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec2 getSquareId (vec2 coord)\n{\n    return trunc(coord/side);\n}\n\nvec2 squareCoord(vec2 squareId) {\n    return squareId * side;\n}\n\nbool inSquare(vec2 coord, vec2 squareId)\n{\n    vec2 squareBase = squareCoord(squareId);\n    vec2 squareDest = squareBase + side;\n    if ( coord.x - squareBase.x < side ) {\n        if ( coord.y - squareBase.y < side) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvec2 moveToSquare(vec2 coord, vec2 squareId){\n    vec2 newcoord = coord + (squareId - getSquareId(coord)) * side;\n    return newcoord;\n}\n\nvec4 colorAtSquare(vec2 squareId) {\n    vec2 newCoord = squareCoord(squareId);\n    newCoord += 0.5 * side;\n    newCoord /= iResolution.xy;\n    return texture(iChannel0, newCoord);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    if ( inSquare(fragCoord, vec2(0.0,0.0) ) )\n    {\n\t\tvec4 colAnt = texture(iChannel0, uv);\n\t\tvec4 newCol;\n        if ( iMouse.z >= 0.0 || iMouse.w >= 0.0 ) \n        {\n            if ( colAnt.r < 0.5 && colAnt.g < 0.5 )\n            {\n        \t\tnewCol = vec4(1.0,0.0,0.0,1.0);\n            }\n            else if ( colAnt.r > 0.5 && colAnt.g < 0.5 )\n            {\n                newCol = vec4(1.0,1.0,0.0,1.0);\n            }\n            else\n            {\n                newCol = colAnt;\n\t\t\t}\n            \n            fragColor = newCol;\n        }\n        else {\n            if ( colAnt.r > 0.5 && colAnt.g > 0.5 )\n            {\n                newCol = vec4(0.0,1.0,0.0,1.0);\n            }\n            else if ( colAnt.r < 0.5 && colAnt.g > 0.5 ) {\n                newCol = vec4(0.0,0.0,0.0,1.0);\n            }\n            fragColor = newCol;\n        }\n        \n    }\n    else if ( inSquare(fragCoord, vec2(1.0,0.0) ) )\n    {\n        fragColor = vec4(0.0,1.0,0.0,1.0);\n    }\n    else if ( inSquare(fragCoord, vec2(2.0,0.0) ) )\n    {\n        fragColor = vec4(0.0,0.0,1.0,1.0);\n    }\n    else if ( inSquare (fragCoord, vec2(3.0, 0.0)) )\n    {\n        // aumenta el color anterior\n\t\tfragColor = texture(iChannel0, uv);\n        vec4 colAntClick = colorAtSquare(vec2(0.0,0.0));\n        if ( colAntClick.r < 0.5 && colAntClick.g > 0.5 )\n        {\n\t\t\tvec4 colAnt = texture(iChannel0, uv);\n\t\t\tfloat var = colorAtSquare(vec2(4.0,0.0)).r;\n            \n            fragColor = clamp(colAnt + vec4(var),0.0,1.0);\n            fragColor = mod(fragColor,1.00000);\n        }\n        // Setea el valor del mouse y la distancia\n        //fragColor = vec4(\n    }\n    else if ( inSquare (fragCoord, vec2(4.0, 0.0)) )\n    {\n        vec4 colAntClick = colorAtSquare(vec2(0.0,0.0));\n        // CONTINUA APRETADO\n\t\tif ( colAntClick.r > 0.5 && colAntClick.g > 0.5 \n            && iMouse.z >= 0.0 || iMouse.w >= 0.0)\n        {\n            float varX = (iMouse.x - iMouse.z) / iResolution.x ;\n            //float dist = length(v);\n            fragColor = vec4(varX, 0.0, 0.0, 1.0);\n        }\n        else\n        {\n            fragColor = texture(iChannel0,uv);\n        }\n    }\n    else if ( inSquare (fragCoord, vec2(5.0, 0.0)) )\n    {\n        vec4 colAntClick = colorAtSquare(vec2(0.0,0.0));\n        if ( colAntClick.r < 0.5 && colAntClick.g > 0.5 )\n        {\n\t\t\tvec4 colAnt = texture(iChannel0, uv);\n\t\t\tfloat var = colorAtSquare(vec2(4.0,0.0)).r;\n            \n            fragColor = clamp(colAnt + vec4(var),0.0,1.0);\n        }\n        else\n        {\n            fragColor = texture(iChannel0, uv);\n        }\n    }\n    // NUEVO\n    else if ( inSquare (fragCoord, vec2(6.0, 0.0)) )\n    {\n        if ( iMouse.z >= 0.0 && iMouse.z <= 20.0 && iMouse.w >= 0.0 && iMouse.w <= 20.0 )\n        {\n            fragColor = vec4(1.0,1.0,0.0,1.0);\n        }\n        else if ( iMouse.z >= 0.0 && iMouse.z <= 20.0 )\n        {\n            fragColor = vec4(1.0,0.0,0.0,1.0);\n        }\n        else if ( iMouse.w >= 0.0 && iMouse.w <= 20.0 )\n        {\n            fragColor = vec4(0.0,1.0,0.0,1.0);\n        }\n        /*else if ( iMouse.z > 0.0 || iMouse.w > 0.0 )\n        {\n            fragColor = vec4(1.0);\n        }*/\n        else {\n            fragColor = vec4(0.0);\n        }\n        //fragColor = vec4(abs(iMouse.z)/iResolution.x);\n\t\t\n    }\n    else if ( inSquare (fragCoord, vec2(7.0, 0.0)) )\n    {\n        \n    }\n    \n    else \n        fragColor = vec4(0.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float side = 20.0;\n","name":"Common","description":"","type":"common"}]}