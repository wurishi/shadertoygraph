{"ver":"0.1","info":{"id":"MXSyzd","date":"1727581605","viewed":22,"name":"Rotating cub w/ mandelbrot","username":"froggynotacon","description":"Rotating, throbbing, semi-transparent cube with zooming colored Mandelbrot background","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cubemandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This code is licensed under Creative Commons 0 1.0 license.  No rights reserved.\n// Rotating, throbbing, semi-transparent cube with zooming colored Mandelbrot background\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define MAX_MANDELBROT_ITERATIONS 100\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat GetDist(vec3 p) {\n    // Rotation\n    float t = iTime;\n    p.xz *= Rot(t);\n    p.xy *= Rot(t * 0.7);\n    \n    // Throbbing effect\n    float pulse = sin(t * 2.0) * 0.1 + 1.0;\n    \n    // Box\n    float d = sdBox(p, vec3(0.3 * pulse));\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 mandelbrot(vec2 uv) {\n    vec2 c = uv;\n    vec2 z = vec2(0.0);\n    float iter = 0.0;\n    \n    for(int i = 0; i < MAX_MANDELBROT_ITERATIONS; i++) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if(dot(z, z) > 4.0) break;\n        iter++;\n    }\n    \n    if(iter == float(MAX_MANDELBROT_ITERATIONS)) {\n        return vec3(0.0);\n    }\n    \n    float f = iter / float(MAX_MANDELBROT_ITERATIONS);\n    vec3 col = 0.5 + 0.5 * cos(3.0 + f * 4.0 + vec3(0.0, 0.6, 1.0));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0, 3, -3);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0,0), 1.);\n\n    // Mandelbrot background\n    float zoom = exp(sin(iTime * 0.1) * 0.5 + 0.5) * 2.0;\n    vec2 mandelbrotUV = uv * zoom + vec2(-0.5, 0.0);\n    vec3 bgColor = mandelbrot(mandelbrotUV);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        \n        vec3 lightPos = vec3(2, 4, -3);\n        vec3 l = normalize(lightPos - p);\n        \n        float dif = dot(n, l) * .5 + .5;\n        vec3 difColor = vec3(dif);\n        \n        // Color changing effect for cube\n        vec3 cubeColor = 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0,2,4));\n        \n        // Apply lighting to cube\n        cubeColor *= difColor;\n        \n        // Apply semi-transparency and blend with background\n        float alpha = 0.7;\n        fragColor = vec4(mix(bgColor, cubeColor, alpha), 1.0);\n    } else {\n        // If no cube hit, just show background\n        fragColor = vec4(bgColor, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}