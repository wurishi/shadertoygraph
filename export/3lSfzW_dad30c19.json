{"ver":"0.1","info":{"id":"3lSfzW","date":"1598375845","viewed":141,"name":"negative metaballs ","username":"soggymongoose","description":"If you have questions are comments feel free to comment, i'm still new to coding shaders so any advice is welcome!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","metaballs","tutorial","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//number of points to be randomly placed to create the distance field (keep a float) \n//works best between 10 and 100\n#define pNum 50. \n\nvec2 random12(float uv) { //what other random number generator should I be using\n    return vec2(fract(sin(uv*523.72342)*2423.51231),fract(cos(uv*483.23563)*6248.36731));\n}\n\nfloat random21(vec2 uv) {\n    return fract(sin(dot(uv,vec2(12.541,73.652)))*45231.62423);\n}\n\nvec2 random22(vec2 uv) {\n    return vec2(fract(sin(dot(uv,vec2(14.541,68.674)))*73451.54923),\n                fract(cos(dot(uv,vec2(20.784,84.356)))*62234.85234)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n\n\t//create points for comparison\n    vec2[int(pNum)] points; \n    for (float i = 0.; i < pNum; i++) {\n    \tpoints[int(i)] = vec2(random12(i) - .5);\n        \n        //move dots to fix my bad random number method\n        points[int(i)].x *= 1.3;\n        points[int(i)].y *= .6;\n        \n        //animate points\n    \tif (random21(points[int(i)]) > .5) {\n      \t\tpoints[int(i)] += 0.1*sin(iTime + 3.2831*points[int(i)]);\n    \t} else {\n        \tpoints[int(i)] += 0.1*cos(iTime + 4.2831*points[int(i)]);\n    \t}\n    }\n    \n\t//add distance from every point to pixel\n    float sum = 0.;\n    float minDist = 2.;\n    \n    for (float i = 0.; i < pNum; i++) {\n    \tfloat tempDist = distance(points[int(i)],uv);\n        tempDist = (.25 / pNum) / tempDist;\n        sum += tempDist;\n        \n    }\n    \n    //add shading\n    vec3 col = vec3(max(smoothstep(.9,.85,sum),.2));\n    col -= vec3(.6-.5*sin(dot(vec2(uv.x*sin(uv.x),uv.y-.15),2.*vec2(.2,.5)*3.)),.5,.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}