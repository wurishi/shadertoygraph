{"ver":"0.1","info":{"id":"Wl2fzm","date":"1598564014","viewed":361,"name":"simple faster clouds","username":"danhel95","description":" simple Clouds based on @42yeah,  with no textures LoD and personalized marching and stripped down perlins needed to 2 ! and faster :)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["ray","tutorial","cloud","marching","sky","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Learning tutorial 4! \n// first attempt to make simple Clouds based on https://www.shadertoy.com/view/wsjfRD\n// by @42yeah,  with no textures LoD and personalized marching and \n// stripped down perlin needed to 2 ! and faster :)\n\n\n#define ITR 30.\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n\nconst vec3 a1 = vec3(0. );\nconst vec3 b1 = vec3(1.0, 0.0, 0.0);\nconst vec3 c1 = vec3(0.0, 1.0, 0.0);\nconst vec3 d1 = vec3(1.0, 1.0, 0.0);\nconst vec3 e1 = vec3(0.0, 0.0, 1.0);\nconst vec3 f1 = vec3(1.0, 0.0, 1.0);\nconst vec3 g1 = vec3(0.0, 1.0, 1.0);\nconst vec3 h1 = vec3(1.0, 1.0, 1.0);\n\n\nmat3 RX(float a) {\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(a), - sin(a),\n        0.0, sin(a), cos(a)\n    );\n}\n\nmat3 RY(float a) {\n    return mat3(\n        cos(a), 0.0, sin(a),\n        0.0, 1.0, 0.0,\n        - sin(a), 0.0, cos(a)\n    );\n}\n\nmat3 RZ(float a) {\n    return mat3(\n        cos(a), - sin(a), 0.0,\n        sin(a), cos(a), 0.0,\n        0.0, 0.0, 1.0\n    );\n}\n\nstruct ray {\n    vec3 o;\n    vec3 d;\n\n};\n\n\nray raydir(vec2 uv, vec2 m) {\n\n    float ang = sin(TWO_PI*m.x) * 1.;\n    vec3 camR = vec3( sin(ang + m.x), 0. , cos(ang+ m.y));\n    vec3 ro = vec3(15.0, 5.0, 15.0) + camR;\n    ro.z -= iTime * .01;\n\n    ro *= RX(-m.x*TWO_PI + iTime*.001 );\n    ro *= RY(- m.y *TWO_PI + iTime*.001);\n    ro *= RZ(- iTime *.01 );\n    vec3 lookat = vec3(0.);\n    float zoom = 1.;\n\n    vec3 forward = normalize(lookat - ro);\n    vec3 temp = cross(vec3(0.0, 1.0, 0.0), forward);\n    vec3 up = normalize(cross(forward, temp));\n    vec3 right = cross(up, forward);\n    vec3 screen_center = ro + forward * zoom;\n    vec3 i = screen_center + uv.x * right + uv.y * up;\n    vec3 rd = i-ro;\n\n    ray r ;\n    r.o = ro;\n    r.d = rd;\n    return r;\n\n}\n\nfloat rand(vec3 p) {\n    vec3 q = vec3(12.345, 67.89, 412.12);\n    return fract(sin(dot(p, q )) * 42123.45) *2.0 - 1.;\n}\n\nfloat perlin(vec3 p) {\n    vec3 u = floor(p);\n    vec3 v = fract(p);\n    vec3 s = smoothstep(0.0, 1.0, v);\n\n    float a = rand(u + a1);\n    float b = rand(u + b1);\n    float c = rand(u + c1);\n    float d = rand(u + d1);\n    float e = rand(u + e1);\n    float f = rand(u + f1);\n    float g = rand(u + g1);\n    float h = rand(u + h1);\n\n    float r = mix(mix(mix(a, b, s.x),\n    mix(c, d, s.x), s.y),\n    mix(mix(e, f, s.x),\n    mix(g, h, s.x), s.y), s.z);\n    return smoothstep(.0,1.,pow(r,.5));\n}\n\n\n\nfloat fbm(vec3 p) {\n    vec3 off = vec3(10., 50., .1);\n    off.z *= iTime;\n    vec3 q = p - off;\n    float f = .0;\n    f += 0.5 * perlin(q); q *= 2.0;\n    f += 0.25 * perlin(q); q *= 2.0;\n     return  smoothstep(0., .8, f );\n}\n\nfloat scene( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.,1.0)*iTime*.4;\n    float f = fbm(q);\n    return f;\n}\n\n\nvec4 march(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    float denseD = 10.;\n    float denseE = 1.;\n    vec4 col = vec4(0.0);\n    for (float i = 0.; i < 1.; i+=1./ITR) {\n        vec3 p = ro + t * rd;\n        float d = scene(p);\n        vec4 color = vec4(d);\n        color *= pow(d/(denseD + d),denseE);\n        col += color * (1. - col.a);\n        t += i*.5;\n    }\n    col.rgb = clamp(col.rgb, 0., 1.) ;\n    return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    ray r = raydir(uv,m);\n    vec3 sky = 2.*mix(vec3(.1, .5, .9), vec3(.1, .1, .9), uv.y);\n    vec4 col = march(r.o, r.d);\n    float fog = .5 - .5*col.a , a = 1.2, b=-.01;\n    vec3 colr = col.rgb;\n    colr = mix(vec3(col.rgb) * a * exp(b*col.a*col.a),sky, fog);\n    fragColor = vec4(colr, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}