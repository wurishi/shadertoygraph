{"ver":"0.1","info":{"id":"ltGfDR","date":"1542231227","viewed":75,"name":"Test Line 1","username":"jangxx","description":"First test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nbool modCompare(float a, float b, float modulus, float epsilon) {\n\tfloat mod_a = mod(a, modulus);\n    float mod_b = mod(b, modulus);\n    return (abs(mod_a - mod_b) <= epsilon || abs(mod_a - mod_b) + epsilon >= modulus);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv = vec2(-1.0 + uv.x*2.0, -1.0 + uv.y*2.0);\n    uv.x *= aspect;\n    \n    vec2 xaxis = vec2(1,0);\n    \n    float angle;\n    if (uv.y >= 0.0) {\n        angle = acos(dot(xaxis, uv) / length(uv));\n    } else {\n    \tangle = PI + acos(dot(-xaxis, uv) / length(uv));\n    }\n    \n    float lineAngle = iTime;\n    vec3 line = vec3(cos(lineAngle), sin(lineAngle), 0);\n    \n    float dist = length(cross(vec3(uv, 0), line)) / length(line);\n    \n    if (dist <= 0.1) {\n        fragColor = vec4(0,0,0,1);\n    } else if (mod(mod(angle - lineAngle, PI*2.0) + PI*2.0,PI*2.0) >= PI) {\n    \tfragColor = vec4(0,1,0,1);\n    } else {\n    \tfragColor = vec4(0,0,1,1);\n    }\n}","name":"Image","description":"","type":"image"}]}