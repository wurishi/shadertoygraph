{"ver":"0.1","info":{"id":"md3GW7","date":"1677348979","viewed":60,"name":"Pablo Martin Shader","username":"PabloMartin","description":"Quelques formes simples","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distancefields","scalarfields"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\n\nfloat plane(vec3 p, vec3 pP, vec3 n) {\n    return dot(p - pP, n);\n}\n\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\nfloat DemiSphereRyal(vec3 p,vec3 c, float r, vec3 o, vec3 n )\n{\n\n    float s1 = Sphere(p,c,r);\n    float p1 = plane(p,o,n);\n    \n    return max(s1,p1);\n}\n\nfloat Torus(vec3 p, vec2 t, vec2 r) {\n  vec2 q = vec2(length(p.xz) - r.x, p.y);\n  return length(q) - r.y;\n}\n\n//TORUS PLANO\n/*\nfloat Torus(vec3 p, vec2 t, vec2 r) {\n  vec2 q = vec2(length(p.xy) - r.x, p.z);\n  return length(q) - r.y;\n}*/\n\n\nfloat Cylinder(vec3 p, vec3 c, float r) {\n    return length(p.xy - c.xy) - r;\n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n//Intersection\nfloat Inter(float a,float b)\n{\n  return max(a,b);\n}\n\n//More Primitives with ops\n\nfloat Cylinder2(vec3 p, vec3 c, float r, float h) {\n\n    float ci = length(p.xy-c.xy)-r;\n    float dp1 = plane(p,c,vec3(0.,0.,-1.));\n    float dp2 = plane(p,vec3(c.x,c.y,c.z+h),vec3(0.,0.,1.));\n    return Inter(Inter(ci,dp1),dp2);\n}\n\nfloat Box (vec3 a, vec3 b, vec3 p) {\n\n    float dp1=plane(p,a,vec3(-1.,0.,0.));\n    float dp6=plane(p,a,vec3(0.,-1.,0.));\n    float dp4=plane(p,a,vec3(0.,0.,-1.));\n    float dp2=plane(p,b,vec3(1.,0.,0.));\n    float dp5=plane(p,b,vec3(0.,1.,0.));\n    float dp3=plane(p,b,vec3(0.,0.,1.));\n\n    float v;\n    v=Inter(dp1,dp2);\n    v=Inter(v,dp3);\n    v=Inter(v,dp4);\n    v=Inter(v,dp5);\n    v=Inter(v,dp6);\n    return v;\n}\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n  //CAPSULA\n \n  float u = Cylinder(p, vec3(1.,6.,2.), 3.);\n  u = Inter(u, plane(p, vec3(2.,4.,-4.), vec3(0, 0, -1)));\n  u = Inter(u, plane(p, vec3(2.,4.,4.), vec3(0, 0, 1)));\n  u = Union(u, Sphere(p,vec3(1.,6.,4.),3.));\n  u = Union(u, Sphere(p,vec3(1.,6.,-4.),3.));\n  \n  \n  //TORUS\n  \n  float majorRadius = 4.0;\n  float minorRadius = 1.5;\n  float v = Torus(p, vec2(0.0, 0.0), vec2(majorRadius, minorRadius));\n  \n  //BOX\n  \n  float w = Box(vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0), p);\n  \n  v = Union(v, u);\n  \n  v = Union(v, w);\n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}