{"ver":"0.1","info":{"id":"wdKBzm","date":"1606908812","viewed":106,"name":"Retro_80's_lopo","username":"lopoisaac","description":"Experiments while learning GLSL...","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["80s","retro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// About the shader:\n// There are 4 parts: the sun, sun glow, horizontal lines and vertical lines\n// \n// 2 effects added: pixelation and chromatic aberration\n// \n// I just started learning GLSL so this is a messy experiment\n//\n// Feel free to leave any comment with critiques, ways to improve, etc, \n// I'll really apreciate it! :)\n// \n// Twitter @lopoisaac\n\nfloat vertical_mask(vec2 uv) \n{    \n    return clamp(-pow(uv.y, 2.) + .8, 0., 1.);\n}\n\nvec4 horizontal_lines(vec2 uv)\n{\n    vec4 h_lines;\n  \tfloat scale_y = pow(uv.y, 2.) * 100.;\n\n    h_lines.a = (sin(iTime * 6. + scale_y)) * vertical_mask(uv); \n    h_lines.a = smoothstep(0.4, .8, h_lines.a); \n    h_lines.xyz = vec3(.2, 0., 1.);\n        \n    return h_lines;\n}\n\nvec4 vertical_lines(vec2 uv, vec2 chroma)\n{\n \tvec4 v_lines;\n    float scale_x = -40. / abs(uv.y -1.);\n    \n    v_lines.r = sin(-1. + abs(uv.x -.5) * scale_x + chroma.r);\n    v_lines.g = sin(-1. + abs(uv.x -.5) * scale_x - chroma.g);\n    v_lines.a = sin(-1. + abs(uv.x -.5) * scale_x) * vertical_mask(uv);\n    v_lines.a = smoothstep(0.4, 1., v_lines.a);\t\n   \n\tv_lines.xyz =  vec3(v_lines.r, v_lines.g, 0.8) * 3.;\n    \n    return v_lines;\n}\n\nvec4 draw_sun(vec2 uv)\n{     \n\tvec2 sun_position = vec2((uv.x -.5) * 1.5, uv.y -.8);\n    vec4 sun_color = vec4(9., .9, 0.7, 1.);\n    \n    sun_color.a = length(sun_position) * 0.8;\n    sun_color.a = smoothstep(.11, 0.09, sun_color.a);\n      \n    return sun_color;\n}\n\nfloat rectangle(vec2 position) \n{\n    float area;\n    area = min(position.y +.3, -position.y +.1) * 0.4;\n    //area = position.y + .5 ;\n\treturn area;\n}\n\nvec4 draw_glow(vec2 uv) {\n    \n    vec2 sun_position = vec2((uv.x -.5) * 1.4, uv.y -.8);\n    vec4 sun_glow = vec4(3., .8, 0.3, 1.);\n    \n    sun_glow.a = length(sun_position) + 0.01 * fract(sin(iTime * 8.));\n\n    sun_glow.a = smoothstep(.4, .0, sun_glow.a) * 0.3;\n    sun_glow.a += rectangle(sun_position);\n    \n    return sun_glow;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // effects\n    vec2 chroma = vec2(1.5, 1.8); // chromatic aberration\n    uv = floor(uv * 320.) / 320.; // pixelated effect\n    \n    // draw objects\n    vec4 h_lines = horizontal_lines(uv);\n   \tvec4 v_lines = vertical_lines(uv, chroma);\n   \tvec4 sun = draw_sun(uv);\n    vec4 sun_glow = draw_glow(uv);\n   \n    // output\n    vec4 color = vec4(.1, .1, .2, 1.); // set background color\n    \n    color = mix(color, sun_glow, sun_glow.a);\n    color = mix(color, h_lines, h_lines.a);\n    color = mix(color, v_lines, v_lines.a);\n    color = mix(color, sun, sun.a);\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}