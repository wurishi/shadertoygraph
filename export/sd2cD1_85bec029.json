{"ver":"0.1","info":{"id":"sd2cD1","date":"1643485400","viewed":114,"name":"arches subdivision 2d sdf","username":"jt","description":"Tweaked square minus circle subdivision [url]https://www.shadertoy.com/view/sdjyD1[/url] to produce circular arches instead of circles\nwhich are based on rodolphito's Square minus Circle [url]https://www.shadertoy.com/view/stlXWH[/url].\n","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","binary","sdf","circle","tree","square","square","distance","subdivision","arch","binarytree","minus","squareminuscircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/sd2cD1 arches subdivision 2d sdf 2022-1-29 by Jakob Thomsen\n// Variant of https://www.shadertoy.com/view/sdjyD1 https://www.shadertoy.com/view/sdjyD1 square minus circle subdivision\n// Combining rodolphito's Square minus Circle https://www.shadertoy.com/view/stlXWH\n// with the subdivision from my Binary Tree SDF https://www.shadertoy.com/view/sdBcR1.\n\n// https://www.shadertoy.com/view/stlXWH Square minus Circle - distance by rodolphito\n// The MIT License\n// Copyright Â© 2021 Rodol Phito\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nfloat square_minus_circle(vec2 p, float r) \n{\n    float b = 0.0;\n    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n    if (p.y<0.0) return length(p-vec2(1.,0.0));\n    return max(length(max(p-1.0,0.0)) + min(p.x-1.0,0.0),r-length(p));\n}\n\nfloat arch_subdiv(vec2 p) // by jt\n{\n    float s = exp2(ceil(-log2(p.y))); // scale\n    vec2 l = fract(p*s); // local coordinates\n    float c = step(1.0, mod(p.x*s,2.)); // choose left-right\n    float d = square_minus_circle(l-vec2(c,0.), 1.0)/s; // arches\n    d = min(d, l.y /s); // fix sdf\n    return (p.y < 0.0) ? -p.y : d;\n}\n/*\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) // by iq\n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nfloat sdBox( in vec2 p ) // by iq\n{\n    vec2 d = abs(p)-1.0;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    float d;\n    d = arch_subdiv(p);\n    //d = sdRhombus(p, vec2(1)); // compare sdf scale\n    //d = sdBox(p); // compare sdf scale\n    //d = square_minus_circle(p);\n    \n\t// coloring by iq\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}