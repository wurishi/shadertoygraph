{"ver":"0.1","info":{"id":"3djyzK","date":"1586965908","viewed":127,"name":"Voronoi Experimentation_","username":"Pixdigit","description":"A playground to play with voronoi tiling","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float cells = 40.;\nconst float subtile = 1.;\nconst bool boxed = true;\n\nvec2 N22(vec2 p) {\n    vec3 a = fract(p.xyx*vec3(123.34, 234.34, 345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n\tfloat t = iTime * 0.2+200.;\n    \n    vec3 col;\n    \n    float id = 0.;\n    float minD = 1000.;\n    \n    if (boxed) {\n        vec2 guv = fract(uv*subtile)-.5;\n        vec2 gid = floor(uv*subtile);\n\t\tvec2 cid;\n        \n        for (float x = -1.; x < 2.; x++) {\n            for (float y = -1.; y < 2.; y++) {\n                vec2 off = vec2(x, y);\n                vec2 n = N22(gid+off);\n                vec2 p = off + sin(n * t*4.)*0.5;\n                vec2 dVec = guv-p;\n                float d = abs(dVec.x)+abs(dVec.y);\n                if (d < minD) {\n                    minD = d;\n                    cid = off+gid;\n                }\n            }\n        }\n        float h = N22(cid).x*0.2;\n        float s = smoothstep(1., -0.6, minD);\n        float b = 0.3+N22(cid).x*(1.-minD);\n\n        col = hsb2rgb(vec3(h, s, b));\n    } else {\n        for (float i = 0.; i < cells; i++) {\n            vec2 n = N22(vec2(i));\n            vec2 p = sin(n * t);\n            p.x *= iResolution.x / iResolution.y;\n            vec2 dVec = uv-p;\n            float d = abs(dVec.x)+abs(dVec.y);\n            if (d < minD) {\n                minD = d;\n                id = i / cells;\n            }\n            float h = id*0.2;\n            float s = smoothstep(0.7, -0.6, minD);\n            float b = 0.3+id*(1.-minD);\n\n            col = hsb2rgb(vec3(h, s, b));\n        }\n    }\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}