{"ver":"0.1","info":{"id":"XtjBzd","date":"1516875803","viewed":202,"name":"Saturation algorithm","username":"liuhaidong","description":"饱和度算法","likes":0,"published":3,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat rgbMax(vec3 color)\n{\n    return max(max(color.r,color.g),color.b);\n}\n\nfloat rgbMin(vec3 color)\n{\n    return min(min(color.r,color.g),color.b);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    vec4 color = texture(iChannel0,uv);\n    \n    float delta = rgbMax(color.rgb) - rgbMin(color.rgb);\n    \n    float value = rgbMax(color.rgb) + rgbMin(color.rgb);\n    \n    float l = value/2.0;\n    \n    float s = 0.0;\n    \n    if(l<0.5)\n    {\n    \n       s = delta/value;\n    }\n    else\n    {\n       s = delta/(2.0-value);\n    }\n    \n    float percent = sin(iTime);\n    \n    if(percent>=0.0)\n    {\n    \n        float alpha = 0.0;\n        \n        if((percent+s) >=1.0)\n        {\n        \n            alpha = s;\n        }\n        else\n        {\n        \n            alpha = 1.0 - percent;\n            \n        }\n        \n        alpha = (1.0/alpha)-1.0;\n        \n        vec3 col = color.rgb + (color.rgb-l)*alpha;\n        color = vec4(col,1.0);\n\n        \n    }\n    else\n    {\n    \n        vec3 col = (color.rgb - l)*(1.0+percent)+l;\n        color = vec4(col,1.0);\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}]}