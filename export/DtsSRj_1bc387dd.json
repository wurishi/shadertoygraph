{"ver":"0.1","info":{"id":"DtsSRj","date":"1675072107","viewed":138,"name":"Blood Vessels","username":"VL","description":".","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define int2 vec2\n#define float2 vec2\n#define int3 vec3\n#define float3 vec3\n#define int4 vec4\n#define float4 vec4\n#define frac fract\n#define float2x2 mat2\n#define float3x3 mat3\n#define float4x4 mat4\n#define saturate(x) clamp(x,0.,1.)\n#define lerp mix\n#define sincos(x,s,c) s = sin(x),c = cos(x)\n#define mul(x,y) (x*y)\n#define atan2 atan\n#define fmod mod\n\nconst float InvPI = 0.318309886f;\nconst float PId2 = 1.57079632f;\nconst float PI = 3.141592653f;\nconst float PI2 = 6.2831853f;\nconst float MaxDist = 100.f;\nconst float SurfaceDist = 0.0001f;\nconst float FloatMax = 3.402823466e+38F;\n\nfloat2 hash22(float2 p)\n{\n    float3 p3 = frac(float3(p.xyx) * float3(192.1031, 172.1030, 184.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return frac((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat simplexNoise(float2 uv)\n{\n    const float k1 = 0.366025f;\n    const float k2 = 0.211324f;\n\n    int2 idx = floor(uv + (uv.x + uv.y) * k1);\n    float2 a = uv - (float2(idx) - float(idx.x + idx.y) * k2);\n    int2 tb = a.y > a.x ? int2(0, 1) : int2(1, 0);\n    float2 b = a - tb + k2;\n    float2 c = a - 1.f + k2 * 2.f;\n    \n    float3 kernel = max(0.5f - float3(dot(a, a), dot(b, b), dot(c, c)), 0.f);\n    float3 noise = (kernel * kernel) * (kernel * kernel)\n    * float3(dot(a, hash22(idx) * 2.f - 1.f), dot(b, hash22(idx + tb) * 2.f - 1.f), dot(c, hash22(idx + 1.) * 2.f - 1.f));\n    \n    return dot(vec3(70.f), noise);\n}\n\nfloat2x2 rot2D(float t)\n{\n    float s, c;\n    sincos(t, s, c);\n    return float2x2(c, s, -s, c);\n}\n\n//jt's binary tree : https://www.shadertoy.com/view/Xdt3z7\nfloat blood(float2 p)\n{\n    p = float2(atan2(p.y,p.x),length(p));    \n    \n    float fp = floor(p.y);\n    float b = frac(exp2(fp) * p.x);        \n    fp = p.y - fp;\n\n    float k = abs(b - 0.5f);\n    k = abs(k - smoothstep(0.f, 1.f,fp)*0.25);    \n    \n    return smoothstep(0.9, 0.95f,1.f - k*exp2(fp));\n}\n\nfloat bloodVessel(float2 uv, float s)\n{\n    uv += simplexNoise(uv*5.)*0.1; \n    int x = int(floor(uv.x*0.5));\n    uv = frac(uv*0.5)*s-s*0.5;\n    uv.x = bool(x & 1) ? uv.x : -uv.x;\n    return blood(uv);   \n}\n\nfloat bloodFBM(float2 p)\n{   \n    float G = exp2(-0.5);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    float s = pow(sin(iTime*10.)*0.3+0.3,3.f)*3.;\n    for (int i = 0; i < 3; i++)\n    {\n        t += a * bloodVessel(f * p * 0.5,-s +6.);\n        f *= 2.0;\n        a *= G;\n    }\n    return saturate(t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord)/iResolution.y*6.2+iTime*0.5;  \n\n    vec3 col = vec3(lerp(vec3(1.),vec3(1.,0.f,0.f),bloodFBM(uv)));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}