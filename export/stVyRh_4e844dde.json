{"ver":"0.1","info":{"id":"stVyRh","date":"1660946274","viewed":154,"name":"RGB->HSL & HSL->RGB","username":"whkrmrgks0","description":"conversion function\n\nvery naive","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rgb","hsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright 2022 whkrmrgks0\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec3 rgb2hsl(vec3 c){\n    float mn = min(c.r,min(c.g,c.b));\n    float mx = max(c.r,max(c.g,c.b));\n    vec3 cl2 = (c-mn)/(mx-mn);\n    vec3 clsel = cl2.gbr-cl2.rgb;\n    vec3 cl3 = cl2.rgb*cl2.gbr;\n    float disc = max(cl3.x,max(cl3.y,cl3.z));\n    cl2 = disc == 0. ? cl2 : cl3/disc;\n    clsel = ((clsel/2.)+vec3(.5,1.5,2.5))*cl2;\n    return vec3((clsel.x+clsel.y+clsel.z)/3.,(mx-mn)/(1.0-abs(mn+mx-1.0)),(mn+mx)*0.5);\n} //also works when in the cases like (1.,1.,.0), (.0,1.,.0), etc..\n\nvec3 hsl2rgb(vec3 c){\n    vec3 chro = clamp(2.-abs(mod(c.x*6.+vec3(3.,1.,5.),6.)-3.),.0,1.);\n    return mix(mix(vec3(.0),mix(vec3(0.5),chro,c.y),clamp(c.z*2.,.0,1.)),vec3(1.),clamp(c.z*2.-1.,.0,1.));\n} //notfinished\n\nfloat sawtooth(float inp){\n    return inp-floor(inp);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec3 hsl = vec3(uv.x,0.5+0.5*sin(iTime),uv.y );\n\tvec3 rgb = hsl2rgb(hsl);\n\tfragColor = vec4(hsl2rgb(rgb2hsl(rgb)),1.0);\n}\n\n//+whkrmrgks0 2022","name":"Image","description":"","type":"image"}]}