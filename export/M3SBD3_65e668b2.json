{"ver":"0.1","info":{"id":"M3SBD3","date":"1730040378","viewed":69,"name":"laser disks","username":"pb","description":":)","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","volumetric","mandelbox"],"hasliked":0,"parentid":"M3dSWN","parentname":"solar convection"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n//see buffer A please\n\nvoid mainImage(out vec4 O, vec2 u) {\n\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n          \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float glow=0., mmaxDist=100.;\nvec3 cc, ro, rd, light_dir;\nmat2 rot(float an) {return mat2(cos(an),-sin(an),sin(an),cos(an));}\n\nfloat random(vec2 p) {\n    return fract( sin( dot( p, vec2(12., 90.)))* 1e5 );\n}\n\nfloat de(vec3 p){\n  float nn = 2.7;\n  p = mod(p  + nn, 2.*nn) -nn;\n  p.xz *= rot(iTime*2.);\n  vec4 q0 = vec4 (p, 1.5), q = q0; float i=0.;\n  for (; i<6.; i ++) {\n    q.xyz = clamp (q.xyz,-.9,1.3)*2.5-1.3*q.xyz;    \n    q.xz *= rot( i*i*i*i/20.+iTime );\n    q = q * .4\n       / clamp(max( dot(q.yz,q.yz),\n               max( dot(q.xz,q.xz),\n                    dot(q.xy,q.xy))),.2,1.) + q0;\n  } \n  cc = q.xyz;\n  return length (q.xyz) / q.w \n      - .1*random(q.yz);} //this is what makes it\n  \nfloat march(vec3 ro, vec3 rd, float mx){ \n    float t=0.;\n    for(float i = 0.; i < 100.; i++) {\n        vec3 pos = ro + rd*t;\n        float d = de(pos);      \n        if ( t > 20.) break;\n        t += d;  \n        glow += exp(-d*d) *exp(-t*t/40.);\n    }\n    return t;}\n\nvec3 render(vec3 ro, vec3 rd) {\n    float t = march(ro, rd, mmaxDist);\n    return   5e-7*pow(glow,6.)*vec3(.03+.1*cos(cc.x/9.),.03,.5+.2*t);}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p  = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;    \n    rd = normalize( vec3(p,1. ) );\n    ro = vec3(.5,-1., iTime/2.);\n    rd.xz *= rot(.5); rd.yz *= rot(-1.); \n    vec3 col = clamp(render(ro, rd),-1e2,1e6);\n    col = 1. - exp(-sqrt(col));\n    fragColor = vec4( col, 1.);}\n","name":"Buffer A","description":"","type":"buffer"}]}