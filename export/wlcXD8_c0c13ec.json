{"ver":"0.1","info":{"id":"wlcXD8","date":"1580843718","viewed":83,"name":"shader-day1","username":"IXshader","description":"ray march basics","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spheresdf","nolight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat map(vec3);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //from NDC to screen space proper\n\tuv = -1.0 + (2.0 * uv);\n    //fix aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n  \n        //ray origin\n    vec3 ro = vec3(0.0,0.0,1.0);\n    \n    //ray distance\n    vec3 rd = normalize(vec3(uv,0.0)-ro);\n    \n    float h = 1.0;\n    float t = 1.0;\n    \n    int count;\n    \n    const int max_depth = 256;\n    \n    for(int i = 0 ; i < max_depth; i++)\n    {\n        //call the density function\n        vec3 castRay = ro + rd * t;\n        h = map(castRay);\n\t\t\n        if(h < 0.01)\n        {\n            count = i;\n            break;\n        }\n        t += h;\n    }\n    \n    vec3 col;\n    \n    if(h < 0.01)\n    {\n        vec3 p = ro + rd * t;\n        \n        col = vec3(1.0);\n    }\n    \n    \n   \n    fragColor = vec4(col,0.0f);\n    \n    \n}\n\n\n//some user defined density function - perlin(texturing and modelling for more reference)\n\nfloat map(vec3 pos)\n{\n\t//find the distance to sphere positioned at (0.0,0.0,-3.0) and radius 1\n    \n    vec3 spherePos = vec3(0.0,0.0,-3.0);\n    float sphereOuterRadius = 1.0;\n    \n    //normal euler distance method\n    float d = distance(pos,spherePos) - 1.0;\n    \n    \n    return d;\n}\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}