{"ver":"0.1","info":{"id":"td3SRf","date":"1572481015","viewed":270,"name":"A Beautiful Mind","username":"azirafail","description":"A signed distance field font experiment","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["sdf","font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float letter(float ix, vec2 uv)\n{\n    vec2 ixOffset = vec2(mod(ix, 16.), -floor(ix/16.)) + vec2(0.5,-0.5);\n    \n    vec2 ixUv = (ixOffset + clamp(uv, -0.5,0.5))/16.;\n    \n    float texD = texture(iChannel0, ixUv).a;\n\n    return smoothstep(0.5,0.499,texD);\n}\n\nfloat noise(float x)\n{\n    return fract(sin(x * 523.) * 757.);\n}\nfloat noise2(vec2 uv)\n{\n    return fract(sin(uv.x * 523.) * 757. + cos(uv.y * 871.) * 721.);\n}\nvec3 noise3(float x)\n{\n    return vec3(\n    \tnoise(x * 23. + 61.),\n        noise(x * 41. + 31.),\n        noise(x * 93. + 37.)\n    );\n}\n\nfloat symbol(float i) {\n    float n = floor(i * 52.);\n    if (n < 32.) {\n\t    return 128. + n;\n    }\n    return 48. + mod(n - 32., 10.);\n}\n\nstruct ray {\n    vec3 o, d;\n};\n\nray camera(vec2 uv, vec3 o, vec3 t, vec3 up, float zoom) {\n\n    vec3 d = normalize(t - o);\n    vec3 camRight = -cross(d, normalize(up));\n    vec3 camUp = cross(d, camRight);\n\n    ray r;\n    r.d = normalize(d + (camRight * uv.x + camUp * uv.y) / zoom);\n    r.o = o;\n    return r;\n}\n\nstruct prox {\n    vec3 o, p;\n    float d, r;\n};\n    \nprox proximity(ray r, vec3 p) {\n    prox pr; \n    pr.r = dot(r.d, p);\n    pr.p = r.o + r.d * pr.r;\n    pr.o = pr.p - p;\n    pr.d = length(pr.o);\n    pr.o /= pr.d;\n    return pr;\n}\n\nfloat sphere(prox p, float r) {\n    return sqrt(abs(r * r - p.d * p.d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) * iResolution.xy/iResolution.y; \n    \n\tray cam = camera(uv, vec3(sin(0. * iTime/17.) * 5.,1.3,cos(0. * iTime / 17.) * 5.), vec3(0.,1.,0.), vec3(0.,1.,0.), 1.); \n    \n    vec3 col;\n    \n    for (float i = 0.; i < 7.; i++) {\n    \n    float n = noise(i);\n        \n    vec3 p = vec3(20. * cos(iTime / (19. + n) + n * 37.),2.,20. * sin(iTime / (23. - n) + n * 91.));\n    prox pr = proximity(cam, p);\n    \n    float d = sphere(pr, sin(iTime / 41. + n * 53.) * 4. + 5.);\n    \n    vec3 s = cam.o + cam.d * (pr.r - d);\n    \n    vec2 wuv = (s-p).xy;\n    float off = noise(floor(wuv.x)) - 0.5;\n    wuv += vec2(0., off * iTime * 3.);\n    \n    float ix = symbol(noise2(floor(wuv) + n));\n    \n                      \n    vec2 tuv = fract(wuv) - 0.5;// * pr.d;\n        tuv.y *= -1.;\n    \n    float f = step(0.5, noise2(floor(mod(wuv,100.)) * 341.));\n    \n    // Time varying pixel color\n    col += vec3(letter(ix, tuv)) / (0.2 * abs(pr.d)) * f * mix(noise3(i), vec3(0.9,0.3,0.7), 0.7);\n    //col.rg = tuv;\n    }\n    //col.r = noise2(floor(ouv * scale));\n\n    // Output to screen\n    fragColor = vec4(col,1.0) * (1.- length(uv) / 2.);\n}","name":"Image","description":"","type":"image"}]}