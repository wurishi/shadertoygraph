{"ver":"0.1","info":{"id":"WsSfWW","date":"1589996550","viewed":155,"name":"ShATI - Joie","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the 16th subject: joy :)\nBecause swimming otter brings me joy <3","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","modeling","otter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat vcaps( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\nfloat water (vec3 p)\n{\n    p.y += texNoise(p.xz*0.1).r*0.2;\n    p.y += sin(length((p.xz-vec2(0.,0.5))*3.)-iTime*3.)*0.05;\n    return p.y;\n}\n\nfloat otter_body (vec3 p)   \n{\n    vec3 pp = p;\n    p.yz *= rot(0.2);\n    float r = 0.15+p.z*0.1;\n    p.y += 0.2+sin((p.z)*5.)*0.15;\n    float d = max(length(p.xy)-r, abs(p.z)-2.);\n\n    p = pp;\n    p.z -= 1.5;\n    d = min(d, length(p*vec3(0.7,1.2,1.))-0.3);\n\n    p = pp;\n    p.yz += vec2(0.25,-1.);\n    p.x = abs(p.x)-.5;\n    p.z += p.y * p.y;\n    d = min(d,vcaps(p,0.5, 0.08));\n    return d;\n}\n\nfloat otter_face (vec3 p)\n{\n    vec3 pp = p;\n    p.yz -= vec2(0.25,1.3);\n    float d = length(p*vec3(0.6,1.,1.))-0.05;\n\n    p = pp;\n    p.yz -= vec2(0.28,1.4);\n    p.x = abs(p.x)-0.15;\n    d = min(d,length(p)-0.05);\n    return d;\n}\n\nfloat ob,of;\nfloat otter_all (vec3 p)\n{\n    p.x += sin(p.z*1.2+iTime*2.)*0.2;\n    ob = otter_body(p)-texture(iChannel0, p.xz*0.3).r*0.05;\n    of = otter_face(p);\n    return min(ob,of);\n}\n\nfloat w;\nfloat SDF (vec3 p)\n{\n    w = water(p);\n    return min(otter_all(p),w);\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.1,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvec3 getcam (vec3 ro, vec3 tar, vec2 uv)\n{\n    vec3 f = normalize(tar-ro);\n    vec3 l = normalize(cross(vec3(0.,1.,0.),f));\n    vec3 u = normalize(cross(f,l));\n    return normalize(f + uv.x * l + uv.y * u);\n}\n\nfloat spec (vec3 rd, vec3 l, vec3 n, float spec_pow)\n{\n    vec3 h = normalize(l-rd);\n    return pow(max(dot(n,h),0.), spec_pow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0.,2.5,-.1),\n        p = ro,\n        rd = getcam(ro,vec3(0.),uv),\n        l = normalize(vec3(.8, 1., -.5)),\n        col = vec3(0.);\n\n\n    float d = 0.;\n    for (float i=0.;i<32.;i++)\n    {\n        d = SDF(p);\n        if (d<0.001) break;\n        p += d*rd*0.5;\n    }\n\n    float temp_ob = ob;\n    float temp_of = of;\n    float temp_w = w;\n    vec3 n = getnorm(p);\n    float light = max(dot(n,l),0.);\n\n    if (d == temp_ob) \n    {\n        col = mix(vec3(0.,0.1,0.2),vec3(0.8,0.8,0.6),light);\n        col += spec(rd,l,n, 1.)*0.4;\n    }\n    if (d == temp_of)\n    {\n        col = vec3(0.);\n        col += spec(rd,l,n,15.);\n    }\n    if (d == temp_w)\n    {\n        col = mix(vec3(0.05,0.2,0.05),vec3(0.7,0.85,.95),light);\n        col += spec(rd,l,n,25.)*0.2;\n    }\n\n    \n\t// vignetting (from iq)\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tcol *= .5 + 0.5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), 0.15);\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}