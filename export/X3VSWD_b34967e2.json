{"ver":"0.1","info":{"id":"X3VSWD","date":"1719960011","viewed":36,"name":"lights colors rgb","username":"laside777","description":"lights","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float lightScale = 0.15; // Escala general para las posiciones de las luces\nconst float lightIntensityFactor = 10.0; // Factor para ajustar la intensidad de las luces\nconst float cloudIntensityFactor = 0.5; // Factor para ajustar la intensidad de las nubes\nconst float textureIntensity = 0.5; // Intensidad de la textura\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime;\n\n    vec2 center = vec2(0.5, 0.5 * (iResolution.y / iResolution.x));\n\n    vec2 lightPositions[3];\n    vec3 lightColors[3];\n    float lightIntensities[3];\n\n    // Define posiciones y colores de las luces\n    lightPositions[0] = vec2(sin(time * 1.2 + 50.0) * 1.5 + cos(time * 0.4 + 10.0) * 1.0, sin(time * 1.2 + 100.0) * 1.2 + cos(time * 0.2 + 20.0) * -0.5) * lightScale + center;\n    lightColors[0] = vec3(1.0, 0.5, 0.5);\n    lightIntensities[0] = 1.0 / (lightIntensityFactor * distance(uv, lightPositions[0]));\n\n    lightPositions[1] = vec2(sin(time + 3.0) * -3.0, cos(time + 7.0) * 1.5) * lightScale + center;\n    lightColors[1] = vec3(0.5, 1.0, 0.5);\n    lightIntensities[1] = 1.0 / (lightIntensityFactor * distance(uv, lightPositions[1]));\n\n    lightPositions[2] = vec2(sin(time + 3.0) * 3.0, cos(time + 14.0) * -2.0) * lightScale + center;\n    lightColors[2] = vec3(0.5, 0.5, 1.0);\n    lightIntensities[2] = 1.0 / (lightIntensityFactor * distance(uv, lightPositions[2]));\n\n    // Calcula la intensidad de las nubes\n    float cloudIntensity = 0.0;\n    for (int i = 0; i < 3; ++i) {\n        cloudIntensity += cloudIntensityFactor * (1.0 - (2.0 * distance(uv, lightPositions[i])));\n    }\n\n    // Cargar textura\n    vec4 texColor = texture(iChannel0, uv);\n\n    // Combinar fragColor y texColor (mezcla simple)\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < 3; ++i) {\n        finalColor += cloudIntensity * lightIntensities[i] * lightColors[i];\n    }\n\n    // Ajustar la intensidad de la textura y mezclar con el color final\n    finalColor *= 1.0 - textureIntensity; // Reducir la intensidad general para evitar que sea demasiado brillante\n    finalColor += texColor.rgb * textureIntensity; // Añadir una pequeña cantidad de la textura para mantener detalle\n\n    // Asignar el color final a la salida\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}