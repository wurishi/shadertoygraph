{"ver":"0.1","info":{"id":"XtdyR8","date":"1531544055","viewed":113,"name":"Desk","username":"Hsiett","description":"Just for fun. Shade a desk based on https://www.shadertoy.com/view/XllBD2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cube","fun","desk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n// \n\n//Adapted from:\n//https://www.shadertoy.com/view/XllBD2\n\n\n//David Hoskins hash: https://www.shadertoy.com/view/4djSRW \nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z)*2.0 - 1.0;\n}\n\nfloat gnoise(float p) \n{\n    float i = floor(p);\n\tfloat f = fract(p);\n    \n    float a = dot(hash11(i), f);\n    float b = dot(hash11(i + 1.0), f - 1.0);\n    \n    float u = smoothstep(0.0, 1.0, f);\n    return mix(a, b, u);\n}\n\nfloat segment(vec2 uv, float e, vec2 a, vec2 b)  {         \n    b -= a;\n    uv -= a;\n    return smoothstep(0.0003, 0.0003 + 1.5*e, \n                      length( uv - b * clamp(dot(b, uv) / dot(b, b), 0.0, 1.0)));\n}\n\nfloat point(vec2 uv, float e, vec2 p) \n{\n\treturn smoothstep(0.002, 0.002 + 1.5*e, length(uv - p)); \n}\n\n//v1->v2->v3->v4 in clock order or counter-clock order.\nvec3 surface(vec2 uv, vec2 v1, vec2 v2, vec2 v3, vec2 v4)\n{\t\n    vec3 vside1=cross(vec3(uv-v1,0),vec3(v2-v1,0));\n    vec3 vside2=cross(vec3(uv-v2,0),vec3(v3-v2,0));\n    vec3 vside3=cross(vec3(uv-v3,0),vec3(v4-v3,0));\n    vec3 vside4=cross(vec3(uv-v4,0),vec3(v1-v4,0));\n    \n    if(sign(dot(vside1,vside2))==sign(dot(vside2,vside3))&&\n       sign(dot(vside3,vside4))==sign(dot(vside2,vside3)))\n    {\n       return vec3(0.8,0.8,0.8);   \n    }\n    \n    return vec3(0.0,0.0,0.0);\n}\n\nvec2 transform(vec3 p, vec4 q) \n{\n    p += 2.0 * cross(q.xyz, cross(q.xyz, p) + q.w * p);\n    return p.xy / (p.z + 10.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat e = 1.0 / iResolution.x;\n    vec2 uv = (fragCoord - iResolution.xy*0.5) * e;\n    \n    float t = iTime*0.3;//74.50: a steady desk;\n    \n    vec3 a = vec3(gnoise(t + 2.0) * 3.1, \n                  gnoise(t + 6.0) * 3.5, \n                  gnoise(t + 4.0) * 3.2);\n    float s = clamp((gnoise(t + 10.0) + 0.5), -1.0, 1.0);\n    vec4 q = normalize(vec4(a * s, sqrt(1.0 - s*s))); \n    \n    vec2 b1 = transform(vec3(-1.0, -1.0, -1.0), q);\n    vec2 b2 = transform(vec3(-1.0, -1.0,  1.0), q);\n    vec2 b3 = transform(vec3( 1.0, -1.0,  1.0), q);\n    vec2 b4 = transform(vec3( 1.0, -1.0, -1.0), q);\n   \n    vec2 t1 = transform(vec3(-1.0, 1.0, -1.0), q);\n    vec2 t2 = transform(vec3(-1.0, 1.0,  1.0), q);\n    vec2 t3 = transform(vec3( 1.0, 1.0,  1.0), q);\n    vec2 t4 = transform(vec3( 1.0, 1.0, -1.0), q);\n    \n    vec2 o = transform(vec3(0.0), q);\n    \n    float v = 1.0;\n    //v *= segment(uv, e, b1, b2);\n    //v *= segment(uv, e, b2, b3);\n    //v *= segment(uv, e, b3, b4);\n    //v *= segment(uv, e, b4, b1);\n    \n    v *= segment(uv, e, t1, t2);\n    v *= segment(uv, e, t2, t3);\n    v *= segment(uv, e, t3, t4);\n    v *= segment(uv, e, t4, t1);\n    \n    v *= segment(uv, e, b1, t1);\n    v *= segment(uv, e, b2, t2);\n    v *= segment(uv, e, b3, t3);\n    v *= segment(uv, e, b4, t4);\n    \n    v *= point(uv, e, b1);\n    v *= point(uv, e, b2);\n    v *= point(uv, e, b3);\n    v *= point(uv, e, b4);\n    \n    v *= point(uv, e, t1);\n    v *= point(uv, e, t2);\n    v *= point(uv, e, t3);\n    v *= point(uv, e, t4);\n    //v *= point(uv, e, o);\n    \n    \n    vec3 faceColor=vec3(0.0,0.0,0.0);\n    \n    //fill the desk surface\n    faceColor=surface(uv,t1,t2,t3,t4);\n    \n\n    fragColor = vec4(vec3(sqrt(v))-faceColor, 1.0); \n}","name":"Image","description":"","type":"image"}]}