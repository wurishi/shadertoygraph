{"ver":"0.1","info":{"id":"Xtd3Dj","date":"1471691083","viewed":211,"name":"Perlin Noise","username":"AsGreyWolf","description":"simple perlin noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","perlinnoise","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat linear(float a, float b, float t){\n    return a + (b - a) * t;\n}\nfloat bilinear(float tl, float tr, float bl, float br, float x, float y){\n\treturn linear(linear(tl, tr, x), linear(bl, br, x), y);\n}\nfloat quintic(float t){\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\nfloat biquintic(float tl, float tr, float bl, float br, float x, float y){\n\treturn bilinear(tl, tr, bl, br, quintic(x), quintic(y));\n}\nvec2 gridCell(vec2 x){\n\treturn floor(x);\n}\nvec2 randV(vec2 c){\n    float r = rand(c*0.005);\n    if(r<0.25) return vec2(0,1);\n    if(r<0.5) return vec2(0,-1);\n    if(r<0.75) return vec2(1,0);\n    return vec2(-1,0);\n}\nfloat perlin(vec2 c){\n    vec2 cell = gridCell(c);\n    vec2 dc = c-cell;\n    float tl = dot(dc, randV(cell));\n    float tr = dot(vec2(dc.x-1.0, dc.y), randV(vec2(cell.x+1.0,cell.y)));\n    float bl = dot(vec2(dc.x, dc.y-1.0), randV(vec2(cell.x,cell.y+1.0)));\n    float br = dot(vec2(dc.x-1.0, dc.y-1.0), randV(vec2(cell.x+1.0,cell.y+1.0)));\n    return biquintic(tl, tr, bl, br, dc.x, dc.y);\n}\nfloat perlin5(vec2 c){\n    float amplitude = 1.0;\n    float v = 0.0;\n    float m = 0.0;\n    for(int i=0;i<5;i++){\n        v+=perlin(c)*amplitude;\n        m+=amplitude;\n        amplitude/=2.0;\n        c*=2.0;\n    }\n    return v/m;\n}\nfloat coeff(){\n    float t = iTime/5.0;\n    t -= floor(t);\n    t *= 2.0;\n    if(t<=1.0)\n        return t;\n    return 2.0-t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float size = 0.03+0.1*coeff();\n\tvec2 uv = fragCoord.xy / iResolution.xy / size;\n    uv.x *= iResolution.x/iResolution.y;\n    float v = perlin5(uv)*0.5+0.5;\n    fragColor = vec4(v,v,v,1.0);\n}","name":"Image","description":"","type":"image"}]}