{"ver":"0.1","info":{"id":"stKSDt","date":"1641569413","viewed":56,"name":"Mini planet system","username":"Proger","description":"its my first raymarching engine","likes":1,"published":1,"flags":16,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nvec3 cube = vec3(0, 0 ,6);\nvec3 light;\nfloat smin(float a, float b, float k)\n{\n    return log2(exp2(k * a) + exp2(k * b)) / k;\n}\nfloat sdf_cube(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat sdf_sphere(vec3 p, vec4 sp){\n    return length(p - sp.xyz) - sp.w;\n}\nvec2 GetDist(vec3 p){\n    float sp = sdf_sphere(p, vec4(cube,1));\n    float sp1 = sdf_sphere(p, vec4(cube - vec3(sin(iTime * 1.71)*4.3, 0., cos(iTime * 1.71)*4.3),0.2));\n    float sp2 = sdf_sphere(p, vec4(cube - vec3(sin(iTime)*4., 0., cos(iTime)*4.),0.3));\n    float id = 1.;\n    if(sp1 < sp){\n        id = 2.;\n        if(sp2 < sp1) id = 3.;\n    }\n    if(sp2 < sp) id = 3.;\n    return vec2(min(sp,smin(sp1, sp2, -3.)), id);\n}\nvec4 RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.0;\n    for(int i = 0; i < 60; i++){\n        vec3 p = ro + dO * rd;\n        float ds = GetDist(p).x;\n        dO += ds;\n        if(ds < 0.005) return vec4(p, GetDist(p).y);\n        if(dO > 20.) return vec4(0);\n    }\n    return vec4(0);\n}\nvec3 ro = vec3(0, 1, 0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 clr = vec3(0);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    light = cube + vec3(-5,10,-5);\n    vec4 d = RayMarch(ro, rd);\n    vec3 color = vec3(0);\n    if(d.xyz != vec3(0.)){\n        if(d.w == 1.)color = vec3(dot(normalize(light), normalize(d.xyz))) * vec3(1,1,2);\n        if(d.w == 2.)color = vec3(dot(normalize(light), normalize(d.xyz))) * vec3(1,2,1);\n        if(d.w == 3.)color = vec3(dot(normalize(light), normalize(d.xyz))) * vec3(2,1,1);\n    }\n    if(d != vec4(0))fragColor = vec4(color, 1.);\n    else fragColor = texture(iChannel1, uv)/2.; \n}","name":"Image","description":"","type":"image"}]}