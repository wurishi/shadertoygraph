{"ver":"0.1","info":{"id":"sdcyzB","date":"1653622359","viewed":104,"name":"3D Egg / Raindrop","username":"nelsonkuang","description":"3D Egg / Raindrop","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["egg","raindrop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.1415926535897932384626433832795;\n\n// 3d Raindrop / Egg: (x^2 + y^2 + z^2)^2 - 2 * (x^2 + y^2 + z^2) + n * (y^2 + z^2)=0 (n>0)\nfloat sdRaindrop3D(vec3 p, float n, vec3 offset) {\n  float scale = .029;\n\n  p.x = p.x - offset.x;\n\n  if(p.x > 1.0)\n    return MIN_DIST + PRECISION;\n\n  p.y = p.y - offset.y;\n  p.z = p.z - offset.z;\n\n  p *= scale;\n\n  float x = p.x;\n  float y = p.y;\n  float z = p.z;\n\n  return (x * x + y * y + z * z) * (x * x + y * y + z * z) - 2.0 * (x * x + y * y + z * z) + n * (y * y + z * z);\n}\n\nfloat sdScene(vec3 p) {\n  return sdRaindrop3D(p, 4.0, vec3(22.188773, 0., 0.));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n\n  for(int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdScene(p);\n    depth += d;\n    if(d < PRECISION || depth > MAX_DIST)\n      break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(vec3 p) {\n  vec2 e = vec2(1.0, -1.0) * 0.0005;\n  return normalize(e.xyy * sdScene(p + e.xyy) +\n    e.yyx * sdScene(p + e.yyx) +\n    e.yxy * sdScene(p + e.yxy) +\n    e.xxx * sdScene(p + e.xxx));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n  vec2 mouseUV = iMouse.xy / iResolution.xy;\n\n  vec3 backgroundColor = vec3(0.1);\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 101.814);\n\n  vec3 lightPosition = vec3(10, 0, 75);\n\n  vec3 diffuseColor = vec3(0, 0.6, 1);\n\n  vec3 rimColor = vec3(0.15);\n\n  vec3 rd = normalize(vec3(uv, -1));\n  float d = rayMarch(ro, rd);\n  vec3 p = ro + rd * d;\n  vec3 normal = calcNormal(p);\n  vec3 lightDirection = normalize(lightPosition - p);\n\n  float diffuse = clamp(dot(normal, lightDirection), 0., 1.);\n\n  float fresnel = pow(clamp(1. - dot(normal, -rd), 0., 1.), 5.);\n\n  col = diffuse * diffuseColor + fresnel * rimColor; // add the fresnel contribution\n\n  col = mix(backgroundColor, col, step(d - MAX_DIST, 0.));\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}