{"ver":"0.1","info":{"id":"ftVXz3","date":"1642953755","viewed":299,"name":"RGB Dithering (genuary2022 2)","username":"ml","description":"blue noise dithering. each pixel has an r,g and b value of 0 or 1.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["genuary","genuary2022"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat threshold(float Y, float t){\n    return Y < t ? 0. : 1.;\n}\n\nvec3 thresholdRgb(vec3 col, vec3 t){\n\n    //float diffR = col.r - t.r; \n    //float diffG = col.g - t.g; \n    //float diffB = col.b - t.b; \n    \n    //if(diffR > 0. && diffG > 0. && diffB > 0.) return vec3(1.);\n    \n    //if(diffR > diffG && diffR > diffB){\n    //    return vec3(threshold(col.r, t.r), 0., 0.);\n    //}else if(diffG > diffR && diffG > diffB){\n    //    return vec3(0., threshold(col.g, t.g), 0.);\n    //}else{\n    //    return vec3(0., 0., threshold(col.b, t.b));\n    //}\n    \n    return vec3(threshold(col.r, t.r), threshold(col.g, t.g), threshold(col.b, t.b));\n}\n\nfloat halfThreshold(float Y){\n    return Y < 0.5 ? 0. : 1.;\n}\n\n\nfloat randomThreshold(float Y, vec2 fragCoord){\n    return Y < hash12(fragCoord) ? 0. : 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    //float n = 30.;\n  \n    //vec2 fc = floor(fragCoord/n*2.)*n/2.;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //uv.x *=iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 imgCol = texture(iChannel0, uv).rgb;\n\n    float Y = luminance(imgCol);\n        \n    vec3 t = texture(iChannel1, fragCoord/1024.).rgb;\n    \n    vec3 outCol = thresholdRgb(imgCol, t);\n    \n    //vec3(threshold(Y, t.r));\n    \n    // Output to screen\n    fragColor = vec4(outCol, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//https://stackoverflow.com/a/56678483\n\nfloat sRGBtoLin(float colorChannel) {\n        // Send this function a decimal sRGB gamma encoded color value\n        // between 0.0 and 1.0, and it returns a linearized value.\n\n    if ( colorChannel <= 0.04045 ) {\n        return colorChannel / 12.92;\n    } else {\n        return pow((( colorChannel + 0.055)/1.055),2.4);\n    }\n    \n}\n\nfloat luminance(vec3 col){\n    float Y = (0.2126 * sRGBtoLin(col.r) + 0.7152 * sRGBtoLin(col.g) + 0.0722 * sRGBtoLin(col.b));\n    return Y;\n}\n\nfloat YtoLstar(float Y) {\n     // Send this function a luminance value between 0.0 and 1.0,\n      // and it returns L* which is \"perceptual lightness\"\n\n    if ( Y <= 0.008856)  {\n        return Y * 903.3; \n    } else {\n        return pow(Y,1./3.) * 116. - 16.;\n    }\n    \n\n}\n\nfloat percievedLightness(vec3 col){\n    return YtoLstar(luminance(col));\n}\n\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}","name":"Common","description":"","type":"common"}]}