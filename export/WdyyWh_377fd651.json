{"ver":"0.1","info":{"id":"WdyyWh","date":"1602652390","viewed":187,"name":"Montecarlo PDE","username":"lamminade","description":"test shader","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Playing with Keenan Crane's latest paper in collab with\n// Rohan Sawhney: http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/paper.pdf[/url]\n//\n// See https://www.shadertoy.com/view/WdXfzl for a more complex example\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = texelFetch(iChannel0,ivec2(fragCoord),0);\n    fragColor = vec4(data.xyz/data.w, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://iquilezles.org/articles/distfunctions\nvec4 sdLine( in vec2 p, in vec2 a, in vec2 b, in vec3 ca, in vec3 cb)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    float dist = length(pa-h*ba);\n    // step to determine what side of the line p is on\n    float s = step(0.0,pa.x*ba.y-pa.y*ba.x);\n    // mix returns colour ca for one side and cb for the other\n    return vec4(dist, mix(ca,cb,s));\n}\n\n// This function holds the scene\nvec4 map( in vec2 p ) {\n\tvec3 pos = vec3(1, 1, 0);\n    vec3 neg = vec3(0, 0, 0);\n    vec3 green = vec3(0, 0, 1);\n    \n    vec4 d  = sdLine(p, vec2(-0.3, -0.3),  vec2(-0.3, 0.7), green, pos)-0.05;\n    vec4 d2 = sdLine(p, vec2(0.7, 0.1), vec2(0.7, 0.7), pos, green)-0.05;\n    vec4 d3 = sdLine(p, vec2(-0.3, -0.3),  vec2(0.7, -0.3), pos, green)-0.05;\n    vec4 d4 = sdLine(p, vec2(-0.3, 0.7),  vec2(0.7, 0.7), green, pos)-0.05;\n    vec4 d5 = sdLine(p, vec2(-1, -1), vec2(-1, 1), neg, neg)-0.05;\n    vec4 d6 = sdLine(p, vec2(1, -1), vec2(1, 1), neg, neg)-0.05;\n    vec4 d7 = sdLine(p, vec2(-1, -1), vec2(1, -1), neg, neg)-0.05; \n    vec4 d8 = sdLine(p, vec2(-1, 1), vec2(1, 1), neg, neg)-0.05; \n    \n    if( d2.x<d.x ) d = d2;\n    if( d3.x<d.x ) d = d3;\n    if( d4.x<d.x ) d = d4;\n    if ( d5.x<d.x ) d = d5;\n    if ( d6.x<d.x ) d = d6;\n    if ( d7.x<d.x ) d = d7;\n    if ( d8.x<d.x ) d = d8;\n\n    return d;\n}\n\n\n// --------------------------------------\n// oldschool rand() from Visual Studio\n// --------------------------------------\nint  seed = 1;\nvoid srand(int s ) { seed = s; }\nint  rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\n// --------------------------------------\n\n\n// --------------------------------------\n// hash to initialize the random sequence (copied from Hugo Elias)\n// --------------------------------------\nint hash( int n )\n{\n\tn = (n << 13) ^ n;\n    return n * (n * n * 15731 + 789221) + 1376312589;\n}\n\n// --------------------------------------\n\nvec2 randomInCircle( void )\n{\n    float an = 6.283185*float(rand())/32767.0;\n    return vec2(cos(an),sin(an));\n}\n    \n// WoS\nvec3 march( in vec2 p )\n{\n    vec4 h=vec4(0.0);\n\tfor( int i=0; i<32; i++ )\n    {\n        h = map(p);\n        if( h.x<0.001 ) break;\n        p = p + h.x*randomInCircle();\n    }\n    return h.yzw;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// init randoms\n    ivec2 q = ivec2(fragCoord);\n    srand( hash(q.x+hash(q.y+hash(iFrame))));\n    \n\n    // solve\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = march(p);\n\n    // montecarlo\n    vec4 data = texelFetch(iChannel0,ivec2(fragCoord),0);\n    fragColor = data + vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}