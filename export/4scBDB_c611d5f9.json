{"ver":"0.1","info":{"id":"4scBDB","date":"1526995686","viewed":333,"name":"basemodel","username":"louis_C","description":"modeling","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Sph (vec3 pos, float radius){\nreturn length(pos)-radius;\n}\nfloat cyl (vec3 pos , vec2 h){\n    vec2 d = abs (vec2(length(pos.xz),pos.y))-h;\n    return min(max(d.x,d.y),0.0)+length(max(d,0.));\n}\nfloat cyl2 (vec3 pos , vec2 h){\n    vec2 d = abs (vec2(length(pos.xz),pos.y))-h;\n    return min(max(d.x,d.y),0.0)+length(max(d,0.))-0.15;\n}\nfloat plane (vec3 pos , vec4 n){\n    return dot(pos,n.xyz)+n.w;}\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nvec3 rep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\nvec4 map (vec3 pos){\nvec4 scene = vec4(1.);\nfloat s1 = Sph(pos,2.);\nfloat s1bis = Sph(pos,2.15);\nfloat s2 = cyl(pos+vec3(0.,-3.8,0.),vec2(2.,2.));\n    float s2bis = cyl2(pos+vec3(0.,-3.8,0.),vec2(2,2));\nfloat s3 = min(s1,s2);\n    float s3bis = smin(s1bis,s2bis,0.5);\n    float reg = smoothstep(0.75,0.6,fract(iTime*0.2));\n float s4 = distance(pos.y,mix(-10.,10.,fract(iTime*0.2)))-3.\n     +(sin(pos.x*5.)+sin(pos.z*5.));   \n    float s6 = length(pos.xz-vec2(0.))-2.;\n    float s8 = distance(pos.xz,vec2(0.))-0.5;\n    float s9 = smin (s3bis,s8,1.);\n    float s7 = max (s4,s9);\n    float s5 = min (s3,s7);\n    float sepa = mix(0.,1.,smoothstep(0.,0.1,s2));\n    float sepa2 = mix(0.,1.,smoothstep(0.,0.1,s7));\n scene = vec4(vec3(length(pos.xz)*0.5,sepa,sepa2),s5);\n \nreturn scene;\n}\nvec3 getN (vec3 pos) {\n    float e = 0.01;\n    return normalize(vec3(map(pos+vec3(e,0,0)).w-map(pos-vec3(e,0,0)).w,\n                          map(pos+vec3(0,e,0)).w-map(pos-vec3(0,e,0)).w,\n                          map(pos+vec3(0,0,e)).w-map(pos-vec3(0,0,e)).w));}\nfloat getShadow (vec3 pos, vec3 at, float k) {\n    vec3 dir = normalize(at - pos);\n    float maxt = length(at - pos);\n    float f = 1.;\n    float t =.001*1000.;\n    for (float i = 0.; i <= 1.; i += 1./64.) {\n        float dist = map(pos + dir * t).w;\n        if (dist < .001) return 0.;\n        f = min(f, k * dist / t);\n        t += dist;\n        if (t >= maxt) break;\n    }\n    return f;\n}\nfloat overlay(float base, float blend) {\n\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n}\nvec3 overlay(vec3 base, vec3 blend) {\n\treturn vec3(overlay(base.r,blend.r),overlay(base.g,blend.g),overlay(base.b,blend.b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv =1.-2.* fragCoord/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 eye = vec3(0.,0.,-4.);\n    vec3 ray = normalize(vec3(uv,1.));   \n    vec3 pos = eye;\n    float shade = 0.;\n    for (int i=0; i<64;++i){\n    float dist = map(pos).w;\n    if(dist<0.001){\n    shade = 1.-float(i)/64.;\n    break;\n    }\n    pos += ray*dist;\n    }\n    vec3 lipos = vec3(-3.,-1.,-5.);\n    vec3 lidir = normalize(lipos-pos);\n    vec3 nor = getN(pos);\n \tfloat shadow =getShadow(pos, lipos, 64.)*clamp(dot(lidir,nor),0.,1.);\n   float test =clamp( map(pos).w,0.,1.);\n    float fres = 1.-clamp(-dot(nor,vec3(0.,0.,1.)),0.,1.);\nfloat test2 =smoothstep(0.,1.,mix(map(pos).x,mix(map(pos).x,1.,step(0.,-nor.y)),\n                                   map(pos).y));\n    vec3 col1 = mix(clamp(mix(vec3(0.5,0.5,0.59),vec3(1.),(shadow*0.8)*test2)+\n              (fres*0.4)-(clamp(-nor.y,0.,1.))*0.2*(1.-map(pos).y),0.,1.),\n        mix(vec3(1.),vec3(0.5,0.5,0.59),distance(vec2(0.),uv*0.5)),test)\n        *clamp(test2+vec3(0.42,0.42,0.45),0.,1.);\n    vec3 col2 = (col1-0.5)*0.5+0.5+0.25; \n    float spec = pow(clamp(dot(nor,vec3(0.,0.,-1.)),0.,1.),200.);\n    vec3 col3 = clamp(mix(vec3(1.,0.,1.),vec3(1.,0.5,1.),shadow)+fres*clamp\n                      (-uv.y*2.+1.,0.,1.)+spec*0.5,0.,1.);\n    vec3 col4 = mix (col3,col2,map(pos).z);\n        vec2 uv2 = uv*nor.xy*3. ;\n    float col5 =clamp(smoothstep(1.5,0.5,distance(vec2(0.),uv2))+0.3,0.,1.)*\n        clamp(smoothstep(0.8,0.2,distance(vec2(0.),uv2))+0.5,0.,1.)*\n        clamp(smoothstep(0.4,0.,distance(vec2(0.),uv2))+0.9,0.,1.); \n    vec3 col6 = overlay(col4,vec3(mix(mix(1.-col5,0.5,0.8),0.5,map(pos).z)));\n   \n    fragColor = vec4(col6,1.);\n    \n}","name":"Image","description":"","type":"image"}]}