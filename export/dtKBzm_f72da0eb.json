{"ver":"0.1","info":{"id":"dtKBzm","date":"1701956694","viewed":88,"name":"Aquarela de Ions","username":"Drawlim","description":"original by bsdBeard https://www.shadertoy.com/view/4d2XR1, slightly modified","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["flare","prossedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// original by bsdBeard https://www.shadertoy.com/view/4d2XR1, slightly modified\n#define ray_brightness 10.\n#define gamma 5.\n#define ray_density 4.5\n#define curvature 15.\n#define red   4.\n#define green 1.0\n#define blue  .3 \n\n\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// !!!!!!!!!!!!! UNCOMMENT ONE OF THESE TO CHANGE EFFECTS !!!!!!!!!!!\n// MODE IS THE PRIMARY MODE\n#define MODE normalize\n// #define MODE \n\n#define MODE3 *\n// #define MODE3 +\n#define innerCircleScale 0.5 \n\n#define MODE2 r +\n// #define MODE2 \n\n// #define DIRECTION +\n#define DIRECTION -\n\n#define SIZE 0.1\n\n#define INVERT /\n// #define INVERT *\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nfloat noise(in vec2 x) {\n    return sin(x.x * 10.0) + sin(x.y * 10.0); // Modify this to change noise\n}\n\n// FLARING GENERATOR, A.K.A PURE AWESOME\nmat2 m2 = mat2(0.80, 0.60, -0.60, 0.80);\nfloat fbm(in vec2 p) {\t\n    float z = 20.;       // EDIT THIS TO MODIFY THE INTENSITY OF RAYS\n    float rz = -0.01;   // EDIT THIS TO MODIFY THE LENGTH OF RAYS\n    p *= 0.25;          // EDIT THIS TO MODIFY THE FREQUENCY OF RAYS\n    for (int i = 1; i < 6; i++) {\n        rz += abs((noise(p) - 0.5) * 2.) / z;\n        z = z * 2.;\n        p = p * 2. * m2;\n    }\n    return rz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 prevMouse = vec2(0.0);\n    // Calculate mouse delta\n    vec2 mouseDelta = iMouse.xy - prevMouse;\n    prevMouse = iMouse.xy;\n    \n    float t = DIRECTION iTime * .33; \n    vec2 uv = fragCoord.xy / iResolution.xy - vec2(mouseDelta.x / iResolution.x, mouseDelta.y / iResolution.y);\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= curvature * SIZE;\n    \n    float r = sqrt(dot(uv, uv)); // DISTANCE FROM CENTER, A.K.A CIRCLE\n    float x = dot(MODE(uv), vec2(.5, 0.)) + t;\n    float y = dot(MODE(uv), vec2(.0, .5)) + t;\n    \n    float val;\n    val = fbm(vec2(MODE2 y * ray_density, MODE2 x MODE3 ray_density)); // GENERATES THE FLARING\n    val = smoothstep(gamma * .01 - .1, ray_brightness + (gamma * 0.02 - .1) + .001, val);\n    val = sqrt(val); // WE DON'T REALLY NEED SQRT HERE, CHANGE TO 15. * val FOR PERFORMANCE\n    \n    r *= mix(1., innerCircleScale, smoothstep(0.1, 0.3, r));\n    \n    vec3 col = val INVERT vec3(red, green, blue);\n    col = 1. - col; // WE DO NOT NEED TO CLAMP THIS LIKE THE NIMITZ SHADER DOES!\n    col = mix(col, vec3(1.), 30. * r - 266.667 * r); // REMOVE THIS TO SEE THE FLARING\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}