{"ver":"0.1","info":{"id":"cldyWl","date":"1699824422","viewed":56,"name":"random domino tiling","username":"jt","description":"Tiling of randomly (horizontally/vertically) aligned [url=https://en.wikipedia.org/wiki/Domino_tiling]domino tiles[/url].\nWORK IN PROGRESS: Need to fix problems with indices (visible by sporadically appearing squares).\nClick to display domino tile outline","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["random","tiling","tesselation","domino"],"hasliked":0,"parentid":"ctdyWl","parentname":"random domino square tiling"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/cldyWl random domino tiling, 2023 by jt\n// based on https://www.shadertoy.com/view/dtcyWs random domino merge align tiling\n\n// Tiling of randomly (horizontally/vertically) aligned domino tiles\n// (https://en.wikipedia.org/wiki/Domino_tiling).\n// Click to display domino tile outlines.\n\n// WORK IN PROGRESS:\n// Need to fix problems with indices (visible by sporadically appearing squares).\n\n// NOTE: It is possible to create a domino tiling from a lozenge tiling\n//       https://www.shadertoy.com/view/mlGczD domino lozenge relation quantize\n//       but that quantize approach is limited to a subset of possible patterns.\n\n// Potentially interesting articles:\n// Eric Fusy: \"random sampling of domino and lozenge tilings\" (page 5)\n// https://publications.mfo.de/bitstream/handle/mfo/457/Snapshot-2016-002-Fusy.pdf\n// https://www.imaginary.org/sites/default/files/snapshots/2016-002-fusy.pdf\n// Quote: \"a combinatorial identity for these tilings\n//         discovered by Elkies, Kuperberg, Larsen, and Propp[1]\n//         and is described in the companion snapshot [7]\" (page 2)\n//        [1] Elkies, Kuperberg, Larsen, Propp: Alternating sign matrices and domino tilings\n//            https://arxiv.org/abs/math/9201305\n//        [7] Juanjo Rue: Domino tilings of the Aztec Diamond\n//            https://publications.mfo.de/bitstream/handle/mfo/443/Snapshot-2015-016-Rue.pdf\n//            https://www.imaginary.org/de/node/992\n\n// tags: random, tiling, tesselation, domino\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.shadertoy.com/view/DlcyWs alternating domino tiling, 2023 by jt\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nbool random_domino_pair_tiling_flip(ivec2 tile) // https://www.shadertoy.com/view/ct3cWs random domino pair tiling (jt)\n{\n    return hash12(floor(iTime)+vec2(tile)) < 0.5;\n}\n\nivec2 random_domino_tiling(vec2 p)\n{\n    ivec2 tile = ivec2(floor(p));\n    bool flip = random_domino_pair_tiling_flip(tile); // calculate domino direction\n    //ivec2 quadrant = ivec2(step(0.5, fract(p))) * 2 - 1; \n    ivec2 quadrant = ivec2(0.5 < fract(p).x, 0.5 < fract(p).y) * 2 - 1; \n    \n    // check alignment: can adjacent dominos be combined into a square?\n    bool merge =\n        flip ?\n        random_domino_pair_tiling_flip(tile + ivec2(quadrant.x,0)) :\n        !random_domino_pair_tiling_flip(tile + ivec2(0,quadrant.y));\n\n    if(!merge) return //ivec2(0);\n        2*tile + quadrant;\n\n    // recalculate index of tile made of merged/cross boundary domino pairs\n    tile = flip ?\n        (2*tile + ivec2(quadrant.x,0)): // merge horizontal\n        (2*tile + ivec2(0,quadrant.y)); // merge vertical\n\n    flip = random_domino_pair_tiling_flip(tile); // recalculate orientation of merged/cross boundary domino pair\n    return // merge across tiles\n        !flip ?\n        2*tile + ivec2(quadrant.x,0): // merge & quantize to horizontal dominos\n        2*tile + ivec2(0,quadrant.y); // merge & quantize to vertical dominos\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2. * I - R) / R.y;\n    vec3 color =\n        all(lessThan(abs(I), vec2(1))) ?\n        hash32(vec2(random_domino_tiling(5.0*I.xy))) :\n        vec3(0);\n    if(iMouse.z>0.0) // click to display domino outlines\n    {\n        // Thanks to Shane for domino outline visualization!\n        I -= 4./R.y;\n        vec3 color2 =\n            all(lessThan(abs(I), vec2(1))) ?\n            hash32(vec2(random_domino_tiling(5.0*I.xy))) :\n            vec3(0); \n        if(any(greaterThan(abs(color2 - color), vec3(0)))) color *= 0.;\n        //vec3 di = abs(color2 - color);\n        //if(di.x>0. || di.y>0. || di.z>0.) color *= 0.;\n    }\n    //if(dFdx(color) != vec3(0.0) || dFdy(color) != vec3(0.0)) color *= 0.0; // failed attempt to draw outlines\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}