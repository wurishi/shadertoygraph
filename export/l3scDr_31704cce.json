{"ver":"0.1","info":{"id":"l3scDr","date":"1726069693","viewed":11,"name":"Fork Flower 3 vd","username":"vd03","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color, vec3 colour)\n{\n    center = vec2(center.x*(1.0+sin(iTime*2.0+32.43*fract(iTime/100.0))/10.0),center.y*(1.0+sin(iTime*2.0)/10.0));\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    float m = length(center - uv)/radius;\n    m = 3.0*m*m*m*m-2.0*m*m*m;\n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(mix(color,colour,m), 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    a -= iTime/1.5;\n    float x = a/3.141592653589793238462643383279502884197 * 3.5;\n    return (radius) + 250.0 * sin(iTime) * abs(bias(fract(x)<0.5?fract(x):1.0-fract(x),0.8));\n}\n\nfloat computeRadius1(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    a -= iTime/2.0 +200.0;\n    float x = a/3.141592653589793238462643383279502884197 * 3.5 * a;\n    return 1.5*((radius) + 250.0 * sin(iTime) * abs(bias(fract(x)<0.5?fract(x):1.0-fract(x),0.8)));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \t\n\t// Circle\n\tvec3 red = rgb(mix(0.0,255.0,abs(sin(iTime))), mix(0.0,255.0,abs(sin(iTime/20.0+1232.0))), mix(0.0,255.0,abs(sin(iTime/32.0+32.0))));\n    float t = iTime - 20.0;\n    t /= 2.0;\n    vec3 red2 = rgb(mix(0.0,255.0,abs(sin(t))), mix(0.0,255.0,abs(sin(t/20.0+1232.0))), mix(0.0,255.0,abs(sin(t/32.0+32.0))));\n\n    // Background layer\n\tvec4 layer1 = circle(uv, center,computeRadius1(uv), red, red2); \n\n\n\tvec4 layer2 = circle(uv, center, radius, red, red2);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}