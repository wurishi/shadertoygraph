{"ver":"0.1","info":{"id":"Xd2cDw","date":"1492362633","viewed":76,"name":"2d disfield character","username":"ostkaka","description":"2d disfield character","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2ddisfieldcharacterost"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n#define FIELD_NULL vec4(vec3(0.), 1.)\n#define EPSILON 0.0001\n\nvec4 smin(inout vec4 a, vec4 b, float k) {\n    float h = clamp(0.5+0.5*(b.w-a.w)/k, 0., 1.);\n    return mix(b, a, h)-k*h*(1.-h);\n}\n\nvoid overlapField(inout vec4 a, inout vec4 b) {\n    a.rgb = mix(a.rgb, b.rgb, clamp(0.5 - 0.5 * iResolution.y * b.w, 0., 1.));\n    a = smin(a, b, 0.);\n    b = FIELD_NULL;\n}\n\nvec4 circle(vec2 pos, float r, vec3 color) {\n    return vec4(color, length(pos) - r);\n}\n\nvec4 ring(vec2 pos, float r, float w, vec3 color) {\n    return vec4(color, abs(length(pos) - r) - w);\n}\n\nvec4 rect(vec2 pos, vec2 size, vec3 color) {\n\tvec2 d = abs(pos) - size;\n  \treturn vec4(color, min(max(d.x, d.y),0.0) + length(max(d,0.0)));\n}\n\nvec4 triangle(vec2 pos, vec2 size, vec3 color) {\n    vec2 d = abs(pos) - size;\n  \treturn vec4(color, max(pos.y - size.y, dot(vec2(abs(pos.x), -pos.y - size.y), normalize(vec2(size.y, size.x/2.)))));\n}\n\nvec4 sharpCircle(vec2 pos, vec2 r, vec2 s, vec3 color) {\n    return vec4(color, (length((abs(pos) + s * r) / r * s) - 1.0) * r / s);\n}\n\nvec4 map(vec2 pos) {\n    vec2 mouse = 2. * iMouse.xy / iResolution.yy - iResolution.xy / iResolution.yy;\n\tvec4 a = FIELD_NULL;\n    vec4 b = FIELD_NULL;\n    \n    vec3 skinColor = vec3(0.8, 0.6, 0.5);\n    vec3 hairColor = vec3(0.1, 0.1, 0.1);\n    vec3 stickColor = vec3(0.5, 0.25, 0.0);\n    vec3 spadeColor = vec3(0.5, 0.5, 0.5);\n    \n    // Feet\n    b = smin(b, circle(vec2(-0.4, 0.3 * sin(2.*iTime)) - pos, 0.2, skinColor), 0.1);\n    b = smin(b, circle(vec2(0.4, -0.3 * sin(2.*iTime)) - pos, 0.2, skinColor), 0.1);\n    overlapField(a, b);\n    \n    // Body\n    b = smin(b, circle(vec2(-0.25, -0.05 * sin(2.*iTime)) - pos, 0.3, vec3(0.2, 0.25, 0.2)), 0.5);\n    b = smin(b, circle(vec2(0.25, 0.05 * sin(2.*iTime)) - pos, 0.3, vec3(0.2, 0.25, 0.2)), 0.5);\n    // Shoulders\n    b = smin(b, circle(vec2(-0.6, -0.2 * sin(2.*iTime)) - pos, 0.2, vec3(0.2, 0.25, 0.2)), 0.2);\n    b = smin(b, circle(vec2(0.6, 0.2 * sin(2.*iTime)) - pos, 0.2, vec3(0.2, 0.25, 0.2)), 0.2);\n    overlapField(a, b);\n    \n    // Head\n    b = smin(b, circle(-pos, 0.3, skinColor), 0.0);\n    overlapField(a, b);\n    \n    // Hair\n    b = smin(b, circle(vec2(-0.15, 0.) -pos, 0.15, hairColor), 0.1);\n    b = smin(b, circle(vec2(0.15, 0.) -pos, 0.15, hairColor), 0.1);\n    b = smin(b, circle(vec2(-0.1, -0.1) -pos, 0.15, hairColor), 0.1);\n    b = smin(b, circle(vec2(0.1, -0.1) -pos, 0.15, hairColor), 0.1);\n    b = smin(b, circle(vec2(0.0, -0.075) -pos, 0.225, hairColor), 0.1);\n    overlapField(a, b);\n    \n    \n    for (int i = 0; i < 20; i++)\n        a = smin(a, rect(vec2(-0.9 + 0.1 * float(i), 0.7) - pos, vec2(0.01, 0.01), vec3(0.5)), 0.0);\n    \n    // Cursor:\n    //a = smin(a, circle(mouse - pos + 0.2 * vec2(sin(1.0*iTime), cos(1.0*iTime)), 0.01, vec3(0., 1., 0.)), 0.01);\n    //a = smin(a, circle(mouse - pos - 0.2 * vec2(sin(1.0*iTime), cos(1.0*iTime)), 0.01, vec3(0.5, 0.25, 0.)), 0.01);\n    \n    return a;\n}\n\nfloat softShadow(vec2 pos, vec2 dir, float mint, float tmax )\n{\n\tfloat light = 1.0;\n    float rayDis = mint;\n    for(int i = 0; i < 32; i++)\n    {\n\t\tfloat dis = map(pos + dir*rayDis).w;\n        if(/*dis < EPSILON ||*/ rayDis > tmax) break;\n        light = min(light, 8.0* dis / rayDis);\n        rayDis += max(dis, 0.01);\n        \n    }\n    return clamp(light, 0.0, 1.0 );\n}\n\nvec2 calcNormal(vec2 pos) {\n    vec2 delta = vec2(\n        map(pos + vec2(EPSILON, 0.)).w - map(pos - vec2(EPSILON, 0.)).w,\n        map(pos + vec2(0., EPSILON)).w - map(pos - vec2(0., EPSILON)).w);\n    return delta / length(delta);\n}\n\nvec2 calcSurfPos(vec2 pos, vec2 dir, float targetDis) {\n    float rayDis = 0.0;\n    for(int i = 0; i < 16; i++) {\n        float dis = -targetDis + map(pos).w;\n        if (dis > 0.) break;\n        rayDis -= dis;\n    }\n    return pos + rayDis * dir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2. * fragCoord.xy / iResolution.yy - iResolution.xy / iResolution.yy;\n    vec4 point = map(uv);\n    float density = clamp(.5 - 0.5 * point.w * iResolution.y, 0., 1.);\n\tvec2 mousePos = (2. * iMouse.xy/iResolution.yy - 1.0 * iResolution.xy / iResolution.yy);\n    mousePos += 1.0 * length(uv - mousePos) * (-0.5 + texture(iChannel1, uv).xy);\n    vec2 normal = calcNormal(uv);\n    vec2 surfacePos = calcSurfPos(uv, normal, 0.0);\n    float light = 0.25 + 1. / (length(uv - mousePos) + 0.4 * length(surfacePos - uv)) * softShadow(surfacePos, -normalize(surfacePos - mousePos), 0.01, length(mousePos - surfacePos));\n    fragColor = vec4(density * point.rgb + 0.5 * light * (1. - density) * texture(iChannel0, uv).rgb,1.0);\n    //fragColor.rgb *= 0.9 + 0.1 * light;\n}","name":"Image","description":"","type":"image"}]}