{"ver":"0.1","info":{"id":"XfdcRS","date":"1730818942","viewed":126,"name":"fractalic sphere","username":"nayk","description":"originals fractal by gaz","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["fractal","sphere","source"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n#define R(p,a,r) mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvec3  rot(vec3 p,vec3 a,float t)\n{\n\ta=normalize(a);\n\treturn mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a);\n}\n\nfloat map(vec3 p)\n{\n\tp=rot(p,vec3(0.,1.,2.),10.);\n    p.zx=vec2(atan(p.z,p.x)/PI*4., length(p.zx)-1.5);\n   \n   \n    p.x=mod(p.x,.2)-.1;\n    return length(p.xy)-.07;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec3 e = .001*vec3(-1,1,1);\n    return normalize ( e*map(p+e) + e.yxy*map(p+e.yxy) + e.yyx*map(p+e.yyx) - e.xxx*map(p-e.xxx) );\n}\n\n\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\nfloat deFrameStella(vec3 p){\n    p = abs(p)-1.;\n    if (p.x < p.z) p.xz = p.zx;\n    if (p.y < p.z) p.yz = p.zy;\n    if (p.x < p.y) p.xy = p.yx;\n    return length(cross(p,normalize(vec3(0,1,1))))-0.1;\n}\n\nfloat map2(vec3 p){\n    return deFrameStella(p);\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<70;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nvec3 doColor(vec3 p)\n{\n    return vec3(.7,.5,.3)+cos(p*2.)*.5+.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec4 O=fragColor;\nvec2 C=fragCoord ;\n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0,0,-6);\n    vec3 rd = normalize(vec3(uv,3));\n    vec3 col= vec3(0);\n\tconst float maxd=50.;\n    float t=march(ro,rd,0.,maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=doColor(p); \n        vec3 n=calcNormal(p);      \n\t\tvec3 lightPos=ro+vec3(2,5,2);\n    \tvec3 li=lightPos-p;\n\t\tfloat len=length(li);\n\t\tli/=len;\n\t\tfloat dif=clamp(dot(n,li),0.1,1.);\n        col*=max(dif,0.);\n        float rimd=pow(clamp(1.-dot(reflect(-li,n),-rd),0.,1.),2.5);\n\t\tfloat frn=rimd+2.2*(1.-rimd);\n    \tcol*=frn*.8;\n        col*=max(.5+.5*n.y,.1);\n        col*=exp2(-2.*pow(max(0.,1.-map(p+n*.8)/.8),2.));\n        col+=vec3(.8,.6,.2)*pow(clamp(dot(reflect(rd,n),li),0.,1.),10.);\n    }\n    \n      O=vec4(0);\n    vec3 p2,r2=iResolution,d2=normalize(vec3((C-.5*r2.xy)/r2.y,1.));\n    for(float i=0.,e,g=0.,t=iTime;\n        i++<80.;\n        O.xyz+=mix(vec3(1),H(p2.z),.6)*.01/exp(.3*i*i*e)\n    ){\n        p2=d2*g,\n        p2.z-=2.,\n        p2=R(p2,normalize(H(t*.03)-.5),t*.3)-i/1e4;\n        for(int i=0;i++<3;)\n            p2=abs(p2),\n            p2=p2.y<p2.x?p2.zxy:p2.zyx;\n        vec2 q=asin(sin(p2.xz*30.));\n        g+=e=max(abs(length(p2)-1.)-.01,-(length(q+q.yx)-1.5)*.05)*.3;\n    }\n    col=pow(col*O.xyz,O.xyz);\n    fragColor.xyz=col;\n}","name":"Image","description":"","type":"image"}]}