{"ver":"0.1","info":{"id":"MslcDn","date":"1487771785","viewed":113,"name":"Midterms   GRAPHPROG","username":"mcad_30","description":"ONE HELL OF A SHADER. 10 SHADES OF GREY DARKER","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define TWOPI 6.2831\n\n#define patternNo 1\n\nvec3 colorRed = vec3 (1.0, 0.0, 0.0);\nvec3 colorBlack = vec3(1.0, 1.0, 1.0);\nmat2 rotate2d(float angle);\nfloat createShape(vec2 centerPosition, float side);\nmat2 scale2d(vec2 size);\n\n#if patternNo == 1\n// Opposition, Sequence, Diversity\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    //uv.x *= ratio;\n    uv *= 10.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1 = vec3(1.0);\n        \n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n   \tuv += squarePosition;\n    \n    square1 = vec3(step(createShape(uv - squarePosition, 2.0), 0.4));\n    \tif (mod(tileIdx.x, 2.) == mod(tileIdx.y, 2.))\n    {\n    \tuv -= squarePosition;\n    \tuv *= rotate2d(-iTime * 8.0);\n   \t\tuv += squarePosition;\n    \tsquare1 = vec3(step(createShape(uv - squarePosition, 2.0), 0.4));\n    }\n    \n    vec3 square2 = vec3(1.0);\n        \n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n   \tuv += squarePosition;\n    square2 = vec3(step(createShape(uv - squarePosition, 6.0), 0.2));\n        if (mod(tileIdx.x, 2.) == mod(tileIdx.y, 2.))\n    {\n    \tuv -= squarePosition;\n    \tuv *= rotate2d(-iTime * 8.0);\n   \t\tuv += squarePosition;\n    \tsquare2 = vec3(step(createShape(uv - squarePosition, 6.0), 0.2));\n    }\n    vec3 squares = square1 - square2;\n    squares *= colorRed;\n   \tfragColor = vec4(squares,1.0);\n}\n\n//Unity, Chaos, Sequence\n#elif patternNo == 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    uv *= 10.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1 = vec3(1.0);\n    uv -= squarePosition;\n   \tuv += squarePosition;\n    square1 = vec3(step(createShape(uv - squarePosition, 100.0), 0.5));\n    \n    vec3 square2 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n    uv *= scale2d(vec2(sin(iTime * 10.0)));\n   \tuv += squarePosition;\n    square2 = vec3(step(createShape(uv - squarePosition, 4.0), 0.3));\n    \n        if (mod(tileIdx.x, 2.) == mod(tileIdx.y, 2.))\n        {\n    \t\t\tuv -= squarePosition;\n    \t\t\tuv *= rotate2d(-iTime * 8.0);\n   \t\t\t\tuv += squarePosition;\n    \t\t\tsquare2 = vec3(step(createShape(uv - squarePosition, 4.0), 0.3));\n        }\n    vec3 squares1 = square1 - square2;\n    squares1 *= colorRed;\n    fragColor = vec4(squares1,1.0);\n}\n\n// Simplicity, Elegance, Opposition\n#elif patternNo == 3\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    //uv.x *= ratio;\n    uv *= 9.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1 = vec3(1.0);\n    if (mod(tileIdx.x, 2.) == mod(tileIdx.y, 2.))\n    {\n        uv -= squarePosition;\n    \tuv *= rotate2d(45.0 * PI / 180.0);\n        uv *= scale2d(vec2(sin(iTime * 10.0)));\n   \t\tuv += squarePosition;\n        square1 = vec3(step(createShape(uv - squarePosition, 4.0), 0.4));\n    }\n   \tfragColor = vec4(square1,1.0);\n}\n\n// Harmony, Order, Unity\n#elif patternNo == 4\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    uv *= 10.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime);\n   \tuv += squarePosition;\n    square1 = vec3(step(createShape(uv - squarePosition, 4.0), 0.3));\n    \n    \n    vec3 square2= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(-iTime * 2.0);\n   \tuv += squarePosition;\n    square2 = vec3(step(createShape(uv - squarePosition, 4.0), 0.3));\n    \n    vec3 square3= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n   \tuv += squarePosition;\n    square3 = vec3(step(createShape(uv - squarePosition, 2.0), 0.1));\n   \n    vec3 square4= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(-iTime * 8.0);\n   \tuv += squarePosition;\n    square4 = vec3(step(createShape(uv - squarePosition, 2.0), 0.1));\n    \n    vec3 squares = square1 - square2 + square3 + square4;\n    squares *= colorRed;\n    fragColor = vec4(squares,1.0);\n}\n\n// Chaos, Opposition, Unity\n#elif patternNo == 5\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    uv.x *= 4.0;\n    uv.y *= 1.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime);\n   \tuv += squarePosition;\n    square1 = vec3(step(createShape(uv - squarePosition, 8.0), 0.5));\n    \n    vec3 square2 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(-iTime * 4.0);\n   \tuv += squarePosition;\n    square2 = vec3(step(createShape(uv - squarePosition, 7.0), 0.4));\n    \n    vec3 square3= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n   \tuv += squarePosition;\n    square3= vec3(step(createShape(uv - squarePosition, 6.0), 0.3));\n    \n    vec3 square4= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d( -iTime * 4.0);\n   \tuv += squarePosition;\n    square4= vec3(step(createShape(uv - squarePosition, 5.0), 0.2));\n    \n    vec3 square5= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n   \tuv += squarePosition;\n    square5= vec3(step(createShape(uv - squarePosition, 4.0), 0.1));\n    \n    vec3 square6= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d( -iTime * 4.0);\n   \tuv += squarePosition;\n    square6= vec3(step(createShape(uv - squarePosition, 100.0), 0.04));\n    \n    vec3 squares1 = square1 - square2 + square3 - square4 + square5 - square6;\n    squares1 *= colorRed;\n    fragColor = vec4(squares1,1.0);\n}\n\n//Chaos, Emphasis, Unity\n#elif patternNo == 6\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    uv *= 10.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n   \tuv += squarePosition;\n    square1 = vec3(step(createShape(uv - squarePosition, 2.0), 0.1));\n    \n    vec3 square3 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(-iTime * 8.0);\n   \tuv += squarePosition;\n    square3 = vec3(step(createShape(uv - squarePosition, 2.0), 0.1));\n    \n    vec3 square2= vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(-iTime);\n   \tuv += squarePosition;\n    square2 = vec3(step(createShape(uv - squarePosition, 9.0), 0.2));\n    \n    vec3 squares = square1 - square2 + square3;\n    squares *= colorRed;\n    fragColor = vec4(squares,1.0);\n}\n\n// Chaos, Opposition, Hallucinating\n#elif patternNo == 7\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    uv *= 3.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    uv -= squarePosition;\n    uv *= rotate2d(45.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));\n    uv += squarePosition;\n    \n    vec3 square1 = vec3(step(createShape(uv - squarePosition, 4.0), 0.9));\n    vec3 square2 = vec3(step(createShape(uv - squarePosition, 4.0), 0.8));\n    vec3 square3 = vec3(step(createShape(uv - squarePosition, 4.0), 0.7));\n    vec3 square4 = vec3(step(createShape(uv - squarePosition, 4.0), 0.6));\n    vec3 square5 = vec3(step(createShape(uv - squarePosition, 4.0), 0.5));\n    vec3 square6 = vec3(step(createShape(uv - squarePosition, 4.0), 0.4));\n    vec3 square7 = vec3(step(createShape(uv - squarePosition, 4.0), 0.3));\n    vec3 square8 = vec3(step(createShape(uv - squarePosition, 4.0), 0.2));\n    vec3 square9 = vec3(step(createShape(uv - squarePosition, 4.0), 0.1));\n    vec3 square10 = vec3(step(createShape(uv - squarePosition, 4.0), 0.05));\n    \n    vec3 squares1 = (square1 - square2);\n    vec3 squares2 = (square3 - square4);\n    vec3 squares3 = (square5 - square6);\n    vec3 squares4 = (square7 - square8);\n    vec3 squares5 = (square9 - square10);\n    \n    vec3 squares = squares1 + squares2 + squares3 + squares4 + squares5;\n\tfragColor = vec4(squares,1.0);\n}\n\n//Beauty, Elegant, Harmony\n#elif patternNo == 8\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    uv *= 3.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1 = vec3(1.0);\n    uv -= squarePosition;\n   \tuv += squarePosition;\n    square1 = vec3(step(createShape(uv - squarePosition, 100.0), 0.5));\n    \n    vec3 square2 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n   \tuv += squarePosition;\n    square2 = vec3(step(createShape(uv - squarePosition, 2.0), 0.4));\n    \n    \tif (mod(tileIdx.x, 2.) == mod(tileIdx.y, 2.))\n    \t{\n        uv -= squarePosition;\n   \t \tuv *= rotate2d(-iTime * 8.0);\n   \t\tuv += squarePosition;\n    \tsquare2 = vec3(step(createShape(uv - squarePosition, 2.0), 0.4));\n   \t \t}\n    vec3 squares1 = square1 - square2;\n    squares1 *= colorRed;\n    fragColor = vec4(squares1,1.0);\n}\n\n//Simplicity, Beat, Elegant\n#elif patternNo == 9\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    uv *= 7.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(iTime * 4.0);\n    uv += squarePosition;\n    square1 = vec3(step(createShape(uv - squarePosition, 8.0), 0.5));\n    \n    \tif (mod(tileIdx.x, 2.) == mod(tileIdx.y, 2.))\n    \t{\n    \tuv -= squarePosition;\n    \tuv *= rotate2d(-iTime *8.0);\n        uv *= scale2d(vec2(sin(iTime * 6.0)));\n   \t \tuv += squarePosition;\n    \tsquare1 = vec3(step(createShape(uv - squarePosition, 8.0), 0.5));\n    \t}\n    \n\tvec3 square2= vec3(1.0);\n    uv -= squarePosition;\n   \tuv += squarePosition;\n    square2= vec3(step(createShape(uv - squarePosition, 8.0), 0.4));\n\n    \n    vec3 squares = square1 - square2;\n    squares *= colorRed;\n    fragColor = vec4(squares,1.0);\n}\n\n// Chaos, Diversity, Dark\n#elif patternNo == 10\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    uv *= 5.0;\n    vec2 tileIdx = floor(uv);\n    uv = fract(uv);\n    \n    vec2 squarePosition = vec2(0.5, 0.5);\n    \n    vec3 square1 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(45.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));\n    uv += squarePosition;\n    square1 = vec3(step(createShape(uv - squarePosition, 4.0), 0.4));\n    \n    vec3 square2 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(80.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));\n    uv += squarePosition;\n    square2 = vec3(step(createShape(uv - squarePosition, 4.0), 0.35));\n    \n    vec3 square3 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(80.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));    \n    uv += squarePosition;\n    square3 = vec3(step(createShape(uv - squarePosition, 4.0), 0.3));\n    \n    vec3 square4 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(80.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));    \n    uv += squarePosition;\n    square4 = vec3(step(createShape(uv - squarePosition, 4.0), 0.26));\n    \n    vec3 square5 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(80.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));    \n    uv += squarePosition;\n    square5 = vec3(step(createShape(uv - squarePosition, 4.0), 0.22));\n    \n    vec3 square6 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(80.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));    \n    uv += squarePosition;\n    square6 = vec3(step(createShape(uv - squarePosition, 4.0), 0.2));\n    \n    vec3 square7 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(80.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));    \n    uv += squarePosition;\n    square7 = vec3(step(createShape(uv - squarePosition, 4.0), 0.17));\n    \n    vec3 square8 = vec3(1.0);\n    uv -= squarePosition;\n    uv *= rotate2d(80.0 * PI / 180.0);\n    uv *= scale2d(vec2(sin(iTime * 100.0)));    \n    uv += squarePosition;\n    square8 = vec3(step(createShape(uv - squarePosition, 4.0), 0.15));\n    \n    vec3 squares1 = square1 - square2;\n    vec3 squares2 = square3 - square4;\n    vec3 squares3 = square5 - square6;\n    vec3 squares4 = square7 - square8;\n    vec3 allsquares = squares1 + squares2 + squares3 + squares4;\n    allsquares *= colorRed;\n    fragColor = vec4(allsquares,1.0);\n    \n}\n\n#endif\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat createShape(vec2 centerPosition, float side)\n{  \n    float a = atan(centerPosition.y,centerPosition.x);\n    float r = TWOPI/side;\n    return cos(floor(.5+a/r)*r-a)*length(centerPosition.xy);\n}\n\nmat2 scale2d(vec2 size)\n{\n    return mat2(size.x, 0.0, 0.0, size.y);\n}","name":"Image","description":"","type":"image"}]}