{"ver":"0.1","info":{"id":"cstyDf","date":"1695598391","viewed":50,"name":"Shader Art 001","username":"kamikoto00","description":"Thx kishimisu for tutorial","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nBased on https://www.shadertoy.com/view/mtyGWy\n*/\n\nconst float PI = radians(180.);\nconst float twoPI = PI * 2.;\n\nvec3 palette(float t) {\n    //Your palette is mine nowðŸ˜‹\n    const vec3 a = vec3(0.5, 0.5, 0.5);\n    const vec3 b = vec3(0.5, 0.5, 0.5);\n    const vec3 c = vec3(1.0, 1.0, 1.0);\n    const vec3 d = vec3(0.263,0.416,0.557);\n    return a + b * cos(twoPI * (c * t + d));\n}\n\nconst float timeScale = 1.;\nconst float count = 8.;\nconst float freq = 8.;\nconst float intensity = 2.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0., 0., 0.);\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 uv0 = uv;\n    float time = iTime * timeScale;\n    float d0 = length(uv0);\n    for (float i = 0.; i < count; i++) {\n        float f = freq + i * 0.5;\n        float d = length(uv);\n        d *= exp(-d * d0);\n        float t = 0.02 / abs(sin((d + time * 0.1) * f)) * intensity;\n        color += palette(abs(uv0.x) + abs(uv0.y) + time * 0.5) * pow(t, 1.2);\n        uv = fract(uv * (i + 1.) * 0.35) - .5;\n    }\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}