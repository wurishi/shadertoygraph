{"ver":"0.1","info":{"id":"wdycWz","date":"1604308394","viewed":39,"name":"M2 - TP1","username":"ARGH","description":"TP1 - Salon\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tp1","salon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int Steps = 1000;\nconst float Epsilon = 0.05; // Marching epsilon\nconst float T=0.5;\n\nconst float rA=10.0; // Maximum and minimum ray marching or sphere tracing distance from origin\nconst float rB=40.0;\n\n// Transforms\nvec3 rotateX(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);\n}\n\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca*p.x + sa*p.z, p.y, -sa*p.x + ca*p.z);\n}\n\nvec3 rotateZ(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca*p.x + sa*p.y, -sa*p.x + ca*p.y, p.z);\n}\n\nvec3 translate(vec3 p, vec3 a)\n{\n    return vec3(p.x + a.x, p.y + a.y, p.z + a.z);\n}\n\nvec3 scale(vec3 p, float coeff) {\n\treturn p / coeff;   \n}\n\nvec3 duplicateOneWay(vec3 p, vec3 gap, vec3 n) {\n    return (p - gap * clamp(round(p / gap), vec3(0.0, 0.0, 0.0), n));\n}\n\nvec3 symmetryYOneWay(vec3 p) {\n    p.y = abs(p.y);\n    return p;\n}\n\nvec3 duplicate(vec3 p, vec3 gap, vec3 n) {\n    return (p - gap * clamp(round(p / gap), -n, n));\n}\n\n// Smooth cubic falloff function\n// x : distance\n// R : radius\nfloat falloff(float x, float R)\n{\n  float u = clamp(x/R,0.0,1.0);\n  float v = (1.0-u*u);\n  return v*v*v;\n}\n\n// Primitives\n\n// Point skeleton\n// p : point\n// c : center of skeleton\n// e : energy associated to skeleton\n// R : radius\nfloat point(vec3 p, vec3 c, float e,float R)\n{\n  return e*falloff(length(p-c),R);\n}\n\n// Line squeleton\nfloat line(vec3 p, vec3 a, vec3 b, float e, float R)\n{\n    float distance = 0.;\n    vec3 u = normalize(b - a);\n    float ah = dot(p - a, u);\n    if (ah < 0.) {\n    \tdistance = length(p - a);\t    \n    } else if (ah > length(b - a)) {\n        distance = length(p - b);\n    } else {\n   \t\tdistance = sqrt(pow(length(p - a), 2.) - pow(ah, 2.));\n    }\n    \n    \n    return e*falloff(distance, R);\n}\n\n// Circle squeleton\nfloat circle(vec3 p, vec3 c, vec3 n, float r, float e, float R) {\n    float distance = 0.;\n    float ph = dot((p - c), n);\n    float hc = sqrt(pow(length(p - c), 2.) - pow(ph, 2.));\n    float hq = hc - r;\n\n    distance = sqrt(pow(ph, 2.) + pow(hq, 2.));\n    return e*falloff(distance, R);\n}\n\n// Disk squleton\nfloat disk(vec3 p, vec3 c, vec3 n, float r, float e, float R) {\n    float distance = 0.;\n    float ph = dot((p - c), n);\n    float hc = sqrt(pow(length(p - c), 2.) - pow(ph, 2.));\n    float hq = (hc > r) ? hc - r : 0.;\n\n    distance = sqrt(pow(ph, 2.) + pow(hq, 2.));\n    return e*falloff(distance, R);\n}\n\n// Cylinder squeleton\nfloat cylinder(vec3 p, vec3 a, vec3 b, float r, float e, float R) {\n    float distance = 0.;\n    vec3 u = normalize(b - a);\n    float ah = dot(p - a, u);\n    if (ah < 0.) {\n    \tdistance = disk(p, a, u, r, e, R);\t    \n    } else if (ah > length(b - a)) {\n        distance = disk(p, b, u, r, e, R);\t \n    } else {\n        float ph = sqrt(pow(length(p - a), 2.) - pow(ah, 2.));\n   \t\tdistance = e*falloff(abs(ph - r), R);\n    }\n    \n    return distance;\n}\n\n// cappedCone squeletton\nfloat cappedCone(vec3 p, vec3 a, vec3 b, float ra, float rb, float e, float R) {\n    float distance = 0.;\n    vec3 u = normalize(b - a);\n    float ah = dot(p - a, u);\n    if (ah < 0.) {\n    \tdistance = disk(p, a, u, ra, e, R);\t    \n    } else if (ah > length(b - a)) {\n        distance = disk(p, b, u, rb, e, R);\t \n    } else {\n        float ph = sqrt(pow(length(p - a), 2.) - pow(ah, 2.));\n        float ab = length(b - a);\n        float rca = ((ah / ab) * rb) + ((1. - (ah / ab)) * ra);\n   \t\tdistance = e*falloff(abs(ph - rca), R);\n    }\n    \n    return distance;\n}\n\n// roundCone squeletton\nfloat roundCone(vec3 p, vec3 a, vec3 b, float ra, float rb, float e, float R) {\n    float distance = 0.;\n    vec3 u = normalize(b - a);\n    float ah = dot(p - a, u);\n    if (ah < 0.) {\n    \tdistance = length(p - a) - ra;\t    \n    } else if (ah > length(b - a)) {\n        distance = length(b - p) - rb;\t \n    } else {\n        float ph = sqrt(pow(length(p - a), 2.) - pow(ah, 2.));\n        float ab = length(b - a);\n        float rca = ((ah / ab) * rb) + ((1. - (ah / ab)) * ra);\n   \t\tdistance = abs(ph - rca);\n    }\n    \n    \n    return e*falloff(distance, R);\n}\n\n// box squeletton\nfloat box(vec3 p, vec3 b, float e, float R) {\n \tvec3 q = (abs(p) - b);\n  \tfloat distance = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);    \n    return e*falloff(distance, R); \n}\n\n// Operators\n\n// Blending\n// a,b : field function of the sub-trees\nfloat Blend(float a,float b)\n{\n    return a+b;\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n    return max(a,b);\n}\n\nfloat window(vec3 p, float coeff)\n{\n\tfloat v = box(p, coeff * vec3(1.0, 2.5, 1.3), 1.0, 0.4);\n    vec3 pTr = translate(p, coeff * vec3(1.3, 0.0, 0.0));\n    v = Blend(v, box(pTr, coeff * vec3(0.0, 1.2, 0.6), -0.6, 1.0));\n    return v;\n}\n\nfloat windowLine(vec3 p, float coeff)\n{\n    vec3 pTr = duplicate(p, vec3(0.0, 0.0, 6.5), vec3(0.0, 0.0, 2.0));\n\tfloat v = window(pTr, coeff);\n    return v;\n}\n\nfloat windowFace(vec3 p, float coeff) {\n    vec3 pTr = duplicate(p, vec3(0.0, 8.0, 0.0), vec3(0.0, 3.0, 0.0));\n\tfloat v = windowLine(pTr, coeff);\n    return v;\n}\n\nfloat building(vec3 p, float coeff) {\n    // Make a big box\n    vec3 pTr = vec3(p.x - 5.0, p.y, p.z - 2.0);\n  \tfloat v = box(pTr, vec3(3.0, 28.0, 19.0), 1.0, 2.0);\n    // Add windows\n  \tv = Blend(v, windowFace(p, 1.));\n    // Add door\n    pTr = vec3(p.x - 2.0, p.y, p.z - 19.5);\n    v = Blend(v, box(pTr, vec3(1.0, 2.0, 1.5), -1.0, 2.0));\n    return v;\n}\n\nfloat room(vec3 p) {\n\tvec3 pTr = translate(p, vec3(5.0, 0.0, 1.0));\n    float v = box(pTr, vec3(8.0, 9.0, 3.0), 1.0, 0.2);\n    pTr = translate(pTr, vec3(-1.0, 0.0, 0.0));\n    v = Blend(v, box(pTr, vec3(7.5, 8.5, 2.5), -1.0, 0.2));\n    \n    return v;\n}\n\nfloat sofa(vec3 p) {\n    float v = box(p, vec3(1.0, 1.5, 0.75), 1.0, 2.0);\n    vec3 pTr = translate(p, vec3(-1.0, 0.0, 1.5));\n    //v = Blend(v, box(pTr, vec3(1.5, 1.25, 1.75), -1.0, 0.2));\n    v = Blend(v, box(pTr, vec3(0.5, 1.0, 0.25), -1.0, 2.0));\n    pTr = translate(pTr, vec3(0.5, 0.0, -1.6));\n    v = Blend(v, box(pTr, vec3(0.6, 1.25, 0.0), -0.4, 1.0));\n    v = Union(v, box(pTr, vec3(0.9, 1.25, 0.0), 1.0, 1.0));\n    pTr = translate(pTr, vec3(1.0, 0.0, 0.5));\n    v = Union(v, box(pTr, vec3(0.0, 1.25, 0.9), 1.0, 1.0));\n    pTr = translate(pTr, vec3(0.7, 1.5, -2.2));\n    pTr = duplicateOneWay(pTr, vec3(2.3, 3.0, 0.0), vec3(1.0, 1.0, 0.0));\n    v = Union(v, cylinder(pTr, vec3(0.0, 0.0, -0.5), vec3(0.0, 0.0, 0.0), 0.1, 1.0, 0.9));\n    \n    return v;\n}\n\nfloat table(vec3 p) {\n    float v = box(p, vec3(3.0, 6.0, 0.2), 1.0, 0.2);\n    vec3 pTr = translate(p, vec3(2.3, 5.0, -2.0));\n    pTr = duplicateOneWay(pTr, vec3(4.7, 10.0, 0.0), vec3(1.0, 1.0, 0.0));\n    v = Union(v, box(pTr, vec3(0.3, 0.3, 2.0), 1.0, 0.2));\n    \n    return v;\n}\n\nfloat chair(vec3 p) {\n\t// Base of the chair\n    float v = box(p, vec3(1.5, 1.5, 0.1), 1.0, 0.2);\n    vec3 pTr = translate(p, vec3(1.3, 1.3, -1.5));\n    pTr = duplicateOneWay(pTr, vec3(2.6, 2.6, 0.0), vec3(1.0, 1.0, 0.0));\n    v = Union(v, box(pTr, vec3(0.2, 0.2, 1.4), 1.0, 0.2));\n    // Back chair\n    pTr = translate(p, vec3(1.3, 1.3, 1.9));\n    pTr = duplicateOneWay(pTr, vec3(1.3, 0.0, 0.0), vec3(2.0, 0.0, 0.0));\n    v = Union(v, box(pTr, vec3(0.2, 0.2, 1.8), 1.0, 0.2));\n    pTr = translate(p, vec3(0.0, 1.3, 3.5));\n    pTr = duplicateOneWay(pTr, vec3(0.0, 0.0, 1.3), vec3(0.0, 0.0, 2.0));\n    v = Union(v, box(pTr, vec3(1.3, 0.2, 0.2), 1.0, 0.2));\n    \n    return v;\n}\n\nfloat tvStand(vec3 p) {\n    // Global form\n    float v = box(p, vec3(1.0, 2.0, 1.5), 1.0, 0.2);\n    vec3 pTr = translate(p, vec3(0.0, 0.0, -1.3));\n    v = Blend(v, box(pTr, vec3(1.1, 2.1, 0.2), 1.0, 0.2));\n    pTr = translate(p, vec3(0.0, 0.0, 1.5));\n    v = Blend(v, box(pTr, vec3(0.85, 1.85, 0.1), -1.0, 0.2));\n    // Line negative\n    pTr = translate(pTr, vec3(1.0, 0.0, 0.0));\n    pTr = duplicateOneWay(pTr, vec3(2.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0));\n    v = Blend(v, line(pTr, vec3(0.0, 1.0, 0.0),vec3(0.0, -1.0, 0.0), -1.0, 0.2));\n    // Hole for drawer\n    pTr = translate(p, vec3(-1.0, 1.25, 0.7));\n    pTr = duplicateOneWay(pTr, vec3(0.0, 1.25, 1.05), vec3(0.0, 2.0, 1.0));\n    v = Blend(v, box(pTr, vec3(0.0, 0.4, 0.3), -1.0, 0.2));\n   \t// Drawer door\n    pTr = translate(p, vec3(-1.0, 1.25, 0.7));\n    pTr = duplicateOneWay(pTr, vec3(0.0, 1.25, 1.05), vec3(0.0, 2.0, 1.0));\n    v = Blend(v, box(pTr, vec3(0.0, 0.3, 0.2), 1.0, 0.2));\n    \n    return v;\n}\n\nfloat tv(vec3 p) {\n\tfloat v = box(p, vec3(2.5, 0.2, 1.5), 1.0, 0.2);\n    vec3 pTr = translate(p, vec3(0.0, -0.3, 0.0));\n    v = Blend(v, box(pTr, vec3(2.35, 0.1, 1.35), -1.0, 0.2));\n    pTr = translate(p, vec3(2.0, 0.0, -1.5));\n    pTr = duplicateOneWay(pTr, vec3(4.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0));\n    pTr = symmetryYOneWay(pTr);\n    v = Union(v, roundCone(pTr, vec3(0.0, 0.5, 0.4), vec3(0.0, 0.3, 0.0), 0.05, 0.01, 1.0, 0.2));\n    \n    return v;\n}\n\nfloat coffeeTable(vec3 p) {\n\tfloat v = box(p, vec3(3.0, 3.0, 0.2), 1.0, 0.2);\n    vec3 pTr = translate(p, vec3(2.3, 2.5, -1.5));\n    pTr = duplicateOneWay(pTr, vec3(4.7, 5.0, 0.0), vec3(1.0, 1.0, 0.0));\n    v = Union(v, box(pTr, vec3(0.3, 0.3, 1.4), 1.0, 0.2));\n    pTr = translate(p, vec3(0.0, 0.0, -1.5));\n    v = Union(v, box(pTr, vec3(2.6, 2.6, 0.05), 1.0, 0.2));\n    \n    return v;\n}\n\nfloat cup(vec3 p) {\n\tfloat v = cappedCone(p, vec3(0.0, 0.0, 3.0), vec3(0.0, 0.0, 0.0), 0.7, 1.1, 1.0, 1.2);\n    vec3 pTr = translate(p, vec3(0.0, 0.0, 3.5));\n    v = Blend(v, line(pTr, vec3(0.0, 0.0, 3.0), vec3(0.0, 0.0, 0.0), -1.0, 2.7));\n    pTr = translate(p, vec3(-1.4, 0.0, -1.55));\n    v = Union(v, circle(pTr, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), 0.9, 1.0, 0.5));\n    \n    return v;\n}\n\nfloat ashTray(vec3 p) {\n\tfloat v = cylinder(p, vec3(0.0, 0.0, 0.8), vec3(0.0, 0.0, 0.0), 1.3, 1.0, 0.3);\n    vec3 pTr = translate(p, vec3(0.0, 0.0, 0.0));\n    v = Blend(v, disk(pTr, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0), 1.3, -1.0, 0.3));\n    pTr = translate(p, vec3(0.0, 1.3, -0.1));\n    pTr = duplicateOneWay(pTr, vec3(0.0, 2.6, 0.0), vec3(0.0, 1.0, 0.0));\n    v = Blend(v, line(pTr, vec3(0.5, 0.0, 0.0), vec3(-0.5, 0.0, 0.0), -1.0, 0.4));\n    \n    return v;\n}\n\nfloat lamp(vec3 p) {\n\tfloat v = cylinder(p, vec3(0.0, 0.0, 3.5), vec3(0.0, 0.0, -4.5), 0.2, 1.0, 0.3);\n    vec3 pTr = translate(p, vec3(0.0, 0.0, -3.0));\n    v = Blend(v, cylinder(pTr, vec3(0.0, 0.0, 0.2), vec3(0.0, 0.0, 0.0), 0.5, 1.0, 0.3));\n    pTr = translate(pTr, vec3(0.0, 0.0, -0.3));\n    v = Blend(v, cylinder(pTr, vec3(0.0, 0.0, 0.1), vec3(0.0, 0.0, 0.0), 1.4, 1.0, 0.2));\n    /*pTr = translate(pTr, vec3(0.0, 0.0, 0.1));\n    v = Blend(v, circle(pTr, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0), 0.7, -0.5, 0.6));*/\n    pTr = translate(p, vec3(0.0, 0.0, 4.5));\n    v = Union(v, cappedCone(pTr, vec3(0.0, 0.0, -1.0), vec3(0.0, 0.0, 1.5), 0.7, 1.5, 1.0, 0.6));\n    \n    return v;\n}\n\n// Potential field of the object\n// p : point\nfloat Object(vec3 p)\n{\n  \tp.z=-p.z;\n    \n    // The floor\n    vec3 pTr = translate(p, vec3(-10.0, 0.0, -3.2));\n    float v = box(pTr, vec3(25.0, 20.0, 0.1), 1.0, 0.2);\n    // The table and chairs\n    vec3 pTr2 = translate(p, vec3(5.0, 0.0, 1.1));\n    v = Union(v, table(pTr2));\n    pTr = translate(pTr2, vec3(0.0, 6.0, -1.1));\n    v = Union(v, chair(pTr));\n    pTr = translate(pTr2, vec3(-4.0, -2.0, -1.1));\n    pTr = rotateZ(pTr, 90.0);\n    v = Union(v, chair(pTr));\n    // Cup on table\n    pTr = translate(p, vec3(3.1, -2.0, 2.6));\n    pTr = scale(pTr, 0.35);\n    pTr = rotateZ(pTr, 90.0);\n    v = Union(v, cup(pTr));\n    // Sofa * 2\n    pTr = translate(p, vec3(-10.0, 10.0, 0.0));\n    pTr = rotateZ(pTr, -80.0);\n   \tv = Union(v, sofa(pTr));\n    pTr = translate(p, vec3(-18.0, 9.0, 0.0));\n    pTr = rotateZ(pTr, 90.0);\n   \tv = Union(v, sofa(pTr));\n    // Tv Stand\n    pTr = translate(p, vec3(-10.0, -10.0, 0.0));\n    pTr = rotateZ(pTr, 80.0);\n    pTr = scale(pTr, 1.5);\n    v = Union(v, tvStand(pTr));\n    // Tv\n    pTr = translate(p, vec3(-10.0, -10.0, 4.0));\n    pTr = rotateZ(pTr, 160.0);\n    v = Union(v, tv(pTr));\n    // Coffee Table\n    pTr = translate(p, vec3(-10.0, 3.0, 0.0));\n    v = Union(v, coffeeTable(pTr));\n    // AshTray on the coffee table\n    pTr = translate(p, vec3(-11.0, 5.0, 0.72));\n    pTr = scale(pTr, 0.5);\n    v = Union(v, ashTray(pTr));\n   \t// Lamp\n    pTr = translate(p, vec3(-6.0, 12.0, 0.72));\n    //pTr = scale(pTr, 0.5);\n    v = Union(v, lamp(pTr));\n    \n  \treturn v-T;\n}\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.0001;\n  vec3 n;\n  float v = Object(p);\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat Trace(vec3 o, vec3 u, float rB,out bool h,out int s)\n{\n  h = false;\n\n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += Epsilon;\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float rB, out bool h,out int s)\n{\n  h = false;\n\n    // Don't start at the origin, instead move a little bit forward\n    float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,abs(v)/4.0);\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,10.0,h,s);\n        if (!h) {ao+=1.0;}\n        else if (t>5.0)\n            {\n             ao+=1.0;   \n            }\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\nvec3 background(vec3 rd)\n{\n  return mix(vec3(0.652,0.451,0.995),vec3(0.552,0.897,0.995), rd.z*0.5+0.5);\n}\n\n\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff = pow(0.5*(1.0+dot(n, l)),2.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\nfloat SmoothLight(vec3 p,vec3 n,int a)\n{\n   if (a==0)\n        return 1.0;\n    \n    // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n    \nfloat lo=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n vec3 d = Cosine(   581.123*float(i) , n);\n d=normalize(l+d*0.15);\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,10.0,h,s);\n        if (!h) {lo+=1.0;}\n        else if (t>100.0)\n            {\n             lo+=1.0;   \n            }\n    }\n    \n    lo/=float(a);\nreturn lo;\n\n}\n\n// Shading and lighting\n// p : point,\n// n : normal at point\nvec3 Shade(vec3 p, vec3 n)\n{\n    vec3 c = 0.25+0.25*background(n);\n    c+=0.15*AmbientOcclusion(p+0.1*n,n,15)*vec3(1.0,1.0,1.0);\n    c+=0.35*Light(p,n);\n    return c;\n}\n\n// Shading with number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \nvec3 Cosine( in float seed, in vec3 nor)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    \t// method 3 by fizzer: http://www.amietia.com/lambertnotangent.html\n        float a = 6.2831853 * v;\n        u = 2.0 * u - 1.0;\n        return normalize( nor + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 rotate_z(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n// m : Mouse position\n// p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(20.0,0.0,5.0);\n    ro*=rotate_z(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,1.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}