{"ver":"0.1","info":{"id":"3l3cR8","date":"1608421516","viewed":172,"name":"Morphing Sakura Fractal","username":"mherreshoff","description":"Two fractals that look like a cherry blossoms.  Same idea as [ https://www.shadertoy.com/view/WttcRr ] but here the \"pow\" stretches the fractal copies to give the result a more blobby organic feel.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","flower","morphing","cherry","blossom","sakura"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define CS(a) vec2(cos(a), sin(a))\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec4(0,-2.*PI/3.,2.*PI/3.,0)))\n\nfloat smoothhill(float a, float b, float c, float x) {\n    return smoothstep(a,b,x)-smoothstep(b,c,x);\n}\nfloat smoothParity(float x, float b) {\n    float m = mod(x-.5, 2.);\n    return smoothstep(.5-b, .5+b, m) - smoothstep(1.5-b, 1.5+b, m);\n}\n\nvec2 target (vec2 z, float power) {\n    if (length(z) > 100.) return z;  // Prevent blowup.\n    vec2 weightedSum=vec2(0); float weight=0.;\n#define N 5.\n    for (float i = 0.; i < N; i++) {\n        float theta = 6.28*(i/N);\n        vec2 point = CS(theta), d = z-point;\n        float L = length(d), w = pow(L, -10.);\n        float scale = 2.*pow(L, power-1.);\n        weight += w;\n        weightedSum += w*scale*d;\n    }\n#undef N\n    return weightedSum/weight;\n}\n\nvec4 render (in vec2 coord) {\n    vec2 R = iResolution.xy, pw = 1./R, uv = coord*pw;\n    float cycleT=20., t = fract(iTime/cycleT), maxIt = 5., \n          iterations = maxIt*smoothhill(0.,.5,1.,t), zoom = 4.;\n    float parity = smoothParity(iTime/cycleT, .05);\n    vec4 bandColor = mix(hue(.0), hue(.6)*.5, parity);\n    float b = mix(.5, .5, parity);\n    float bw = mix(.2, .3, parity);\n    float power = mix(3., 1.8, parity);\n    \n    vec2 p = rot(radians(36.+90.))*((coord-.5*R)/R.y)*zoom;\n    for (float i = 0.; i < 10.; i++){\n        if (i < floor(iterations)) p = target(p, power);\n    }\n    p = mix(p, target(p, power), fract(iterations));\n    \n    float m = length(p);\n    vec4 col = vec4(mix(.85, 1., smoothhill(0.,.5,1.5,m)));\n    col = mix(col, bandColor, .3*smoothhill(b-bw,b,b+bw,m));\n    return col;\n}\n\nvoid mainImage( out vec4 O, in vec2 u ) {\n    // 2D Antialiasing:\n    vec2 d = vec2(.5,0);\n    O = (render(u+d.xy)+render(u-d.xy)+render(u+d.yx)+render(u-d.yx))*.25;\n}","name":"Image","description":"","type":"image"}]}