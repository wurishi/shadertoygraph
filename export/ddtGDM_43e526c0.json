{"ver":"0.1","info":{"id":"ddtGDM","date":"1677446024","viewed":503,"name":"Fork UI Test 4 + Hologram","username":"curiouspers","description":"Hologram rays effect inspired by Atomic Heart with some glitches on top https://youtu.be/zPzhLbLaAWw?t=3369\nAwesome sci-fi ui design experiment from yasuo https://www.shadertoy.com/view/7t3fzs\nclick and drag","likes":19,"published":1,"flags":40,"usePreview":0,"tags":["ui","hologram","cineshader"],"hasliked":0,"parentid":"7t3fzs","parentname":"UI Test 4"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hologram rays effect inspired by Atomic Heart game https://youtu.be/zPzhLbLaAWw?t=3369\n// code of awesome UI in Buffer A forked from yasuo https://www.shadertoy.com/view/7t3fzs\n// It's super slow, probably better do this in vertex shader\n// buffer B and sound does nothing at the moment\n// TODO: optimize & cleanup, maybe sound\n\n#define iterations 130.\n#define SHOW_BG 0\n#define tint vec4(0.65,0.8,1.,1.)*1.54\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    vec2 uv2 = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec4 m  = iMouse;\n    vec2 m2 = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    float speed = smoothstep(0.,3.,clamp(mix(.0,.3,iTime),0.,3.))*iTime*1.832*0.3333;\n    if (m.z < 0.01) {\n        m.xy = vec2(0.5,0.5)*iResolution.xy;\n        //m.xy +=  vec2(cos(20.+iTime*.543),sin(iTime*.321))*0.5*iResolution.xy;\n        m.xy +=  vec2(-0.+cos(3.14+speed)*aspect,sin(3.14+speed))*0.5*iResolution.xy;\n        m2.xy = (m.xy-.5*iResolution.xy)/iResolution.y;\n    }\n    \n    m.xy /= iResolution.xy;\n    \n    fragColor = vec4(0.001,0.0103,0.0110,1.0);\n    m2.y /= aspect;\n    \n    vec2 center = uv2;\n    #if SHOW_BG\n        vec3 ro = vec3(0, 3, -3);\n        // rotate cubemap with mouse\n        vec3 ta = vec3(-0.1-cos(3.14+speed), 2.75-sin(3.14+speed), 0.4)*1.5;\n        ta = vec3(-0.05-m2.x,3.9-m2.y*1.5,0.4)*vec3(2.6,1.,0.);\n        vec3 rd = GetRayDir(uv2, ro, ta, 1.2);\n        //fragColor.rgb = textureLod(iChannel2, rd, 0.).rgb*.1;\n        \n        float offs = 0.005;\n        fragColor.r = textureLod(iChannel2, rd+vec3(-offs,offs,0), 0.).r*.1;\n        fragColor.g = textureLod(iChannel2, rd, 0.).g*.1;\n        fragColor.b = textureLod(iChannel2, rd+vec3(offs,offs,0), 0.).b*.1;\n    #endif\n    \n    // naive and slow, but how to optimize?\n    float count = iterations;\n    vec4 t = vec4(0);\n    vec2 mDir = m.xy*vec2(1.,aspect)-uv*vec2(1.,aspect);\n    float mLength = length(mDir);\n    // a bit faster but dirtier\n    //count = (clamp(smoothstep(-3.,2.,mLength),0.,1.)*250.); \n    for(float i=1.;i<=count;i++){\n        float mul = count/i;\n        float percent = i/count;\n        vec2 offs = (mul-1.)/2.+m2.xy*aspect*(1.0-percent)*mul;\n        //vec2 offs = m.xy*(1.0-percent);\n        float noise = textureLod(iChannel3, (uv*mul-offs)/5.+iTime/100., 0.).r;\n        float grad = clamp((1.0-i/count)*1., 0., 1.);\n        // mips 0..1 slightly faster than no mips or any other combination of mips\n        t += textureLod(iChannel0, uv*mul-offs, clamp(mul,0.,1.))*grad*noise;\n        //t.r *= (i == 2) ? .1 : 1.;\n    }\n    \n    float centerMask = smoothstep(0.0, 0.15, length(center));\n    fragColor += t*tint*2./float(count)*1.5*centerMask;\n    \n    // glitch\n    float noise = textureLod(iChannel3, (uv)/vec2(20.,.25)+iTime/100., 0.).r;\n    float noiseMask = textureLod(iChannel3, (uv)/2.+iTime/100., 0.).r;\n    float s = clamp(cos(iTime*1.4)+cos(iTime*1.9543)-0.5,0.,1.)*noise;\n    //uv += noise*.01*s; // severe glitch\n    uv += noiseMask*noise*s*cos(uv.y*0.25*noise+iTime*2.45)*.005;\n    uv += (noiseMask*noise*s*cos((uv.y+iTime*0.786)*3.01*noise))*noise*cos(uv.y*10.)*cos(uv.y*3.14+iTime*1.123)*cos(uv.x*3.+iTime*1.)*.05;\n    // sphere distort\n    uv = uv+mDir*(smoothstep(0.0, 2., clamp(1.-mLength, 0.0, 1.))*.5); \n    \n    fragColor += textureLod(iChannel0, uv, 0.)*clamp(1.-mLength, 0.3, 1.);\n    \n    float r = 0.0105;\n    if (mLength< r){\n        /*\n        if (abs(m2.y) > 0.5)\n            fragColor.g =1.;\n        else\n            fragColor.r =1.;\n        */\n        \n        vec3 mask = vec3( clamp(smoothstep(r,0.000, mLength), 0., 1.));\n        //fragColor.rgb += mask*.01;\n        fragColor.rgb += textureLod(iChannel0, (-m.xy+uv)*vec2(1.,aspect)*1./(r*2.-0.002)+.5, 7.).rgb*(tint).rgb*7.*mask;\n    }\n    //fragColor.rgb *= smoothstep(0.01,0.000, mLength);\n    // buffer B\n    //fragColor = textureLod(iChannel1, uv, 0.);\n    // test glitch mask\n    //fragColor.rgb = vec3(noiseMask*noise*s*sin((uv.y+iTime)*3.01*noise))*noise*sin(uv.y*10.)*sin(uv.y*3.14+iTime)*sin(uv.x*3.+iTime*1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp,float time) {\n    float t = fract(sin(time*100.0))*0.1;\n    vec2 result = vec2(0);//vec2(sin(float(samp)*2.5*t));\n    float volume = 0.01;    \n    return result*volume;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Forked from https://www.shadertoy.com/view/7t3fzs\n\n#define speed smoothstep(0.,3.,clamp(mix(.0,.3,iTime),0.,3.))\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define seg_0 0\n#define seg_1 1\n#define seg_2 2\n#define seg_3 3\n#define seg_4 4\n#define seg_5 5\n#define seg_6 6\n#define seg_7 7\n#define seg_8 8\n#define seg_9 9\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\nfloat segBase(vec2 p){\n    vec2 prevP = p;\n    \n    float size = 0.02;\n    float padding = 0.05;\n\n    float w = padding*3.0;\n    float h = padding*5.0;\n\n    p = mod(p,0.05)-0.025;\n    float thickness = 0.005;\n    float gridMask = min(abs(p.x)-thickness,abs(p.y)-thickness);\n    \n    p = prevP;\n    float d = B(p,vec2(w*0.5,h*0.5));\n    float a = radians(45.0);\n    p.x = abs(p.x)-0.1;\n    p.y = abs(p.y)-0.05;\n    float d2 = dot(p,vec2(cos(a),sin(a)));\n    d = max(d2,d);\n    d = max(-gridMask,d);\n    return d;\n}\n\nfloat seg0(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat seg1(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y+=size;\n    float mask = B(p,vec2(size*2.,size*3.7));\n    d = max(-mask,d);\n    \n    p = prevP;\n    \n    p.x+=size*1.8;\n    p.y-=size*3.5;\n    mask = B(p,vec2(size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg2(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x-=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg3(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y = abs(p.y);\n    p.x+=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg4(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.x+=size;\n    p.y+=0.08;\n    float mask = B(p,vec2(size*2.,size*2.0));\n    d = max(-mask,d);\n\n    p = prevP;\n    \n    p.y-=0.08;\n    mask = B(p,vec2(size,size*2.0));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg5(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg6(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.y+=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg7(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y+=size;\n    float mask = B(p,vec2(size*2.,size*3.7));\n    d = max(-mask,d);\n    return d;\n}\n\n\nfloat seg8(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y = abs(p.y);\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg9(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat drawFont(vec2 p, int char){\n    p*=2.0;\n    float d = 10.;\n    if(char == seg_0) {\n        d = seg0(p);\n    } else if(char == seg_1) {\n        d = seg1(p);\n    } else if(char == seg_2) {\n        d = seg2(p);\n    } else if(char == seg_3) {\n        d = seg3(p);\n    } else if(char == seg_4) {\n        d = seg4(p);\n    } else if(char == seg_5) {\n        d = seg5(p);\n    } else if(char == seg_6) {\n        d = seg6(p);\n    } else if(char == seg_7) {\n        d = seg7(p);\n    } else if(char == seg_8) {\n        d = seg8(p);\n    } else if(char == seg_9) {\n        d = seg9(p);\n    }\n    \n    return d;\n}\nfloat barCode(vec2 p){\n    p*=1.1;\n    vec2 prevP = p;\n    p.x+=iTime*0.5*speed/3.;\n    p*=15.0;\n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n\n    float n = Hash21(vec2(id.x))*5.;\n    \n    p.x = mod(p.x,0.2)-0.1;\n    float d = abs(p.x)-((0.01*n)+0.01);\n    \n    p = prevP;\n    d = max(abs(p.x)-0.15,d);\n    d = max(abs(p.y)-0.1,d);\n\n    float d2 = abs(B(p,vec2(0.16,0.11)))-0.001;\n    d2 = max(-(abs(p.x)-0.14),d2);\n    d2 = max(-(abs(p.y)-0.09),d2);\n\n    return min(d,d2);\n}\n\nfloat circleUI(vec2 p){\n    vec2 prevP = p;\n    mat2 animRot = Rot(radians(iTime*speed)*30.0);\n    p*=animRot;\n    \n    p = DF(p,32.0);\n    p -= vec2(0.28);\n    \n    float d = B(p*Rot(radians(45.0)), vec2(0.002,0.02));\n    \n    p = prevP;\n    p*=animRot;\n    \n    float a = radians(130.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    a = radians(-130.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    \n    p = prevP;\n    animRot = Rot(radians(iTime*speed/3.)*20.0);\n    p*=animRot;\n    \n    p = DF(p,24.0);\n    p -= vec2(0.19);\n    \n    float d2 = B(p*Rot(radians(45.0)), vec2(0.003,0.015));\n    \n    p = prevP;\n    p*=animRot;\n    \n    a = radians(137.5);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    a = radians(-137.5);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    \n    d = min(d,d2);\n    \n\n    p = prevP;\n    animRot = Rot(-radians(iTime*speed)*25.0);\n    p*=animRot;\n    \n    p = DF(p,16.0);\n    p -= vec2(0.16);\n    \n    d2 = B(p*Rot(radians(45.0)), vec2(0.003,0.01));\n    \n    p = prevP;\n    p*=animRot;\n    \n    a = radians(25.5);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    a = radians(-25.5);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    \n    d = min(d,d2);\n    \n    \n    p = prevP;\n    animRot = Rot(radians(iTime*speed)*35.0);\n    p*=animRot;\n    \n    p = DF(p,8.0);\n    p -= vec2(0.23);\n    \n    d2 = B(p*Rot(radians(45.0)), vec2(0.02,0.02));\n    \n    p = prevP;\n    p*=animRot;\n    \n    a = radians(40.0);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    a = radians(-40.0);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    \n    d = min(d,d2);    \n    \n    \n    p = prevP;\n    \n    animRot = Rot(radians(iTime*speed)*15.0);\n    p*=animRot;\n    \n    d2 = abs(length(p)-0.36)-0.002;\n    d2 = max(abs(p.x)-0.2,d2);\n    d = min(d,d2);    \n    \n    p = prevP;\n    \n    animRot = Rot(radians(90.)+radians(iTime*speed)*38.0);\n    p*=animRot;\n    \n    d2 = abs(length(p)-0.245)-0.002;\n    d2 = max(abs(p.x)-0.1,d2);\n    d = min(d,d2);    \n    \n    p = prevP;\n    d2 = abs(length(p)-0.18)-0.001;\n    d = min(d,d2);       \n    \n    p = prevP;\n    animRot = Rot(radians(145.)+radians(iTime*speed)*32.0);\n    p*=animRot;\n    d2 = abs(length(p)-0.18)-0.008;\n    \n    a = radians(30.0);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    a = radians(-30.0);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);    \n    \n    d = min(d,d2);  \n    \n    p = prevP;\n    \n    a = radians(iTime*speed)*30.0;\n    p.x+=cos(a)*0.45;\n    p.y+=sin(a)*0.45;\n    \n    d2 = Tri(p*Rot(-a)*Rot(radians(90.0)),vec2(0.02),radians(45.));\n    d = min(d,d2);  \n    \n    p = prevP;\n    \n    a = radians(-sin(iTime*speed*0.5))*120.0;\n    a+=radians(-70.);\n    p.x+=cos(a)*0.45;\n    p.y+=sin(a)*0.45;\n    \n    d2 = abs(Tri(p*Rot(-a)*Rot(radians(90.0)),vec2(0.02),radians(45.)))-0.001;\n    d = min(d,d2);      \n    \n    p = prevP;\n    animRot = Rot(-radians(iTime*speed)*27.0);\n    p*=animRot;\n    \n    d2 = abs(length(p)-0.43)-0.0001;\n    d2 = max(abs(p.x)-0.3,d2);\n    d = min(d,d2);    \n    \n    p = prevP;\n    animRot = Rot(-radians(iTime*speed)*12.0);\n    p*=animRot;\n    \n    p = DF(p,8.0);\n    p -= vec2(0.103);\n    \n    d2 = B(p*Rot(radians(45.0)), vec2(0.001,0.007));    \n    d = min(d,d2);  \n    \n    p = prevP;\n    animRot = Rot(radians(16.8)-radians(iTime*speed)*12.0);\n    p*=animRot;    \n    \n    p = DF(p,8.0);\n    p -= vec2(0.098);\n    \n    d2 = B(p*Rot(radians(45.0)), vec2(0.001,0.013));    \n    d = min(d,d2);      \n    \n    \n    p = prevP;\n    animRot = Rot(radians(iTime*speed)*30.0);\n    p*=animRot;    \n    \n    p = DF(p,10.0);\n    p -= vec2(0.28);\n    \n    d2 = abs(B(p*Rot(radians(45.0)), vec2(0.02,0.02)))-0.001;\n    \n    p = prevP;\n    p*=animRot;\n    \n    a = radians(50.);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    a = radians(-50.);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);    \n    d = min(d,d2);   \n    \n    p = prevP;\n    int num = int(mod(iTime*10.0,10.0));\n    d2 = drawFont(p-vec2(0.038,0.),num);\n    d = min(d,abs(d2)-0.001); \n    num = int(mod(iTime*3.0,10.0));\n    d2 = drawFont(p-vec2(-0.038,0.),num);\n    d = min(d,d2); \n    \n    return d;\n}\n\nfloat smallCircleUI(vec2 p){\n    p*=1.3;\n    vec2 prevP = p;\n    \n    mat2 animRot = Rot(radians(iTime*speed)*35.0);\n    p*=animRot;  \n    \n    float d = abs(length(p)-0.2)-0.005;\n    \n    float a = radians(50.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    a = radians(-50.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);   \n    \n    p*=Rot(radians(10.));\n    float d2 = abs(length(p)-0.19)-0.006;\n    \n    a = radians(60.);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    a = radians(-60.);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);   \n    \n    d = min(d,d2);\n    \n    p = prevP;\n    \n    d2 = abs(length(p)-0.195)-0.0001;\n    d = min(d,d2);\n    \n    \n    p = prevP;\n    animRot = Rot(-radians(iTime*speed)*30.0);\n    p*=animRot;      \n    \n    p = DF(p,12.0);\n    p -= vec2(0.11);\n    \n    d2 = B(p*Rot(radians(45.0)), vec2(0.003,0.015));      \n    \n\n    \n    d = min(d,d2);  \n    \n    p = prevP;\n    animRot = Rot(radians(iTime*speed)*23.0);\n    p*=animRot;  \n    p = DF(p,2.5);\n    p -= vec2(0.05);\n    \n    d2 = B(p*Rot(radians(45.0)), vec2(0.01));      \n    d = min(d,d2); \n    \n    p = prevP;\n    animRot = Rot(-radians(iTime*speed)*26.0);\n    p*=animRot;  \n    d2 = abs(length(p)-0.11)-0.005;\n    \n    d2 = max(abs(p.x)-0.05,d2);\n    \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat smallCircleUI2(vec2 p){\n    p.x = abs(p.x)-0.4;\n    p.y = abs(p.y)-0.34;\n    vec2 prevP = p;\n    mat2 animRot = Rot(radians(iTime*speed)*28.0);\n    p*=animRot;  \n    \n    float d = abs(length(p)-0.028)-0.0005;\n    d = max(B(p,vec2(0.015,0.1)),d);\n    \n    p = prevP;\n    animRot = Rot(-radians(iTime*speed)*31.0);\n    p*=animRot;  \n    float d2 = abs(length(p)-0.027)-0.004;\n    \n    float a = radians(50.);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    a = radians(-50.);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);    \n    \n    d = min(max(-d2,d),abs(d2)-0.001);\n    \n    p = prevP;\n    animRot = Rot(-radians(iTime*speed)*30.0);\n    p*=animRot;      \n    \n    p = DF(p,2.0);\n    p -= vec2(0.008);\n    \n    d2 = B(p*Rot(radians(45.0)), vec2(0.0005,0.002));       \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat mainWave(vec2 p){\n    p*=1.5;\n    \n    float thickness = 0.003;\n    \n    vec2 prevP = p;\n\n    float t = fract(sin(iTime*100.0))*0.5;\n\n    p.x+=iTime*1.0;\n    p.y+=sin(p.x*8.)*(0.05+abs(sin(t*10.0)*0.12));\n    float d = abs(p.y)-thickness;\n\n    p = prevP;\n    \n    p.x-=iTime*0.5;\n    p.y+=sin(p.x*3.)*(0.1+abs(sin(t*9.0)*0.13));\n    float d2 = abs(p.y)-thickness;\n\n    d = min(d,d2);\n\n    p = prevP;\n    \n    p.x+=iTime*0.7;\n    p.y+=sin(p.x*5.)*(0.1+abs(sin(t*9.3)*0.15));\n    d2 = abs(p.y)-thickness;\n\n    d = min(d,d2);\n    \n    p = prevP;\n    \n    p.x-=iTime*0.6;\n    p.y+=sin(p.x*10.)*(0.1+abs(sin(t*9.5)*0.08));\n    d2 = abs(p.y)-thickness;\n\n    d = min(d,d2);\n        \n    p = prevP;\n    \n    p.x+=iTime*1.2;\n    p.y+=cos(-p.x*15.)*(0.1+abs(sin(t*10.0)*0.1));\n    d2 = abs(p.y)-thickness;\n\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat graph(vec2 p){\n    vec2 prevP = p;\n    float d = 10.;\n    float t = iTime*speed/3.+Hash21(vec2(floor(p.y-0.5),0.0));\n    p.y = abs(p.y);\n    p.y+=0.127;\n    for(float i = 1.0; i<=20.0; i+=1.0) {\n        float x = 0.0;\n        float y = i*-0.015;\n        float w = abs(sin(Hash21(vec2(i,0.0))*t*3.0)*0.1);\n        float d2 = B(p+vec2(0.1-w,y),vec2(w,0.003));\n        d = min(d,d2);\n    }\n    p = prevP;\n    \n    return max(abs(p.y)-0.2,d);\n}\n\nfloat scifiUI(vec2 p){\n    p*=1.1;\n    vec2 prevP = p;\n    float d = B(p,vec2(0.15,0.06));\n    float a = radians(45.);\n    p.x = abs(p.x)-0.195;\n    p.y = abs(p.y);\n    float m = dot(p,vec2(cos(a),sin(a)));\n    d = max(m,d);\n    \n    p = prevP;\n    \n    p.x+=0.16;\n    p.y+=0.008;\n    float d2 = B(p,vec2(0.06,0.052));\n    a = radians(45.);\n    p.x = abs(p.x)-0.095;\n    p.y = abs(p.y);\n    m = dot(p,vec2(cos(a),sin(a)));\n    d2 = max(m,d2);\n    \n    p = prevP;\n    d2 = min(d,d2);\n    d2 = max(-B(p-vec2(-0.03,-0.05),vec2(0.2,0.05)),abs(d2)-0.003);\n    \n    return abs(d2)-0.001;\n}\n\nfloat triAnimatin(vec2 p){\n    p.x = abs(p.x)-0.458;\n    p.y = abs(p.y)-0.45;\n    vec2 prevP = p;\n    p.x+=iTime*speed/3.*0.1;\n    p.x=mod(p.x,0.04)-0.02;\n    p.x+=0.01;\n    float d = abs(Tri(p*Rot(radians(-90.)),vec2(0.012),radians(45.)))-0.0001;\n    p = prevP;\n    return max(abs(p.x)-0.125,d);\n}\n\nfloat randomDotLine(vec2 p){\n    vec2 prevP = p;\n    p.x+=iTime*speed/3.*0.08;\n    vec2 gv = fract(p*17.0)-0.5;\n    vec2 id = floor(p*17.0);\n    \n    float n = Hash21(id);\n    float d = B(gv,vec2(0.25*(n*2.0),0.2));\n    p = prevP;\n    p.y+= 0.012;\n    d = max(abs(p.y)-0.01,max(abs(p.x)-0.27,d));\n    return d;\n}\n\nfloat scifiUI2(vec2 p){\n    vec2 prevP = p;\n\n    p*=1.2;\n    p.x= abs(p.x)-0.72;\n    p.y= abs(p.y)-0.53;\n    \n    float d = B(p,vec2(0.03));\n    float a = radians(-45.);\n    \n    float m = -dot(p-vec2(-0.005,0.0),vec2(cos(a),sin(a)));\n    d = max(m,d);\n    m = dot(p-vec2(0.005,0.0),vec2(cos(a),sin(a)));\n    d = max(m,d);\n    \n    float d2 = B(p-vec2(0.175,0.0256),vec2(0.15,0.004));\n    d = min(d,d2);\n    d2 = B(p-vec2(-0.175,-0.0256),vec2(0.15,0.004));\n    d = abs(min(d,d2))-0.0005;\n    \n    p.y-=0.003;\n    p.x+=iTime*speed/3.*0.05;\n    p.x = mod(p.x,0.03)-0.015;\n    p.x-=0.01;\n    d2 = B(p,vec2(0.026));\n    \n    m = -dot(p-vec2(-0.005,0.0),vec2(cos(a),sin(a)));\n    d2 = max(m,d2);\n    m = dot(p-vec2(0.005,0.0),vec2(cos(a),sin(a)));\n    d2 = max(m,d2);\n    \n    p = prevP;\n    p*=1.2;\n    p.x= abs(p.x)-0.72;\n    p.y= abs(p.y)-0.53;\n    m = -dot(p-vec2(0.02,0.0),vec2(cos(a),sin(a)));\n    d2 = max(m,d2);\n    m = dot(p-vec2(0.32,0.0),vec2(cos(a),sin(a)));\n    d2 = max(m,d2);\n    \n    d = min(d,d2);\n    \n    p = prevP;\n    \n    d2 = triAnimatin(p);\n    d = min(d,d2);\n    \n    \n    p = prevP;\n    p.x= abs(p.x)-0.6;\n    p.y= abs(p.y)-0.418;\n    \n    d2 = randomDotLine(p);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat scifiUI3Base(vec2 p){\n    float d = abs(length(p)-0.03)-0.01;\n    p.x=abs(p.x)-0.1;\n    float d2 = abs(length(p)-0.03)-0.01;\n    d = min(d,d2);\n    return d;\n}\n\nfloat scifiUI3(vec2 p){\n    vec2 prevP = p;\n    float d = abs(length(p)-0.03)-0.01;\n    \n    mat2 animRot = Rot(radians(iTime*speed)*40.0);\n    p*=animRot;  \n    \n    float a = radians(50.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    a = radians(-50.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);   \n    \n    p = prevP;\n    p.x=abs(p.x)-0.1;\n    animRot = Rot(radians(iTime*speed)*45.0);\n    p*=animRot;  \n    \n    \n    float d2 = abs(length(p)-0.03)-0.01;\n    \n    a = radians(170.);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    a = radians(-170.);\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);   \n    \n    return min(d,d2);\n}\n\nfloat slider(vec2 p){\n    vec2 prevP = p;\n    \n    float d = abs(B(p,vec2(0.15,0.015)))-0.001;\n    float d2 = B(p-vec2(sin(iTime*speed/3.*1.5)*0.13,0),vec2(0.02,0.013));\n    d = min(d,d2);\n    \n    p.y = abs(p.y)-0.045;\n    d2 = abs(B(p,vec2(0.15,0.015)))-0.001;\n    d = min(d,d2);\n    d2 = B(p-vec2(sin(.5+iTime*speed/3.*2.0)*-0.13,0),vec2(0.02,0.013));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y=abs(p.y);\n    d2 = scifiUI(p-vec2(0.032,0.045));\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat bg(vec2 p){\n    p = mod(p,0.3)-0.15;\n    float d = B(p,vec2(0.001,0.01));\n    float d2 = B(p,vec2(0.01,0.001));\n    d = min(d,d2);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col =vec3(0.0);\n    float d = bg(uv);\n    col = mix(col, vec3(0.3),S(d,0.0));\n    \n    d = mainWave(uv);\n    //col = mix(col, vec3(1.),S(d,-0.005));\n    \n    d = scifiUI2(uv);\n    \n    float d2 = circleUI(uv);\n    d = min(d,d2);\n\n    d2 = smallCircleUI(uv-vec2(-0.62,-0.22));\n    d = min(d,d2);\n    \n    d2 = smallCircleUI2(uv);\n    d = min(d,d2);\n    \n    d2 = graph(uv-vec2(-0.67,0.19));\n    //d = min(d,d2);\n    col = mix(col, vec3(0.1,0.99,0.1),S(d2,0.0)); // adding color\n    \n    d2 = barCode(uv-vec2(0.63,-0.27));\n    //d = min(d,d2);\n    col = mix(col, vec3(1.,0.2,0.2),S(d2,0.0)); // adding color\n    \n    d2 = slider(uv-vec2(0.62,0.26));\n    //d = min(d,d2);\n    col = mix(col, vec3(1.,0.7,0.2),S(d2,0.0)); // adding color\n    \n    col = mix(col, vec3(1.),S(d,0.0));\n    \n    d = scifiUI3Base(uv-vec2(0.65,0.));\n    col = mix(col, col+vec3(0.5),S(d,0.0));\n    \n    d = scifiUI3(uv-vec2(0.65,0.));\n    //col = mix(col, vec3(1.),S(d,0.0));\n    col = mix(col, vec3(0.2,0.2,0.2),S(d,0.0)); // adding color\n    \n    \n    //test\n    //col = vec3(1.-smoothstep(length(uv-vec2(0.)),0.00,0.01));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// does nothing at the moment\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    vec2 uv2 = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 center = uv2;\n    vec4 m  = iMouse;\n    vec2 m2 = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    m2.y /= aspect;\n    \n    m.xy /= iResolution.xy;\n    if (m.x < 0.01) {\n        m.xy = vec2(0.5,0.5-.15/1.785);\n        m2.xy = vec2(0.,-0.15);\n    }\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    \n        // naive\n    int count = 250;\n    vec4 t = vec4(0);\n    float mLength = length(m.xy*vec2(1.,aspect)-uv*vec2(1.,aspect));\n    //count = int(mLength*200.+150.); // a bit faster and a bit dirtier\n    /*for(int i=1;i<=count;i++){\n        float fi = float(i);\n        float mul = float(count)/fi;\n        float poffs = fi/float(count);\n        vec2 offs = (mul-1.)/2.+m2.xy*aspect*(1.0-poffs)*mul;\n        //vec2 offs = m.xy*(1.0-poffs);\n        float noise = textureLod(iChannel3, (uv*mul-offs)/5.+iTime/100., 0.).r;\n        float grad = clamp((1.0-fi/float(count))*1., 0., 1.);\n        t += textureLod(iChannel0, uv*mul-offs, 0.)*grad*noise;\n        //t.r *= (i == 2) ? .1 : 1.;\n    }*/\n    \n    float centerMask = smoothstep(0.0, 0.15, length(center));\n    fragColor += t*3./float(count)*3.;//*centerMask;// * noise;\n    //fragColor += textureLod(iChannel0, uv, 0.);\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n\n}","name":"Buffer B","description":"","type":"buffer"}]}