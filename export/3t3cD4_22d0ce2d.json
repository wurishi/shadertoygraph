{"ver":"0.1","info":{"id":"3t3cD4","date":"1609038409","viewed":118,"name":"aab [spaz]","username":"HaleyHalcyon","description":"a","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (3.14159265358979 * 2.)\n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\n// should generate 4 1-bit RGB colors, where\n// colors 0 and 2, and colors 1 and 3, can't be the same\nmat4x3 randCol(uint x) {\n    uvec3 col0 = uvec3(\n         x        & 1u,\n        (x >> 1u) & 1u,\n        (x >> 2u) & 1u\n    );\n    uvec3 col1 = uvec3(\n        (x >> 3u) & 1u,\n        (x >> 4u) & 1u,\n        (x >> 5u) & 1u\n    );\n    uint y = x ^ ((x >> 6u) % 6u + 1u);\n    uvec3 col2 = uvec3(\n         y        & 1u,\n        (y >> 1u) & 1u,\n        (y >> 2u) & 1u\n    );\n    y = (x >> 3u) ^ ((x >> 9u) % 6u + 1u);\n    uvec3 col3 = uvec3(\n         y        & 1u,\n        (y >> 1u) & 1u,\n        (y >> 2u) & 1u\n    );\n    return mat4x3(col0, col1, col2, col3);\n}\n\nfloat logStripe(vec2 uv, float offset, float angleAdd) {\n    return fract(offset + 2. * log(abs(dot(\n        uv, vec2(cos(angleAdd), sin(angleAdd))\n    ))+0.03));\n}\n\nuint lastTime = uint(-1);\nmat4x3 colors;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = length(iResolution);\n    vec2 uv = fragCoord / scale;\n\tuv -= (iResolution.xy / scale) / 2.;\n    uv *= 2.0;\n    \n    float distSq = uv.x*uv.x+uv.y*uv.y;\n    float angle = atan(uv.x, uv.y);\n    float angleAdd = fract(iTime / 10.);\n    float distAdd = fract(iTime / 0.3);\n    \n    uv *= distSq;\n    \n    uint which = uint(step(fract(distSq + (angle / TAU - angleAdd) * 2.), 0.5));\n    \n    uint colTime = uint(int(mod(iTime - tan(iTime * TAU * 0.5) * .8 + sin(iTime * TAU * 0.25) * 6., 4294967295.)));\n    if (lastTime != colTime) {\n        lastTime = colTime;\n        uint hash = hash(colTime);\n        colors = randCol(hash);\n    }\n    \n    float s = max(\n        logStripe(uv, distAdd, angleAdd * TAU),\n        logStripe(uv, distAdd, angleAdd * TAU - 0.25 * TAU)\n    );\n    \n    vec3 col = \n    mix(colors[which], colors[2u + which], s);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}