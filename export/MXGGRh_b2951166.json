{"ver":"0.1","info":{"id":"MXGGRh","date":"1717262169","viewed":66,"name":"RGB Circles Spinning","username":"TWKTemplar","description":"I made a circle that is centered and then offset by sin and cos to make it move in a circle over time.\nI then set the rgb to have different speeds for the sin n cos offset.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circles","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sqr(float a){return pow(a,2.0);}\nfloat dist(vec2 A, vec2 B) {\n  return sqrt(sqr(B.x-A.x) + sqr(B.y-A.y));}\nfloat sin01(float a){return sin(time*a)*0.5+0.5;}\nfloat cos01(float a){return cos(time*a)*0.5+0.5;}\nfloat clamp01(float a){return clamp(a,0.,1.);}\nfloat Sphere(vec2 uv, float speed, float size)\n{\n  float animSpeed = 10. * speed;//Animation Speed of the sphere\n  float moveDist = 0.1;//Distance the sphere is moved from the center of the screen\n  \n  float ratio = resolution.y/resolution.x;\n  vec2 CenterOfScreenOffset = vec2(0.5,0.5) * vec2(1,ratio);\n  \n  float xAnimatedOffset = (sin01(animSpeed)*0.5)-0.5;  \n  float yAnimatedOffset = ((cos01(animSpeed)*0.5)-0.5) * ratio;\n  vec2 sphereAnimatedOffset = vec2(xAnimatedOffset,yAnimatedOffset) * moveDist;\n  \n  vec2 spherePosition = CenterOfScreenOffset + sphereAnimatedOffset;//center point of the sphere\n  \n  float mask = step(dist(spherePosition,uv),size);//black and white drawing of a sphere\n\n  return mask;\n}\nfloat White(vec3 col)\n{\n  float s = 0.5;// step line\n  return step(0.5,col.x)*step(0.5,col.y)*step(0.5,col.z);\n\n}\nvec3 MCS(vec2 uv, float size)//Make Color Sphere\n{\n  vec3 speed = vec3(0.9,0.95,1.0) +( 0.1* size);//anim speed\n  vec3 color= vec3(Sphere(uv,speed.x,size),\n                   Sphere(uv,speed.y,size),\n                   Sphere(uv,speed.z,size)\n                   );\n  return color - vec3(White(color));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Settings\n    float CircleSize = 1.0;\n    float CircleCount = 5.0;\n    \n    //Code\n    vec2 uv = fragCoord.xy/resolution.xy;\n    float ratio = resolution.y/resolution.x;\n    uv *= vec2(1,ratio);\n    vec3 col = vec3(0);\n    for(float i=1.; i<=CircleCount; i+=1.){\n        float brightness = pow(clamp01((time+2.)/(i*2.)),30.);\n        col += MCS(uv,i*0.05*CircleSize)*brightness;\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define time        iTime\n#define resolution  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)","name":"Common","description":"","type":"common"}]}