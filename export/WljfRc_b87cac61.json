{"ver":"0.1","info":{"id":"WljfRc","date":"1599682605","viewed":756,"name":"Retro synthwave","username":"vegardno","description":"Just felt like doing my own kind of retro 80s demo thing. A bit boring.","likes":11,"published":1,"flags":40,"usePreview":0,"tags":["wave","80s","retro","music","synth","synthwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n#if 1 // distortions\n    float t1 = rand(vec2(floor(iTime), 1.));\n    float t2 = rand(vec2(floor(iTime), 2.));\n    float t3 = rand(vec2(floor(iTime), 3.));\n    float t4 = rand(vec2(floor(iTime), 4.));\n    \n    if (mod(iTime + t1, 2.) < .1)\n    \tuv.y += .005 * texture(iChannel2, uv).y;\n    if (mod(iTime + t2, 3.) < .1 && uv.y < mod(iTime, 1.))\n    \tuv.x -= .01 * texture(iChannel2, uv + iTime).x;\n    if (mod(iTime + t3, 5.) < .1)\n        uv.x += .5 * sin(20. * radians(360.) * uv.y + iTime);\n    if (mod(iTime + t4, 7.) < .06)\n        uv.x += .007 * sin(20. * radians(360.) * uv.y + 3. * radians(360.) * iTime);\n#endif\n\n    fragColor = max(texture(iChannel0, uv), texture(iChannel1, uv));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float gamma = 2.2;\n\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(3. / 3., 2. / 3., 1. / 3., 3.);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6. - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glRotate.xml\nmat4 rotate(float a, vec3 v)\n{\n    float c = cos(a);\n    vec3 ci = (1. - c) * v;\n    vec3 s = sin(a) * v;\n\n    return mat4(\n        ci.x * v.x + c, ci.x * v.y + s.z, ci.x * v.z - s.y, 0,\n        ci.y * v.x - s.z, ci.y * v.y + c, ci.y * v.z + s.x, 0,\n        ci.z * v.x + s.y, ci.z * v.y - s.x, ci.z * v.z + c, 0,\n        0, 0, 0, 1\n    );\n}\n\n// https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glTranslate.xml\nmat4 translate(vec3 v)\n{\n    return mat4(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        v.x, v.y, v.z, 1\n    );\n}\n\nvec3 background(vec2 uv)\n{\n    vec3 top_hsv = vec3(250. / 360., 74. / 100., 15. / 100.);\n    vec3 bot_hsv = vec3(375. / 360., 58. / 100., 100. / 100.);\n    vec3 col_hsv = mix(top_hsv, bot_hsv, 1. - uv.y)\n        + .05 * vec3(\n        \ttexture(iChannel0, uv - vec2(.01 * iTime, .01 * iTime))\n        \t* texture(iChannel0, -uv - vec2(.01 * iTime, .01 * iTime))\n    );\n    // stars\n    col_hsv = max(col_hsv, vec3(0, .3, 1.5) * smoothstep(.99, 1., rand(uv)));\n    vec3 col = pow(hsv2rgb(col_hsv), vec3(gamma));\n    //col += .4 * vec3(smoothstep(.99, 1., rand(uv)));\n    \n    return col;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 cube(vec2 uv)\n{\n    mat4 m = mat4(1)\n        //* rotate(radians(-30.), vec3(1, 0, 0))\n        * rotate(radians(30.) * iTime, vec3(0, 1, 0));\n\n    // generate (projected) points on the cube\n    vec2 points[8];\n    for (int i = 0; i < 8; ++i) {\n        vec3 p = 2. * vec3(equal(ivec3(i & 4, i & 2, i & 1), ivec3(0))) - 1.;\n        p = (m * vec4(p, 0.)).xyz;\n        \n        // perspective\n        points[i] = 2.5 * p.xy / (10. + p.z);\n        \n        // isometric\n        //points[i] = .3 * p.xy;\n    }\n\n    ivec2 lines[12] = ivec2[12](\n        ivec2(0, 1),\n\t\tivec2(0, 2),\n\t\tivec2(0, 4),\n\t\tivec2(1, 3),\n        ivec2(1, 5),\n        ivec2(2, 3),\n        ivec2(2, 6),\n        ivec2(3, 7),\n        ivec2(4, 5),\n        ivec2(4, 6),\n        ivec2(5, 7),\n        ivec2(6, 7)\n    );\n\n    float d = 1e8;\n    for (int i = 0; i < 12; ++i)\n        d = min(d, sdSegment(uv, points[lines[i].x], points[lines[i].y]));\n\n    float hue = (150. + 60. * sin(iTime)) / 360.;\n    vec3 col = hsv2rgb(vec3(hue, 1., 1.));\n\n    return smoothstep(1. / iResolution.y, -1. / iResolution.y, d - 1. / iResolution.y) * col;\n}\n\nvec3 moon(vec2 uv)\n{\n    float d = length(uv - vec2(0, .2)) - .15;\n    return vec3(1., .6, .5) * smoothstep(1. / iResolution.y, -1. / iResolution.y, d);\n}\n\nvec3 grid(vec2 uv)\n{\n    mat4 m =\n        \n    \t//rotate(radians(-30.), vec3(1, 0, 0))\n        translate(vec3(0., -1., 0))\n        //* rotate(radians(30.) * iTime, vec3(0, 1, 0))\n        ;\n\n    float d = 1e8;\n    for (int i = 0; i < 11; ++i) {\n        float z = mod(float(i) - iTime * float(i != 0), 10.);\n\t\tif (i == 0)\n            z = 10.;\n        vec4 a = m * vec4(-100, 0, z, 1);\n        vec4 b = m * vec4( 100, 0, z, 1);\n        d = min(d, sdSegment(uv, a.xy / a.z, b.xy / b.z));\n    }\n    \n    for (int x = 0; x < 16; ++x) {\n        vec4 a = m * vec4(float(x) / 1. - 8., 0, 1., 1);\n        vec4 b = m * vec4(float(x) / 1. - 8., 0, 10., 1);\n        d = min(d, sdSegment(uv, a.xy / a.z, b.xy / b.z));\n    }\n\n    float hue = (150. + 60. * sin(radians(10.) * iTime)) / 360.;\n    vec3 col = hsv2rgb(vec3(hue, 1., 1.));\n\n    //return smoothstep(1. / iResolution.y, -1. / iResolution.y, d - 1. / iResolution.y) * col;\n    return smoothstep(1. / iResolution.y, -1. / iResolution.y, d - .003) * col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = background(fragCoord / iResolution.xy)\n        //+ cube(uv)\n        + moon(uv)\n        + grid(uv)\n        ;\n\n    col = pow(col, vec3(1. / gamma));\n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Blur (very bad, don't copy this)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float A = 2.;\n\tconst int N = 2;\n\n    vec4 col = vec4(0);\n    for (int yoff = -N; yoff <= N; ++yoff) {\n        for (int xoff = -N; xoff <= N; ++xoff) {\n            vec2 off = vec2(xoff, yoff);\n            vec2 uv = (fragCoord + A * off) / iResolution.xy;\n            col += texture(iChannel0, uv) / (.5 + 1. * length(off / vec2(N, N)));\n        }\n    }\n\n    fragColor = vec4(col.rgb / float((N + N) * (N + N)), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp, float time )\n{\n    float t = mod(radians(360.) * time, radians(360.));\n    float drone = .75 * sign(sin(55. * t) + .4 * sin(220. * t));\n    float bass = smoothstep(-.01, .01, cos(1. * t));\n    float hh = 2. * fract(sin(dot(vec2(t, 100.), vec2(12.9898, 78.233))) * 43758.5453) - 1.;\n    time *= 1.2;\n    float q = mod(time / .25, 4.);\n    float bar = mod(time / .25, 8.);\n    return .25 * vec2(\n        .75 * drone * exp(-4. * mod(time, .25)) * smoothstep(0., 4., q + .5)\n        + 1. * bass * exp(-7. * mod(time, 1.)) * float(bar > 4.)\n        + .5 * hh * exp(-8. * mod(time, .5)) * float(bar < 1.)\n    );\n}","name":"Sound","description":"","type":"sound"}]}