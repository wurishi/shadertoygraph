{"ver":"0.1","info":{"id":"7lsSWn","date":"1625496021","viewed":124,"name":"Diffraction Patterns","username":"diabolix17","description":"Diffraction patterns of N equally spaced oscillators along the horizontal midline. Peaks (positive amplitude) are red and troughs (negative amplitude) are green. Click to compare with a formula for the intensity derived by Feynman.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["waves","diffraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 5\n#define ZOOM 1.0\n#define OSCILLATOR_SPAN (1.0 / ZOOM)\n#define FREQ -3.0\n#define ALPHA 3.1415926 // phase difference between oscillators\n#define WAVELEN (0.03 / ZOOM)\n#define PI 3.1415926\n#define PLOT_INTENSITY false\n#define SHOW_OSCILLATORS false\n#define OSCILLATOR_RADIUS 0.01\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float aspect_ratio = iResolution.x / iResolution.y;\n    vec2 pixel_position = fragCoord/iResolution.y;\n    \n    if(iMouse.z > 0.0){\n    \n        // Feynman intensity approximation from his lecture (https://www.feynmanlectures.caltech.edu/I_30.html)\n        // works in the limit as the distance goes to infinity, which can be verified here (e.g. set ZOOM to 100.0)\n        vec2 dir = pixel_position - vec2(aspect_ratio*0.5, 0.5);\n        dir /= length(dir);\n        float angle = acos(dir.y);\n        float phase_diff = ALPHA + 2.0*PI*OSCILLATOR_SPAN/float(N-1)*sin(angle)/WAVELEN;\n        float intensity = sin(float(N) * phase_diff / 2.0) / (sin(phase_diff / 2.0) * float(N));\n        intensity *= intensity;\n        fragColor = vec4(vec3(intensity), 1.0);\n    \n    } else {\n    \n        //float wave_amplitude = 0.5*(cos(iTime + pixel_position.y*10.0) + cos(iTime + pixel_position.x*10.0));\n    \n        float wave_amplitude = 0.0;\n    \n        if(N == 1){\n            float dist = length(pixel_position - vec2(0.5*aspect_ratio, 0.5));\n            wave_amplitude = cos(iTime * FREQ + dist/WAVELEN * 2.0 * PI);\n        } else {\n            for(int i = 0; i < N; i++){\n                vec2 oscillator_position = vec2(0.5*aspect_ratio -OSCILLATOR_SPAN/2.0 + float(i) * OSCILLATOR_SPAN / float(N-1), 0.5);\n                float dist = length(pixel_position - oscillator_position);\n                if(SHOW_OSCILLATORS && dist < OSCILLATOR_RADIUS){\n                    fragColor = texture(iChannel0, (pixel_position-oscillator_position + vec2(OSCILLATOR_RADIUS)) / (2.0*OSCILLATOR_RADIUS));\n                    return;\n                }\n                wave_amplitude += cos(iTime * FREQ + float(i)*ALPHA + dist / WAVELEN * 2.0 * PI);\n            }\n            \n        }\n        \n        wave_amplitude /= float(N);\n    \n        if(PLOT_INTENSITY){\n            float intensity = wave_amplitude * wave_amplitude;\n            fragColor = vec4(vec3(intensity), 1.0);\n        } else {\n            float r = (wave_amplitude > 0.0) ? wave_amplitude : 0.0;\n            float g = (wave_amplitude < 0.0) ? -wave_amplitude : 0.0;\n            fragColor = vec4(r,g,0.0,1.0);\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}