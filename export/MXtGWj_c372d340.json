{"ver":"0.1","info":{"id":"MXtGWj","date":"1717039635","viewed":53,"name":"Hypnotizing Blob","username":"Merlijnvanb","description":"First real shader I made after researching raymarching for a while, was a fun time will do again for sure!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","relaxing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"RayMarching Test Merlijn\" by Merlijnvanb. https://shadertoy.com/view/lXc3zS\n// 2024-05-30 01:33:31\n\n//Center SDF from Inigo Quilez's \"Sculpture III\"\n\n#define MAX_STEPS 200\n#define MAX_DIST 20.\n#define SURFACE_DIST .01\n#define PI 3.1415926535897932384626433832795\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nvec3 mapP( vec3 p )\n{\n    p.xyz += 1.000*sin(  2.0*p.yzx ) * ((sin(iTime/4. + 1.25)));\n    p.xyz += 0.500*sin(  4.0*p.yzx ) * ((sin(iTime/4. + 1.25)));\n    p.xyz += 0.250*sin(  8.0*p.yzx ) * ((sin(iTime/4. + 1.25)));\n    p.xyz += 0.050*sin( 16.0*p.yzx ) * ((sin(iTime/4. + 1.25)));\n    return p;\n}\n\nfloat map( vec3 q, vec3 pos )\n{\n    vec3 p = mapP( q );\n    float d = length( p ) - 1.5;\n\treturn smax(d * 0.05, -sdSphere(pos, 1.5), 3.);\n}\n\nvec2 RayMarch(vec3 rOrigin, vec3 rDirection)\n{\n    vec2 data;\n    float glowDist = 3.;\n    float previousDist;\n    \n    for(int i = 0; i<MAX_STEPS;i++)\n    {\n        vec3 marchPosition = rOrigin + rDirection*data.x;\n        float distFromScene = map(marchPosition, rOrigin);\n        data.x += distFromScene;\n        if(data.x > MAX_DIST || distFromScene < SURFACE_DIST) break;\n        if(distFromScene < glowDist && distFromScene >= previousDist) data.y += .025;\n        previousDist = distFromScene;\n    }\n    \n    return data;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float w )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<256 && t<maxt; i++ )\n    {\n        float h = map(ro + t*rd, ro);\n        res = min( res, h/(w*t) );\n        t += clamp(h, 0.005, 0.50);\n        if( res<-1.0 || t>maxt ) break;\n    }\n    res = max(res,-1.0);\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res);\n}\n\nvec3 GetNormal(vec3 point, vec3 ro)\n{\n    float dist = map(point, ro);\n    vec2 e = vec2(.1, 0);\n    \n    vec3 normal = dist - vec3(\n        map(point - e.xyy, ro),\n        map(point - e.yxy, ro),\n        map(point - e.yyx, ro));\n        \n    return normalize(normal);\n}\n\nfloat GetLight(vec3 point, vec3 rayOrigin)\n{\n    vec3 lightDir = normalize(vec3(sin(iTime/9.),cos(iTime/13.),-sin(iTime/10.)));\n    vec3 normal = GetNormal(point, rayOrigin) *.1;\n    \n    float diffuse = clamp(dot(-lightDir, normal), 0., 1.);\n    float shadowCheck = softshadow(point, -lightDir, 0.1, 10., .1);\n    diffuse *= shadowCheck;\n    return diffuse;\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 rayOrigin = vec3(sin(iTime/8.)*5.,0,(cos(iTime/5.)*5.));\n    vec3 rayDirection = normalize(vec3(uv.x,uv.y,1)-rayOrigin/(sin(iTime/10.)/2.+4.));\n    \n    vec2 dist = RayMarch(rayOrigin, rayDirection);\n    \n    vec3 point = rayOrigin + rayDirection*dist.x;\n    \n    float diffuse = GetLight(point, rayOrigin);\n    col = vec3(diffuse) * clamp(palette(iTime/20.,\n    vec3(0.8,0.5,0.4), \n    vec3(0.2,0.4,0.2), \n    vec3(2.0,1.0,1.0), \n    vec3(0.00,0.25,0.25)), .25 ,1.)\n    + smoothstep(0. ,3., dist.y) * clamp(palette(iTime/10., \n    vec3(0.5,0.5,0.5), \n    vec3(0.5,0.5,0.5), \n    vec3(1.0,1.0,1.0), \n    vec3(0.30,0.20,0.20)), .3, 5.);\n    \n    //col = vec3(smoothstep(0. , 1., dist.y/6.));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}