{"ver":"0.1","info":{"id":"Xlj3WK","date":"1433000162","viewed":186,"name":"Ray Marching - SI assignment","username":"captain_shader","description":"based on iq's raymarching algorithm\n\nhttps://iquilezles.org/articles/distfunctions/distfunctions.htm","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","simple","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define SMALL_AMOUNT 0.0001\n#define SAMPLES 30.0\n\n//////////////////////////////////////////////////////////////////\n// PRIMITIVE DEFINITION // PRIMITIVE DEFINITION // PRIMITIVE DE //\n//////////////////////////////////////////////////////////////////\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n\treturn length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b; \n    return min(max(d.x,max(d.y,d.z)),0.0) +length(max(d,0.0));\n}\n\n//////////////////////////////////////////////////////////////////\n// UTILS METHODS // UTILS METHODS // UTILS METHODS // UTILS MET // \n//////////////////////////////////////////////////////////////////\n\nvec4 getCloser( vec4 d1, vec4 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec4 getIntersect( vec4 d1, vec4 d2 )\n{\n    return (d1.x > d2.x) ? d1 : d2;\n}\n\n//////////////////////////////////////////////////////////////////\n// MAP RETURNS THE CLOSER INTERSECTION AND ITS COLOUR // MAP RE //\n//////////////////////////////////////////////////////////////////\n\nvec4 map( in vec3 pos )\n{\n\t// plane definition\n\tfloat planeDistance = sdPlane(pos);\n\tvec3 planeColour = vec3(500.0);\n\t\n\t// sphere definition\n\tfloat sphereRadius = 0.5;\n\tfloat sphereDistance = sdSphere( pos-vec3( 0.0, sphereRadius, 0.0), sphereRadius );\n\tvec3 sphereColour = vec3(0.3, 0.0, 0.2);\n    \n    // box definition\n    float boxSize = 0.5;\n    vec3 boxPosition = vec3(0.5+sphereRadius+boxSize, boxSize, 0.0);\n    float boxDistance = sdBox(pos-boxPosition, vec3(boxSize));\n    vec3 boxColour = vec3(0.2, 0.1, 0.0);\n    \n    // sphere 2 definition\n\tfloat sphere2Radius = boxSize*1.3;\n    vec3 sphere2Position = vec3(0.5+sphereRadius+boxSize, boxSize, 0.0);\n\tfloat sphere2Distance = sdSphere( pos-sphere2Position, sphere2Radius );\n\t\n    // mapping\n\tvec4 res = getIntersect( vec4( boxDistance, boxColour ), vec4( sphere2Distance, boxColour ) );\n    res = getCloser( res, vec4( sphereDistance, sphereColour ) );\n   \tres = getCloser( res, vec4( planeDistance, planeColour) );\n        \n    for (int i = 0; i < 4; i++) \n    {\n        for (int j = 0; j < 4; j++)\n        {         \n            // the first two positions already contain a primitive\n            if ( i == 0 && (j==0 || j==1) ) continue;\n            \n            // place auto-generated boxes in the scene\n            boxPosition = vec3((0.5+sphereRadius+boxSize)*float(j), boxSize, (0.5+sphereRadius+boxSize)*float(i));\n            boxDistance = sdBox(pos-boxPosition, vec3(boxSize));\n            res = getCloser( res, vec4( boxDistance, vec3(0.7/float(j+1), 0.6/float(i+1), 1.0/float(i+j+3)) ) );\n        }\n    }\n    \n\treturn res;\n}\n\n//////////////////////////////////////////////////////////////////\n// 3D NORMAL OF POINT // 3D NORMAL OF POINT // 3D NORMAL OF POI //\n//////////////////////////////////////////////////////////////////\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec2 eps = vec2( SMALL_AMOUNT, 0.0 );\n\t\n\t// amazingly clever function to find the normal of a point in space\n\t// knowing the distance to the camera of the points around it\t\n\tvec3 nor = vec3(\n\t\tmap(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t\tmap(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t\tmap(pos+eps.yyx).x - map(pos-eps.yyx).x );\n    \n    //float t = 0.0;\n  \t//t += normalize(texture(iChannel0,.3+pos.xz/6e3,-99.)).x;\n    \n\treturn normalize(nor);\n}\n\n//////////////////////////////////////////////////////////////////\n// CAMERA METHODS // CAMERA METHODS // CAMERA METHODS // CAMERA //\n//////////////////////////////////////////////////////////////////\n\nmat3 setCamera( in vec3 eye, in vec3 center, float upAngle )\n{\n\tvec3 front = normalize(center-eye);\n\tvec3 worldUp = vec3(sin(upAngle), cos(upAngle), 0.0);\n\tvec3 right = normalize( cross(front, worldUp) );\n\tvec3 cameraUp = normalize( cross(right, front) );\n\treturn mat3( right, cameraUp, front );\n}\n\nvec4 castRay( in vec3 eye, in vec3 rayDir )\n{\n\tfloat tmin = 1.0;\n\tfloat tmax = 50.0;\n\t\n\tfloat tHit = tmin;\n\tvec3 colour = vec3(-1.0);\n\tfor( int i=0; i<1550; i++ )\n\t{\n\t\tvec4 res = map( eye+rayDir*tHit );\n\t\t// if intersection is too close or too far break\n\t\tif( res.x < SMALL_AMOUNT || tHit > tmax ) break;\n\t\ttHit += res.x; // tHit\n\t\tcolour = vec3(res.y, res.z, res.w); // point colour\n\t}\n\t\n\tif (tHit > tmax) colour = vec3(-1.0);\n\treturn vec4( tHit, colour );\n}\n\n//////////////////////////////////////////////////////////////////\n// LIGHT METHODS // LIGHT METHODS // LIGHT METHODS // LIGHT MET // \n//////////////////////////////////////////////////////////////////\n\nfloat getAmbientOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occlusion = 0.0;\n\tfloat shadowScatter = 1.5;\n\t\n\tconst int maxit = 5; // maxit shades\n\tfor( int i=1; i<=maxit; i++ )\n\t{\n\t\tfloat height = 0.01 + 0.1*float(i)/float(maxit);\n\t\tvec3 shadowPos =  nor * height + pos; // 3D point that might cast a shadow\n\t\tfloat dist = map( shadowPos ).x;\n\t\t// (height - dist) avoids a point casting a shadow over itself\n\t\tocclusion += (height-dist)*shadowScatter;\n\t\t// objects far cast less shadow\n\t\tshadowScatter *= 0.75;\n\t}\n\treturn clamp( 1.0 - 3.0*occlusion, 0.0, 1.0 );\t\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n\tfloat t = mint;\n\tfor( int i=0; i < int(SAMPLES); i++ )\n\t{\n\t\tfloat h = map( ro + rd*t ).x;\n\t\tres = min( res, SAMPLES/2.0 * h/t );\n\t\tt += clamp( h, 0.02, 0.10 );\n\t\tif( h < 0.001 || t>tmax ) break;\n\t}\n\treturn clamp( res, 0.0, 1.0 );\n}\n\n//////////////////////////////////////////////////////////////////\n// MAIN // MAIN // MAIN // MAIN // MAIN // MAIN // MAIN // MAIN //\n//////////////////////////////////////////////////////////////////\n\nvec3 render( in vec3 eye, in vec3 rayDir )\n{ \n\t// background color\n\tvec3 finalColour = vec3(0.0);\n\tvec4 res = castRay(eye, rayDir);\n\t\n\tfloat tHit = res.x;\n\tvec3 hitColour = vec3(res.y, res.z, res.w);\n\t\n\t// if no intersection was found, the pixel colour is not changed\n\tif( hitColour.x + hitColour.y + hitColour.z > -0.5 )\n\t{\n\t\tvec3 pos = eye + tHit*rayDir;\n\t\tvec3 nor = calcNormal( pos );\n\t\tvec3 ref = reflect( rayDir, nor );\n\t\t\n\t\t// material\t\t\n\t\tif( hitColour.x > 100.0 )\n\t\t{   \n\t\t\tfloat tileSize = hitColour.x/700.0;\n\t\t\tfloat f = mod( floor(tileSize*pos.z) + floor(tileSize*pos.x), 2.0);\n\t\t\tfinalColour = 0.05+f*vec3(0.25);\n\t\t}\n        else\n        {\n            finalColour = hitColour;\n        }\n\n\t\t// lighting\t\t\n\t\tfloat occlusion = getAmbientOcclusion( pos, nor );\n        float howfastistime = 0.3;\n\t\tvec3  lightdirection = normalize( vec3(-1.5, 1.0, 0.5) ); //ligth direction\n        \n\t\t// phong\n\t\tfloat ambient = clamp( nor.y, 0.0, 0.0 );\n\t\tfloat diffuse = clamp( dot( nor, lightdirection ), 0.0, 2.0 );\n\t\tfloat specular = pow(clamp( dot( ref, lightdirection ), 0.0, 1.0 ), 20.0);\n\t\t\t  \n\t\tfloat reflection = softshadow( pos, ref, 0.01, 1.1 );\n\t\tdiffuse *= softshadow( pos, lightdirection, 0.05, 1.0 );\n\t\t\t\t\n\t\tfloat light = 0.3 + ambient * 0.2; // ambient light\n        light += diffuse * 1.0 ; // diffuse light\n\t\tlight += specular * 1.0 * diffuse; // specular light\n        \n\t\tlight += reflection * 0.3;\t\t\n\t\t\n\t\tfinalColour *= light * occlusion; // ambient occlusion\n\t\tfinalColour *= exp( -tHit*SMALL_AMOUNT*1000.0 ); // distance matters\n\t}\n\n\treturn vec3( clamp(finalColour,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 screenPoint = -1.0 + 2.0*q;\n\tscreenPoint.x *= iResolution.x/iResolution.y;\n\tvec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\t//vec3 eye = vec3( 3.2*cos(0.1*time + 0.5*mo.x), 1.5, 3.2*sin(0.1*time + 0.5*mo.y));\n    vec3 eye = vec3( -1.5 + 2.0*mo.x, 2.5 + 2.0*mo.y, -1.5);\n\tvec3 center = vec3( 1.5, 0.0, 1.5 );\n\t\n\t\n\t// camera-to-world transformation\n\tmat3 camera = setCamera( eye, center, 0.0 );\n\t\n\t// ray direction\n\tvec3 rayDir = camera * normalize( vec3(screenPoint.xy,2.0) );\n\n\t// render\t\n\tvec3 rayColor = render( eye, rayDir );\n\t\n\t// nicer color \n\trayColor = pow( rayColor, vec3(0.5) );\n\n\tfragColor=vec4( rayColor, 1.0 );\n}","name":"","description":"","type":"image"}]}