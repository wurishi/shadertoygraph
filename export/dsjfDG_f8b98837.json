{"ver":"0.1","info":{"id":"dsjfDG","date":"1690107977","viewed":35,"name":"Fork Structures GROND 948","username":"GROND","description":"derivative shader made using chatgpt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"Ms2SDc","parentname":"Structures"},"renderpass":[{"inputs":[],"outputs":[],"code":"const float PI=3.14159265358979323846;\nconst float value=0.0;\n\nfloat rand(in vec2 p,in float t)\n\t{\n\treturn fract(sin(dot(p+mod(t,1.0),vec2(12.9898,78.2333)))*43758.5453);\n\t}\n\nvec2 rotate(vec2 k,float t)\n\t{\n\treturn vec2(cos(t)*k.x-sin(t)*k.y,sin(t)*k.x+cos(t)*k.y);\n\t}\n\nfloat scene1(vec3 p)\n\t{\n\tfloat speed=iTime*0.5;\n\tfloat ground=dot(p,vec3(0.0,1.0,0.0))+0.75;\n\tfloat t1=length(abs(mod(p.xyz,2.0)-1.0))-1.35+0.05*cos(PI*p.x*4.0)+0.05*sin(PI*p.z*4.0);\t// structure\n\tfloat t3=length(max(abs(mod(p.xyz,2.0)-1.0).xz-1.0,0.5))-0.075+0.1*cos(p.y*36.0);\t\t\t// structure slices\n\tfloat t5=length(abs(mod(p.xyz,0.5))-0.25)-0.975;\n\tfloat bubble_w=0.8+0.2*cos(PI*p.z)+0.2*cos(PI*p.x);\n\tfloat bubble=length(mod(p.xyz,0.125)-0.0625)-bubble_w;\n\tfloat hole_w=0.05;\n\tfloat hole=length(abs(mod(p.xz,1.0)-0.5))-hole_w;\n\tfloat tube_p=2.0-0.25*sin(PI*p.z*0.5);\n\tfloat tube_v=PI*8.0;\n    float tube_b=tube_p*0.02;\n\tfloat tube_w=tube_b+tube_b*cos(p.x*tube_v)*sin(p.y*tube_v)*cos(p.z*tube_v)+tube_b*sin(PI*p.z+speed*4.0);\n\tfloat tube=length(abs(mod(p.xy,tube_p)-tube_p*0.5))-tube_w;\n\treturn min(max(min(-t1,max(-hole-t5*0.375,ground+bubble)),t3+t5),tube);\n\t}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = iTime * 0.5;\n    float ground_x = 1.5 * cos(PI * speed * 0.125);\n    float ground_y = 4.0 - 3.0 * sin(PI * speed * 0.125) + 0.125 * value;\n    float ground_z = -1.0 - speed;\n\n    vec2 position = fragCoord.xy / iResolution.xy;        \n    vec2 p = -1.0 + 2.0 * position;\n\n    vec3 dir = normalize(vec3(p * vec2(1.625, 1.0), 0.75));    // screen ratio (x,y) fov (z)\n    dir.yz = rotate(dir.yz, PI * 0.25 * sin(PI * speed * 0.125) - value * 0.25);    // rotation x\n    dir.zx = rotate(dir.zx, PI * cos(-PI * speed * 0.05));     // rotation y\n    dir.xy = rotate(dir.xy, PI * 0.125 * cos(PI * speed * 0.125));    // rotation z\n\n    vec3 ray = vec3(ground_x, ground_y, ground_z);\n\n    float t = 0.0;\n    const int ray_n = 96;\n    for(int i = 0; i < ray_n; i++)\n    {\n        float k = scene1(ray + dir * t);\n        if(abs(k) < 0.005) break;\n        t += k * 0.5;\n    }\n    vec3 hit = ray + dir * t;\n\n    vec2 h = vec2(-0.02, 0.01); // light\n    vec3 n = normalize(vec3(scene1(hit + h.xyy), scene1(hit + h.yxx), scene1(hit + h.yyx)));\n\n    float c = (n.x + n.y + n.z) * 0.1;\n\n    // Psychedelic color palette\n    float r = 0.5 + 0.5 * cos(iTime + hit.x);\n    float g = 0.5 + 0.5 * sin(iTime + hit.y);\n    float b = 0.5 + 0.5 * cos(iTime + hit.z);\n\n    vec3 color = vec3(r, g, b);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}