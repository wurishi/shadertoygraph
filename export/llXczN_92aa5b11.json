{"ver":"0.1","info":{"id":"llXczN","date":"1503694588","viewed":184,"name":"Feelin Groovy","username":"TheGrego","description":"A quick daily sketch, playing with simple repeated patterns and changing colors.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","pattern","tiedye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n#define M_TAU 6.28318530717958647692\n\n//------------------------------------------------------------------\n// http://mercury.sexy/hg_sdf/\n\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = M_TAU / repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n}\n\nfloat remap(float a, float b, float c, float d, float t) {\n\treturn ((t-a)/(b-a))*(d-c)+c;\n}\n\n//------------------------------------------------------------------\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 rotate( vec2 pt, float a ){\n\tmat2 r = mat2(cos(a), -sin(a),\n\t\t\t\t  sin(a), cos(a) );\n\treturn r * pt;\n}\n\nfloat design( vec2 _uv ) {\n\tvec2 uv = _uv;\n\n\tfloat dist = length(uv);\n\tuv = rotate(uv, iTime * 0.1 + sin((iTime * 0.5) + (dist * 2.0) ));\n\tfloat a = atan(uv.x, uv.y);\n\tfloat polar = pModPolar( uv, 4.0 );\n\tfloat value = sin( a * 20.0);\n\tvalue += fract((iTime * 0.02) + (uv.x + (uv.y * 0.5)) * 5.0);\n\tvalue *= 3.0 * dist;\n\treturn value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv \t\t= (uv * 2.0) - 1.0;\n    uv.x \t*= iResolution.x / iResolution.y;\n\n\tfloat dist = length(uv);\n\tfloat d    = design( uv );\n\tfloat h    = ((iTime + dist) * 0.2) + (d * 0.1);\n\tfloat s    = remap(-1.0, 1.0, 0., 1., sin(iTime + d * 10.0));\n\tvec3 designColor = hsv2rgb( vec3( h, s, 1.0 - dist * 0.3 ) );\n\t\n \tvec3 color = vec3(0.0);\n \tcolor \t   += designColor;\n\n\tfragColor = vec4( color, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}