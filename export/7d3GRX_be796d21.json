{"ver":"0.1","info":{"id":"7d3GRX","date":"1630318185","viewed":225,"name":"Geometric Thingy","username":"Flopine","description":"I have creativity but not for shader names XD still, here is a thingy :D ","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","animation","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define rep(p,c) p=(mod(p-c*.5,c)-c*.5)\n#define hash11(x) fract(sin(x)*242.4)\n\n#define frt(sp,off) fract((iTime+off)*sp)\n#define flt(sp,off) floor((iTime+off)*sp)\n\nstruct obj\n{\n    float d;\n    vec3 sha;\n    vec3 li;\n};\n\nobj minobj (obj a, obj b)\n{if(a.d<b.d)return a; else return b;}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p=abs(p);\n    p=max(p,p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat idx,speed;\nobj stairs (vec3 p)\n{\n    p.y += .6;\n    float perx = 2.;\n    idx=floor((p.x-perx*.5)/perx);\n    speed = .5+hash11(idx)*2.;\n    p.z -= flt(speed,0.)+pow(frt(speed,0.),5.)*.5+.1;\n    rep(p.x,perx);\n\n    float perz = .5;\n    float idz = floor((p.z-perz*.5)/perz);\n\n    rep(p.z,perz);\n    float d = box(p,vec3(.4,2.,.2));\n\n    return obj(d,vec3(0.,0.1,0.3),vec3(0.3,0.99,0.5));\n}\n\nobj cubes (vec3 p)\n{\n    float id = floor((p.x-1.)/2.);\n    float anim = (PI/2.)*(flt(speed,0.)+pow(frt(speed,0.),3.));\n    rep(p.x,2.);\n    rep(p.z,3.);\n    p.y -= 1.7;\n    p.yz *= rot(-anim);\n    float d = max(-sc(p,.13),box(p, vec3(.2)));\n    d = hash11(id)<.5?min(d, box(p,vec3(.12))):d;\n    return obj(d, vec3(0.5,.0,.1), vec3(.99,.45,.8));\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.); \n\n    p.y += asin(sin(idx*1.4))*.4;\n\n    obj scene = stairs(p);\n    scene = minobj(scene,cubes(p));\n\n    return scene;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(uv*4.,-30.), rd=vec3(0.,0.,1.), p=ro,\n    col=vec3(0.),l=normalize(vec3(1.,2.,-2.));\n    obj O;\n    \n    for (float i=0.;i<64.;i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001) break;\n        p += O.d*rd*.5;\n    }\n\n    vec3 n = getnorm(p);\n    float light = max(dot(n,l),0.);\n    col = mix(O.sha, O.li, light);\n    \n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}