{"ver":"0.1","info":{"id":"4ltyzs","date":"1533698956","viewed":220,"name":"Triangle- practice","username":"flowers","description":"tangram","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, c) smoothstep(a, b, c);\nfloat PI = 3.14159265;\n\nmat2 Rotate (float angle) {\n\tfloat s = sin(angle);\n    float c = cos(angle);\n   \n    return mat2(c, -s, s, c);\n}\n\nfloat Band(float p, float start, float end, float blur) {\n\tfloat band1 = S(start-blur, start+blur, p);\n    float band2 = S(end+blur, end-blur, p);\n    \n    return band1 * band2;\n}\n\nfloat Rect(vec2 uv, vec2 p, float top, float bottom, float left, float right, float rotating, float scaling) {\n    \n    uv += p;\n    uv /= scaling;\n    uv *= Rotate(rotating);\n        \n    float rect1 = Band(uv.x, top, bottom, .001);\n    float rect2 = Band(uv.y, left, right, .001);\n\n    \n    return rect1 * rect2;\n}\n\nfloat Triangle(vec2 uv, vec2 p, float top, float bottom, float left, float right, float rotating, float scaling) {\n    \n    uv += p;\n    uv /= scaling;\n    uv *= Rotate(rotating);\n\n    float rect1 = Band(uv.x, top - uv.y, bottom + uv.y, .001);\n    float rect2 = Band(uv.y, left, right, .001);\n\n    \n    return rect1 * rect2;\n}\n\nfloat Parallelogram(vec2 uv, vec2 p, float top, float bottom, float left, float right, float rotating, float scaling) {\n    \n    uv += p;\n    uv /= scaling;\n    uv *= Rotate(rotating);\n    uv.y += uv.x;\n    \n    float rect1 = Band(uv.x, top, bottom, .001);\n    float rect2 = Band(uv.y, left, right, .001);\n\n    \n    return rect1 * rect2;\n}\n\nvec3 Tangram (vec2 uv, vec2 p, float rotating, float scaling){\n\t\n    uv += p;\n    uv /= scaling;\n    uv *= Rotate(rotating);\n    uv.x += .2/2.;\n    \n    float triangle1 = Triangle(uv, vec2(0, 0), -.1, .1, -.1 , .1, -PI/2., 1.);\n    float triangle2 = Triangle(uv, vec2(-.1, -.1), -.1, .1, -.1 , .1, 0., 1.);\n    float triangle3 = Triangle(uv, vec2(0, .15), -.1, .1, -.1 , .1, PI, .5);\n\tfloat rect1 = Rect(uv, vec2(-.1, .1), -.1, .1, -.1 , .1, PI/4., .708);\n    float triangle4 = Triangle(uv, vec2(-.15, 0), -.1, .1, -.1 , .1, PI/2., .5);\n    float triangle5 = Triangle(uv, vec2(-.25, .15), -.1, .1, -.1 , .1, -PI/4., .708);\n\tfloat parallelogram1 = Parallelogram(uv, vec2(-.25, -.05), -.1, .1, -.1 , .1, PI/4., .708);\n    \n    vec3 c = triangle1 * vec3(0.498, 0.749, 0.824)\n           + triangle2 * vec3(0.824, 0.902, 0.616)\n           + triangle3 * vec3(0.902, 0.604, 0.780)\n           + triangle4 * vec3(0.976, 0.945, 0.345)\n           + triangle5 * vec3(0.949, 0.800, 0.318)\n           + rect1 * vec3(0.643, 0.592, 0.749)\n           + parallelogram1 * vec3(0.871, 0.306, 0.392);\n    \n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5 * iResolution.xy)/iResolution.y;\n\n    // uv.x += 0.1;\n    float x = uv.x;\n   \tfloat y = uv.y;\n    \n    float rotating = iTime * 1.5;\n   \t// vec2 mov = vec2(cos(iTime) / 4., sin(iTime) / 4.);\n    vec2 mov = vec2(0, 0);\n    \n    vec3 col = Tangram(uv, mov, rotating, 1.);\n\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}