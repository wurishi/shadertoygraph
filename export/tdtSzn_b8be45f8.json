{"ver":"0.1","info":{"id":"tdtSzn","date":"1571598849","viewed":134,"name":"Flags","username":"UntitledTools","description":"World flags","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["worldflags"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float triangleArea(vec2 a, vec2 b, vec2 c) \n{ \n   a = round(a * 10000.0); b = round(b * 10000.0); c = round(c * 10000.0);\n   return abs((a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)) / 2.0); \n}\n\nvec4 lerpCol(vec4 a, vec4 b, float t)\n{\n    return (1.0 - t) * a + t * b;\n}\n\nbool insideRect(vec2 a, vec2 b, vec2 pt)\n{\n    return pt.x >= a.x && pt.y >= a.y && pt.x <= b.x && pt.y <= b.y;\n}\n\nbool insideTri(vec2 a, vec2 b, vec2 c, vec2 pt) \n{    \n   float A = triangleArea(a, b, c); \n   float A1 = triangleArea(pt, b, c); \n   float A2 = triangleArea(a, pt, c); \n   float A3 = triangleArea(a, b, pt); \n   return A == A1 + A2 + A3;\n}\n\nbool insideCircle(vec2 c, float r, vec2 pt)\n{\n    float aspect = iResolution.x / iResolution.y;\n    return pow(r, 2.0) >= pow((pt.x - c.x) * aspect, 2.0) + pow(pt.y - c.y, 2.0);\n}\n\nbool insideStar(vec2 i, float x, vec2 test)\n{   \n    float aspect = iResolution.x / iResolution.y;\n    float y = sqrt(pow(x, 2.0) / 4.0);\n    float h = sqrt(pow(x + y, 2.0) + pow(3.0 * y, 2.0));\n    float l = 2.0 * x + 2.0 * y;\n    float z = (l - 6.0 * y) / 2.0;\n    \n    float a = i.x * aspect;\n    float b = i.y;\n    test = vec2(test.x * aspect, test.y);\n    \n    if(test.y < b || test.x < a || test.x > a + l || test.y > b + 5.0 * y)\n        return false;\n    \n    vec2 pt1 = vec2(a + z, b);\n    vec2 pt2 = vec2(a + x + y, b + y);\n    vec2 pt3 = vec2(a + (l - z), b);\n    vec2 pt4 = vec2(a + 3.0 * y, b + 3.0 * y);\n    vec2 pt5 = vec2(a + (l - 3.0 * y), b + 3.0 * y);\n    vec2 pt6 = vec2(a, b + 4.0 * y);\n    vec2 pt7 = vec2(a + x, b + 4.0 * y);\n    vec2 pt8 = vec2(a + (l - x), b + 4.0 * y);\n    vec2 pt9 = vec2(a + l, b + 4.0 * y);\n    vec2 pt10 = vec2(a + x + y, b + 7.0 * y);\n    vec2 pt11 = vec2(a, b + 7.0 * y);\n    vec2 pt12 = vec2(a + l, b + 7.0 * y);\n    vec2 pt13 = vec2(a + l, b);\n    \n    if(!insideTri(i, pt1, pt6, test) &&\n       !insideTri(pt1, pt4, pt6, test) &&\n       !insideTri(pt1, pt2, pt3, test) &&\n       !insideTri(pt3, pt5, pt9, test) &&\n       !insideTri(pt3, pt9, pt13, test) &&\n       !insideTri(pt6, pt10, pt11, test) &&\n       !insideTri(pt6, pt7, pt10, test) &&\n       !insideTri(pt8, pt9, pt10, test) &&\n       !insideTri(pt9, pt10, pt12, test))\n        return true;\n    return false;\n}\n\nbool isInterval(float flag)\n{\n    float capTime = mod(iTime, float(flags) * flagTime);\n    return capTime < flagTime * flag;\n}\n\nvec4 austria(vec2 coord)\n{\n    if(coord.y > 0.3333 && coord.y < 0.6666)\n        return vec4(1,1,1,1);\n    else\n        return vec4(0.95,0,0.15,0);\n}\n\nvec4 bahamas(vec2 coord)\n{\n    vec2 a = vec2(0, 0), b = vec2(0.4, 0.5), c = vec2(0, 1);\n    if(insideTri(a, b, c, coord))\n        return vec4(0,0,0,1);\n    else if(coord.y > 0.3333 && coord.y < 0.6666)\n        return vec4(1,1,0,1);\n   \telse\n        return vec4(0,0.7,1,1);\n}\n\nvec4 botswana(vec2 coord)\n{\n    if(coord.y > 0.4 && coord.y < 0.6)\n    {\n        if(coord.y < 0.425 || coord.y > 0.575)\n            return vec4(1,1,1,1);\n        else\n            return vec4(0,0,0,1);\n    }\n    else\n        return vec4(0.35,0.6,1,1);\n}\n\nvec4 palau(vec2 coord)\n{\n    if(insideCircle(vec2(0.4, 0.5), 0.3, coord))\n        return vec4(1,1,0,1);\n    else\n        return vec4(0,0.7,1,1);\n}\n\nvec4 guyana(vec2 coord)\n{\n    if(insideTri(vec2(1, 0.5), vec2(0, -0.04), vec2(0, 1.04), coord))\n    {\n        if(insideTri(vec2(0.94, 0.5), vec2(0, 0), vec2(0, 1), coord))\n        {\n            if(insideTri(vec2(0, 0), vec2(0.5, 0.5), vec2(0, 1), coord))\n            {\n                if(insideTri(vec2(0, 0.94), vec2(0, 0.06), vec2(0.44, 0.5), coord))\n                    return vec4(1,0,0,1);\n                else\n                \treturn vec4(0,0,0,1);\n            }\n            else\n            \treturn vec4(1,1,0,1);\n        }\n        else\n        \treturn vec4(1,1,1,1);\n    }\n    else\n        return vec4(0,0.7,0,1);\n}\n\nvec4 chile(vec2 coord)\n{\n    if(insideRect(vec2(0, 0.5), vec2(1.0 / 3.0, 1.0), coord))\n    {\n        if(insideStar(vec2(0.07, 0.6), 0.1, coord))\n        \treturn vec4(1,1,1,1);\n    \telse\n        \treturn vec4(0.25,0.4,0.8,1);\n    }\n    else if(coord.y > 0.5)\n        return vec4(1,1,1,1);\n    else\n        return vec4(0.9,0.2,0.2,1);\n    \n}\n\nvec4 greece(vec2 coord)\n{\n    if(insideRect(vec2(0, 0.444), vec2(1.0 / 3.0, 1.0), coord))\n    {\n        if((coord.y - 0.45 < 0.345 && coord.y - 0.45 > 0.229) || (coord.x < 0.21 && coord.x > 0.14))\n        \treturn vec4(1,1,1,1);\n        else\n            return vec4(0.7,0.8,1,1);\n    }\n    else if(sin(coord.y * 27.0 - 12.0) > 0.0)\n        return vec4(0.7,0.8,1,1);\n    else\n        return vec4(1,1,1,1);\n}\n\nvec4 indonesia(vec2 coord)\n{\n    if(coord.y > 0.5)\n        return vec4(1,0,0,1);\n    else\n        return vec4(1,1,1,1);\n}\n\nvec4 japan(vec2 coord)\n{\n    if(insideCircle(vec2(0.5, 0.5), 0.32, coord))\n        return vec4(1,0,0,1);\n    else\n        return vec4(1,1,1,1);\n}\n\nvec4 maldives(vec2 coord)\n{\n    if(insideRect(vec2(0.12, 0.18), vec2(0.9, 0.83), coord))\n    {\n        if(insideCircle(vec2(0.5, 0.5), 0.25, coord))\n        {\n            if(insideCircle(vec2(0.565, 0.5), 0.25, coord))\n                return vec4(0,0.8,0.4,1);\n            else\n                return vec4(1,1,1,1);\n        }\n        else\n            return vec4(0,0.8,0.4,1);\n    }\n    else\n        return vec4(1,0.1,0.1,1);\n}\n\nvec4 djibouti(vec2 coord)\n{\n    if(insideTri(vec2(0, 0), vec2(0.5, 0.5), vec2(0, 1), coord))\n    {\n        if(insideStar(vec2(0.12, 0.4), 0.06, coord))\n            return vec4(1,0,0,1);\n        else\n        \treturn vec4(1,1,1,1);\n    }\n    else if(coord.y > 0.5)\n        return vec4(0.5,0.8,1,1);\n    else\n        return vec4(0,0.7,0,1);\n}\n\nvec4 france(vec2 coord)\n{\n    if(coord.x > 1.0 / 3.0 && coord.x < 2.0 / 3.0)\n        return vec4(1,1,1,1);\n    else if(coord.x >= 2.0 / 3.0)\n        return vec4(0.8,0,0,1);\n    else\n        return vec4(0,0,0.7,1);\n}\n\nvec4 kuwait(vec2 coord)\n{\n    if(insideRect(vec2(1.0/3.77, 1.0/3.0), vec2(1, 2.0/3.0), coord))\n        return vec4(1,1,1,1);\n    else if(!insideTri(vec2(0, 0), vec2(0, 1), vec2(1.0/2.5, 1.0/2.0), coord))\n    {\n        if (coord.y < 1.0/2.0)\n            return vec4(0.75,0,0,1);\n        else\n            return vec4(0,0.5,0,1);\n    }\n    return vec4(0,0,0,1);\n}\n\nvec4 sudan(vec2 coord)\n{\n    if(insideTri(vec2(0, 0), vec2(0, 1), vec2(1.0/2.5, 1.0/2.0), coord))\n    {\n        return vec4(0,0.6,0,1);\n    }\n    else if(insideRect(vec2(1.0/3.77, 1.0/3.0), vec2(1, 2.0/3.0), coord))\n        return vec4(1,1,1,1);\n    else if(insideRect(vec2(0, 2.0/3.0), vec2(1, 1), coord))\n        return vec4(0.7,0,0,1);\n    return vec4(0,0,0,1);\n}\n\nvec4 getFlag(int id, vec2 coord)\n{\n    switch(id)\n    {\n        case 1: return austria(coord);\n        case 2: return bahamas(coord);\n        case 3: return botswana(coord);\n        case 4: return palau(coord);\n        case 5: return guyana(coord);\n        case 6: return chile(coord);\n        case 7: return greece(coord);\n        case 8: return indonesia(coord);\n        case 9: return japan(coord);\n        case 10: return maldives(coord);\n        case 11: return djibouti(coord);\n        case 12: return france(coord);\n        case 13: return kuwait(coord);\n        case 14: return sudan(coord);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 percent = fragCoord.xy / iResolution.xy;\n    vec2 lin = fragCoord.xy / iResolution.xy;\n    \n    float powAmt = pow(percent.x * 2.0 + 0.5, 2.0) / 5.0 + 0.2;\n    float sinAmt = (sin(iTime * 4.0 + percent.x + powAmt * 12.0) / 50.0) * powAmt;\n    float shadSin = sin(iTime * 4.0 + (percent.x + 2.0) * 12.0) / 7.5;\n    float sinAmtZero = (sin(iTime * 4.0 + powAmt * 12.0) / 50.0) * powAmt;\n    \n    percent = vec2(percent.x * 2.0 - 0.5, (percent.y + (sinAmt - sinAmtZero)) * 2.0 - 0.5);\n    fragColor -= vec4(shadSin, shadSin, shadSin, 0);\n    \n    if(percent.y > 1.0 || percent.y < 0.0 || percent.x > 1.0 || percent.x < 0.0)\n    {\n        float actualY = (fragCoord.y / iResolution.y) * 2.0 - 0.5;\n        if(percent.x < 0.0 && percent.x > -0.1 && actualY < 1.1)\n        {\n            float xVal = (1.0 - percent.x / -0.1) / 2.0 + 0.25;\n        \tfragColor = vec4(xVal,xVal,xVal,0);\n        }\n        else\n        {\n            vec4 bCol = vec4(0.9,0.9,0.9,1);\n            vec4 tCol = vec4(0.2,0.4,1.0,1);\n            fragColor = lerpCol(bCol, tCol, lin.y - lin.x / 4.0);\n        }\n    }\n    else if(specificFlag < 1)\n    {\n        for(int i = 1; i <= flags; i++)\n        {\n            if(isInterval(float(i)))\n            {\n                fragColor += getFlag(i, percent);\n                break;\n            }\n        }\n    }\n    else fragColor += getFlag(specificFlag, percent);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int flags = 14;\nint specificFlag = 14;\nfloat flagTime = 2.0;","name":"Common","description":"","type":"common"}]}