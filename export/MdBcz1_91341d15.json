{"ver":"0.1","info":{"id":"MdBcz1","date":"1492527951","viewed":465,"name":"GRAPROG - Finals (11526749)","username":"acmojado","description":"Here a list of potential options: HUD, a piece inspired by interactive art, terrain in Unity (fbm), Pollock painting (noise), Scottish Tartan, Rothko painting, marble/lava/granite/concrete/etc.\nProcedural textures, lava lamp, clouds","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["finalsgraprog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define patternChoice 1\n\n// Solid Colors\nvec3 red = vec3(1.0,0.0,0.0);\nvec3 green = vec3(0.0,1.0,0.0);\nvec3 blue = vec3(0.0,0.0,1.0);\nvec3 black = vec3(0.0,0.0,0.0);\nvec3 white = vec3(1.0,1.0,1.0);\n// Concrete\nvec3 concreteLite = vec3(0.909, 0.905, 0.917);\nvec3 concreteDark = vec3(0.760, 0.729, 0.647);\n// Lava\nvec3 lavaLite = vec3(0.686, 0.203, 0.160);\nvec3 lavaDark = vec3(0.580, 0.176, 0.117);\n// Marble\nvec3 marbleLite = vec3(0.988, 0.988, 0.988);\nvec3 marbleStainBlue1 = vec3(0.690, 0.760, 0.811);\nvec3 marbleStainBlue2 = vec3(0.647, 0.745, 0.803);\nvec3 marbleStainBlue3 = vec3(0.654, 0.756, 0.772);\n// Lava Lamp\nvec3 lavaLampBG = vec3(0.462, 0.266, 0.6);\nvec3 lavaLampLava = vec3(0.929, 0.203, 0.572);\n// Clouds\nvec3 sky = vec3(0.541, 0.729, 0.827);\nvec3 cloud = vec3(0.941, 0.945, 0.941);\n// Granite\nvec3 graniteBG = vec3(0.956, 0.952, 0.976);\nvec3 graniteGray = vec3(0.478, 0.474, 0.494);\nvec3 graniteBrown = vec3(0.4, 0.356, 0.341);\nvec3 graniteBlack = vec3(0.105, 0.121, 0.160);\n\n// Tartan\nvec3 tar1Blue = vec3(0.074, 0.349, 0.505);\nvec3 tar1Green = vec3(0.286, 0.541, 0.341);\nvec3 tar1White = vec3(1.0,1.0,1.0);\nvec3 tar1Black = vec3(0.0,0.0,0.0);\nvec3 tar1BG = vec3(0.062, 0.274, 0.109);\n\n// Tartan 2\nvec3 tar2BG = vec3(0.152, 0.160, 0.156);\nvec3 tar2Blue = vec3(0.176, 0.501, 0.674);\nvec3 tar2Orange = vec3(0.603, 0.407, 0.309);\n\n// Art Installation\nvec3 violet = vec3(0.662, 0.407, 0.870);\nvec3 yellow = vec3(0.968, 0.752, 0.556);\n\n\nfloat random (in vec2 uv) {\n    return fract(sin(dot(uv.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 uv) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat lavaLamp(vec2 uv,vec2 shapePos, float times){\n    shapePos = vec2(shapePos.x*1.5,shapePos.y*0.3);\n    uv -= shapePos;\n    \n    float angle = atan(uv.y,uv.x);\n    float radius = cos(times*angle*0.5);\n    return radius;\n}\n\nvec4 rectangle(vec2 uv, vec2 pos, float width, float height, vec3 color) {\n\tfloat t = 0.0;\n\tif ((uv.x > pos.x - width / 2.0) && (uv.x < pos.x + width / 2.0)\n\t\t&& (uv.y > pos.y - height / 2.0) && (uv.y < pos.y + height / 2.0)) {\n\t\tt = 1.0;\n\t}\n\treturn vec4(color, t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    if (patternChoice == 1) // Concrete\n    {\n        vec3 value = concreteLite;\n        \n        value = mix(value, concreteDark,random(uv)*0.6);\n        value = mix(value, black, random(uv)*0.35);\n        \n        vec3 stains = vec3(fbm((uv*5.)*2.))*.12;\n        \n        value = mix(value, concreteLite,(smoothstep(0.03,.12,stains) - smoothstep(.2,.3,stains))*0.3);\n    \n\t    fragColor = vec4(value, 1.0);\n    }\n    \n    else if (patternChoice == 2) // Lava\n    {\n\t\tvec3 value = black;\n        \n        vec3 stains = vec3(fbm((uv*1.7)*25.))*.75;\n        \n        float fade = sin(iTime * 5.)+2.5;\n        \n        value = mix(value, lavaLite, (smoothstep(0.05,0.1,stains) - smoothstep(.17, .22,stains) * fade));\n        \n        fragColor = vec4(value,1.0);\n    }\n    \n    else if (patternChoice == 3) // Marble\n    {\n        vec3 value = marbleLite;\n        \n        vec3 stains = vec3(fbm((uv*1.2)*18.))*.113;\n        vec3 stains2 = vec3(fbm((uv*5.)*1.5))*.12;\n        \n        vec3 stains3 = vec3(fbm((uv)*5.))*.12;\n        vec3 stains4 = vec3(fbm((uv*2.)*2.5))*.12;\n        \n        value = mix(value, marbleStainBlue1,(smoothstep(0.065,0.1,stains) - smoothstep(0.1, 0.8,stains)));\n        //value = mix(value, marbleStainBlue2,(smoothstep(0.065,0.1,stains2) - smoothstep(0.1, 0.8,stains2)));\n        //value = mix(value, marbleStainBlue3,(smoothstep(0.09,0.1,stains2) - smoothstep(0.2, 0.5,stains2)));\n        //value = mix(value, marbleStainBlue2,(smoothstep(0.07,0.1,stains3) - smoothstep(0.1, 0.8,stains3)));\n        \n        fragColor = vec4(value, 1.0);\n    }\n    \n    else if (patternChoice == 4) // Lava Lamp\n    {\n        //float value = lavaLamp(uv,vec2(0.,0.5), 3.);\n        //vec2 value = vec2(snoise(uv*3.-iTime));\n      \t//vec3 color = red*vec3(value, 1.0);\n        \n        vec3 value = lavaLampBG;\n        float lava = lavaLamp(uv*0.5,vec2(snoise(uv*4.-iTime)), 1.);\n        \n        vec3 color = lavaLampLava*lava;\n        value += color;\n        \n        \n        fragColor = vec4(value, 1.0);\n    }\n  \t\n    else if (patternChoice == 5) // Clouds\n    {\n        uv *= 0.5;\n        vec3 value = sky;\n        \n        vec3 clouds = vec3(fbm((uv*sin(iTime*0.25))*20.))*.12;\n        \n        value = mix(value, cloud,(smoothstep(0.05,0.1,clouds) - smoothstep(0.1, 0.2,clouds)));\n        \n        fragColor = vec4(value, 1.0);\n    }\n    \n    else if (patternChoice == 6) // Granite\n    {\n    \tvec3 value = graniteBG;\n        \n        uv *= 2.;\n        uv += 2.3;\n        vec3 layer1 = vec3(fbm((uv*0.6)*18.))*.113;\n        uv *= 0.2;\n        uv += 0.5;\n        vec3 layer2 = vec3(fbm((uv*0.8)*30.))*.117;\n        uv *= 2.2;\n        uv += 2.5;\n        vec3 layer3 = vec3(fbm((uv*0.4)*15.))*.12;\n        \n        value = mix(value, graniteBlack,(smoothstep(0.04,0.1,layer1) - smoothstep(0.1, 0.8,layer1)));\n        value = mix(value, graniteBrown,(smoothstep(0.04,0.1,layer2) - smoothstep(0.1, 0.8,layer2)));\n        value = mix(value, graniteGray,(smoothstep(0.072,0.1,layer3) - smoothstep(0.1, 0.8,layer3)));\n        \n        fragColor = vec4(value, 1.0);\n    }\n    \n    else if (patternChoice == 7) // Scottish Tartan 1\n    {\n        vec3 value = tar1BG; \n            \n        uv *= 2.;\n    \tuv = fract(uv);\n        \n        float blackTile = 0.;\n        float greenTile = 0.;\n        float blueTile = 0.;\n        float whiteTile = 0.;\n        \n        // Blue blocks\n        // Horizontal\n    \tblueTile += step(0.15, uv.x) - step(0.35, uv.x);\n    \tblueTile += step(0.65, uv.x) - step(0.85, uv.x);\n        // Vertical\n        blueTile += step(0.15, uv.y) - step(0.35, uv.y);\n        blueTile += step(0.68, uv.y) - step(0.85, uv.y);\n        \n        // White lines\n        // Vertical\n        whiteTile += step(0.0001, uv.x) - step(0.02, uv.x);\n        whiteTile += step(0.49, uv.x) - step(0.51, uv.x);\n        // Horizontal\n        whiteTile += step(0.220, uv.y) - step(0.245, uv.y);\n    \twhiteTile += step(0.755, uv.y) - step(0.775, uv.y);\n        \n        // Black lines\n        // Vertical\n        blackTile += step(0.10, uv.x) - step(0.11, uv.x);\n        blackTile += step(0.12, uv.x) - step(0.13, uv.x);\n        blackTile += step(0.14, uv.x) - step(0.15, uv.x);\n        blackTile += step(0.18, uv.x) - step(0.19, uv.x);\n        blackTile += step(0.2, uv.x) - step(0.21, uv.x);\n        blackTile += step(0.29, uv.x) - step(0.3, uv.x);\n        blackTile += step(0.31, uv.x) - step(0.32, uv.x);\n        blackTile += step(0.35, uv.x) - step(0.36, uv.x);\n        blackTile += step(0.37, uv.x) - step(0.38, uv.x);\n        blackTile += step(0.39, uv.x) - step(0.4, uv.x);\n        blackTile += step(0.59, uv.x) - step(0.6, uv.x);\n        blackTile += step(0.61, uv.x) - step(0.62, uv.x);\n        blackTile += step(0.63, uv.x) - step(0.64, uv.x);\n        blackTile += step(0.68, uv.x) - step(0.69, uv.x);\n        blackTile += step(0.7, uv.x) - step(0.71, uv.x);\n        blackTile += step(0.77, uv.x) - step(0.78, uv.x);\n        blackTile += step(0.8, uv.x) - step(0.81, uv.x);\n        blackTile += step(0.85, uv.x) - step(0.86, uv.x);\n        blackTile += step(0.87, uv.x) - step(0.88, uv.x);\n        blackTile += step(0.89, uv.x) - step(0.9, uv.x);\n        // Horizontal\n        blackTile += step(0.07, uv.y) - step(0.08, uv.y);\n        blackTile += step(0.05, uv.y) - step(0.06, uv.y);\n        blackTile += step(0.39, uv.y) - step(0.4, uv.y);\n        blackTile += step(0.41, uv.y) - step(0.42, uv.y);\n        blackTile += step(0.59, uv.y) - step(0.6, uv.y);\n        blackTile += step(0.61, uv.y) - step(0.62, uv.y);\n        blackTile += step(0.90, uv.y) - step(0.91, uv.y);\n        blackTile += step(0.92, uv.y) - step(0.93, uv.y);\n        \n        // Apply\n        value = mix(value, tar1Blue, vec3(blueTile * noise(uv* 1000.)));\n        value = mix(value, tar1White, vec3(whiteTile * noise(uv * 200.)));\n        value = mix(value, tar1Black, vec3(blackTile * noise(uv * 200.)));\n        \n        fragColor = vec4(value, 1.0);\n    }\n    \n    else if (patternChoice == 8) // Scottish Tartan 2\n    {\n        vec3 value = tar2BG; \n            \n        uv *= 2.;\n    \tuv = fract(uv);\n        \n        float blackTile = 0.;\n        float greenTile = 0.;\n        float blueTile = 0.;\n        float orangeTile = 0.;\n        \n        // Blue blocks\n        // Horizontal\n    \tblueTile += step(0.15, uv.x) - step(0.35, uv.x);\n    \tblueTile += step(0.65, uv.x) - step(0.85, uv.x);\n        // Vertical\n        blueTile += step(0.15, uv.y) - step(0.35, uv.y);\n        blueTile += step(0.68, uv.y) - step(0.85, uv.y);\n        \n        // Orange lines\n        // Vertical\n        orangeTile += step(0.0001, uv.x) - step(0.02, uv.x);\n        orangeTile += step(0.49, uv.x) - step(0.51, uv.x);\n        orangeTile += step(0.04, uv.x) - step(0.05, uv.x);\n        orangeTile += step(0.97, uv.x) - step(0.98, uv.x);\n        orangeTile += step(0.46, uv.x) - step(0.47, uv.x);\n        orangeTile += step(0.53, uv.x) - step(0.54, uv.x);\n        // Horizontal\n        orangeTile += step(0.220, uv.y) - step(0.245, uv.y);\n    \torangeTile += step(0.755, uv.y) - step(0.775, uv.y);\n        orangeTile += step(0.200, uv.y) - step(0.210, uv.y);\n        orangeTile += step(0.255, uv.y) - step(0.265, uv.y);\n        orangeTile += step(0.730, uv.y) - step(0.740, uv.y);\n        orangeTile += step(0.79, uv.y) - step(0.8, uv.y);\n        \n        // Apply\n        value = mix(value, tar2Blue, vec3(blueTile * noise(uv* 1200.)));\n        value = mix(value, tar2Orange, vec3(orangeTile * noise(uv * 200.)));\n        \n        fragColor = vec4(value, 1.0);\n    }\n    \n    else if (patternChoice == 9) // Art Installation\n    {\n        vec2 uv2 = fragCoord.xy/iResolution.xy;\n        uv2 -= 0.5;\n        uv2.x *= 1.6;\n        uv2.y *= 1.9;\n        \n        float dist = length(uv2);\n        \n        vec2 fragCo = fragCoord.xy;\n        vec2 center = iResolution.xy * 0.5;\n        float width = iResolution.x * 0.4;\n        float height = iResolution.x * 0.2;\n        \n        vec3 value = mix(violet, yellow, dist);\n        \n        vec4 finalVal = vec4(value, 1.0);\n        \n        vec4 rect = rectangle(fragCo, center, width, height, violet);\n        \n        fragColor = mix(finalVal,rect,rect.a);\n        fragColor = finalVal;\n    }\n             \n}\n\n// REFERENCE\n\n// Concrete\n// https://thumbs.dreamstime.com/x/%E6%B7%B7%E5%87%9D%E5%9C%9F%E7%BA%B9%E7%90%86-47323836.jpg\n// Lava Lamp\n// https://images-na.ssl-images-amazon.com/images/I/612imq0ESOL._SL1500_.jpg\n// Granite\n// http://www.mcgranitenashville.com/wp-content/uploads/2015/10/phpM3N94O.jpg\n// Scottish Tartan 1\n// http://www.tartans.scotland.net/Tartans/wr296r.gif\n// Scottish Tartan 2\n// http://www.scotclans.com/wp-content/uploads/2013/12/angus_anc1.png\n// Art Installation\n// https://s-media-cache-ak0.pinimg.com/564x/fb/4c/44/fb4c444f8bbb70ee6e78cfc5419ee32d.jpg\n","name":"Image","description":"","type":"image"}]}