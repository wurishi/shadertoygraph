{"ver":"0.1","info":{"id":"DsBBzy","date":"1689827459","viewed":70,"name":"Text tepmlate v2 (variable AA)","username":"Envy24","description":"Use mouse to change width.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["text","antialiasing","template","font"],"hasliked":0,"parentid":"mdSBRm","parentname":"Text tepmlate v2"},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCENE_SCALE               ( 4.0 )\n#define UNIT                      ( (SCENE_SCALE*2.0) / iResolution.y  )\n#define SMAA(d)                   ( smoothstep(UNIT, 0., d) )\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale + origin;\n}\n\n#define MX ( (((2.*iMouse.x)/iResolution.x) - 1.) * 50. ) \n// Character centered at pos.\nfloat char_intensity(vec2 uv, vec2 pos, float scale, int h_idx, int v_idx)  \n{   \n    pos -= 0.5;\n    // Apply scale.\n    uv -= 0.5; uv *= scale; uv += 0.5;\n    // Apply translation.\n    uv -= pos*scale;\n    \n    const float char_wh = 1./16.; // 0.0625\n    vec2 char = vec2(h_idx, v_idx) + uv; // xy in range [0; 15.], uv in range [0.; 1.]\n         char *= char_wh; // xy in range [0.; 1.]\n         \n    vec4 data = texture(iChannel3, char);\n    float \n          dfdx = data.y * 2. - 1., // unbias and scale dfdx\n          dfdy = data.z * 2. - 1., // unbias and scale dfdy\n             d = data.w * 2. - 1.; // unbias and scale sdf\n             d = d / length(vec2(dfdx, dfdy));\n    float blur = 1.0;\n    return \n        (uv.x<0. || uv.x>1. || uv.y<0.|| uv.y>1.) == true ?\n            0. :\n            smoothstep(4./iResolution.y, 0., d-MX/1000.);\n            //smoothstep(MX/iResolution.y, (MX-10.)/iResolution.y, d/blur);\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0,0), false);\n    \n    // This 3 vectors be created and initialized.\n    vec3 color = vec3(1);           \n    vec3 char_color = vec3(1,0,0);\n    vec2 UV_ = NDC;\n    //\n\n    _D(vec2(-4,0), 10.);\n    _O(vec2(0,0), 10.);\n    _T(vec2(4,0), 10.);\n\n    O = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define _0(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 0, 12)) )\n#define _1(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 12)) )\n#define _2(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 12)) )\n#define _3(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 12)) )\n#define _4(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 12)) )\n#define _5(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 12)) )\n#define _6(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 12)) )\n#define _7(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 12)) )\n#define _8(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 12)) )\n#define _9(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 12)) )\n\n#define _A(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 11)) )\n#define _B(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 11)) )\n#define _C(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 11)) )\n#define _D(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 11)) )\n#define _E(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 11)) )\n#define _F(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 11)) )\n#define _G(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 11)) )\n#define _H(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 11)) )\n#define _I(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 11)) )\n#define _J(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 11)) )\n#define _K(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 11, 11)) )\n#define _L(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 12, 11)) )\n#define _M(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 13, 11)) )\n#define _N(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 14, 11)) )\n#define _O(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 15, 11)) )\n#define _P(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 0, 10)) )\n#define _Q(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 10)) )\n#define _R(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 10)) )\n#define _S(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 10)) )\n#define _T(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 10)) )\n#define _U(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 10)) )\n#define _V(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 10)) )\n#define _W(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 10)) )\n#define _X(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 10)) )\n#define _Y(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 10)) )\n#define _Z(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 10)) )\n\n#define _a(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 9)) )\n#define _b(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 9)) )\n#define _c(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 9)) )\n#define _d(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 9)) )\n#define _e(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 9)) )\n#define _f(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 9)) )\n#define _g(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 9)) )\n#define _h(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 9)) )\n#define _i(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 9)) )\n#define _j(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 9)) )\n#define _k(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 11, 9)) )\n#define _l(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 12, 9)) )\n#define _m(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 13, 9)) )\n#define _n(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 14, 9)) )\n#define _o(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 15, 9)) )\n#define _p(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 0, 8)) )\n#define _q(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 8)) )\n#define _r(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 8)) )\n#define _s(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 8)) )\n#define _t(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 8)) )\n#define _u(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 8)) )\n#define _v(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 8)) )\n#define _w(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 8)) )\n#define _x(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 8)) )\n#define _y(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 8)) )\n#define _z(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 8)) )\n\n#define _exclamation(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 13)) )\n\n#define _percent(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 13)) )\n#define _ampersand(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 13)) )\n\n#define _left_parenthesis(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 13)) )\n#define _right_parenthesis(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 13)) )\n#define _asterisk(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 13)) )\n#define _plus(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 11, 13)) )\n#define _comma(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 12, 13)) )\n#define _minus(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 13, 13)) )\n#define _dot(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 14, 13)) )\n#define _slash(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 15, 13)) )\n\n#define _colon(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 12)) )\n#define _semi_colon(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 11, 12)) )\n#define _less(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 12, 12)) )\n#define _equal(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 13, 12)) )\n#define _greater(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 14, 12)) )","name":"Common","description":"","type":"common"}]}