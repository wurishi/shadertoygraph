{"ver":"0.1","info":{"id":"WdBcD1","date":"1586518971","viewed":83,"name":"Rocket gd","username":"BingoBongo","description":"game","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["game"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat decode(vec4 v)\n{\n    uvec4 r = uvec4(v * vec4(255.0));\n    \n    uint u = \n        (r.x << 0) |\n        (r.y << 8) |\n        (r.z << 16) |\n        (r.w << 24);\n    \n    return uintBitsToFloat(u);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 targetPos;\n    targetPos.x = decode(texture(iChannel0, vec2(0.5 / iResolution.x, 0.0)));\n    targetPos.y = decode(texture(iChannel0, vec2(1.5 / iResolution.x, 0.0)));\n    \n    vec2 rocketPos;\n    rocketPos.x = decode(texture(iChannel0, vec2(2.5 / iResolution.x, 0.0)));\n    rocketPos.y = decode(texture(iChannel0, vec2(3.5 / iResolution.x, 0.0)));\n    \n    fragColor = vec4(\n\t\tmax(0.0, 10.0-length(rocketPos - fragCoord.xy)),\n\t\tmax(0.0, 10.0-length(targetPos - fragCoord.xy)),\n        0.0,\n        1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PROPULSION 300.0\n#define ROCKT_START_SPEED 300.0\n#define TARGET_SPEED 100.0\n\nvec4 code(float v)\n{\n    uint x = floatBitsToUint(v);\n    \n    uvec4 r;\n    r.x = (x & uint(0x000000FF)) >> 0;\n    r.y = (x & uint(0x0000FF00)) >> 8;\n    r.z = (x & uint(0x00FF0000)) >> 16;\n    r.w = (x & uint(0xFF000000)) >> 24;\n    \n    return vec4(r) / vec4(255.0);\n}\n\nfloat decode(vec4 v)\n{\n    uvec4 r = uvec4(v * vec4(255.0));\n    \n    uint u = \n        (r.x << 0) |\n        (r.y << 8) |\n        (r.z << 16) |\n        (r.w << 24);\n    \n    return uintBitsToFloat(u);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 targetPos;\n    vec2 rocketPos;\n    vec2 rocketVel;\n\n    //init\n    if(iTime < 0.1)\n    {\n        rocketVel = vec2(0.0);\n        targetPos = vec2(iResolution.xy*0.5);\n        rocketPos = vec2(iResolution.x*0.5+100.0, iResolution.y*0.5);\n        rocketVel = vec2(0.0, 1.0) * ROCKT_START_SPEED;\n    }\n    else\n    {\n    \ttargetPos.x = decode(texture(iChannel0, vec2(0.5 / iResolution.x, 0.0)));\n    \ttargetPos.y = decode(texture(iChannel0, vec2(1.5 / iResolution.x, 0.0)));\n    \trocketPos.x = decode(texture(iChannel0, vec2(2.5 / iResolution.x, 0.0)));\n    \trocketPos.y = decode(texture(iChannel0, vec2(3.5 / iResolution.x, 0.0)));\n    \trocketVel.x = decode(texture(iChannel0, vec2(4.5 / iResolution.x, 0.0)));\n\t    rocketVel.y = decode(texture(iChannel0, vec2(5.5 / iResolution.x, 0.0)));\n    }\n\n    float dt = 1.0 / 60.0;\n        \n    vec2 dir = normalize(targetPos - rocketPos);\n    vec2 acceleration = dir * PROPULSION;\n    rocketVel += acceleration * dt;\n    rocketPos += rocketVel * dt;\n    \n    if(iMouse.z > 0.5)\n        targetPos += normalize(iMouse.xy - targetPos) * TARGET_SPEED * dt;\n    \n    int index = int(fragCoord.x - 0.5);\n    switch(index)\n    {\n        case 0:\n\t\t\tfragColor = code(targetPos.x);\n        \tbreak;\n        case 1:\n\t\t\tfragColor = code(targetPos.y);\n        \tbreak;\n        case 2:\n\t\t\tfragColor = code(rocketPos.x);\n        \tbreak;\n        case 3:\n\t\t\tfragColor = code(rocketPos.y);\n        \tbreak;\n        case 4:\n\t\t\tfragColor = code(rocketVel.x);\n        \tbreak;\n        case 5:\n\t\t\tfragColor = code(rocketVel.y);\n        \tbreak;\n        default:\n\t\t\tfragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}