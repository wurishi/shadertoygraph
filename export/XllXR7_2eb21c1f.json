{"ver":"0.1","info":{"id":"XllXR7","date":"1435360010","viewed":190,"name":"sunruse","username":"jameswilddev","description":"I make one of these every time I'm experimenting with a new rendering technique","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sunruse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n#define samples 3.0\n#define samplesHigh 6.0\nfloat sunruse(vec2 ndc) {\n\treturn length(ndc) < 0.262 || length(ndc) > pow(mix(0.77, 0.66, abs(fract(6.0 * (atan(ndc.x, ndc.y) / 3.142) - 0.5) - 0.5)), 4.0) ? 0.0 : 1.0;\n}\n\nvec2 toNdc(vec2 fragCoord, vec2 res) {\n\treturn (fragCoord - (res / 2.0)) / min(res.x, res.y);\n}\n\nfloat multisampleSunruse(vec2 pixel, vec2 res, float spacing) {\t\n\tfloat accumulator = 0.0;\n\tfor(float x = -0.5; x < 0.5; x += (1.0 / samples))\n\t\tfor(float y = -0.5; y < 0.5; y += (1.0 / samples))\n\t\t\taccumulator += sunruse(toNdc(pixel + vec2(x, y) * spacing, res));\n\treturn accumulator / samples / samples;\n}\n\nfloat multisampleSunruseHigh(vec2 pixel, vec2 res, float spacing) {\t\n\tfloat accumulator = 0.0;\n\tfor(float x = -0.5; x < 0.5; x += (1.0 / samplesHigh))\n\t\tfor(float y = -0.5; y < 0.5; y += (1.0 / samplesHigh))\n\t\t\taccumulator += sunruse(toNdc(pixel + vec2(x, y) * spacing, res));\n\treturn accumulator / samplesHigh / samplesHigh;\n}\n\nfloat flare(vec2 ndc) {\n\treturn pow(abs(ndc.y) + 0.4, 7.0) * 8.0;\n}\n\nfloat background(vec2 pixel, vec2 res) {\n\treturn mix(0.01, 0.0, pow(multisampleSunruseHigh(pixel, res, min(res.x, res.y) * 0.075), 0.5));\n}\n\nfloat scene(vec2 pixel, vec2 res) {\n\tvec2 ndc = toNdc(pixel, res);\n\treturn mix(background(pixel + vec2(0.0, min(res.x, res.y) / 30.0), res), flare(ndc), multisampleSunruse(pixel, res, 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4( vec3(pow(scene(fragCoord.xy, iResolution.xy), 1.0 / 2.2)), 1.0 );\n}","name":"","description":"","type":"image"}]}