{"ver":"0.1","info":{"id":"4f3SWS","date":"1714346353","viewed":41,"name":"Derivatives Practice KD1206","username":"kris1206","description":"Practicing using derivatives for normal calculation (nothing fancy)\nThings went in an odd direction with the shadows and then I decided to lean into it.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["testing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.898,78.233)))\n                 * 4378.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 8\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return pow(value,1.) * 5.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sv = fragCoord / iResolution.xy;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord * 0.001;\n    uv += iTime * 0.01;\n    uv *= 5.;\n    float noiseVal = fbm(uv);\n    float stepSize = 0.0001;\n    \n    vec2 normal = normalize(vec2(fbm(uv - vec2(stepSize,0)) - fbm(uv + vec2(stepSize,0)),\n                                 fbm(uv - vec2(0,stepSize)) - fbm(uv + vec2(0,stepSize))));\n    \n    \n    \n    //vec2 lightDir = normalize(vec2(sin(iTime),cos(iTime)));\n    vec2 lightDir = normalize(iMouse.xy - fragCoord);\n    \n    float lightIntensity = max(0., dot(normal,lightDir));\n    \n    float shadow = 0.0;\n    float shadowStepSize = 0.01;\n    for(float i = 0.; i < 100.; i+=1.0){\n        shadow += step(noiseVal, fbm(uv + lightDir * shadowStepSize * i)) * 0.01;\n    }\n    \n    vec3 col = vec3(lightIntensity) * vec3(0.85,.95,0.65) * (1.-shadow) +  vec3(0.2,shadow *0.184,shadow*0.31) * (noiseVal);\n    \n    if(sv.x > 0.5){\n        //col = vec3(noiseVal);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}