{"ver":"0.1","info":{"id":"dlfcD4","date":"1690748577","viewed":65,"name":"Simple pixelizer","username":"Sheldier","description":"...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["algorithms"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define USE_MAT_8\n//#define USE_SHARPNESS\n//#define USE_PALETTE\n\nconst float TARGET_SCREEN_WIDTH = 320.0;\nconst float TARGET_SCREEN_HEIGHT = 180.0;\nconst float COLORS_NUM = 3.0;\nconst float SHARPNESS = 10.0;\n\n#ifdef USE_MAT_8\nconst int MAT_SIZE = 8; \n#else\nconst int MAT_SIZE = 4; \n#endif\n\nconst int SQ_MAT_SIZE = MAT_SIZE * MAT_SIZE;\nconst float MAT_SIZE_F = float(MAT_SIZE); \nconst float SQ_MAT_SIZE_F = float(SQ_MAT_SIZE);\nconst vec3 GRAYSCALE_VEC = vec3(0.299, 0.587, 0.144);\n\n//http://dev.thi.ng/gradients/\nconst vec3 A_PALETTE = vec3(0.148, 0.580, 0.688);\nconst vec3 B_PALETTE = vec3(0.000, 0.500, 0.408);\nconst vec3 C_PALETTE = vec3(0.000, 0.500, 0.333);\nconst vec3 D_PALETTE = vec3(0.000, 0.500, -0.272);\n\n//https://en.wikipedia.org/wiki/Ordered_dithering\n#ifdef USE_MAT_8\nconst float BAYER_MAT[SQ_MAT_SIZE] = \nfloat[SQ_MAT_SIZE](0.0, 32.0, 8.0, 40.0, 2.0, 34.0, 10.0, 42.0,\n                   48.0, 16.0, 56.0, 24.0, 50.0, 18.0, 58.0, 26.0,\n                   12.0, 44.0, 4.0, 36.0, 14.0, 46.0, 6.0, 38.0,\n                   60.0, 28.0, 52.0, 20.0, 62.0, 30.0, 54.0, 22.0,\n                   3.0, 35.0, 11.0, 43.0, 1.0, 33.0, 9.0, 41.0,\n                   51.0, 19.0, 59.0, 27.0, 49.0, 17.0, 57.0, 25.0,\n                   15.0, 47.0, 7.0, 39.0, 13.0, 45.0, 5.0, 37.0,\n                   63.0, 31.0, 55.0, 23.0, 61.0, 29.0, 53.0, 21.0);\n#else\nconst float BAYER_MAT[SQ_MAT_SIZE] = \nfloat[SQ_MAT_SIZE](0.0, 8.0, 2.0, 10.0,\n                   12.0, 4.0, 14.0, 6.0,\n                   3.0, 11.0, 1.0, 9.0,\n                   15.0, 7.0, 13.0, 5.0);\n#endif                   \n                   \nvec3 Palette(float t)\n{\n    return A_PALETTE + B_PALETTE * cos(6.28318 * (C_PALETTE * t + D_PALETTE));\n}\n\n   \nvec3 SharpColors(vec3 col, vec2 uv)\n{\n    float oneResX = 1.0 / iChannelResolution[0].x;\n    float oneResY = 1.0 / iChannelResolution[0].y;\n    \n    vec3 targetCol = (col * SHARPNESS * 4.0) + 1.0;\n    targetCol += texture(iChannel0, uv + vec2(0.0, oneResY)).xyz * -SHARPNESS;\n    targetCol += texture(iChannel0, uv + vec2(0.0, -oneResY)).xyz * -SHARPNESS;\n    targetCol += texture(iChannel0, uv + vec2(oneResX, 0.0)).xyz * -SHARPNESS;\n    targetCol += texture(iChannel0, uv + vec2(-oneResX, 0.0)).xyz * -SHARPNESS;\n    \n    return targetCol;\n}\n                       \nfloat GetDitherValue(vec2 uv)\n{\n    float x = uv.x * TARGET_SCREEN_WIDTH;\n    float y = uv.y * TARGET_SCREEN_HEIGHT;\n    \n    highp int ix = int(mod(x, MAT_SIZE_F));\n    highp int iy = int(mod(y, MAT_SIZE_F));\n    \n    float matV = BAYER_MAT[iy * MAT_SIZE + ix];\n    matV = matV / SQ_MAT_SIZE_F;\n    \n    return matV;\n}\n\nvec3 ReduceColor(vec3 col, float colN)\n{\n    return floor(col * (colN - 1.0) + 0.5) / (colN - 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv0 = uv;\n    uv.x = floor(uv.x * TARGET_SCREEN_WIDTH) / TARGET_SCREEN_WIDTH;\n    uv.y = floor(uv.y * TARGET_SCREEN_HEIGHT) / TARGET_SCREEN_HEIGHT;\n\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    #ifdef USE_SHARPNESS\n    col *= SharpColors(col, uv);\n    #endif\n    \n    col *= GetDitherValue(uv);\n    col = ReduceColor(col, COLORS_NUM);\n\n    #ifdef USE_PALETTE\n    float grayCol = dot(col, GRAYSCALE_VEC);\n    col = grayCol * Palette(grayCol);\n    #endif\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}