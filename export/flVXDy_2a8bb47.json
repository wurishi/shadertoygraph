{"ver":"0.1","info":{"id":"flVXDy","date":"1641307081","viewed":94,"name":"Making Text shader","username":"Canysway","description":"making text (number) in shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["text","number"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CELL  100.\n\n\nconst vec3 image[60] = vec3[60](\n    vec3(1., 1., 1.),\n    vec3(1., 0., 1.),\n    vec3(1., 0., 1.),\n    vec3(1., 0., 1.),\n    vec3(1., 1., 1.),\n\n    vec3(1., 1., 0.),\n    vec3(0., 1., 0.),\n    vec3(0., 1., 0.),\n    vec3(0., 1., 0.),\n    vec3(1., 1., 1.),\n\n    vec3(1., 1., 1.),\n    vec3(0., 0., 1.),\n    vec3(1., 1., 1.),\n    vec3(1., 0., 0.),\n    vec3(1., 1., 1.),\n\n    vec3(1., 1., 1.),\n    vec3(0., 0., 1.),\n    vec3(1., 1., 1.),\n    vec3(0., 0., 1.),\n    vec3(1., 1., 1.),\n\n    vec3(1., 0., 1.),\n    vec3(1., 0., 1.),\n    vec3(1., 1., 1.),\n    vec3(0., 0., 1.),\n    vec3(0., 0., 1.),\n\n    vec3(1., 1., 1.),\n    vec3(1., 0., 0.),\n    vec3(1., 1., 1.),\n    vec3(0., 0., 1.),\n    vec3(1., 1., 1.),\n\n    vec3(1., 1., 1.),\n    vec3(1., 0., 0.),\n    vec3(1., 1., 1.),\n    vec3(1., 0., 1.),\n    vec3(1., 1., 1.),\n\n    vec3(1., 1., 1.),\n    vec3(0., 0., 1.),\n    vec3(0., 0., 1.),\n    vec3(0., 0., 1.),\n    vec3(0., 0., 1.),\n\n    vec3(1., 1., 1.),\n    vec3(1., 0., 1.),\n    vec3(1., 1., 1.),\n    vec3(1., 0., 1.),\n    vec3(1., 1., 1.),\n\n    vec3(1., 1., 1.),\n    vec3(1., 0., 1.),\n    vec3(1., 1., 1.),\n    vec3(0., 0., 1.),\n    vec3(1., 1., 1.),\n\n    vec3(0., 0., 0.),\n    vec3(0., 0., 0.),\n    vec3(1., 1., 0.),\n    vec3(0., 0., 0.),\n    vec3(0., 0., 0.),\n\n    vec3(0., 0., 0.),\n    vec3(0., 0., 0.),\n    vec3(0., 0., 0.),\n    vec3(0., 0., 0.),\n    vec3(0., 1., 0.)\n);\n\n\n\nfloat makeText(float nums, vec2 uv, float x, float y){\n    x *= iResolution.x/iResolution.y;\n    uv *= vec2(CELL * iResolution.x/iResolution.y, CELL);\n    uv = floor(uv);   \n    nums = clamp(nums, -9999., 9999.);\n    float isM = step(0., nums);\n    nums = abs(nums);\n    float n4 = floor(nums/1000.);\n    float n3 = floor((nums - (n4 * 1000.))/100.);\n    float n2 = floor((nums - (n4 * 1000.) - (n3 * 100.))/10.);\n    float n1 = floor((nums - (n4 * 1000.) - (n3 * 100.) - (n2 * 10.)));\n    float d1 = floor((nums - floor(nums)) * 10. + .1);\n    float d2 = floor((nums - floor(nums) - d1 * 0.1) * 100. + .1);\n    int num = int(n4);\n    float a = 0.;\n\n    vec2 pos = vec2(floor(x * CELL), floor(y * CELL));\n\n    if (nums < 10.){\n        pos = vec2(floor(x * CELL + 11.), floor(y * CELL));\n    }else if(nums < 100.){\n        pos = vec2(floor(x * CELL + 8.), floor(y * CELL));\n    }else if(nums < 1000.){\n        pos = vec2(floor(x * CELL + 4.), floor(y * CELL));\n    }\n\n    for(int i = 0; i < 5; i++){\n        if (isM > 0.) break;\n        a += (1. - step(.01, abs(uv.x - pos.x))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[50 + i].x;\n        a += (1. - step(.01, abs(uv.x - pos.x - 1.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[50 + i].y;\n        a += (1. - step(.01, abs(uv.x - pos.x - 2.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[50 + i].z;\n    }\n\n    \n    pos = vec2(floor(x * CELL + 3.), floor(y * CELL));\n\n    for(int i = 0; i < 5; i++){\n        if (nums < 1000.) break;\n        a += (1. - step(.01, abs(uv.x - pos.x))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].x;\n        a += (1. - step(.01, abs(uv.x - pos.x - 1.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].y;\n        a += (1. - step(.01, abs(uv.x - pos.x - 2.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].z;\n    }\n\n    num = int(n3);\n    pos = vec2(floor(x * CELL + 7.), floor(y * CELL));\n    for(int i = 0; i < 5; i++){\n        if (nums < 100.) break;\n        a += (1. - step(.01, abs(uv.x - pos.x))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].x;\n        a += (1. - step(.01, abs(uv.x - pos.x - 1.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].y;\n        a += (1. - step(.01, abs(uv.x - pos.x - 2.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].z;\n    }\n\n    num = int(n2);\n    pos = vec2(floor(x * CELL + 11.), floor(y * CELL));\n    for(int i = 0; i < 5; i++){\n        if (nums < 10.) break;\n        a += (1. - step(.01, abs(uv.x - pos.x))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].x;\n        a += (1. - step(.01, abs(uv.x - pos.x - 1.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].y;\n        a += (1. - step(.01, abs(uv.x - pos.x - 2.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].z;\n    }\n\n    num = int(n1);\n    pos = vec2(floor(x * CELL + 15.), floor(y * CELL));\n    for(int i = 0; i < 5; i++){\n        a += (1. - step(.01, abs(uv.x - pos.x))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].x;\n        a += (1. - step(.01, abs(uv.x - pos.x - 1.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].y;\n        a += (1. - step(.01, abs(uv.x - pos.x - 2.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].z;\n    }\n    \n    pos = vec2(floor(x * CELL + 18.), floor(y * CELL));\n\n    for(int i = 0; i < 5; i++){\n        a += (1. - step(.01, abs(uv.x - pos.x))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[55 + i].x;\n        a += (1. - step(.01, abs(uv.x - pos.x - 1.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[55 + i].y;\n        a += (1. - step(.01, abs(uv.x - pos.x - 2.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[55 + i].z;\n    }\n\n    num = int(d1);\n    pos = vec2(floor(x * CELL + 21.), floor(y * CELL));\n    for(int i = 0; i < 5; i++){\n        a += (1. - step(.01, abs(uv.x - pos.x))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].x;\n        a += (1. - step(.01, abs(uv.x - pos.x - 1.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].y;\n        a += (1. - step(.01, abs(uv.x - pos.x - 2.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].z;\n    }\n\n    num = int(d2);\n    pos = vec2(floor(x * CELL + 25.), floor(y * CELL));\n    for(int i = 0; i < 5; i++){\n        a += (1. - step(.01, abs(uv.x - pos.x))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].x;\n        a += (1. - step(.01, abs(uv.x - pos.x - 1.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].y;\n        a += (1. - step(.01, abs(uv.x - pos.x - 2.))) * (1. - step(.01, abs(uv.y - pos.y - float(4 - i)))) * image[min(49, num * 5 + i)].z;\n    }\n    \n\n    return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    float col = makeText(iResolution.x/iResolution.y, uv, 0.1, 0.45);\n    col += makeText(iTime, uv, .1, .35);\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}