{"ver":"0.1","info":{"id":"llGfzc","date":"1544128248","viewed":1383,"name":"subway of the death","username":"zguerrero","description":"having fun with raymarching...","likes":63,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","distancefield","tunnel","glow","path","subway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 path = path(iTime*5.0 + 5.5, iTime);\n    path.x *= -iResolution.x/iResolution.y;\n    \n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec2 uvCenter = uv - vec2(0.5) - path*0.025;\n    vec2 pc;\n    pc.x = atan(uvCenter.x, uvCenter.y) / 3.14159265359;\n    pc.y = length(uvCenter)*2.0;\n    vec2 coords = pc * vec2(2.0, 0.025) + vec2(0.0, 1.0) * iTime;\n    float n = smoothstep(0.2, 1.0, texture(iChannel2, coords).x) * clamp(pc.y - 0.75, 0.0, 1.0);\n    \n    uv -= normalize(uvCenter) * n;\n\tvec4 tex = texture(iChannel0, uv);\n\tvec4 texblurred = texture(iChannel1, uv);\n    \n    vec4 col1 = pow(tex, vec4(2.0)) * 1.5 + texblurred;\n    vec4 col2 = texblurred*3.0;\n    float vignet = smoothstep(0.5, 1.25, pc.y);\n    \n\tfragColor = mix(col1, col2, vignet);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926535\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat circle( vec2 position, float radius)\n{\n    return length(position) - radius;\n}\n\nfloat box(vec2 p,vec2 s)\n{\n    p=abs(p)-s;\n    return max(p.x,p.y);\n}\n\nvec2 path(float z, float time)\n{\n    z *= 0.25;\n    vec4 s0 = sin(vec4(z*0.5, z*0.3 + 1.5, z*0.4 + 0.5, z*0.6 + 2.0));\n    vec4 s1 = vec4(z) + s0;\n    vec4 s = sin(vec4(s1.x, s1.y+2.0, s1.z+0.5, s1.w+3.0) - vec4(1.6, 1.7, 1.3, 1.5));\n    \n    return vec2(s.x + s.y, s.z + s.w);\n}\n\n//Distance Field functions by iq :\n//https://iquilezles.org/articles/distfunctions\nvec4 opRep( vec4 p, vec4 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float epsilon = 0.01;\nconst float pi = 3.14159265359;\nconst vec3 color1 = vec3(0.8, 0.8, 0.8);\nconst vec3 color2 = vec3(1.0, 0.4, 0.2);\nconst vec3 color3 = vec3(0.1, 0.1, 0.1);\nconst vec3 lightColor = vec3(0.4, 1.0, 0.5);\nconst vec3 specularColor = vec3(0.5, 1.0, 0.5) * 1.5;\nconst vec3 fogColor = vec3(0.0, 0.0, 1.0);\n\nvec2 PipeProfil(vec2 pos, vec2 minRadius, vec2 maxRadius, vec2 minSize, vec2 maxSize, vec2 tiling)\n{\n    return minRadius + (clamp(abs(fract(pos * tiling)-0.5) * 2.0, minSize, maxSize) - minSize) * maxRadius;\n}\n\n//https://www.shadertoy.com/view/MsdBDj\nvec4 distfunc(vec3 pos)\n{ \n    pos.xy += path(pos.z, iTime);\n    \n    vec4 repos = opRep(pos.zzzz, vec4(4.0, 0.5, 1.0, 2.0));\n    \n    float incl = min(pos.y, 0.3) * 0.5;\n    \n    float main = -circle(pos.xy, 1.0);\n    float box1 = -box(pos.xy, vec2(3.0, 0.5));\n    float box2 = -box(abs(pos.xy) - vec2(0.125, 0.0), vec2(0.05, 1.115));\n    \n    vec2 box3Profil;\n    box3Profil.x = -pos.y*0.7 - 0.4;\n    box3Profil.y = clamp(abs(repos.z - 0.5), 0.2, 0.35)*0.35 + 0.05;\n    float box3 = box(pos.xy - vec2(0.0, -1.0), box3Profil);\n        \n    vec2 pipesProfils = PipeProfil(pos.zz, vec2(0.125, 0.03), vec2(1.0, 0.5), vec2(0.85, 0.3), vec2(0.9, 0.35), vec2(0.5, 0.5));\n    \n    vec2 pipe1Pos = abs(pos.xy) - vec2(0.5, 0.8);\n    float pipe1 = circle(pipe1Pos, pipesProfils.x);\n    float pipe12 = circle(pipe1Pos, 0.25); \n    \n    float pipe2 = circle(abs(pos.xy) - vec2(1.25, 0.2) + vec2(incl, 0.0), pipesProfils.y);\n    \n    float tunnelShape = max(-pipe12, max(max(main, box1), box2));\n    \n    vec3 cube1Pos = pos;\n    cube1Pos.z = repos.x;\n    cube1Pos.xy = abs(pos.xy) - vec2(1.25, 0.5);\n    cube1Pos.x += incl;\n    float cube1 = sdBox(cube1Pos, vec3(0.1, 0.45, 0.5));\n        \n    vec3 cube2Pos = pos;\n    cube2Pos.z = repos.y;\n    cube2Pos.x = abs(pos.x) - 2.15 + incl;\n    float cube2 = sdBox(cube2Pos, vec3(0.45, 3.0, 0.2));\n    \n    vec3 cube3Pos = pos;\n    cube3Pos.z = repos.x;\n    cube3Pos.x = abs(pos.x) - 1.15 - incl;\n    cube3Pos.y += 0.5;\n    float cube3 = sdBox(cube3Pos, vec3(0.1, 0.075, 1.5));\n    \n    vec3 ligtsPos1 = pos;\n    ligtsPos1.z = repos.x;\n    ligtsPos1.x = abs(pos.x) - 1.15;\n    ligtsPos1.x += incl;\n    ligtsPos1.y -= 0.3;\n    float lightsCube1 = sdBox(ligtsPos1, vec3(0.025, 0.025, 0.2));\n    \n    vec3 ligtsPos2 = pos;\n    ligtsPos2.z = repos.x;\n    ligtsPos2.y += 0.825;\n    float lightsCube2 = sdBox(ligtsPos2, vec3(0.1, 0.01, 0.01));\n    \n    float lightsCubes = min(lightsCube1, lightsCube2);\n    \n    float mat_1 = min(min(pipe1, cube2), pipe2);\n    float mat_2 = max(-cube3, tunnelShape);\n    float mat_3 = min(cube1, box3);\n    float geom = min(lightsCubes, min(mat_3, min(mat_1, mat_2)));\n    \n\treturn vec4(geom, lightsCubes, mat_2, mat_3);\n}\n\nstruct rayMarchResult\n{\n    float dist;\n    float totalDist;\n    vec3 mat;\n    float glow;\n};\n\nrayMarchResult rayMarch(vec3 rayDir, vec3 cameraOrigin)\n{\n    rayMarchResult o;\n    \n    const int maxItter = 256;\n\tconst float maxDist = 20.0;\n    \n    float totalDist = 0.0;\n\tvec3 pos = cameraOrigin;\n    \n\to.dist = epsilon;\n    o.totalDist = epsilon;\n    o.mat = vec3(0.0);\n\n    for(int i = 0; i < maxItter; i++)\n\t{\n        vec4 d = distfunc(pos);\n       \to.dist = d.x;\n        o.totalDist += d.x; \n        o.mat = d.yzw;\n        o.glow += (d.x/d.y);\n            \n\t\tpos += d.x * rayDir;\n        \n        if(d.x < epsilon || totalDist > maxDist)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n    \n    o.glow /= float(maxItter);\n    \n    return o;\n}\n\nfloat AO(vec3 pos, vec3 n)\n{\n\tvec4 res = vec4(0.0);\n    \n\tfor( int i=0; i<4; i++ )\n\t{\n\t\tvec3 aopos = pos + n*0.1*float(i);\n\t\tfloat d = distfunc(aopos).x;\n\t\tres += d;\n\t}\n\n\treturn clamp(res.w*1.5, 0.0, 1.0);   \n}\n\n\n//Camera Function by iq :\n//https://www.shadertoy.com/view/Xds3zN\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr), 0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n//Normal and Curvature Function by Nimitz;\n//https://www.shadertoy.com/view/Xts3WM\nvec4 norcurv(in vec3 p)\n{\n    vec2 e = vec2(-epsilon, epsilon);   \n    float t1 = distfunc(p + e.yxx).x, t2 = distfunc(p + e.xxy).x;\n    float t3 = distfunc(p + e.xyx).x, t4 = distfunc(p + e.yyy).x;\n\n    float curv = .25/e.y*(t1 + t2 + t3 + t4 - 4.0 * distfunc(p)).x;\n    return vec4(normalize(e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4), curv);\n}\n\nvec3 lighting(vec3 n, vec3 rayDir, vec3 reflectDir, vec3 pos, float specMap)\n{\n    pos.xy += path(pos.z, iTime);\n    pos *= vec3(0.5, 0.25, 0.25);\n    pos -= vec3(0.0, 0.56, 0.0);\n    pos = (fract(pos) - 0.5) * 2.0;\n    \n    vec3 lightVec = -pos;\n\tvec3 lightDir = normalize(lightVec);\n    float atten = clamp(1.0 - length(lightVec), 0.0, 1.0);\n    vec2 diff = smoothstep(vec2(-1.0, 0.0), vec2(1.0, 0.2), vec2(dot(lightDir, n))) * atten;\n    float spec = pow(max(0.0, dot(reflectDir, lightDir)), 5.0) * atten * specMap;\n    float rim = (1.0 - max(0.0, dot(-n, rayDir)));\n\n    return vec3((diff.x + diff.y)/2.0, spec, rim); \n}\n\nvec3 TriplanarTexture(vec3 n, vec3 pos)\n{\n    n = abs(n);\n    vec3 t1 = texture(iChannel0, pos.yz).xyz * n.x;\n    vec3 t2 = texture(iChannel0, pos.zx).xyz * n.y;\n    vec3 t3 = texture(iChannel0, pos.xy).xyz * n.z;\n    \n    return t1 * n.x + t2 * n.y + t3 * n.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    float camX = 0.0;\n    float camY = 0.0;\n    float camZ = iTime*5.0;                \n    vec3 cameraOrigin = vec3(camX, camY, camZ);\n    \n\tvec3 cameraTarget = cameraOrigin + vec3(0.0, 0.0, 5.0);\n    cameraTarget.xy -= path(cameraTarget.z+0.5, iTime);\n    cameraOrigin.xy -= path(cameraOrigin.z-0.5, iTime);\n        \n\tvec2 screenPos = uv * 2.0 - 1.0;\n    \n\tscreenPos.x *= iResolution.x/iResolution.y;\n    \n    mat3 cam = setCamera(cameraOrigin, cameraTarget, cameraOrigin.x * -0.25);\n    \n    vec3 rayDir = cam*normalize(vec3(screenPos.xy,0.75));\n    rayMarchResult result = rayMarch(rayDir, cameraOrigin);\n    \n    vec4 res;\n\n\tif(result.dist < epsilon)\n    {\n        vec3 pos = cameraOrigin + result.totalDist * rayDir;\n        \n        vec4 n = norcurv(pos);\n        float ao = AO(pos, n.xyz);\n        vec3 r = reflect(rayDir, n.xyz);\n        \n        vec3 tex = smoothstep(vec3(0.2), vec3(0.9), TriplanarTexture(n.xyz, pos));\n        \n\t\tvec3 l = lighting(n.xyz, rayDir, r, pos, tex.x);\n        \n        float fog = clamp(1.0 / exp(result.totalDist * 0.15), 0.0, 1.0);\n        fog *= smoothstep(-5.0, 0.0, pos.y);\n        \n        float distFromCenter = smoothstep(1.5, 0.5, length(pos.xy + path(pos.z, iTime)));\n        \n        vec3 mat = smoothstep(vec3(0.05), vec3(0.0), result.mat);\n        \n        vec2 rim = smoothstep(vec2(0.6, 0.3), vec2(0.8, 0.1), l.zz);\n        \n        vec3 light = l.x * distFromCenter * lightColor;\n        vec3 specularLight = (l.y*3.0 + rim.x * 0.3 + rim.y*0.5*(1.0 - mat.z)) * distFromCenter * specularColor;\n        \n        vec3 alb = mix(mix(color2, color3, mat.z), color1, mat.y);\n        alb = mix(alb, alb + tex, smoothstep(-0.1, 0.25, n.w));\n        \n        light *= alb;\n        specularLight *= alb;\n           \n        ao = mix(ao, 1.0, l.x);\n        \n        alb = mix(alb * ao * 0.65, lightColor, mat.x);\n        \n        vec3 col = alb + light + specularLight;    \n\t\tcol += lightColor * result.glow * 25.0;\n            \n        res.xyz = mix(fogColor, col, fog);\n        res.w = mat.x + result.glow * 10.0;\n    }\n    else\n    {\n        res.xyz = fogColor;\n        res.w = 0.0;\n    }\n    \n\tfragColor = res;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec4 t_old = clamp(texture(iChannel1, uv), vec4(0.0), vec4(1.0));\n    vec4 t_new = clamp(texture(iChannel0, uv), vec4(0.0), vec4(1.0));\n    \n    vec3 prev = t_old.xyz;\n\tvec3 new = t_new.xyz * t_new.w;\n\n\tfragColor = vec4(mix(prev, new, 0.25), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}