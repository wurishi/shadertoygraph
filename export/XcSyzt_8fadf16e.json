{"ver":"0.1","info":{"id":"XcSyzt","date":"1722788795","viewed":12,"name":"Sierpinski222","username":"fthr","description":"Testing with ChatGPT","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n{\n  \"DESCRIPTION\": \"Animated Sierpinski Triangle with Color Variation\",\n  \"CATEGORIES\": [\n    \"Fractals\",\n    \"Sierpinski\",\n    \"Animation\"\n  ],\n  \"INPUTS\": [],\n  \"PRESERVES_MOTION\": true\n}\n*/\n\n// Function to generate a color palette\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 0.7, 0.4);\n    vec3 d = vec3(0.00, 0.15, 0.20);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat sierpinski(vec2 uv) {\n    float scale = 1.0;\n    for (int i = 0; i < 10; i++) {\n        uv = abs(uv) * 2.0 - 1.0;\n        scale *= 2.0;\n        if (uv.x + uv.y < 0.0) {\n            uv = vec2(-uv.y, -uv.x);\n        }\n    }\n    return mod(scale, 2.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Center the fractal in the screen\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Animation parameters\n    float time = iTime * 0.1;  // Adjust the animation speed\n    uv *= pow(2.0, time); // Exponential zoom for deeper dives\n\n    // Sierpinski triangle calculation\n    float t = sierpinski(uv);\n\n    // Color based on the pattern with palette function\n    vec3 col = palette(t);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}