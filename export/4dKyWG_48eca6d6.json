{"ver":"0.1","info":{"id":"4dKyWG","date":"1523139580","viewed":113,"name":"5x6 bitcompressed font","username":"crundle","description":"My first attempt at creating a bitcompressed font. Can anyone tell me why this is so slow?","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["font","bitcompressed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TEXTSIZE 10.0\n\n//ints, because i had precision problems with floats\n//5x6 - top left corner is LSB\n//generated from http://asset-d.soupcdn.com/asset/14134/8421_d52e.png\nint[99] ichars = int[99]( 0, 422402636, 277094732, 1008824846, 487092750, 277117250, 487077982, 422131804, 138551838, 422130252, 487092812, 489636288, 489245122, 941689728, 959007632, 942098816, 69667404, 1024347008, 623462850, 138547204, 211034120, 623331906, 421595202, 727373280, 623462848, 422136192, 69683648, 554584448, 69290432, 486935424, 943854532, 959007296, 145312320, 358274592, 581052960, 1024346688, 1009140672, 623856204, 1025985102, 941688924, 489245262, 1009191006, 69666910, 959252572, 623856210, 474091662, 422068764, 623331922, 1008797762, 727373499, 623471314, 422136396, 69683790, 959269452, 623331918, 486934620, 138547359, 422136402, 212421202, 358274737, 581052977, 1024346706, 1008869918, 134353028, 134357580, 368409920, 134217728, 142999552, 142999808, 134348800, 35791360, 545392672, 136382592, 142876800, 203491520, 411312512, 491197888, 1040187392, 458752, 422135828, 422129684, 959332372, 4224, 14694400, 4657152, 9078784, 355019340, 330, 572662304, 455431816, 134348800, 138547332, 272699648, 71569472, 324, 10627072, 492519982, 809570456, 210247942  );\n\n//Extracts bit b from the given number.\nfloat extract_bit_int(int n, float b)\n{\n    return float( (n / int(exp2(b)) ) %2 );   \n}\n\nfloat drawchar(vec2 o, vec2 p, int ich) {\n    p-=o;\n    \n    p*=iResolution.xy/TEXTSIZE; //scale stuff\n    if((p.x<0.||p.x>=5.) || (p.y<0.||p.y>=6.)) return 0.;\n    float cpx = trunc(mod(p.x,5.)); //pixel in cell, x\n    float cpy = 5.-trunc(mod(p.y, 6.)); // pixel in cell, y\n    float cpno = mod(cpy*5.+cpx,32.); //pixel/bit in char\n    ich=ich%99;\n    return (extract_bit_int(ichars[ich],(cpno))); //is bit set?\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y*=iResolution.y/iResolution.x;\n    \n    float time = 0.0;\n    float charstep = (TEXTSIZE*5.)/iResolution.x;\n    vec2 p = vec2(0);\n    for(int i = 3; i>=-2;i--) {\n        float clip = float(abs(iTime) > pow(10.0, float(i)) || i == 0); //Clip off leading zeros.\n        \n        float digit = mod(iTime / pow(10.0, float(i)),10.0);\n        \n        if(i == -1)\n        {\n            time += drawchar(vec2(0),uv-p,66) * clip;\n            p.x += charstep * clip;\n        }\n        time += drawchar(vec2(0)+p,uv,int(digit)+1) * clip;\n        \n        \n        p.x += charstep * clip;\n        \n    }\n    time += drawchar(vec2(0.,.25),uv, 44 );\n    time += drawchar(vec2(0.,.25)+vec2(charstep,0.),uv,19);\n    time += drawchar(vec2(0.,.25)+vec2(charstep*2.,0.),uv,63);\n    vec3 col = mix(vec3(0),vec3(1,0,0),time);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}