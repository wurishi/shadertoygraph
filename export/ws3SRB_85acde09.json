{"ver":"0.1","info":{"id":"ws3SRB","date":"1583243795","viewed":79,"name":"Wave stationary","username":"csblo","description":"Wave","likes":0,"published":1,"flags":8,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 screenUV(vec2 uv)\n{\n    vec2 scale = uv / iResolution.x * 2.;\n    return vec2(scale.x - 1., scale.y - 0.5);\n}\n\nvec2 translate(vec2 uv, vec2 v)\n{\n    return uv - v;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // center\n    vec2 uv = screenUV(fragCoord);\n    \n    //uv = translate(uv, vec2(iTime * 0.5));\n    \n    // zoom on tiles\n    float zoom = 5. + cos(iTime * 0.1);\n    // Transform uv to tiles\n    uv = vec2(cos(uv.x * zoom), sin(uv.y * zoom));\n    \n    \n    \n    // amplitude of waves\n    float amplitude = sin(length(uv.xy) * iTime * 0.05);\n    // waves\n    float f = cos(length(uv.xy) * 100. - iTime * 20.) * sin(amplitude);\n    \n    // attenuation\n    f *= 1. - length(uv.xy);\n\tvec3 waveColor = vec3(f, f, 0);\n\n    // Coloring with exp(uv) and varying by time\n    vec3 col = waveColor * exp(abs(uv.xyx + cos(iTime)));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 sound(float m_time, float time)\n{\n    \n    float e = 493.88 - 440.0;\n    \n    //float w1 = sin(6.2831*440.0*m_time)*exp(-3.0*m_time);\n    float w1 = sin(6.2831 * (440.0) * m_time)*exp(-3.0*m_time);\n    //float w2 = cos(44.0 + time * 20.);\n    float w = w1 - 0.;\n    return vec2(w);\n}\n\nfloat b;\n\n#define CF 261.63\n#define DF 293.66\n#define EF 329.63\n#define FF 349.23\n#define GF 392.00\n#define AF 440.0\n#define BF 493.88\n#define K 6.2831\n#define C vec2(sign(sin(K * CF * b)) * exp(-1.0*b))\n#define D vec2(sin(K * DF * b) * exp(-1.0*b))\n#define E vec2(sin(K * EF * b) * exp(-1.0*b))\n#define _ vec2(0.)\n//#define N vec2(fract(sin(dot(b,24.9898)) * 43758.5453) * exp(-4.0*b))\n\n#define N vec2(fract(sin(dot(b,24.9898 * K * 0.5)) * 43758.5453) * exp(-16.0*b))\n\n#define X vec2(sign(sin(K * CF * 0.25 * b)) * exp(-1.0*b))\n#define Y vec2(sin(K * DF * 0.25 * b) * exp(-0.001*b))\n\n\nvec2 mainSound( in int samp,float t)\n{\n    // 120 bpm = 2bps\n    float tempo = 300.;\n    // interval\n    float interval = 1. / (tempo / 60.);\n    // bar\n    b = mod(t, interval);\n    \n    //0.25 -> 4.\n    \n    \n\t//vec2[] notes = vec2[] (C, C + N, C, D + N, E, _ + N, D, _ + N, C, E + N, D, D + N, C, _ + N, _, _ + N);\n    vec2[] notes = vec2[] (\n        _, N, _, N, _, N, _, N, _, N, _, N, _, N, _ + X, N + Y,\n        _, N, _, N, _, N, _, N, _, N, _, N, _, N, _ + X, N + Y\n    );\n    \n    \n    int currentNote = int(mod(t * (1. / interval), float(notes.length())));\n    \n    // A 440 Hz wave that attenuates quickly overt time\n    //return sound(m_time, time);\n    return notes[currentNote];\n}\n\n","name":"Sound","description":"","type":"sound"}]}