{"ver":"0.1","info":{"id":"Dt2fzh","date":"1693765906","viewed":109,"name":"Sort of mandala","username":"Stv","description":"Sort of a mandala effect","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["glow","symetry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t)\n{\n    // Define color palette values\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5); \n    vec3 c = vec3(1.0, 1.0, 1.0); \n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    // Calculate the color based on the input time 't'\n    return a + b * cos(6.28318 * (c * t * d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (ranging from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Store the original pixel coordinates\n    vec2 uv0 = uv;\n    \n    // Number of mirrors in the kaleidoscope\n    int numMirrors = 3;\n    \n    // Initialize the final color\n    vec3 finalColor = vec3(0.0);\n    \n    // Iterate for each mirror\n    for (int i = 0; i < numMirrors; i++)\n    {\n        // Angle of rotation for the current mirror\n        float angle = float(i) * (6.28318 / float(numMirrors));\n        \n        // Rotate the UV coordinates\n        vec2 rotatedUV = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * uv;\n        \n        // Apply a fractal-like distortion to rotated UV coordinates\n        rotatedUV = fract(rotatedUV * 1.5) - 0.5;\n        \n        // Calculate a distance factor based on rotated UV coordinates\n        float d = length(rotatedUV) * exp(-length(uv0));\n        \n        // Retrieve a color from the palette function\n        vec3 col = palette(length(uv0) + float(i) * 0.4 + iTime * 0.4);\n        \n        // Apply additional transformations to 'd'\n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n        d = pow(0.01 / d, 1.2);\n        \n        // Accumulate the color contribution\n        finalColor += col * d;\n    }\n\n    // Output the final color to the screen\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}