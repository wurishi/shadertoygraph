{"ver":"0.1","info":{"id":"McdfRr","date":"1732654091","viewed":29,"name":"BLACKHOLEE SHADER","username":"Akad1","description":"my project\nKrutarth Trivedi","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blackhole"],"hasliked":0,"parentid":"lcdfRr","parentname":"Fork blackhole  Akad1 037"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_BALLS 3\n#define PI 3.14159265359\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.0); // Black background\n    \n    // Black hole parameters\n    vec2 bhCenter = vec2(0.0, 0.0);\n    float bhRadius = 0.2; // Medium size black hole\n    float outerRingRadius = bhRadius * 1.1;\n    \n    // Black hole and white ring\n    float dist = length(uv - bhCenter);\n    if (dist < bhRadius) \n    {\n        // Inside of black hole (very dark)\n        col = vec3(0);\n    } \n    else if (dist < outerRingRadius) \n    {\n        // White ring\n        float t = smoothstep(bhRadius, outerRingRadius, dist);\n        col = mix(vec3(0), vec3(1.0), t);\n    } \n    else \n    {\n        // Outer glow\n        float glow = exp(-(dist - outerRingRadius) * 5.0) * 1.0;\n        col = vec3(glow);\n    }\n    \n    // Balls\n    vec3 ballColors[NUM_BALLS] = vec3[NUM_BALLS](\n        vec3(1.0, 0.0, 0.0), // Red\n        vec3(0.0, 1.0, 0.0), // Green\n        vec3(0.0, 0.0, 1.0)  // Blue\n    );\n\n    for (int i = 0; i < NUM_BALLS; i++)\n    {\n        float t = iTime * (1.0 + float(i) * 0.2);\n        float angle = t + float(i) * (2.0 * PI / float(NUM_BALLS));\n        float initialRadius = outerRingRadius * 1.89; // Start much further out\n        \n        // Spiral inwards after some time\n        if (t > 10.0) \n        {\n            float fallTime = t - 10.0;\n            float fallProgress = smoothstep(0.0, 5.0, fallTime); // Faster fall, over 5 seconds\n            initialRadius = mix(initialRadius, bhRadius * 0.5, pow(fallProgress, 0.5)); // Non-linear fall\n        }\n        \n        float x = cos(angle) * initialRadius;\n        float y = sin(angle) * initialRadius;\n\n        vec2 ballPos = vec2(x, y);\n        float ballRadius = 0.05;\n        \n        float d = length(uv - ballPos);\n        \n        if (d < ballRadius && initialRadius > bhRadius)\n        {\n            vec3 ballColor = ballColors[i % NUM_BALLS]; // Pick color from array\n            \n            // Simple shading\n            vec3 normal = normalize(vec3(uv - ballPos, sqrt(ballRadius * ballRadius - d * d)));\n            vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n            float diff = max(dot(normal, lightDir), 0.2);\n            \n            ballColor *= diff;\n            \n            // Mix ball color\n            col = mix(col, ballColor, smoothstep(ballRadius, ballRadius - 0.01, d));\n        }\n    }\n    \n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}