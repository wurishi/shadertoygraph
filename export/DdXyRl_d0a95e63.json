{"ver":"0.1","info":{"id":"DdXyRl","date":"1694171158","viewed":122,"name":"dive into the portal","username":"shader_daily","description":"Tunnel Effect","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["noise","tunnel","fbm","endless","falling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 _st) {\n        return fract(sin(dot(_st.xy,\n                             vec2(12.9898,78.233)))*\n            43758.5453123);\n    }\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.65;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n    \n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 vUv = fragCoord/iResolution.xy;\n    vec2 uResolution = iResolution.xy;\n    uResolution.y *= 1.5;\n    vec2 vUv = fragCoord/uResolution.xy;\n    vec3 color = vec3(0.);\n        \n    vec2 uv2 = vUv;\n    uv2 -= .5;\n    uv2.y += 0.125;\n    \n    float an = -iTime * 0.15;\n    uv2 = mat2(cos(an),-sin(an),sin(an),cos(an)) * uv2;\n    // uv3 = mat2(cos(an),-sin(an),sin(an),cos(an)) * uv3;\n    float r1 = length(uv2) ;\n    r1 = abs(r1);\n    float a = atan(uv2.y, uv2.x);\n    a = abs(a);\n    uv2 = vec2(0.3/r1 + .95 * iTime , a);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( uv2 + 0.00*iTime);\n    q.y = fbm( uv2 + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( uv2 + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime );\n    r.y = fbm( uv2 + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime);\n\n    float f = fbm(uv2+r * fbm(uv2 + r * 2.));\n\n    vec3 c = vec3(0.);\n    c = mix(vec3(0.101961,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    c = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    c = mix(color,\n                vec3(0.666667,1,1),\n            clamp(length(r.x),0.0,1.0));\n\n    c *= f*f*f+.6*f *f + .25 *f * c* f * c;\n\n\n    color += c;\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}