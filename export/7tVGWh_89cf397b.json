{"ver":"0.1","info":{"id":"7tVGWh","date":"1637633252","viewed":223,"name":"Persian carpet 27","username":"jarble","description":"These carpets have many braided knot patterns.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fractal","carpet","rug"],"hasliked":0,"parentid":"7tyGRh","parentname":"Persian carpet 25"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//change this constant to get different patterns!\n#define c2 0.\n\n#define c1 vec4(3.0+c2,2.5+c2,1.5,0)\n\nfloat p1 = 0.;\n//----------------------------------------------------------------------------------------\n// based on David Hoskins' \"Hash without Sine\"\nfloat random()\n{\n    float p = fract(p1 * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    p1 += 1.+floor(iTime/2.);\n    return fract(p);\n}\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col;  \n    float t1 = 6.;\n\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    \n    float offset = .5;\n    float scale2 = 1.5;\n    for(int c=0;c<3;c++){\n        float bend = 1.;\n        float scale = c1.z;\n        for(int i=0;i<3;i++)\n        {\n            \n            for(int k = 0; k < 9; k++){       \n                uv /= -scale2;\n                vec2 s1 = triangle_wave(uv.yx-offset,scale)*bend;\n                vec2 s2 = triangle_wave(uv+offset/scale2,scale)/bend;\n                uv = s1+s2;\n                //uv += fract(uv/1.5)/8.; //this makes a more interesting pattern\n\n                //bend = 1.+(uv.x)/3.;\n            }\n            scale /= 1.+(scale2)*col.x/(8.);\n            scale2 -= (col.x-1.)/4.;\n            col[c] = abs(col[c] - ((uv.x)-(uv.y)));\n            //col[c] = abs(col[c] + ((uv.x)+(uv.y)))/4.;\n\n        }\n\t}\n    fragColor = vec4(vec3(col),1.0);\n}\n","name":"Image","description":"","type":"image"}]}