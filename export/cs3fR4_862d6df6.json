{"ver":"0.1","info":{"id":"cs3fR4","date":"1696899355","viewed":78,"name":"tetrahedral-octahedral prism dda","username":"jt","description":"Combine tetrahedral-octahedral honeycomb with triangular prismatic honeycomb\nboth computed using 4d hypervoxel DDAs so the result would be a 8d hypervoxel DDA.\nHowever two dimensions (fourth tet-oct & prism height) are aligned so only 7 dimensions remain.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","raycasting","voxel","prism","tetrahedron","4d","honeycomb","dda","octahedron","cut","tesselation","project","triangular","hexakis","lift","7d"],"hasliked":0,"parentid":"Dt2czD","parentname":"tetrahedral-octahedral honeycomb"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/cs3fR4 tetrahedral-octahedral prism dda, 2023 by jt\n// combines https://www.shadertoy.com/view/Dt2czD tetrahedral-octahedral honeycomb dda\n// with https://www.shadertoy.com/view/mllcD2 Triangle Prisms via Hyper-Voxels\n\n// DDA originally inspired by https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// and tutorial http://lodev.org/cgtutor/raycasting.html\n// distance & normal reconstruction, grid transform and lift to hypervoxels by jt\n\n// Combine tetrahedral-octahedral honeycomb with triangular prismatic honeycomb\n// both computed using 4d hypervoxel DDAs so the result would be a 8d hypervoxel DDA.\n// However two dimensions (fourth tet-oct & prism height) are aligned so only 7 dimensions remain.\n// https://en.wikipedia.org/wiki/Tetrahedral-octahedral_honeycomb\n// https://en.wikipedia.org/wiki/Triangular_prismatic_honeycomb\n\n// tags: 3d, raytracing, raycasting, voxel, prism, tetrahedron, 4d, honeycomb, dda, octahedron, cut, tesselation, project, triangular, hexakis, lift, 7d\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n// NOTE: Unfortunately more dimensions require more iterations.\n#define MAX_RAY_STEPS 128\n\nfloat torus(vec3 p, vec2 t)\n{\n    return length(vec2(length(p.xy) - t.x, p.z)) - t.y;\n}\n\nbool example()\n{\n    return false;//fract(iTime / 10.0) < 0.5;\n}\n\n// Is there a shorter way to implement strictly POSITIVE integer-modulo?\nint mod_positive(int a, int b)\n{\n    // TODO: codegolf this line\n    return (a > 0 && b < 0) ? (a - 1) % b + b + 1 : (a < 0 && b > 0) ? (a + 1) % b + b - 1 : a % b;\n}\n\nivec3 div_floor(ivec3 a, ivec3 b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nivec4 div_floor(ivec4 a, ivec4 b) // vector version thanks to Fabrice\n{\n    ivec4  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nivec3 mod_positive(ivec3 a, ivec3 b)\n{\n    return a - div_floor(a, b) * b;\n}\n\nivec4 mod_positive(ivec4 a, ivec4 b)\n{\n    return a - div_floor(a, b) * b;\n}\n\n// Emulate 7d vector. Would be so much easier if GLSL supported vec7...\n\nstruct VEC7\n{\n    vec4 tetoct;\n    vec3 tri;\n};\n\nstruct BVEC7\n{\n    bvec4 tetoct;\n    bvec3 tri;\n};\n\nstruct IVEC7\n{\n    ivec4 tetoct;\n    ivec3 tri;\n};\n\nVEC7 RECIPROCAL(VEC7 v)\n{\n    return VEC7(1.0 / v.tetoct, 1.0 / v.tri);\n}\n\nVEC7 SCALAR_TO_VEC7(float s)\n{\n    return VEC7(vec4(s), vec3(s));\n}\n\nIVEC7 SCALAR_TO_IVEC7(int s)\n{\n    return IVEC7(ivec4(s), ivec3(s));\n}\n\nVEC7 TO_FLOAT(BVEC7 v)\n{\n    return VEC7(vec4(v.tetoct), vec3(v.tri));\n}\n\nVEC7 TO_FLOAT(IVEC7 v)\n{\n    return VEC7(vec4(v.tetoct), vec3(v.tri));\n}\n\nIVEC7 TO_INT(BVEC7 v)\n{\n    return IVEC7(ivec4(v.tetoct), ivec3(v.tri));\n}\n\nIVEC7 TO_INT(VEC7 v)\n{\n    return IVEC7(ivec4(v.tetoct), ivec3(v.tri));\n}\n\nVEC7 ABS(VEC7 v)\n{\n    return VEC7(abs(v.tetoct), abs(v.tri));\n}\n\nVEC7 SIGN(VEC7 v)\n{\n    return VEC7(sign(v.tetoct), sign(v.tri));\n}\n\nVEC7 NEG(VEC7 v)\n{\n    return VEC7(-v.tetoct, -v.tri);\n}\n\nIVEC7 NEG(IVEC7 v)\n{\n    return IVEC7(-v.tetoct, -v.tri);\n}\n\nVEC7 FLOOR(VEC7 v)\n{\n    return VEC7(floor(v.tetoct), floor(v.tri));\n}\n\nVEC7 SCALE(VEC7 v, float s)\n{\n    return VEC7(v.tetoct * s, v.tri * s);\n}\n\nVEC7 ADD_HALF(VEC7 v)\n{\n    return VEC7(v.tetoct + 0.5, v.tri + 0.5);\n}\n\nVEC7 ADD(VEC7 v, VEC7 w)\n{\n    return VEC7(v.tetoct + w.tetoct, v.tri + w.tri);\n}\n\nIVEC7 ADD(IVEC7 v, IVEC7 w)\n{\n    return IVEC7(v.tetoct + w.tetoct, v.tri + w.tri);\n}\n\nVEC7 SUB(VEC7 v, VEC7 w)\n{\n    return VEC7(v.tetoct - w.tetoct, v.tri - w.tri);\n}\n\nVEC7 MUL(VEC7 v, VEC7 w)\n{\n    return VEC7(v.tetoct * w.tetoct, v.tri * w.tri);\n}\n\nIVEC7 MUL(IVEC7 v, IVEC7 w)\n{\n    return IVEC7(v.tetoct * w.tetoct, v.tri * w.tri);\n}\n\nVEC7 DIV(VEC7 v, VEC7 w)\n{\n    return VEC7(v.tetoct / w.tetoct, v.tri / w.tri);\n}\n\nIVEC7 DIV(IVEC7 v, IVEC7 w)\n{\n    return IVEC7(v.tetoct / w.tetoct, v.tri / w.tri);\n}\n\nfloat DOT(VEC7 v, VEC7 w)\n{\n    return dot(v.tetoct, w.tetoct) + dot(v.tri, w.tri);\n}\n\nfloat LENGTH(VEC7 v)\n{\n    return sqrt(DOT(v, v));\n}\n\nVEC7 MIN(VEC7 v, VEC7 w)\n{\n    return VEC7(min(v.tetoct, w.tetoct), min(v.tri, w.tri));\n}\n\nVEC7 MAX(VEC7 v, VEC7 w)\n{\n    return VEC7(max(v.tetoct, w.tetoct), max(v.tri, w.tri));\n}\n\nBVEC7 LTE(VEC7 v, VEC7 w)\n{\n    return BVEC7(lessThanEqual(v.tetoct, w.tetoct), lessThanEqual(v.tri, w.tri));\n}\n\nBVEC7 GTE(VEC7 v, VEC7 w)\n{\n    return BVEC7(greaterThanEqual(v.tetoct, w.tetoct), greaterThanEqual(v.tri, w.tri));\n}\n\n// sets bit to true if corresponding component is the minimum (multiples possible)\nBVEC7 LEAST(VEC7 v)\n{\n    float minimum = min(min(min(v.tetoct.x, v.tetoct.y), min(v.tetoct.z, v.tetoct.w)), min(min(v.tri.x, v.tri.y), v.tri.z));\n    //float minimum = min(min(v.tetoct.x, v.tetoct.y), min(v.tetoct.z, v.tetoct.w)); // XXX\n    return LTE(v, SCALAR_TO_VEC7(minimum));\n}\n\nvec3 apply_project(mat3x4 TetOct, mat2x3 Tri, VEC7 v)\n{\n    return transpose(TetOct) * v.tetoct + vec3(transpose(Tri) * v.tri, 0.0);\n}\n\nvec4 tetrahedral_octahedral_prism_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (additional fourth dimension to step along prism height) by jt\n{\n    // No need to implement mat3x7, it can be decomposed in mat3x4 and mat 2x3 here.\n    // Note that both these matrices are implicitly rotation matrices\n    // (i.e. the missing vector can be completed accordingly\n    //  and is just omitted because the corresponding coordinate\n    //  would be zero anyway due to constraint on the subspace)\n    // which allows to use transpose instead of inverse.\n    // To align the tetrahedral-octahedral grid with the prism grid\n    // the matrix is combined with another rotation\n    // (similar to the prism matrix), kept separate for readability.\n    // Note that alignment of the fourth dimension of both\n    // (tetrahedral-octahedral grid with prism grid height)\n    // results in ambiguities (similar to z-fighting),\n    // so removed prism height (neatly making scaling obsolete).\n    // 2023, jt\n\n    // coordinate-system along space orthogonal to diagonal (1,1,1,1) VARIANT (rotated 45 degrees around z axis) for center view\n    mat3x4 TetOct =\n        mat3x4\n        (\n            normalize(vec4(+1.0,-1.0,-1.0,+1.0)),\n            normalize(vec4(-1.0,-1.0,+1.0,+1.0)),\n            normalize(vec4(-1.0,+1.0,-1.0,+1.0))\n        );\n\n    // align view: coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 R =\n        mat3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1,+2)),\n            normalize(vec3(-1,-1,-1))\n        );\n\n    TetOct = TetOct*R;\n\n    // NOTE: The lifted fourth coordinate of the tetrahedral-octahedral honeycomb\n    //       is aligned with the prism height\n    //       which would cause problems similar to z-fighting\n    //       (ray hits plane associated with tetoct.w or prism.w randomly)\n    //       which can be solved by simply dropping the prism height\n    //       and using the fourth tetrahedral-octahedral coordinate instead.\n\n    // coordinate-system along plane orthogonal to diagonal (1,1,1) with additional prism height\n    mat2x3 Tri =\n        mat2x3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1, 2))\n        );\n\n    VEC7 ray_pos = VEC7(TetOct * ray_pos_orig, Tri * ray_pos_orig.xy);\n    VEC7 ray_dir = VEC7(TetOct * ray_dir_orig, Tri * ray_dir_orig.xy);\n\n    // dda initialization (four lines) adapted from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    IVEC7 tile_pos = TO_INT(FLOOR(ray_pos)); // round down position to get tile position\n    VEC7 delta_dist = RECIPROCAL(ABS(ray_dir)); // reciprocal absolute ray direction\n    IVEC7 ray_step = TO_INT(SIGN(ray_dir)); // sign of ray direction\n    VEC7 side_dist = MUL(ADD_HALF(MUL(TO_FLOAT(ray_step), ADD_HALF(SUB(TO_FLOAT(tile_pos), ray_pos)))), delta_dist); // initial distances to nearest walls by dimension\n\n    for(int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // dda core (three lines) adapted from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        BVEC7 nearest = LEAST(side_dist); // component is true if nearest wall in that dimension\n        side_dist = ADD(side_dist, MUL(TO_FLOAT(nearest), delta_dist)); // update distances to nearest walls by dimension\n        tile_pos = ADD(tile_pos, MUL(TO_INT(nearest), ray_step)); // step to next tile in direction of nearest wall\n\n        vec3 projected = apply_project(TetOct, Tri, TO_FLOAT(tile_pos));\n\n        //float d = length(vec4(nearest.tetoct) * (side_dist.tetoct - delta_dist.tetoct)); // assume ray_dir normalized\n        float d = LENGTH(MUL(TO_FLOAT(nearest), SUB(side_dist, delta_dist)));\n\n        bool solid = false;\n        if(all(lessThanEqual(mod_positive((fract(iTime/6.0)<0.5?0:2)-tile_pos.tetoct.xyz, ivec3(8)),ivec3(2)))) solid = true;\n        if(tile_pos.tetoct.w < 0) solid = false;\n        if(tile_pos.tetoct.w > 2) solid = true;\n        \n        if(tile_pos.tetoct.w > -1)\n            if(all(lessThanEqual(mod_positive(-tile_pos.tri.xyz+4, ivec3(8)),ivec3(2)))) solid = true;\n\n        //if(any(greaterThan(abs(tile_pos.tetoct.xyz), ivec3(10))) || tile_pos.tetoct.w > 3) solid = false;\n        if(any(greaterThan(abs(tile_pos.tri.xyz), ivec3(11))) || tile_pos.tetoct.w > 3) solid = false;\n\n        //if(mod_positive(tile_pos.tetoct.x+tile_pos.tetoct.y+tile_pos.tetoct.z+tile_pos.tetoct.w,2)==1) solid = false;\n        float flip = mod_positive(tile_pos.tetoct.x+tile_pos.tetoct.y+tile_pos.tetoct.z+tile_pos.tetoct.w,2)==1 ? 1.0 : -1.0;\n        //float flip = mod_positive(tile_pos.tetoct.x+tile_pos.tetoct.y+tile_pos.tetoct.z+tile_pos.tetoct.w+tile_pos.prism.x+tile_pos.prism.y+tile_pos.prism.z+tile_pos.prism.w,2)==1 ? 1.0 : -1.0;\n\n        // XXX considering projection something is not correct - perhaps missing scaling factor between grids? XXX\n        //if(length(projected*vec3(1,1,2) + vec3(24.0*vec2(cos(iTime/2.0), sin(iTime/2.0)),-7)) < 5.0) solid = true;\n        //if(torus(projected*vec3(1,1,2) + vec3(24.0*vec2(cos(iTime/2.0), sin(iTime/2.0)),-7)), vec2(5.0, 3.0))) < 0.0) solid = true;\n        //if(torus(projected*vec3(1,1,sqrt(2.0)) + vec3(24.0*vec2(cos(iTime/2.0), sin(iTime/2.0)),-7), vec2(7,3)) < 0.0) solid = true;\n\n        if(solid)\n        {\n            // encode tetrahedron/octahedron in distance\n            // Calculate the normal-vector directly from the nearest-mask\n            return\n                vec4\n                (\n                    normalize(apply_project(TetOct, Tri, MUL(TO_FLOAT(nearest), TO_FLOAT(NEG(ray_step))))),\n                    d*flip\n                );\n        }\n    }\n\n    return vec4(-ray_dir_orig, DIST_MAX); // sky-sphere\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    //float pitch = -pi*1.0 - 0.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -20.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    //ray_dir = normalize(ray_dir); // looks like ray-direction does not need to be normalized\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    ray_pos.z += 0.5;\n\n    vec4 result = tetrahedral_octahedral_prism_trace(ray_pos, ray_dir);\n    bool code = result.w >= 0.0; // decode type (tetrahedron/octahedron)\n    result.w = abs(result.w);\n    result.xyz *= dot(result.xyz, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n\n    vec3 color = vec3(0);\n    if(result.w < DIST_MAX)\n    {\n        vec3 n = result.xyz;\n        float d = result.w;\n        vec3 dst = ray_pos + ray_dir * d;\n        d *= length(ray_dir); // fix distance in case ray was not normalized\n\n        //vec3 light_dir = normalize(vec3(1,2,3));\n        vec3 light_dir = normalize(vec3(cos(iTime/5.0),sin(iTime/5.0),1));\n        float diffuse = max(0.0, dot(light_dir, n));\n        //float diffuse = abs(dot(light_dir, n));\n        float shadow = diffuse > 0.0 ? tetrahedral_octahedral_prism_trace(dst+result.xyz*0.001, light_dir).w < DIST_MAX ? 0.0 : 1.0 : 0.0;\n        float ambient = 0.5;\n        float specular = max(0.0, dot(result.xyz, normalize(-normalize(ray_dir) + light_dir)));\n        //color = vec3(1);\n        color = code ? vec3(1,0.35,0.1) : vec3(0.1,0.3,1); // color by cell-type: octahedra blue, tetrahedra orange.\n        if(iMouse.z > 0.0) color = vec3(0.5 + 0.5 * result.xyz); // debug normals\n        //color *= mix(vec3(0.5), vec3(1.0), checker(dst*2.0)); // texture\n        color *= shadow * diffuse + ambient;\n        color += shadow * 1.0 * pow(specular, 50.0);\n\n        vec3 fogcolor = vec3(0); // fog\n        color *= mix(fogcolor, color, exp(-d * d / 1000.0)); // fog for depth impression & to suppress flickering\n    }\n    else\n    {\n        color = vec3(0,0,0);\n    }\n\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n}\n","name":"Image","description":"","type":"image"}]}