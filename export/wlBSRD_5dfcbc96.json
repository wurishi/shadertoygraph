{"ver":"0.1","info":{"id":"wlBSRD","date":"1569272315","viewed":107,"name":"W Tile","username":"TLC123","description":"procedural texture","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texturesynth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  1 out, 2 in...\nfloat hash12(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n\tp3 += dot(p3, p3.yzx + 33.33);\n\treturn fract((p3.x + p3.y) * p3.z);\n}\n///  2 out, 2 in...\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n\treturn fract((p3.xx + p3.yz) * p3.zy);\n\n}\n\nvec3 pal( in float t) {\n\tvec3 pa = vec3(0.5, 0.5, 0.5);\n\tvec3 pb = vec3(0.5, 0.5, 0.5);\n\tvec3 pc = vec3(1.0, 1.0, 1.0);\n\tvec3 pd = vec3(0.3, 0.20, 0.20);\n\treturn pa + pb * cos(6.28318 * (pc * t + pd));\n}\n\nvec3 getTileData(vec2 uv) {\n\tvec2 cornerUV = floor(uv);\n\tfloat id = (hash12(cornerUV));\n\tvec2 tileCore = 0.5 + ((hash22(cornerUV)) - 0.5) * 0.95;\n\treturn vec3(tileCore, id);\n}\n\nbool insideBox(vec2 v, vec2 b, vec2 t) {\n\n\treturn\n\tv.x < max(t.x, b.x) && v.x > min(t.x, b.x) &&\n\n\tv.y < max(t.y, b.y) && v.y > min(t.y, b.y)\n\n\t;\n\n}\n\nvec3 tile(vec2 uv) {\n\tvec2 tileUV = uv - floor(uv);\n\n\tvec2 o = vec2(1., 0.);\n\tvec3 res1 = getTileData(uv + o.yy);\n\tvec3 res2 = getTileData(uv + o.xy);\n\tvec3 res3 = getTileData(uv + o.yx);\n\tvec3 res4 = getTileData(uv + o.xx);\n\tfloat id = 0.;\n\n\tif (insideBox(tileUV, vec2(0., res1.y), res3.xy + o.yx)) id = res3.z;\n\tif (insideBox(tileUV, vec2(res3.x, res2.y), res4.xy + o.xx)) id = res4.z;\n\tif (insideBox(tileUV, vec2(res1.x, 0.), res2.xy + o.xy)) id = res2.z;\n\tif (insideBox(tileUV, vec2(0.), res1.xy)) id = res1.z;\n\n\tvec2 cornerUV = floor(uv);\n\tfloat rnd = hash12(cornerUV);\n\tif (rnd < 0.25 && insideBox(tileUV, vec2(res1.x, 0.), res2.xy + o.xy)) id = res2.z;\n\tif (rnd < 0.50 && insideBox(tileUV, vec2(res3.x, res2.y), res4.xy + o.xx)) id = res4.z;\n\tif (rnd < 0.75 && insideBox(tileUV, vec2(0., res1.y), res3.xy + o.yx)) id = res3.z;\n\n\t//if (length((res1.xy) - tileUV) < 0.05) id = .5;\n\n\treturn pal(id);\n}\n\nvec3 difftile(vec2 uv) {\n\nreturn tile(  uv).yxy-tile(  uv+.05).zyz;\n\n}\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a) * p + sin(a) * vec2(p.y, -p.x);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv = fragCoord / iResolution.x - 0.5;\n\tpR(uv, iTime);\n\t// Time varying pixel color\n\tuv = uv * (cos(iTime) + 1.2) * 30. + vec2(sin(iTime * .6), cos(iTime * .6)) * 17.;\n\tvec3 col = difftile(uv) * 0.2 + 0.5;\n\t// Output to screen\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}