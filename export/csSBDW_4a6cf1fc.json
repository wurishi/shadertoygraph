{"ver":"0.1","info":{"id":"csSBDW","date":"1689694068","viewed":31,"name":"Raymarching â€” simple sphere","username":"rozanski","description":"A simple sphere rendered using raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereSDF(in vec3 p, float radius) {\n    return sqrt(pow(p.x, 2.0) + pow(p.y, 2.0) + pow(p.z, 2.0)) - radius;\n}\n\nfloat raymarch(in vec3 ro, in vec3 rd) {\n    float distanceTravelled = 0.0;\n    \n    for (int i = 0; i < 256; ++i) {\n        vec3 p = ro + distanceTravelled * rd;\n        float distance = sphereSDF(p, 1.0);\n        \n        if (distance < 0.001) {\n            return 1.0;\n        }\n        \n        if (distanceTravelled > 100.0) {\n            break;\n        }\n        \n        distanceTravelled += distance;\n    }\n    \n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (gl_FragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0,0.0,-5.0);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    \n    vec3 color = vec3(0.0);\n    \n    color = vec3(raymarch(ro, rd));\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}