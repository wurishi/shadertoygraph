{"ver":"0.1","info":{"id":"Nt2XDW","date":"1627692962","viewed":54,"name":"color bouncyball","username":"qguv","description":"simple geometric fragment shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n#define BALL_SIZE .4\n#define BALL_TAPER .09\n#define BALL_LAG 0.1\n\nfloat tri(in float x) {\n    float A = 2.;\n    float P = PI;\n    return (A / P) * (P - abs(mod(x, (2. * P)) - P)) - 1.;\n}\n\nfloat vecmin(in vec2 xy) {\n    return min(xy.x, xy.y);\n}\n\nvec2 pos(in float time) {\n    return vec2(\n        (tri(time) * (1. - BALL_SIZE / 2.)) * (iResolution.x / vecmin(iResolution.xy)),\n        .6 * abs(sin(3. * time)) - .6\n    );\n}\n\nbool ball(in vec2 xy, in int seq) {\n    return length(xy - pos(iTime - BALL_LAG * float(seq))) < BALL_SIZE - BALL_TAPER * float(seq);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 R = iResolution.xy;\n    vec2 p = (2. * fragCoord - R) / vecmin(R);\n\n    fragColor = vec4(\n        float(ball(p, 2)),\n        float(ball(p, 1)),\n        float(ball(p, 0)),\n        1.\n    );\n}","name":"Image","description":"","type":"image"}]}