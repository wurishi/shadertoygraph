{"ver":"0.1","info":{"id":"432czK","date":"1727469294","viewed":54,"name":"Sphere Fibonacci Voronoi","username":"weasel","description":"This is a voronoi texture that works seamlessly on a sphere using a spherical distance metric.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 weasel\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// sphere rendering from https://www.shadertoy.com/view/7tS3Wh\n\n#define PI 3.141592654\n#define GOLDEN_ANGLE 2.399963230\n\nfloat points() {\n    return min(iTime*iTime * 3.0, 2000.0);\n}\n\nfloat sphere_distance(vec3 a, vec3 b) {\n    // a, b are assumed to be normalized\n    \n    // correct metric:\n    //return acos(min(dot(a, b), 1.0));\n    \n    // simpler metric, that also works:\n    //float l = length(cross(a, b));\n    //return dot(a, b) > 0.0 ? l : 2.0 - l;\n    \n    // even simpler metric that also works:\n    return sqrt(max(0.0, 2.0 - 2.0*dot(a, b)));\n}\n\n// hash constants from https://www.shadertoy.com/view/Xd23Dh\nvec3 hash3(float p) {\n\treturn asin(fract(sin(p*vec3(127.1, 269.5, 419.2))*43758.5453)*2.0 - 1.0);\n}\n\nvec3 voronoi_naive(vec3 pos, float n) {\n    // use the even Fibonacci spiral pattern on the sphere.\n    // NAIVE VERSION: iterate through all points!\n    float closest = 7.0;\n    vec3 closest_pos = vec3(0.0);\n    for (float i = 0.0; i < n; i++) {\n        float phi = GOLDEN_ANGLE * i;\n        float z = 2.0 * (i + 0.5) / n - 1.0;\n        float r = sqrt(1.0 - z*z);\n        vec3 point = vec3(cos(phi)*r, sin(phi)*r, z);\n        float d = sphere_distance(point, pos);\n        if (d < closest) {\n            closest = d;\n            closest_pos = point;\n        }\n    }\n    return closest_pos;\n}\n\nvec3 voronoi(vec3 pos, float n, float shift) {\n    float point_radius = 0.7 / sqrt(n);\n    // use the even Fibonacci spiral pattern on the sphere.\n    // good version: compute which points are the closest analytically.\n    // for that, find the simplest local lattice matrix,\n    // then the transformation, that comes from this search to find the closest point indices.\n    // To do that, use (phi, z) spherical coordinates\n    \n    // 1. find the lattice matrix\n    // locally the lattice matrix is always given by the golden angle and point count\n    // NOTE: the 5.0/n is matching the -2 to 2 search grid at the bottom!\n    mat2 mat = mat2(GOLDEN_ANGLE, 1.0/n, (GOLDEN_ANGLE*5.0) - PI*2.0, 5.0/n);\n    // orthogonalize mat like in https://www.shadertoy.com/view/stfGWB\n    // but consider the spherical metric to get good results.\n    // ds^2 = (dphi*sqrt(1-z*z))^2 + (dz/sqrt(1-z*z))^2\n    // -> same metric as (dphi*(1-z*z))^2 + (dz)^2\n    vec2 scale = vec2(1.0 - pos.z*pos.z, 1.0);\n    mat2 mat_ortho;\n    mat2 inv;\n    if (scale.x > point_radius) { // wrong condition... however it seems to work anyways...\n        vec2 real1 = mat[1]-round(dot(mat[1], scale * mat[0])/dot(mat[0], scale * mat[0]))*mat[0];\n        vec2 real0 = mat[0]-round(dot(mat[0], scale * real1)/dot(real1, scale * real1))*real1;\n        real1 = real1-round(dot(real1, scale * real0)/dot(real0, scale * real0))*real0;\n        real0 = real0-round(dot(real0, scale * real1)/dot(real1, scale * real1))*real1;\n        mat_ortho = mat2(real0, real1);\n        inv = inverse(mat_ortho);\n    }\n    else {\n        mat_ortho = mat;\n        inv = inverse(mat);\n    }\n    \n    // find a first guess for the closest point\n    vec2 phi_z = vec2(2.0*atan(pos.y / (pos.x + length(pos.xy))), pos.z + shift);\n    vec2 x = round(inv * phi_z);\n    \n    // now look at the neighborhood here\n    float closest = 7.0;\n    vec3 closest_pos = vec3(0.0);\n    for (float i = -2.0; i <= 2.0; i++) {\n        for (float j = -2.0; j <= 2.0; j++) {\n            vec2 phi_z = mat_ortho * (x + vec2(i, j));\n            vec3 offset = hash3(round(phi_z.y*n)) * point_radius;\n            phi_z.y -= shift;\n            float r_sqr = 1.0 - phi_z.y*phi_z.y;\n            if (r_sqr > 0.0) {\n                float r = sqrt(r_sqr);\n                vec3 point = normalize(vec3(cos(phi_z.x)*r, sin(phi_z.x)*r, phi_z.y) + offset);\n                float d = sphere_distance(point, pos);\n                if (d < closest) {\n                    closest = d;\n                    closest_pos = point;\n                }\n            }\n        }\n    }\n    return closest_pos;\n}\n\n\n// complex exponential\nvec2 cexp(vec2 c) {\n    return exp(c.x)*vec2(cos(c.y), sin(c.y));\n}\n\n// complex multiplication\nvec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\nvec3 rotateX(vec3 pos, float angle) {\n    return vec3(pos.x, cmul(pos.yz, cexp(vec2(0.,-angle))));\n}\n\nvec3 rotate(vec3 pos, float phi, float theta) {\n    return rotateX(rotateX(pos, theta).yzx, phi).zxy;\n}\nvec3 sphere(vec2 uv, float phi, float theta) {\n    if (length(uv) < 1.0) {\n        float aa = clamp((1.0 - length(uv))/fwidth(length(uv))*0.5, 0.0, 1.0);\n        vec3 pos = vec3(uv, sqrt(1.0-dot(uv,uv)));\n        float z = pos.z;\n        \n        // rotate sphere\n        pos = rotate(pos, phi, theta);\n        \n        // get spherical coordinates\n        float sin_theta = length(pos.xz);\n        float ball_phi = sin_theta > 0.0 ? atan(pos.x, pos.z) : 0.0;\n        float ball_theta = atan(sin_theta, pos.y);\n        \n        // evaluate voronoi\n        vec3 center = voronoi(pos, points(), max(iTime - 26.0, 0.0)*0.3);\n        vec3 diff = center - pos;\n        diff = diff/fwidth(pos);\n        //float d = sphere_distance(center, pos) * sqrt(points());\n        float d = length(diff);\n        \n        // return the distance to the voronoi cell center\n        return aa * clamp(vec3(1.0 - d*0.3), 0.0, 1.0);\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/min(iResolution.x, iResolution.y) * 2.0;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(sphere(uv, m.x * 10.0, m.y * 5.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}