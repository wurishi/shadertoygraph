{"ver":"0.1","info":{"id":"wsdXWS","date":"1572811035","viewed":187,"name":"ShaderTober - Ripe","username":"Flopine","description":"THE LAST ONE doodle with inktober's theme \"Ripe\" :) ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","cogs","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define ITER 100.\n#define PI 3.141592\n#define dt (iTime*0.7)\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(vec2(45.1,48.14), x))*1245.4);}\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nfloat stmin(float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5*(u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = (2.*PI)/rep;\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*l;\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r, abs(p.z)-h);}\n\nfloat cog (vec3 p, float width)\n{\n    float c = cyl(p, width, 0.3);\n    \n    moda(p.xy, 12.);\n    p.x -= width;\n    \n    return min(c, box(p,vec3(width/6.,width/6.,0.3)));\n}\n\n#define anim ((PI/6.)*(floor(dt)+pow(fract(dt), 8.)))\nfloat g2 = 0.;\nfloat cogs (vec3 p)\n{\n    p.y += 2.;\n    vec3 pp = p;\n    p.xy *= rot(-anim);\n    float c1 = cog(p, 6.);\n    \n    p = pp;\n\tfloat px = sign(p.x);\n    p.x = abs(p.x);\n    p.xy -= 9.5;\n    p.xy *= rot(PI/12.);\n    p.xy *= rot(anim*px);\n    float c2 = max(-cyl(p,4.5,10.),cog(p, 6.));\n\n    p = pp;\n    float c3 = cyl(p, 3.4,1.);\n    \n    p.x = abs(p.x);\n    float diag = dot(p,vec3(0.5,0.5,0.));\n\tfloat plane = diag-12.+texNoise(p.xz*0.01+iTime*0.1).r*10.;\n    \n    float d = max(plane,max(-c3,min(c1,c2)));\n    g2 += 0.1/(0.1+d*d);\n    return d;\n}\n\nfloat g1 = 0.;\nfloat gem (vec3 p)\n{\n    p.y += 2.;\n    p.xz *= rot(anim*3.);\n    float d = dot(p, normalize(sign(p)))-1.9;\n    g1 += 0.1/(0.1+d*d);\n    return d;\n}\n\nfloat room (vec3 p)\n{\n    float per = 6.;\n    float b = -box(p, vec3(40.,15.,25.));\n    \n    p.z = mod(p.z, per)-per*0.5;\n    p.x = abs(p.x) - 30.;\n    \n    return stmin(b,box(p,vec3(1.,20.,.8)),2.,3.);\n}\n\nfloat SDF (vec3 p)\n{\n    return min(min(gem(p),cogs(p)),room(p));\n}\n\nvec3 getcam (vec3 ro, vec3 ta, vec2 uv, float fov)\n{\n    vec3 f = normalize(ta - ro);\n    vec3 l = normalize(cross(vec3(0.,1.,0.),f));\n    vec3 u = normalize(cross(f,l));\n   \treturn normalize(f*fov + l*uv.x + u*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy) / iResolution.y;\n    \n    float dither = hash21(uv);\n    \n    vec3 ro = vec3(0.01,-4.,-12.),\n        p = ro,\n        ta = vec3(0.),\n        rd = getcam(ro,ta,uv,0.9),\n        col = vec3(0.);\n\n    float shad = 0.;\n    \n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {\n            shad = i/ITER;\n            break;\n        }\n        d *= 0.6+dither*0.1;\n        p += d*rd;\n    }\n    \n    col = vec3(1.-shad)*0.4;\n\tcol -= g1*(anim-2.);\n    col += g2 * vec3(0.1,0.55,clamp(length(uv),0.5,1.))*0.1;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}