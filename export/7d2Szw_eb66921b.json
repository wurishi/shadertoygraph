{"ver":"0.1","info":{"id":"7d2Szw","date":"1619943344","viewed":54,"name":"Fog in the ball2","username":"Marina033","description":"2lights, 1 sphere, cube map, texture","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float MARCH_SIZE = 0.1; // very impotant value \nconst int MAX_STEPS = 100;\nfloat ABSORPTION = 1.0;\nfloat ATTENUATION1 = 10.0;\nfloat ATTENUATION2 = 5.0;\n\n\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\nconst int FOGGY = 4;\n\nconst float N_AIR = 1.0;\nconst float N_GLASS = 1.5;\nfloat n1 = N_AIR;\nfloat n2 = N_GLASS;\nconst float GLASS_R = (N_AIR - N_GLASS) * (N_AIR - N_GLASS) / (N_AIR + N_GLASS) / (N_AIR + N_GLASS);\n\nfloat k_air = 1.0;\n\nvec3 FIRE_POS = vec3(0, 0, 1);\nfloat FIRE_RADIUS = 0.5;\nvec3 FIRE_COLOR = vec3(0xe2, 0x58, 0x22) / 255.0;\n\nvec3 SPHERE_POS = vec3(0, 0, 1);\nfloat SPHERE_RADIUS = 1.0;\nvec3 SPHERE_COLOR = vec3(0.0, 0.5, 0.5);\n\nvec3 CYLINDER_POS = vec3(0, 0, 1.);\nfloat CYLINDER_RADIUS = 1.2;\n//vec3 CYLINDER_COLOR = vec3(0xcd, 0x85, 0x3f) / 255.0;\nvec3 CYLINDER_COLOR = vec3(0, 0, 1);\n\nvec3 LIGHT1_POS = vec3(-2, 0.3, 0.2);\nfloat LIGHT1_RADIUS = 0.2; // TODO this light should not visible\nfloat LIGHT1_RADIUS_INNER = 0.1;\nvec3 LIGHT1_COLOR = vec3(0x30, 0xd5, 0xc8) / 255.0;\n\nvec3 LIGHT2_POS = vec3(2, 0.2, 0.2);\nfloat LIGHT2_RADIUS = 0.3;\nfloat LIGHT2_RADIUS_INNER = 0.2;\nvec3 LIGHT2_COLOR = vec3(0xbf, 0x88, 0xbf) / 255.0;\n\nfloat plane_intersection(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2  - pos.y) / dir.y;\n    if (t <= 0.0) return INF;    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) return INF;        \n    normal = vec3(0, 1, 0);\n    return t;\n}\nfloat sphere_intersection(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float d = b * b - a * c;\n    if (d < 0.0) return INF;\n    float t = -b - sqrt(d);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(d);\n    if (t < 0.0) return INF;\n    normal = normalize(pos + t * dir);\n    return t;\n}\nfloat cylinder_intersection(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) return INF;\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < r * r) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - r * r;\n    float d = b * b - a * c;\n    if (d < 0.0) return INF;\n    t = (-b - sqrt(d)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(d)) / a;\n    if (t < 0.0) return INF;\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\nfloat computeAttenuation(vec3 lightPos, vec3 pos, float attenuation) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distsq1 = dot(toLight1, toLight1);\n    return attenuation / distsq1; // attenuation\n}\nvec3 computeLight(vec3 pos, vec3 normal, vec3 color) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distsq1 = dot(toLight1, toLight1);\n    float att1 = ATTENUATION1 / distsq1; // attenuation\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distsq2 = dot(toLight2, toLight2);\n    float att2 = ATTENUATION2 / distsq2; // attenuation\n    \n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR + \n            max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR + \n            texture(iChannel1, pos).rgb //ambient\n            \n            );\n    \n}\n\n\nfloat sphereSdf(vec3 pos, vec3 spherePos, float radius) {\n    //float scale = mix(0.5, 1.0, 0.0);\n    //return length((pos - spherePos) * vec3(scale, 1.0, scale)) - radius;\n    return length(pos - spherePos) - radius;\n}\nfloat rand(float frame){\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled) {\n    return exp(-absorptionCoefficient * distanceTraveled); // e^(-kd);\n}\nfloat fogDensity(vec3 pos, float sdf) {\n    float density = texture(iChannel2, pos * 2.0).r;\n    return min(density, -sdf);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float random = rand(float(iFrame));\n    //randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (random - 0.5) * 2.0) / iResolution.x;\n    //anti aliasing\n    \n    vec3 cameraPos = vec3(0.0, 1.2, -6);\n    vec3 front = normalize(-cameraPos);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec= normalize(front + uv.x * right + uv.y * up);\n    vec3 curPos = cameraPos;\n    vec3 curDir = viewVec;\n    \n    \n    \n    \n    \n   \n   \n    \n    for (int i = 0; i < 10; i++) {\n        float t = INF;\n        float tFog = INF;\n        int matType;\n        vec3 color = vec3(1,1,1);// texture(iChannel1, curDir).rgb;\n        //vec3 result = vec3(0.3, 1.0, 0.3); // = color\n        vec3 result = texture(iChannel1, curDir).rgb;\n        vec3 normal;\n        vec3 planeNormal;\n        vec3 l1Normal;\n        vec3 l2Normal;\n        vec3 sphereNormal;\n        vec3 cylNormal;\n        vec3 fireNormal; // does not use\n        vec3 worldPos;\n        vec3 curPosFog = curPos;\n        //vec3 colorMult = vec3(1,1,1);\n        \n        \n        \n        //drawing fog\n        vec3 fogEffect = vec3(0.0);\n        float opacity = 1.0;\n        curPosFog = curPos; \n        for (int i = 0; i < MAX_STEPS; i++) {\n            //if (t < MARCH_SIZE * float(i)) { // чтобы туман пропал при приближении к предметам\n            //    break;\n            //}\n            curPosFog = curPos +  curDir * MARCH_SIZE * float(i);\n            float sdf = sphereSdf(curPosFog, FIRE_POS, FIRE_RADIUS);\n            if (sdf < 0.0) {\n                float prevOpacity = opacity;\n                //float fogDens = fogDensity(curPosFog, sdf);\n                opacity *= BeerLambert(ABSORPTION, MARCH_SIZE);\n                float absorption = prevOpacity - opacity;\n                \n                vec3 fogColor = FIRE_COLOR * texture(iChannel2, curPosFog * 2.0).r;\n                fogEffect += vec3(absorption) * fogColor * vec3(0.1, 0.1, 0.1);\n                //t = MARCH_SIZE * float(i);\n               \n                vec3 toLight1 = LIGHT1_POS - curPosFog;\n                vec3 toLight2 = LIGHT2_POS - curPosFog;\n                float att1 = clamp((LIGHT1_RADIUS - length(toLight1) + LIGHT1_RADIUS_INNER) / (LIGHT1_RADIUS - LIGHT1_RADIUS_INNER), 0.0, 1.0);\n                float att2 = clamp((LIGHT2_RADIUS - length(toLight2) + LIGHT1_RADIUS_INNER) / (LIGHT2_RADIUS - LIGHT2_RADIUS_INNER), 0.0, 1.0);\n                \n                fogEffect += fogColor * absorption;// * att1 * att2;\n                \n            }\n            \n           \n        }\n        //result = mix(fogEffect, result, opacity);\n        \n        \n        \n        \n        \n        \n        \n        \n        float planeT = plane_intersection(curPos, curDir, planeNormal);\n        if (planeT < t) {\n            t = planeT;\n            matType = DIFFUSE;\n            worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz).rgb;\n            normal = planeNormal;\n        }       \n        float light1T = sphere_intersection(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Normal);\n        if (light1T < t) {\n            t = light1T;\n            matType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Normal;\n        }\n        float light2T = sphere_intersection(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Normal);\n        if (light2T < t) {\n            t = light2T;\n            matType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Normal;\n        }\n        float sphereT = sphere_intersection(curPos - SPHERE_POS, curDir, SPHERE_RADIUS, sphereNormal);\n        if (sphereT < t) {\n            t = sphereT;\n            matType = REFRACTION;\n            //if (random < GLASS_R) matType = REFLECTION;\n            //else matType = REFRACTION;\n            color = SPHERE_COLOR;\n            normal = sphereNormal;\n        }\n        float cylT = cylinder_intersection(curPos - CYLINDER_POS, curDir, CYLINDER_RADIUS, cylNormal);\n        if (cylT < t) {\n            t = cylT;\n            matType = DIFFUSE;\n            //matType = REFRACTION;\n            color = CYLINDER_COLOR;\n            normal = cylNormal;\n        }\n        float fireT = sphere_intersection(curPos - FIRE_POS, curDir, FIRE_RADIUS, fireNormal);\n        if (fireT < t) {\n            t = fireT;\n            matType = FOGGY;\n            //colorMult = FIRE_COLOR; \n            //color = FIRE_COLOR;\n            //normal = cylNormal;\n        }\n              \n\n\n        \n        \n        if (t != INF) {\n            worldPos = t * curDir + curPos;            \n            if (matType == EMISSION) {\n                result = color;\n            } \n            else if (matType == DIFFUSE) {\n                result = computeLight(worldPos, normal, color);// * colorMult; \n            } \n            else if (matType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-3;\n            }\n            else if (matType == REFRACTION) {\n                //curDir = refraction(curDir, normal, n1, n2);\n                if (sphereSdf(curPos, SPHERE_POS, SPHERE_RADIUS) >= 0.0) {\n                    curDir = refract(curDir, normal, n1 / n2);\n                } else { \n                    curDir = refract(curDir, -normal, n1 / n2);\n                }\n                curPos = worldPos + curDir * 1e-3;\n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n            }\n            else if (matType == FOGGY) {\n                result = mix(fogEffect, result, opacity);// * colorMult; \n            }\n        }\n        \n        \n        else {\n            result = texture(iChannel1, curDir).rgb;// * colorMult;\n            //result = vec3(0,0,0);\n        }\n       \n        \n       \n      \n        fragColor = vec4(result, 1.0);\n        \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}