{"ver":"0.1","info":{"id":"4XySzK","date":"1720141348","viewed":84,"name":"the seeds of chaos(bugged sdf)","username":"CuleGamer","description":"i did random stuff and fine tuned it to produce this fractal (use mouse to offset camera)","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const uint stepsRaymarch = 128u;\nconst uint stepsSdf = 32u;\nconst float threshold = 0.01;\nfloat sdf(vec3 pos)\n{\n    float val;\n    vec3 vec = pos;\n    for(uint i; i < stepsSdf; i++)\n    {\n        vec = sin(vec) + pos;\n        vec *= mat3(1., 0.1 * pos, 1., -0.1 * pos, 1.);\n    }\n    val = length(vec) - iTime;\n    return val;\n}\nvoid mainImage(out vec4 O, in vec2 I)\n{\n    vec2 uv = (2. * I - iResolution.xy)/iResolution.y;\n    vec2 uvMouse = (2. * iMouse.xy - iResolution.xy)/iResolution.y;\n    vec3 camVec = normalize(vec3(uv, 0.5));\n    vec3 camPos = vec3(16. * uvMouse, -iTime);\n    vec3 ray = camPos;\n    float dist;\n    uint i;\n    for(i; i < stepsRaymarch; i++)\n    {\n        dist = sdf(ray);\n        if(dist < threshold)\n        {\n            break;\n        }\n        ray += camVec * dist;\n    }\n    float fresnel = float(i) / float(stepsRaymarch);\n    vec3 col = vec3(100. * fresnel / distance(ray, camPos));\n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}