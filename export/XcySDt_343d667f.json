{"ver":"0.1","info":{"id":"XcySDt","date":"1715889096","viewed":49,"name":"rect_plotter","username":"aoa","description":"Simple graph for plotting functions y = f(x)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rectangular","plotter","coordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat fx(float x) {\n    //return sin(x);\n    return exp(x);\n    return x;\n    return x*x*x;\n}\n\n/** distance between line x->y and p, using projection */\nfloat distPL(vec2 x, vec2 y, vec2 p)\n{\n    vec2 xp = p - x;\n    vec2 xy = y - x;\n    vec2 proj =  xy * dot(xp,xy) / dot(xy,xy);\n    return length(xp - proj);\n}\n\nfloat distFx(vec2 uv) {\n    const float dx = 0.01;\n    float dist = 100.;\n    for(float i = -3.; i < 3.; ++i) {\n        float x = uv.x + i*dx;\n    vec2 xfx = vec2(x,fx(x));\n    vec2 xfxdx = vec2(x+dx, fx(x+dx));\n    dist = min(dist, distPL(xfx, xfxdx, uv));\n    }\n    return dist;\n}\n\n// returns (id.xy, axes, circles)\nvec4 axes(vec2 uv) {\n    uv += 0.5; // unshift centering\n    vec2 id = floor(uv);\n    float id_dist = pow(abs(id.x) + abs(id.y) + 1.0, 0.4); // decays reasonably\n    \n    uv = fract(uv) - 0.5; // move intersection to center of cell\n    vec2 pos = uv;\n    \n    float dist_grid = 0.0;\n    dist_grid = min(abs(pos.x), abs(pos.y));\n    \n    float dist_circle = length(pos) * id_dist;\n    \n    return vec4(id, dist_grid, dist_circle);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0*(fragCoord- 0.5 * iResolution.xy)/iResolution.y; //[-1,1]\n    vec2 mouse = 2.0*(iMouse.xy - 0.5 *iResolution.xy)/iResolution.y;\n    float scale = 10.;\n    float ax_scale = scale;\n    while(ax_scale > 10.) { ax_scale *= 0.5; }\n    while(ax_scale < 3.) { ax_scale *= 2.0; }\n    uv -= mouse; // fixme: shift by keyboard\n    //uv.x = exp(uv.x);  // exp plot\n    //uv.x = log2(uv.x); // log plot\n    //uv.y = exp(uv.y);  // exp plot\n    //uv.y = log2(uv.y); // log plot\n\n    vec3 color = vec3(0.0);\n    \n    vec4 ax = axes(uv * ax_scale);\n    vec2 id = ax.xy;\n    float axs = ax.z;\n    float dots = ax.w;\n    color += smoothstep(0.01, 0.00, axs - 0.005 * ax_scale) * vec3(0.0,1.0,1.0);\n    color += smoothstep(0.01, 0.000, dots - 0.04 * ax_scale) * vec3(1.0,0.0,0.0);\n      \n    float f = distFx(uv * scale);\n    color += smoothstep(0.01, 0.00, f - 0.005 * scale);\n    color += smoothstep(0.01, 0.00, f - 0.005 * scale);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}