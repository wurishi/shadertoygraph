{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Created by Eduardo Castineyra - casty/2015\n// Creative Commons Attribution 4.0 International License\n\nvec2 texel;\nvec3 pixel;\n\n#define MAXSIZE 256\n\nconst vec4 v1 = vec4(1.0);\n\nconst float fMax = float(MAXSIZE);\nconst mat4 mMax = mat4(vec4(fMax), vec4(fMax), vec4(fMax),  vec4(fMax));\n\nfloat MM = 1.0;\n\nint accum[16];\n\nvec2 fragCoordNewAPI = vec2(0.0);\n\nvoid globalInit(){\n    texel = 1.0/iChannelResolution[0].xy;\n\tpixel = 1.0/iResolution;\n\t}\n\nvec4 tex(int x){\n\treturn texture(iChannel0, vec2(x, fragCoordNewAPI.y / MM)/float(MAXSIZE), 0.0);\n\t}\n\nvoid accumValue(float f){\n\tint i4 = int(floor(f * 15.0));\n\n\tfor (int i = 0; i < 16; i++)\n\t\taccum[i] += i == i4 ? 1 : 0;\n\t\n\t}\n\nivec2 find_Kth(int k){\n\tbool found = false;\n\tint value = 0;\n\tint i;\n\t\n\tint a = accum[0];\n\t\n\tfor (int i = 0; i < 16; i++){\n\t\tif (!found){\n\t\t\tvalue = i;\n\t\t\tif (k < accum[i])\n\t\t\t\tfound = true;\n\t\t\telse\n\t\t\t\tk -= accum[i];\n\t\t\t}\n\t\t}\n\t\n\treturn ivec2(value, k);  //The kth occurrence of value is what we want\n\t}\n\nvec4 findTexel(int value, int k){\n\tvec4 texel = vec4(1.0, 0.0, 0.0, 1.0);\n\tfor (int i = 0; i < MAXSIZE; i++){\n\t\tvec4 v = tex(i);\n\t\tint i4 = int(floor(v.g * 15.0));\n\t\tif (i4 == value){\n\t\t\tif (k == 0)\n\t\t\t\ttexel = v;\n\t\t\tk -= 1;\n\t\t\t}\n\t\t}\n\treturn texel;\n\t}\n\nint getAccum(int n){\n\tint ret = 100;\n\t\n\tfor (int i = 0; i < 16; i++){\n\t\tif (i == n)\n\t\t\tret = accum[i];\n\t\t}\n\treturn ret;\n\t}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    globalInit();\n    \n\tfor (int i = 0; i < 16; i++)\n\t\taccum[i] = 0;\n\t\n    fragCoordNewAPI = fragCoord;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tfragColor = vec4(0.0);\n\n\tif (fragCoord.x / MM > float(MAXSIZE * 2))\n\t\tdiscard;\t\n\n\tif (fragCoord.y / MM > float(MAXSIZE))\n\t\tdiscard;\n\t\n\tfor (int i = 0; i < MAXSIZE; i++){\n\t\taccumValue(tex(i).g);\n\t\t}\n\t\n\tint k = int(fragCoord.x / MM);\n\t\n\tivec2 order = find_Kth(k);\n\t\n\t//fragColor.r = step(0.0, MM *  float(getAccum(x)) - fragCoord.y);\n\t//fragColor.b = step(0.0, MM *  float(order.r) - fragCoord.y);\n\t//fragColor.g = step(0.0, MM *  float(order.g) - fragCoord.y);\n\t\n\tfragColor += findTexel(order.r, order.g);\n\tif (fragCoord.x / MM > float(MAXSIZE))\n\t\tfragColor = tex((int(fragCoord.x) - MAXSIZE) / int(MM));\n\n\t}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ssXWn","date":"1399337909","viewed":2088,"name":"quick?sort","username":"casty","description":"As efficient as useful ^^\n\nSorts the texels of each row of the texture. 1st criterion is green value (only 4 bit precision though), 2nd criterion is original order. I tried to improve array indexing using ivec4 (even matrices) but was not compiling.","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["sort","select"],"hasliked":0,"parentid":"","parentname":""}}