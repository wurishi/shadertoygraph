{"ver":"0.1","info":{"id":"ctyfRD","date":"1701873515","viewed":94,"name":"Visuals for VJ","username":"mazureofficial","description":"Basic code to build visuals from for VJ'ing etc","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["techno","vj","visuals","deephouse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = cos(4.9*fragCoord/iResolution.xy)*(0.1*cos(iResolution.xx-iTime));\n\n    // Time varying pixel color\n    vec3 col = 0.5 / 0.5/cos(iTime + uv.xyx + vec3(0,2,4));\n    // Fractal noise based on time and space\n    float noise = 0.0;\n    float scale = 1.0;\n    for (int i = 0; i < 8; i++) {\n        noise += (sin(dot(uv * scale, vec2(12.9898,78.233)) + iTime) * 0.5 + 0.5) / scale;\n        scale *= 2.0;\n    }\n\n    // Complex transformation for evolving visuals\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    float angle = sin(iTime) * 0.2;\n    uv = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * uv;\n\n    // Creating a pattern of moving circles with fractal noise\n    float dist = distance(uv, vec2(0.0, 0.0));\n    float pattern = sin(dist * 10.0 - iTime * 2.0) * cos(dist * 10.0 - iTime * 2.0);\n    pattern *= noise;\n\n    // Combining the color and the pattern\n    col = (0.5-(0.6*(2.-sin(col))))/(iTime * pattern);\n\n    // Output to screen\n    fragColor = vec4(col, pattern/noise/1.3*iTime);\n}\n","name":"Image","description":"","type":"image"}]}