{"ver":"0.1","info":{"id":"lfXBzX","date":"1724120272","viewed":18,"name":"Simple Orrery","username":"trismegistus_shandy","description":"A simple model of a solar system (not ours), not to scale by any means, with the sun varying in luminosity over time and the sun-sides of the planets lit up proportionally to the sun. Needs more work to light up the sun-sides of the larger planets' moons.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["orbit","solarsystem","orrery"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535897932;\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.657);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat wobble( float speed ) {\n    return abs(sin ( iTime * speed ) );\n}\n\n\nvec2 multiply_complex( vec2 p, vec2 q ) {\n    float realpart = p.x * q.x - p.y * q.y;\n    float imaginarypart = p.x * q.y + p.y * q.x;\n    return vec2( realpart, imaginarypart );\n}\n\n\nvec2 rotate( vec2 coord, float angle ) {\n    vec2 rotator = vec2( sin(angle), cos(angle) );\n    vec2 rotated = multiply_complex( coord, rotator );\n    return rotated;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv0 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // rotate the coordinate system as a function of time so shapes we \n    // draw will orbit the center\n    //vec2 uv_arr[3] = rotate( uv0, iTime), rotate( uv0, iTime/2.), rotate( uv0, iTime/3.) ];\n    vec3 finalColor = vec3( 0., 0., 0. );\n\n    // sun\n    vec3 sunColor = vec3( 0.7 + wobble(0.8)*0.3, \n                          0.6 + wobble(0.7)*0.4, \n                          0.1 + wobble(1.2)*0.3 );\n    if ( length(uv0) < 0.15 ) {\n        finalColor = sunColor;\n    }\n\n    // planets\n    for ( float i = 1.; i <= 5.; i++ ) {\n        vec2 uv_rot = rotate( uv0, iTime/pow(i,2.) );\n        float offset = 0.2 * i;\n        float radius = 0.07 * log(i+0.5);\n\n        if ( length( uv_rot + offset ) < radius ) {\n            finalColor = vec3( 0., 1. - sqrt(offset), 1. - offset  );\n            \n            // light up the sunside of the planets\n            if ( length( uv0 ) < length(vec2(offset,offset)) ) {\n                finalColor = finalColor + sunColor ;\n            }\n        \n        }\n        \n        // the further out, the more moons\n        if ( i >= 3. ) {\n            for ( float j = 1.; j <= i - 2.; j++ ) {\n                vec2 uv_planet = uv_rot + offset;\n                vec2 uv_moon = rotate(uv_planet, iTime/j);\n                uv_moon += radius * (1. + .25 * j);\n                float mradius = 0.01; //radius / i+1.;\n                if ( length( uv_moon ) < mradius ) {\n                    finalColor = palette( (i + 1.) * (j + 2.) * pi ); //vec3( 1.-(1./i), 0.1, 0.1 );\n                }\n            }\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}