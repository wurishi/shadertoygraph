{"ver":"0.1","info":{"id":"cs23Wz","date":"1667472952","viewed":119,"name":"MandelBrot set shader fractal","username":"RedShip","description":"Mandelbrot fractal","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 c = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n    //c*=max(sin(iTime/10.)+1.,maxZoom);\n    float rot=sin(iTime*0.1)*sin(iTime*0.2)*0.2;\n\t\t\n\tc *= mat2(cos(rot),-sin(rot),sin(rot),cos(rot));\n    c *= abs(sin(iTime/10.))+1./10.;\n\n    vec2 z = vec2(0.);\n    vec2 p = vec2(0.);\n    \n    float d = 0.;\n    float n = 0.;\n    \n    vec2 offset = vec2(0.27,0.00585);\n    \n    while(n<256. && d<=2.+abs(sin(iTime/2.))){\n        p = vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y);\n        z = p+(c+offset);\n        \n        d = length(z);\n        \n        n+=1.;\n    };\n    \n    //vec3 col = d*vec3(n,n*c.x,n)/256.;\n    //vec3 col = d*vec3(d*n,n*c.x*4.,n)/256.;\n    vec3 col = d*vec3(0.6,0.1,0.1)*vec3(n)/256.;\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}