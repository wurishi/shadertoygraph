{"ver":"0.1","info":{"id":"XXVXWV","date":"1726511356","viewed":49,"name":"Starfield_18(Parralax Effect)","username":"JasmineGraceRojas","description":"-M //added to line 63 to create a parallax effect\nline 56 removed","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define NUM_LAYERS 8.0\nmat2 Rot(float a) { //rotation function start\n    float s =sin(a), c = cos(a);\n    return mat2(c,-s,s,c);//rotation function end, also known as 2d rotation matrix\n}\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);// since origin is at the middle, it gives the distance to the center\n    float m = 0.03/d; //draws a circle\n    float rays = max(0.0, 1.0 -abs(uv.x*uv.y*1000.0));\n     m += rays*flare;\n     uv *= Rot(3.1415/4.0);//45 degree rotation\n     rays = max(0.0, 1.0 -abs(uv.x*uv.y*1000.0));//2nd ray rotated at 45 degrees\n     m += rays*.3*flare;\n     \n     m *= smoothstep(1.0,0.2,d);\n     return m;\n}\nfloat Hash21(vec2 p){//start of random number generation\n     p = fract(p*vec2(634.34, 456.21));\n    p +=dot(p, p+45.332);\n    return fract(p.x*p.y);\n\n}\n\n    vec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0);\n    \n    vec2 gv = fract(uv)-0.5;\n    vec2 id= floor(uv);\n    \n    for (int y=-1; y<=1;y++){\n        for (int x=-1; x<=1;x++){\n            vec2 offs = vec2(x,y); //offset\n            \n            float n = Hash21(id+offs); //random value between 0 and 1\n            float size = fract(n*345.32);//the star's flare\n            float star = Star(gv-offs-vec2(n, fract(n*34.0))+0.5, smoothstep(0.85,.5,size));//sets that theflare on the largest star \n            \n            vec3 color = sin(vec3(0.2,0.3,0.5)*fract(n*2000.0)*166.)*0.5+0.5; //star's color\n           \n            color = color*vec3(1.0,0.5,.1+size); //takes out half of green, blue stars are bigger\n            col+= star*size*color;//helps generate random size stars\n       \n       }\n    }\n   return col;\n   \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;//the aspect ratio\n    vec2 M = (iMouse.xy-iResolution.xy*0.5)/iResolution.y;//creates a mouse function\n    float t = iTime*0.05;//zoom speed\n    //uv+= M; // mouse added to uv so you can drag the mouse around\n    uv *= Rot(t);\n   vec3 col= vec3(0);\n      for(float i=0.0; i<1.0; i+=1./NUM_LAYERS){\n      float depth = fract(i+t); //(1+t, need to be above 1 so a fract funtion is added\n      float scale = mix(20.0,0.5,depth);\n      float fade= depth*smoothstep(1.0,0.75,depth);\n      col += StarLayer(uv*scale+i*453.2-M)*fade;//multiply uv with a float to make the stars larger\n    \n    }\n    //if (gv.x>0.48 || gv.y>0.48) col.r=1.;// visualizes the box borders\n    //col += Hash21(id);\n    fragColor = vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}