{"ver":"0.1","info":{"id":"mlKSWw","date":"1686144624","viewed":292,"name":"Glowstick Runner","username":"SnoopethDuckDuck","description":"Click the screen to change speed, click music in Buffer A if you want to hear it","likes":22,"published":3,"flags":96,"usePreview":0,"tags":["animation","nyancat","walk","run","nose","legs","jedi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define l(d, p, q) d = min(d, seg(uv, p, q));\n#define l(d, p, q, r1, r2) d = min(d, cap(uv, p, q, r1, r2));\n\n// Custom smoothstep (don't use tanhC or atanhC)\nfloat tanhC(float x, float k) {float v = exp2(-k);return sign(x)*log2(v-(v-1.)*exp2(-abs(x)))/k;}\nfloat atanhC(float x, float k) {return sign(x)*log2((1.-exp2(k*(1.-abs(x))))/(1.-exp2(k)));}\nfloat smoothstepC(float x, float a, float o, float k) {\n    return .5+.5*tanhC(a*(atanhC(2.*x-1.,k)-atanhC(o,k)),k);\n}\n\n// X equations for feet\nfloat baseX(float x, float bo) {\n    return max(0., mod(x, 2.) - bo) / (2. - bo);\n}\n\nfloat leftX(float x, float bo, float a, float o, float k) {\n    return floor(0.5 * x) + smoothstepC(baseX(x, bo), a, o, k);\n}\n\nfloat rightX(float x, float bo, float a, float o, float k) {\n    return leftX(x + 1., bo, a, o, k) - 0.5;\n}\n\n// Y equation for feet\nfloat getY(float x, float o0, float a, float o, float k) {\n    return smoothstepC(.5+.5*cos(pi*(x+o0)), a, o, k);\n}\n\nvoid draw(inout vec3 col, vec2 ouv, vec2 uv, float t,\n          float bo, float ax, float ox, float kx,\n          float o0, float ay, float oy, float ky) {\n    // Feet\n    float Lx = 0.5 * leftX(t, bo, ax, ox, kx);\n    float Rx = 0.5 * rightX(t, bo, ax, ox, kx);    \n    vec2 pFootL = vec2(Lx - Rx, 0.2 * getY(t, o0, ay, oy, ky));\n    vec2 pFootR = vec2(Rx - Lx, 0.2 * getY(t + 1., o0, ay, oy, ky)); \n   \n    // Hip\n    float yL0 = 0.2 * getY(t + 0.05, o0, ay, oy, ky);\n    float yR0 = 0.2 * getY(t + 0.05 + 1., o0, ay, oy, ky);\n    float y = mix(yL0, yR0, 0.5);\n    vec2 pHip = vec2(mix(pFootL.x, pFootR.x, .5-.08*sin(pi*t)) - 0.05, \n                     y + 0.39);\n       \n    // Knees\n    vec2 pKneeL = pHip + solve(pFootL - pHip, 0.25, 0.27, -1.);\n    vec2 pKneeR = pHip + solve(pFootR - pHip, 0.25, 0.27, -1.);\n    \n    // Toes\n    vec2 pToeL = pFootL - 0.05 * Dir(getY(t-0.12, o0, ay, oy, ky));\n    vec2 pToeR = pFootR - 0.05 * Dir(getY(t+1.-0.12, o0, ay, oy, ky));\n    \n    // Body\n    float aBody = pi/2.+pi/12.+pi/16.*sin(-pi/8.+2.*pi*t);\n    vec2 pBody = pHip + 0.2 * Dir(0.*cos(2.*pi*t)+aBody);\n    \n    // Arms \n    float aArmL = pi/12.-pi/2.+pi/2.2*cos(pi*t);\n    float aArmR = pi/12.-pi/2.+pi/2.2*cos(pi*(t+1.));\n    vec2 pArmL = pBody + 0.2 * Dir(aArmL);\n    vec2 pArmR = pBody + 0.2 * Dir(aArmR);\n    \n    // Hands\n    float aHandL = aArmL -pi/12.- pi/4.*(1.+ths(3., pi*t));\n    float aHandR = aArmR -pi/12.- pi/4.*(1.+ths(3., pi*(t+1.)));\n    vec2 pHandL = pArmL + 0.15 * Dir(aHandL);\n    vec2 pHandR = pArmR + 0.15 * Dir(aHandR);\n    \n    // Fingies\n    vec2 pFingL = pHandL + 0.025 * Dir(aHandL + pi/8.*ths(3., pi/4.+pi*t));\n    vec2 pFingR = pHandR + 0.025 * Dir(aHandR + pi/8.*ths(3., pi/4.+pi*t));\n    \n    // Sticks\n    float aArmHandL = atan(pArmL.y-pHandL.y, pArmL.x-pHandL.x);\n    float aArmHandR = atan(pArmR.y-pHandR.y, pArmR.x-pHandR.x);\n    vec2 dirL = 0.05 * Dir(2.*pi*t+pi/2. + 0.3*pi * thc(6., pi*t) + aArmHandL);\n    vec2 dirR = 0.05 * Dir(2.*pi*(t+1.)+pi/2. + 0.3*pi * thc(6., pi*(t+1.)) + aArmHandR);\n    float timeRate = texture(iChannel0, vec2(0)).x;\n    //dC = min(dC, mix(0.45, 2., iMouse.y/res.y) - length(uv - pHip));\n    //dC = min(dC, 0.8 + 0.02*cos(pi*t) - length(ouv));\n    float dLightL = cap(uv, pFingL + dirL, pFingL + (8.-2.*timeRate) * dirL, 0.01, 0.01);\n    float dLightR = cap(uv, pFingR + dirR, pFingR + (8.-2.*timeRate) * dirR, 0.01, 0.01);\n    \n    // Head\n    float aHead = pi/2.+0.4+0.2*cos(2.*pi*t);\n    vec2 pHead = pBody + 0.1 * Dir(aHead);\n    vec2 pNose = pHead + 0.06 * Dir(pi/2. + aHead);\n    vec2 pEye = pHead + 0.025 * Dir(pi/3. + aHead);\n    \n    // Distances\n    float dL, dR, dC;\n    dL = dR = dC = 1e5;\n    l(dL, pHip, pKneeL, 0.04, 0.015);\n    l(dL, pKneeL, pFootL, 0.015, 0.01);\n    l(dL, pFootL, pToeL, 0.01, 0.005);\n    l(dL, pBody, pArmL, 0.035, 0.02);\n    l(dL, pArmL, pHandL, 0.02, 0.01);\n    l(dL, pHandL, pFingL, 0.01, 0.005);\n    l(dL, pFingL + dirL, pFingL - dirL, 0.01, 0.01);\n    \n    l(dR, pHip, pKneeR, 0.04, 0.015);\n    l(dR, pKneeR, pFootR, 0.015, 0.01);\n    l(dR, pFootR, pToeR, 0.01, 0.005);\n    l(dR, pBody, pArmR, 0.035, 0.02);\n    l(dR, pArmR, pHandR, 0.02, 0.01);\n    l(dR, pHandR, pFingR, 0.01, 0.005);\n    l(dR, pFingR + dirR, pFingR - dirR, 0.01, 0.01);\n      \n    l(dC, pHip, pBody, 0.04, 0.045);\n    dC = min(dC, length(uv - pHead) - 0.05);\n    l(dC, pHead, pBody, 0.02, 0.01);\n    l(dC, pHead, pNose, 0.01, 0.01);\n        \n    // Smoothsteps\n    float r = 0.0;\n    vec3 tint = vec3(1, .5, .5) * (uv.y + 0.5);\n    float sL = ss(1., r-dL);\n    float sC = ss(1., r-dC);\n    float sR = ss(1., r-dR);\n    float sLightL = ss(1., -dLightL);\n    float sLightR = ss(1., -dLightR);\n    float xpLightL = exp(-8.*sqrt(dLightL));   \n    float xpLightR = exp(-8.*sqrt(dLightR));\n    float d = min(dL, min(dC, dR));\n    d = min(d, min(dLightL, dLightR));\n    float sOutline = ss(1., 0.014 - d);\n    \n    // Mix color\n    col = mix(col, vec3(0.2), sOutline);\n    col = mix(col, vec3(0.2, 1, 0.2), sLightL);\n    col = mix(col, vec3(0.6) * tint, sL);     \n    col = mix(col, vec3(0.8) * tint, sC);\n    col = mix(col, vec3(1) * tint, sR);\n    col = mix(col, vec3(0, 1, 1), sLightR);\n    col = mix(col, vec3(0.2), ss(1., 0.012 - length(uv - pEye)));\n}\n\nvoid mainImage( out vec4 O, in vec2 px )\n{\n    vec2 uv = (px - 0.5 * res) / res.y;\n    vec2 ouv = uv;\n    uv += vec2(-0.12, 0.492);\n    \n    // Time\n    float t = -texelFetch(iChannel0, ivec2(px), 0).y;\n\n    // Parameters for foot trajectory - play with them here:\n    // https://www.desmos.com/calculator/fuxbacd7ae\n    float bo = 0.1;   // transition length (flat to steep)\n    float ax = 2.5;   // gradient (instant-ness of X motion)\n    float ox = -0.5;  // offset [-1,1]\n    float kx = 4.;    // sharpness    \n    float o0 = 1.3;   // wave offset\n    float ay = 1.;    // gradient\n    float oy = -0.5;  // offset [-1,1]\n    float ky = 0.82;  // sharpness\n     \n    // Background glow\n    vec3 col = exp(-0.55 * vec3(1,2,.5) * abs(uv.y));\n\n    // Background stripes\n    vec2 uv2 = uv;\n    uv2.x += -0.4 * t;\n    uv2 *= rot(pi/1.5);\n    col *= .98 + 0.08 * ss(1., fract(uv2.y) - 0.6);\n    \n    // Background nyan cat :)\n    vec3 tx = texture(iChannel1, vec2(-0.125,1) * uv + vec2(0.04*t,0)).rgb;\n    vec3 tx2 = texture(iChannel2, vec2(-0.125,1) * uv + vec2(0.04*t,0)).rgb;\n    col *= .8 + .2 *  mix(tx, tx2, .5 + .5 * cos(0.6 * iTime));\n  \n    // Jedi\n    draw(col, ouv, uv, t, bo, ax, ox, kx, o0, ay, oy, ky);\n    //draw(col, ouv, uv - vec2(0.2, 0), t, bo, ax, ox, kx, o0, ay, oy, ky);\n    //draw(col, ouv, uv + vec2(0.2,0), t+0.1*t, bo, ax, ox, kx, o0, ay, oy, ky);\n       \n    O = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dc3zM","filepath":"https://soundcloud.com/koan-sound/intercept?si=f9d2ee4ead2f41c6ba601745efba4914&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/koan-sound/intercept?si=f9d2ee4ead2f41c6ba601745efba4914&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 px )\n{\n    vec2 ms = iMouse.xy / res.y;\n    O = texelFetch(iChannel0, ivec2(px), 0);\n    \n    if (iFrame < 1)\n        O.x = 0.85;\n    \n    if (iMouse.z > 0.) \n        O.x = ms.x; // store mouse position for time rate\n    \n    // Music-synced running (messy but funny)\n    float v = texture(iChannel1, vec2(0.5, 0)).r;\n    //O.x = 0.2 + 4. * v;\n    \n    O.y += O.x / 60.; //iFrameRate;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define res iResolution.xy\n#define pi 3.14159\n#define tanh2(a) ((exp2(a)-1.)/(exp2(a)+1.))\n#define thc(a,b) tanh2(a*cos(b))/tanh2(a)\n#define ths(a,b) tanh2(a*sin(b))/tanh2(a)\n#define Dir(a) vec2(cos(a),sin(a))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define ss(a, b) smoothstep(-a/res.y, a/res.y, b)\n\n// iq's IK\nvec2 solve(vec2 p, float r1, float r2, float side) {\n    float h = dot(p,p);\n    float w = h + r1*r1 - r2*r2;\n    float s = max(4.0*r1*r1*h - w*w,0.0);\n    return (w*p + side * vec2(-p.y,p.x)*sqrt(s)) * 0.5/h;\n}\n\nfloat seg( in vec2 p, in vec2 a, in vec2 b ) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// Uneven capsule (unoptimised)\nfloat cap(vec2 uv, vec2 p, vec2 q, float r1, float r2)\n{\n    float h = length( p - q);\n    uv -= p;\n    float th = atan(q.y-p.y, q.x-p.x);\n    uv *= rot(-th + pi/2.);\n    uv.x = abs(uv.x);    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(uv,vec2(-b,a));\n    if( k < 0.0 ) return length(uv) - r1;\n    if( k > a*h ) return length(uv-vec2(0.0,h)) - r2;\n    return dot(uv, vec2(a,b) ) - r1;\n}","name":"Common","description":"","type":"common"}]}