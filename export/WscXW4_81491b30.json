{"ver":"0.1","info":{"id":"WscXW4","date":"1591299259","viewed":313,"name":"dirty comic book","username":"TonyIlersich","description":"uses a janky edge detection function i wrote to draw thick black lines over a live feed from the web cam to enhance boudaries between objects. this results in a comic book sort of look with lots of specs peppered around due to the digital grain.","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float edge(sampler2D tex, vec2 p, float step)\n{\n    float dif = .0;\n    int prsn = 6;\n    for (int i = -prsn; i <= prsn; i++)\n    {\n        for (int j = -prsn; j <= prsn; j++)\n        {\n            if (i != 0 || j != 0)\n            {\n\t            dif += distance(\n    \t            texture(tex, p),\n        \t        texture(tex, p + step * vec2(i, j)));\n            }\n        }\n    }\n    float neighborCount = pow(float(prsn) * 2. + 1., 2.) - 1.;\n    float maxDif = neighborCount * distance(vec4(1,1,1,1), vec4(0,0,0,0));\n    return dif / sqrt(maxDif);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 rawClr = texture(iChannel0, uv);\n    \n    rawClr *= 1. - edge(iChannel0, uv, .001);\n    \n    // Output to screen\n    fragColor = rawClr;\n}","name":"Image","description":"","type":"image"}]}