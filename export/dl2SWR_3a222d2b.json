{"ver":"0.1","info":{"id":"dl2SWR","date":"1675943902","viewed":69,"name":"Checkerboard Grid Test 1","username":"davidoakley","description":"Simple test of a checkerboard grid that gradually changes colour over time\n\nFuture thoughts - use HCL for gradients:\nhttps://www.joshwcomeau.com/gradient-generator/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\n// Got some ideas from\n// https://www.shadertoy.com/view/WslXDr\n\n// Gradient noise from Jorge Jimenez's presentation:\n// http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare\nfloat gradientNoise(in vec2 uv)\n{\n    const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);\n    return fract(magic.z * fract(dot(uv, magic.xy)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = (fragCoord - .5*R) / R.y;\n    \n    float angle = iTime / 80.0;\n    uv *= mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n    \n    vec2 id = floor(10.0*uv);\n\n    float t2 = (id.x+id.y)/(R.x/40.0);\n\n    float checkerboard = mod(id.x+id.y, 2.0);\n\n    float pct = 0.5+0.5*sin(2.0*t2) + checkerboard * 0.07;\n\n    vec3 col = 0.8 + 0.16*cos(iTime/20.+id.xyx/10.0+vec3(0,2,4)) + checkerboard * 0.04;\n\n    col += (10.0/255.0) * gradientNoise(fragCoord) - (5.0/255.0);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}