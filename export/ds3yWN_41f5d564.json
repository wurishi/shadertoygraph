{"ver":"0.1","info":{"id":"ds3yWN","date":"1695061541","viewed":50,"name":"Chaos theory has nothing on me","username":"tytr","description":"Did not arrive at this purposefully, just messed with values until I found something neat.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["creativecoding"],"hasliked":0,"parentid":"msccD4","parentname":"Almost fractally"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b*cos( 6.28318 * (c * t + d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // TODO: Rotate UV around origin over time\n    float theta = iTime * 0.1; // slowish\n    float cosTheta = cos(theta);\n    float sinTheta = sin(theta);\n    \n    float xp = uv.x * cosTheta - uv.y * sinTheta;\n    float yp = uv.x * sinTheta + uv.y * cosTheta;\n    vec2 uv_r = vec2(xp, yp);\n    uv = uv_r;\n    \n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 8.0; i++)\n    {\n        uv = fract(uv *1.25) - 0.5;\n        \n        float d = length(uv) * exp(-length(uv0));\n        \n        vec3 col = palette(length(uv0) + i*.04 + iTime*.02);\n        \n        d = sin(d*16.0 + iTime * 0.4) / 8.0;\n        d = abs(d);\n        d = pow(0.005/ d, 1.2);\n        \n        finalColor += col * d;\n    }\n    \n    finalColor = clamp(finalColor, vec3(0.0), vec3(1.0));\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}