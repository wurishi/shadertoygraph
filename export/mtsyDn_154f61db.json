{"ver":"0.1","info":{"id":"mtsyDn","date":"1691423936","viewed":62,"name":"Little Switches","username":"Hippoflip","description":"Tool for a music video I created.\n\n(WIP)\n\nMany thanks to Kishimisu for the YouTube tutorial !","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["triangles","music","red","blue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Ms33W4","filepath":"https://soundcloud.com/hippoflip/little-switches-clip","previewfilepath":"https://soundcloud.com/hippoflip/little-switches-clip","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////// utils //////////////////////\n// Equilateral Triangle dist function\n// -> source: https://iquilezles.org/articles/distfunctions2d/\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n// Palette function\n// -> source: https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    vec3 a = vec3(.5, .138, .088);\n    vec3 b = vec3(.5, .288, .428);\n    vec3 c = vec3(1., 1., 1.);\n    vec3 d = vec3(-.202, .333, .333);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n////////////////// utils //////////////////////\n\n\n// MAIN SHADER CODE\n// Base shape rendering function\nfloat basicShape(in vec2 p, in float timeCoeff)\n{\n    //Normalize time coefficient (unused for now)\n    timeCoeff = 1. + abs(cos(timeCoeff) * 0.003);\n    \n    // Constants used for basic shape manipulation\n    float radius = .333 * timeCoeff * timeCoeff * timeCoeff;\n    float neonThickness = .066;\n    float thinness = 11.999;\n    \n    // Apply triangle dist\n    float d = sdEquilateralTriangle(p, radius);\n    // Repeat pattern\n    d = neonThickness / sin(d * thinness - iTime * timeCoeff) / thinness;\n    // Abs for hollow shape\n    d = abs(d);\n    // Step for sharpness\n    return smoothstep(0., .05, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Initialize color vector\n    vec3 color = vec3(0.);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord *2. - iResolution.xy) / iResolution.y;\n    \n    // Maintain distance from center (not repeated)\n    vec2 uv0 = uv;\n    \n    float N = 3.;//Number of iterations\n    for (float i = 0.; i < N; i+=1.) {\n        // REPETITION LEGITIMIZES\n        uv = fract(uv * 2.) - .5;\n        \n        // Music texture\n        float music = texture(iChannel0, vec2(uv.x, 0.0)).r;\n        \n        // Img texture\n        float tex = texture(iChannel1, vec2(uv0.x, uv0.y)).r;\n        \n        // Video texture\n        float vid = texture(iChannel2, vec2(uv0.x, uv0.y)).r;\n    \n        // Color space defined by the palette function\n        vec3 col = palette(length(uv0)) + cos(iTime * .5) * .3;\n    \n        // Apply basic shape\n        float d = basicShape(uv, music);\n        \n        // Apply music texture\n        float baseValue = .07;\n        d *= (baseValue + abs(music - baseValue));\n        \n        // Apply colors\n        color += col * d + tex * .1 + vid * .051;\n    }\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}