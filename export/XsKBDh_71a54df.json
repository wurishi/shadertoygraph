{"ver":"0.1","info":{"id":"XsKBDh","date":"1528645283","viewed":282,"name":"Kickstart","username":"rkibria","description":"Generated from 16 color BMP file using a Python script https://github.com/rkibria/img2shadertoy\n\nUses simple RLE compression scheme to save some memory.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["bitmap","generated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 bitmap_size = vec2(160, 131);\nconst int[] palette = int[] (\n0x00ce7373,\n0x00000000,\n0x00ffffff,\n0x00bdbdbd,\n0x008080ff,\n0x0080ffff,\n0x0080ff80,\n0x0080ff00,\n0x00ffff80,\n0x00ff8000,\n0x00c080ff,\n0x00ff80ff,\n0x000000ff,\n0x0000ffff,\n0x0000ff80,\n0x0040ff00\n);\nconst int[] rle = int[] (\n0x11981200,\n0x120022b5,\n0x22b51198,\n0x8c211201,\n0x21120122,\n0x11002287,\n0x120122b5,\n0x01228c21,\n0x22872112,\n0x22b51100,\n0x8c211201,\n0x21120122,\n0x11002287,\n0x120122b5,\n0x01228c21,\n0x22872112,\n0x22b51100,\n0x8c211201,\n0x21120122,\n0x11002287,\n0x120122b5,\n0x01228c21,\n0x22872112,\n0x22b51100,\n0x8c211201,\n0x21120122,\n0x11002287,\n0x120122b5,\n0x01228c21,\n0x22872112,\n0x22b51100,\n0x8c211201,\n0x21120122,\n0x11002287,\n0x120122b5,\n0x01228c21,\n0x22872112,\n0xb4211101,\n0x21120122,\n0x1201228c,\n0x02228721,\n0xb3211211,\n0x21120122,\n0x1201228c,\n0x02228821,\n0xb2211111,\n0x21120122,\n0x1201228c,\n0x02228921,\n0xb1211112,\n0x21120122,\n0x1201228c,\n0x01228a21,\n0x22b11112,\n0x8c211201,\n0x21120122,\n0x1201228b,\n0x0122b021,\n0x228c2112,\n0x8b211201,\n0x21120122,\n0x120122b0,\n0x01228c21,\n0x228c2112,\n0x22b01100,\n0x8c211201,\n0x21120122,\n0x1201228c,\n0x0122af21,\n0x228c2112,\n0x8c211201,\n0x21120122,\n0x120122af,\n0x00228c21,\n0x8a118312,\n0xaf110022,\n0x21120122,\n0x1200228c,\n0x21001183,\n0x12012289,\n0x0122ae21,\n0x22912112,\n0x22891100,\n0xae211201,\n0x21120122,\n0x12012291,\n0x00228921,\n0x0122ae11,\n0x22922112,\n0x22891100,\n0xad112101,\n0x21120122,\n0x12012292,\n0x04228621,\n0x22211111,\n0x0122ac21,\n0x22922112,\n0x85211201,\n0x12120522,\n0x12211111,\n0x120122ac,\n0x01229221,\n0x22852112,\n0x11112106,\n0x21111221,\n0x120122ab,\n0x01229221,\n0x22852112,\n0x22211106,\n0x11221112,\n0x120122ab,\n0x01229221,\n0x22842112,\n0x21121207,\n0x22122222,\n0x0122ab11,\n0x22922111,\n0x84211201,\n0x11110122,\n0x21022283,\n0x22862112,\n0x85211101,\n0x11110a22,\n0x21122111,\n0x11111222,\n0x00229021,\n0x01229311,\n0x22842112,\n0x83111101,\n0x22210222,\n0x01228611,\n0x22851111,\n0x11111106,\n0x22211221,\n0x22901183,\n0x22931100,\n0x12211202,\n0x22061185,\n0x22122222,\n0x22861122,\n0x21111102,\n0x110a2285,\n0x22222221,\n0x12211112,\n0x228f2111,\n0x22931100,\n0x21111204,\n0x11841222,\n0x21122206,\n0x21122222,\n0x11022285,\n0x22851111,\n0x85211101,\n0x11120122,\n0x11002290,\n0x12102293,\n0x21111221,\n0x11111122,\n0x22211122,\n0x21122222,\n0x11032285,\n0x84211121,\n0x21110122,\n0x12022284,\n0x22902111,\n0x22931100,\n0x21121209,\n0x11222222,\n0x85211111,\n0x85110022,\n0x21110322,\n0x22841112,\n0x84211101,\n0x11120222,\n0x00229021,\n0x01229311,\n0x22831212,\n0x11111203,\n0x00228511,\n0x04228511,\n0x11222111,\n0x01228321,\n0x22852111,\n0x90111201,\n0x93110022,\n0x12120122,\n0x11042283,\n0x21111122,\n0x12012284,\n0x13228421,\n0x12222111,\n0x22222211,\n0x22211111,\n0x11122222,\n0x21111221,\n0x1100228f,\n0x120a2293,\n0x22222212,\n0x12222112,\n0x22841111,\n0x84211201,\n0x21110a22,\n0x21112222,\n0x11122222,\n0x83228321,\n0x00229011,\n0x0b229311,\n0x22111112,\n0x22221122,\n0x21111122,\n0x11002284,\n0x120b2283,\n0x11221111,\n0x22211111,\n0x83211122,\n0x11120322,\n0x22902111,\n0x22931100,\n0x11831200,\n0x22222106,\n0x11111222,\n0x11002284,\n0x110022a8,\n0x12042293,\n0x11111221,\n0x11022284,\n0x22832111,\n0x22a81100,\n0x22931100,\n0x22211203,\n0x02228511,\n0x83111112,\n0xa8110022,\n0x93110022,\n0x21120222,\n0x06228711,\n0x22211111,\n0xa8112222,\n0x93110022,\n0xaa120022,\n0x00228e11,\n0xab229311,\n0x00228e11,\n0x00229311,\n0x0622a311,\n0x00000111,\n0x8e111000,\n0x92110022,\n0x21120122,\n0x110622a3,\n0x00000001,\n0x228e1110,\n0x22921100,\n0x83211201,\n0x31320122,\n0x11122283,\n0x13233111,\n0x13331111,\n0x12223111,\n0x22223111,\n0x22863132,\n0x00011106,\n0x11100000,\n0x1100228e,\n0x12012292,\n0x19228321,\n0x22231132,\n0x22312222,\n0x13323113,\n0x11322221,\n0x11122311,\n0x32222223,\n0x22852311,\n0x00011106,\n0x11100000,\n0x1100228e,\n0x12012292,\n0x19228321,\n0x22311132,\n0x22212222,\n0x12231132,\n0x11222231,\n0x11123113,\n0x32222221,\n0x22853111,\n0x00011106,\n0x11100000,\n0x1100228e,\n0x12012292,\n0x03228321,\n0x23121132,\n0x11112284,\n0x22113231,\n0x13311322,\n0x22113113,\n0x12113222,\n0x06228423,\n0x00000111,\n0x8e111000,\n0x92110022,\n0x21120122,\n0x321a2283,\n0x22312211,\n0x22311112,\n0x11223111,\n0x31122223,\n0x12311132,\n0x11322221,\n0x22843122,\n0x00011106,\n0x11100000,\n0x1100228e,\n0x12012292,\n0x1b228321,\n0x11111132,\n0x23112223,\n0x22311132,\n0x32222113,\n0x31132211,\n0x32221122,\n0x23111111,\n0x11062283,\n0x00000001,\n0x228e1110,\n0x22221104,\n0x228e1222,\n0x83211201,\n0x11321b22,\n0x22312222,\n0x11132113,\n0x31132223,\n0x23113222,\n0x12223112,\n0x22113231,\n0x22833122,\n0x00011106,\n0x11100000,\n0x1105228e,\n0x12222222,\n0x1a228d11,\n0x22222112,\n0x11113222,\n0x31111221,\n0x23111113,\n0x11111322,\n0x11111131,\n0x83123132,\n0x12210d11,\n0x22223111,\n0x00011122,\n0x11100000,\n0x1100228e,\n0x21012283,\n0x01228c21,\n0x22a32112,\n0x00011106,\n0x11100000,\n0x1100228e,\n0x12012283,\n0x01228c11,\n0x22a32112,\n0x00011106,\n0x11100000,\n0x1100228e,\n0x12012284,\n0x00228c11,\n0x0622a311,\n0x00000111,\n0x8e111000,\n0x21120122,\n0x21012284,\n0x01228b21,\n0x228b2112,\n0x88200001,\n0x20020422,\n0x86200222,\n0x01110622,\n0x10000000,\n0x01228e11,\n0x22842112,\n0x8c111201,\n0x21110122,\n0x0000228a,\n0x02042289,\n0x20022220,\n0x11062286,\n0x00000001,\n0x228f1110,\n0x22851100,\n0x8c111201,\n0x87110022,\n0x20021222,\n0x02220022,\n0x22000200,\n0x22000002,\n0x02222002,\n0x06228620,\n0x00000111,\n0x8f111000,\n0x21120122,\n0x21012285,\n0x01228b21,\n0x22872112,\n0x00220011,\n0x00220022,\n0x22002220,\n0x20022002,\n0x86200200,\n0x01110622,\n0x10000000,\n0x01228f11,\n0x22852112,\n0x21111202,\n0x1100228b,\n0x02112287,\n0x00220000,\n0x22200222,\n0x20022200,\n0x00000002,\n0x06228620,\n0x00000111,\n0x90111000,\n0x86110022,\n0x11110222,\n0x01228a21,\n0x22862112,\n0x00220011,\n0x02222222,\n0x22002220,\n0x00022002,\n0x86200022,\n0x01110622,\n0x10000000,\n0x01229011,\n0x22832112,\n0x11831200,\n0x228a2100,\n0x22851100,\n0x22200212,\n0x22222000,\n0x02220000,\n0x02220000,\n0x20022220,\n0x11062286,\n0x00000001,\n0x22911110,\n0x22831100,\n0x22211106,\n0x21111111,\n0x12012289,\n0x06229e21,\n0x00000111,\n0x91111000,\n0x11120c22,\n0x21122222,\n0x11222222,\n0x89211221,\n0x21110122,\n0x1106229d,\n0x00000001,\n0x22921110,\n0x22211203,\n0x83228321,\n0x89210011,\n0x9d110022,\n0x01110622,\n0x10000000,\n0x00229311,\n0x04228511,\n0x11100111,\n0x01228911,\n0x22832112,\n0x8f200001,\n0x00020122,\n0x11062284,\n0x00000001,\n0x22931110,\n0x84211201,\n0x01110522,\n0x21111100,\n0x11002289,\n0x00002283,\n0x02012290,\n0x06228420,\n0x00000111,\n0x93111000,\n0x21120122,\n0x11062284,\n0x11000001,\n0x22882111,\n0x22221118,\n0x22002000,\n0x20000022,\n0x00000222,\n0x00002220,\n0x00022220,\n0x22842002,\n0x00011106,\n0x11100000,\n0x21002294,\n0x11062284,\n0x10000001,\n0x22881111,\n0x02221118,\n0x22000220,\n0x00222002,\n0x02220022,\n0x22200220,\n0x22002200,\n0x22842000,\n0x00011106,\n0x11100000,\n0x11002294,\n0x11152284,\n0x00000001,\n0x22211111,\n0x11111222,\n0x11222111,\n0x22200222,\n0x0e228300,\n0x22002200,\n0x00022002,\n0x00220000,\n0x84200222,\n0x01110622,\n0x10000000,\n0x00229411,\n0x01228411,\n0x00830111,\n0x21111103,\n0x19118422,\n0x02221122,\n0x22002220,\n0x00222002,\n0x02220022,\n0x22222220,\n0x22002200,\n0x22842002,\n0x00011106,\n0x11100000,\n0x12012294,\n0x01228321,\n0x00830111,\n0x11111121,\n0x22222112,\n0x11221122,\n0x22200222,\n0x00222000,\n0x00222000,\n0x22200222,\n0x22200000,\n0x85000002,\n0x01110622,\n0x10000000,\n0x01229411,\n0x22832112,\n0x83011101,\n0x83118300,\n0x22110222,\n0x06229c11,\n0x00000111,\n0x95111000,\n0x83110022,\n0x01110122,\n0x11030083,\n0x83211111,\n0x22110222,\n0x06229c11,\n0x00000111,\n0x95111000,\n0x83110022,\n0x01110122,\n0x11020083,\n0x22841111,\n0x11221102,\n0x1106229c,\n0x00000001,\n0x22951110,\n0x22211206,\n0x01112222,\n0x11020083,\n0x22841121,\n0x11221102,\n0x1106229c,\n0x00000001,\n0x22951110,\n0x22211206,\n0x01112222,\n0x11030083,\n0x83211221,\n0x22110222,\n0x06229c11,\n0x00000111,\n0x96111000,\n0x21110522,\n0x01112222,\n0x11030083,\n0x83211221,\n0x22110222,\n0x06229c11,\n0x00000111,\n0x96111000,\n0x11120522,\n0x01112221,\n0x11030083,\n0x83211111,\n0x22210122,\n0x0105119e,\n0x10000000,\n0x04229711,\n0x11221112,\n0x83008301,\n0x22220411,\n0x9f221222,\n0x00010511,\n0x11100000,\n0x12032298,\n0x86011111,\n0x22100600,\n0x11111112,\n0x0100a201,\n0x22991110,\n0x01111202,\n0x10000086,\n0x00a31184,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x100100b0,\n0x01229a11,\n0x00b00111,\n0x9a111001,\n0x01110122,\n0x10000089,\n0x0100119a,\n0x10010089,\n0x01229a11,\n0x00890111,\n0x119a1000,\n0x00890100,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x01339811,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x01339811,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x01339811,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x00339011,\n0x03118413,\n0x01113331,\n0x10010089,\n0x01229a11,\n0x00890111,\n0x90111001,\n0x84130033,\n0x33310311,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00890111,\n0x9a111001,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00890111,\n0x9a211101,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00880111,\n0x9b111001,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00880111,\n0x9b211101,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00870111,\n0x9c111001,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00870111,\n0x9c211101,\n0x01110122,\n0x10010089,\n0x09339011,\n0x00001113,\n0x33311100,\n0x00860111,\n0x9d111001,\n0x01110122,\n0x10010089,\n0x00339011,\n0x03118413,\n0x01113331,\n0x11010086,\n0x01229d21,\n0x00890111,\n0x90111001,\n0x84130033,\n0x33310311,\n0x00850111,\n0x9e111001,\n0x01110122,\n0x10010089,\n0x01339811,\n0x00850111,\n0x9e211101,\n0x01110122,\n0x10010089,\n0x01339811,\n0x00840111,\n0x9f111001,\n0x0011ae22,\n0xae229f21\n);\n\nconst int rle_len_bytes = rle.length() << 2;\n\nint get_rle_byte( in int byte_index )\n{\n\tint long_val = rle[ byte_index >> 2 ];\n\treturn ( long_val >> ( ( byte_index & 0x03 ) << 3 ) ) & 0xff;\n}\n\nint get_uncompr_byte( in int byte_index )\n{\n\tint rle_index = 0;\n\tint cur_byte_index = 0;\n\twhile( rle_index < rle_len_bytes )\n\t{\n\t\tint cur_rle_byte = get_rle_byte( rle_index );\n\t\tbool is_sequence = int( cur_rle_byte & 0x80 ) == 0;\n\t\tint count = ( cur_rle_byte & 0x7f ) + 1;\n\n\t\tif( byte_index >= cur_byte_index && byte_index < cur_byte_index + count )\n\t\t{\n\t\t\tif( is_sequence )\n\t\t\t{\n\t\t\t\treturn get_rle_byte( rle_index + 1 + ( byte_index - cur_byte_index ) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn get_rle_byte( rle_index + 1 );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( is_sequence )\n\t\t\t{\n\t\t\t\trle_index += count + 1;\n\t\t\t\tcur_byte_index += count;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trle_index += 2;\n\t\t\t\tcur_byte_index += count;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n\nint getPaletteIndexXY( in ivec2 fetch_pos )\n{\n\tint palette_index = 0;\n\tif( fetch_pos.x >= 0 && fetch_pos.y >= 0\n\t\t&& fetch_pos.x < int( bitmap_size.x ) && fetch_pos.y < int( bitmap_size.y ) )\n\t{\n\t\tint uncompr_byte_index = fetch_pos.y * ( int( bitmap_size.x ) >> 1 )\n\t\t\t+ ( fetch_pos.x >> 1);\n\n\t\tint uncompr_byte = get_uncompr_byte( uncompr_byte_index );\n\n\t\tint nibble_index = fetch_pos.x & 0x01;\n\t\tpalette_index = ( uncompr_byte >> ( nibble_index << 2 ) ) & 0xf;\n\t}\n\treturn palette_index;\n}\n\n\nint getPaletteIndex( in vec2 uv )\n{\n\tint palette_index = 0;\n\tivec2 fetch_pos = ivec2( uv * bitmap_size );\n\tpalette_index = getPaletteIndexXY( fetch_pos );\n\treturn palette_index;\n}\n\nvec4 getColorFromPalette( in int palette_index )\n{\n\tint int_color = palette[ palette_index ];\n\treturn vec4( float( int_color & 0xff ) / 255.0,\n\t\t\t\tfloat( ( int_color >> 8 ) & 0xff) / 255.0,\n\t\t\t\tfloat( ( int_color >> 16 ) & 0xff) / 255.0,\n\t\t\t\t0 );\n}\n\nvec4 getBitmapColor( in vec2 uv )\n{\n\treturn getColorFromPalette( getPaletteIndex( uv ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / bitmap_size;\n\tfragColor = getBitmapColor( uv );\n}\n\n","name":"Image","description":"","type":"image"}]}