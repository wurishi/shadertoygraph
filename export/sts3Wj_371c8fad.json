{"ver":"0.1","info":{"id":"sts3Wj","date":"1622980001","viewed":157,"name":"Drum music","username":"katila4","description":"music drum learning","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["music","learining"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 DRUM_COLOR = vec3(255.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0);\nvec3 DRUM_SIDE_COLOR = vec3(203.0 / 255.0, 200.0 / 255.0, 217.0 / 255.0);\nvec3 DRUM_BACK_COLOR = vec3(149.0 / 255.0, 20.0 / 255.0, 51.0 / 255.0);\nvec3 EQUALIZER_COLOR = vec3(0.0, 1.0, 0.0);\nvec3 DRUMMER_COLOR = vec3(0.0, 0.0, 0.0);\nvec3 DRUMMER_FACE_COLOR = vec3(247.0 / 255.0, 212.0 / 255.0, 184.0 / 225.0);\nvec3 STICK_COLOR = vec3(168.0 / 255.0, 81.0 / 255.0, 72.0 / 255.0);\n\nvec3 BACK_COLOR = vec3(108.0 / 255.0, 41.0 / 255.0, 94.0 / 255.0);\nvec3 BACK_COLOR_2 = vec3(75.0 / 255.0, 59.0 / 255.0, 107.0 / 255.0);\n\nfloat TOTAL_PLAY_TIME = 0.95;\nint NUM_BREAKS = 192;\n\nfloat ShapeQuad(in vec2 st, in vec2 c, in vec2 sizeX, in vec2 sizeY){\n    \n    vec2 dist = st - c;\n    vec2 res = vec2(step(dist.x, sizeX.y) * step(-dist.x, sizeX.x), step(dist.y, sizeY.y) * step(-dist.y, sizeY.x));\n\treturn res.x * res.y;\n}\n\nfloat ShapeCircle(in vec2 st, in vec2 c, in float r)\n{\n    vec2 dist = st - c;\n\treturn float(1.0 - step(r, dot(dist, dist) * 2.0));\n}\n\nfloat ShapeCircle2(in vec2 st, in vec2 c, in float r, in vec2 coef)\n{\n    vec2 stC = st;\n    stC -= c;\n    stC *= coef;\n    stC += c;\n    \n    vec2 dist = stC - c;\n\tfloat v1 = float(1.0 - step(r, dot(dist, dist) * 2.0));\n    return v1;\n}\n\nvec3 Mult(vec3 color, vec3 origColor, float v)\n{\n    vec3 c = mix(color, origColor, v);\n    return c;\n}\n\nvec2 Rotate(in vec2 p, float a, in vec2 c)\n{\n    vec2 res = p;\n    \n    float sn = sin(a);\n    float cs = cos(a);\n    \n    res -= c;\n    \n    float x = res.x * cs - res.y * sn;\n    float y = res.x * sn + res.y * cs;\n    \n    res = vec2(x, y) + c;\n    \n    return res;\n}\n\nfloat GetTime()\n{\n    return iTime;\n}\n\nfloat GetTotalTime()\n{\n    return mod(GetTime(), TOTAL_PLAY_TIME) / TOTAL_PLAY_TIME;\n}\n\nvec3 DrawDrum1(in vec3 col, in vec2 uv, in vec2 pos, in float scale, in float scaleMult, in float bass)\n{\n    vec2 allUV = uv;\n    allUV -= pos;\n    allUV /= scale;\n    allUV += pos;\n    \n    vec2 topUV = uv;\n    topUV -= pos;\n    topUV /= scale * scaleMult;\n    topUV += pos;\n    \n    vec2 uvLeft = Rotate(allUV, 0.7 + 0.4 * bass, pos);\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(uvLeft, pos + vec2(0.6, 0.0), vec2(0.2, 0.14), vec2(0.02, 0.02)));\n    col = Mult(col, DRUM_BACK_COLOR, ShapeCircle(uvLeft, pos + vec2(0.7, 0), 0.01));\n    \n    col = Mult(col, DRUM_SIDE_COLOR, ShapeCircle(topUV, pos + vec2(-0.15 - 0.02, 0.01), 0.52));\n    col = Mult(col, DRUM_BACK_COLOR, ShapeCircle(topUV, pos + vec2(-0.15, 0.01), 0.52));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeCircle(topUV, pos, 0.52));\n    col = Mult(col, DRUM_COLOR, ShapeCircle(topUV, pos, 0.45));\n    \n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(topUV, pos + vec2(-0.29 - 0.3, -0.15), vec2(0.058, 0.13), vec2(0.01, 0.01)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(topUV, pos + vec2(-0.29 - 0.3, 0.15), vec2(0.058, 0.13), vec2(0.01, 0.01)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(topUV, pos + vec2(-0.2 - 0.3, 0.39), vec2(0.0, 0.19), vec2(0.01, 0.01)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(topUV, pos + vec2(-0.2 - 0.3, -0.39), vec2(-0.025, 0.19), vec2(0.01, 0.01)));\n    \n    vec2 uvRight = Rotate(allUV, -0.7 - 0.4 * bass, pos);\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(uvRight, pos + vec2(-0.6, 0.0), vec2(0.2, 0.04), vec2(-0.04, 0.08)));\n    col = Mult(col, DRUM_BACK_COLOR, ShapeCircle(uvRight, pos + vec2(-0.77, 0.06), 0.01));\n    \n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(allUV, pos + vec2(-0.21, 0.57), vec2(0.02, 0.02), vec2(0.07, 0.07)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(allUV, pos + vec2(0.11, 0.56), vec2(0.02, 0.02), vec2(0.07, 0.07)));\n    \n    col = Mult(col, DRUM_SIDE_COLOR, ShapeCircle(allUV, pos + vec2(0.11, 0.62), 0.005));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeCircle(allUV, pos + vec2(-0.21, 0.62), 0.005));\n    \n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(allUV, pos + vec2(-0.44, 0.62), vec2(0.2, 0.2), vec2(0.015, 0.015)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(allUV, pos + vec2(0.3, 0.62), vec2(0.2, 0.05), vec2(0.015, 0.015)));\n    \n    return col;\n}\n\nvec3 DrawDrum2(in vec3 col, in vec2 uv, in vec2 pos, in float scale, in float rot)\n{\n    vec2 allUV = uv;\n    allUV -= pos;\n    allUV /= scale;\n    allUV += pos;\n    \n    allUV = Rotate(allUV, rot, pos);\n    \n    col = Mult(col, DRUM_SIDE_COLOR, ShapeCircle2(allUV, pos + vec2(0.0, 0.085 + 0.01), 0.029, vec2(1.0, 2.5)));\n    col = Mult(col, DRUM_BACK_COLOR, ShapeQuad(allUV, pos, vec2(0.12, 0.12), vec2(0.085, 0.085)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeCircle2(allUV, pos + vec2(0.0, -0.085), 0.029, vec2(1.0, 2.8)));\n    col = Mult(col, DRUM_BACK_COLOR, ShapeCircle2(allUV, pos + vec2(0.0, 0.085), 0.029, vec2(1.0, 2.8)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(allUV, pos, vec2(0.005, 0.005), vec2(0.085, 0.14)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(allUV, pos + vec2(-0.11, -0.02), vec2(0.005, 0.005), vec2(0.075, 0.13)));\n    col = Mult(col, DRUM_SIDE_COLOR, ShapeQuad(allUV, pos + vec2(0.11, -0.02), vec2(0.005, 0.005), vec2(0.075, 0.13)));\n    return col;\n}\n\nvec3 DrawDrummer(in vec3 col, in vec2 uv, in vec2 pos, in float scale, in float bass1, in float bass2, in float mainBass)\n{\n    vec2 allUV = uv;\n    allUV -= pos;\n    allUV /= scale;\n    allUV += pos;\n    \n    vec2 allOffset = vec2(0.0, 0.2 * (mainBass + bass1) / 2.0);\n    vec2 headOffset = vec2(0.0, 0.05 * mainBass);\n    \n    col = Mult(col, DRUMMER_COLOR, ShapeQuad(allUV, pos + allOffset, vec2(0.12, 0.08), vec2(0.2, 0.05)));\n    col = Mult(col, DRUMMER_COLOR, ShapeCircle2(allUV, pos + vec2(-0.02, 0.05) + allOffset, 0.02, vec2(1.0, 2.5)));\n    col = Mult(col, DRUMMER_FACE_COLOR, ShapeQuad(allUV, pos + vec2(-0.005, 0.12) + headOffset + allOffset, vec2(0.05, 0.05), vec2(0.05, 0.05)));\n    \n    float handsLength = 0.12;\n    float handsRadius = 0.0012;\n    \n    // left\n    vec2 leftPos = pos + vec2(-0.1, 0.02) + allOffset;\n    vec2 leftX = vec2(handsLength, 0.0);\n    float leftAngle = 1.2 - 2.3 * bass1;\n    vec2 uvLeft = Rotate(allUV, leftAngle, leftPos);\n    col = Mult(col, DRUMMER_FACE_COLOR, ShapeQuad(uvLeft, leftPos, leftX, vec2(0.015, 0.015)));\n    \n    vec2 leftPos2 = leftPos - Rotate(leftX, -leftAngle, vec2(0.0, 0.0));\n    col = Mult(col, DRUMMER_FACE_COLOR, ShapeCircle2(allUV, leftPos2, handsRadius, vec2(1.0, 1.0)));\n    vec2 uvStickLeft = Rotate(allUV, 0.5, leftPos2);\n    col = Mult(col, STICK_COLOR, ShapeQuad(uvStickLeft, leftPos2, vec2(0.0035, 0.0035), vec2(0.0, 0.15)));\n    \n    // right\n    vec2 rightPos = pos + vec2(0.058, 0.02) + allOffset;\n    vec2 rightX = vec2(handsLength, 0.0);\n    float rightAngle = 2.1 + 2.05 * bass2;\n    vec2 uvRight = Rotate(allUV, rightAngle, rightPos);\n    col = Mult(col, DRUMMER_FACE_COLOR, ShapeQuad(uvRight, rightPos, rightX, vec2(0.015, 0.015)));\n    \n    vec2 rightPos2 = rightPos - Rotate(rightX, -rightAngle, vec2(0.0, 0.0));\n    col = Mult(col, DRUMMER_FACE_COLOR, ShapeCircle2(allUV, rightPos2, handsRadius, vec2(1.0, 1.0)));\n    vec2 uvStickRight = Rotate(allUV, -0.3, rightPos2);\n    col = Mult(col, STICK_COLOR, ShapeQuad(uvStickRight, rightPos2, vec2(0.0035, 0.0035), vec2(0.0, 0.15)));\n    \n    return col;\n}\n\nfloat GetPitch(int fragColumn)\n{ \n    float pitch = texture(iChannel0, vec2(float(fragColumn) / float(NUM_BREAKS), 0.0)).x;\n    return pitch;\n}\n\nfloat GetBass(in float p1, in float p2)\n{\n    float bass = 0.0;\n    int bassCount = 0;\n    for (int i = 0; i < NUM_BREAKS; ++i)\n    {\n        float p = GetPitch(i);\n        if (float(i) / float(NUM_BREAKS) <= p2 && float(i) / float(NUM_BREAKS) >= p1)\n        {\n            bass += p;\n            ++bassCount;\n        }\n    }\n    \n    bass /= float(bassCount);\n    return bass;\n}\n\nfloat GetMainBass()\n{\n    return clamp(GetBass(0.0, 0.01) - 0.6, 0.0, 1.0);\n}\n\nfloat GetBackBass()\n{\n    return clamp(GetBass(0.0, 0.02) - 0.8, 0.0, 1.0);\n}\n\nfloat GetSideBass1()\n{\n    return clamp(GetBass(0.3, 0.7) + 0.15, 0.0, 1.0);\n}\n\nfloat GetSideBass2()\n{\n    return clamp(GetBass(0.03, 0.09) - 0.03, 0.0, 1.0);\n}\n\nvec3 GetBack(in vec3 col, in vec2 uv, in vec2 pos, in float bass)\n{\n    col = Mult(col, vec3(0.0, 0.0, 0.0), bass); \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(1.0, 0.0, 0.0);\n\n    uv.x -= 0.25;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 pos = vec2(0.5, 0.5);\n    float allScale = 0.7;\n    \n    float mainBass = GetMainBass();\n    float sideBass1 = GetSideBass1();\n    float sideBass2 = GetSideBass2();\n    \n    float DRUM_SCALE = 0.5 + 0.15 * mainBass;\n    vec2 DRUM_OFFSET = vec2(0.0, 0.2 * mainBass);\n    \n    float DRUM_1_SCALE = 1.0 + 0.39 * sideBass1;\n    float DRUM_2_SCALE = 1.0 + 0.39 * sideBass2;\n    vec2 DRUM_1_OFFSET = vec2(0.2 * mainBass, 0.2 * mainBass) * allScale;\n    vec2 DRUM_2_OFFSET = vec2(-0.2 * mainBass, 0.2 * mainBass) * allScale;\n    \n    float DRUM_TOP_SCALE = 1.0;\n    vec2 DRUM_TOTAL_OFFSET = vec2(0.0, -0.25 + 0.07);\n    vec2 DRUMMER_OFFSET = vec2(0.0, -0.02 + 0.07);\n    \n    float backColorByBass = GetBackBass();//clamp((mainBass + sideBass1 + sideBass2) / 3.0 - 0.15, 0.0, 1.0);\n    col = BACK_COLOR;\n    col = GetBack(BACK_COLOR_2, uv, pos, backColorByBass);\n    \n    col = DrawDrummer(col, uv, pos + DRUMMER_OFFSET, 1.0, sideBass2, sideBass1, mainBass);\n    \n    col = DrawDrum2(col, uv, pos + vec2(0.28, 0.25 + 0.03) * allScale + DRUM_1_OFFSET + DRUM_TOTAL_OFFSET, allScale * DRUM_1_SCALE, -0.45);\n    col = DrawDrum1(col, uv, pos + DRUM_OFFSET + DRUM_TOTAL_OFFSET, DRUM_SCALE * allScale, DRUM_TOP_SCALE, mainBass);\n    col = DrawDrum2(col, uv, pos + vec2(-0.37, 0.25 + 0.03) * allScale + DRUM_2_OFFSET + DRUM_TOTAL_OFFSET, allScale * DRUM_2_SCALE, 0.45);\n    \n    for (int i = 0; i < NUM_BREAKS; ++i)\n    {\n        float p = GetPitch(i);\n        float w = 1.0 / float(NUM_BREAKS);\n        float h = p;\n        //col = Mult(col, EQUALIZER_COLOR, ShapeQuad(uv, pos + vec2(-0.5, -0.5) + vec2(float(i) * w, 0.0), vec2(w / 2.0, w / 2.0), vec2(0.0, h * 0.5)));\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}