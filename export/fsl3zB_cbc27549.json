{"ver":"0.1","info":{"id":"fsl3zB","date":"1616169612","viewed":415,"name":"Convolution Kernel Feedback Fun","username":"clepirelli","description":"Made for the willstall challenge - 1 shader a week keeps the depression meek\n\nMany thanks to cornusammonis for suggesting great improvements such as removing needless aspect ratio correction of pixelSize and clamping between -1 and 1","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["blob","challenge","kernel","willstall"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//play around with the variables in the Common tab!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz + min(iTime, 1.0);\n    \n    if(usingPalette)\n        col = pal( rgbToLuminance(col).r, palette);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///////////////////////////////////////////////////////////////////////////////////////\n//Config\nconst bool fullColor = true; //true: RGB color, false: black and white\nconst float percentagePerTick = .15; //applyKernel takes beforeKernel + percentagePerTick * afterKernel\n\nconst bool usingPalette = true; //true: luminance gets converted to palette\n#define palette \\\n    vec3(0.5,0.5,0.5),\\\n    vec3(0.5,0.5,0.5),\\\n    vec3(1.0,1.0,1.0),\\\n    vec3(0.0,0.10,0.20) \n\n#define bufferAKernel sharpenKernel\n#define bufferBKernel gaussianKernel\n\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst float noopKernel[9] = float[9](.0,.0,.0,.0,1.,.0,.0,.0,.0);\nconst float sharpenKernel[9] = float[9](1.,1.,1.,1.,-8.,1.,1.,1.,1.);\nconst float blurKernel[9] = float[9](1./9., 1./9., 1./9., 1./9.,  1./9.,  1./9.,  1./9.,  1./9.,  1./9.);\nconst float laplacianKernel[9] = float[9](.0, -1., .0, -1., 4., -1., .0, -1., .0);\nconst float gaussianKernel[9] = float[9](1./16., 1./8., 1./16., 1./8., 1./4., 1./8., 1./16., 1./8., 1./16.);\nconst float highPassKernel[9] = float[9](-1./9.,-1./9.,-1./9.,-1./9.,8./9.,-1./9.,-1./9.,-1./9.,-1./9.);\n\nvec3 applyKernel(vec2 uv, vec2 resolution, sampler2D image, float kernel[9])\n{\n    vec2 pixelSize = 1./resolution.xy;\n    \t\n    vec3 beforeKernel = texture(image, uv).xyz;\n    vec3 afterKernel = vec3(.0);\n    for(int i = 0; i < 3; i++)\n    for(int j = 0; j < 3; j++)\n    {\n        vec2 sampleUV = uv + vec2(float(i-1), float(j-1)) * pixelSize;\n        afterKernel += texture(image, sampleUV).xyz * kernel[j*3+i];\n    }\n    \n    return clamp(beforeKernel + percentagePerTick *afterKernel,-1., 1.);\n}\n\nvec3 rgbToLuminance(vec3 col)\n{\n    return vec3(0.2126*col.r + 0.7152*col.g + 0.0722*col.b);\n}\n\n//from iq: https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n#define kernelMain(kernel) \\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \\\n{\\\n    vec2 uv = fragCoord/iResolution.xy;\\\n    if(iTime > .5)\\\n    {\\\n        fragColor = vec4(applyKernel(uv, iResolution.xy, iChannel0, kernel), 1.0);\\\n    } else \\\n    {\\\n        vec4 col = texture(iChannel1, uv); \\\n        fragColor = fullColor ? col-.5 : vec4(rgbToLuminance(col.xyz)-.5, 1.0);\\\n    }\\\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nkernelMain(bufferAKernel)","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nkernelMain(bufferBKernel)","name":"Buffer B","description":"","type":"buffer"}]}