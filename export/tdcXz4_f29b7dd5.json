{"ver":"0.1","info":{"id":"tdcXz4","date":"1571538088","viewed":93,"name":"Phillips spectrum(correct versio","username":"mgjunior","description":"Phillips spectrum(correct version)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spectrum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Gently_flapping_the_wings 1\n\n//I go formula from here\n//https://zhuanlan.zhihu.com/p/64414956\n\nconst float two_Pi =6.28;\nconst float A=2.;\nvec2 wind= vec2(1.,0.);\nconst float V=1000.;\nconst float g=9.8;\nfloat L=V*V/g;\n\nvec2 complex_multiply(vec2 c1,vec2 c2){\n    float x = c1.x;\n    float y = c1.y;\n    float a = c2.x;\n    float b = c2.y;\n    return vec2(a * x - b * y,a * y + b * x);\n}\n\nfloat random(vec2 v)\n{\n    float seed_x=1113.;\n    float seed_y=11.5;\n    return fract(sin(dot(v,vec2(seed_x,seed_y)))*43758.54534 );\n}\n\nfloat random_clamp(vec2 v){\n    // need clamp beacuse \n    // https://www.geogebra.org/m/dpvqeczu\n\treturn clamp(random(v),0.001,1.);\n}\n\n// https://www.geogebra.org/m/dpvqeczu\nvec2 gaussian_distribution(vec2 u){\n    float u1=u.x;\n    float u2=u.y;\n    \n    // Box-Muller\n    // https://zhuanlan.zhihu.com/p/67776340\n    float r =sqrt(-2.*log(u1));\n    return vec2(r*cos(two_Pi*u2),r*sin(two_Pi*u2));\n}\n\n// https://zhuanlan.zhihu.com/p/64414956\nfloat Pn(vec2 k,float K){\n    float K2 =K*K;\n    float KL =K*L;\n    float dot_k_wind=abs(dot(k,wind));\n    return  A/(K2*K2) * exp(-1./(KL*KL)) * dot_k_wind * dot_k_wind;\n}\n\nvec2 h0(vec2 k,vec2 E,float K){\n    float S =sqrt(Pn(k,K)/2.);\n    //return vec2(S);\n\treturn S*E;\n}\n\nvec2 h0_conjugate(vec2 k,vec2 E,float K){\n    vec2 c_h0=h0(k,E,K);\n    return vec2(c_h0.x,-c_h0.y);\n}\n\nfloat w(float k){\n\treturn sqrt(g*k);\n}\n\nvec2 e_i(float x){\n\treturn vec2(cos(x),sin(x));\n}\n\n// n 0.~1.\nvec2 h(vec2 n,vec2 k,float t){\n \n    \n#if Gently_flapping_the_wings\n    //static,now this butterfly is Gently flapping her wings\n\tvec2 t1=k;\n#else\n    \n    // dynamic,this butterfly is powerfully flapping her wing\n    // use this version to do inverse of FFT, will get interesting result\n    vec2 t1=k+t;\n#endif\n    \n    float range =10.;\n    vec2 offset1 =mod(t1,range);\n    vec2 offset2 =mod(t1+vec2(0.45,0.99),range);\n    vec2 offset3 =mod(t1+vec2(0.15,-0.6),range);\n    vec2 offset4 =mod(t1+vec2(-0.9,0.01),range);\n    \n    \n    vec2 E1=gaussian_distribution(vec2(random_clamp(offset1),random_clamp(offset2)));\n    vec2 E2=gaussian_distribution(vec2(random_clamp(offset3),random_clamp(offset4)));\n    \n    //return offset1;\n    //return vec2(random(offset1));\n    //return E2;    \n    \n    float K=length(k);\n    K=(K>0.0001)?K:0.0001;\n    //return e_i(-w(K)*t);\n    //return complex_multiply(h0(k,E1,K) , e_i(w(K)*t));\n    //return complex_multiply(h0_conjugate(-k,E2,K) , e_i(-w(K)*t));\n    return complex_multiply(h0(k,E1,K) , e_i(w(K)*t))\n\t+complex_multiply(h0_conjugate(-k,E2,K) , e_i(-w(K)*t));     \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;// maybe (ratio,1.);\n   \tvec2 offset =iResolution.xy/iResolution.yy;\n    \n    // Output to screen\n    float t=(two_Pi*iTime);\n    vec2 k = uv*2.-offset;// y to -1~1, x to -ratio~ratio\n    k*=0.5;\n    \n    \n    if(k.x>1. || k.x<-1.)\n        fragColor=vec4(0.,0.,0.,1.);\n    else    \n    \tfragColor = vec4(h(uv.xy,k,t),0.,1.);\n}","name":"Image","description":"","type":"image"}]}