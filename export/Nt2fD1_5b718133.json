{"ver":"0.1","info":{"id":"Nt2fD1","date":"1652550840","viewed":200,"name":"raymarch texture","username":"axelduch","description":"n/a","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","domainrepetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 80\n#define MAX_DIST 100.0f\n#define SURFACE_DIST .09f\n\nvec4 sphere = vec4(0, 0, 0, .5);\n    \nfloat dist_field(vec3 p) {\n    vec3 pSphere = vec3(p - sphere.xyz);\n    float dS = length(mod(vec3(pSphere.x+iMouse.x/10., pSphere.y+iTime*1., pSphere.z+iTime*2.), 3.) - 1.5)-sphere.w;\n    \n    return dS;\n}\n\n\nvec3 get_normal(vec3 p) {\n    vec2 e = vec2(.01, 0);\n    float d = dist_field(p);\n    vec3 n = vec3(\n        d-dist_field(p-e.xyy),\n        d-dist_field(p-e.yxy),\n        d-dist_field(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\n\nfloat ray_march(vec3 ro, vec3 rd) {\n    float dist = 0.0f;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + dist * rd;\n        \n        float _dist = dist_field(p);\n        \n        dist += _dist;\n        \n        if (_dist < SURFACE_DIST || dist > MAX_DIST) break;\n    }\n    \n    return dist;\n}\n\n\nfloat get_light(vec3 light_pos, vec3 p) {\n    vec3 l = normalize(light_pos - p);\n    vec3 n = get_normal(p);\n    \n    float diffuse = clamp(dot(n, l), .0, 1.);\n    float d = ray_march(p+n*SURFACE_DIST*2.0, l);\n    float specular = pow(max(dot(normalize(l), reflect(-l, n)), 0.0), 64.);\n    if (d<length(light_pos-p)) {\n        diffuse *= .1;\n        specular = 0.;\n    }\n    \n    return diffuse + specular;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(.5);\n    vec3 ro = vec3(0, 1, -5);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = ray_march(ro, rd);\n    \n    \n    vec3 p = ro + rd * d;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n   \n    if (d <= MAX_DIST) {\n        float light =  get_light(vec3(-3,3,0), p);\n        \n        col = texture(iChannel0, vec2(p.xy)).xyz;\n        //col.y = col.z = col.x;\n        col *= vec3(light) + vec3(get_light(vec3(0,1,4), p));\n    } else {\n        col = vec3(texture(iChannel1, uv)) * 1.;\n    }\n    \n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col , 1.0);\n}","name":"Image","description":"","type":"image"}]}