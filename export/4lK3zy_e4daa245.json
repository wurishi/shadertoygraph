{"ver":"0.1","info":{"id":"4lK3zy","date":"1475266496","viewed":548,"name":"quilted","username":"jhereg00","description":"Posterizes image then \"indents\" the edges to give a quilted effect.  Needs some kind of smoothing.","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["2d","filter","posterize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float posterLevelRange = 1.0 / 3.0;\nconst vec3 softenColor = vec3(\n    0.89901,\n    0.34182,\n    0.73725);\nconst float colorWeight = 1.0;\nconst int roundDist = 24;\nconst float roundAmount = 0.3;\nconst int averageDist = 2;\n\nvec3 getGrayscale ( in vec3 origColor ) {\n    return vec3 (\n        origColor.r * 0.21 +\n        origColor.g * 0.72 +\n        origColor.b * 0.07);\n}\n\nvec3 getPosterColor ( in vec3 trueColor ) {\n    // up saturation a bit\n    vec3 grayscale = getGrayscale(trueColor);\n    vec3 modColor = mix(trueColor, grayscale, -0.5);\n    // up contrast, but skew light\n    modColor = clamp(modColor * 2.0 - 0.4, 0.0, 1.0);\n    return vec3 (\n        (floor(modColor.r / posterLevelRange + 0.5)) * posterLevelRange,\n        (floor(modColor.g / posterLevelRange + 0.5)) * posterLevelRange,\n        (floor(modColor.b / posterLevelRange + 0.5)) * posterLevelRange);\n}\nfloat easeIn ( in float perc ) {\n    return perc * perc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = vec2(1.0) / iResolution.xy;\n    vec3 color = vec3(0.0,0.0,0.0);//texture(iChannel0, uv).rgb;\n    // get an average of all the colors around this texel\n    for (int x = -averageDist; x <= averageDist; x++) {\n        for (int y = -averageDist; y <= averageDist; y++) {\n            vec4 texelColor = texture(iChannel0, uv + (vec2(texelSize.x * float(x), texelSize.y * float(y))));\n            color += texelColor.rgb * texelColor.a;\n        }\n    }\n    color /= (pow(float(2 * averageDist + 1), 2.0));\n    \n    vec3 overlay = getGrayscale(texture(iChannel1, uv).rgb);\n    vec3 posterColor = getPosterColor(color);\n    \n    float brighten = 0.0;\n    float darken = 0.0;\n    vec3 testUp;\n    vec3 testDown;\n    for (int offset = roundDist; offset > 0; offset--) {\n        testUp = texture(iChannel0, uv + (vec2(float(offset) * -.25, float(offset) * 1.0) / iResolution.xy)).rgb;\n        testUp = getPosterColor( testUp );\n        testDown = texture(iChannel0, uv + (vec2(float(offset) * .25, float(offset) * -1.0) / iResolution.xy)).rgb;\n        testDown = getPosterColor( testDown );\n        if (testUp != posterColor) {\n        \tbrighten = easeIn ( 1.0 - float(offset) / float(roundDist) );\n            //posterColor = testUp;// * vec3(1.0,0.0,0.0);//vec3(easeIn ( (float(3) / float(roundDist)) ));\n        }\n        if (testDown != posterColor) {\n            darken = easeIn ( 1.0 - float(offset) / float(roundDist) );\n        }\n    }\n    \n    fragColor = vec4(\n        posterColor * colorWeight\n        + softenColor * (1.0 - colorWeight)\n        + vec3(brighten * roundAmount)\n        - vec3(darken * roundAmount)\n        + (overlay / 14.0 - 0.07)\n        , 1.0);\n}","name":"Image","description":"","type":"image"}]}