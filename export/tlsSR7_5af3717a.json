{"ver":"0.1","info":{"id":"tlsSR7","date":"1562515509","viewed":419,"name":"Behind Glass Bricks","username":"104","description":"modulation in layers","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// credits: Dave_Hoskins Hash functions: https://www.shadertoy.com/view/4djSRW\n\nconst float layers = 4.;\nconst float layerDrift = 0.3;\n\nconst float PI = 3.141592654;\n\nmat2 rot2D(float r){\n    float c = cos(r), s = sin(r);\n    return mat2(c, s, -s, c);\n}\nfloat nsin(float x) {return sin(x)*.5+.5; }\nvec2 nsin(vec2 x) {return sin(x)*.5+.5; }\nvec3 hash32(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n// returns { RGB, dist to edge (0 = edge, 1 = center) }\nvec4 disco(vec2 uv) {\n    float v = abs(cos(uv.x * PI * 2.) + cos(uv.y *PI * 2.)) * .5;\n    uv.x -= .5;\n    vec3 cid2 = hash32(vec2(floor(uv.x - uv.y), floor(uv.x + uv.y))); // generate a color\n    return vec4(cid2, v);\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord)\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = fragCoord / R;\n    uv.x *= R.x / R.y; // aspect correct\n\n    float t = (iTime+200.) * .6; //t = 0.;\n    uv *= 21.;\n    uv *= rot2D(sin(t*2.)*.03);\n    uv.x += t*3.;\n    \n    // start with tile pattern\n    vec2 uv2 = uv;\n    uv2 += t*layerDrift;// sync with below; pattern drift\n    uv2 = sin(uv2-PI*.5)*.5+.5;// sync with below. actually i have no idea why -PI/2\n    o.r = min(uv2.x,uv2.y);// grid pattern\n    o = vec4(pow(o.r, .4));\n    o = clamp(o, 0.,.6)/.6;// plateau\n\n    // layer in bricks\n    for(float i = 0.; i <=layers; ++i) {\n        uv += sin(uv+t*layerDrift)*(1.+sin(t)*.3);\n        vec4 d = disco(uv);\n        d.a = pow(d.a, .2);//sin(t*1.2+i)*.5+.5\n        o *= clamp(d*d.a,.25, 1.);\n    }\n\n    // post\n    o = clamp(o,.0,1.);\n    vec2 N = (fragCoord / R )- .5;// norm coords\n    o = 1.-pow(1.-o, vec4((layers - .5) * 12.));// curve\n    o.rgb += hash32(fragCoord + iTime).r*.07;//noise\n    o *= 1.1-step(.4,abs(N.y));\n    o *= 1.0-dot(N,N*2.);// vingette\n    o.a = 1.;\n}\n\n\n","name":"Image","description":"","type":"image"}]}