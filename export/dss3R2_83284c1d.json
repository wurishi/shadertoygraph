{"ver":"0.1","info":{"id":"dss3R2","date":"1666473187","viewed":87,"name":"simple column 2d sdf","username":"jt","description":"A simple column sdf - rotate to get 3d column (used e.g. [url=https://www.shadertoy.com/view/ddsGz2]here[/url]).","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","sdf","column"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dss3R2 simple column sdf by jt\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n/*\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p)\n{\n    vec2 q = abs(p) - 1.0;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n*/\nfloat column0(vec2 p, float s) // variant: branching\n{\n    p = abs(p);\n    float t = 1.0 - s;\n    if(p.x > s && p.y < t) return min(p.x, 1.0-p.y);\n    return s-length(vec2(min(p.x,s)-s,max(t,p.y)-t));\n}\n\nfloat column1(vec2 p, float s) // variant: constructed from scratch\n{\n    p = abs(p);\n    float t = 1.0 - s;\n    return s-length(vec2(min(p.x,s)-s,max(t,p.y)-t))+min(max(0.0,p.x-s), max(0.0,1.0-p.y-s));\n}\n\nfloat column2(vec2 p, float t) // variant: based on box\n{\n    p.x=clamp(p.x,-1.0,+1.0);\n    p.x = abs(p.x) - 1.0;\n    t *= 2.0;\n    float s = 1.0 + t;\n    p = abs(p*s) - 1.0;\n    return -(min(max(p.x,p.y),0.0) + length(max(p,0.0))-t)/s;\n}\n\nfloat sdf(vec2 p)\n{\n    //return -sdBox((p+vec2(0.5,0))*2.0)/2.0; // for comparison\n    float t = 0.5;\n    float s = 0.1;\n    //return (column0(p*2.0, t)-s)/2.0;\n    //return (column1(p*2.0, t)-s)/2.0;\n    return (column2(p*2.0, t)-s)/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    float d = sdf(p);\n\n    // using iq's sdf visualization\n    vec3 col = (d < 0.0) ? vec3(0.6,0.8,1.0) : vec3(0.9,0.6,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n\tcol *= 1.0 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    if(iMouse.x > 0.001)\n    {\n        d = sdf(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0015));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}