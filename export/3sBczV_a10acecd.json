{"ver":"0.1","info":{"id":"3sBczV","date":"1587023170","viewed":139,"name":"Continous gradient WIP.","username":"afraidofdark","description":"contunous gradient multi pass optimization.\n\nAdopted from https://www.shadertoy.com/view/XtK3Dd\n\nOriginal kernel equation divided into two for x and y passes (kernelX - KernelY). And for each gradient direction (RX - RY), a different radious can be given.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["multipass","continousgradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 viewport(vec2 p)\n{   \n    return p/(iResolution.xy);\n}\n\nvec2 sampleImage0(vec2 coord){\n   return texture(iChannel0,viewport(coord)).xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 col = sampleImage0(fragCoord);\n    float x2 = pow(col.x, 2.);\n    float y2 = pow(col.y, 2.);\n    float rx4 = pow(RX2f, 2.);\n    float ry4 = pow(RY2f, 2.);\n    \n    float derivative = sqrt( (x2/rx4 + y2/ry4) );\n    fragColor.rgb = vec3(pow3(derivative,1./GAMMA));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 viewport(vec2 p)\n{   \n    return p/(iResolution.xy);\n}\n\nfloat sampleImage(vec2 coord){\n   return pow3(texture(iChannel0,viewport(coord)).r,GAMMA);\n}\n\n// X pass\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float colX = float(0.);\n    float colY = float(0.);\n    float coeff;\n    \n    // X gradient direction.\n    for( int i = -RX ; i <= RX ; i++ ){\n        coeff = kernelX(i, RXf, RX2f);\n        colX += coeff*sampleImage(fragCoord.xy+vec2(i,0));\n    }\n    \n    // Y gradient direction.\n    for( int i = -RY ; i <= RY ; i++ ){\n        coeff = kernelX(i, RYf, RY2f);\n        colY += coeff*sampleImage(fragCoord.xy+vec2(0,i));\n    }\n    \n    fragColor.rgb = vec3(colX, colY, 0.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define RX (1)\n#define RY (1)\n#define RXf (float(RX))\n#define RX2f (pow(RXf, 2.))\n#define RYf (float(RY))\n#define RY2f (pow(RYf, 2.))\n\n#define GAMMA       (2.2)\n#define pow3(x,y)      (pow( max(x,0.) , y ))\n\nfloat kernelX(int a, float r, float r2){\n    return float(a)*exp(-float(a*a)/r2)/r;\n}\n\nfloat kernelY(int b, float r2){\n    return exp(-float(b*b)/r2);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 viewport(vec2 p)\n{   \n    return p/(iResolution.xy);\n}\n\nvec2 sampleImage(vec2 coord){\n   return texture(iChannel0,viewport(coord)).xy;\n}\n\n// Y pass.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float colX = float(0.);\n    float colY = float(0.);\n    float coeff;\n    \n    // X gradient direction.\n    for( int i = -RX ; i <= RX ; i++ ){\n        coeff = kernelY(i, RX2f);\n        colX += coeff*sampleImage(fragCoord.xy+vec2(0,i)).x;\n    }\n    \n    // Y gradient direction.\n    for( int i = -RY ; i <= RY ; i++ ){\n        coeff = kernelY(i, RY2f);\n        colY += coeff*sampleImage(fragCoord.xy+vec2(i,0)).y;\n    }\n    \n    fragColor.rgb = vec3(colX, colY, 0.);\n}","name":"Buffer B","description":"","type":"buffer"}]}