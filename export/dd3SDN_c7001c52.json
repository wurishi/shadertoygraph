{"ver":"0.1","info":{"id":"dd3SDN","date":"1679802384","viewed":69,"name":"Simple calibration check","username":"jmpep","description":"Simple shader to check display calibration (in particular, gamma correction).","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["calibration","srgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Very simple calibration shader\n//\n// There are 8 rows in this shader. The first two show grey, the next two red, the next two green and the next two blue.\n// Odd rows show a solid color. Even rows show a checkeboard pattern of color + 0.1 and color - 0.1, which, in correctly calibrated \n// displays, should be indistinguisable from the solid color on the row above.\n//\n// This shader also highlights the importance of proper sRGB output. Press the left mouse button on it to see the same shader\n// without gamma correction. Since the display assumes sRGB, it will undo the gamma of the already linear output and it will\n// mess up the colors, in a way that they don't mix correctly anymore.\n// --------------------------------------\n\n#define DISTANCE 0.1 // any value from 0.0 to 0.5. The checkerboard pattern will approximate the solid colors by using (color + distance) and (color - distance).\n                     // 0.5 would result in the starndard test.\n\n// from: https://www.shadertoy.com/view/lscSzl\nvec3 encodeSRGB(vec3 linearRGB)\n{\n    vec3 a = 12.92 * linearRGB;\n    vec3 b = 1.055 * pow(linearRGB, vec3(1.0 / 2.4)) - 0.055;\n    vec3 c = step(vec3(0.0031308), linearRGB);\n    return mix(a, b, c);\n}\n\nvec3 pattern(in vec2 fragCoord, in vec3 diff, in vec3 target) {\n    if (int(fragCoord.x + fragCoord.y) % 2 == 0) {\n        return vec3(target + diff);\n    } else {\n        return vec3(target - diff);            \n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // compute row and column\n    int num_rows = 8;\n    int num_cols = 8;\n    \n    int col = int(uv.x * float(num_cols));\n    int row = int((1.0 - uv.y) * float(num_rows));\n\n    vec3 color = vec3(0.0);\n    \n    // Grey\n    if (row == 0) {\n       color = mix(vec3(DISTANCE), vec3(1.0 - DISTANCE), float(col) / float(num_cols));\n    }\n    else if (row == 1) {\n       color = pattern(fragCoord, vec3(DISTANCE), mix(vec3(DISTANCE), vec3(1.0 - DISTANCE), float(col) / float(num_cols)));\n    }    \n    \n    // Red\n    else if (row == 2) {\n       color = mix(vec3(DISTANCE, 0.0, 0.0), vec3(1.0 - DISTANCE, 0.0, 0.), float(col) / float(num_cols));\n    }\n    else if (row == 3) {\n       color = pattern(fragCoord, vec3(DISTANCE, 0.0, 0.0), mix(vec3(DISTANCE, 0.0, 0.0), vec3(1.0 - DISTANCE, 0.0, 0.0), float(col) / float(num_cols)));\n    }      \n    \n    // Green\n    else if (row == 4) {\n       color = mix(vec3(0.0, DISTANCE, 0.0), vec3(0.0, 1.0 - DISTANCE, 0.0), float(col) / float(num_cols));\n    }\n    else if (row == 5) {\n       color = pattern(fragCoord, vec3(0.0, DISTANCE, 0.0), mix(vec3(0.0, DISTANCE, 0.0), vec3(0.0, 1.0 - DISTANCE, 0.0), float(col) / float(num_cols)));\n    }   \n    \n    // Blue\n    else if (row == 6) {\n       color = mix(vec3(0.0, 0.0, DISTANCE), vec3(0.0, 0.0, 1.0 - DISTANCE), float(col) / float(num_cols));\n    }\n    else if (row == 7) {\n       color = pattern(fragCoord, vec3(0.0, 0.0, DISTANCE), mix(vec3(0.0, 0.0, DISTANCE), vec3(0.0, 0.0, 1.0 - DISTANCE), float(col) / float(num_cols)));\n    }      \n    \n    // convert to sRGB\n    if (sign(iMouse.z) <= 0.0) {\n        color = encodeSRGB(color);\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}