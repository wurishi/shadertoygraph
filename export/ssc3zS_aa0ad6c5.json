{"ver":"0.1","info":{"id":"ssc3zS","date":"1650113880","viewed":38,"name":"Ferris - over relax","username":"Ferrisfox","description":"optimizations for ray-marching using relaxation technique","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","optimization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Essential RM options\n#define MAX_STEPS 500.\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n// Optimixation\n#define RELAX 1.7\n\n// Stress testing\n#define STRESS 1.\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p)-r;\n}\n\nfloat GetDist( vec3 p ) {\n    float d = MAX_DIST;\n    #define GD(x); d = min(d,x);\n    GD(sdSphere(p,1.));\n    GD(p.y);\n    \n    // stressful loop used to lower framerate for testing\n    for(int i=0; float(i)<STRESS; i+=1){\n        if(fract(atan(p.x))>.5) {\n            d += 0.0000001;\n        }\n        if(fract(cos(p.y))>.5) {\n            d -= 0.0000001;\n        }\n        if(fract(sin(p.z))>.5) {\n            d += 0.0000001;\n        }\n    }\n    \n    return d;\n}\n\n\nbool raymarch( in vec3 ro, in vec3 rd, out float dO, out vec3 p ) {\n    dO = 0.;\n    float i = 0.;\n    #ifdef RELAX\n    bool r = true;\n    float dSp = MAX_DIST;\n\n    for(; i<MAX_STEPS; ++i) {\n        p = (rd * dO) + ro; //MAD\n        float dS = GetDist(p);\n        if ( dS + dSp > dSp * RELAX ) break;\n        dO += dS * RELAX; //MAD\n        dSp = dS;\n        if ( abs(dS) < SURF_DIST || dO > MAX_DIST ) break;\n    }\n    #endif\n    \n    for(; i<MAX_STEPS; ++i) {\n        p = (rd * dO) + ro; //MAD\n        float dS = GetDist(p);\n        dO += dS;\n        if ( abs(dS) < SURF_DIST || dO > MAX_DIST ) break;\n    }\n    return ( abs(GetDist(p)) < SURF_DIST );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (iResolution.xy*-.5 + fragCoord)/iResolution.y; //MAD INV MAD\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0,1,-3);\n    vec3 rd = normalize(uv.xyy*vec3(1,1,0)+vec3(0,0,1)); //MAD normalize \n\n    float d = 0.;\n    vec3 p = vec3(0);\n    bool h = raymarch(ro,rd,d,p);\n    d = h ? d : 0.;\n    col += d*0.1;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}