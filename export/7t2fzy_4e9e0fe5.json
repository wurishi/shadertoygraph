{"ver":"0.1","info":{"id":"7t2fzy","date":"1652396578","viewed":97,"name":"SimpleArrow","username":"isak","description":"Just a simple arrow, pointing in the direction you need to go. No political leanings intended xD","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["arrow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -- a rectangular representation of a line starting at a and ending at b with width w\n//\n// -> uv is normalized uv input\n// -> a  is the starting point of the line\n// -> b  is the ending point of the line\n// -> w  is the width of the line\n//\n// -- there is no padding in the direction of the line, it starts and ends ate (a, b)\nfloat rect_line(in vec2 uv, in vec2 a, in vec2 b, in float w) {\n    \n    vec2 ev = b - a;\n    float L = length(ev);\n    vec2 u = ev/L;\n    vec2 v = vec2(-u.y, u.x); \n    \n    vec2 UV = uv - a;\n    UV = vec2(dot(UV, u), dot(UV,v));\n    \n    \n    float dist = length(UV - clamp(UV, -vec2(0.0, w), vec2(L,w)));\n    \n    return dist;\n}\n\n// -- a rectangular arrow representation of a line starting at a and ending at b with width w\n//\n// -> uv is normalized uv input\n// -> a  is the starting point of the line\n// -> b  is the ending point of the line\n// -> w  is the width of the line\n//\n// -- there is no padding in the direction of the line, it starts and ends ate (a, b)\nfloat arrow_line(in vec2 uv, in vec2 a, in vec2 b, in float w) {\n    \n    uv -= a;\n    vec2 ev = b - a;\n    float L = length(ev);\n    vec2 u = ev/L;\n    vec2 v = vec2(-u.y, u.x); \n    uv = vec2(dot(uv, u), dot(uv, v));\n    \n    vec2 uvr = uv;\n    uvr.y = -abs(uvr.y);\n    \n    vec2 dx = (L - sqrt(2.0)*w)*vec2(1.0, 0.0);\n    float ff = rect_line(uvr, dx + w*normalize(vec2(1.0)), -3.0*w*vec2(1.0) + dx, w);\n    \n    \n    float dist = min(ff, length(uv - clamp(uv, -vec2(0.0, w), vec2(L - w,w))));\n    \n    return dist;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n  \n    vec2 uv = fragCoord.xy;\n    uv -= 0.5*iResolution.xy;\n    uv /= 0.5*iResolution.y;\n    \n  \n    fragColor = vec4(1.0);  \n    \n    float DX = iResolution.x/iResolution.y;\n    \n    float ff = arrow_line(uv, DX*vec2(-1, 0.0), DX*vec2(1.0, 0.0), 0.2);\n    \n    fragColor *= smoothstep(ff, 0.0, 0.001);\n    \n}","name":"Image","description":"","type":"image"}]}