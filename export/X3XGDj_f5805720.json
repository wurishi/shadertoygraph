{"ver":"0.1","info":{"id":"X3XGDj","date":"1707910841","viewed":91,"name":"Just something","username":"FFFFFFear1","description":"Just some playing with uv :)\nI completely forgot what i wanna do on the start, but anyway there is a result and a love it!","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define float2x2 mat2\n\nvec2 _rhombusVector = vec2(1.5, 1.5);\nfloat _speedColor = .6;\nfloat _tilling = 1.;\n\nfloat2x2 getRotationMatrix(float theta) {\n    float s = sin(theta);\n    float c = cos(theta);\n    \n    return float2x2(c,-s,s,c);\n}\n\nvec3 colorPalette(float t)\n{\n    vec3 a = vec3(0.910, 0.710, 0.710);\n    vec3 b = vec3(0.331, -0.147, 0.405);\n    vec3 c = vec3(0.390, 0.272, 0.390);\n    vec3 d = vec3(-1.882, 0.333, 0.667);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat drawLine(vec2 uv, vec2 startPoint, vec2 endPoint, float widthLine, float distanceLine, vec2 anchor) {\n    float halfWidthLine = widthLine * .5f;\n    \n    vec2 pos = uv;\n    vec2 vector = endPoint - startPoint;\n    float angle = 0.f;\n    \n    if (vector.x > 0.f && vector.y == 0.f) {\n        angle = 90.f;\n    }\n    else if (vector.x == 0.f && vector.y > 0.f) {\n        angle = 0.f;\n    }\n    else {\n        angle = (90.f / (vector.x + vector.y));\n    }\n    \n    pos *= getRotationMatrix(angle * 0.0174f);\n    \n    float A = step(-halfWidthLine, pos.x + anchor.x) - (step(distanceLine, pos.y + anchor.y) + step(distanceLine, -pos.y - anchor.y));\n    float B = step(-halfWidthLine, -pos.x - anchor.x) - (step(distanceLine, pos.y + anchor.y) + step(distanceLine, -pos.y - anchor.y));\n    \n    \n    return A * B;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    vec2 uvColor = uv;\n    \n    vec2 pos = uv;\n    vec3 finalColor = vec3(0);    \n    \n    float angle = 1. - sin(iTime+ cos(uvColor.x));\n    \n    if(angle * 0.0174f >= 45.) {\n        angle = 180. / 0.0174f;\n    }\n    \n    float2x2 rotateMat = getRotationMatrix(angle);\n    \n    float line1;\n    float line2;\n    float line3;\n    float line4;\n    float lines;\n    vec3 color;    \n    \n    for(float i = 0.; i < 7.; i++)\n    { \n        \n        line1 = drawLine((pos - vec2(-(i / 10.),  (i / 10.)))* rotateMat, vec2(-.5f, -.5f), vec2(-.5f, .5f), .05f - (i / 10.), 1.f, vec2(.0f, 6.f));\n        line2 = drawLine((pos - vec2((i / 10.), -(i / 10.))) * rotateMat, vec2(.0f, -.5f), vec2(-.5f, -.5f), .05f - (i / 10.), 1.f,vec2(.0f, 5.f));\n        line3 = drawLine((pos - vec2( (i / 10.), (i / 10.))) * rotateMat, vec2(-.5f, .5f), vec2(.5f, .5f), .05f - (i / 10.), 1.f, vec2(.0f, 5.f));\n        line4 = drawLine((pos - vec2(-(i / 10.), -(i / 10.))) * rotateMat, vec2(.0f, .0f), vec2(-.5f, -.5f), .05f - (i / 10.), 1.f, vec2(.0f, 5.f));\n        lines += line1 + line2 + line3 + line4;\n        lines = sin(lines * 2. + iTime) / 1.5;\n    }\n \n \n    lines = pow( abs(0.09 / lines), 0.8) + smoothstep(0.2,0.,abs(lines)/fwidth(lines) );\n    color = colorPalette(0.5 + 0.2*cos(iTime+uvColor.x)) * 1.8;\n    finalColor += lines * color;\n    \n    \n    fragColor = vec4(finalColor, 1.);\n}","name":"Image","description":"","type":"image"}]}