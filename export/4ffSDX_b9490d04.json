{"ver":"0.1","info":{"id":"4ffSDX","date":"1705774414","viewed":53,"name":"Practice SnowShader Assignment","username":"GurraDesu","description":"For a school assignment, inspired by the \"polar snowflake\" shader created by antoineMoPa at: https://www.shadertoy.com/view/XlSBz1","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["snowflake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Perlin Noise function was written with assistance of ChatGPT, and only very minorly altered.\n// Hash function used by Perlin noise\nfloat hash(float n) \n{ \n    return fract(sin(n) * 17.1717); \n}\n\n// Perlin noise function\nfloat perlinNoise(vec2 p) \n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f*f*(3.0-2.0*f);\n    \n    float n = i.x + i.y;\n    float res = mix(mix(hash(n +  0.0), hash(n +  1.0), f.x),\n                    mix(hash(n + 17.0), hash(n + 27.0), f.x), f.y);\n    return res;\n}\n\n//This function takes a position, a size and a colour, then returns where to render a snowflake\nvec3 newSnowFlake(vec2 pos, float size, vec3 colour)\n{\n    // Transform position and size\n    vec2 uv = (pos - 0.5) * size;\n\n    // Convert to polar coordinates\n    float angle = atan(uv.y , uv.x);\n    float radius = length(uv);\n\n    // Snowflake pattern using polar coordinates (two sets of snowflakes overlapping, essentially)\n    // I could probably make this look better, but not sure how to go on about it at this time.\n    float arms = 6.0; // Number of arms in the first snowflake\n    float armWidth = 0.2; // Width of the first set of arms\n    float pattern = cos(arms * angle) * armWidth;\n    float armsTwoWidth = 0.15; // Width of the second set of arms\n    float secondPattern = sin(arms * angle + 5.) * armsTwoWidth; // Adds a second set of arms to the first snow flake, but rotated slightly\n    secondPattern *= perlinNoise(uv * 500.0); // Apply noise for organic look\n    \n    // Apply Perlin noise\n    float noiseValue = perlinNoise(uv * 5000.0); // Adjust scale as needed\n    pattern *= noiseValue;\n    secondPattern *= noiseValue;\n    \n    // Wavy cobweb effect, not very visible, but creates a circling pattern from centre that hold arms of flakes together.\n    // May look into a new pattern that creates thicker lines.\n    // I don't know what the bridges between snowflake arms are called.\n    float waveAmplitude = 0.1; // Amplitude of the wave\n    float waveFrequency = 1000.; // Frequency of the wave\n    float wavePhase = angle; // Phase shift based on angle\n    float cobwebEffect = sin(radius * waveFrequency + wavePhase) * waveAmplitude;\n\n\n    // Render the snowflake\n    if ((radius < 0.3 && abs(radius - pattern) < 0.03) \n    || abs(radius - secondPattern) < 0.05 // Extra Arms\n    || abs(radius - cobwebEffect) < 0.01) // Wavy cobweb effect\n    {\n        return vec3(colour); // White snowflake\n    }\n}\n\n//Creates a repeated pattern of a snowflake, as well as gives it movement.\n//Repeat is how many times it is copied, Pos is the position it is repeated from, and velocity is movement speed\nvec2 snowflakePattern(float repeats, vec2 pos, vec2 vel)\n{\n    pos.x += 0.1 * vel.x * iTime;\n    pos.y += 0.1 * vel.y * iTime;   \n    vec2 gridUV = fract(pos * repeats); // Create repeating patterns\n\n\n    return vec2((gridUV - 0.5) * 2.0); // Scale and translate for full snowflake view\n}\n\n// In main is wher the snowflakes are generated using the above code, and\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 color = vec3(0.1, 0.1, 0.3); //Blue background\n\n    // Generate snowflake\n    //front layer\n    color += newSnowFlake(snowflakePattern(2., uv, vec2(0.4, 3.0)), 0.8, vec3(1.0));\n    color += newSnowFlake(snowflakePattern(2., uv, vec2(0.5, 3.2)), 0.8, vec3(0.9));\n    //mid layer\n    color += newSnowFlake(snowflakePattern(6., uv, vec2(-0.6, 2.2)), 0.8, vec3(0.6));\n    color += newSnowFlake(snowflakePattern(6., uv, vec2(-0.7, 2.5)), 0.7, vec3(0.6));\n    //back layer\n    color += newSnowFlake(snowflakePattern(8., uv, vec2(0.2, 0.6)), 1.1, vec3(0.2));\n    color += newSnowFlake(snowflakePattern(8., uv + vec2(0.2), vec2(0.2, 0.6)), 1.1, vec3(0.2));\n    // More snow layers can be added\n\n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}