{"ver":"0.1","info":{"id":"ttfXDB","date":"1564933844","viewed":625,"name":"Thiebaud's Cakes","username":"OliverSchaff","description":"I tried to make a shader that looks a bit like Wayne Thiebaud's painting 'Cake Rows'. I copied the Kuwahara filter from https://www.shadertoy.com/view/tlX3RX. You can use the mouse to rotate. The painting-like look is better in full screen.","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","kuwahara","painting","candy","sweets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    // read in the image from Buffer B\n\tvec3 col = texture(iChannel0, uv).rgb;\n        \n    // contrast\n    col = (col - .5) * 1.1 + .53;\n    \n\t// iq's vignetting\n    col *= pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.03 );\n    \n    col = clamp(col, 0.0, 1.0);\n    \n    // gamma correction is done in Buf A\n    \n    // send it to the screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// from https://www.shadertoy.com/view/4djSRW\n// by Dave_Hoskins\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n// Value noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash12( i + vec2(0.0,0.0) ),\n                     hash12( i + vec2(1.0,0.0) ), u.x),\n                mix( hash12( i + vec2(0.0,1.0) ),\n                     hash12( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rot(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Code is mainly taken from iq's Raymarching - Primitives:\n// https://www.shadertoy.com/view/Xds3zN\n\n#define time iTime - 4.0\n#define PI 3.141593\n#define AA 1   // make this 2 or 3 for antialiasing\n\n//------------------------------------------------------------------\n// 2d primitives\n// https://iquilezles.org/articles/distfunctions2d\n\nfloat sdRoundedLine( in vec2 p, in vec2 a, in vec2 b, in float r)\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n//------------------------------------------------------------------\n// 3d primitives\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\n// vertical\nfloat sdCylinder( vec3 p, vec2 h, float rad )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h + rad;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rad;\n}\n\n//------------------------------------------------------------------\n// operations with primitives\n\nfloat opU( float d1, float d2 ) {  return min(d1,d2); }\n\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\n\n// https://www.shadertoy.com/view/4lyfzw\n// by iq\nvec2 opRevolution( in vec3 p, float w ) // revolution around y-axis\n{\n    return vec2( length(p.xz) - w, p.y );\n}\n\n\n//------------------------------------------------------------------\n\n// repeat functions\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\n//------------------------------------------------------------------\n\n\n#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\n\n// transforms\n\nvec3 carToCyl(vec3 p) {\n    mat2 rot = mat2(-1.0,0.0,0.,-1.0);\n    p.xy = rot*p.xy;\n    float r = length(p.xy);\n    float the = atan(p.y,p.x);\n    return vec3(r,the,p.z);\n}\n\n//------------------------------------------------------------------\n\nvec3 map( in vec3 pos )\n{\n    vec3 res = vec3( 1e10, 0.0 ,0.0);\n    float d = 1e10;\n    \n    // table\n    vec3 ptable = pos;\n    ptable -= vec3(0.0,-0.06,-0.7);\n    d = sdBox(ptable, vec3(6.5,0.05,2.5))-0.02;\n    res = vec3(d, 1.0, pos.z);\n    \n    // table edge\n    d = opU(d, sdBox(ptable, vec3(6.5,0.045,2.56))-0.02);\n    if (d<res.x) res = vec3(d, 28.0, pos.z);\n    d = opU(d, sdBox(ptable, vec3(6.5,0.045,2.61))-0.02);\n    if (d<res.x) res = vec3(d, 29.0, pos.z);\n\n    // 3x4 repetition\n    vec2 index = pMod2(pos.xz, vec2(1.0,1.0));\n    if ((abs(index.x) < 1.5) && (abs(index.y+0.5)<2.5))\n    {\n        index += vec2(1.0,2.0); // indices are startunbg at 0 now for a 3x4 field\n\t\tif (index.x<0.5)\n        {\n            pos.xz = rot(0.1*PI+0.2*(-1.0+2.0*hash12(index)))*pos.xz;\n        \tpos.xz -= 0.03*(-1.0+2.0*hash22(index));\n        }\n\t\telse if (index.x<1.5) \n        {\n            pos.xz = rot(0.1*(-1.0+2.0*hash12(index)))*pos.xz;\n        \tpos.xz -= 0.03*(-1.0+2.0*hash22(index));\n        }\n\t\telse if (index.x<2.5)\n        {\n            pos.xz = rot(-0.15*PI+0.5*(-1.0+2.0*hash12(index+vec2(1))))*pos.xz;\n        \tpos.xz -= 0.03*(-1.0+2.0*hash22(index));\n        }\n        if (index == vec2(2.0,2.0))\n        {\n            pos.xz = rot(time)*pos.xz;\n        }\n        \n        // plate\n        vec3 pplate = pos;\n        pplate.y -= 0.03;\n        vec3 pcyl = carToCyl(pplate.zxy);\n        pplate.y -= 0.006*noise(20.0*pcyl.xx+index);\n        d = sdRoundedLine(opRevolution(pplate, 0.24), \n                          vec2(0.0,0.0), vec2(0.2,0.03), 0.012);\n        if (d<res.x) res = vec3(d, 26.0, pcyl.x);\n        \n        // rim of plate\n        pplate.y -= 0.03;\n        d = opU(d, sdTorus(pplate, vec2(0.44,0.013)));\n        if (d<res.x) res = vec3(d, 27.0, pcyl.x);\n\n        // cake body (upright cylinder)\n\t    float r = 0.3;\n        float h = 0.2;\n        vec3 pcake = pos;\n        pcake -= vec3(0.0,0.05,-0.25);\n\n        pcake.yz = rot(0.46*PI)*pcake.yz;\n        pcake.xy = rot(0.5*PI)*pcake.xy;\n        \n        \n        float rcake = 0.5;\n        float hcake = 0.23;\n        float hcream = 0.012;\n        float numlayers = (index.x>0.5) ? 2.0 : 3.0;\n        float hlayer = (hcake-(numlayers+1.0)*hcream)/numlayers;\n        \n        d = sdCylinder(pcake,vec2(rcake,hcake),0.04);\n        vec3 pcakebody = pcake;\n        pcakebody.yz = rot(-0.5*PI)*pcakebody.yz;\n        d = opS(sdPlane(pcakebody),d);\n        pcakebody.xy = rot(0.8*PI)*pcakebody.xy;\n        d = opS(sdPlane(pcakebody),d);\n        if (d<res.x) res = vec3(d, 2.0+((4.0*index.x)+index.y), pcake.y);\n        \n        vec3 pcakefilling = pcake;\n        pcakefilling.y -= hcake-hlayer-2.0*hcream;\n        for( float i=0.0; i<numlayers; i+=1.0 ) {\n            d = opU(sdCylinder(pcakefilling, vec2(rcake-2.0*hcream,hlayer),0.02), d);\n            pcakefilling.y -= -2.0*(hlayer+hcream);\n        }\n        if (index.x<2.5)\n        {\n            \n        }\n        pcakefilling.yz = rot(-0.5*PI)*pcakefilling.yz;\n        d = opS(sdPlane(pcakefilling),d);\n        pcakefilling.xy = rot(0.8*PI)*pcakefilling.xy;\n        d = opS(sdPlane(pcakefilling),d);\n\n        if (d<res.x) res = vec3(d, 14.0+((4.0*index.x)+index.y), pcake.y);\n        \n        if (index.x>1.5)\n        {\n        \tvec3 pcakefilling = pcake;\n            pcakefilling.y -= -hcake;\n\t\t\td = opU(sdCylinder(pcakefilling, vec2(rcake-2.0*hcream,0.005),0.02), d);\n\t\t\tpcakefilling.yz = rot(-0.5*PI)*pcakefilling.yz;\n        \td = opS(sdPlane(pcakefilling),d);\n        \tpcakefilling.xy = rot(0.8*PI)*pcakefilling.xy;\n        \td = opS(sdPlane(pcakefilling),d);\n            if (d<res.x) res = vec3(d, 30.0, pcake.y);\n\n        }\n        \n\n    }\n    return res;\n}\n\nvec3 castRay( in vec3 ro, in vec3 rd )\n{\n    vec3 res = vec3(-1.0,-1.0, 0.0);\n\n    float tmin = 4.0;\n    float tmax = 17.0;\n\n        float t = tmin;\n        for( int i=0; i<100 && t<tmax; i++ )\n        {\n            vec3 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0002*t) )\n            { \n                res = vec3(t,h.y, h.z); \n                 break;\n            }\n            t += 1.0*h.x;\n        }\n    return res;\n}\n\n\n// https://iquilezles.org/articles/rmshadows\n// but this is the modified version, also in soe of iq's shaders\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, in float k)\n{\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    \n    for( int i=0; i<20; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n       \tres = min( res, k*h/t );\n        t += h;\n         if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n// colors\nvec3 parabolicColorMap(float x, vec3 rc, vec3 gc, vec3 bc){\n    vec3 col = vec3(rc.x*x*x+rc.y*x+rc.z, \n                          gc.x*x*x+gc.y*x+gc.z, \n                          bc.x*x*x+bc.y*x+bc.z\n                         )/vec3(255.0);\n    col = pow(col, vec3(2.8)); // need to do this because I copied the colors from a non-gamma corrected jpg\n    return col;\n}\nvec3 chocolate(in float x) {\n\tvec3 rc = vec3(94.,-283.,232.);\n\tvec3 gc = vec3(134.,-293.,184.);\n\tvec3 bc = vec3(28.,-116.,114.);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 lemon(in float x) {\n\tvec3 rc = vec3(-24.,-8.,254.);\n\tvec3 gc = vec3(-32.,-26.,226.);\n\tvec3 bc = vec3(80.,-162.,136.);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 peach(in float x) {\n\tvec3 rc = vec3(-20.,-6.,255.);\n\tvec3 gc = vec3(32.,-88.,242.);\n\tvec3 bc = vec3(56.,-126.,217.);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 orange(in float x) {\n\tvec3 rc = vec3(-22.,-15.,238.);\n\tvec3 gc = vec3(10.,-103.,144.);\n\tvec3 bc = vec3(32.,-62.,69.);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 plate(in float x) {\n\tvec3 rc = vec3(-26.,-1.,220.);\n\tvec3 gc = vec3(-18.,-3.,225.);\n\tvec3 bc = vec3(-50.,11.,222.);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 table(in float x) {\n\tvec3 rc = vec3(-28.,-28.,216.);\n\tvec3 gc = vec3(-30.,-27.,200.);\n\tvec3 bc = vec3(-16.,-36.,167.);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 green(in float x) {\n\tvec3 rc = vec3(36,-86,119);\n\tvec3 gc = vec3(52,-92,191);\n\tvec3 bc = vec3(88,-122,103);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 blue(in float x) {\n\tvec3 rc = vec3(86,-135,62);\n\tvec3 gc = vec3(56,-120,167);\n\tvec3 bc = vec3(78,-127,226);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 wall(in float x) {\n\tvec3 rc = vec3(4,-30,208);\n\tvec3 gc = vec3(4,-30,238);\n\tvec3 bc = vec3(4,-30,254);\n    return parabolicColorMap(x,rc,gc,bc);\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec2 st )\n{ \n    vec3 col = vec3(0);\n    vec3 res = castRay(ro,rd);\n\n    float t = res.x;\n\tfloat m = res.y;\n   \tvec3 mateD = vec3(0.0);\n\tvec2 mateK = vec2(0.0);\n    \n    vec3 pos = ro + t*rd;\n    \n    vec3 pindex = pos;\n    vec2 index = pMod2(pindex.xz, vec2(1.0,1.0));\n    index += vec2(1.0,2.0); // indices are starting at 0 now for a 3x4 field\n    float cmodg = texture(iChannel0, vec2(0.1*res.z,0.5)).g;\n    float cmod = texture(iChannel0, vec2(res.z,hash12(index))).g;\n    \n    if (m<-0.5) \n    {\n        // no hit\n        col = wall(0.9*noise(vec2(3.0,20.0)*st));\n    }\n    else if (m<1.5) \n    {\n    \t//table\n        mateD = table(cmodg*0.8)*0.28;\n        mateK = vec2(5.0,7.0);\n    }\n    else if (m<5.5)\n    {\n        //cream right row\n        mateD = vec3(0.16);\n        mateK = vec2(5.0,7.0);\n    }\n    else if (m<9.5)\n    {\n        //cream center row\n        mateD = chocolate(0.8*(1.0-cmod))*0.2;\n        mateK = vec2(5.0,7.0);\n    }\n    else if (m<13.5)\n    {\n        //cream left row\n        mateD = orange(0.7*cmod)*0.2;\n        mateK = vec2(5.0,7.0);\n    }\n    else if (m<17.5)\n    {\n        // filling right row\n        mateD = chocolate(cmod)*0.2;\n        mateK = vec2(5.0,7.0);\n    }\n    else if (m<21.5)\n    {\n        // filling center row\n        mateD = lemon(1.0-cmod)*0.2;\n        mateK = vec2(5.0,7.0);\n    }\n    else if (m<25.5)\n    {\n        // filling left row\n        mateD = peach(0.5*cmod)*0.18;\n        mateK = vec2(5.0,7.0);\n    }\n    else if (m<26.5)\n    {\n        // plate\n        mateD = plate(cmod)*0.23;\n        mateK = vec2(15.0,10.0);\n    }\n    else if (m<27.5)\n    {\n        // plate rim\n        vec3 prim = pos;\n        mateD = plate(0.7)*0.22;\n        float highlights = 0.5*noise(prim.xz);\n\t\tmateD = mix(mateD, orange(cmod)*0.3, smoothstep(0.0,0.01,highlights)*smoothstep(0.16,0.15,highlights));\n\t\tmateD = mix(mateD, blue(cmod)*0.28, smoothstep(0.18,0.19,highlights)*smoothstep(0.28,0.27,highlights));\n\t\tmateD = mix(mateD, green(cmod)*0.3, smoothstep(0.3,0.31,highlights)*smoothstep(0.41,0.40,highlights));\n        mateK = vec2(15.0,10.0);\n    }\n    else if (m<28.5)\n    {\n        // green table edge\n        mateD = green(cmod)*0.22;\n        mateK = vec2(15.0,10.0);\n    }\n    else if (m<29.5)\n    {\n        // red table edge\n        mateD = orange(cmod)*0.22;\n        mateK = vec2(15.0,10.0);\n    }\n    else if (m<30.5)\n    {\n        // lemon icing on left row\n        mateD = lemon(0.1+0.5*cmod)*0.22;\n        mateK = vec2(15.0,10.0);\n    }\n    \n    if (m>-0.5) // only apply lighting if something has been hit\n    {\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        col = mateD;\n\n        // lighting\n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.9, 0.9, -0.6) );\n\t\tvec3  lig2 = normalize( vec3(0.9, 0.0, -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float dif2 = clamp( dot( nor, lig2 ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.2, 0.2, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5, 30.0 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5, 30.0 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),3.0*mateK.y)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), mateK.y ));\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 6.50*dif*vec3(1.0,1.0,0.5);\n        lin += 2.00*dif2*vec3(1.0,0.5,0.5);\n        lin += 2.50*amb*vec3(0.00,0.10,1.00)*pow(occ,0.4);\n        lin += 0.50*dom*wall(0.5)*occ;\n        lin += 1.00*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += mateK.x*spe*vec3(1.10,0.90,0.70);\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat angle = 6.28 * mo.x +0.0;\n    \n    // camera\t\n    vec3 ro = vec3(-11.0*sin(-angle), 3.5+3.0*mo.y, -11.0*cos(-angle));\n    vec3 ta = vec3( 0.0,0.0,0.0 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p,10.0) );\n\n         // ray differentials\n        vec2 px = (-iResolution.xy+2.0*(fragCoord.xy+vec2(1.0,0.0)))/iResolution.y;\n        vec2 py = (-iResolution.xy+2.0*(fragCoord.xy+vec2(0.0,1.0)))/iResolution.y;\n        vec3 rdx = ca * normalize( vec3(px,2.0) );\n        vec3 rdy = ca * normalize( vec3(py,2.0) );\n        \n        // render\t\n        vec3 col = render( ro, rd, p );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Kuwahara filter copied from\n// https://www.shadertoy.com/view/tlX3RX\n// by Blokatt\n// and then slightly modified\n\n#define BRUSH_SIZE 1.1\n#define WINDOW_SIZE 6\n#define DEPTH_PER_CHANNEL 20\nconst int REGION_SIZE = (WINDOW_SIZE + 1) / 2;\nconst int REGION_N = REGION_SIZE * REGION_SIZE;\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 tex(vec2 uv){\n    vec4 col = texture(iChannel0, uv);\n    float depth = float(DEPTH_PER_CHANNEL);\n    \n    col.r = floor(col.r * depth) / depth;\n    col.g = floor(col.g * depth) / depth;\n    col.b = floor(col.b * depth) / depth;      \n    col.a = rgb2hsv(col.rgb).b;\n    \n\treturn col;\n}\n\nfloat regionMeanValue(vec4 vals[REGION_N]) {\n    float sum = 0.0;\n    \n    for (int i = 0; i < REGION_N; ++i){\n        sum += vals[i].a;\n    }\n    return sum / float(REGION_N);\n}\n\nvec3 regionMean(vec4 vals[REGION_N]) {\n    vec3 sum = vec3(0);\n    for (int i = 0; i < REGION_N; ++i){\n        sum += vals[i].rgb;\n    }\n    return vec3(sum / float(REGION_N));\n}\n\nfloat regionStandardDeviation(vec4 vals[REGION_N], float mean) {\n    float sum = 0.;    \n    \n    for (int i = 0; i < REGION_N; ++i){       \n        float val = vals[i].a - mean;\n        sum += val * val;\n    }\n    return sqrt(sum / float(REGION_N - 1));\n    \n}\n\nvec3 kuwahara(vec2 uv) {\n    vec4 p = vec4(dFdx(uv.x), dFdy(uv.y), -dFdy(uv.y), 0.);\n    \n    // 5x5    \n    /*\n    A  A  AB   B  B\n\tA  A  AB   B  B\n\tAC AC ABCD BD BD    \t\n\tC  C  CD   D  D    \t\n\tC  C  CD   D  D    \t\n\t*/\n    float angle = 0.0;\n    \n    mat2 a = rot(uv.x + uv.y + hash12(uv) + angle) * (BRUSH_SIZE*iResolution.x/640.0);\n    \n    vec4 regVal[REGION_N];\n    for (int y = 0; y < REGION_SIZE; ++y){\n        for (int x = 0; x < REGION_SIZE; ++x){\n        \tregVal[y * REGION_SIZE + x] = tex(uv + a * vec2(-p.x * float(x), -p.y * float(y)));\n        }\n    \n    }\n\n    float meanValueA = regionMeanValue(regVal);\n    vec3 meanA = regionMean(regVal);    \n    float standardDeviationA = regionStandardDeviation(regVal, meanValueA);\n    \n    for (int y = 0; y < REGION_SIZE; ++y){\n        for (int x = 0; x < REGION_SIZE; ++x){\n        \tregVal[y * REGION_SIZE + x] = tex(uv + a * vec2(p.x * float(x), -p.y * float(y)));\n        }   \n    }\n    \n  \n    float meanValueB = regionMeanValue(regVal);\n    vec3 meanB = regionMean(regVal);    \n    float standardDeviationB = regionStandardDeviation(regVal, meanValueB);\n    \n    for (int y = 0; y < REGION_SIZE; ++y){\n        for (int x = 0; x < REGION_SIZE; ++x){\n        \tregVal[y * REGION_SIZE + x] = tex(uv + a * vec2(-p.x * float(x), p.y * float(y)));\n        }   \n    }\n  \n    float meanValueC = regionMeanValue(regVal);\n    vec3 meanC = regionMean(regVal);    \n    float standardDeviationC = regionStandardDeviation(regVal, meanValueC);\n    \n    for (int y = 0; y < REGION_SIZE; ++y){\n        for (int x = 0; x < REGION_SIZE; ++x){\n        \tregVal[y * REGION_SIZE + x] = tex(uv + a * vec2(p.x * float(x), p.y * float(y)));\n        }   \n    }\n    \n    float meanValueD = regionMeanValue(regVal);\n    vec3 meanD = regionMean(regVal);    \n    float standardDeviationD = regionStandardDeviation(regVal, meanValueD);\n    \n    float mostHomogeneous = min(standardDeviationA, min(standardDeviationB, min(standardDeviationC, standardDeviationD)));\n    vec3 outMean = vec3(0);\n    if (mostHomogeneous == standardDeviationA) outMean = meanA;\n    if (mostHomogeneous == standardDeviationB) outMean = meanB;\n    if (mostHomogeneous == standardDeviationC) outMean = meanC;\n    if (mostHomogeneous == standardDeviationD) outMean = meanD;\n    \n    return outMean;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = kuwahara(uv);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}