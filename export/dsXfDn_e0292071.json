{"ver":"0.1","info":{"id":"dsXfDn","date":"1688624768","viewed":1001,"name":"fbm lightning","username":"MonterMan","description":"fbm warp-based lightning","likes":39,"published":1,"flags":0,"usePreview":0,"tags":["fbmlightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rotate2d(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        c, -s,\n        s, c\n    );\n}\n\nfloat noise(vec2 p)\n{\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    float a = hash12(ip);\n    float b = hash12(ip + vec2(1, 0));\n    float c = hash12(ip + vec2(0, 1));\n    float d = hash12(ip + vec2(1, 1));\n    \n    vec2 t = smoothstep(0.0, 1.0, fp);\n    return mix(mix(a, b, t.x), mix(c, d, t.x), t.y);\n}\n\nfloat fbm(vec2 p, int octaveCount)\n{\n    float value = 0.0;\n    float amplitude = 0.5;\n    for (int i = 0; i < octaveCount; ++i)\n    {\n        value += amplitude * noise(p);\n        p *= rotate2d(0.45);\n        p *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv += 2.0 * fbm(uv+0.8*iTime, 10) - 1.0;\n    \n    float dist = abs(uv.x);\n    vec3 col = vec3(0.2, 0.3, 0.8) * pow(mix(0.0, 0.07, hash11(iTime)) / dist, 1.0);\n    \n    col = pow(col, vec3(1.0));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}