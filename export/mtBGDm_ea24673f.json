{"ver":"0.1","info":{"id":"mtBGDm","date":"1673954473","viewed":72,"name":"Lissajous knot [SeeSaw]","username":"rattlesneker","description":"Lissajous knot","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["osciloscope","lissajousknot"],"hasliked":0,"parentid":"fdKGzR","parentname":"Osciloscope"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by rattlesneker (vWvAvWvy)\n\nvec3 get2DTexture(sampler2D sam, vec2 uv) {\n    return texture(sam, uv).rgb;\n}\n\nvec3 getPixelWithOffset(vec2 fragCoord, vec2 offset) {\n    vec2 convCoord = fragCoord + offset;\n    vec2 uv = convCoord / iResolution.xy;\n    return  get2DTexture(iChannel0, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    float k0[5] = float[](1.0, 4.0, 7.0, 4.0, 1.0);\n    float k1[5] = float[](4.0, 16.0, 26.0, 16.0, 4.0);\n    float k2[5] = float[](7.0, 26.0, 41.0, 26.0, 1.0);\n    float k3[5] = float[](4.0, 16.0, 26.0, 16.0, 4.0);\n    float k4[5] = float[](1.0, 4.0, 7.0, 4.0, 1.0);\n    \n    // Convolution\n    for (int i = -2; i < 3; i++) {\n        vec3 c0 = getPixelWithOffset(fragCoord, vec2(i, -2));\n        col += c0 * k0[i + 2];\n        \n        vec3 c1 = getPixelWithOffset(fragCoord, vec2(i, -1));\n        col += c1 * k1[i + 2];\n        \n        vec3 c2 = getPixelWithOffset(fragCoord, vec2(i, 0));\n        col += c2 * k2[i + 2];\n        \n        vec3 c3 = getPixelWithOffset(fragCoord, vec2(i, 1));\n        col += c3 * k3[i + 2];\n        \n        vec3 c4 = getPixelWithOffset(fragCoord, vec2(i, 2));\n        col += c4 * k4[i + 2];\n        \n    }\n    col = col / 273.0;\n    \n    //col = getPixelWithOffset(fragCoord, vec2(0, 0)); \n    \n    \n    fragColor = vec4(col, 0.5);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// by rattlesneker (vWvAvWvy)\n\nconst float M_PI = 3.14159265358979323846264338327950288;\nconst float PREC = 0.01;\n\nfloat sqr(float x)\n{\n    return x * x;\n}\n\nfloat sinRep(float time, float phase)\n{\n    return 0.5 * (sin(time + phase) + 1.0);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime + 110.0 + 4.0 - 10.0;\n    \n    ivec2 icrd = ivec2(2.0 * fragCoord - iResolution.xy);\n    vec2 crd = vec2(icrd) / iResolution.xy;\n        \n    float A = 0.5;\n    float a = 2.0;\n    \n    float B = 0.82;\n    float b = 5.0 * sinRep(time / 50.0, 0.5) + 1.0;\n    \n    float px = 0.0;\n    float py = M_PI / 2.0 * sinRep(time / 2.0, 0.0); \n    \n    float acosY = acos(crd.y / B);\n\n    float t = -1.0;\n    float resDist = PREC;\n    int maxB = int(b + 0.5);\n    maxB = 10;\n    \n    float maxAlpha = 0.0;\n    for (int i = 0; i < maxB; i++)\n    {       \n        vec2 rootY = vec2(acosY + 2.0*M_PI*float(i), 2.0*M_PI*float(i+1) - acosY);\n        vec2 rhsX = A * cos((a / b) * (rootY + py) - px);\n        \n        float dist = abs(crd.x - rhsX.x);\n        if (dist < PREC)\n        {\n            t = (rootY.x) / (2.0*M_PI*float(maxB));\n            resDist = dist;\n            float alpha = t * ((PREC - resDist/4.0) / PREC);\n            if (alpha > maxAlpha)\n            {\n                maxAlpha = alpha;\n            }\n        }\n        dist = abs(crd.x - rhsX.y);\n        if (dist < PREC)\n        {\n            t = (rootY.y) / (2.0*M_PI*float(maxB));\n            resDist = dist;\n            float alpha = t * ((PREC - resDist/4.0) / PREC);\n            if (alpha > maxAlpha)\n            {\n                maxAlpha = alpha;\n            }\n        }\n    }\n    \n    vec4 knotCol = vec4(1.0, 1.0, 1.0, 0.0);\n    if (t > 0.0)\n    {\n        knotCol.w = maxAlpha;\n    }\n    \n    // Background water\n    vec2 uv = (fragCoord) / iResolution.xy;\n    // Time varying pixel color\n    vec2 waterCol = (uv * 20.0);\n    for (float i = 1.0; i < 4.0; i++) {\n        uv += waterCol;\n        waterCol = cos(uv.yx * i + iTime);\n    }\n    \n    vec4 bgCol = vec4(waterCol.x * 0.09 + 0.05 *(cos(time) + 1.0), waterCol.y * 0.08, 0.11, 0.0);\n    \n    // Rectangle\n    vec4 squareCol = vec4(vec3(1.0), 0.5);\n    float iResY = iResolution.y;\n    if ((abs(icrd.x) < /*int(iResY)*/ int(iResolution.x * 0.625) &&\n            abs(icrd.y) < int(iResY))\n        && (/*int(0.9 * iResY)*/ int(iResolution.x * 0.56) < abs(icrd.x) ||\n            int(0.9 * iResY) < abs(icrd.y))\n        )\n    {\n        bgCol = vec4(mix(bgCol.xyz, squareCol.xyz, squareCol.w), 1.0);\n    }\n    else\n    {\n        // Lines\n        /*\n        if (abs(icrd.x) % int(iResolution.x / 5.85) < 2 ||\n            abs(icrd.y) % int(iResolution.y / 5.0) < 2)\n        {\n            bgCol = bgCol + vec4(0.6, 0.6, 0.6, 1.0);\n        }\n        */\n    }\n    \n    vec3 col = mix(bgCol.xyz, knotCol.xyz, knotCol.w);\n    \n    // Colorful moving line\n    if (abs(t - sinRep(time / 5.0, 0.0)) < PREC)\n    {\n        col = vec3(sinRep(time, M_PI / 2.0), sinRep(time, M_PI), sinRep(time, 3.0 * M_PI / 2.0));\n    }\n    \n    // Change brightness\n    int syncT = int(time * 100.0);\n    col = col * (0.2 * sinRep(time, M_PI) + 0.9);\n    \n    vec3 hsv = rgb2hsv(col);\n    \n    hsv = hsv + vec3(\n        sinRep(time / 3.0, M_PI / 2.0),\n        0.15 + 0.35 * sinRep(time / 2.0, 0.0),\n        0.0);\n    \n    vec3 res = hsv2rgb(hsv);\n    \n    fragColor = vec4(res, 0.5);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}