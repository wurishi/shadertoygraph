{"ver":"0.1","info":{"id":"sddBRf","date":"1656985240","viewed":72,"name":"Circle SDF With L1 Metric","username":"Envy24","description":"Circle SDF With L1 Metric\nhttps://www.desmos.com/calculator/nk7bt38emp","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","circle","distance","l1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n#define NZMY                      ( (iMouse.y+iMouse.y-R.y) / R.y )  // in range [-1.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define FIELD_SCALE                 2.0\n#define TAU                         6.2831853071795862\n#define PI                          3.1415926535897932\n\nfloat L1(vec2 B, vec2 E)\n{\n    vec2 D = E - B;\n    return abs(D.x) + abs(D.y);\n}\n\n/* Solution from: https://www.desmos.com/calculator/nk7bt38emp *\nfloat circleSDF_L1(\n    vec2 NDC) // (u, v)\n{\n    NDC = abs(NDC);\n    \n    float minDist =        L1(vec2(0.70710678, 0.70710678),         NDC);\n    minDist = min(minDist, L1(vec2(NDC.x, sqrt(1.0 - NDC.x*NDC.x)), NDC));\n    \n    float T = sinOSC(0.0, 0.3, iTime);\n    float x = sqrt(1.0 - NDC.y*NDC.y);\n    return min(minDist, L1(vec2(x, sqrt(1.0 - x*x)), NDC)) - T;\n}\n/* With adjustable radius */\nfloat circleSDF_L1(\n    vec2 NDC) // (u, v)\n{\n    NDC = abs(NDC);\n    \n    float R = sinOSC(0.3, 3.0, iTime*0.5);\n    float minDist =              L1(sqrt(R)*vec2(0.70710678, 0.70710678),       NDC);\n          minDist = min(minDist, L1(        vec2(NDC.x, sqrt(R - NDC.x*NDC.x)), NDC));\n    \n    float T = sinOSC(0.0, 0.3, iTime);\n    float x = sqrt(R - NDC.y*NDC.y);\n    return min(minDist, L1(vec2(x, sqrt(R - x*x)), NDC)) - T;\n}\n/**/\n\n/* https://www.shadertoy.com/view/ddfGz2 */\nvec3 colorize_field(float dist, vec3 color)\n{    \n    float F = 30., freq = F*dist, aa = 1./F, C = 0.7, amp = 0.2, width = 0.3,\n          waves_sdf = C + amp*smoothstep(8./iResolution.y, 0., (width+cos(freq)) * aa),\n          exp_raise = 1. - exp(-4.*abs(dist));\n        \n    color = 1.0 - sign(dist) * color; // Change color if dist is negative. \n    color *= exp_raise;               // Attenuate color around edges.     \n    color *= waves_sdf;               // Add waves.\n    \n    return mix(color, vec3(1), smoothstep(8./iResolution.y, 0., abs(dist)) );\n}\n\nvec3 add_metric_box(\n    vec2 NDC,\n    vec3 color)\n{\n    float unit = 7.0 / R.y;\n\n    vec2 M = \n        LMB_IS_HOLD ?\n            TO_CENTERED_NDC(iMouse.xy) * FIELD_SCALE :\n            rotateAroundZ(vec2(1, 0), iTime * 0.5) * 1.5;\n            //vec2(0);\n    \n    //M=vec2(2.5, 0.0);\n    \n    // Add point\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(NDC - M) - 0.008));\n\n    float dist_form_point_to_box_edge = L1(NDC, M) - abs(circleSDF_L1(M));\n    float outline = abs(dist_form_point_to_box_edge);\n    \n    // Add metric box\n    return mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, outline));\n}\n/* IQ coloring scheme */\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC) * FIELD_SCALE;\n    float minDist = circleSDF_L1(NDC);\n    \n    // Blending.\n    vec3 color = colorize_field(minDist, vec3(0.1, 0.4, 0.7));\n    color = add_metric_box(NDC, color);\n\n    O = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nvec2 rotateAroundZ(vec2 p, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n\n    return vec2(\n        p.x * c - p.y * s,\n        p.y * c + p.x * s);\n}","name":"Common","description":"","type":"common"}]}