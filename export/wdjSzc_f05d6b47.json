{"ver":"0.1","info":{"id":"wdjSzc","date":"1567100672","viewed":600,"name":"Ray Marching Torus with glow","username":"pavleeto","description":"Torus","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 eye = vec3(0.0, 0.0, 10.0);\nvec3 front = vec3(0.0, 0.0, -1.0);\nvec3 up = vec3(0.0, 1.0, 0.0);\nfloat fov = radians(45.0);\n\nfloat minDist = 1e-3;\nint maxSteps = 0xFF;\n\n\nfloat distEstimate(vec3 p)\n{\n    vec2 t = vec2(0.5, 0.10);\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n  \treturn length(q)-t.y;\n}\n\nvec3 getRay(vec2 uv, float aspect)\n{\n    uv.y = (1.0 - uv.y);\n    vec3 right = cross(up, front);\n    vec2 coeffs = tan(-fov/2.0 + uv * fov);\n    coeffs.y *= aspect;\n    \n    return normalize(front + right*coeffs.x + up*coeffs.y);\n}\n\nvec3 rayMarch(vec2 uv, float aspect)\n{\n    vec3 dir = getRay(uv, aspect);\n    \n    int steps = 0;\n    float total = 0.0;\n    float glowDist = 1e9;\n    while (steps++ < maxSteps)\n    {\n        vec3 pos = eye + total * dir;\n        float dist = distEstimate(pos);\n        glowDist = min(glowDist, dist);\n        total += dist;\n        if (dist < minDist) break;\n    }\n    if (distEstimate(eye + total * dir) < minDist)\n    {\n        \n        float col = (1.0 - float(steps)/float(maxSteps));\n        return vec3(col, 0.0, 0.0);\n    }\n    else\n    {\n        return vec3(max((0.05 - glowDist)*20.0, 0.0));\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    eye.y = sin(iTime/5.0);\n    eye.x = cos(iTime/5.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y / iResolution.x;    \n    \n    // Output to screen\n    fragColor = vec4(rayMarch(uv, aspect), 1.0);\n}","name":"Image","description":"","type":"image"}]}