{"ver":"0.1","info":{"id":"llBBDK","date":"1517186154","viewed":277,"name":"26/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today I experimented what happens if everything doesn't emit. Also some glitcy lights, blurring and stuff.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["pathtracing","strobo","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n    \n    vec4 color = vec4(0.0);\n    \n    vec2 pp = vec2(6.0/iResolution.x, 2.0/iResolution.y);\n    vec4 kertoimet = vec4(0.1531, 0.12245, 0.0918, 0.051);\n    color = texture(iChannel0, p) * 0.1633;\n    color += texture(iChannel0, p) * 0.1633;\n    for(int i = 0; i < 4; ++i){\n        color += texture(iChannel0, vec2( p.x - (float(i)+1.) * pp.y, p.y ) ) * kertoimet[i] +\n        texture(iChannel0, vec2( p.x, p.y - (float(i)+1.) * pp.x ) ) * kertoimet[i] +\n        texture(iChannel0, vec2( p.x + (float(i)+1.) * pp.y, p.y ) ) * kertoimet[i] +\n        texture(iChannel0, vec2( p.x, p.y + (float(i)+1.) * pp.x ) ) * kertoimet[i];\n    }\n    color = color + texture(iChannel0, p)*1.25;\n    \n    color.xyz = pow(color.xyz, 1.0/vec3(2.2));\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Simple path tracer. I used Iq's great article as a tutorial for this.\n//https://iquilezles.org/articles/simplepathtracing\n\n#define STEPS 40\n#define FAR 60.0\n#define EPSILON 0.5/iResolution.x\n#define PI 3.14159265359\n\n#define BOUNCES 3\n#define SAMPLES 8.0\n\nfloat CTIME = 0.0;\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\n//Hash method from https://www.shadertoy.com/view/4djSRW\n//#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n#define HASHSCALE1 443.8975\nfloat hash11(float p){\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash13(vec3 p3){\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash23(vec3 p3){\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec2 hash21(float p){\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 hash31(float p){\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n//Direction functions from Ambient occlusion method\n//introduced in https://www.shadertoy.com/view/4sdGWN\nvec3 randomSphereDir(vec2 rnd){\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i){\n\tvec3 v = randomSphereDir( vec2(hash11(i+1.), hash11(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\n\n\n//from http://amietia.com/lambertnotangent.html\nvec3 lambertNoTangent(vec3 normal, vec2 uv){\n   float theta = 6.283185 * uv.x;\n   uv.y = 2.0 * uv.y - 1.0;\n   vec3 spherePoint = vec3(sqrt(1.0 - uv.y * uv.y) * vec2(cos(theta), sin(theta)), uv.y);\n   return normalize(normal + spherePoint);\n}\n\n//Distance functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Maximum/minumum elements of a vector\nfloat vmax3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\n// Cheap Box: distance to corners is overestimated\nfloat fBoxCheap(vec3 p, vec3 b) { //cheap box\n\treturn vmax3(abs(p) - b);\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax3(min(d, vec3(0)));\n}\n\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\n// Same, but mirror every second cell at the diagonal as well\nvec2 pModGrid2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\tp *= mod(c,vec2(2.0))*2.0 - vec2(1.0);\n\tp -= size/2.0;\n\tif (p.x > p.y) p.xy = p.yx;\n\treturn floor(c/2.0);\n}\n\n// Mirror at an axis-aligned plane which is at a specified distance <dist> from the origin.\nfloat pMirror(inout float p, float dist) {\n\tfloat s = sgn(p);\n\tp = abs(p)-dist;\n\treturn s;\n}\n\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a){\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\nvec2 dist(vec3 p){\n    float flr = fPlane(p, vec3(0.0, 1.0, 0.0), 2.0);\n    \n    vec3 disp = vec3(7.0, 0.0, 7.0);\n    vec3 pp = p;\n   \n    vec2 index = pModGrid2(pp.xz, disp.xz);\n    \n    float lamp = fBox(pp-vec3(0.0, 5.1, 0.0), vec3(3.0, 0.1, 2.5));\n    float field = fBox(pp, vec3(3.0, 5.0, 2.5));\n    pMirror(pp.x, 1.0);\n    field = min(field, fBox(pp-vec3(4.0, 0.0, 0.0), vec3(2.0, 2.0, 1.0)));\n    lamp = min(lamp, fBox(pp-vec3(4.0, 2.1, 0.0), vec3(2.0, 0.1, 1.0)));\n    \n    float scene = min(flr, field);\n    scene = min(scene, lamp);\n    \n    \n    float id = 0.0;\n    if(lamp < field && lamp < flr){\n        id = 1.0;\n    }\n    \n    \n    return vec2(scene, id);\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(EPSILON, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy).x-dist(p-eps.xyy).x,\n        dist(p+eps.yxy).x-dist(p-eps.yxy).x,\n        dist(p+eps.yyx).x-dist(p-eps.yyx).x\n    ));\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\nvec2 march(vec3 ro, vec3 rd){\n    float t = 0.001;//EPSILON;\n    float step = 0.0;\n\n    float omega = 1.0;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(dist(ro).x);\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*dist(p).x;\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < EPSILON || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*dist(p).x);\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= EPSILON){\n\t\tt = candidate_t;\n\t}\n    \n    p = ro+rd*t;\n    float id = dist(p).y;\n    \n\treturn vec2(t, id);\n}\n\nvec4 getMaterial(float obj, vec3 p){\n    vec3 base = vec3(0.6, 0.5, 0.8);\n    float reflectance = 0.0;\n    \n    if(obj == 1.0){\n        base = hash31(sin(iTime))*vec3(0.6, 0.5, 0.6)+vec3(0.1);\n        base = smoothstep(0.2, 0.9, base);\n        reflectance = 0.8; \n    }\n\n    return vec4(base, reflectance);\n}\n\n\nvec3 render(vec3 o, vec3 d, vec2 uv){\n    \n    vec3 ro = o;\n    vec3 rd = d;\n    \n    \n    vec3 pixel_color = vec3(0.0);\n    vec3 absorption_factor = vec3(1.0);\n    \n    for(int i = 0; i < BOUNCES; ++i){\n        vec2 t = march(ro, rd);\n        vec3 p = ro+rd*t.x;\n        \n        if(t.y < 0.0 || t.x > FAR){\n            break;\n        }\n        \n        vec3 n = normals(p);\n        ro = p+(n*0.02);\n        \n        //material.xyz == emissive\n        //material.w == reflectance\n        vec4 material = getMaterial(t.y, p);\n\n        if(t.y > 0.0){\n            pixel_color += material.xyz * absorption_factor;\n        \tabsorption_factor *= material.w;\n            rd = lambertNoTangent(n, hash23(vec3(uv, float(i)+iTime*0.1)));\n            \n        }\n        else{\n            absorption_factor *= material.xyz;\n            rd = randomHemisphereDir(n, hash13(vec3(uv, float(i)+iTime*0.01)));\n        }\n    }\n    \n    return pixel_color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 color = vec3(0.0);\n    \n    \n    for(float i = 0.0; i < SAMPLES; ++i){\n        CTIME = (iTime-iTimeDelta) + 0.6*(1.0/24.0)*hash13(vec3(uv, iTime*0.1));\n\n        vec3 ro = vec3(10.0*cos(CTIME*0.2), 6.5+sin(iTime*0.5), 12.0*sin(CTIME*0.2));\n        vec3 rt = vec3(0.0, 2.5, 0.0);\n\n        vec3 z = normalize(rt-ro);\n        vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n        vec3 y = normalize(cross(x, z));\n        \n    \tvec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(80.0)));\n    \tcolor += render(ro, rd, uv);\n    }\n    color /= SAMPLES;\n    color = smoothstep(0.2, 0.5, color);\n\tfragColor = vec4(color, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}