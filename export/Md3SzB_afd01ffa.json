{"ver":"0.1","info":{"id":"Md3SzB","date":"1459961374","viewed":1832,"name":"perlin noise demo 2D","username":"hcf","description":"little demo","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoisedemo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cloud\n//#define turbulence\n//#define marble\n//#define granite\n\nfloat hash21(vec2 p)\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n\t\n    return  -1.+2.*fract(sin(h)*43758.5453123);\n}\n\nvec2 hash22(vec2 p)\n{\n    p = p*mat2(127.1,311.7,269.5,183.3);\n\tp = -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n\treturn sin(p*6.283 + iTime);\n}\n\nfloat perlin_noise(vec2 p)\n{\n\tvec2 pi = floor(p);\n    vec2 pf = p-pi;\n    \n    vec2 w = pf*pf*(3.-2.*pf);\n    \n    float f00 = dot(hash22(pi+vec2(.0,.0)),pf-vec2(.0,.0));\n    float f01 = dot(hash22(pi+vec2(.0,1.)),pf-vec2(.0,1.));\n    float f10 = dot(hash22(pi+vec2(1.0,0.)),pf-vec2(1.0,0.));\n    float f11 = dot(hash22(pi+vec2(1.0,1.)),pf-vec2(1.0,1.));\n    \n    float xm1 = mix(f00,f10,w.x);\n    float xm2 = mix(f01,f11,w.x);\n    \n    float ym = mix(xm1,xm2,w.y); \n    return ym;\n   \n}\n\nfloat noise_sum(vec2 p){\n    p *= 4.;\n\tfloat a = 1., r = 0., s=0.;\n    \n    for (int i=0; i<5; i++) {\n      r += a*perlin_noise(p); s+= a; p *= 2.; a*=.5;\n    }\n    \n    return r/s;///(.1*3.);\n}\n\nfloat noise_sum_abs(vec2 p)\n{\t\n    p *= 4.;\n\tfloat a = 1., r = 0., s=0.;\n    \n    for (int i=0; i<5; i++) {\n      r += a*abs(perlin_noise(p)); s+= a; p *= 2.; a*=.5;\n    }\n    \n    return (r/s-.135)/(.06*3.);\n}\n\nfloat noise_sum_abs_sin(vec2 p)\n{\t\n    p *= 7.0/4.0;\n    float f = noise_sum_abs(p);\n    f = sin(f * 1.5 + p.x * 4.0);\n    \n    return f *f;\n}\n\nfloat noise_one_octave(vec2 p){\n    float r = 0.0;\n\tr += 0.125*abs(perlin_noise(p*30.));\n    return r;\n}\n\nfloat noise(vec2 p){\n\n\t#ifdef marble\n    \treturn noise_sum_abs_sin(p);\n    #elif defined turbulence\n    \treturn noise_sum_abs(p);\n    #elif defined granite\n    \treturn noise_one_octave(p);\n    #elif defined cloud\n    \treturn noise_sum(p);\n    #endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv *= vec2(iResolution.x/iResolution.y,1.);\n     \n    float f = noise(uv);\n    \n    f = f*0.5+0.5;\n    \n    vec3 lightColor = vec3(1.0);\n\t\n    vec3 color = vec3(lightColor*f);\n   \n\tfragColor = vec4(color,1.0);\n  \n}","name":"Image","description":"","type":"image"}]}