{"ver":"0.1","info":{"id":"slXBRH","date":"1650522528","viewed":51,"name":"Sphere raycasting","username":"quackthequacker","description":"raycasting a sphere","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 px = vec2(fragCoord.x / iResolution.y, fragCoord.y / iResolution.y);\n    float width = iResolution.x / iResolution.y;\n\t\n\tvec3 camera = vec3(0.0,0.0,0.0);\n \n    vec3 ray = vec3(camera.x+px.x, camera.y+px.y, 0.0);\n    \n    float distFromCenter = length(vec2(0.5*width,0.5) - px);\n    \n    //vec4 color = vec4(distFromCenter,distFromCenter,distFromCenter,1.0);\n    vec4 color = vec4(0.1,0.1,0.1,1.0);\n\t\n    vec3 sphereCenter = vec3(0.5*width+0.7*sin(iTime), 0.5+0.4*sin(iTime*0.8), 0.5 + 0.3*sin(0.9*iTime));\n    float sphereRadius = 0.15;\n    vec4 sphereColor = vec4(1.0,0.0,1.0, 1.0);\n    \n    vec3 light = vec3(0.0,1.0,0.2);\n    vec4 lightColor = vec4(0.5+sin(iTime*1.5)*0.5, 1.0 - (0.5+sin(iTime*1.3)*0.5), 0.0, 1.0);\n    \n    vec3 light2 = vec3(0.99*width,0.1,0.8);\n    vec4 light2Color = vec4(0.0, 1.0 - (0.5+sin(iTime*1.1)*0.5), 0.5+sin(iTime*1.6)*0.5, 1.0);\n    \n    vec3 coords = vec3(px.x, px.y, 0.0);\n    float xspread = 0.0005;\n    float yspread = 0.0005;\n    float stepsize = 0.001;\n    float softness = 0.7;\n    float tint = 0.7;\n    bool hit = false;\n    while(coords.z < 1.0){\n       if(length(coords - sphereCenter) < sphereRadius){\n           //color = sphereColor * dot(normalize(-coords), normalize(light - coords));\n           color = sphereColor*(1.0 - softness) + \n           \n                   (sphereColor * dot(normalize(coords - sphereCenter), normalize(light - coords)) \n                   * softness * (1.0-tint) + \n                   lightColor * tint * softness * \n                   dot(normalize(coords - sphereCenter), normalize(light - coords)) *\n                   smoothstep(0.0, 1.0, dot(normalize(coords - sphereCenter), normalize(light - coords)))) +\n                   \n                   (sphereColor * dot(normalize(coords - sphereCenter), normalize(light2 - coords)) \n                   * softness * (1.0-tint) + \n                   light2Color * tint * softness * \n                   dot(normalize(coords - sphereCenter), normalize(light2 - coords)) *\n                   smoothstep(0.0, 1.0, dot(normalize(coords - sphereCenter), normalize(light2 - coords))));\n                   \n           hit = true;\n           break;\n       }\n       coords.z += stepsize;\n       coords.x += (coords.x - width * 0.5) * xspread;\n       coords.y += (coords.y - 0.5) * yspread;\n    }\n    if(!hit){\n       color += vec4(1.0,1.0,1.0,1.0) * dot(vec3(0.0,0.0,-1.0), normalize(light - coords)) \n                   * (1.0-softness) * (1.0-tint) + \n                   vec4(1.0,1.0,1.0,1.0) * dot(vec3(0.0,0.0,-1.0), normalize(light2 - coords)) \n                   * (1.0-softness) * (1.0-tint) + \n                   lightColor * tint * softness * \n                   dot(vec3(0.0,0.0,-1.0), normalize(light - coords))  *\n                   smoothstep(0.0, 1.0, dot(vec3(0.0,0.0,-1.0), normalize(light - coords))) + \n                   light2Color * tint * softness * \n                   dot(vec3(0.0,0.0,-1.0), normalize(light2 - coords))  *\n                   smoothstep(0.0, 1.0, dot(vec3(0.0,0.0,-1.0), normalize(light2 - coords)));\n    }\n    \n\tfragColor = color;\n}\n\n/*lightColor * (step(0.1, dot(normalize(coords - sphereCenter), normalize(light - coords)) \n                   * softness * tint) * dot(normalize(coords - sphereCenter), normalize(light - coords)) \n                   * softness * tint * 0.8 + \n                   (1.0 - step(0.1, dot(normalize(coords - sphereCenter), normalize(light - coords)) \n                   * softness * tint)) * 0.2 * smoothstep(0.0, 0.2, dot(normalize(coords - sphereCenter), normalize(light - coords)) \n                   * softness * tint) * dot(normalize(coords - sphereCenter), normalize(light - coords)) \n                   * softness * tint);\n*/","name":"Image","description":"","type":"image"}]}