{"ver":"0.1","info":{"id":"3sSXWD","date":"1553735884","viewed":1060,"name":"Antialiasing test","username":"edo_m18","description":"Antialiasing test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["antialiasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 3\n\nmat3 camera(in vec3 ro, in vec3 ta)\n{\n    const vec3 up = vec3(0, 1.0, 0);\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nfloat dist_func(in vec3 p)\n{\n    vec3 q = p;\n    q.xz = mod(q.xz, vec2(8.0, 4.0)) - vec2(4.0, 2.0);\n    return length(q) - 1.5;\n}\n\nvec3 getNormal(in vec3 p)\n{\n    const vec2 d = vec2(0.001, 0.0);\n    return normalize(vec3(dist_func(p + d.xyy) - dist_func(p - d.xyy),\n                          dist_func(p + d.yxy) - dist_func(p - d.yxy),\n                          dist_func(p + d.yyx) - dist_func(p - d.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize(vec3(0.8, 0.8, 1.0));\n    \n    float camDist = 15.0;\n    float sp = iTime * 0.2;\n    float coef = 2.0;\n    float k = 2.0 * exp(coef * sin(sp)) / exp(coef);\n    float x = k * sin(sp) * camDist;\n    float y = k * sin(sp) * sin(sp) * 5.0 + 3.0;\n    float z = k * cos(sp) * camDist;\n    \n    vec3 ro = vec3(x, y, z);\n    vec3 ta = vec3(0);\n    \n    mat3 c = camera(ro, ta);\n    \n    float d = 0.0;\n    \n    vec3 col = vec3(0);\n    vec3 tot = vec3(0);\n\n    for (int j = 0; j < AA; j++)\n    for (int k = 0; k < AA; k++)\n    {\n        vec2 o = vec2(float(j), float(k)) / float(AA);\n        vec2 uv = ((fragCoord + o) * 2.0 - iResolution.xy) / iResolution.y;\n        \n        vec3 ray = c * normalize(vec3(uv, 1.25));\n\n        vec3 p = ro;\n\n        for (int i = 0; i < 128; i++)\n        {\n            d = dist_func(p);\n\n            if (d < 0.001)\n            {\n                break;\n            }\n\n            p += d * ray;\n        }\n\n        if (d < 0.001)\n        {\n            vec3 n = getNormal(p);\n            float diff = clamp(dot(n, light), 0.0, 1.0);\n            \n            vec3 ref = reflect(ray, n);\n            vec3 tex = texture(iChannel0, ref).rgb;\n            col = tex * vec3(diff);\n        }\n        else\n        {\n            //vec3 skyTop = vec3(0.3, 0.6, 1.0);\n            //vec3 skyBot = vec3(0.05, 0.35, 1.0);\n            //col = mix(skyTop, skyBot, uv.y + 0.75);\n            col = texture(iChannel0, ray).rgb;\n        }\n        \n        // gamma (0.4545 == 1/2.2)\n        col = pow(col, vec3(0.4545));\n\n        tot += col;\n    }\n    \n    tot /= float(AA * AA);\n    \n    fragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}