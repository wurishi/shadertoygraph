{"ver":"0.1","info":{"id":"WdBGzV","date":"1549314764","viewed":286,"name":" Kaleidoscopic demo","username":"darkeclipz","description":" Kaleidoscopic idea from Kushulain.\n\nFractal formula: https://www.shadertoy.com/view/Mss3Wf","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 r2(float angle) { return mat2(cos(angle), -sin(angle), sin(angle), cos(angle)); }\n#define R iResolution.xy\n#define Iterations 10.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-R)/iResolution.y;\n\tvec3 col = vec3(0);\n    float s = iTime/16. * cos(iTime/32.);\n\n    // https://www.shadertoy.com/view/Mss3Wf\n    for(float i=0.; i < Iterations; i++) {\n    \tuv = abs(uv) - s; \n        uv.xy *= r2(iTime/16. + 2.);\n        uv *= 1.08;\n    }\n    \n    float dist = length(fract(2.*uv));\n    vec3 rainbow = cos(vec3(0,2,4) + iTime + 2.*uv.xyx);\n    col = dist*rainbow;\n    \n    float gridSize = 3.;\n    float gridWidth = 0.04;\n    vec2 grid = smoothstep(gridWidth, 0., abs(fract(gridSize*uv)-gridWidth));\n    col = mix(col, vec3(1), clamp(grid.x + grid.y, 0., 1.)); \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}