{"ver":"0.1","info":{"id":"dllcRN","date":"1690494800","viewed":39,"name":"Curve Animation","username":"Benji_w","description":".","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["curve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 p, vec2 c) {\n    float d = length(p-c);\n    return smoothstep(fwidth(d), 0., d-.015);\n    \n}\n\nfloat Line(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float t  = clamp(dot(pa, ba)/dot(ba, ba), 0., 1.);\n    vec2 c = a+ba*t;\n    float d = length(c-p);\n    return smoothstep(fwidth(d), 0., d-0.005);\n}\n\n\nvec2 Curve(vec2 a, vec2 b, vec2 c, vec2 d, float t) {\n    return mix(mix(mix(a, c, t), mix(c, d, t), t), mix(d, b, t), t);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.x;\n\n    vec3 col = vec3(0.0);\n    \n    float t = sin(iTime/1.)*.5+.5;\n    float r = sin(iTime*2.)*.5+.5;\n        r *=.5;\n    \n    vec2\n        A = vec2(-.2, -.1), \n        B = vec2(.2, -.1),\n        C = vec2(-.2, .1),\n        D = vec2(.2, .1),//(iMouse.xy - iResolution.xy*.5)/iResolution.x,\n        E = vec2(0., .2),\n        CE = mix(C, E, t),\n        ED = mix(E, D, t),\n        AC = mix(A, C, t),\n        CD = mix(C, D, t),\n        DB = mix(D, B, t),\n        ACE = mix(AC, CE, t),\n        CED = mix(CE, ED, t),\n        EDB = mix(ED, DB, t),\n        APAP = mix(ACE, CED, t),\n        APFF = mix(CED, EDB, t),\n        AP = mix(APAP, APFF, t);\n        \n    col += vec3(0,0,1)*Circle(uv, A);\n    col += vec3(0,0,1)*Circle(uv, B);\n    col += vec3(0,0,1)*Circle(uv, C);\n    col += vec3(0,0,1)*Circle(uv, D);\n    col += vec3(0,0,1)*Circle(uv, E);\n    \n    col += vec3(0,1.5,0)*Circle(uv, AC);\n    col += vec3(0,1.5,0)*Circle(uv, CE);\n    col += vec3(0,1.5,0)*Circle(uv, ED);\n    col += vec3(0,1.5,0)*Circle(uv, DB);\n    \n    col += vec3(1,0,0)*Circle(uv, ACE);\n    col += vec3(1,0,0)*Circle(uv, CED);\n    col += vec3(1,0,0)*Circle(uv, EDB);\n    \n    col += vec3(4.,0,4.)*Circle(uv, APAP);\n    col += vec3(4.,0,4.)*Circle(uv, APFF);\n    \n    col += vec3(1,1,0)*Circle(uv, AP);\n    \n    //col += vec3(1,r,r)*Circle(uv, AP);\n   \n    col += vec3(1,.5,.0)*Line(uv, A, C);\n    col += vec3(1,.5,.0)*Line(uv, C, E);\n    col += vec3(1,.5,.0)*Line(uv, E, D);\n    col += vec3(1,.5,.0)*Line(uv, D, B);\n    \n    //col += vec3(r,r,r)*Line(uv, AC, CE);\n    //col += vec3(r,r,r)*Line(uv, CE, ED);\n    //col += vec3(r,r,r)*Line(uv, ED, DB);\n    \n    //col += vec3(r+.20,.20,.20)*Line(uv, ACE, CED);\n    //col += vec3(r+.20,.20,.20)*Line(uv, CED, EDB);\n    //col += vec3(r,r,r)*Line(uv, ACE, EDB);\n    \n    col += vec3(1,1,1)*Line(uv, APAP, APFF);\n    \n    \n    //col += vec3(r,r,r)*Line(\n    \n    int NUM_SEGS = 128;\n    \n    \n    vec2 P, PP=A;\n    for(int i=1; i<=NUM_SEGS; i++) {\n      t = float(i)/float(NUM_SEGS);\n      P = Curve(A, B, C, D,t);\n      //col +=  vec3(1,0,0)*Line(uv, P, PP);\n      PP = P;\n    }\n    \n    \n   \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}