{"ver":"0.1","info":{"id":"7ldGDN","date":"1636155146","viewed":103,"name":"SD of squared distances","username":"Envy24","description":"mouse.x - smoothness;\nmouse.y - scene scale;","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","square","compare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n#define center(P) ( (P+P-R.xy)/R.y )\n#define MX (max(iMouse.x / R.x, 0.01))\n#define MY (max(iMouse.y / R.y, 0.01))\n\n//#define variant circle\n//#define variant circleSDF\n//#define variant circleSDFS\n#define variant circleSQSDF\n\nfloat circle(vec2 S, vec2 C, float r, float dummy) { return length(S - C) < r ? 0.0 : 1.0; }\n\nfloat circleSDF(\n    in vec2 S,           // sample coordinates\n    in vec2 C,           // circle center\n    in float r,          // circle radius\n    in float smoothness) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float _x = S.x - C.x; float _y = S.y - C.y;\n    \n    // Signed distance.\n    return sqrt(_x * _x + _y *_y) - r;\n}\n\nfloat circleSDFS(\n    in vec2 S,           // sample coordinates\n    in vec2 C,           // circle center\n    in float r,          // circle radius\n    in float smoothness) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float _x = S.x - C.x; float _y = S.y - C.y;\n    \n    // Signed distance.\n    float sd = sqrt(_x * _x + _y *_y) - r;\n     \n    // Smoothstep interpolation.\n    return smoothstep(-smoothness, smoothness, sd);\n    //return smoothstep(-smoothness, smoothness, sd * sd); // outline\n}\n\nfloat circleSQSDF(\n    in vec2 S,           // sample coordinates\n    in vec2 C,           // circle center\n    in float r,          // circle radius\n    in float smoothness) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float _x = S.x - C.x; float _y = S.y - C.y;\n    \n    // Signed distance of squares.\n    float sds = _x * _x + _y *_y - r * r;\n    \n    float ss = smoothness * smoothness;\n    \n    // Smoothstep interpolation.\n    return smoothstep(-ss, ss, sds);\n    //return smoothstep(-ss, ss, sds * sds); // outline\n}\n\nvoid mainImage(out vec4 O, in vec2 P)\n{\n    float scale = MY * 10.0;\n    vec2 uv = center(P) * scale;\n    \n    float smoothness = MX;\n    //float smoothness = 0.025;\n    \n    //                           circle center              circle radius   anti-aliasing\n    float gray =     variant(uv, scale * vec2(-0.75, 0.0),  scale * 1.0,    smoothness);\n    gray = min(gray, variant(uv, scale * vec2(0.725, 0.5),  scale * 0.5,    smoothness));\n    gray = min(gray, variant(uv, scale * vec2(0.725, -0.5), scale * 0.25,   smoothness));\n    gray = min(gray, variant(uv, scale * vec2(1.5, -0.5),   scale * 0.125,  smoothness));\n    gray = min(gray, variant(uv, scale * vec2(1.5, 0.5),    scale * 0.0625, smoothness));\n\n    O = vec4(vec3(gray),1.0);\n}","name":"Image","description":"","type":"image"}]}