{"ver":"0.1","info":{"id":"tsBGzy","date":"1549163739","viewed":168,"name":"Line Segment Example","username":"Xor","description":"This is my one-size-fits-all approach to line segments.\nYou may not need the line length float if you do not need end caps.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","example","line"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\t\"Line Segments\" by Xor.\n\n\tThis is my one-size-fits-all approach to line segments.\n\tYou may not need the line length float if you do not need end caps.\n*/\nvoid mainImage( out vec4 Color, in vec2 Coord)\n{\n    //Pick two points to draw lines from.\n    vec2 P1 = vec2(100,100)+50.*cos(iTime+vec2(0,1));\n    vec2 P2 = vec2(400,200)+50.*cos(iTime+vec2(2,3));\n    \n    //Find the length of the line segment.\n    float Length = distance(P1,P2);\n    //Find the slope vector of the line.\n    vec2 Slope = (P1-P2)/Length;\n    //Find the perpendicular vector to the slope.\n    vec2 Normal = Slope.yx*vec2(-1,1);\n    //Line thickness in pixels.\n    const float Width = 4.;\n    \n    //Calculate distance to line. (This should to be clamped).\n    float LineWidth = Width*.5-abs(dot(Coord-P1,Normal));\n    //Calculate distance to line ends. (This should to be clamped).\n    float LineLength = Length/2.-abs(dot(Coord-(P1+P2)/2.,Slope));\n    //Find the distance to the line edges.\n    float Line = clamp(min(LineWidth,LineLength),0.,1.);\n    \n    //Add some circles for the end points\n    const float Radius = 8.;\n    float Circle1 = clamp(Radius-length(Coord-P1),0.,1.);\n    float Circle2 = clamp(Radius-length(Coord-P2),0.,1.);\n    \n    float Output = Line+Circle1+Circle2;\n    Color = vec4(Output);\n}","name":"Image","description":"","type":"image"}]}