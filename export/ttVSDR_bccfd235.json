{"ver":"0.1","info":{"id":"ttVSDR","date":"1582552149","viewed":458,"name":"CMY animated waves","username":"jaszunio15","description":"Inspired by PixelPhil shader: https://www.shadertoy.com/view/tlySzm\n\nShader License: CC BY 3.0\nAuthor: Jan Mróz (jaszunio15)","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["waves","sin","cmyk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n/*\n\tInspired by PixelPhil shader:\n\thttps://www.shadertoy.com/view/tlySzm\n\n\tLog:\n\t1. Added metallic look\n*/\n\nfloat fadeWave(vec2 uv, float pixelSize)\n{\n    //gradient borders\n    float firstSin = fbm(uv.x * 2.0 + TIME * 0.9);\n    float secondSin = fbm(uv.x * 1.2 + 16.3 + TIME);\n    \n    //lightness for metallic look\n    float dist = abs(firstSin - secondSin) * 10.0;\n    float lightness = 1.0 / (dist + 0.4);\n    //lightness = smoothstep(-0.3, 1.0, lightness);\n    \n    //gradient from firstSin to secondSin\n    float shape = 0.0;\n    if (firstSin < secondSin && uv.y < secondSin || secondSin < firstSin && uv.y > secondSin)\n        shape = smoothstep(firstSin, secondSin, uv.y);\n        \n    //gradient roundness\n    shape = pow(shape, 4.0);\n    \n    //wave details for antialiasing\n    float border = 1.0 - smoothstep(0.0, 2.0 * pixelSize, abs(uv.y - secondSin));\n    float border2 = 1.0 - smoothstep(0.0, 3.0 * pixelSize, abs(uv.y - secondSin));\n    \n    //adding gradient and details\n    float fadeWave = clamp(border * 1.0 + shape * 1.0, 0.0, 1.0) + border2 * 1.0;\n    return fadeWave * lightness * 1.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //coordinates\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float pixelSize = dFdy(uv.y);\n    \n    //waves design\n   \tfloat wave1 = fadeWave(uv, pixelSize);\n    float wave2 = fadeWave(uv * vec2(1.2, 1.0) + vec2(11.2, -0.0), pixelSize);\n    float wave3 = fadeWave(uv * vec2(0.8, 1.0) + vec2(32.321, 0.0), pixelSize);\n    \n    //colors\n    vec4 color = wave1 * vec4(0.4, 0.9, 0.9, 1.0);\n    color += wave2 * vec4(0.9, 0.4, 0.9, 1.0); \n    color += wave3 * vec4(0.9, 0.9, 0.4, 1.0);\n    \n    //postprocess\n    color = pow(color, vec4(1.3));\n    color = smoothstep(-0.3, 1.1, color);\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TIME (iTime * 0.5)\n\nfloat fbm(float x)\n{\n    float sum = 0.0;\n \tfor (float i = 1.0; i <= 4.0; i *= 1.7)\n    {\n     \tsum += sin(x * i) / i;\n    }\n    return sum * 0.4;\n}","name":"Common","description":"","type":"common"}]}