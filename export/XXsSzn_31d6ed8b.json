{"ver":"0.1","info":{"id":"XXsSzn","date":"1709090317","viewed":123,"name":"3d volume approximation","username":"Zentient","description":"Fakes volumetric light with math.","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["light","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"2d shadow approximation\" by Zentient. https://shadertoy.com/view/4XsSRn\n// 2024-02-28 02:44:17\n\nconst float brightness = 30.0;\nconst float rad = 7.0;\nconst float;\n\n//This is just for fun\nvec3 ACESFilm(vec3 x)\n{\nfloat a = 2.51f;\nfloat b = 0.03f;\nfloat c = 2.43f;\nfloat d = 0.59f;\nfloat e = 0.14f;\nreturn clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.0, 1.0);\n}\n\nvec3 volume(vec3 coord)\n{\n    vec3 liPos[2];\n    vec3 ocPos[3];\n    vec3 liCol[2];\n    \n    //Light color\n    liCol[0] = vec3(0.7, 0.0, 0.1);\n    liCol[1] = vec3(0.01, 0.3, 0.3);\n    //liCol[2] = vec3(0.3, 0.1, 1.0);\n   \n    //Light positions\n    liPos[0] = vec3(2.0 * sin(iTime * 1.5), 2.0 * cos(iTime), cos(iTime * 1.5)) * (iResolution.xyx / 45.0);\n    liPos[1] = vec3(3.0 * sin(2.0 + iTime * 1.0), cos(0.0 + iTime * 0.5), 0.5 + 0.3 * sin(iTime)) * (iResolution.xyz / 60.0);\n    //liPos[2] = vec3(sin(3.3 + iTime * 0.45), cos(3.0 + iTime) * 0.7, cos(3.3 + iTime * 0.45)) * (iResolution.xyx / 20.0);\n    \n    //Object positions\n    ocPos[0] = vec3(sin(iTime), cos(iTime * 0.65), 1.0 + 0.3 * sin(iTime)) * (iResolution.xyx / 60.0);\n    ocPos[1] = vec3(cos(iTime), cos(2.0 + iTime * 1.7), 1.0 + 0.3 * cos(iTime)) * (iResolution.xyx / 30.0);\n    ocPos[2] = vec3(sin(5.1 + iTime * 2.5), cos(1.0 + iTime * 1.0), 0.6) * (iResolution.xyx / 40.0);\n\n    \n    vec3 col; //Output color\n    \n    for(int i = 0; i < liPos.length(); i++)\n    {    \n        for(int ii = 0; ii < ocPos.length(); ii++)\n        {    \n            float ld = distance(coord, liPos[i]) - rad;//ld: Light distance\n            float od = distance(coord, ocPos[ii]) - rad;//od: Object distance\n            float dd = distance(liPos[i], ocPos[ii]);//dd: Distance between light and object\n            \n            //Early return if touching objects\n            if(ld <= 0.0) {return liCol[i];}\n            if(od <= 0.0) {return col;}\n            \n            \n            //Shadows\n            float difDot = 0.5 + 0.5 * (dot(normalize(ocPos[ii] - coord), normalize(ocPos[ii] - liPos[i])));\n            difDot -= clamp((rad / 5.0) / (od + (rad / 5.0)), 0.0, 1.0);\n            difDot = clamp(difDot, 0.0, 1.0);\n            difDot = pow(difDot, 0.1 * (rad / dd));\n            \n            //Light propogation\n            float occl = rad * brightness / (ld*ld);\n            occl /= occl+1.0;\n            col += liCol[i] * (occl * difDot / float(ocPos.length()));\n            \n        }\n        \n    }\n    \n    return col;\n}\n\nvec3 layer(float layers, vec2 coord, float offset)\n{\n    vec3 col;\n    for(float i = 0.0; i <= layers; i += 6.0)\n    {\n        vec3 vol = volume(vec3(coord, i + offset));\n        if(vol == vec3(0.0)) {return col;}\n        col += 0.3 * vol;\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord / 1024.0;\n    vec3 noise = texture(iChannel0, uv).rgb;\n    vec3 col = 1.0 * layer(20.0, (fragCoord.xy - iResolution.xy * 0.5) / 5.0, 6.0 * (noise.r - 0.5));\n    \n    \n    //Pretty things\n    col = ACESFilm(2.0 * col);\n    col = pow(col, vec3(1.0) / 2.20);\n    \n    //Dithering\n    //vec3 noise = texture(iChannel0, uv).rgb;\n    col = mix(col, col-noise, 0.1 * (1.0 - col));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}