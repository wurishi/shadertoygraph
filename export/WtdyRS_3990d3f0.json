{"ver":"0.1","info":{"id":"WtdyRS","date":"1685946867","viewed":70,"name":"Jonix Mandelbrot + Julia","username":"Hultsborn10","description":"Testing the Mandelbrot fractal combined with Julia set. Using the Mandelbrot set as a map for the Julia set. Klick the mouse button on different areas of the Mandelbrot set to create different Julia variations.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//  HSB Function from IÃ±igo Quiles \n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb(vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0, \n                     0.0, \n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 mandel(vec2 uv, float maxIter){\n    vec3 col = vec3(0);\n    vec2 myVec = uv;\n    float counter = 0.0;\n    \n    vec2 newVec = vec2(0.0,0.0);\n    while (length(myVec) < 2.0 && counter < maxIter)\n    {\n        newVec.x = myVec.x * myVec.x - myVec.y * myVec.y + uv.x;\n        newVec.y = 2.0*myVec.x * myVec.y + uv.y;\n        myVec = newVec;\n        counter++;\n    }\n    \n    //float colR = 4.0*counter/maxIter;\n    //col = hsb2rgb(vec3(colR,1.0,1.0));\n    col = vec3(counter/maxIter);\n    \n    if (counter == maxIter) col = vec3(0.0);\n    return col;\n}\n\nvec3 julia(vec2 uv, vec2 c){\n    vec3 col = vec3(0);\n    vec2 myVec = uv;\n    int counter = 0;\n    int maxIter = 100;\n    vec2 newVec = vec2(0.0,0.0);\n    while (length(myVec) < 2.0 && counter < maxIter)\n    {\n        newVec.x = myVec.x * myVec.x - myVec.y * myVec.y + c.x;\n        newVec.y = 2.0*myVec.x * myVec.y + c.y;\n        myVec = newVec;\n        counter++;\n    }\n    float fC = float(counter);\n    float fMax = float(maxIter);\n    float colR = 4.0*fC/fMax;\n    col = hsb2rgb(vec3(colR,1.0,1.0));\n    \n    if (counter == maxIter) col = vec3(0.0);\n    return col;\n}\n\nvec2 mandelCoord(vec2 p){\n    vec2 rt = p * 10.0;\n    rt -= vec2(8.2, 3.7);\n    return rt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (x from -0.9 to 0.9, y from -0.5 to 0.5)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n    //uv *= pow(0.9,iTime);\n    //mouse = mandelCoord(mouse);    \n    vec3 col = vec3(0);\n    \n    /*    \n    //Separate window for Mandelbrot Fractal\n    if (uv.y > 0.25 && uv.x > 0.6){\n        col = mandel(mandelCoord(uv),100.0);\n    }\n    else{\n        mouse = mandelCoord(mouse);\n        col = julia(3.0*uv, mouse);\n    }\n    */\n\n    //Mandelbrot shadow under Julia\n    uv *= 2.0;\n    mouse *= 2.0;\n    col = julia(1.5*uv, mouse);\n    col += mandel(uv, 50.0);\n    // Output to screen\n    \n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}