{"ver":"0.1","info":{"id":"4f2Gz1","date":"1704006147","viewed":40,"name":"Newton's Fractal (z^3 - 1)","username":"nrebei2","description":"Newtons Fractal - Hold mouse down to zoom into mouse cursor","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159\n#define iterations 100\n\n// barycentric interpolation\nvec3 berp(vec2 a, vec2 b, vec2 c, vec2 x) {\n    vec2 ab = inverse(mat2(b-a, c-a)) * (x-a);\n    // if ((ab.x + ab.y) > 1. || ab.x < 0. || ab.y < 0.) {\n    //    return vec3(0.);\n    // }\n    return vec3(1.-ab.x-ab.y, ab.x, ab.y);\n}\n\nvec4 getColor(vec2 uv, vec2 r1, vec2 r2, vec2 r3) {\n    vec4 c1 = vec4(0.996, 0.129, 0.545, 1.0); // FE218B\n    vec4 c2 = vec4(0.996, 0.843, 0.000, 1.0); // FED700\n    vec4 c3 = vec4(0.129, 0.690, 0.996, 1.0); // 21B0FE\n\n    vec3 abc = berp(r1, r2, r3, uv);\n\n    return (abc.x*c1 + abc.y*c2 + abc.z*c3);\n}\n\n// complex multiplication\nvec2 cmul(vec2 z1, vec2 z2) {\n    return vec2(z1.x*z2.x - z1.y*z2.y, z1.x*z2.y + z2.x*z1.y);\n}\n\n// complex inverse\nvec2 cinv(vec2 z) {\n    return vec2(z.x, -z.y)/(pow(length(z), 2.));\n}\n\n// screen to view\nvec2 toframe(vec2 pos) {\n    vec2 uv = (pos - iResolution.xy/2.)/(iResolution.x / 2.);\n    uv *= 2.0;\n    return uv;\n}\n\nmat3 getZoom() {\n    // use a 3x3 affine matrix to zoom onto cursor\n    // only 4 relevant elements in matrix for zoom => can store in one buffer fragment\n    // oldmat := previous frame matrix\n    // multiply oldmat with new matrix which zooms in on current mouse position\n    //   to compose zooms together smoothly\n    vec4 oldmat;\n    if (iFrame == 0) {\n        oldmat = vec4(1., 1., 0., 0.);\n    } else {\n        oldmat = texelFetch(iChannel0, ivec2(0, 0), 0);\n    }\n    mat3 zoomTrans = transpose(mat3(oldmat.x, 0., oldmat.z, 0., oldmat.y, oldmat.w, 0., 0., 1.));\n    \n    if (iMouse.z > 0.0) {\n        vec3 m = vec3(toframe(iMouse.xy), 1.);\n        m = zoomTrans * m;\n\n        float s = 0.99;\n        zoomTrans = transpose(mat3(s, 0., m.x * (1. - s), 0., s, m.y * (1. - s), 0., 0., 1.)) * zoomTrans;\n    }\n    return zoomTrans;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = toframe(fragCoord);\n    \n    mat3 zoomTrans = getZoom();\n    \n    vec3 nuv = zoomTrans * vec3(uv, 1.);\n    uv = nuv.xy;\n    \n    if (ivec2(fragCoord) == ivec2(0, 0)) {\n        // cram zoomTrans into bottom left fragment\n        // to retrieve next draw\n        fragColor = vec4(zoomTrans[0][0], zoomTrans[1][1], zoomTrans[2][0], zoomTrans[2][1]);\n    } else {\n        vec2 r1 = vec2(1.0, 0.0);\n        vec2 r2 = vec2(cos(2.*PI/3.), sin(2.*PI/3.));\n        vec2 r3 = vec2(cos(4.*PI/3.), sin(4.*PI/3.));\n\n        float d1 = distance(uv, r1);\n        float d2 = distance(uv, r2);\n        float d3 = distance(uv, r3);\n\n        if (min(d1, min(d2, d3)) <= 0.05) {\n            fragColor = vec4(1);\n        } else {\n\n            for (int i = 0; i < iterations; i++) {\n                vec2 fz = cmul(cmul(uv, uv), uv) - vec2(1., 0.);\n                vec2 dfz = 3. * cmul(uv, uv);\n                vec2 s = cmul(fz, cinv(dfz));\n\n                uv = uv - s;\n            }\n\n            fragColor = getColor(uv, r1, r2, r3);\n\n         }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}