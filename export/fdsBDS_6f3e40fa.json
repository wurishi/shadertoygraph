{"ver":"0.1","info":{"id":"fdsBDS","date":"1716662017","viewed":68,"name":"FLBLDomain coloring","username":"LeFlo","description":"Colors the plane accordingly to the complex number in func","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["domaincoloring","complexnumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926;\nconst float t = 0.1;\n\n\n#define division(a, b) vec2((a.x * b.x + a.y * b.y)/(b.x*b.x + b.y*b.y), (a.y*b.x - a.x*b.y)/(b.x*b.x+b.y*b.y))\n#define product(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define conjugate(a) vec2(a.x,-a.y)\n#define divide(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n\nvec3 hsv2rgb_smooth(vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec2 func(vec2 z){\n    return division(vec2(1.0, 0.0), z);\n}\n\nfloat g(float r){\n    return 0.5 + 0.5*r - 0.5*floor(r);\n}\n\nfloat h(vec2 fz){\n    return abs(pow(sin(pi * fz.x), t)) * abs(pow(sin(pi * fz.y), t));\n}\n\nfloat zoom = 1.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //Center scene\n        uv -= .5;\n\n    // Flip y axis\n    uv.y = -uv.y;\n\n    //Aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n\n    //border\n    if(uv.x < -0.85 || uv.x > 0.85 || uv.y < -0.45 || uv.y > 0.45){\n        fragColor = vec4(0.,0.,0.,1.);\n    } else {\n        //Zoom\n        uv *= 2./(1.+10.+10.*sin(iTime/5.));\n\n        uv = func(uv);\n\n        float r = length(uv);\n        float theta = atan(uv.y, -uv.x)+pi;\n\n        vec3 color = hsv2rgb_smooth(vec3(theta/(2.*pi), g(r), h(uv)));\n\n        fragColor = vec4(color,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}