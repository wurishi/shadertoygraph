{"ver":"0.1","info":{"id":"3l3cR7","date":"1613295087","viewed":47,"name":"Sonogram - Colored","username":"Baruch","description":"Shows a sonogramm like view. iChannel0 serves as \"input\" value, this could also be an amplitude or something else.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["sonogram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright (c) 2020, Daniel Bi≈üar\n// License CC BY 4.0\n\n// get rgb color from input value\n// low values = blue, middle = green, high = red\nvec3 gradient(float v)\n{\n    float r, g, b;\n    \n    // functions where created based on the default linear equation\n    // f(x) = mx + b, where m is the slope and b the intersection point\n    // with the x axis f(0) = b ;)\n    // you can view the graph of the functions here: \n    // https://iquilezles.org/apps/graphtoy/?f3(x)=1-abs(x*2-1)&f4(x)=clamp(1-x*2,%200,%201)&f6(x)=clamp((x-0.5)*2,%200,%201)\n    \n    b = clamp(1.0-v*2.0, 0.0, 1.0);\n    g = 1.0-abs(v*2.0-1.0);\n    r = clamp((v-0.5)*2.0, 0.0, 1.0);\n    \n    // gamma correction\n    return pow(vec3(r, g, b), vec3(1./2.2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // reads the current value\n    // if you want to change the function that is displayed\n    // change Buffer A\n    float value = texture(iChannel0, uv).x;\n    \n    vec3 color = gradient(value);    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n        \n    float t = iTime * 0.1;\n    float x = uv.x + t;\n    float y = uv.y;\n    \n    float amplitudeCount = 3.;\n    float colorValue1 = sin(y * PI * 2. * amplitudeCount) * sin(x + mod(x*0., 100.));\n    float colorValue2 = (sin(x * PI * 2. * 7.) + 0.2) / 2.0;\n    \n    float colorValue = (colorValue1 + colorValue2) * 0.7;\n    \n    colorValue = (colorValue * colorValue) - 0.2;\n    \n    vec3 baseVector = vec3(1,1,1);\n        \n    fragColor = vec4(colorValue, 0, 0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}