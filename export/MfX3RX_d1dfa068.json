{"ver":"0.1","info":{"id":"MfX3RX","date":"1703370158","viewed":50,"name":"Pi being irrational - visu","username":"maras","description":"GLSL implementation of (not mine) viral video: https://www.youtube.com/shorts/aUDYWYqtAR4 . In video description author provided an explanation and his Python implementation.\n\nClick LMB for zoom.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["visualization","pi","irrational","tiktok"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define SPEED 5.0\n\n\nfloat distance_to_line_segment(vec2 point, vec2 start, vec2 end) {\n    float A = point.x - start.x;\n    float B = point.y - start.y;\n    float C = end.x - start.x;\n    float D = end.y - start.y;\n\n    float dot1 = A * C + B * D;\n    float len_sq = C * C + D * D;\n    float param = -1.0;\n    if (len_sq != 0.0) {  param = dot1 / len_sq; }\n       \n    float xx, yy;\n\n    if (param < 0.0) {\n        xx = start.x;\n        yy = start.y;\n    }\n\n    else if (param > 1.0) {\n        xx = end.x;\n        yy = end.y;\n    }\n\n    else {\n        xx = start.x + param * C;\n        yy = start.y + param * D;\n    }\n\n    float dx = point.x - xx;\n    float dy = point.y - yy;\n    return sqrt(dx * dx + dy * dy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 tex_uv = fragCoord.xy / iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    if (iMouse.z > 1.0) {\n        vec2 mouse_zoom = iMouse.xy / iResolution.xy;\n        \n        tex_uv = tex_uv * 0.5 + mouse_zoom;\n        \n        uv += vec2(10.0);\n    }\n    \n    vec4 color = texture(iChannel0, tex_uv);\n    \n    float inner_speed = (iTime) * SPEED;\n    float outer_speed = inner_speed * PI;\n\n    vec2 anchor_1 = vec2(sin(inner_speed), cos(inner_speed)) / 2.0;\n    vec2 anchor_2 = vec2(sin(outer_speed), cos(outer_speed)) / 2.0 + anchor_1;\n\n\n    if (distance(uv, anchor_1) < 0.02) {\n        color = vec4(0.0,0.5,0.0,1.0);\n    }\n    \n    if (distance(uv, anchor_2) < 0.02) {\n        color = vec4(0.0,0.5,0.0,1.0);\n    }\n    \n    if (distance_to_line_segment(uv, vec2(0.0), anchor_1) < 0.01) {\n        color = vec4(0.0,0.4,0.0,1.0);\n    }\n    \n    if (distance_to_line_segment(uv, anchor_1, anchor_2) < 0.01) {\n        color = vec4(0.0,0.4,0.0,1.0);\n    }\n    \n\n\tfragColor = vec4(color.xyz, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define SPEED 5.0\n\n#define FRAME 1.0/60.0\n#define SHIFT 1.0/4000.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 uv_tex = fragCoord.xy / iResolution.xy;\n    \n    float cell = texture(iChannel0, uv_tex).x;\n\n    if (cell > 0.0) {\n        col = vec3(1.0);fragColor = vec4(col,1.0);\n        return;\n    }\n\n    // for loop hurts me deeply, but I don't know how to do it better\n    for (float time_shift = 0.0; time_shift < FRAME; time_shift += SHIFT) {\n        \n        float inner_speed = (iTime+time_shift) * SPEED;\n        float outer_speed = inner_speed * PI;\n\n        vec2 anchor_1 = vec2(sin(inner_speed), cos(inner_speed)) / 2.0;\n        vec2 anchor_2 = vec2(sin(outer_speed), cos(outer_speed)) / 2.0 + anchor_1;\n\n\n        if (distance(uv, anchor_2) < 0.003) {\n            col = vec3(1.0);fragColor = vec4(col,1.0);\n            return;\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}