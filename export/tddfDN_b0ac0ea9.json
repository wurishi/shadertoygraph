{"ver":"0.1","info":{"id":"tddfDN","date":"1605176608","viewed":79,"name":"Round cone - 2D distance","username":"M_cgode","description":"Interactive 2D distance field for round cone.\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","interactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Capped cone - 2D distance\" by M_cgode. https://shadertoy.com/view/tsdfWN\n// 2020-11-12 10:21:05\n\n#define Y 0.0\n#define HEIGHT 2.0\n\n\nfloat dot2( in vec3 a ) { return dot( a, a ); } \n\n\n// Based off iq's 3D SDFs article: https://iquilezles.org/articles/distfunctions\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float ratio = iResolution.x / iResolution.y;\n    vec2 coordinates = (2.0 * uv - 1.0) * vec2( ratio, 1.0 ) * HEIGHT / 2.0;\n    \n    vec3 b = vec3( 0.5, Y, 0.5 );\n    if ( length(iMouse.xy) > 0. ) \n    \tb.xz = (2.0 * (iMouse.xy / iResolution.xy) - 1.0) * vec2( ratio, 1.0 ) * HEIGHT / 2.0;\n    \n    vec3 p = vec3( coordinates.x, Y, coordinates.y);\n    float d = sdRoundCone(\n        p,\n        vec3(-0.3, Y, -0.3),\n        b,\n        0.5,\n        0.2\n    );\n    \n    // Reuse color compute from iq's shader: https://www.shadertoy.com/view/MlKcDD\n    vec3 col = vec3(1.0) - vec3(0.1,0.4,0.7)*sign(d);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    // Output to screen\n    fragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"}]}