{"ver":"0.1","info":{"id":"MXSGzD","date":"1708251157","viewed":52,"name":"Psychedelic sphere","username":"deividasme","description":"Psychedelic sphere with Differentiating Sphere and Floor Colors","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sphere","psychedelic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p) {\n\tvec4 s = vec4(0, 1, 6, 1);\n    \n    float sphereDist =  length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n// Keep GetLight focused on calculating light intensity\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p + n * SURF_DIST * 2., l);\n    if (d < length(lightPos - p)) dif *= .1;\n    \n    return dif;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    vec3 col;\n    float lightIntensity = GetLight(p);\n    \n    // Determine if we hit the sphere or the floor\n    if (d < MAX_DIST) {\n        // Sphere gets a more dynamic, changing color\n        if (GetDist(p) < 0.1) { // Assuming the sphere has a small distance value\n            col = vec3(sin(iTime + p.x), cos(iTime + p.y), sin(iTime + p.z)) * lightIntensity;\n        } else { // Floor\n            // More grounded, but still psychedelic effect for the floor\n            col = vec3(sin(p.x * 2.0 + iTime) * 0.5 + 0.5, cos(p.y * 2.0 + iTime) * 0.5 + 0.5, sin(p.z * 2.0 + iTime) * 0.5 + 0.5) * lightIntensity;\n        }\n    } else {\n        col = vec3(0.0); // Background color\n    }\n    \n    col = pow(col, vec3(0.4545)); // Gamma correction for sRGB color space\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}