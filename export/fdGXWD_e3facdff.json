{"ver":"0.1","info":{"id":"fdGXWD","date":"1634618752","viewed":96,"name":"Matrix Metaballs","username":"dreymatic","description":"https://thebookofshaders.com/edit.php#08/matrix.frag\nhttps://thebookofshaders.com/edit.php#12/metaballs.frag\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat random(in float x){\n    return fract(sin(x)*43758.5453);\n}\n\nfloat random(in vec2 st){\n    return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rchar(in vec2 outer,in vec2 inner){\n    float grid = 5.;\n    vec2 margin = vec2(.2,.05);\n    float seed = 23.;\n    vec2 borders = step(margin,inner)*step(margin,1.-inner);\n    return step(.5,random(outer*seed+floor(inner*grid))) * borders.x * borders.y;\n}\n\nvec3 matrix(in vec2 st){\n    float rows = 80.0;\n    vec2 ipos = floor(st*rows);\n\n    ipos += vec2(.0,floor(iTime*20.*random(ipos.x)));\n\n\n    vec2 fpos = fract(st*rows);\n    vec2 center = (.5-fpos);\n\n    float pct = random(ipos);\n    float glow = (1.-dot(center,center)*3.)*2.0;\n\n    return vec3(rchar(ipos,fpos) * pct * glow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 color = vec3(.0);\n    \n    uv += 5.;\n    \n    vec2 i_st = floor(uv);\n    vec2 f_st = fract(uv);\n    \n    float m_dist = 1.0;\n    for(int j = -1; j <= 1; j++) {\n        for (int i = -1; i <= 1; i++) {\n            vec2 neighbor = vec2(float(i), float(j));\n            vec2 offset = random2(i_st + neighbor);\n            \n            offset = 0.5 + 0.5*sin(iTime + 6.28323231*random2(offset));\n            \n            vec2 pos = neighbor + offset - f_st;\n            \n            float dist = length(pos);\n            \n            m_dist = min(m_dist, m_dist*dist);\n        }\n    }\n    \n    color += step(0.1, m_dist);\n    \n    if (color == vec3(0)) {\n        color = matrix(uv);\n        color = vec3(color.x + random(color.x)*sin(iTime+uv.x), color.y*cos(iTime+uv.y), color.z*cos(uv.y)*sin(uv.x));\n        fragColor = vec4(1.-color, 1.0);\n    } else {\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}