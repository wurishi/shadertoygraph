{"ver":"0.1","info":{"id":"ddScz3","date":"1688079431","viewed":68,"name":"SDF of Hanoi, In 3D","username":"thedarkbunny","description":"Took the stacking sequence, dropped it into a raymarcher, and added some IK for an arm to do the stacking. And, what the hell, some cantor dust for the fun of it.\n\nEDIT 2023-07-09 - Moved the Cantor dust code into the dynamic resampling step.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"cs2yRK","parentname":"SDF of Hanoi"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Distance functions from https://iquilezles.org/articles/distfunctions/\n//Raymarching code adapted from https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/\n\n//Raymarching constants\n#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.\n#define MAX_DIST 100.\n#define EPSILON .0001\n\n#define TWO_PI 6.28319\n\n\n//Amount of time (in seconds) between resets; determines movement speed.\n#define CYCLE_TIME 45.\n\n//vertical fov constant FVC = 1 / tan( vertical_fov_in_radians / 2 )\n//conveniently, that's 1.0 for a 90-degree FOV.\n#define FVC 1.\n\n#define A0 vec3(-1., .1, 0.)\n#define A1 vec3(-1., .3, 0.)\n#define A2 vec3(-1., .5, 0.)\n#define A3 vec3(-1., .7, 0.)\n#define A4 vec3(-1., .8, 0.)\n#define B0 vec3( 0., .1, 0.4)\n#define B1 vec3( 0., .3, 0.4)\n#define B2 vec3( 0., .5, 0.4)\n#define B3 vec3( 0., .7, 0.4)\n#define B4 vec3( 0., .8, 0.4)\n#define C0 vec3( 1., .1, 0.)\n#define C1 vec3( 1., .3, 0.)\n#define C2 vec3( 1., .5, 0.)\n#define C3 vec3( 1., .7, 0.)\n#define C4 vec3( 1., .8, 0.)\n#define ZP vec3( 0.,0.1,-1.)\n\n\n#define NODES 90\n\n\n\n\n//These are far, _far_ longer than they need to be,\n//but I was too lazy to be clever.\nvec3 pos_1[NODES+1] = vec3[NODES+1](A3, A3, A4, B4, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B4, C4, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C4, A4, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A4, B4, B2, B2, B2, B2, B2, B2, B2, B2, B2, B2, B4, C4, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C4, A4, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A4, B4, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B4, C4, C3, C3, A3);\nvec3 pos_2[NODES+1] = vec3[NODES+1](A2, A2, A2, A2, A2, A2, A2, A2, A4, C4, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C4, B4, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B4, A4, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A4, C4, C2, C2, C2, C2, C2, C2, C2, C2, A2);\nvec3 pos_3[NODES+1] = vec3[NODES+1](A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A4, B4, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B4, C4, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, A1);\nvec3 pos_4[NODES+1] = vec3[NODES+1](A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A4, C4, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, A0);\nvec3 pos_a[NODES+1] = vec3[NODES+1](A4, A3, A4, B4, B0, B4, A4, A2, A4, C4, C0, C4, B4, B0, B4, C4, C1, C4, A4, A1, A4, B4, B0, B4, C4, C1, C4, A4, A1, A4, C4, C0, C4, B4, B1, B4, A4, A1, A4, B4, B2, B4, A4, A0, A4, C4, C0, C4, B4, B2, B4, C4, C1, C4, B4, B1, B4, A4, A0, A4, C4, C1, C4, A4, A1, A4, B4, B0, B4, C4, C1, C4, A4, A1, A4, B4, B0, B4, A4, A0, A4, C4, C2, C4, B4, B0, B4, C4, C3, C4, A4);\n\nfloat sdBox( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( in vec2 p, in float r ) {\n    return length(p) - r;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdSphere( vec3 p, float r )\n{\n  return length(p) - r;\n}\n\nfloat sdVerticalCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h ) {\n    vec2 d = vec2( length(p.xz)-ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nvec2 opUnion( vec2 d1, vec2 d2 ) {\n    if(d1.x > d2.x){\n        return d2;\n    }else{\n        return d1;\n    }\n}\nvec2 opSubtraction( vec2 d1, vec2 d2 ) { \n    if(-d1.x > d2.x){\n        return d1;\n    }else{\n        return d2;\n    }\n}\nvec2 opIntersection( vec2 d1, vec2 d2 ) { \n    if(d1.x > d2.x){\n        return d1;\n    }else{\n        return d2;\n    }\n}\n\nvec2 ik( vec2 p, float r1, float r2 )\n{\n    vec2 q = p*(0.5+0.5*(r1*r1-r2*r2)/dot(p,p));\n    float s = r1*r1/dot(q,q)-1.0;\n    s = max(s,0.0);\n    return q + vec2(-q.y,q.x)*sqrt(s);\n}\n\n\nfloat sdScene( in vec2 p, in float time ){\n    int idx = int(time)%NODES;\n    float f = fract(time);\n    vec2 pp_1 = mix(pos_1[idx].xy,pos_1[idx+1].xy,f);\n    vec2 pp_2 = mix(pos_2[idx].xy,pos_2[idx+1].xy,f);\n    vec2 pp_3 = mix(pos_3[idx].xy,pos_3[idx+1].xy,f);\n    vec2 pp_4 = mix(pos_4[idx].xy,pos_4[idx+1].xy,f);\n    vec2 pp_a = mix(pos_a[idx].xy,pos_a[idx+1].xy,f);\n\n    float p12 = min(sdBox(p-pp_1,vec2(0.11,0.1)),sdBox(p-pp_2,vec2(0.12,0.1)));\n    float p34 = min(sdBox(p-pp_3,vec2(0.13,0.1)),sdBox(p-pp_4,vec2(0.14,0.1)));\n    float pa = sdCircle(p-pp_a,0.1);\n    return min(pa,min(p12,p34));\n    \n    //float sdVerticalCylinder( vec3 p, float h, float r )\n\n    \n    \n}\n\n//TODO: Round things, make the arm, change the mats.\nvec2 sdScene( in vec3 p){\n    float time = iTime*float(NODES)/CYCLE_TIME;\n    int idx = int(time)%NODES;\n    float f = smoothstep(0.,1.,fract(time));\n    vec3 pp_1 = mix(pos_1[idx],pos_1[idx+1],f);\n    vec3 pp_2 = mix(pos_2[idx],pos_2[idx+1],f);\n    vec3 pp_3 = mix(pos_3[idx],pos_3[idx+1],f);\n    vec3 pp_4 = mix(pos_4[idx],pos_4[idx+1],f);\n    vec3 pp_a = mix(pos_a[idx],pos_a[idx+1],f) + vec3(0.,0.3,0.);\n    \n    vec3 reach = pp_a-ZP;\n    vec2 flat_reach = vec2(length(reach.xz),reach.y);\n    vec2 ref_reach = ik(flat_reach,1.2,1.0);\n    vec3 pp_b = reach*(ref_reach.x/flat_reach.x);\n    pp_b.y = ref_reach.y;\n    pp_b += ZP;\n    \n    \n    return opUnion(\n             vec2(sdRoundedCylinder( p-vec3(0.,-1.,-1.), 1.9, 0.1, 0.9 ),8.),\n             opUnion(    \n               vec2(sdRoundedCylinder( p-pp_1, 0.14, 0.01, 0.09 ),1.),\n               opUnion(\n                 vec2(sdRoundedCylinder( p-pp_2, 0.18, 0.01, 0.09 ),2.),\n                 opUnion(\n                   vec2(sdRoundedCylinder( p-pp_3, 0.22, 0.01, 0.09 ),3.),\n                   opUnion(\n                     vec2(sdRoundedCylinder( p-pp_4, 0.26, 0.01, 0.09 ),4.),\n                     opUnion(\n                       vec2(sdCapsule(p, ZP, pp_b, 0.075),5.),\n                       opUnion(\n                         vec2(sdCapsule(p, pp_b, pp_a, 0.075),5.),\n                         opUnion(\n                           vec2(sdVerticalCylinder(p-ZP+vec3(0.,0.05,0.), 0.05, 0.15 ),6.),\n                           opUnion(\n                             vec2(sdVerticalCylinder(p-pp_a+vec3(0.,0.15,0.), 0.05, 0.1 ),7.),\n                             opUnion(\n                               vec2(sdSphere(p-pp_a,0.15),6.),\n                               opUnion(\n                                 vec2(sdSphere(p-pp_b,0.15),6.),\n                                 vec2(sdSphere(p-ZP,0.15),6.)\n                               )\n                             )            \n                           )\n                         )\n                       )\n                     )\n                   )\n                 )\n               )\n             )\n           );\n                   \n    \n    //sdVerticalCylinder( vec3 p, float h, float r )\n    \n    //float p12 = min(sdBox(p-pp_1,vec2(0.11,0.1)),sdBox(p-pp_2,vec2(0.12,0.1)));\n    //float p34 = min(sdBox(p-pp_3,vec2(0.13,0.1)),sdBox(p-pp_4,vec2(0.14,0.1)));\n    //float pa = sdCircle(p-pp_a,0.1);\n    //return min(pa,min(p12,p34));\n}\n\n\n\nvec2 toSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec2 dist = sdScene(eye + depth * marchingDirection);\n        if (dist.x < EPSILON) {\n\t\t\treturn vec2(depth,dist.y);\n        }\n        depth += dist.x;\n        if (depth >= end) {\n            return vec2(end,0.);\n        }\n    }\n    return vec2(end,0.);\n}\n\n//assumes poaition normalized as -1 <= Y <= 1\n//with aspect ratio preserved.\nvec3 rayDirection(vec2 pos) {\n    return normalize(vec3(pos, -FVC));\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        ( sdScene(vec3(p.x + EPSILON, p.y, p.z)) - sdScene(vec3(p.x - EPSILON, p.y, p.z)) ).x ,\n        ( sdScene(vec3(p.x, p.y + EPSILON, p.z)) - sdScene(vec3(p.x, p.y - EPSILON, p.z)) ).x ,\n        ( sdScene(vec3(p.x, p.y, p.z  + EPSILON)) - sdScene(vec3(p.x, p.y, p.z - EPSILON) ).x )\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongPerLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 n, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, n));\n    \n    float dotLN = dot(L, n);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    vec3 n = estimateNormal(p);\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    \n    vec3 lightPos = vec3(0.0, 3.0, -0.5);\n    vec3 lightIntensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongPerLight(k_d, k_s, alpha, p, n, eye,\n                                  lightPos,\n                                  lightIntensity);\n    \n    lightPos = vec3(sin(2. * iTime),\n                    0.5 * sin(0.37 * iTime)+ 1.5,\n                    2.0);\n    lightIntensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongPerLight(k_d, k_s, alpha, p, n, eye,\n                                  lightPos,\n                                  lightIntensity);\n    /*\n    float cycle_pos = iTime*float(NODES)/CYCLE_TIME;\n    int cycle_step = int(cycle_pos+float(NODES-1))%NODES;\n    float cycle_frac = smoothstep(0.,1.,fract(cycle_pos));\n    if(cycle_step%6 < 3){\n        lightPos = mix(pos_a[cycle_step],pos_a[cycle_step+1],cycle_frac) + vec3(0.,-0.025,0.);\n        lightIntensity = vec3(0.1, 0.5, 0.9);\n\n        color += phongPerLight(k_d, k_s, alpha, p, eye,\n                                      lightPos,\n                                      lightIntensity);\n    }\n    */\n    \n    return color;\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\n\n\nvoid mainImage0( out vec4 fragColor, in vec2 uv )\n{\n    vec3 viewDir = rayDirection(uv);\n    vec3 eye = vec3(0., 1.5, 2.);\n    mat4 viewToWorld = viewMatrix(eye, vec3(0., 0.5, 0.0), vec3(0.0, 1.0, 0.0));\n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    vec2 dist = toSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist.x > MAX_DIST - EPSILON) {\n        fragColor = vec4(0., 0., 0., 0.);\n\t\treturn;\n    }\n    \n    \n    \n    vec3 p = eye + dist.x * worldDir;\n    int cycle_step = int(iTime*float(NODES)/CYCLE_TIME)%NODES;\n    //default color\n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = vec3(0.2, 0.2, 0.2);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n\n    \n    //Overrides for materials.\n    if(dist.y == 1.){\n        K_d = vec3(0.9,0.2,0.2);\n    }\n    if(dist.y == 2.){\n        K_d = vec3(0.9,0.9,0.2);\n    }\n    if(dist.y == 3.){\n        K_d = vec3(0.2,0.9,0.2);\n    }\n    if(dist.y == 4.){\n        K_d = vec3(0.2,0.2,0.9);\n    }\n    if(dist.y == 5.){\n        K_d = vec3(0.1,0.1,0.1);\n    }\n    if(dist.y == 5.){\n        K_d = vec3(1.1,1.1,1.1);\n        shininess = 100.0;\n    }\n    if(dist.y == 6.){\n        K_d = vec3(0.1,0.1,0.1);\n        shininess = 100.0;\n    }\n    if(dist.y == 7.){\n        K_d = vec3(0.2,0.2,0.2);\n        if((cycle_step+NODES-1)%6 < 3){\n            K_a = vec3(0.1,1.0,1.5);\n        }\n        if(cycle_step == NODES-1){\n            K_a = vec3(1.5,1.0,0.1);\n        }\n        shininess = 100.0;\n    }\n    if(dist.y == 8.){\n        K_d = vec3(1.1,1.1,1.1);\n        K_s = vec3(0.1, 0.1, 0.1);\n        shininess = 1.;\n    }\n    \n    \n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n\n\n}\n\n// === easy adaptive sampling. === https://shadertoyunofficial.wordpress.com/2021/03/09/advanced-tricks/\n//                           more: https://www.shadertoy.com/results?query=easy+adaptive+sampling\nvoid mainImage(out vec4 O, vec2 U) {\n    vec2 uv = (U - iResolution.xy/2.)/min(iResolution.x,iResolution.y);\n    vec4 c = vec4(0.);\n    mainImage0(c,uv);\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { mainImage0(o,U+vec2(k%3-1,k/3-1)/3.); c += o; }\n        c /= 9.;\n        //O.r++;                        // uncomment to see where the oversampling occurs\n    }\n        //Moving Cantor dusst out to this stage, because the AA was casuing issues.\n    if(c.w < 1.){\n        float incr = 0.314159;\n        float res = 0.;\n        vec2 vf = fract(uv+0.5)-0.5;\n        for(int i=0;i<10;i++){\n            if (abs(vf.x) <= 0.333333){\n                res += incr;\n            }\n            if (abs(vf.y) <= 0.333333){\n                res += incr;\n            }\n            vf = fract(vf*3.+0.5)-0.5;\n        }\n        float sr = (sin(res+iTime)+2.)/4. * (1.-c.w);\n        c = vec4(c.xyz+sr,1.);\n    }\n    O = c;\n}\n","name":"Image","description":"","type":"image"}]}