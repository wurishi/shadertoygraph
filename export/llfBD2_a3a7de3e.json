{"ver":"0.1","info":{"id":"llfBD2","date":"1513334793","viewed":84,"name":"1d volume march","username":"polyrhythm","description":"example of volume marching in 1d to show how transmittance works","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["volume"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple example showing \"volume marching\" in 1d slice. Top bar is colour of particle.\n// Second bar is density of particle (darker is more dense).\n// Bottom rectangle is colour after marching through particles and collecting transmittance.\n// Adjust colours and densities to get an idea of how it works.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 colour = vec3(1.0);\n    \n    const int NUM_SCATTER_COLOURS = 7;\n    const vec3 scatterColours[NUM_SCATTER_COLOURS] = vec3[](\n    \tvec3(0.5, 0.8, 0.95),\n        vec3(0.7, 0.6, 0.9),\n        vec3(0.8, 0.9, 0.7),\n        vec3(0.9, 0.5, 0.85),\n        vec3(0.85, 0.9, 0.99),\n        vec3(0.9, 0.9, 0.99),\n        vec3(0.8, 0.95, 0.8)\n    );\n    \n    const float densities[NUM_SCATTER_COLOURS] = float[](\n    \t0.5,\n        0.2,\n        0.1,\n        0.1,\n        0.05,\n        0.2,\n        0.7\n    );\n    \n    float colourLenght = 1.0 / float(NUM_SCATTER_COLOURS);\n    int scatterIdx = int(floor(uv.x * float(NUM_SCATTER_COLOURS)));\n    \n    // scatter colours\n    if (uv.y < 0.9 && uv.y > 0.8) {\t\n        colour = scatterColours[scatterIdx];\n    }\n    \n    // densities\n    else if (uv.y < 0.75 && uv.y > 0.65) {\n     \tcolour = 1.0 - vec3(densities[scatterIdx]);\n    }\n    \n    // density march\n    else if (uv.y < 0.5 && uv.y > 0.3 && uv.x > 0.4 && uv.x < 0.6) {\n        vec3 transmittance = vec3(1.0);\n        \n        for (int i = 0; i < NUM_SCATTER_COLOURS; i++) {\n            transmittance *= 1.0 - densities[i] + scatterColours[i] * densities[i];\n        }\n        \n        colour = transmittance;\n    }\n    \n    const vec3 gamma = vec3(1.0 / 2.2);\n    colour = pow(colour, gamma);\n\tfragColor = vec4(colour,1.0);\n}","name":"Image","description":"","type":"image"}]}