{"ver":"0.1","info":{"id":"ct23RD","date":"1672954032","viewed":146,"name":"Double pendulum fractal","username":"zenzicubic","description":"The double pendulum fractal using RK4","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["fractal","chaos","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318\n\nvoid mainImage(out vec4 col, in vec2 coord)\n{\n    vec2 a = texelFetch(iChannel0, ivec2(coord), 0).xy;\n    \n    // Calculate the color\n    float t = fract((a.x + a.y) / TAU);\n    col = vec4(0.5 + 0.5 * cos(TAU * (t + vec3(0.,0.1,0.2))), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define M1 1.\n#define M2 1.\n#define L1 1.\n#define L2 1.\n#define G 1.\n\n#define DT 0.025\n#define BND 4.\n\nvec4 f(vec4 a)\n{\n    float n1 = -G * (2. * M1 + M2) * sin(a.x) - M2 * G * sin(a.x - 2. * a.y) - 2. * sin(a.x - a.y) * M2 * (a.w * a.w * L2 + a.z * a.z * L1 * cos(a.x - a.y));\n    float n2 = 2. * sin(a.x - a.y) * (a.z * a.z * L1 * (M1 + M2) + G * (M1 + M2) * cos(a.x) + a.w * a.w * L2 * M2 *  cos(a.x - a.y)); \n    float d = L1 * (2. * M1 + M2 - M2 * cos(2. * a.x - 2. * a.y));\n    return vec4(a.zw, n1 / d, n2 / d);\n}\n\nvec4 RK4(vec4 s)\n{\n    vec4 k1 = DT * f(s);\n    vec4 k2 = DT * f(s + 0.5 * k1);\n    vec4 k3 = DT * f(s + 0.2 * k2);\n    vec4 k4 = DT * f(s + k3);\n    return s + (k1 + k2/3. + k3/3. + k4)/3.;\n}\n\nvoid mainImage(out vec4 a, in vec2 coord)\n{\n    vec2 m = 2. * BND* (coord / iResolution.y) - BND;\n    if (iTime < 0.1) \n    {\n        a = vec4(m, 0., 0.);\n        return;\n    }\n    \n    vec4 s = texelFetch(iChannel0, ivec2(coord), 0);\n    a = RK4(s);\n}","name":"Buffer A","description":"","type":"buffer"}]}