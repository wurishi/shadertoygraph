{"ver":"0.1","info":{"id":"flGBR3","date":"1664888194","viewed":107,"name":"Lava Lamp (SDF smooth min test)","username":"GMO","description":"Lava lamp","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","lava"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float twothirdsPI = 2.09439510239319; \nfloat timespeed = 0.1;\nfloat sminExponentBASE = 25.0;\nfloat sminFactor = 3.0;\nfloat pairDist = 40.0;\nfloat colOffsett = 0.4;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = vec2( fragCoord.x - .5* iResolution.x,fragCoord.y  ) / iResolution.y;\n    \n    float yA = (0.5 + 0.45 * sin(0.09 * iTime))\n             * (0.4 - 0.45 * cos(0.08 * iTime))\n             * (0.4 - 0.45 * cos(0.07 * iTime));\n    float yB = (0.5 - 0.45 * cos(0.06 * iTime))\n             * (0.4 + 0.45 * sin(0.065 * iTime))\n             * (0.4 + 0.45 * sin(0.07 * iTime));\n    float yC = (0.5 + 0.45 * sin(0.09 * iTime))\n             * (0.4 - 0.45 * cos(0.08 * iTime))\n             * (0.4 - 0.45 * cos(0.06 * iTime));\n    float yD = (0.5 - 0.45 * cos(0.05 * iTime))\n             * (0.4 + 0.45 * sin(0.06 * iTime))\n             * (0.4 + 0.45 * sin(0.07 * iTime));\n    float yE = (0.5 + 0.45 * sin(0.10 * iTime))\n             * (0.4 - 0.45 * cos(0.06 * iTime))\n             * (0.4 - 0.45 * cos(0.07 * iTime));\n    float yF = (0.5 - 0.45 * cos(0.095 * iTime))\n             * (0.4 + 0.45 * sin(0.12 * iTime))\n             * (0.4 + 0.45 * sin(0.03 * iTime));\n    float yG = (0.5 + 0.45 * sin(0.08 * iTime))\n             * (0.4 - 0.45 * cos(0.078 * iTime))\n             * (0.4 - 0.45 * cos(0.078 * iTime));\n    float yH = (0.5 - 0.45 * cos(0.07 * iTime))\n             * (0.4 + 0.45 * sin(0.06 * iTime))\n             * (0.4 + 0.45 * sin(0.09 * iTime));\n    \n    vec2 pointA = vec2( yA * cos(0.02 *iTime) * 0.09, yA );\n    vec2 pointB = vec2( yB * sin(0.042*iTime) * 0.07, yB );\n    vec2 pointC = vec2( yC * sin(0.038*iTime) * 0.07, yC );\n    vec2 pointD = vec2( yD * cos(0.023*iTime) * 0.08, yD );\n    vec2 pointE = vec2( yE * cos(0.026*iTime) * 0.11, yE );\n    vec2 pointF = vec2( yF * sin(0.032*iTime) * 0.06, yF );\n    vec2 pointG = vec2( yG * sin(0.036*iTime) * 0.07, yG );\n    vec2 pointH = vec2( yH * cos(0.019*iTime) * 0.05, yH );\n    \n    vec2 pointA2 = pointA +  pairDist / iResolution.y * vec2(sin(0.13 * iTime), -cos(0.13 *iTime));\n    vec2 pointB2 = pointB +  pairDist / iResolution.y * vec2(sin(0.1 * iTime), cos(0.14 *iTime));\n    vec2 pointC2 = pointC +  pairDist / iResolution.y * vec2(sin(0.2 * iTime), -cos(0.18 *iTime));\n    vec2 pointD2 = pointD +  pairDist / iResolution.y * vec2(sin(0.125 * iTime), cos(0.18 *iTime));\n    vec2 pointE2 = pointE +  pairDist / iResolution.y * vec2(sin(0.15 * iTime), -cos(0.12 *iTime));\n    vec2 pointF2 = pointF +  pairDist / iResolution.y * vec2(sin(0.17 * iTime), cos(0.15 *iTime));\n    vec2 pointG2 = pointG +  pairDist / iResolution.y * vec2(sin(0.123 * iTime), -cos(0.20 *iTime));\n    vec2 pointH2 = pointH +  pairDist / iResolution.y * vec2(sin(0.17 * iTime), cos(0.14 *iTime));\n    \n    vec2 pointA3 = pointA +  pairDist / iResolution.y * vec2(sin(0.14 * iTime), -cos(0.12 *iTime));\n    vec2 pointB3 = pointB +  pairDist / iResolution.y * vec2(sin(0.12 * iTime), cos(0.11 *iTime));\n    vec2 pointC3 = pointC +  pairDist / iResolution.y * vec2(sin(0.21 * iTime), -cos(0.23 *iTime));\n    vec2 pointD3 = pointD +  pairDist / iResolution.y * vec2(sin(0.15 * iTime), cos(0.13 *iTime));\n    vec2 pointE3 = pointE +  pairDist / iResolution.y * vec2(sin(0.13 * iTime), -cos(0.10 *iTime));\n    vec2 pointF3 = pointF +  pairDist / iResolution.y * vec2(sin(0.14 * iTime), cos(0.15 *iTime));\n    vec2 pointG3 = pointG +  pairDist / iResolution.y * vec2(sin(0.16 * iTime), -cos(0.13 *iTime));\n    vec2 pointH3 = pointH +  pairDist / iResolution.y * vec2(sin(0.13 * iTime), cos(0.11 *iTime));\n    \n    float a = distance(pointA,uv);\n    float b = distance(pointB,uv);\n    float c = distance(pointC,uv);\n    float d = distance(pointD,uv);\n    float e = distance(pointE,uv);\n    float f = distance(pointF,uv);\n    float g = distance(pointG,uv);\n    float h = distance(pointH,uv);\n    \n    float a2 = distance(pointA2,uv);\n    float b2 = distance(pointB2,uv);\n    float c2 = distance(pointC2,uv);\n    float d2 = distance(pointD2,uv);\n    float e2 = distance(pointE2,uv);\n    float f2 = distance(pointF2,uv);\n    float g2 = distance(pointG2,uv);\n    float h2 = distance(pointH2,uv);\n    \n    float a3 = distance(pointA3,uv);\n    float b3 = distance(pointB3,uv);\n    float c3 = distance(pointC3,uv);\n    float d3 = distance(pointD3,uv);\n    float e3 = distance(pointE3,uv);\n    float f3 = distance(pointF3,uv);\n    float g3 = distance(pointG3,uv);\n    float h3 = distance(pointH3,uv);\n    \n    float sminExponent = sminExponentBASE;\n    \n    float smin =  log2(sminFactor * (\n    exp2(-sminExponent*a)\n    + exp2(-sminExponent*b)\n    + exp2(-sminExponent*c)\n    + exp2(-sminExponent*d)\n    + exp2(-sminExponent*e)\n    + exp2(-sminExponent*f)\n    + exp2(-sminExponent*g)\n    + exp2(-sminExponent*h)\n    \n    + exp2(-sminExponent*a2)\n    + exp2(-sminExponent*b2)\n    + exp2(-sminExponent*c2)\n    + exp2(-sminExponent*d2)\n    + exp2(-sminExponent*e2)\n    + exp2(-sminExponent*f2)\n    + exp2(-sminExponent*g2)\n    + exp2(-sminExponent*h2)\n    \n    + exp2(-sminExponent*a3)\n    + exp2(-sminExponent*b3)\n    + exp2(-sminExponent*c3)\n    + exp2(-sminExponent*d3)\n    + exp2(-sminExponent*e3)\n    + exp2(-sminExponent*f3)\n    + exp2(-sminExponent*g3)\n    + exp2(-sminExponent*h3)\n    ));\n\n    vec3 glowcol = vec3 (sin(timespeed * iTime),\n                        sin(timespeed *iTime + twothirdsPI ),\n                        sin (timespeed *iTime - twothirdsPI));\n                        \n    vec3 basecol = vec3 (sin(timespeed * iTime + colOffsett),\n                        sin(timespeed *iTime + twothirdsPI + colOffsett),\n                        sin (timespeed *iTime - twothirdsPI + colOffsett));\n    \n    vec3 col = 1.0 * clamp(5.0 * smin-2.0, 0.0, 1.0) * basecol\n             + 0.7 * clamp(3.0 * smin-0.0, 0.0, 1.0) * glowcol;\n             \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(uv.x,uv.y,0.0,1.0);\n}","name":"Image","description":"","type":"image"}]}