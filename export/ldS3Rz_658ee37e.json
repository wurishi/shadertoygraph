{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"keyboard","id":"4dXGRr","filepath":"/presets/tex00.jpg","sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"/*Draws fragments inside the sphere that are correlated with the mouse's angle*/\n/*When mode 0, draws all fragments with angle (mouse,center) < angle (fragment,center)*/\n/*When mode 1, draws all fragments with angle (mouse,center) == angle (fragment,center) (only the line)*/\n/*When mode 2, returns vec4(angle : angle (mouse,center) == angle (fragment,center) , dist_m_center, dist_fr_center,0.0)*/\n/*When mode 3, draws all fragments with angle (mouse,center) == angle (fragment,center) (only the line)*/\n\nvec4 mouse_fragment_angle_collision(vec2 fragCoord, float radius,vec3 center,int mode){\n\tvec4 ret;\n\tfloat angle = 0.0;\n\t\n\t/*Find angle between mouse and sphere center vectors*/\n\tfloat d_m_center = distance(iMouse.xy,center.xy);\n\tangle = ((iMouse.y) - center.y )/d_m_center;\n\tangle = floor(degrees(asin(((angle)))));\n\t/*Divide center of the sphere (circle) in quadrants*/\n\tif(iMouse.y >= center.y){\n\t\tif(iMouse.x >= center.x){/* + +*/\n\t\t\tret = vec4(1.0,0.0,0.0,1.0);\n\t\t}\n\t\telse{ /* - + */\n\t\t\tret = vec4(0.0,1.0,0.0,1.0);\n\t\t\tangle = 180.0 -  angle;\n\t\t\n\t\t}\n\t}\n\telse{\n\t\tif(iMouse.x >= center.x){ /*+ -*/\n\t\t\tret = vec4(0.0,0.0,1.0,1.0);\n\t\t\tangle = 360.0 + angle;\n\t\t}\n\t\telse{ /* - - */\n\t\t\tret = vec4(0.0,1.0,1.0,1.0);\n\t\t\tangle = 180.0-angle;\n\t\t\n\t\t}\n\t}\n\t/*Find angle between current fragment and sphere center vectors*/\n\tfloat d_fr_center =  distance(fragCoord.xy,center.xy);\n    float sine = ((fragCoord.y) - center.y )/d_fr_center;\n\tfloat res = floor(degrees(asin((sine))));\n\t/*Divide center of the sphere (circle) in quadrants*/\n\tif((fragCoord.y) >= center.y){\n\t\tif((fragCoord.x)>= center.x){/* + +*/\n\t\t\tret = vec4(1.0,0.0,0.0,1.0);\n\t\t}\n\t\telse{ /* - + */\n\t\t\tret = vec4(0.0,1.0,0.0,1.0);\n\t\t\tres = 180.0 - res;\n\t\t\n\t\t}\n\t}\n\telse{\n\t\tif((fragCoord.x) >= center.x){ /*+ -*/\n\t\t\tret = vec4(0.0,0.0,1.0,1.0);\n\t\t\tres = 360.0 + res;\n\t\t}\n\t\telse{ /* - - */\n\t\t\tret = vec4(0.0,1.0,1.0,1.0);\n\t\t\tres = 180.0-res;\n\t\t\n\t\t}\n\t}\n\t/*if fragments angle with center and the mouse angle with the center are the same, draw the line\n\t\twhich has length equal to radius*/\n\tif( mode == 0){\n\t\tif( res < angle ){\n\t\t\tif(d_fr_center < d_m_center && d_fr_center >= 0.0)\n\t\t\t\treturn vec4(0.0,0.0,0.0,0.0);\n\t\t\treturn ret;\t\t\n\t\t}\n\t}\n\telse if(mode == 1){\n\t\tif( res == angle ){\n\t\t\tif(d_fr_center < d_m_center && d_fr_center >= 0.0)\n\t\t\t\treturn vec4(0.0,0.0,0.0,0.0);\n\t\t\treturn ret;\t\t\n\t\t}\n\t}\n\telse if(mode == 3){\n\t\tif( res == angle ){\n\t\t\tif(d_fr_center <= radius && d_fr_center >= d_m_center)\n\t\t\t\treturn vec4(0.0,0.0,0.0,0.0);\n\t\t\treturn ret;\t\t\n\t\t}\n\t}\n\n\treturn ret;//vec4(1.0,0.0,0.0,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 center = vec3(iResolution.x*0.5,iResolution.y*0.5,1.0);\n\tfloat radius = iResolution.x/10.0;\n\tvec3 point = vec3( fragCoord.xy, 0.);\n\tfloat dist = distance(center,point);\n\tvec2 line_ptr_size = vec2(radius/3.0,radius/3.0);\n\t\n\tvec4 point_dist_from_radius;/*1st compo dist, 2nd compo quadrant*/\n\tfloat mouse_dist_from_center;\n\t\n\tif(dist < radius){ \n\t\tmouse_dist_from_center = distance(iMouse.xy,center.xy);\n\t\tif( mouse_dist_from_center > radius){\n\t\t\t\t/*The mouse is outside the sphere*/\n\n\t\t\t\t\n\t\t\t\tfragColor = vec4(0.0,0.0,0.0,1.0);\n\t\t}\n\t\telse{/*Inside the sphere*/\n\t\t\tpoint_dist_from_radius =  mouse_fragment_angle_collision(fragCoord, radius,center,3);\t\n\t\t\tfragColor = point_dist_from_radius;\n\t\t}\n\t}\n\telse\t\t\n\t\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":true,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldS3Rz","date":"1382704050","viewed":181,"name":"sphere-iMouse-sphere angle finde","username":"gclkaze","description":"Calculates the angle-distance between the mouse-sphere center (a1) and the angle-distance between each sphere's fragment with the sphere's center (a2) . In case mode = 0: it draws each fragment where a1 < a2. Mode 1,it draws black each frag where a1 = a2 ","likes":0,"published":1,"flags":16,"usePreview":0,"tags":["sphereangle"],"hasliked":0,"parentid":"","parentname":""}}