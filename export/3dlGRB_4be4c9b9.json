{"ver":"0.1","info":{"id":"3dlGRB","date":"1546717875","viewed":179,"name":"Coherent Diffraction","username":"damart3d","description":"diffraction of coherent oscillators placed in line","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["light","physics","electrodynamics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float G_PI = 3.1415926;\n\nconst float frequency = 60.0; //times per screen width\n\nfloat oscillator(vec2 uv, vec2 offset)\n{\n   \tvec2 coord = uv - vec2(0.5,0.5) - offset;\n    coord *= 2.0 * G_PI * vec2(1.0,iResolution.y/iResolution.x);\n    \n    return  cos(length(coord*frequency)- 5.0*iTime);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n     int oscillatorsNum =  int(floor((cos(iTime)*0.5+0.5)*21.0));\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float acc = 0.0;\n    \n    for(int i = 0; i<= oscillatorsNum; i++ )\n    {\n        \n       vec2 offsetA = vec2(float(i) * 0.25/frequency,0.0);\n        \n      \n        if( i % 2 == 0 && i != 0)// even odd check to stay in the center\n         \toffsetA = +vec2(float(i/2) * 0.5/frequency,0.0);\n        else           \n       \t\toffsetA = -vec2(ceil(float(i)/2.0) * 0.5/frequency,0.0);\n               \n       acc += oscillator(uv,offsetA); \n    }    \n  \tacc /= float(oscillatorsNum+1);\n    acc = acc * 0.5 + 0.5;\n\n    \n    // Output to screen\n    vec3 resC = (vec3(1,0,0.0)*(1.0 - acc) + vec3(0,0,1)*acc - vec3(0.5,0,0.5))*2.0; \n    fragColor = vec4(resC,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}