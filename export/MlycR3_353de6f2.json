{"ver":"0.1","info":{"id":"MlycR3","date":"1537108485","viewed":379,"name":"Plasma Droplet","username":"aparadja","description":"Super duper ray trace boogaloo","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool intersect(vec3 origin, vec3 ray, float radius, out float t, out vec3 n) {\n    vec3 L = -origin;\n    float radiusSquared = radius * radius;\n    float tca = dot(L, ray);\n    if (tca < 0.0) return false;\n    float d2 = dot(L, L) - tca * tca;\n    if (d2 > radiusSquared) return false;\n    float thc = sqrt(radiusSquared - d2);\n    t = tca - thc;\n    n = normalize(origin + ray * t);\n    return true;\n}\n\nfloat fresnel(vec3 ray, vec3 normal) {\n    float scale = 1.2;\n    float power = 2.5;\n    float c = scale*pow(1. + dot(ray, normal), power);\n    return clamp(c, 0., 1.);\n}\n\nvec3 sky(vec3 d) {\n    float t = iTime;\n    float f = 16.0;\n    float g = t*.5;\n    d.xz *= mat2(-cos(g), sin(g), sin(g), cos(g));\n    float a = d.x*sin(t/7.) + d.y*cos(t/3.) + d.z*sin(t/5.);\n    float v1 = sin(f/3.14*a + t);\n    float cx = d.x + .5*sin(t/5.);\n    float cy = d.y + .5*cos(t/3.);\n    float v2 = sin(sqrt(f*10.0*(cx*cx + cy*cy + 1.)) + t);\n    float v3 = sin(f*d.x/3.14 + t/2.);\n    float v = v1 + v2 + v3 + sin(t);\n    float stripe = 1. - pow(sin(v*6.), 4.) * .1;\n    return vec3(sin(v - .1 + sin(t/2.0)*.2), -cos(v+0.2), -sin(v+1.05))*.4 + .6*stripe;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord / iResolution.xy*2.-1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 origin = vec3(sin(iTime/3.)*0.3, sin(iTime/5.)*.2, -2.+sin(iTime/1.6)*0.3);\n    vec3 ray = normalize(vec3(uv.xy, 1));\n    float distort = pow(sin(iTime/3.), 7.)*.03;\n    float radius = 1. + sin(7.*(ray.x + iTime/3.0))*distort + cos(11.*(ray.y + iTime/5.))*distort;\n\n    float t;\n    vec3 normal;\n    if (intersect(origin, ray, radius, t, normal)) {\n        float rc = fresnel(ray, normal);\n        float vc = pow(abs(normal.z), 10.)*.4;\n        vec3 reflectedRay = reflect(ray, normal);\n        vec3 refractedRay = refract(ray, normal, 1./1.31);\n        vec3 reflectedColor = sky(reflectedRay);\n        vec3 refractedColor = sky(refractedRay);\n        vec3 internalColor = mix(refractedColor, vec3(1.), vc);\n        vec3 lightDirection = normalize(vec3(0, 1, 0));\n        float specular = pow(max(0., dot(reflectedRay, lightDirection)), 12.);\n        vec3 color = mix(internalColor, reflectedColor, rc) + specular*.5;\n        fragColor = vec4(color, 1.);\n    }\n    else {\n        fragColor = vec4(mix(sky(ray), vec3(.7), .2), 1.);\n    }\n}","name":"Image","description":"","type":"image"}]}