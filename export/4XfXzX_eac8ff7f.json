{"ver":"0.1","info":{"id":"4XfXzX","date":"1709748671","viewed":42,"name":"Basic_Unoptimized_Trapezium2DSDf","username":"ordii","description":"I really couldn't understand the sdf derivation of Inigo Quilez, couldn't reach him, couldn't get the theory of the derivation from anywhere else. Please anyone, if u could, please help me how could I derive the 2d sdfs on my own, help me understand them.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2dsdf","trapezium"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSeg( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat myTrap(vec2 p, float wU, float wD, float ht){\n    /* Basically calculating the distances of uv from the three sides\n       on each side of the trapezium and then taking the minimum of those.\n    */\n    \n    \n    \n    p.x = abs(p.x);\n    \n    // calculating the two vertexes\n    vec2 r1 = vec2(wU, ht);\n    vec2 r2 = vec2(wD, 0.);\n    \n    // R is essential for knowing whether uv lies outside the parallel sides\n    float R = max(r2.y, min(r1.y, p.y));\n    \n    // calculating the sign on the basis of which side of the slanted line, the uv lies\n    float side = p.y + ht * (p.x - wD) / (wD - wU);\n    float sign = (R == p.y && side < 0.) ? -1. : 1.;\n    \n    // returning the minimum distance\n    return sign * min(sdSeg(p, r1, r2), min(sdSeg(p, vec2(0., 0.), r2), sdSeg(p, vec2(0., ht), r1)));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv = uv - 0.5;\n    \n    float half_upper_width = 0.3;\n    float half_lower_width = 0.5;\n    float height = 0.7;\n    float scale = 2.;            // bigger number makes smaller size\n    vec2 displacement = vec2(0.8, -0.2);\n    float d = myTrap(uv * scale - displacement, half_upper_width, half_lower_width, height);\n    d = smoothstep(0.01, 0., d);\n    // Output to screen\n    fragColor = vec4(vec3(d),1.0);\n}","name":"Image","description":"","type":"image"}]}