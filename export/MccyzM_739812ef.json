{"ver":"0.1","info":{"id":"MccyzM","date":"1730389709","viewed":45,"name":"2D Raymarched Lighting","username":"ThePortalGuy","description":"2d raymarched lighting for fun and profit\n\nFinal changelog:\nCleaned up code, softened shadows","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lighting2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//2D Raymarched lighting for fun and profit\n//Please credit me if you use my code :>\n\n//----------------------------------------\n\n//signed distance function to a box\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Set position of light to mouse position\n    vec2 pointLightPosition = iMouse.xy/iResolution.xy*2.-1.;\n    \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy)*2.-1.;\n\n    //Calculate lightlevel\n    float lightLevel = (sqrt(distance(uv,pointLightPosition))*10.);\n    \n    vec2 dir = normalize(pointLightPosition-uv);\n    vec2 rayPos = uv;\n    float hit = 1.0;\n    float dist = 0.;\n    float distToCube = 0.;\n    float distToLight = distance(uv,pointLightPosition);\n    \n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    for(int i = 0;i <= 100; i+=1)\n    {\n        \n        //Get distance to nearest box\n        distToCube = min(min(sdBox(rayPos,vec2(0.075,0.1)),sdBox(rayPos-vec2(0.4,0.5),vec2(0.075,0.1))),sdBox(rayPos-vec2(-0.4,0.1),vec2(0.075,0.1)));\n        \n        //Check if ray hits light\n        if (distToLight <= 0.){\n            break;\n        }\n        //check if ray hits inside box\n        else if (distToCube <= 0.) {\n            hit = 0.;\n            \n            break;\n        }\n        //Check if ray hits box surface\n        else if(distToCube <= 0.001){\n            hit = 0.5;\n            \n            break;\n        \n        }\n        //March ray\n        else{\n            \n            rayPos += dir*distToCube;\n            distToLight -= distToCube;\n        }\n        \n    }\n    \n    // Output to screen\n    fragColor = vec4((col*hit)*(1./lightLevel),1.0);\n    \n}","name":"Image","description":"","type":"image"}]}