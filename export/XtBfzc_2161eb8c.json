{"ver":"0.1","info":{"id":"XtBfzc","date":"1516657268","viewed":532,"name":"sRGB Experiment","username":"battlebottle","description":"Testing out sRGB conversion algorithm.\n\nUse the mouse to adjust the brightness of the bands of colour.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["srgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float SRGB_GAMMA = 1.0 / 2.2;\nconst float SRGB_INVERSE_GAMMA = 2.2;\nconst float SRGB_ALPHA = 0.055;\n\n\nfloat linear_to_srgb(float channel) {\n    if(channel <= 0.0031308)\n        return 12.92 * channel;\n    else\n        return (1.0 + SRGB_ALPHA) * pow(channel, 1.0/2.4) - SRGB_ALPHA;\n}\n    \n\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float col = uv.y;\n    \n    if (iMouse.z > 0.0) {\n    \tcol = iMouse.x / iResolution.x;\n    } else {\n        col = mod(iTime / 6.0, 1.0);\n    }\n    //if (uv.x > 5.5/6.0 && uv.y > 0.05){\n    //    col = 1.0;\n    //}\n    \n    \n    float colSection = floor((1.0 - (uv.y - (20.0 / iResolution.y)) / ((iResolution.y - 20.0) / iResolution.y)) * 8.0);\n   \tvec3 multCol = vec3(1.0);\n    if (colSection == 0.0) {\n        multCol = vec3(1.0, 0.0, 0.0);\n    } else if (colSection == 1.0) {\n        multCol = vec3(0.0, 1.0, 0.0);\n    } else if (colSection == 2.0) {\n        multCol = vec3(0.0, 0.0, 1.0);\n    \n    } else if (colSection == 3.0) {\n        multCol = vec3(0.0, 1.0, 1.0);\n    } else if (colSection == 4.0) {\n        multCol = vec3(1.0, 0.0, 1.0);\n    } else if (colSection == 5.0) {\n        multCol = vec3(1.0, 1.0, 0.0);\n    } else if (colSection == 6.0) {\n        multCol = vec3(0.0, 0.0, 0.0);\n    }\n    \n    \n    \n    vec4 black = vec4(vec3(0.0),1.0);\n    vec4 white = vec4(vec3(1.0),1.0);\n    vec4 gray = vec4(vec3(0.5),1.0);\n    \n    if (fragCoord.y < 20.0) {\n        if (col > uv.x) {\n\t\t\tfragColor = black;\n        } else {\n            if (mod((linear_to_srgb(uv.x)) * 256.0, 2.0) > 1.0) {\n            //if (mod((1.0 - linear_to_srgb(1.0 - uv.x)) * 256.0, 2.0) > 1.0) {\n            //if (mod(uv.x * 256.0, 2.0) > 1.0) {\n\t\t\t\tfragColor = white;\n            } else {\n\t\t\t\tfragColor = gray;\n            }\n        }\n    } else{\n    \n    \tif (uv.x < 1.0/5.0) {\n\t\t\tfragColor = vec4(col * multCol,1.0);\n        } else if (uv.x >= 2.0/5.0 && uv.x < 3.0 / 5.0) {\n            fragColor =  vec4(pow(col * multCol, vec3(SRGB_GAMMA)), 1.0);\n        } else if (uv.x >= 4.0/5.0) {\n            \n            vec3 srgbCol = vec3(linear_to_srgb(col * multCol.r), linear_to_srgb(col * multCol.g), linear_to_srgb(col * multCol.b));\n\t\t\tfragColor = vec4(srgbCol,1.0);\n        } else  {\n            \n            vec4 noise1 = texture(iChannel1, uv * (iResolution.xy / vec2(256.0)));\n            float noise =  noise1.r * (255.0/256.0) + noise1.g / 256.0;\n            if (noise >= col ) {\n\t\t\t\tfragColor = black;\n    \t    } else {\n\t\t\t\tfragColor = vec4(multCol,1.0);;\n    \t    }\n    \t} \n\t}\n}","name":"Image","description":"","type":"image"}]}