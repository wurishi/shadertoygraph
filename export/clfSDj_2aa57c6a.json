{"ver":"0.1","info":{"id":"clfSDj","date":"1675335665","viewed":89,"name":"partially asymmetric block slice","username":"jt","description":"A slice through [url=https://www.shadertoy.com/view/clfSDj]partially asymmetric triangles[/url] as attempt to create a triangular variant of [url=https://www.shadertoy.com/view/Ws3GRs]Asymmetric Blocks[/url]. Makes other shapes than triangles too though.\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["triangle","slice","blocks","tiling","partial","tesselation","asymmetric"],"hasliked":0,"parentid":"NtyfDR","parentname":"partially asymmetric blocks 3d"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/clfSDj partially asymmetric block slice by jt\n// just a slice of https://www.shadertoy.com/view/NtyfDR partially asymmetric blocks 3d\n\n// A slice through https://www.shadertoy.com/view/NtyfDR partially asymmetric blocks 3d\n// as attempt to create a triangular variant of https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks.\n// Makes other shapes than triangles too, though.\n\n// tags: tiling,tesselation,asymmetric, partial, triangle, slice, blocks\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nvec3 hash31(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdBoxSlicedZ( vec3 p, vec3 b, float s, float h )\n{\n    h /= 2.0;\n    float t = 1.0 - s;\n    //return sdBox(p, b);\n    //return sdBox(p-vec3(0,0,t), b*vec3(1,1,s));\n    return\n        min\n        (\n            sdBox(p-vec3(0,0,b.z*t+h), vec3(b.x, b.y, b.z * s - h)),\n            sdBox(p+vec3(0,0,b.z*s+h), vec3(b.x, b.y, b.z * t - h))\n        );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat pipe(vec3 p, float r, float h)\n{\n    float d = abs(sdCircle(p.xy, r)) - 0.01; // onion\n\n    // extrude https://iquilezles.org/articles/distfunctions/\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n// Create multiple copies of an object - https://iquilezles.org/articles/distfunctions\nvec3 opRepLim( in vec3 p, in vec3 lima, in vec3 limb )\n{\n    return p-2.0*clamp(round(p/2.0),lima,limb);\n}\n\nivec3 opRepIdx(in vec3 p)\n{\n    return ivec3(floor((p + 1.0) / 2.0));\n}\n\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\n// underlying structure: https://en.wikipedia.org/wiki/Tetrastix\nfloat structure(vec3 p, ivec3 s)\n{\n    vec3 r = opRepLim(p, vec3(-s),vec3(+s));\n    ivec3 c = opRepIdx(p);\n\n    //vec3 slice = vec3(mix(0.2, 0.4, 0.5 + 0.5 * cos(iTime)));\n    vec3 slice = mix(vec3(0.2), vec3(0.8), hash33(vec3(c)));\n    float h = 0.02;\n    //float h = mix(0.0, 0.2, 0.5 + 0.5 * cos(iTime));\n\n    return\n        //min\n        (\n        //    sdBoxFrame(r, vec3(1), th),\n            min\n            (\n                min\n                (\n                    min\n                    (\n                        sdBox(r+vec3(0.5), vec3(0.5-h)),\n                        sdBox(r-vec3(0.5), vec3(0.5-h))\n                    ),\n                    sdBoxSlicedZ(r.yzx+vec3(-0.5,0.5,0), vec3(0.5-h, 0.5-h, 1.0), slice.y, h)\n                ),\n                min\n                (\n                    sdBoxSlicedZ(r.xyz+vec3(-0.5,0.5,0), vec3(0.5-h, 0.5-h, 1.0), slice.x, h),\n                    sdBoxSlicedZ(r.zxy+vec3(-0.5,0.5,0), vec3(0.5-h, 0.5-h, 1.0), slice.z, h)\n                )\n            )\n        );\n}\n\nfloat map(vec3 p)\n{\n    //ivec3 s = ivec3(1, 0, 0);\n    ivec3 s = ivec3(3, 3, 3);\n    //ivec3 s = ivec3(floor(3.0 * hash31(floor(iTime))));\n    return\n        max\n        (\n            dot(vec3(1,1,1)/sqrt(3.0), p),\n            structure(p + vec3(0,0,-1-2*s.z), s)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool demo = true; // max(iMouse.x, iMouse.y) < 10.0;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = -pi + pi * float(iMouse.y) / float(iResolution.y);\n    mx = !demo ? mx : 1.75 * pi;\n    my = !demo ? my : atan(sqrt(0.5)) + pi * 0.5;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = demo ? vec3(0.0, 8.0, -8.0) : vec3(0.0, 4.0, -16.0);\n    //vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = S * ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = S * rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.2);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX); // XXX artifacts on cylinder XXX\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    // Mark artificial cuts (i.e. not inherent of the structure but caused by showing only a cuboid out of the infinite grid).\n    if(any(lessThan(fract(dst), vec3(EPSILON))) || any(greaterThanEqual(fract(dst), vec3(1.0-EPSILON))))\n        color = vec3(0.5);\n    //ivec3 index = opRepIdx(dst);\n    //color = hash33(vec3(index));\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}