{"ver":"0.1","info":{"id":"43fGRS","date":"1707583297","viewed":55,"name":"Reduced Palette Example","username":"zadkielmodeler","description":"Useful for pixel art situations","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["palette","reduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//no license, do whatever you want with this.\n\n\n//This has a similar visual effect as a pixilate function\n//without having to set a specific pixel size or manipulate UVs\n//amount here represents the nearest value between 0 and 1 you will\n// round the color to\nvec3 reducePalette(vec3 color, float amount)\n{\n    amount = 1.0/amount;\n    color.r = round(color.r *amount)/amount;\n    color.g = round(color.g *amount)/amount;\n    color.b = round(color.b *amount)/amount;\n    return color;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos((iTime/5.)+uv.xyx+vec3(0,2,4));\n    col = reducePalette(col,0.1);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}