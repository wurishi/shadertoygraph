{"ver":"0.1","info":{"id":"Xst3Wj","date":"1452248928","viewed":170,"name":"hello world 4","username":"njazz","description":"trying to understand that","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//based on this:\n//https://iquilezles.org/articles/distfunctions\n//https://iquilezles.org/articles/menger\n\nvec3 w2s(vec3 p)\n{\n\tp.xy *= (-1.-1.*p.z);\n    return p;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n    \n   \n}\n\nfloat maxcomp(vec2 v1)\n{\n\treturn max(v1.x,v1.y);\n}\nfloat sdCross( in vec3 p )\n{\n    float inf = 40.;\n    float size = 2.;\n    \n  float da = sdBox(p.xyz,vec3(inf,size,size));\n  float db = sdBox(p.yzx,vec3(size,inf,size));\n  float dc = sdBox(p.zxy,vec3(size,size,inf));\n    \n  //float da = maxcomp(abs(p.xy));\n  //float db = maxcomp(abs(p.yz));\n  //float dc = maxcomp(abs(p.zx));\n    \n  return min(da,min(db,dc));\n    \n  //  return db;\n}\n\n\n//float opScale( vec3 p, float s )\n//{\n//    return primitive(p/s)*s;\n//}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opRep( vec3 p, vec3 c )\n{\n    //too lazy to clean up\n    \n    vec3 q = p;//mod(p,c)-0.5*c;\n    \n    //vec3 q3 = mod(p,vec3(4.,4.,10.)) - 0.5*vec3(4.,4.,10.);\n    \n    \n    \n    float w = cos(iTime/8.)*3.1415*1.;\n    vec3 q2 ;\n    \n    q2.x = q.x*cos(w)+q.z*sin(w);\n   q2.z = q.x*-sin(w)+q.z*cos(w);\n    q2.y = q.y;\n    \n    q = q2;\n    \n    //float z = 0.67*sin(iTime*2.9);\n\t\n    //float res = sdSphere( q, 1.9+z );\n    //res = opS (  udRoundBox(q,vec3(1.7,1.7,1.), 0.5), res);\n    \n    float res;\n    \n    float d,e;//= udRoundBox(q+vec3(0.,0.,0.),vec3(15.), 0.5);\n  \n    \n    //new code\n    d = sdSphere(q,6.5);\n    \n    //d = sdBox(q,vec3(3.));\n    \n    //d=0.;\n    \n    float s = 1.;\n   \n    float step = 8.5+2.*sin(iTime/16.);\n    float scale2 = 3.+1.*cos(iTime/3.);//;\n    \n    \n   for( int m=0; m<5; m++ )\n   {\n       \n      vec3 a = mod( q*s, step )-0.5*step;\n      s *= scale2 ;\n      \n      vec3 r = a;//0.5*step - 1.*abs(a);\n       \n       r = 1.-scale2*(a);\n       \n\n      float c = sdCross(r)/s;///s;\n      d = max(d,-c);\n       e = min(e,c);\n   }\n    \n   //res = opU(udRoundBox(p,vec3(30.7,30.7,30.), 0.5), d);\n    //res = sdCross(q);\n    \n    float f = sdSphere(q,8.);\n    e = max(e,-f);\n    \n    res = min(d,e);\n    \n    return res;\n}\n\n\n\n\n\n\nfloat gMix(vec3 p)\n{\n    float z;// = (10.+0.001*sin(iTime*2.9))*iTime;\n    z = -7.-0.75*(1.+cos(iTime/4.));;\n\treturn opRep(p+vec3(0.,0.,z),vec3(1.,1.,1.));\t\n}\n    \n\n\n\n\nvec2 rM (vec3 ro, vec3 rd)\n{\n\tfloat dist;\n    \n    //ro.xy -= 0.5;\n    //rd.xy -= 0.5;\n    \n    //ro.xy *= (1.-1.5*ro.z);\n    //rd.xy *= (1.-1.5*rd.z);\n    \n    //ro = w2s(ro);\n    //rd = w2s(rd);\n    \n    vec3 rp = ro+rd;\n    \n    float eps = 0.003;\n    \n    float l=1.;\n    \n    for (int i=0;i<150;i++)\n    {\n    \tdist = gMix(ro+rd*l);\n        \n        rp += rd*dist;\n        \n        if (dist<eps)\n        {\n            //l = clamp(l,1.,20.);\n        \treturn vec2(l,1);\n            \n        }\n        l+= dist;\n        \n    }\n    //l = clamp(l,0.,25.);\n\treturn vec2(l,(l>20.)?-1.:1.);\n}\n\n\n\nvec3 gNorm(vec3 p)\n{\n    highp vec3 ret;\n    \n    //p = w2s(p);\n    \n    float eps = 0.0001;\n    \n    ret.r = gMix(p+vec3(eps,0,0.))-gMix(p-vec3(eps,0,0.));\n    ret.g = gMix(p+vec3(0.,eps,0.))-gMix(p-vec3(0,eps,0.));\n    ret.b = gMix(p+vec3(0.,0,-eps))-gMix(p-vec3(0,0,-eps));\n    \n    //ret = normalize(vec3(0,0.00025,0)+(ret));\n\treturn normalize(ret);\n}\n                        \nfloat gLamb(vec3 norm, vec3 lvec)\n{\n    return  clamp((dot((norm),lvec)),0.,1.);\n}  \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rd = vec3(0.,0.,0.5)+1.*vec3(uv.xy,0);\n    //rd = normalize(rd);\n    vec3 ro = vec3(uv,0.);\n    \n    \n    vec2 rm_d = rM(ro,rd);\n    \n    bool v = (rm_d.y>0.);\n    \n    vec3 lv1 = w2s(vec3(-.2,-2.2,1.5));\n    lv1 = normalize(lv1);\n    \n    vec3 lv2 = w2s(vec3(-1.2,1.2,1.2));\n    lv2 = normalize(lv2);\n    \n    vec3 pos1 = vec3(uv.xy,rm_d.x);//vec3(vec2(-1.-1.*rm_d.x)*uv.xy,-rm_d.x);\n   \tpos1 = ro+rd*rm_d.x;\n    \n    vec3 n = (v)?gNorm(pos1):normalize(vec3(0.,0.,-0.));\n    //n = vec3(float(v));\n    //n = clamp(n,-1.,1.);\n    \n    vec3 suv = w2s(vec3(uv.xy,1.0));\n    vec3 hv = suv+lv1;\n    hv /= length(hv);\n    \n    vec3 suv2 = w2s(vec3(uv.xy,1.0));\n    vec3 hv2 = suv2+lv2;\n    hv2 /= length(hv2);\n    \n    float fog = pos1.z/8.;\n    fog = clamp(fog,0.,1.);\n    \n    vec3 fogC = vec3(0.75,0.75,0.75);\n    \n    float spec = 1.*clamp(pow(dot((n),(hv)),500.),0.,1.);\n    float spec2 = 1.*clamp(pow(dot((n),(hv2)),300.),0.,1.);\n    \n    \n    //shadows attempt 1\n    float ld = rM(pos1, lv1).x;\n    float ld2 = rM(lv1, pos1).x;\n    float sh = 1. - 0.5*float(ld!=ld2);\n    vec3 diffC = vec3(1.,0.,0.5)*gLamb(n, lv1);\n    diffC*=sh;\n    \n     ld = rM(pos1, lv2).x;\n     ld2 = rM(lv2, pos1).x;\n    \n     sh = 1. - 0.5*float(ld!=ld2);\n    \n    //reflection attempt 1\n    vec3 ref = reflect(pos1,n);\n    float r1 = rM(lv1, ref).x;\n    \n    diffC += clamp((1.-r1/1.5),0.,1.)*vec3(.5,.75,1.);\n    \n    //diffC = clamp(diffC,0.,1.);\n    diffC += vec3(0.25,.5,0.)*sh*gLamb(n, lv2);\n\n    //diffC = clamp(diffC,0.,1.);\n    \n    vec3 specC = spec*vec3(1.9,1.8,1.5);\n    specC += spec2*vec3(2.7,2.8,2.9);\n    \n    //\n    \n\n    \n    \n    //float ao = calcAO(pos1,n);\n    \n    fragColor = vec4(mix(diffC+specC,fogC,fog),1);\n    \n    //fragColor = vec4(rm_d.x*0.1,-rm_d.y,0,1);\n    //fragColor = vec4(n,1);              \n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n}","name":"","description":"","type":"image"}]}