{"ver":"0.1","info":{"id":"7tlyW7","date":"1648139656","viewed":89,"name":"memeboi","username":"FeRuS","description":"meme","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["meme"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Remerciement à Soren Pichot pour le code\n//Remerciment a Nicolas pour m'avoir donné l'idée du dickbutt\n\n#define PI 3.14\n\nmat2 rot(float a){\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 opSub2(vec2 d1,vec2 d2) { return(-d1.x > d2.x) ? -d1 : d2;}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdSphere(vec3 pos, float r){\n    return length(pos) - r;\n}\n\nfloat Union(float d1, float d2){\n    return min(d1,d2);\n}\n\nvec2 opUnion2(vec2 d1, vec2 d2){\n    return(d1.x < d2.x) ? d1 : d2;\n}\n\nvec2 opSmoothUnion( vec2 d1, vec2 d2, float k ) {\n    vec2 h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\nfloat sdBox(vec3 p , vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q, .0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n\n\n\n\n\n\n\n\nvec2 Map(vec3 pos){\n    pos.xy *= rot(3.14 + iTime/1.0);\n    \n    vec3 tempPos = pos;\n    tempPos.yz *= rot(3.14/2.0);\n\n    vec2 volume = vec2(.0);\n    vec2 floor = vec2(sdCappedCylinder( tempPos+vec3(-0.1,1.5,0.25),0.9,0.1),0.0);\n    //vec2 rail1 = vec2(sdBox(pos+vec3(0.5,0.0,-0.3),vec3(.1,2.0,0.1)),1.0);\n    //vec2 rail2 = vec2(sdBox(pos+vec3(-0.5,0.0,-0.3),vec3(.1,2.0,0.1)),1.0);\n    \n    vec2 corps = vec2(sdCappedCylinder( tempPos+vec3(-0.0,1.0,-0.0),1.0,1.0),1.0);\n    vec2 topHead = vec2(sdSphere(pos+vec3(-0.0,0.0,-2.0),1.0));\n    vec2 botHead = vec2(sdSphere(pos+vec3(0.0,0.0,0.4),0.8));\n    \n    vec2 butt1 = vec2(sdCappedCylinder( tempPos+vec3(2.0,0.5,-0.0),0.3,0.8),1.0);\n    vec2 topButt = vec2(sdSphere(tempPos+vec3(2.0,1.4,-0.0),0.3));\n    \n    \n    vec2 fesse3 = vec2(sdSphere(pos+vec3(2.5,0.4,0.5),0.25),2.0);\n    vec2 fesse4 = vec2(sdSphere(pos+vec3(2.5,-0.0,0.5),0.25));\n    \n    vec2 fesse1 = vec2(sdSphere(pos+vec3(1.5,0.5,0.5),0.5),2.0);\n    vec2 fesse2 = vec2(sdSphere(pos+vec3(1.5,-0.5,0.5),0.5));\n    vec2 dessousFesse = vec2(sdSphere(pos+vec3(1.5,0.0,0.8),0.3));\n    \n    vec2 eye1 = vec2(sdSphere(pos+vec3(-0.5,0.8,-2.0),0.3));\n    vec2 eye2 = vec2(sdSphere(pos+vec3(0.4,0.8,-2.0),0.3));\n    \n    vec2 pupil1 = vec2(sdSphere(pos+vec3(-0.55,0.9,-2.05),0.25),0.0);\n    vec2 pupil2 = vec2(sdSphere(pos+vec3(0.35,0.9,-2.05),0.25),0.0);\n    \n    vec2 jambe1 = vec2(sdCappedCylinder( tempPos+vec3(-0.5,-1.5,-0.0),0.2,1.0),0.5);\n    \n    vec2 jambe2 = vec2(sdCappedCylinder( tempPos+vec3(0.5,-1.5,-0.0),0.2,1.0),0.5);\n    \n    tempPos.yx *= rot(3.14/2.0);\n    \n    vec2 back = vec2(sdCappedCylinder(tempPos+vec3(-0.8,-1.0,0.0),0.7,.5));\n    \n    \n    \n    tempPos.yz *= rot(3.14/1.5);\n    \n    vec2 pied1 = vec2(sdCappedCylinder(tempPos+vec3(-2.5,-0.8,0.5),0.2,0.7));\n    vec2 pied2 = vec2(sdCappedCylinder(tempPos+vec3(-2.5,-0.5,-0.5),0.2,0.7));\n    \n    //vec2 botHead = vec2(sdSphere(pos+vec3(-0.5,0.0,0.0),1.2));\n    \n    //pos.zx *= rot(3.14/2.0);\n    //volume = topHead;\n    volume = opSmoothUnion(corps,topHead,0.0);\n    volume = opSmoothUnion(volume,back,1.0);\n    volume = opSmoothUnion(volume,botHead,1.5);\n    \n    fesse1 = opSmoothUnion(fesse1,fesse2,0.2);\n    volume = opSmoothUnion(volume,fesse1,1.0);\n    volume = opSmoothUnion(volume,dessousFesse,1.0);\n    \n    volume = opSmoothUnion(volume,eye1,0.0);\n    volume = opSmoothUnion(volume,eye2,0.0);\n    \n    volume = opUnion2(volume,pupil1);\n    volume = opUnion2(volume,pupil2);\n    volume = opUnion2(volume,floor);\n    \n    volume = opSmoothUnion(volume,jambe1,0.2);\n    volume = opSmoothUnion(volume,pied1,0.2);\n    \n    volume = opSmoothUnion(volume,jambe2,0.2);\n    volume = opSmoothUnion(volume,pied2,0.2);\n    \n    volume = opSmoothUnion(volume,butt1,0.2);\n    volume = opSmoothUnion(volume,topButt,0.1);\n    \n    fesse3 = opSmoothUnion(fesse3,fesse4,0.1);\n    volume = opSmoothUnion(volume,fesse3,0.5);\n    \n    //volume = pied1;\n    return volume;\n}\n\n\n\n\n\n\n\nvec2 CastRay(vec3 ro, vec3 rd){\n    \n    float contact = 0.0;\n    \n    for(int m = 0; m < 64; m++)\n    {\n        vec2 ray = Map(ro + rd * contact);\n        \n        if(ray.x < (0.0001 * contact)){\n            return vec2(float(m)/64., ray.y);\n        }\n        contact += ray.x;\n    }\n    \n    return vec2(-1.0,.0); \n}\n\nvec3 render(vec3 ro, vec3 rd){\n    \n    vec2 contact = CastRay(ro, rd);\n    vec3 col = vec3(1.0);\n    \n    if(contact.x == -1.){\n        col = vec3(0.0);\n    }\n    else{\n        \n        col = vec3(1.0);\n        if(contact.y == 0.0){\n            col = vec3(0.0,0.0,0.0);\n        }\n        if(contact.y == 1.0){\n            col = vec3(1.0,0.0,1.0);\n        }\n        if(contact.y == 2.0){\n            col = vec3(.8,0.5,0.0);\n        }\n        float depth = vec3(1.0 - contact.x).r;\n        col *= depth;\n        //col = vec3(1.0 - contact.x) * vec3(sin(1.0 - iTime) /2.0 + .5,sin(iTime - 1.0) / 2.0 + .5,0.0);\n    }\n    \n    return col ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy  - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    vec3 camPos = vec3(0.0,7.0,3.0);\n    float Pi4 = PI;\n        \n    vec3 camTarget = vec3(0.0,0.0,0.0);\n    \n    vec3 forward = normalize(camTarget - camPos);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(forward, right));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up + 2.0 * forward);\n    \n    \n    col = render(camPos, viewDir);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}