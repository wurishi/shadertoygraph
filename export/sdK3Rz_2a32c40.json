{"ver":"0.1","info":{"id":"sdK3Rz","date":"1631056383","viewed":77,"name":"ray marching and gamma test","username":"PrenexNormalForm","description":"the bands on the sphere and bottom of the screen are in order: linear, gamma 2.2, sRGB","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float signedDistance(vec3 pos) {\n    vec4 sphere = vec4(0, 0, 0, 0.3);\n    return length(pos - sphere.xyz) - sphere.w;\n}\n\n//from https://www.shadertoy.com/view/lscSzl\nvec3 encodeSRGB(vec3 linearRGB)\n{\n    vec3 a = 12.92 * linearRGB;\n    vec3 b = 1.055 * pow(linearRGB, vec3(1.0 / 2.4)) - 0.055;\n    vec3 c = step(vec3(0.0031308), linearRGB);\n    return mix(a, b, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragment position on the view plane\n    vec2 fragPos = (fragCoord - iResolution.xy * 0.5) / iResolution.yy;\n    vec3 cameraPos = vec3(0, 0, 1);\n    vec3 cameraForward = vec3(0, 0, -1);\n    vec3 viewDir = normalize(vec3(fragPos, 0) - cameraPos);\n    \n    //ray march\n    float maxDepth = 10.0;\n    float depth = 0.0;\n    float signedDist;\n    int i = 0;\n    for(; i < 1000; i++) {\n        signedDist = signedDistance(cameraPos + viewDir * depth);\n        if (signedDist < 0.0001) {\n            break;\n        }\n        depth += signedDist;\n        if (depth >= maxDepth) {\n            depth = -1.0;\n            break;\n        }\n    }\n    \n    //lighting\n    vec3 color = vec3(0);\n    \n    if (depth > 0.0) {\n        vec3 hit = cameraPos + viewDir * depth;\n        vec3 normal = normalize(vec3(\n                signedDistance(hit + vec3(0.00001, 0, 0)) - signedDistance(hit - vec3(0.00001, 0, 0)),\n                signedDistance(hit + vec3(0, 0.00001, 0)) - signedDistance(hit - vec3(0, 0.00001, 0)),\n                signedDistance(hit + vec3(0, 0, 0.00001)) - signedDistance(hit - vec3(0, 0, 0.00001))\n            ));\n        \n        float ambientLight = 0.01;\n            \n        float diffuseIntensity = 0.7;\n        vec3 lightDir = normalize(vec3(cos(iTime), 0.5 * cos(iTime - 1.0), sin(iTime)));\n        float diffuseLight = diffuseIntensity * clamp(dot(normal, lightDir), 0.0, 1.0);\n        \n        color = vec3(ambientLight + diffuseLight);\n    }\n    \n    // Output to screen\n    if (fragPos.y < -0.1) color = encodeSRGB(color);\n    else if (fragPos.y < 0.1) color = pow(color, vec3(0.4545));\n    \n    \n    if (fragPos.y < -0.35) {\n        color = vec3(fragCoord.x / iResolution.x);\n        if (fragPos.y < -0.45) {\n            color = encodeSRGB(color);\n        } \n        else if (fragPos.y < -0.4) {\n            float gamma = 2.2;\n            color = pow(color, vec3(1.0 / gamma));\n        }\n    }\n    \n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}