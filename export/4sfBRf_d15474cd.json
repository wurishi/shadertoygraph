{"ver":"0.1","info":{"id":"4sfBRf","date":"1497131387","viewed":255,"name":"US Flag","username":"Shadron","description":"The exact flag of the United States of America according to the official specification, anti-aliased, branchless. Stars and stripes made using modular arithmetic, not unnecessary cycles.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","flag","usa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// (c) Viktor Chlumsk√Ω\n// www.shadron.info\n\n#define TAU 6.283185307179586476925286766559\n\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\nconst vec3 RED = vec3(0.698, 0.132, 0.203);\nconst vec3 BLUE = vec3(0.234, 0.233, 0.430);\n\n#define A 1.0\n#define B 1.9\n#define C (7.0/13.0*A)\n#define D (0.4*B)\n#define E (0.1*C)\n#define F E\n#define G (1.0/12.0*D)\n#define H G\n#define L (1.0/13.0*A)\n#define K (0.8*L)\n\nfloat starPlane(vec2 pos, float shift, int i, float pixelSize) {\n\tfloat angle = TAU/5.0*float(i);\n\tvec2 a = vec2(cos(angle), sin(angle));\n\tvec2 n = vec2(a.y, -a.x);\n\treturn clamp((dot(pos-a, n)+shift)/(A*pixelSize)+0.5, 0.0, 1.0);\n}\n\nfloat star(vec2 pos, float radius, float pixelSize) {\n\tfloat shift = 0.25*(sqrt(5.0)-1.0)*radius;\n\tfloat total =\n\t\tstarPlane(pos, shift, 0, pixelSize) +\n\t\tstarPlane(pos, shift, 1, pixelSize) +\n\t\tstarPlane(pos, shift, 2, pixelSize) +\n\t\tstarPlane(pos, shift, 3, pixelSize) +\n\t\tstarPlane(pos, shift, 4, pixelSize);\n\treturn clamp(total-3.0, 0.0, 1.0);\n}\n\nfloat starPattern(vec2 pos, vec2 offset, vec2 size, float pixelSize) {\n\treturn star(mod(clamp(pos-offset, vec2(0.0), size), 2.0*vec2(H, F))-vec2(G, E), 0.5*K, pixelSize);\n}\n\nvec3 usFlag(vec2 coord, float pixelSize) {\n\tvec2 pos = vec2(B, A)*coord;\n\tfloat canton = min(1.0-step(D, pos.x), step(A-C, pos.y));\n\tfloat starFill = starPattern(pos, vec2(0.0, A-C), vec2(D, C), pixelSize) +\n\t\tstarPattern(pos, vec2(H, A-C+F), vec2(D, C)-2.0*vec2(H, F), pixelSize);\n\tvec3 stars = mix(BLUE, WHITE, starFill);\n\tvec3 stripes = mix(RED, WHITE, step(L, mod(pos.y, 2.0*L)));\n\treturn mix(stripes, stars, canton);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 coord = fragCoord/iResolution.xy-0.5;\n\tfloat pixelSize = 1.0/iResolution.y;\n\tfloat aspect = A/B*iResolution.x/iResolution.y;\n\tcoord.x *= max(aspect, 1.0);\n\tcoord.y /= min(aspect, 1.0);\n\tpixelSize /= min(aspect, 1.0);\n\tcoord += 0.5;\n\tfloat stencil = 1.0-step(1.0e-6, distance(coord, fract(coord)));\n\tfragColor = stencil*vec4(usFlag(coord, pixelSize), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}