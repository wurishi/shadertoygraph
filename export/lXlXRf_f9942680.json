{"ver":"0.1","info":{"id":"lXlXRf","date":"1709799293","viewed":81,"name":"Using remap on smooth sdf","username":"akr51","description":"\nThanks to YouTuber: The Art of Code from his playlist on shader programming.\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","smoothstep","remap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat remap01(float a, float b, float t)\n{\n\n\n    // for a >= 0 puts in range [0, 1)\n    return (t - a) / (b - a);\n\n}\n\n// range instead of between 0 and 1. Using -4, 4 and then 0.1, 0.2 are\n// for the smoothstep logic\nfloat remapx(float a, float b, float c, float d, float t)\n{\n\n\n    return remap01(a, b, t) * (d - c) + c;\n\n}\n\n\nfloat band(float f, float strt, float end, float blurr)\n{\n\n    \n    return smoothstep(strt - blurr, strt + blurr, f) * smoothstep(end + blurr, end - blurr, f);\n\n}\n\n\n\n\nfloat rect(vec2 uv, float left, float right, float bottom, float top, float b)\n{\n\n\n\n    return band(uv.x, left, right, b) * band(uv.y, bottom, top, b); \n\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    \n    float b = remapx(-0.4, 0.4, 0.1, 0.2, sin(uv.x + iTime));\n    float f = rect(uv, -0.4, 0.4, -0.4, 0.4, b);\n    \n    fragColor = vec4(vec3(f), 1.0);\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}