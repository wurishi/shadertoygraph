{"ver":"0.1","info":{"id":"mtdBRM","date":"1701100015","viewed":48,"name":"Starlight in space","username":"nayk","description":"stars , music, cosmos","likes":2,"published":1,"flags":1,"usePreview":0,"tags":["music","stars","cosmos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*  Thanks very much!!! originals https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/dl3XDS https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/cd2yRt*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nfloat beautiful_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nmat2 rotationMatrix(float angle)\n{\nangle *= 3.14 / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, s, -s, c );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\t\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n    vec4 O= fragColor;\nvec2 C= fragCoord;\n    \n\tfloat time=iTime*speed+.25;\n O=vec4(0);\n  float t = -iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(dir.xy) + 1.07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n  \n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n      \n        p.z+=-iTime*1.5;\n        a=1.;\n        \n        p=mod(p+a,a*2.)-a;\n        s=10.;\n         p.xy*=rotationMatrix(20.1*iTime)*ma;\n        for(int i=0;i++<8;){\n            p=0.03-abs(p);\n             \n      \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            \n            s*=e=1.4+sin(-iTime*.234)*.1;\n            p=abs(p)*e-vec3(  15.+cos(iTime*.3+.5/(iTime*.3))*3.,\n                    120,\n                    2.+cos(-iTime*.5)*5.\n                 );\n         }\n         g+=e=length(p.yz)/s;\n         g+=e=length(p.yx)/s;\n    \n    }\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n   \n   \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\tdir*=O.xyz;\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor*= vec4(beautiful_star(uv,anim) * vec3(0.55,0.5,0.55), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}