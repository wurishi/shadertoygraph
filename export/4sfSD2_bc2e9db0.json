{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float world(vec2 uv) {\n\tvec2 sample_scale = vec2(0.2);\n\tvec4 sample2 = texture(iChannel0, uv * sample_scale);\n\t\n\tfloat threshold = 0.25 + 0.1 * sin(iTime);\n\treturn smoothstep(threshold, threshold+0.0001, sample2.r);\n\t\n}\n\nconst int NUM_STEPS = 100;\n\nfloat occlude(vec2 from, vec2 to) {\n\tvec2 loc = from;\n\tfloat d = sqrt(dot(loc, to));\n\tfloat step_size = d / float(NUM_STEPS);\n\t\n\tvec2 _step = (from - to) / d * step_size;\n\tfloat result = 1.0;\n\t\n\tfor (int i=0; i < NUM_STEPS; i++) {\n\t\tloc -= _step;\n\t\tresult *= world(loc);\n\t}\n\treturn result;\n}\n\nfloat lighting(vec2 uv) {\n\tvec2 mouse = (iMouse.xy / iResolution.xy) - vec2(0.5);\n\tvec2 d = mouse - uv;\n\treturn (occlude(mouse, uv) + 0.52) * (1.0 - sqrt(d.x * d.x + d.y * d.y));\n}\n\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 q = uv - vec2(0.5);\n\t\n\tvec3 col = vec3(world(q));\n\tcol *= lighting(q);\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sfSD2","date":"1406745827","viewed":246,"name":"Breathing Shadows","username":"hughes","description":"Move the mouse! This is a pretty terrible way to calculate visibility from any point in the scene to the mouse location.\n\nIt's been six years since I did any shader work, just trying to get back into it.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","shadows","visiblity"],"hasliked":0,"parentid":"","parentname":""}}