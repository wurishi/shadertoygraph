{"ver":"0.1","info":{"id":"fldfRS","date":"1663493080","viewed":247,"name":"Unsharp masking","username":"sp33s","description":"Implementation of 'Unsharp Masking' algorithm,as I couldn't find one. \nMade Gaussian Blur instead of Box Blur optional, as Box Blur gives a performance boost with minimal difference.\n\nResource: https://en.wikipedia.org/wiki/Unsharp_masking","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blur","mask","gaussian","unsharp","unsharpen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pow2(a) (a * a)\n#define PI 3.1415926535897932384626433832795\n#define THIRD 1.0 / 3.0\n\nfloat GetGaussianWeight(vec2 i, float sigma) \n{\n    return 1.0 / (2.0 * PI * pow2(sigma)) * exp(-((pow2(i.x) + pow2(i.y)) / (2.0 * pow2(sigma))));\n}\n\nvec4 GaussianBlur(in float size, const in vec2 uv, const in vec2 fragCoord, const in vec2 scale, bool useGaussian)\n{\n    vec4 pixel;\n    float sum;\n\n    if (!useGaussian)\n        size *= THIRD;\n    \n    for (float y = -size; y < size; y++)\n    {\n        if (fragCoord.y + y < 0.0) continue;\n        if (fragCoord.y + y >= iResolution.y) break;\n    \n        for (float x = -size; x < size; x++)\n        {\n            if (fragCoord.x + x < 0.0) continue;\n            if (fragCoord.x + x >= iResolution.x) break;\n\n            vec2 uvOffset = vec2(x, y);\n            float weight = useGaussian ? GetGaussianWeight(uvOffset, size * 0.25/*sigma, standard deviation*/) : 1.0f;\n            pixel += texture(iChannel0, uv + uvOffset * scale) * weight;\n            sum += weight;\n        }    \n    }\n    \n    return pixel / sum;\n}\n\nfloat GetLuminance(vec4 color)\n{\n    return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n}\n\nvec4 UnsharpMask(in float amount, in float radius, in float threshold, const in vec2 uv, const in vec2 fragCoord, const in vec2 scale)\n{\n    vec4 pixel = texture(iChannel0, uv);\n    vec4 blurPixel = GaussianBlur(radius, uv, fragCoord, scale, false);\n    \n    float lumDelta = abs(GetLuminance(pixel) - GetLuminance(blurPixel));\n    \n    if (lumDelta >= threshold)\n        pixel = pixel + (pixel - blurPixel) * amount;\n    \n    return pixel;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 scale = vec2(1.0) / iResolution.xy;\n\n    // Output to screen\n    fragColor = UnsharpMask(1.0, 40.0, 0.1, uv, fragCoord, scale);\n}","name":"Image","description":"","type":"image"}]}