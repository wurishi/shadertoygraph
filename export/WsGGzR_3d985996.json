{"ver":"0.1","info":{"id":"WsGGzR","date":"1569530179","viewed":112,"name":"baby fire","username":"Bouyer","description":"WIP","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nmat3 rot(vec3 angles)\n{   \n    float theta = angles.y;\n    float c = cos(theta);\n    float s = sin(theta);\n    mat3 m = mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n    \n    theta = angles.x;\n    c = cos(theta);\n    s = sin(theta);\n    m *= mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n    \n    theta = angles.z;\n    c = cos(theta);\n    s = sin(theta);\n    m *= mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n    \n    return m;\n}\n\nfloat sdf(vec3 p)\n{\n    return length(p) - 1.;\n}\n\nfloat SDens(vec3 p)\n{\n    float flicker = max(p.y / 3., 0.);\n    float fade = clamp(p.y / 3. - 1., 0., 1.);\n    p += vec3(sin(iTime * 10. - p.y), 0., sin(iTime * 11.111111 - p.y * .9)) * flicker;\n    return max(0., 3. - length(p));\n}\n\n\nfloat FDens(vec3 p)\n{\n    float flicker = max(p.y / 3., 0.);\n    p += vec3(sin(iTime * 10. - p.y), 0., sin(iTime * 11.111111 - p.y * .9)) * flicker;\n    return max(0., 3. - length(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n    uv *= vec2(iResolution.x / iResolution.y, 1);\n\n    mat3 camRot = rot(vec3(0., iTime * .3, 0.));\n    vec3 O = camRot * vec3(0.,0.,5.);\n    vec3 D = camRot * vec3(uv.xy, -1.);\n    float l = 0.;\n    \n    vec3 accum = vec3(0.);\n    \n    for (float i = 1.; i < 99.; i++)\n    {\n        vec3 p = O + D * l;\n        float d = sdf(p);\n        //l += d;\n        l += .1;\n        accum += FDens(p) * vec3(2., 1., 0.) * .01;\n        \n        if (l > 100.)\n            break;\n    }\n    \n    //if (l > 100.)\n        fragColor = texture(iChannel0, D);\n    //else\n    \t//fragColor = vec4(l / 10.);\n    fragColor += vec4(accum, 0.);\n}\n","name":"Image","description":"","type":"image"}]}