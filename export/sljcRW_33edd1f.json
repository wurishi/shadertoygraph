{"ver":"0.1","info":{"id":"sljcRW","date":"1649308913","viewed":135,"name":" 3Circle Testing","username":"ryangadz","description":"3 methods of the math of making a circle shape","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle","distance","dotproduct"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//standard way of doing circle with distance\nfloat circleDis(in vec2 _uv, in float _radius, in float _blur)\n{\n    float r1 = _radius-(_radius*_blur); \n    float r2 = _radius+(_radius*_blur); \n    float c = distance(_uv,vec2(0,0)); \n\treturn 1.0 - smoothstep(r1,r2,c);\n}\n\n//same output as circleDis\nfloat circleDotSlow(in vec2 _uv, in float _radius, in float _blur)\n{\n    float r1 = _radius-(_radius*_blur); \n    float r2 = _radius+(_radius*_blur); \n    float c = sqrt(dot(_uv,_uv)); \n\treturn 1.0 - smoothstep(r1,r2,c);\n}\n\n//same output as circleDis if radius == 0.5 && if blur is < .01\nfloat circleDotFast(in vec2 _uv, in float _radius, in float _blur)\n{\n    float r1 = _radius-(_radius*_blur); \n    float r2 = _radius+(_radius*_blur); \n    float c = dot(_uv,_uv)*2.0; \n\treturn 1.0 - smoothstep(r1,r2,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) - .5;\n    uv.x *= iResolution.x/iResolution.y;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float radius = .25; \n    float blur = .01; \n   //vec3 circleShape = vec3(circleDotSlow(uv,radius, blur));\n   // vec3 circleShape = vec3(circleDotFast(uv,radius, blur));\n    vec3 circleShape = vec3(circleDis(uv,radius, blur));\n    \n    // Output to screen\n    fragColor = vec4(col*circleShape, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}