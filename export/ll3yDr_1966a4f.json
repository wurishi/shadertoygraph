{"ver":"0.1","info":{"id":"ll3yDr","date":"1532206836","viewed":13391,"name":"Cellnoise Based Starfield. ","username":"virtuosic","description":"Shader that generates \"stars\" based on a cell noise.\n\nLeft/Right mouse drag will increase the \"offset\" resulting in a star field. ","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["procedural","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define UVSCALE 100.\n\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n///  2d hash based on 2d coordinates.\nvec2 hash2d(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < 8; i++)\n    {\n        \n    //remap mouse coords. \n    vec2 mouseCoords = iMouse.xy/iResolution.xy;\n     \n    //calculate a value to multiply UVs by to guarantee square cell shapes.\n    float screenRatio = iResolution.x/iResolution.y;\n    vec2 ratioScale = vec2(1.0 * screenRatio, 1);\n    vec2 uvScale = vec2(float(i)*1.0 + UVSCALE);\n    vec2 uv = (fragCoord * ratioScale / iResolution.xy) * uvScale;\n    \n   // get random 2d cell noise\n    vec2 CellUVs = floor(uv + float(i * 1199));\n\tvec2 hash = (hash2d(CellUVs) * 2.0 - 1.0) * mouseCoords.x * 2.0;\n    float hash_magnitude =(1.0-length(hash));\n\n    // calculate uv cell grid.\n    vec2 UVgrid = fract(uv) - 0.5;\n\n    //\n    float radius = clamp(hash_magnitude - 0.5, 0.0, 1.0);\n    float radialGradient = length(UVgrid - hash) / radius;\n    radialGradient = clamp(1.0 - radialGradient, 0.0, 1.0);\n    radialGradient *= radialGradient;\n\n    \n    col += vec3(radialGradient);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}