{"ver":"0.1","info":{"id":"Nd3cDn","date":"1653253987","viewed":240,"name":"Rotating circles illusion","username":"chickenlegs","description":"The rotating shapes illusion.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["illusion","shapes","rotating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nfloat range(float x, float s, float e)\n{\n    return max(sign(s-x)*sign(x-e), 0.0);\n}\n\nfloat eq(float v1, float v2, float e)\n{\n    return range(v1, v2-e, v2+e);\n}\n\nfloat square(vec2 xy, vec2 pos, float size)\n{\n    return range(xy.x, pos.x-size, pos.x+size)  * range(xy.y, pos.y-size, pos.y+size);\n}\n\nfloat circle(vec2 xy, vec2 pos, float radius)\n{\n    return step(distance(xy, pos), radius);\n}\n\nvec2 rotate(vec2 vec, float a)\n{\n    return vec2(vec.x*cos(a)-vec.y*sin(a), vec.x*sin(a)+vec.y*cos(a));\n}\n\nfloat rotater(vec2 xy, float size)\n{\n    return   square(xy, vec2(sin(iTime)/4., 0.), size)\n           + square(xy, rotate(vec2(sin(iTime+PI/2.)/4., 0.), PI/2.), size)\n           + square(xy, rotate(vec2(sin(iTime+PI/4.)/4., 0.), PI/4.), size)\n           + square(xy, rotate(vec2(sin(iTime-PI/4.)/4., 0.), -PI/4.), size)\n           + circle(xy, rotate(vec2(sin(iTime+PI/8.)/4., 0.), PI/8.), size)\n           + circle(xy, rotate(vec2(sin(iTime+1.5*PI/4.)/4., 0.), 1.5*PI/4.), size)\n           + circle(xy, rotate(vec2(sin(iTime+2.5*PI/4.)/4., 0.), 2.5*PI/4.), size)\n           + circle(xy, rotate(vec2(sin(iTime+3.5*PI/4.)/4., 0.), 3.5*PI/4.), size);\n}\n\n\nfloat lines(vec2 xy, float w)\n{\n    return   eq(xy.y, 0., w)\n           + eq(xy.x, 0., w)\n           + eq(xy.y, xy.x, w)\n           + eq(xy.y, -xy.x, w)\n           + eq(xy.y, rotate(xy, PI/4.).x, w) +\n           + eq(xy.y, rotate(xy, -PI/4.).x, w/2.)\n           + eq(xy.x, rotate(xy, 3.*PI/4.).y, w/2.)\n           + eq(xy.x, rotate(xy, 5.*PI/4.).y, w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.y/iResolution.x;\n    vec4 mouse = iMouse / iResolution.x;\n    \n    float viewPortCenter = 0.5;\n    \n    vec2 xy = uv - vec2(viewPortCenter);\n    xy = vec2(xy.x, xy.y*ratio);\n    \n    vec2 pixel = vec2(1. / iResolution.x, 1. / iResolution.y);\n    float avgPixel = (pixel.x+pixel.y)/2.;\n    \n    // Rotater:\n    float redCircle = circle(xy, vec2(0.), 0.25);\n    float color = rotater(xy, 0.025);\n\n    vec3 col = vec3(color)*32. + vec3(redCircle,0., 0.) - vec3(2.*lines(xy, avgPixel));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}