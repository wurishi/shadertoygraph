{"ver":"0.1","info":{"id":"4tdBRX","date":"1540464852","viewed":835,"name":"LSD Triangle","username":"Vizalkar","description":"Don't do drugs, make shaders instead","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define TWO_PI 6.28318530718\n#define PI 3.14159265\n#define palette(t) pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) )\n\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    \n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n                 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n        (c - a)* u.y * (1.0 - u.x) +\n        (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 rot(in float theta)\n{\n    return mat2(cos(theta),-sin(theta), sin(theta), cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = vec2(0.5) - uv;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    float rotime = iTime*0.2;\n    \n    float theta = atan(uv.y,uv.x);\n    \n    float radius = sdEquilateralTriangle(uv*rot(PI)*3. + vec2(0,.2));\n    \n    vec2 fuv = uv*rot(rotime);\n    vec2 fbm1 = vec2(fbm(fuv), fbm(fuv + iTime*0.1 + 0.2));\n    vec2 fbm2 = vec2(fbm(fuv + fbm1.x + 0.120*iTime), fbm(uv + fbm1.y - 0.220*iTime) );\n    \n    float thmod = (theta+fbm2.x*fbm2.y*1.0/(radius))/PI + 1.;\n    \n    \n    \n    vec3 fbmColor = palette(thmod +iTime*0.2 + fbm2.y) * (fbm2.x*fbm2.x*fbm2.x*fbm2.x +1.7);\n    fbmColor = mix(fbmColor, vec3(1.,1.,1.), fbm(uv*iTime*0.001)+0.4)*0.9;\n\n    fbmColor = mix(fbmColor, vec3(0.9,0.15,0.25)*0.3, pow(radius,.5)-0.4);\n\n    vec3 col = smoothstep(0.,1.,radius*35.) * fbmColor;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}