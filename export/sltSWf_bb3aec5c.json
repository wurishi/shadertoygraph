{"ver":"0.1","info":{"id":"sltSWf","date":"1639923681","viewed":40,"name":"RayMarching Practice By Kayla","username":"moonyuet","description":"Take a look at how raymarching works(learnt from tutorial ray mardching for dummies)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .01\n\nfloat GetDist(vec3 p)\n{\n    vec4 s = vec4(0,1,6,1);\n    float dS = length(p-s.xyz)-s.w;\n    float dP = p.y;\n    float d = min(dS, dP);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO= 0.;\n    for(int i = 0; i<MAX_STEPS; i++)\n    {\n        vec3 p = ro+dO*rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dS< SURFACE_DIST|| dO>MAX_DIST) break;\n    \n    }\n    return dO;\n}\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d-vec3(GetDist(p-e.xyy), GetDist(p-e.yxy), GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) *2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    float d =RayMarch(p+n*SURFACE_DIST*4.,l);\n    if(d<length(lightPos-p)) dif *=.1;\n    return dif;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 ro = vec3(0,1,0);\n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n  \n    vec3 p = ro + rd * d;\n\n    \n    vec3 normal = GetNormal(p);\n    float pnv = dot(normal, -rd);\n    \n    float dif = GetLight(p);\n    vec3 nv = vec3(dif);\n    col += sin(pnv * nv * vec3(0.0, 1.0, 0.0) * 10.0 * 1.5) * 0.5 + 0.5;  \n    col += sin(pnv * nv * vec3(1.0, 0.0, 0.0) * 20.0 * 1.5) * 0.5 + 0.5;  \n    col += sin(pnv * nv * vec3(0.0, 0.0, 1.0) * 5.0 * 1.5) * 0.5 + 0.5;\n    col = clamp(normalize(col), 0.0, 1.0);\n\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}