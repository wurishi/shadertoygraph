{"ver":"0.1","info":{"id":"tdjfWK","date":"1590883179","viewed":140,"name":"Quadratic Bezier Curve","username":"yp3y5akh0v","description":"Quadratic Bezier Curve. Time complexity O(n), where n is # of points in curve\n\nPrevious work: https://www.shadertoy.com/view/WdjfWV","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","bezier","curve","quadratic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 40.\n#define R iResolution.xy\n#define M iMouse.xy\n#define t iTime\n#define T (0.5 + 0.5 * sin(t))\n#define D(p) (((p) - 0.5 * R) / R.y)\n#define inf 1e32\n\nfloat distToV(vec2 p, vec2 o, vec2 v) {\n    vec2 op = p - o;\n    vec2 ep = op - v;\n    float d = length(ep - dot(ep, v) / dot(v, v) * v);\n    if (dot(op, v) < 0.) {\n        d = length(op);\n    }    \n    if (dot(ep, -v) < 0.) {\n        d = length(ep);\n    }\n    return d;\n}\n\nvec2 QuadraticBezier(vec2 a, vec2 b, vec2 c, float q) {\n    vec2 qab = a + q * (b - a);\n    vec2 qbc = b + q * (c - b);    \n    return qab + q * (qbc - qab);\n}\n\nvoid mainImage(out vec4 o, in vec2 p)\n{\n    p = D(p);\n    vec2 m = D(M);    \n    vec2 a = vec2(-0.6, -0.3);\n    vec2 b = vec2(m.x, m.y);\n    vec2 c = vec2(0.6, -0.3);\n    float s = inf;\n    \n    for (float i = 1.; i <= N; i++) {\n        vec2 qb0 = QuadraticBezier(a, b, c, (i - 1.) / N);\n        vec2 qb1 = QuadraticBezier(a, b, c, i / N);\n        float d = distToV(p, qb0, qb1 - qb0);\n        s = min(s, d);\n    }\n    \n    vec2 tab = a + T * (b - a);\n    vec2 tbc = b + T * (c - b);\n    vec2 tr = tab + T * (tbc - tab);\n    float dab = distToV(p, a, tab - a);\n    float dbc = distToV(p, b, tbc - b);\n    float dr = distToV(p, tab, tbc - tab);\n    \n    o = vec4(0.002 / s);\n    o += vec4(0.003 / dab, 0.003 / dbc, 0.003 / dr, 0.);\n    o += vec4(0.004 / length(p - tr));\n}","name":"Image","description":"","type":"image"}]}