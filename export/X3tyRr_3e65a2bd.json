{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\nconst float PI = 3.1415927;\n\nconst int   ARROW_V_STYLE = 1;\nconst int   ARROW_LINE_STYLE = 2;\n\n// Choose your arrow head style\nconst int   ARROW_STYLE = ARROW_LINE_STYLE;\nconst float ARROW_TILE_SIZE = 64.0;\n\n// How sharp should the arrow head be? Used\nconst float ARROW_HEAD_ANGLE = 45.0 * PI / 180.0;\n\n// Used for ARROW_LINE_STYLE\nconst float ARROW_HEAD_LENGTH = ARROW_TILE_SIZE / 6.0;\nconst float ARROW_SHAFT_THICKNESS = 1.0;\n\n// Computes the center pixel of the tile containing pixel pos\nvec2 arrowTileCenterCoord(vec2 pos) {\n\treturn (floor(pos / ARROW_TILE_SIZE) + 0.5) * ARROW_TILE_SIZE;\n}\n\n\n// v = field sampled at tileCenterCoord(p), scaled by the length\n// desired in pixels for arrows\n// Returns 1.0 where there is an arrow pixel.\nfloat arrow(vec2 p, vec2 v) {\n\t// Make everything relative to the center, which may be fractional\n\tp -= arrowTileCenterCoord(p);\n\t\t\n    float mag_v = length(v), mag_p = length(p);\n\t\n\tif (mag_v > 0.0) {\n\t\t// Non-zero velocity case\n\t\tvec2 dir_p = p / mag_p, dir_v = v / mag_v;\n\t\t\n\t\t// We can't draw arrows larger than the tile radius, so clamp magnitude.\n\t\t// Enforce a minimum length to help see direction\n\t\tmag_v = clamp(mag_v, 5.0, ARROW_TILE_SIZE / 2.0);\n\n\t\t// Arrow tip location\n\t\tv = dir_v * mag_v;\n\t\t\n\t\t// Define a 2D implicit surface so that the arrow is antialiased.\n\t\t// In each line, the left expression defines a shape and the right controls\n\t\t// how quickly it fades in or out.\n\n\t\tfloat dist;\t\t\n\t\tif (ARROW_STYLE == ARROW_LINE_STYLE) {\n\t\t\t// Signed distance from a line segment based on https://www.shadertoy.com/view/ls2GWG by \n\t\t\t// Matthias Reitinger, @mreitinger\n\t\t\t\n\t\t\t// Line arrow style\n\t\t\tdist = \n\t\t\t\tmax(\n\t\t\t\t\t// Shaft\n\t\t\t\t\tARROW_SHAFT_THICKNESS / 4.0 - \n\t\t\t\t\t\tmax(abs(dot(p, vec2(dir_v.y, -dir_v.x))), // Width\n\t\t\t\t\t\t    abs(dot(p, dir_v)) - mag_v + ARROW_HEAD_LENGTH / 2.0), // Length\n\t\t\t\t\t\t\n   \t\t\t         // Arrow head\n\t\t\t\t\t min(0.0, dot(v - p, dir_v) - cos(ARROW_HEAD_ANGLE / 2.0) * length(v - p)) * 2.0 + // Front sides\n\t\t\t\t\t min(0.0, dot(p, dir_v) + ARROW_HEAD_LENGTH - mag_v)); // Back\n\t\t} else {\n\t\t\t// V arrow style\n\t\t\tdist = min(0.0, mag_v - mag_p) * 2.0 + // length\n\t\t\t\t   min(0.0, dot(normalize(v - p), dir_v) - cos(ARROW_HEAD_ANGLE / 2.0)) * 2.0 * length(v - p) + // head sides\n\t\t\t\t   min(0.0, dot(p, dir_v) + 1.0) + // head back\n\t\t\t\t   min(0.0, cos(ARROW_HEAD_ANGLE / 2.0) - dot(normalize(v * 0.33 - p), dir_v)) * mag_v * 0.8; // cutout\n\t\t}\n\t\t\n\t\treturn clamp(1.0 + dist, 0.0, 1.0);\n\t} else {\n\t\t// Center of the pixel is always on the arrow\n\t\treturn max(0.0, 1.2 - mag_p);\n\t}\n}\n\n\nvec2 field(vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float xy = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/vec2(iResolution.x,xy * iResolution.y)-vec2(0.5,0.5/xy);\n\n    float a = -0.2;\n    float b = .2;\n    float Qmax =.10;\n    float dx=(b-a)/100.;\n    float Q = (1.05+sin(iTime)) *Qmax;\n    float lam = Q/(b-a);\n    vec2 E=vec2(0.,0.);\n\n/*\nfor ( float x = a; x<=b;x+=dx) {\n vec2 r = uv - vec2(x,0);\n//     E.x+=lam*dx/length(r);\n     E.x+=dx*lam/sqrt((uv.x-x)*(uv.x-x)+uv.y*uv.y);\n}\n*/\n// lam*sqrt((x-b)*(x-b) + (x-a)*(x-a))\nfloat db = uv.x-b;\nfloat da = uv.x-a;\nfloat scale=1.;\n\nE.x +=   lam * (1./sqrt(db*db+uv.y*uv.y) - 1./sqrt(da*da+uv.y*uv.y));\nE.y +=   -(lam/uv.y)*(db/sqrt(db*db+uv.y*uv.y) - da/sqrt(da*da+uv.y*uv.y));\n\n\ndb = uv.y-b;\nda = uv.y-a;\n\nE.y += lam * (1./sqrt(db*db+uv.x*uv.x) - 1./sqrt(da*da+uv.x*uv.x));\nE.x += -(lam/uv.x)*(db/sqrt(db*db+uv.x*uv.x) - da/sqrt(da*da+uv.x*uv.x));\n\nreturn E;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 f = field(fragCoord.xy);\n    float lf = length(f);\n    fragColor=\n\t\t(1.0 - arrow(fragCoord.xy, field(arrowTileCenterCoord(fragCoord.xy)) * ARROW_TILE_SIZE * 0.4)) * \n\t\tvec4(abs(f),0, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"X3tyRr","date":"1734652963","viewed":25,"name":"Line segment electric field","username":"paf","description":"Electric field of a line segment","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["electricfield"],"hasliked":0,"parentid":"","parentname":""}}