{"ver":"0.1","info":{"id":"4fVyzy","date":"1732039190","viewed":196,"name":"dancing fraction","username":"rnslv","description":"audio reactive fractional","likes":5,"published":3,"flags":4,"usePreview":0,"tags":["fractal","rings","rotating","audioreactive","multicolor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- Palette Function for Vibrant Colors ---\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.3, 0.2, 0.5); // Dreamy colors\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// --- Function to Draw Rings ---\nfloat drawRing(vec2 uv, vec2 center, float radius, float thickness) {\n    float d = length(uv - center) - radius;\n    return smoothstep(thickness, 0.0, abs(d));\n}\n\n// --- Text Drawing Function for \"AJL\" ---\nfloat drawText(vec2 uv, vec2 pos, float size, vec2 offset, vec2 aspect) {\n    uv = (uv - pos) * size;       // Scale and position text\n    uv.x *= aspect.x / aspect.y; // Adjust for screen aspect ratio\n    vec2 d = abs(uv - offset);   // Letter structure\n    float bar = max(d.x, d.y) - 0.1;\n    return smoothstep(0.01, 0.0, bar);\n}\n\nfloat drawAJL(vec2 uv, vec2 aspect) {\n    float ajl = 0.0;\n\n    // \"A\"\n    ajl += drawText(uv, vec2(-0.4, 0.0), 10.0, vec2(0.2, 0.2), aspect); // Main shape\n    ajl += drawText(uv, vec2(-0.4, 0.0), 10.0, vec2(-0.2, 0.2), aspect); // Left edge\n    ajl += drawText(uv, vec2(-0.4, 0.0), 10.0, vec2(0.0, -0.2), aspect); // Center\n\n    // \"J\"\n    ajl += drawText(uv, vec2(0.0, 0.0), 10.0, vec2(0.0, 0.2), aspect);   // Top bar\n    ajl += drawText(uv, vec2(0.0, -0.2), 10.0, vec2(0.2, -0.5), aspect); // Hook\n\n    // \"L\"\n    ajl += drawText(uv, vec2(0.4, -0.1), 10.0, vec2(-0.1, 0.2), aspect); // Top bar\n    ajl += drawText(uv, vec2(0.4, -0.3), 10.0, vec2(-0.1, -0.2), aspect); // Base\n\n    return ajl;\n}\n\n// --- Fractal Background Shader ---\nvec3 fractalShader(vec2 uv, float audio, float time) {\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    // Apply shake effect\n    float shakeIntensity = audio * 0.05;\n    uv += vec2(sin(time * 10.0) * shakeIntensity, cos(time * 15.0) * shakeIntensity);\n\n    // Apply rotation\n    float angle = time * 0.2 + audio * 0.5;\n    float cosA = cos(angle);\n    float sinA = sin(angle);\n    uv = mat2(cosA, -sinA, sinA, cosA) * uv;\n\n    for (float i = 0.0; i < 6.0; i++) {\n        uv = fract(uv * 1.5 + audio * 0.2) - 0.5;\n        float d = length(uv) * exp(-length(uv0) * 1.2);\n        vec3 col = palette(length(uv0) + i * 0.4 + time * 0.4 + audio * 0.5);\n        d = sin(d * 8.0 + time * 2.0) / 8.0;\n        d = abs(d);\n        d = pow(0.01 / d, 1.4);\n        finalColor += col * d;\n    }\n\n    return finalColor;\n}\n\n// --- Main Shader ---\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 aspect = iResolution.xy / min(iResolution.x, iResolution.y);\n\n    // Sample audio data\n    float audioL = texture(iChannel0, vec2(0.1, 0.5)).r;\n    float audioH = texture(iChannel0, vec2(0.9, 0.5)).r;\n    float audio = mix(audioL, audioH, 0.5);\n\n    // Background fractals\n    vec3 fractal = fractalShader(uv, audio, iTime);\n\n    // Persistent text \"AJL\"\n    float ajl = drawAJL(uv, aspect);\n    vec3 textColor = palette(iTime * 0.2 + audio * 2.0);\n    vec3 text = vec3(ajl) * textColor;\n\n    // Audio-reactive rings\n    vec3 rings = vec3(0.0);\n    for (float i = 0.0; i < 5.0; i++) {\n        // Add synchronized shake to rings\n        vec2 ringShake = vec2(sin(iTime * 5.0 + i) * audio * 0.05, cos(iTime * 5.0 + i) * audio * 0.05);\n        float radius = 0.2 + i * 0.1 + audio * 0.2 * sin(iTime + i);\n        float thickness = 0.02 + 0.01 * audio;\n        rings += palette(i + iTime * 0.3) * drawRing(uv + ringShake, vec2(0.0, 0.0), radius, thickness);\n    }\n\n    // Combine everything\n    vec3 finalColor = fractal + rings;\n    finalColor = mix(finalColor, text, ajl);\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}