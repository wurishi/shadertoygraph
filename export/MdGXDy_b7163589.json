{"ver":"0.1","info":{"id":"MdGXDy","date":"1466296022","viewed":337,"name":"invert L of HSL","username":"vladkvit","description":"Inverts the brightness of the image, while keeping the colors and saturations intact. rgb2hsv and hsv2rgb are from stackoverflow.","likes":5,"published":1,"flags":2,"usePreview":0,"tags":["signalprocessing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float gamma = 2.2;\n\nfloat gamma2linear( float v )\n{\n    return pow( v, gamma );\n}\n\nfloat linear2gamma( float v )\n{\n    return pow( v, 1./gamma );\n}\n\nfloat min3( float a, float b, float c )\n{\n    return min( min( a, b ), c );\n}\n\nfloat max3( float a, float b, float c )\n{\n    return max( max( a, b ), c );\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 convertRGBtoHSL( vec3 col )\n{\n    float red   = col.r;\n    float green = col.g;\n    float blue  = col.b;\n\n    float minc  = min3( col.r, col.g, col.b );\n    float maxc  = max3( col.r, col.g, col.b );\n    float delta = maxc - minc;\n\n    float lum = (minc + maxc) * 0.5;\n    float sat = 0.0;\n    float hue = 0.0;\n\n    if (lum > 0.0 && lum < 1.0) {\n        float mul = (lum < 0.5)  ?  (lum)  :  (1.0-lum);\n        sat = delta / (mul * 2.0);\n    }\n\n    vec3 masks = vec3(\n        (maxc == red   && maxc != green) ? 1.0 : 0.0,\n        (maxc == green && maxc != blue)  ? 1.0 : 0.0,\n        (maxc == blue  && maxc != red)   ? 1.0 : 0.0\n    );\n\n    vec3 adds = vec3(\n              ((green - blue ) / delta),\n        2.0 + ((blue  - red  ) / delta),\n        4.0 + ((red   - green) / delta)\n    );\n\n    float deltaGtz = (delta > 0.0) ? 1.0 : 0.0;\n\n    hue += dot( adds, masks );\n    hue *= deltaGtz;\n    hue /= 6.0;\n\n    if (hue < 0.0)\n        hue += 1.0;\n\n    return vec3( hue, sat, lum );\n}\n\nvec3 convertHSLtoRGB( vec3 col )\n{\n    const float onethird = 1.0 / 3.0;\n    const float twothird = 2.0 / 3.0;\n    const float rcpsixth = 6.0;\n\n    float hue = col.x;\n    float sat = col.y;\n    float lum = col.z;\n\n    vec3 xt = vec3(\n        rcpsixth * (hue - twothird),\n        0.0,\n        rcpsixth * (1.0 - hue)\n    );\n\n    if (hue < twothird) {\n        xt.r = 0.0;\n        xt.g = rcpsixth * (twothird - hue);\n        xt.b = rcpsixth * (hue      - onethird);\n    } \n\n    if (hue < onethird) {\n        xt.r = rcpsixth * (onethird - hue);\n        xt.g = rcpsixth * hue;\n        xt.b = 0.0;\n    }\n\n    xt = min( xt, 1.0 );\n\n    float sat2   =  2.0 * sat;\n    float satinv =  1.0 - sat;\n    float luminv =  1.0 - lum;\n    float lum2m1 = (2.0 * lum) - 1.0;\n    vec3  ct     = (sat2 * xt) + satinv;\n\n    vec3 rgb;\n    if (lum >= 0.5)\n         rgb = (luminv * ct) + lum2m1;\n    else rgb =  lum    * ct;\n\n    return rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 sample = texture( iChannel0, uv ).rgb;\n    \n    vec3 s2 = convertRGBtoHSL( sample );\n    \n    //s2.b = gamma2linear( s2.b );\n    s2.b = ( s2.b * -1.0 ) + 1.0;\n    //s2.b = linear2gamma( s2.b  );\n    \n    vec3 s3 = convertHSLtoRGB( s2 );\n\tfragColor = vec4(s3, 1.0);\n}","name":"Image","description":"","type":"image"}]}