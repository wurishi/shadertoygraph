{"ver":"0.1","info":{"id":"7lcczX","date":"1660217414","viewed":211,"name":"motion blur transition","username":"zyc","description":"Motion blur with stratified sampling and automatic lod selection","likes":5,"published":1,"flags":0,"usePreview":1,"tags":["2d","blur","lod","stratified"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SAMPLES 10\n#define SHARPNESS 4.0\n\n#define SAMPLES_F float(SAMPLES)\n\n#define TAU  6.28318530718\n\nconst vec2 direction = vec2(1.0, 0.0);\n\n// Hash without Sine - https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 443.8975\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec4 motionBlur(vec2 uv, float progress) {\n    float r = 0.05 + 0.05 * sin(progress*TAU+4.3);\n    float d = (r * 2.0 * iResolution.x) / SAMPLES_F;\n    float lod = log2(max(d / SHARPNESS, 1.0));\n    vec4 srcColor = vec4(0.0, 0.0, 0.0, 0.0);    \n    vec4 dstColor = vec4(0.0, 0.0, 0.0, 0.0);    \n    \n    float A = smoothstep(0.35, 0.65, progress);\n\n    \n    for (int i = 0; i < SAMPLES; ++i)\n    {\n        float fi = float(i);\n        float rnd = hash13(vec3(uv.xy, fi));\n        float f = (fi + rnd) / SAMPLES_F;\t// stratified sampling between [0, 1]\n        f = (f * 2.0 - 1.0) * r;\t// [0, 1] -> [-r, r]\n        if (A < 1.0 ) {\n            srcColor.rgb += textureLod(iChannel0, uv + 2.0*f*direction, lod).rgb;\n        }\n        \n        if (A > 0.0) {\n            dstColor.rgb += textureLod(iChannel1, uv + 2.0*f*direction, lod).rgb;\n        }\n    }\n    srcColor.rgb /= SAMPLES_F;\n    dstColor.rgb /= SAMPLES_F;\n    return mix(srcColor, dstColor, A);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float progress = fract(iTime*0.25);\n    fragColor = motionBlur(uv, progress);\n}\n","name":"Image","description":"","type":"image"}]}