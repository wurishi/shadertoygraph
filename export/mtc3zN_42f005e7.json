{"ver":"0.1","info":{"id":"mtc3zN","date":"1682795575","viewed":41,"name":"Mandelbrot_julia","username":"numpyhard","description":"basic mandelbrot stuff","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lerp(float x, float a, float b){\n    return x*a + (1.0-x)*b;\n}\n\nfloat lineartime_lerp(){\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.y;\n    \n    float ratio = iResolution.x/iResolution.y;\n    //float zoom = 0.2;\n    //float anchorx = -1.75;\n    //float anchory = 0.02;\n    \n    float zoom = 3.;\n    float anchorx = 0.0;\n    float anchory = 0.0;\n    \n    float juliax = -0.1;\n    float juliay = 0.8;\n    \n    float a = (uv.x-ratio/2.) * zoom + anchorx;\n    float b = (uv.y-0.5) * zoom + anchory;\n    \n    float time = .5+.5*sin(iTime*.5);\n    float a0 = lerp(time, a, juliax);\n    float b0 = lerp(time, b, juliay);\n    float maxIter = 50.0;\n    float i = 0.0;\n    int n;\n    for (n = 0; n < int(maxIter); n++) {\n        float aa = a*a;\n        float bb = b * b;\n        if (aa + bb > 4.0) {\n            break;\n        }\n        aa = mod(aa, 4.0);\n        float twoab = 2.0 * a * b;\n        a = aa - bb + a0;\n        b = twoab + b0;\n    }\n    i = float(n);\n    \n    // Map the iteration count to a color\n    float col = i / maxIter;\n    \n    fragColor = vec4(col, 0, lerp(time, 0.0, 0.8), 1.0);\n}","name":"Image","description":"","type":"image"}]}