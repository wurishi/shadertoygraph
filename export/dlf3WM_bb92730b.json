{"ver":"0.1","info":{"id":"dlf3WM","date":"1671830424","viewed":114,"name":"Chrono Trigger Portal Effect","username":"raphaklaus","description":"A reimagined Chrono Trigger time travel portal effect.\n\nGitHub link: https://github.com/raphaklaus/chrono-trigger-portal-shader","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["effect","vortex","portal","snes","chronotrigger"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec3 waves(vec2 uv, float speed) {\n     float smoothness = 2.0 / 0.5 + sin(uv.x * PI);\n    float spiral_wave = 0.;\n    vec3 color = vec3(1.0);\n\n    if (uv.y >= 0.5) { \n      speed = speed / PI / 2.;\n    } else { \n      speed = speed / PI / 2.;\n      uv.y = 1. - uv.y;\n    } \n\n    // Stretching\n    uv.y = (uv.y - 0.2) * 1.8;\n    uv.x = ((uv.x - 0.5) * smoothness) / ((uv.y - 0.5) * 8.0) ; \n    uv = uv / 3.2;\n\n    // Stripes\n    spiral_wave = sin(uv.x * 20. + sin(uv.y * 6.0 + (iTime * speed)) * 4.0);\n    color = spiral_wave * vec3(1.);\n    \n    // Interpolate waves color\n    float red_channel = clamp(0.3 + sin(iTime), 0.0, 1.0);\n\n    // Colorize\n    color *= vec3(red_channel, 0.4, 1.0) + vec3(0.0);\n    return color;\n}\n\nvec3 spiral(vec2 uv, float speed) {\n      // Convert to Polar Coordinates\n    vec2 center = vec2(uv.x - 0.5, uv.y - 0.5);\n    float angle = atan(center.y, center.x);\n    float radius = length(center) * 2.;\n    vec2 st = vec2(angle, radius);\n\n    uv = st;\n\n    vec3 color = vec3(1.0);\n\n    // Stretching\n    float stretching_factor = 2.4 / pow(uv.y, 0.8);\n    uv.y = stretching_factor;\n    \n    // Tunnel pattern\n    float spiral_wave = (sin((max(uv.y * 2.9, -1.0)) + iTime * speed) * 2.0);\n    color = ((sin(uv.x * (40.))) + ( spiral_wave * 2.)) * vec3(1.0);\n    color = smoothstep(0.0, 2.0, color);\n\n    // Avoid infinity generation\n    color = color * smoothstep(0.04, 0.05, radius);\n\n    // Colorize\n    color *= vec3(0.1, 0.1, 1.0) + vec3(0.0);\n    return color;\n}\n\nvec3 blendNormal(vec3 base, vec3 blend) {\n\treturn blend;\n}\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n\treturn (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float y = uv.y;\n    float speed = 15.0;\n\n    vec3 color = blendNormal(spiral(uv, speed),waves(uv, speed), 0.3);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}