{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S.Guillitte \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float k=0.;\n    vec3 d =  vec3(fragCoord,1.0)/iResolution-.5, o = d, c=k*d, p;\n    d += vec3(texture(iChannel0, vec2(0.1, 0.5))) * 0.01;\n    \n    for( int i=0; i<120; i++ ){\n        \n        p = o+tan(iTime*.1) * cos(iTime) * cos(0.3 * float(texture(iChannel0, vec2(0,3))));\n\t\tfor (int j = 0; j < 10; j++) \n\t\t\n        \tp = abs(p.zyx-.2) -.7,k += exp(-2. * abs(dot(p,o)));\n\t\t\n\t\t\n\t\tk/=3.;\n        o += d *.05*k;\n        c = .97*c + .1*k*vec3(k*k*k,k*k,1);\n    }\n    c =  .4 *log(1.+c);\n    fragColor.rgb = c;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtS3RW","date":"1427080514","viewed":1513,"name":"CompactCode","username":"ForestCSharp","description":"An extremely compact shader. Based off a shader by Guil","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["minimalistic"],"hasliked":0,"parentid":"","parentname":""}}