{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"const float PI = 3.14159265358979;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float c = iResolution.x / 10.0;\n    vec2 p = fragCoord.xy;\n    const int N = 48;\n    float wavelength = iResolution.x * 0.006;\n    float omega = c * 2.0 * PI / wavelength;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 p1 = iMouse.z > 0.0 ? iMouse.xy : iResolution.xy * (vec2(0.6, 0.5) + 0.4 * vec2(cos(1.5 * iTime) / aspect, sin(1.2 * iTime)));\n    float rad = 0.3;\n    vec2 field = vec2(0);\n    float sources = 0.0;\n    \n    float r1 = iResolution.x * 0.002;\n    \n    for (int i = 0; i < N; i++) {\n        float s = float(i) / float(N - 1);\n        vec2 p0 = iResolution.xy * vec2(0.005, 0.5 + rad * (s - 0.5));\n        float delay = length(p1 - p0) / c;\n        float r = length(p - p0);\n        float a = omega * (iTime - r / c + delay);\n        \n        field += vec2(sin(a), cos(a)) / (float(N) * float(r / iResolution.x));\n        \n        sources += smoothstep(r1 + 1.0, r1, length(p - p0));\n    }\n    \n    field *= 2.0;\n    float value = dot(field, field);\n    vec3 col = mix(vec3(0., 0., 0.02), vec3(0.1, 0.2, 1), value) + vec3(field, 0) * 0.02;\n    \n    fragColor = vec4(pow(vec3(1. - exp(-col * 0.2)), vec3(0.454)), 1);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), smoothstep(7.0, 5.0, length(p - p1)));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), sources);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MXtyRH","date":"1734749497","viewed":126,"name":"Beamforming test 2","username":"rreusser","description":"Adjusting the phase shift of sources to form a beam.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["waves"],"hasliked":0,"parentid":"","parentname":""}}