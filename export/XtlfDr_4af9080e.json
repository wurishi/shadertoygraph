{"ver":"0.1","info":{"id":"XtlfDr","date":"1511631533","viewed":181,"name":"Trichromical Pixelator","username":"arthursw","description":"This shader downsamples the given image and renders it with three bars per pixel.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["pixelator","trichromie","downsampler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 rotate(vec2 v, float alpha)\n{\n\tfloat vx = v.x*cos(alpha)-v.y*sin(alpha);\n\tfloat vy = v.x*sin(alpha)+v.y*cos(alpha);\n\tv.x = vx;\n\tv.y = vy;\n\treturn v;\n}\n\nfloat distToLineSquare(vec2 p1, vec2 p2, vec2 p, float thickness)\n{\n\tp -= p1;\n\tvec2 lineVector = p2-p1;\n\t\t\n\tfloat angle = -atan(lineVector.y,lineVector.x);\n\tp = rotate(p,angle);\n\t\n\tfloat dx = 0.0;\n\tif(p.x<0.0)\n\t\tdx = abs(p.x);\n\telse if(p.x>length(lineVector))\n\t\tdx = abs(p.x) - length(lineVector);\n\t\t\n\treturn thickness/(dx+abs(p.y));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    float n = 75.0;\n    float nInv = 1.0/n;\n    vec2 cell = floor(uv / nInv)/n;\n\tvec4 color = texture(iChannel0, cell);\n    \n\tfloat thickness = 0.001;\n    \n    // Red\n    float redX = cell.x + nInv*1.0/6.0;\n    float red = distToLineSquare(vec2(redX, cell.y), vec2(redX, cell.y + color.r*nInv), uv, thickness);\n    \n    // Green\n    float greenX = cell.x + nInv*3.0/6.0;\n    float green = distToLineSquare(vec2(greenX, cell.y), vec2(greenX, cell.y + color.g*nInv), uv, thickness);\n    \n    // Blue\n    float blueX = cell.x + nInv*5.0/6.0;\n    float blue = distToLineSquare(vec2(blueX, cell.y), vec2(blueX, cell.y + color.b*nInv), uv, thickness);\n    \n    fragColor = vec4(red, green, blue, 1.0);\n    //fragColor = color;\n}","name":"Image","description":"","type":"image"}]}