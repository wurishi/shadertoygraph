{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\nconst vec4 l1 = vec4(0.1, 1.1, .9, 1.1);   // top horizontal\nconst vec4 l2 = vec4(0.0, 1.0, 0.0, 0.6);  // top left vertical\nconst vec4 l3 = vec4(1.0, 1.0, 1.0, 0.6);  // top right vertical\nconst vec4 l4 = vec4(0.1, 0.5, .9, 0.5);   // middle horizontal\nconst vec4 l5 = vec4(0.0, 0.4, 0.0, 0.0);  // lower left vertical\nconst vec4 l6 = vec4(1.0, 0.4, 1.0, 0.0);  // lower right vertical\nconst vec4 l7 = vec4(0.1, -0.1, .9, -0.1); // lower horizontal\n\nfloat  notbetween(float x, float less, float more) {\n    return 1.0 -  step(x, more) * step(less, x);\n}\n\n\n// distance between point p and line (l.x,l.y to l.z, l.w)\nfloat ldist(in vec4 l,in vec2 p) { \n  vec2 lo = (l.zw - l.xy);\n  float l2 = dot(lo, lo);\n  float t = dot(p - l.xy, lo)/l2;\n  \n  if (l2 < 0.0 || t < 0.0001) {\n    return length(p - l.xy);\n  }\n  if ( t > 1.0 ) {\n    return length(p - l.zw);\n  }\n  return length(p - (l.xy + t * lo)); \n}\n\n// use distance to l to return a brightness value \nfloat dist(in vec4 l,in vec2 p,in vec2 o,in vec2 s,in float w) {\n    l = l * s.xyxy * 0.423;\n    l += o.xyxy + vec4(0.28, 0.46, 0.28, 0.46) * s.x;\n    return w * length(s)/(ldist(l, p)/w); // 14.9250;\n}\n\n// brightness of p for digit x, offset o, scale s, intensity w\nfloat number(in vec2 p,in float x,in vec2 o,in vec2 s,in float w) {\n    float not1or7, not4;\n    return \n        notbetween(x, 0.5, 1.5) // not 1\n          * notbetween(x, 3.5, 4.5) // and not 4\n          * dist(l1, p, o, s, w)\n      + notbetween(x, 0.5, 3.5) // not 1,2,3\n          * notbetween(x, 6.5, 7.5) // and not 7\n          * dist(l2, p, o, s, w)\n      + notbetween(x, 4.5, 6.5) // not 4 or 5\n          * dist(l3, p, o, s, w)\n      + (not1or7 = (notbetween(x, 0.5, 1.5) * notbetween(x, 6.5, 7.5))) // not 1 or 7\n          * step(0.5, x) // not  0\n          * dist(l4, p, o, s, w)\n      + mod(x + 1.0, 2.0) // not even\n          * (not4 =  notbetween(x, 3.5, 4.5)) // not 4\n          * dist(l5, p, o, s, w)\n      + notbetween(x, 1.5, 2.5) // not 2\n          * dist(l6, p, o, s, w)\n      + not1or7 * not4 * dist(l7, p, o, s, w) // not 1, 7 or 4.\n      - (0.2 + not1or7*0.23) * (0.2 + not1or7*0.23);\n}\n\nvec3 brighten(vec3 c) {\n    return c / max(max(c.x, c.y), c.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float xp = iResolution.x / 60.0;\n    float yp = iResolution.y / 30.0;\n\n    vec2 s = vec2(1.0/(iResolution.x/xp), 1.0/(iResolution.y/yp));\n    vec2 p = fragCoord.xy/iResolution.xy;\n\n    float t2 = fract(iTime /45.0) * 2.0 * 3.14159;\n    vec2 cp = vec2(0.5, 0.5);\n    float st2 = sin(t2);\n    float ct2 = cos(t2);\n    p += vec2(st2 * s.x/s.y, ct2) * (cp.x - p.x) * .4;\n    p += (cp - p) * (st2 - 0.1);\n    p.x -= st2/3.0;\n    vec2 c = floor(p/s) * s;\n    float cc = step(0.5, c.x);\n    float t = floor(mod(fract(iTime/100.0) * (10.0 + cc * 90.0), 10.0));\n      \n    float n = number(\n      c, t,\n      vec2(0.018 + cc * .5, -0.14),\n      vec2(.5, 1.85),\n      0.165\n    );\n\n    float d = floor(mod(n,10.0));\n    float b = number(p, d, c, s, 0.15);\n    \n    float sd = 1.0 - 1.0 / (1.0 + (d + 0.001)/9.0);\n    vec3 col = brighten(vec3(b,b,b)) * \n      vec3(sin(sd * 3.14159),\n          cos((d + 1.7) /sd) / 1.5 + 0.12,\n      ((d * d + 19.0)/100.0) * sqrt(sd)\n    );\n    col *=  (1.0 - (1.0/(1.0 + b)));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dsGW4","date":"1370453225","viewed":602,"name":"LED digits","username":"Underspecified","description":"Uses a function taking a digit and returning illumination for pt, offset, scale. The smaller digits show the relative values of the fn on the big digits","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","number","digit","led"],"hasliked":0,"parentid":"","parentname":""}}