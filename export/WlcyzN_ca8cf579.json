{"ver":"0.1","info":{"id":"WlcyzN","date":"1608529366","viewed":65,"name":"yin-yang-colorful","username":"rrx","description":"Yin yang with cool color.  Not exact, but close.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["balance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rot( in vec2 p, in float an )\n{\n    float cc = cos(an);\n    float ss = sin(an);\n    return mat2(cc,-ss,ss,cc)*p;\n}\n\nfloat bump(float x)\n{\n    return smoothstep(-1., 0., x) - smoothstep(0., 1., x);\n}\n\nfloat smoothbump(float r, float dr, float d)\n{\n    return smoothstep(r-dr/2., r, d) - smoothstep(r, r+dr, d);\n}\n\nfloat circle(in vec2 uv, in vec2 uv0, in float r, in float w) \n{\n    return smoothbump(r, w, length(uv - uv0));\n}\n\nfloat unit(in float x) \n{\n    return clamp(0.,1.,x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize aspect\n    vec2 R = iResolution.xy;\n    vec2 uv0 = ( R - 2.*fragCoord ) / R.y;\n    \n    // rotate the frame\n    vec2 uv = uv0*1.5;\n    uv = rot(uv0, radians(iTime*5.)) * 1.5;\n    \n    float dr = 20./R.x;\n    \n    // double circles enclosing\n    float t = circle(uv, vec2(0.,0.), 1.+dr*2., dr)\n        + circle(uv, vec2(0.,0.), 1.1, dr);\n        \n    // positions and distances of the circles\n    vec2 uv1 = uv - vec2(.5,0.);\n    vec2 uv2 = uv - vec2(-.5,0.);\n    float d0 = length(uv);\n    float d1 = length(uv1);\n    float d2 = length(uv2);\n   \n    // use atan to determine if we are in the top or bottom half of the circle\n    float a1 = atan(uv1.y, uv1.x);\n    \n    float d3 = 10.;\n    if (a1 < 0.) {\n        // trace the enclosing circle in the top half\n        d3 = d0;\n    } \n    // the tail\n    float t7 = -smoothstep(1.-dr,1.+dr, d3); \n    \n    // add and substract the two circles\n    float t5 = 0.;\n    float t6 = 0.;\n    if (a1 >=0.)\n    {\n        t5 = 1. - smoothstep(.5-dr, .5+dr, d1) ;\n    }\n    else\n    {\n        t6 = smoothstep(.5-dr, .5+dr, d2) - 1.;\n    }\n\n    // left eye\n    float t4 = smoothstep( .1 - dr, .1 + dr, d1);\n\n    // right eye\n    float t2 = 1. - smoothstep( .1 - dr, .1 + dr, d2);\n\n    float h = t + t2 + t4 + t5 + t6 + t7;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv0.xyx+vec3(0,2,4));\n          \n    fragColor = vec4(col * clamp(0.,1.,h), 1.0);\n}","name":"Image","description":"","type":"image"}]}