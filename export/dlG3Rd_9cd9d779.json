{"ver":"0.1","info":{"id":"dlG3Rd","date":"1684443900","viewed":99,"name":"Fork BVH raycastin smarchevsky ","username":"kirill_ochnev","description":"bla","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["bla"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This code is based on Korolev's OpenGLRayCastingCore: https://github.com/KorolevSoftware/OpenGLRayCastingCore\n// I will update link to my version later (with indexed triangles and vertex array)\n\n// geometryData is ivec4 array (nodes + indices + vertices)\n\nstruct Node\n{\n    int leftChild;\n    int rightChild;\n    vec3 aabbMin;\n    vec3 aabbMax;\n};\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n    float tStart;\n    float tEnd;\n};\n\nstruct Hit\n{\n    vec3 position;\n    vec3 normal;\n    vec2 uv;\n    bool isHit;\n};\n\n\nstruct Vertex {\n    vec3 p;\n    vec3 n;\n    vec2 t;\n};\n\nstruct IndexedTriangle\n{\n   Vertex v0;\n   Vertex v1;\n   Vertex v2;\n};\n\nivec4 getData(int index) { \n    int SizeX = int(iChannelResolution[0].x);\n    int X = index % SizeX;\n    int Y = index / SizeX;\n    vec4 result = texelFetch(iChannel0, ivec2(index, 0), 0);\n    //return ivec4(unpack(result));\n    return floatBitsToInt(result);\n    //return geometryData[index]; \n}\n//{ return vec4(0); }\n\nNode getNode(int index)\n{\n    ivec4 data0 = getData(index + 0);\n    ivec4 data1 = getData(index + 1);\n\n\tNode node;\n\n    node.leftChild = data0.r;\n    node.rightChild = data0.g;\n    \n\tnode.aabbMin = intBitsToFloat(ivec3(data0.ba, data1.r));\n\tnode.aabbMax = intBitsToFloat(data1.gba);\n\treturn node;\n}\n\n\nIndexedTriangle getIndexedTriangle(int triIndex)\n{\n    ivec3 triIndices = getData(triIndex).rgb;\n\n    vec4 data0, data1;\n    IndexedTriangle triangle;\n\n    data0 = intBitsToFloat(getData(triIndices.r));\n    data1 = intBitsToFloat(getData(triIndices.r + 1));\n    triangle.v0.p = data0.rgb; triangle.v0.n = vec3(data0.a, data1.rg); triangle.v0.t = data1.ba;\n   \n    data0 = intBitsToFloat(getData(triIndices.g));\n    data1 = intBitsToFloat(getData(triIndices.g + 1));\n    triangle.v1.p = data0.rgb; triangle.v1.n = vec3(data0.a, data1.rg); triangle.v1.t = data1.ba;\n   \n    data0 = intBitsToFloat(getData(triIndices.b));\n    data1 = intBitsToFloat(getData(triIndices.b + 1));\n    triangle.v2.p = data0.rgb; triangle.v2.n = vec3(data0.a, data1.rg); triangle.v2.t = data1.ba;\n\n    return triangle;\n}\n\n//------------------- STACK -----------------------\n#define MAX_STACK_SIZE 16\nint countTI = 0;\nint _stack[MAX_STACK_SIZE];\nint _index = -1;\nvoid stackClear() { _index = -1; }\nint stackSize() { return _index + 1; }\nbool stackIsFull() {return _index >= MAX_STACK_SIZE;}\nvoid stackPush(in int node) { ++_index; if(stackIsFull()) return; _stack[_index] = node; }\nint stackPop() { return _stack[_index--]; }\n\n//------------------- RAY BB INTESECT -----------------------\n\nbool slabs(in Ray ray, in vec3 minB, in vec3 maxB, inout float localMin) {\n\n    if(all(greaterThan(ray.origin, minB)) && all(lessThan(ray.origin, maxB)))\n        return true;\n\n    vec3 t0 = (minB - ray.origin)/ray.direction;\n    vec3 t1 = (maxB - ray.origin)/ray.direction;\n    vec3 tmin = min(t0, t1), tmax = max(t0, t1);\n    float tminf = max(max(tmin.x, tmin.y), tmin.z);\n    float tmaxf = min(min(tmax.x, tmax.y), tmax.z);\n\n    if (tminf > tmaxf)\n        return false;\n\n    localMin = tminf;\n    return tminf < ray.tEnd && tminf > ray.tStart;\n}\n\n//------------------- RAY TRI INTERSECT -----------------------\n\nbool isect_tri(inout Ray ray, in IndexedTriangle tri, inout Hit hit) {\n\tvec3 e1 = tri.v1.p - tri.v0.p;\n\tvec3 e2 = tri.v2.p - tri.v0.p;\n    // if(dot(cross(e1,e2), ray.direction) > 0) return false; // backface culling\n\n\tvec3 P = cross(ray.direction, e2);\n\tfloat det = dot(e1, P);\n        // if (abs(det) < 1e-10) // small parts can disappear here\n        // return false;\n\n\tfloat inv_det = 1. / det;\n\tvec3 T = (ray.origin - tri.v0.p);\n\tfloat u = dot(T, P) * inv_det;\n\tif (u < 0.0 || u > 1.0)\n        return false;\n\n\tvec3 Q = cross(T, e1);\n\tfloat v = dot(ray.direction, Q) * inv_det;\n\tif (v < 0.0 || (v+u) > 1.0)\n        return false;\n\n\tfloat tt = dot(e2, Q) * inv_det;\n\n    if(ray.tEnd > tt && ray.tStart < tt )\n    {\n        vec3 c = vec3(u, v, 1.0 - u - v);\n        countTI++;\n        hit.position = (ray.origin + ray.direction * tt);\n        hit.normal = normalize(tri.v0.n * c.z + tri.v1.n * c.x + tri.v2.n * c.y);\n        hit.uv = tri.v0.t * c.z + tri.v1.t * c.x + tri.v2.t * c.y;\n\n        hit.isHit = true;\n        ray.tEnd = tt;\n        return true;\n    }\n    return false;\n}\n\n//------------------- TRACE -----------------------\n\nbool traceRay(inout Ray ray, inout Hit hit) {\n\tstackClear();\n    stackPush(0);\n    hit.isHit = false;\n    Node select;\n    IndexedTriangle try;\n    float tempt;\n\n    for(int i = 0; (i < 64) && (stackSize() > 0 && !stackIsFull()); i++)\n    {\n        select = getNode(stackPop());\n        if(!slabs(ray, select.aabbMin, select.aabbMax, tempt))\n            continue;\n        \n        if(select.leftChild > 0 && select.rightChild > 0)\n        {\n            float leftMinT = 0.;\n            float rightMinT = 0.;\n            Node right = getNode(select.rightChild);\n            Node left = getNode(select.leftChild);\n            bool rightI = slabs(ray, right.aabbMin, right.aabbMax,  rightMinT);\n            bool leftI = slabs(ray, left.aabbMin, left.aabbMax,  leftMinT);\n\n            if(rightI && leftI)\n            {\n                if (rightMinT < leftMinT)\n                {\n                    stackPush(select.leftChild);\n                    stackPush(select.rightChild);\n                }\n                else\n                {\n                    stackPush(select.rightChild);\n                    stackPush(select.leftChild);\n                }\n                continue;\n            }\n            if(rightI)\n                stackPush(select.rightChild);\n            else\n                stackPush(select.leftChild);\n            continue;\n        }\n\n        if (select.rightChild > 0)\n            stackPush(select.rightChild);\n\n        if (select.leftChild > 0)\n            stackPush(select.leftChild);\n\t\t\n        if(select.rightChild <= 0)\n        {\n            try = getIndexedTriangle(-select.rightChild);\n            isect_tri(ray, try, hit);\n        }\n\n        if(select.leftChild <= 0)\n        {\n            try = getIndexedTriangle(-select.leftChild);\n            isect_tri(ray, try, hit);\n        }\n    }\n\t\n\treturn hit.isHit;\n}\n\nvoid traceCloseHitV2(inout Ray ray, inout Hit hit)\n{\n    stackClear();\n    stackPush(0);\n    hit.isHit = false;\n    Node select;\n    IndexedTriangle try;\n    float tempt;\n\n    for(int i = 0; (i < 64) && (stackSize() > 0 && !stackIsFull()); i++)\n    {\n        select = getNode(stackPop());\n        if(!slabs(ray, select.aabbMin, select.aabbMax, tempt))\n            continue;\n        \n        if(select.leftChild > 0 && select.rightChild > 0)\n        {\n            float leftMinT = 0.;\n            float rightMinT = 0.;\n            Node right = getNode(select.rightChild);\n            Node left = getNode(select.leftChild);\n            bool rightI = slabs(ray, right.aabbMin, right.aabbMax,  rightMinT);\n            bool leftI = slabs(ray, left.aabbMin, left.aabbMax,  leftMinT);\n\n            if(rightI && leftI)\n            {\n                if (rightMinT < leftMinT)\n                {\n                    stackPush(select.leftChild);\n                    stackPush(select.rightChild);\n                }\n                else\n                {\n                    stackPush(select.rightChild);\n                    stackPush(select.leftChild);\n                }\n                continue;\n            }\n            if(rightI)\n                stackPush(select.rightChild);\n            else\n                stackPush(select.leftChild);\n            continue;\n        }\n\n        if (select.rightChild > 0)\n            stackPush(select.rightChild);\n\n        if (select.leftChild > 0)\n            stackPush(select.leftChild);\n\t\t\n        if(select.rightChild <= 0)\n        {\n            try = getIndexedTriangle(-select.rightChild);\n            isect_tri(ray, try, hit);\n        }\n\n        if(select.leftChild <= 0)\n        {\n            try = getIndexedTriangle(-select.leftChild);\n            isect_tri(ray, try, hit);\n        }\n    }\n}\n\n\nmat3 setCamera( in vec3 rayOrigin, in vec3 target, float cameraRotation )\n{\n\tvec3 cw = normalize(target - rayOrigin);\n\tvec3 cp = vec3(sin(cameraRotation), cos(cameraRotation),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec2 hash2(vec3 p3) {\n\tp3 = fract(p3 * vec3(5.3983, 5.4427, 6.9371));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec3 getMissColor(vec3 dir) {\n\treturn textureLod(iChannel1, dir, 0.0).xyz;\n}\n\nvec3 getNewRayDirection(vec3 incoming, vec3 n, uvec3 state) {\n    return reflect(incoming, n);\n}\n\nvec3 getRayColor(inout Ray prevRay, vec2 fragCoord) {\n    const int maxBounds = 128;\n    uvec3 state = uvec3(uvec2(fragCoord.xy), uint(iFrame));\n    Hit hit;\n   \n    vec3 result = vec3(0);\n\n    Ray ray = prevRay;\n    vec3 col = vec3(1);\n    bool wasHit = false;\n    for(int i = 0; i < maxBounds; ++i) {\n        traceCloseHitV2(ray, hit);\n        if (!hit.isHit) {\n            break;\n        }\n        wasHit = true;\n        vec3 outCome = getNewRayDirection(ray.direction, hit.normal, state);\n        col *= hit.normal * max(0.0, dot(outCome, hit.normal)) + 0.65;\n        ray.direction = outCome;\n        ray.origin = hit.position + ray.direction * 0.001;\n    }\n    result += col * getMissColor(ray.direction);\n    \n    return result;\n}\n\n// mesh is so lo poly, because error C1068: too much data in type constructor\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec3 target = vec3(0, 0, 0); // target pos\n    vec3 lightDir = normalize(vec3(-1, -1, 1)); // target pos\n    \n    vec2 mo = iMouse.xy / iResolution.xy;\n\tfloat time = iTime * 1.0;\n    \n    vec2 p = -1.0 + 2.0 * fragCoord / iResolution.xy;\n    p.y *= iResolution.y / iResolution.x;\n\n    Ray ray;\n    ray.origin = target + vec3( 4.5 * cos(0.1 * time + 7.0 * mo.x), \n                                    2.2,     4.5 * sin(0.1 * time + 7.0 * mo.x));\n    \n    ray.tStart = 0.0001;\n    ray.tEnd = 10000.;\n\n\n    mat3 cameraMatrix = setCamera( ray.origin, target, 0. );\n    ray.direction = cameraMatrix * normalize( vec3(p.xy,2.0) );\n\n    fragColor = vec4(getRayColor(ray, fragCoord.xy), 1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265358979f\n\n\n\nvec3 random(inout uvec3 v) {\n\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    \n    return vec3(v)*(1.0/float(0xffffffffU));\n\n}\n\nvec3 randomNormal(vec3 n, inout uvec3 state) {\n\n    vec2 rv2 = random(state).xy;\n\n    vec3  uu = normalize( cross( n, vec3(0.0,1.0,1.0) ) );\n\tvec3  vv = cross( uu, n );\n\t\n\tfloat ra = sqrt(rv2.y);\n\tfloat rx = ra*cos(6.2831*rv2.x); \n\tfloat ry = ra*sin(6.2831*rv2.x);\n\tfloat rz = sqrt( 1.0-rv2.y );\n\tvec3  rr = vec3( rx*uu + ry*vv + rz*n );\n\n    return normalize( rr );\n\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n#define IVEC4 ivec4\nIVEC4 geometryData[746] = IVEC4[](\n\n///// NODES /////\nIVEC4(2, 160, -1084620808, -1082392576), \nIVEC4(-1079508992, 1062019650, 1063649288, 1067974656), \nIVEC4(4, 70, -1084620808, -1082392576), \nIVEC4(-1079508992, 1062019650, 1063649288, 0), \nIVEC4(6, 26, -1085014016, -1082392576), \nIVEC4(-1079508992, 1061908015, 1049100288, 0), \nIVEC4(8, 16, -1085014016, -1089339400), \nIVEC4(-1079508992, 1058013184, 1049100288, 0), \nIVEC4(10, 12, -1089994752, -1140851762), \nIVEC4(-1079508992, -1103626206, 1049100288, -1088159744), \nIVEC4(-387, -394, -1089994752, -1140851762), \nIVEC4(-1079508992, -1098121199, 1035993088, -1088159744), \nIVEC4(-354, 14, -1089994752, -1140851762), \nIVEC4(-1079508992, -1103626206, 1049100288, -1088159744), \nIVEC4(-350, -356, -1092878319, -1140851762), \nIVEC4(-1080360956, -1103626206, 1033895936, -1088159744), \nIVEC4(18, 22, -1085014016, -1089339400), \nIVEC4(-1085931512, 1058013184, 1049100288, 0), \nIVEC4(20, -341, -1085014016, -1094451217), \nIVEC4(-1085931512, -1103626206, 1049100288, 0), \nIVEC4(-379, -383, -1085014016, -1094451217), \nIVEC4(-1085931512, -1103626206, 1049100288, 0), \nIVEC4(-390, 24, -1095499793, -1089339400), \nIVEC4(-1085931512, 1058013184, 1042808798, 0), \nIVEC4(-378, -395, -1095499793, -1089339400), \nIVEC4(-1086849024, 1058013184, 1006631886, 0), \nIVEC4(28, 50, 1050935279, -1082392576), \nIVEC4(-1085014016, 1061908015, 1048870172, 0), \nIVEC4(30, 44, 1050935279, -1082392576), \nIVEC4(-1096286208, 1061158912, -1105723358, 0), \nIVEC4(32, 34, 1050935279, -1082392576), \nIVEC4(-1096286208, 1060896768, -1089339400, 0), \nIVEC4(-318, -369, 1050935279, -1082392576), \nIVEC4(-1096286208, 1060503560, -1089339400, 0), \nIVEC4(36, 38, 1057357832, -1082392576), \nIVEC4(-1096286208, 1060896768, -1086849024, 0), \nIVEC4(-325, -331, 1057357832, -1083047944), \nIVEC4(-1096286208, 1060896768, -1086849024, -1111490560), \nIVEC4(40, 42, 1058275328, -1082392576), \nIVEC4(-1108344765, 1060896768, -1086062592, 0), \nIVEC4(-323, -332, 1058275328, -1082392576), \nIVEC4(-1108344765, 1060503560, -1084956336, 0), \nIVEC4(-370, -371, 1059192824, -1084882936), \nIVEC4(-1108344765, 1060896768, -1086062592, 0), \nIVEC4(-328, 46, 1050935279, -1083047944), \nIVEC4(-1096286208, 1061158912, -1105723358, 0), \nIVEC4(-333, 48, 1057357832, -1083047944), \nIVEC4(-1096286208, 1061158912, -1105723358, 0), \nIVEC4(-327, -339, 1057357832, -1083047944), \nIVEC4(-1096286208, 1061158912, -1105723358, 0), \nIVEC4(52, 60, 1052770304, -1083047944), \nIVEC4(-1085014016, 1061908015, 1048870172, 0), \nIVEC4(54, 56, 1052770304, -1103101952), \nIVEC4(-1085014016, 1061253754, 1048870172, -1110442051), \nIVEC4(-326, -376, 1052770304, -1103101952), \nIVEC4(-1085014016, 1059981084, 1048870172, -1102053376), \nIVEC4(-367, 58, 1058013184, -1103101952), \nIVEC4(-1090039161, 1061253754, 1048870172, -1110442051), \nIVEC4(-324, -365, 1058013184, -1103101952), \nIVEC4(-1094713344, 1061253754, 1048480303, -1110442051), \nIVEC4(62, 66, 1057357832, -1083047944), \nIVEC4(-1096286208, 1061908015, 1048480303, 0), \nIVEC4(-391, 64, 1057357832, -1083047944), \nIVEC4(-1096286208, 1061158912, -1105723358, 0), \nIVEC4(-319, -368, 1060896768, -1086849024), \nIVEC4(-1109393408, 1061158912, -1105723358, 0), \nIVEC4(68, -366, 1061027848, -1096286208), \nIVEC4(-1102908813, 1061908015, 1048480303, 0), \nIVEC4(-329, -357, 1061027848, -1096286208), \nIVEC4(-1110442051, 1061908015, -1106247680, 0), \nIVEC4(72, 118, -1084620808, -1106247680), \nIVEC4(-1079508992, 1062019650, 1063649288, 0), \nIVEC4(74, 100, -1084620808, 1006631886), \nIVEC4(-1079508992, 1052770304, 1063649288, 0), \nIVEC4(76, 90, -1089732608, 1006631886), \nIVEC4(-1079508992, 1052770304, 1058996547, -1086849024), \nIVEC4(78, 84, -1089732608, 1029701766), \nIVEC4(-1079508992, -1101529054, 1055916032, -1085931512), \nIVEC4(80, 82, -1089732608, 1029701766), \nIVEC4(-1079508992, -1094189056, 1055916032, -1080688640), \nIVEC4(-389, -397, -1089732608, 1029701766), \nIVEC4(-1079508992, -1093664768, 1055916032, -1080688640), \nIVEC4(-352, -363, -1089732608, 1033895936), \nIVEC4(-1080033280, -1094189056, 1055916032, -1080688640), \nIVEC4(86, -388, -1089732608, 1029701766), \nIVEC4(-1079508992, -1101529054, 1055916032, -1085931512), \nIVEC4(-392, 88, -1089732608, 1029701766), \nIVEC4(-1079508992, -1096587627, 1055916032, -1085931512), \nIVEC4(-351, -393, -1089732608, 1048051746), \nIVEC4(-1080033280, -1096587627, 1055916032, -1085931512), \nIVEC4(92, 96, -1092616192, 1006631886), \nIVEC4(-1080557568, 1052770304, 1058996547, -1086849024), \nIVEC4(94, -353, -1096587627, 1006631886), \nIVEC4(-1083965440, 1052770304, 1049886703, -1086849024), \nIVEC4(-361, -396, -1096587627, 1006631886), \nIVEC4(-1083965440, -1103626206, 1049886703, -1086849024), \nIVEC4(-355, 98, -1092616192, 1048051746), \nIVEC4(-1080557568, 1041675732, 1058996547, -1086707710), \nIVEC4(-349, -386, -1092616192, 1049100288), \nIVEC4(-1084751872, 1041675732, 1058996547, -1086707710), \nIVEC4(102, 112, -1084620808, 1032847293), \nIVEC4(-1085931512, 1049886703, 1063649288, 0), \nIVEC4(104, 108, -1084620808, 1032847293), \nIVEC4(-1085931512, -1095078181, 1063649288, 0), \nIVEC4(106, -381, -1085014016, 1032847293), \nIVEC4(-1085931512, -1095078181, 1063125000, 0), \nIVEC4(-344, -346, -1085014016, 1032847293), \nIVEC4(-1085931512, -1095078181, 1058736215, 0), \nIVEC4(-343, 110, -1084620808, 1032847293), \nIVEC4(-1090931592, -1094451217, 1063649288, 0), \nIVEC4(-345, -382, -1084620808, 1055175821), \nIVEC4(-1090931592, -1094451217, 1063649288, 0), \nIVEC4(114, 116, -1089732608, 1058736215), \nIVEC4(-1086707710, 1049886703, 1063649288, 0), \nIVEC4(-342, -380, -1094451217, 1058736215), \nIVEC4(-1086707710, 1047527424, 1063125000, -1092091904), \nIVEC4(-348, -385, -1089732608, 1062862840), \nIVEC4(-1092091904, 1049886703, 1063649288, 0), \nIVEC4(120, 140, -1101529054, -1106247680), \nIVEC4(-1084751872, 1062019650, 1063649288, 0), \nIVEC4(122, 130, -1101529054, 1041760290), \nIVEC4(-1084751872, 1061134115, 1062862840, -1096206147), \nIVEC4(124, 128, -1101529054, 1041760290), \nIVEC4(-1084751872, 1058492157, 1062862840, -1095707495), \nIVEC4(-384, 126, -1101529054, 1041760290), \nIVEC4(-1084751872, 1056291741, 1058996547, -1086707710), \nIVEC4(-347, -377, 1041675732, 1041760290), \nIVEC4(-1085014016, 1056291741, 1058996547, -1086707710), \nIVEC4(-338, -375, 1041675732, 1054828835), \nIVEC4(-1086601409, 1058492157, 1062862840, -1095707495), \nIVEC4(132, 136, 1055129583, 1041760290), \nIVEC4(-1085014016, 1061134115, 1061185839, -1096206147), \nIVEC4(134, -334, 1055129583, 1041760290), \nIVEC4(-1085014016, 1061134115, 1056837806, -1095885199), \nIVEC4(-320, -340, 1055129583, 1041760290), \nIVEC4(-1085014016, 1059981084, 1056837806, -1090039161), \nIVEC4(-373, 138, 1056291741, 1053739524), \nIVEC4(-1086323578, 1061134115, 1061185839, -1096206147), \nIVEC4(-321, -336, 1058492157, 1053739524), \nIVEC4(-1086323578, 1061134115, 1061185839, -1096206147), \nIVEC4(142, 152, 1047527424, -1106247680), \nIVEC4(-1089470464, 1062019650, 1063649288, 0), \nIVEC4(144, 150, 1059213879, -1106247680), \nIVEC4(-1089470464, 1062019650, 1055391744, 0), \nIVEC4(146, 148, 1059213879, 1032403301), \nIVEC4(-1089470464, 1062019650, 1055391744, -1106247680), \nIVEC4(-358, -362, 1059213879, 1032403301), \nIVEC4(-1089470464, 1062019650, 1055391744, -1095499793), \nIVEC4(-359, -360, 1059646027, 1032403301), \nIVEC4(-1095489626, 1062019650, 1055391744, -1106247680), \nIVEC4(-322, -364, 1061027848, -1106247680), \nIVEC4(-1095885199, 1061253754, 1054605329, 0), \nIVEC4(154, 156, 1047527424, 1053739524), \nIVEC4(-1092091904, 1061134115, 1063649288, 0), \nIVEC4(-337, -374, 1047527424, 1053818880), \nIVEC4(-1092091904, 1058668536, 1063649288, 0), \nIVEC4(158, -335, 1058492157, 1053739524), \nIVEC4(-1095707495, 1061134115, 1061185839, 0), \nIVEC4(-330, -372, 1058492157, 1053739524), \nIVEC4(-1095707495, 1061134115, 1061185839, 0), \nIVEC4(162, 228, -1084620808, -1082392576), \nIVEC4(0, 1062019650, 1063649288, 1067974656), \nIVEC4(164, 184, -1085014016, -1082392576), \nIVEC4(0, 1061908015, 1049100288, 1067974656), \nIVEC4(166, 176, -1085014016, -1089339400), \nIVEC4(0, 1058013184, 1049100288, 1067974656), \nIVEC4(168, 172, -1085014016, -1089339400), \nIVEC4(0, 1058013184, 1049100288, 1061552136), \nIVEC4(-421, 170, -1085014016, -1094451217), \nIVEC4(0, -1103626206, 1049100288, 1061552136), \nIVEC4(-459, -463, -1085014016, -1094451217), \nIVEC4(0, -1103626206, 1049100288, 1061552136), \nIVEC4(174, -470, -1095499793, -1089339400), \nIVEC4(0, 1058013184, 1042808798, 1061552136), \nIVEC4(-458, -475, -1095499793, -1089339400), \nIVEC4(0, 1058013184, 1006631886, 1060634624), \nIVEC4(178, 182, -1089994752, -1140851762), \nIVEC4(1059323904, -1103626206, 1049100288, 1067974656), \nIVEC4(-434, 180, -1089994752, -1140851762), \nIVEC4(1059323904, -1103626206, 1049100288, 1067974656), \nIVEC4(-430, -436, -1092878319, -1140851762), \nIVEC4(1059323904, -1103626206, 1033895936, 1067122692), \nIVEC4(-467, -474, -1089994752, -1140851762), \nIVEC4(1059323904, -1098121199, 1035993088, 1067974656), \nIVEC4(186, 208, 1050935279, -1082392576), \nIVEC4(0, 1061908015, 1048870172, 1062469632), \nIVEC4(188, 202, 1050935279, -1082392576), \nIVEC4(0, 1061158912, -1105723358, 1051197440), \nIVEC4(190, 192, 1050935279, -1082392576), \nIVEC4(0, 1060896768, -1089339400, 1051197440), \nIVEC4(-398, -449, 1050935279, -1082392576), \nIVEC4(0, 1060503560, -1089339400, 1051197440), \nIVEC4(194, 200, 1057357832, -1082392576), \nIVEC4(0, 1060896768, -1086849024, 1051197440), \nIVEC4(196, 198, 1058275328, -1082392576), \nIVEC4(0, 1060896768, -1086062592, 1039138883), \nIVEC4(-403, -412, 1058275328, -1082392576), \nIVEC4(0, 1060503560, -1084956336, 1039138883), \nIVEC4(-450, -451, 1059192824, -1084882936), \nIVEC4(0, 1060896768, -1086062592, 1039138883), \nIVEC4(-405, -411, 1057357832, -1083047944), \nIVEC4(1035993088, 1060896768, -1086849024, 1051197440), \nIVEC4(-408, 204, 1050935279, -1083047944), \nIVEC4(0, 1061158912, -1105723358, 1051197440), \nIVEC4(-413, 206, 1057357832, -1083047944), \nIVEC4(0, 1061158912, -1105723358, 1051197440), \nIVEC4(-407, -419, 1057357832, -1083047944), \nIVEC4(0, 1061158912, -1105723358, 1051197440), \nIVEC4(210, 220, 1052770304, -1083047944), \nIVEC4(0, 1061908015, 1048870172, 1062469632), \nIVEC4(212, 216, 1057357832, -1083047944), \nIVEC4(0, 1061908015, 1048480303, 1051197440), \nIVEC4(214, -471, 1057357832, -1083047944), \nIVEC4(0, 1061158912, -1105723358, 1051197440), \nIVEC4(-399, -448, 1060896768, -1086849024), \nIVEC4(0, 1061158912, -1105723358, 1038090240), \nIVEC4(218, -446, 1061027848, -1096286208), \nIVEC4(0, 1061908015, 1048480303, 1044574835), \nIVEC4(-409, -437, 1061027848, -1096286208), \nIVEC4(0, 1061908015, -1106247680, 1037041597), \nIVEC4(222, 226, 1052770304, -1103101952), \nIVEC4(1037041597, 1061253754, 1048870172, 1062469632), \nIVEC4(224, -447, 1058013184, -1103101952), \nIVEC4(1037041597, 1061253754, 1048870172, 1057444487), \nIVEC4(-404, -445, 1058013184, -1103101952), \nIVEC4(1037041597, 1061253754, 1048480303, 1052770304), \nIVEC4(-406, -456, 1052770304, -1103101952), \nIVEC4(1045430272, 1059981084, 1048870172, 1062469632), \nIVEC4(230, 276, -1084620808, -1106247680), \nIVEC4(0, 1062019650, 1063649288, 1067974656), \nIVEC4(232, 250, -1084620808, 1006631886), \nIVEC4(0, 1052770304, 1063649288, 1067974656), \nIVEC4(234, 244, -1084620808, 1032847293), \nIVEC4(0, 1049886703, 1063649288, 1061552136), \nIVEC4(236, 240, -1084620808, 1032847293), \nIVEC4(0, -1095078181, 1063649288, 1061552136), \nIVEC4(-423, 238, -1084620808, 1032847293), \nIVEC4(0, -1094451217, 1063649288, 1056552056), \nIVEC4(-425, -462, -1084620808, 1055175821), \nIVEC4(0, -1094451217, 1063649288, 1056552056), \nIVEC4(242, -461, -1085014016, 1032847293), \nIVEC4(0, -1095078181, 1063125000, 1061552136), \nIVEC4(-424, -426, -1085014016, 1032847293), \nIVEC4(0, -1095078181, 1058736215, 1061552136), \nIVEC4(246, 248, -1089732608, 1058736215), \nIVEC4(0, 1049886703, 1063649288, 1060775938), \nIVEC4(-428, -465, -1089732608, 1062862840), \nIVEC4(0, 1049886703, 1063649288, 1055391744), \nIVEC4(-422, -460, -1094451217, 1058736215), \nIVEC4(1055391744, 1047527424, 1063125000, 1060775938), \nIVEC4(252, 266, -1089732608, 1006631886), \nIVEC4(1060634624, 1052770304, 1058996547, 1067974656), \nIVEC4(254, 260, -1089732608, 1029701766), \nIVEC4(1061552136, -1101529054, 1055916032, 1067974656), \nIVEC4(-468, 256, -1089732608, 1029701766), \nIVEC4(1061552136, -1101529054, 1055916032, 1067974656), \nIVEC4(-472, 258, -1089732608, 1029701766), \nIVEC4(1061552136, -1096587627, 1055916032, 1067974656), \nIVEC4(-431, -473, -1089732608, 1048051746), \nIVEC4(1061552136, -1096587627, 1055916032, 1067450368), \nIVEC4(262, 264, -1089732608, 1029701766), \nIVEC4(1066795008, -1094189056, 1055916032, 1067974656), \nIVEC4(-469, -477, -1089732608, 1029701766), \nIVEC4(1066795008, -1093664768, 1055916032, 1067974656), \nIVEC4(-432, -443, -1089732608, 1033895936), \nIVEC4(1066795008, -1094189056, 1055916032, 1067450368), \nIVEC4(268, 272, -1092616192, 1006631886), \nIVEC4(1060634624, 1052770304, 1058996547, 1066926080), \nIVEC4(270, -433, -1096587627, 1006631886), \nIVEC4(1060634624, 1052770304, 1049886703, 1063518208), \nIVEC4(-441, -476, -1096587627, 1006631886), \nIVEC4(1060634624, -1103626206, 1049886703, 1063518208), \nIVEC4(274, -435, -1092616192, 1048051746), \nIVEC4(1060775938, 1041675732, 1058996547, 1066926080), \nIVEC4(-429, -466, -1092616192, 1049100288), \nIVEC4(1060775938, 1041675732, 1058996547, 1062731776), \nIVEC4(278, 298, -1101529054, -1106247680), \nIVEC4(0, 1062019650, 1063649288, 1062731776), \nIVEC4(280, 290, 1047527424, -1106247680), \nIVEC4(0, 1062019650, 1063649288, 1058013184), \nIVEC4(282, 284, 1059213879, -1106247680), \nIVEC4(0, 1062019650, 1055391744, 1058013184), \nIVEC4(-402, -444, 1061027848, -1106247680), \nIVEC4(0, 1061253754, 1054605329, 1051598449), \nIVEC4(286, 288, 1059213879, 1032403301), \nIVEC4(1041235968, 1062019650, 1055391744, 1058013184), \nIVEC4(-439, -440, 1059646027, 1032403301), \nIVEC4(1041235968, 1062019650, 1055391744, 1051994022), \nIVEC4(-438, -442, 1059213879, 1032403301), \nIVEC4(1051983855, 1062019650, 1055391744, 1058013184), \nIVEC4(292, 294, 1047527424, 1053739524), \nIVEC4(0, 1061134115, 1063649288, 1055391744), \nIVEC4(-417, -454, 1047527424, 1053818880), \nIVEC4(0, 1058668536, 1063649288, 1055391744), \nIVEC4(296, -415, 1058492157, 1053739524), \nIVEC4(0, 1061134115, 1061185839, 1051776153), \nIVEC4(-410, -452, 1058492157, 1053739524), \nIVEC4(0, 1061134115, 1061185839, 1051776153), \nIVEC4(300, 308, -1101529054, 1041760290), \nIVEC4(1051277501, 1061134115, 1062862840, 1062731776), \nIVEC4(302, 306, -1101529054, 1041760290), \nIVEC4(1051776153, 1058492157, 1062862840, 1062731776), \nIVEC4(-464, 304, -1101529054, 1041760290), \nIVEC4(1060775938, 1056291741, 1058996547, 1062731776), \nIVEC4(-427, -457, 1041675732, 1041760290), \nIVEC4(1060775938, 1056291741, 1058996547, 1062469632), \nIVEC4(-418, -455, 1041675732, 1054828835), \nIVEC4(1051776153, 1058492157, 1062862840, 1060882239), \nIVEC4(310, 314, 1055129583, 1041760290), \nIVEC4(1051277501, 1061134115, 1061185839, 1062469632), \nIVEC4(-414, 312, 1055129583, 1041760290), \nIVEC4(1051598449, 1061134115, 1056837806, 1062469632), \nIVEC4(-400, -420, 1055129583, 1041760290), \nIVEC4(1057444487, 1059981084, 1056837806, 1062469632), \nIVEC4(-453, 316, 1056291741, 1053739524), \nIVEC4(1051277501, 1061134115, 1061185839, 1061160070), \nIVEC4(-401, -416, 1058492157, 1053739524), \nIVEC4(1051277501, 1061134115, 1061185839, 1061160070), \n\n///// INDICES /////\nIVEC4(478, 480, 482, 0), \nIVEC4(484, 486, 488, 0), \nIVEC4(490, 492, 494, 0), \nIVEC4(496, 490, 498, 0), \nIVEC4(500, 502, 496, 0), \nIVEC4(478, 504, 480, 0), \nIVEC4(506, 508, 510, 0), \nIVEC4(488, 478, 482, 0), \nIVEC4(492, 508, 494, 0), \nIVEC4(512, 488, 486, 0), \nIVEC4(514, 516, 518, 0), \nIVEC4(520, 522, 524, 0), \nIVEC4(496, 498, 500, 0), \nIVEC4(526, 528, 530, 0), \nIVEC4(530, 532, 534, 0), \nIVEC4(536, 528, 526, 0), \nIVEC4(496, 492, 490, 0), \nIVEC4(538, 500, 498, 0), \nIVEC4(490, 538, 498, 0), \nIVEC4(540, 542, 544, 0), \nIVEC4(546, 548, 540, 0), \nIVEC4(482, 484, 488, 0), \nIVEC4(494, 550, 490, 0), \nIVEC4(552, 554, 556, 0), \nIVEC4(558, 560, 548, 0), \nIVEC4(562, 556, 564, 0), \nIVEC4(562, 566, 568, 0), \nIVEC4(570, 562, 564, 0), \nIVEC4(568, 556, 562, 0), \nIVEC4(572, 558, 546, 0), \nIVEC4(560, 542, 548, 0), \nIVEC4(574, 566, 558, 0), \nIVEC4(576, 578, 580, 0), \nIVEC4(582, 584, 586, 0), \nIVEC4(576, 586, 584, 0), \nIVEC4(572, 588, 574, 0), \nIVEC4(582, 590, 592, 0), \nIVEC4(594, 584, 596, 0), \nIVEC4(592, 576, 580, 0), \nIVEC4(522, 598, 524, 0), \nIVEC4(600, 602, 604, 0), \nIVEC4(602, 606, 604, 0), \nIVEC4(602, 608, 606, 0), \nIVEC4(596, 610, 594, 0), \nIVEC4(600, 608, 602, 0), \nIVEC4(612, 576, 584, 0), \nIVEC4(502, 500, 614, 0), \nIVEC4(510, 502, 506, 0), \nIVEC4(502, 614, 506, 0), \nIVEC4(492, 510, 508, 0), \nIVEC4(616, 486, 484, 0), \nIVEC4(514, 618, 516, 0), \nIVEC4(530, 528, 532, 0), \nIVEC4(536, 532, 528, 0), \nIVEC4(538, 620, 500, 0), \nIVEC4(490, 550, 538, 0), \nIVEC4(540, 548, 542, 0), \nIVEC4(546, 558, 548, 0), \nIVEC4(622, 572, 624, 0), \nIVEC4(624, 572, 546, 0), \nIVEC4(554, 626, 518, 0), \nIVEC4(552, 626, 554, 0), \nIVEC4(558, 566, 560, 0), \nIVEC4(562, 560, 566, 0), \nIVEC4(570, 560, 562, 0), \nIVEC4(568, 552, 556, 0), \nIVEC4(572, 574, 558, 0), \nIVEC4(560, 570, 542, 0), \nIVEC4(574, 568, 566, 0), \nIVEC4(576, 628, 578, 0), \nIVEC4(582, 596, 584, 0), \nIVEC4(576, 590, 586, 0), \nIVEC4(572, 622, 588, 0), \nIVEC4(630, 484, 482, 0), \nIVEC4(582, 586, 590, 0), \nIVEC4(594, 612, 584, 0), \nIVEC4(592, 590, 576, 0), \nIVEC4(554, 518, 516, 0), \nIVEC4(596, 632, 610, 0), \nIVEC4(612, 628, 576, 0), \nIVEC4(634, 636, 480, 0), \nIVEC4(638, 640, 486, 0), \nIVEC4(642, 644, 646, 0), \nIVEC4(648, 650, 642, 0), \nIVEC4(500, 648, 652, 0), \nIVEC4(634, 480, 504, 0), \nIVEC4(654, 656, 658, 0), \nIVEC4(640, 636, 634, 0), \nIVEC4(646, 644, 658, 0), \nIVEC4(512, 486, 640, 0), \nIVEC4(660, 662, 516, 0), \nIVEC4(520, 664, 522, 0), \nIVEC4(648, 500, 650, 0), \nIVEC4(666, 668, 670, 0), \nIVEC4(668, 534, 532, 0), \nIVEC4(536, 666, 670, 0), \nIVEC4(648, 642, 646, 0), \nIVEC4(672, 650, 500, 0), \nIVEC4(642, 650, 672, 0), \nIVEC4(674, 544, 542, 0), \nIVEC4(676, 674, 678, 0), \nIVEC4(636, 640, 638, 0), \nIVEC4(644, 642, 680, 0), \nIVEC4(682, 556, 554, 0), \nIVEC4(684, 678, 686, 0), \nIVEC4(688, 564, 556, 0), \nIVEC4(688, 690, 692, 0), \nIVEC4(570, 564, 688, 0), \nIVEC4(690, 688, 556, 0), \nIVEC4(694, 676, 684, 0), \nIVEC4(686, 678, 542, 0), \nIVEC4(696, 684, 692, 0), \nIVEC4(698, 700, 702, 0), \nIVEC4(704, 706, 708, 0), \nIVEC4(698, 708, 706, 0), \nIVEC4(694, 696, 710, 0), \nIVEC4(704, 712, 714, 0), \nIVEC4(716, 718, 708, 0), \nIVEC4(712, 700, 698, 0), \nIVEC4(522, 664, 598, 0), \nIVEC4(720, 722, 724, 0), \nIVEC4(724, 722, 726, 0), \nIVEC4(724, 726, 728, 0), \nIVEC4(718, 716, 730, 0), \nIVEC4(720, 724, 728, 0), \nIVEC4(732, 708, 698, 0), \nIVEC4(652, 614, 500, 0), \nIVEC4(656, 654, 652, 0), \nIVEC4(652, 654, 614, 0), \nIVEC4(646, 658, 656, 0), \nIVEC4(616, 638, 486, 0), \nIVEC4(660, 516, 618, 0), \nIVEC4(668, 532, 670, 0), \nIVEC4(536, 670, 532, 0), \nIVEC4(672, 500, 620, 0), \nIVEC4(642, 672, 680, 0), \nIVEC4(674, 542, 678, 0), \nIVEC4(676, 678, 684, 0), \nIVEC4(734, 736, 694, 0), \nIVEC4(736, 676, 694, 0), \nIVEC4(554, 662, 738, 0), \nIVEC4(682, 554, 738, 0), \nIVEC4(684, 686, 692, 0), \nIVEC4(688, 692, 686, 0), \nIVEC4(570, 688, 686, 0), \nIVEC4(690, 556, 682, 0), \nIVEC4(694, 684, 696, 0), \nIVEC4(686, 542, 570, 0), \nIVEC4(696, 692, 690, 0), \nIVEC4(698, 702, 740, 0), \nIVEC4(704, 708, 718, 0), \nIVEC4(698, 706, 714, 0), \nIVEC4(694, 710, 734, 0), \nIVEC4(742, 636, 638, 0), \nIVEC4(704, 714, 706, 0), \nIVEC4(716, 708, 732, 0), \nIVEC4(712, 698, 714, 0), \nIVEC4(554, 516, 662, 0), \nIVEC4(718, 730, 744, 0), \nIVEC4(732, 698, 740, 0), \n\n///// VERTICES /////\nIVEC4(1060503560, -1084882936, -1108344765, 1061477679), \nIVEC4(-1092371245, -1091891416, 1063816759, 1053684260), \nIVEC4(1058275328, -1082392576, 0, -1115121150), \nIVEC4(-1082167342, -2147483648, 1063518913, 1051542212), \nIVEC4(1057357832, -1083047944, -1096286208, -1104967578), \nIVEC4(-1088485641, -1086036168, 1065088774, 1052267357), \nIVEC4(1061027848, -1105723358, -1110442051, 1063549665), \nIVEC4(-1104309912, -1093270503, 1064126500, 1058623891), \nIVEC4(1061158912, -1092354065, 0, 1065353216), \nIVEC4(-1140327239, -2147483648, 1063447005, 1057275624), \nIVEC4(1060896768, -1086849024, -1109393408, 1063541277), \nIVEC4(-1122798404, -1092179984, 1063794294, 1054835613), \nIVEC4(1059015874, 1056837806, -1086323578, 1053800425), \nIVEC4(1056065349, -1085789543, 1061712258, 1034772378), \nIVEC4(1059981084, 1048870172, -1090039161, 1062529611), \nIVEC4(-1096464885, -1092139719, 1062376317, 1042055367), \nIVEC4(1055129583, 1041760290, -1085014016, 1000593162), \nIVEC4(-1093444986, -1083626960, 1060184743, 1042615391), \nIVEC4(1061134115, 1053739524, -1095885199, 1065188799), \nIVEC4(1024040999, -1106598324, 1063303997, 1039003323), \nIVEC4(1060852141, 1061185839, -1096206147, 1054652708), \nIVEC4(1063655362, 1034147594, 1063137063, 1028360394), \nIVEC4(1061027848, 1054605329, 0, 1062595042), \nIVEC4(1057793402, -2147483648, 1065018829, 1033815808), \nIVEC4(1061253754, 1048480303, -1102908813, 1065351538), \nIVEC4(1001022659, 1007693280, 1064093834, 1042033557), \nIVEC4(1060110336, -1083965440, 0, 1059494612), \nIVEC4(-1086168708, -2147483648, 1063330588, 1052875967), \nIVEC4(1061027848, -1105723358, -1110442051, 1063549665), \nIVEC4(-1104309912, -1093270503, 1064625823, 1049737151), \nIVEC4(1058013184, -1103101952, -1102053376, 1048636398), \nIVEC4(-1091425010, -1084742645, 1063432627, 1050907093), \nIVEC4(1060765688, 1034944579, -1094713344, 1058496368), \nIVEC4(-1090232150, -1088525907, 1063200783, 1045360076), \nIVEC4(1060896768, -1086062592, 0, 1065333083), \nIVEC4(-1119389273, -2147483648, 1063242860, 1054528422), \nIVEC4(1057357832, -1083047944, -1096286208, -1104967578), \nIVEC4(-1088485641, -1086036168, 1059610459, 1063277220), \nIVEC4(1050935279, -1089339400, 0, -1083439055), \nIVEC4(-1094300624, -2147483648, 1057632341, 1061779870), \nIVEC4(1058013184, -1103101952, -1102053376, 1048636398), \nIVEC4(-1091425010, -1084742645, 1058817031, 1059821399), \nIVEC4(1061027848, -1106247680, 0, 1061425670), \nIVEC4(1059362072, -2147483648, 1062483607, 1062895723), \nIVEC4(1061908015, -1102053376, 0, 1065353216), \nIVEC4(1008444899, -2147483648, 1062576738, 1062514394), \nIVEC4(1061027848, -1105723358, -1110442051, 1063848300), \nIVEC4(1044898434, -1095045533, 1062965617, 1062983820), \nIVEC4(1060896768, -1086849024, -1109393408, 1058382283), \nIVEC4(-1085964026, 1048616265, 1061740998, 1062001699), \nIVEC4(1059323904, -1085742768, -1111490560, 1063261097), \nIVEC4(-1099330434, 1054203078, 1062039280, 1062427706), \nIVEC4(1060503560, -1084882936, -1108344765, 1057635697), \nIVEC4(1052475025, 1061289774, 1061706554, 1062677904), \nIVEC4(1059192824, -1084956336, 0, 1065260941), \nIVEC4(1037422507, -2147483648, 1062439014, 1062680119), \nIVEC4(1060110336, -1083965440, 0, 1060887121), \nIVEC4(1059974441, -2147483648, 1062270705, 1063063193), \nIVEC4(1060896768, -1086062592, 0, 1057620597), \nIVEC4(-1084776199, -2147483648, 1062439014, 1061979788), \nIVEC4(1058492157, 1060010344, -1095707495, 1041207447), \nIVEC4(1065180411, -1125549867, 1062977294, 1006751608), \nIVEC4(1058492157, 1060010344, -1095707495, 1041207447), \nIVEC4(1065180411, -1125549867, 1041770826, 1038915947), \nIVEC4(1049886703, 1063649288, 0, 1052867612), \nIVEC4(1064108347, -2147483648, 1015682456, 1045438862), \nIVEC4(1058668536, 1053818880, 0, 1051515368), \nIVEC4(1064368393, -2147483648, 1027323428, 1019377202), \nIVEC4(1056291741, 1054828835, -1086601409, -1114892979), \nIVEC4(1056914276, -1084408778, 1049926667, 1042479495), \nIVEC4(1047527424, 1062862840, -1092091904, 1048327697), \nIVEC4(1063339950, -1093673157, 1041647010, 1047504473), \nIVEC4(1056291741, 1054828835, -1086601409, -1114892979), \nIVEC4(1056914276, -1084408778, 1061054038, 1032792532), \nIVEC4(-1092878319, -1140851762, -1088159744, -1089094654), \nIVEC4(-1086885095, -1094548927, 1051665726, 1057462354), \nIVEC4(-1095499793, -1094451217, 0, -1096686345), \nIVEC4(-1082991103, -2147483648, 1052115389, 1060896365), \nIVEC4(-1085014016, 1032847293, 0, -1083878618), \nIVEC4(-1092384666, -2147483648, 1044349282, 1059799085), \nIVEC4(1041675732, 1058996547, -1086707710, 1041308110), \nIVEC4(1057348806, -1084806398, 1048122948, 1049062573), \nIVEC4(-1094451217, 1063125000, -1092091904, -1096991690), \nIVEC4(1062949041, -1093387944, 1040774796, 1053216477), \nIVEC4(-1086353375, 1055175821, -1090931592, -1084717479), \nIVEC4(1039019698, -1090173429, 1044678653, 1057068442), \nIVEC4(-1084620808, 1058013184, 0, -1083306515), \nIVEC4(1052532068, -2147483648, 1033714876, 1058178389), \nIVEC4(-1095078181, 1058736215, -1086707710, -1096790363), \nIVEC4(1056669329, -1085271127, 1046961898, 1053515380), \nIVEC4(-1092616192, 1049100288, -1085931512, -1083945727), \nIVEC4(1048267299, -1094542216, 1050406059, 1055454961), \nIVEC4(-1089732608, 1063649288, 0, -1091612914), \nIVEC4(1063407059, -2147483648, 1015425832, 1055341043), \nIVEC4(1052770304, 1042808798, -1085931512, -1101645690), \nIVEC4(-1093840929, -1083944049, 1053583731, 1043810600), \nIVEC4(-1101529054, 1049886703, -1084751872, 1044663553), \nIVEC4(1036080330, -1082517986, 1051213211, 1053071421), \nIVEC4(-1093664768, 1033895936, -1080360956, 1063860044), \nIVEC4(-1096454819, -1098699611, 1060213365, 1056631178), \nIVEC4(-1098121199, 1025507194, -1085734916, 1058654074), \nIVEC4(1057647441, -1089029223, 1061002448, 1052399964), \nIVEC4(-1103626206, 1006631886, -1086849024, 1041361797), \nIVEC4(-1086351580, -1088039367, 1061543312, 1051696059), \nIVEC4(-1092616192, 1049100288, -1085931512, -1083945727), \nIVEC4(1048267299, -1094542216, 1063065626, 1058112086), \nIVEC4(-1094189056, 1054867456, -1080557568, 1060700894), \nIVEC4(1058795002, -1096337379, 1060545789, 1057749446), \nIVEC4(-1089732608, 1055916032, -1080033280, -1090508974), \nIVEC4(1060345217, -1090398244, 1060723073, 1057383837), \nIVEC4(-1103626206, 1006631886, -1086849024, 1041361797), \nIVEC4(-1086351580, -1088039367, 1054349107, 1053190842), \nIVEC4(-1089994752, 1029701766, -1079508992, -1094377800), \nIVEC4(-1090312680, -1086027779, 1060677339, 1057353739), \nIVEC4(-1092878319, -1140851762, -1088159744, -1089094654), \nIVEC4(-1086885095, -1094548927, 1063065626, 1053572054), \nIVEC4(-1096587627, 1048051746, -1083965440, 1057488057), \nIVEC4(-1090368045, -1087544440, 1060776274, 1059486442), \nIVEC4(-1101529054, 1049886703, -1084751872, 1044663553), \nIVEC4(1036080330, -1082517986, 1061654276, 1059587424), \nIVEC4(1061027848, -1096286208, 0, 1064046271), \nIVEC4(-1094310691, -2147483648, 1062965617, 1061990928), \nIVEC4(1059213879, 1049513578, -1089470464, 1061675650), \nIVEC4(-1126784670, -1088433632, 1060052941, 1062006078), \nIVEC4(1062019650, 1048082146, -1095489626, 1065165311), \nIVEC4(-1111993876, -1108088141, 1060886081, 1062961574), \nIVEC4(1059646027, 1032403301, -1095499793, 1061410570), \nIVEC4(-1088564494, -1103195904, 1060083727, 1063665780), \nIVEC4(1060511597, 1048051746, -1106247680, 1063962385), \nIVEC4(-1113027353, 1053276976, 1061630452, 1063749901), \nIVEC4(1060079030, 1055391744, -1095499793, 1063098358), \nIVEC4(1056155946, -1105236014, 1061630452, 1062113536), \nIVEC4(-1098121199, 1025507194, -1085734916, 1058654074), \nIVEC4(1057647441, -1089029223, 1060610616, 1061103480), \nIVEC4(-1092616192, 1052246016, -1080688640, 1061970929), \nIVEC4(-1094441553, 1055773426, 1060254167, 1057656366), \nIVEC4(1061027848, -1106247680, 0, 1065348183), \nIVEC4(-1127912099, -2147483648, 1065223058, 1049617832), \nIVEC4(1061027848, -1096286208, 0, 1065316306), \nIVEC4(1032335655, -2147483648, 1063523006, 1057835446), \nIVEC4(1058275328, -1082392576, 0, -1115121150), \nIVEC4(-1082167342, -2147483648, 1058220685, 1063950406), \nIVEC4(1058668536, 1053818880, 0, 1051515368), \nIVEC4(1064368393, -2147483648, 1065223058, 1024460027), \nIVEC4(1058013184, -1103101952, -1102053376, 1048636398), \nIVEC4(-1091425010, -1084742645, 1059610459, 1043621151), \nIVEC4(1055129583, 1041760290, -1085014016, 1000593162), \nIVEC4(-1093444986, -1083626960, 1053542895, 1041576881), \nIVEC4(-1103626206, 1006631886, -1086849024, 1041361797), \nIVEC4(-1086351580, -1088039367, 1054008697, 1057160482), \nIVEC4(-1092354065, 1035993088, -1080557568, 1058328596), \nIVEC4(1057620597, 1058800035, 1060062588, 1056626514), \nIVEC4(1058013184, -1103101952, -1102053376, 1048636398), \nIVEC4(-1091425010, -1084742645, 1065088774, 1058315409), \nIVEC4(-1103626206, 1006631886, -1086849024, 1041361797), \nIVEC4(-1086351580, -1088039367, 1061194429, 1061692360), \nIVEC4(1060503560, -1084882936, 1039138883, 1061477679), \nIVEC4(-1092371245, 1055592232, 1063816759, 1053684260), \nIVEC4(1057357832, -1083047944, 1051197440, -1104967578), \nIVEC4(-1088485641, 1061447480, 1065088774, 1052267357), \nIVEC4(1061027848, -1105723358, 1037041597, 1063549665), \nIVEC4(-1104309912, 1054213145, 1064126500, 1058623891), \nIVEC4(1060896768, -1086849024, 1038090240, 1063541277), \nIVEC4(-1122798404, 1055303664, 1063794294, 1054835613), \nIVEC4(1059015874, 1056837806, 1061160070, 1053800425), \nIVEC4(1056065349, 1061694105, 1061712258, 1034772378), \nIVEC4(1055129583, 1041760290, 1062469632, 1000593162), \nIVEC4(-1093444986, 1063856688, 1060184743, 1042615391), \nIVEC4(1059981084, 1048870172, 1057444487, 1062529611), \nIVEC4(-1096464885, 1055343929, 1062376317, 1042055367), \nIVEC4(1061134115, 1053739524, 1051598449, 1065188799), \nIVEC4(1024040999, 1040885324, 1063303997, 1039003323), \nIVEC4(1060852141, 1061185839, 1051277501, 1054652708), \nIVEC4(1063655362, -1113336054, 1063137063, 1028360394), \nIVEC4(1061253754, 1048480303, 1044574835, 1065351538), \nIVEC4(1001022659, -1139790368, 1064093834, 1042033557), \nIVEC4(1061027848, -1105723358, 1037041597, 1063549665), \nIVEC4(-1104309912, 1054213145, 1064625823, 1049737151), \nIVEC4(1060765688, 1034944579, 1052770304, 1058496368), \nIVEC4(-1090232150, 1058957741, 1063200783, 1045360076), \nIVEC4(1058013184, -1103101952, 1045430272, 1048636398), \nIVEC4(-1091425010, 1062741003, 1063432627, 1050907093), \nIVEC4(1057357832, -1083047944, 1051197440, -1104967578), \nIVEC4(-1088485641, 1061447480, 1059610459, 1063277220), \nIVEC4(1058013184, -1103101952, 1045430272, 1048636398), \nIVEC4(-1091425010, 1062741003, 1058817031, 1059821399), \nIVEC4(1061027848, -1105723358, 1037041597, 1063848300), \nIVEC4(1044898434, 1052438115, 1062965617, 1062983820), \nIVEC4(1060896768, -1086849024, 1038090240, 1058382283), \nIVEC4(-1085964026, -1098867383, 1061740998, 1062001699), \nIVEC4(1060503560, -1084882936, 1039138883, 1057635697), \nIVEC4(1052475025, -1086193874, 1061706554, 1062677904), \nIVEC4(1059323904, -1085742768, 1035993088, 1063261097), \nIVEC4(-1099330434, -1093280570, 1062039280, 1062427706), \nIVEC4(1058492157, 1060010344, 1051776153, 1041207447), \nIVEC4(1065180411, 1021933781, 1062977294, 1006751608), \nIVEC4(1058492157, 1060010344, 1051776153, 1041207447), \nIVEC4(1065180411, 1021933781, 1041770826, 1038915947), \nIVEC4(1056291741, 1054828835, 1060882239, -1114892979), \nIVEC4(1056914276, 1063074870, 1049926667, 1042479495), \nIVEC4(1047527424, 1062862840, 1055391744, 1048327697), \nIVEC4(1063339950, 1053810491, 1041647010, 1047504473), \nIVEC4(1056291741, 1054828835, 1060882239, -1114892979), \nIVEC4(1056914276, 1063074870, 1061054038, 1032792532), \nIVEC4(-1092878319, -1140851762, 1059323904, -1089094654), \nIVEC4(-1086885095, 1052934721, 1051665726, 1057462354), \nIVEC4(1041675732, 1058996547, 1060775938, 1041308110), \nIVEC4(1057348806, 1062677250, 1048122948, 1049062573), \nIVEC4(-1094451217, 1063125000, 1055391744, -1096991690), \nIVEC4(1062949041, 1054095704, 1040774796, 1053216477), \nIVEC4(-1086353375, 1055175821, 1056552056, -1084717479), \nIVEC4(1039019698, 1057310219, 1044678653, 1057068442), \nIVEC4(-1092616192, 1049100288, 1061552136, -1083945727), \nIVEC4(1048267299, 1052941432, 1050406059, 1055454961), \nIVEC4(-1095078181, 1058736215, 1060775938, -1096790363), \nIVEC4(1056669329, 1062212521, 1046961898, 1053515380), \nIVEC4(1052770304, 1042808798, 1061552136, -1101645690), \nIVEC4(-1093840929, 1063539599, 1053583731, 1043810600), \nIVEC4(-1101529054, 1049886703, 1062731776, 1044663553), \nIVEC4(1036080330, 1064965662, 1051213211, 1053071421), \nIVEC4(-1093664768, 1033895936, 1067122692, 1063860044), \nIVEC4(-1096454819, 1048784037, 1060213365, 1056631178), \nIVEC4(-1103626206, 1006631886, 1060634624, 1041361797), \nIVEC4(-1086351580, 1059444281, 1061543312, 1051696059), \nIVEC4(-1098121199, 1025507194, 1061748732, 1058654074), \nIVEC4(1057647441, 1058454425, 1061002448, 1052399964), \nIVEC4(-1092616192, 1049100288, 1061552136, -1083945727), \nIVEC4(1048267299, 1052941432, 1063065626, 1058112086), \nIVEC4(-1089732608, 1055916032, 1067450368, -1090508974), \nIVEC4(1060345217, 1057085404, 1060723073, 1057383837), \nIVEC4(-1094189056, 1054867456, 1066926080, 1060700894), \nIVEC4(1058795002, 1051146269, 1060545789, 1057749446), \nIVEC4(-1103626206, 1006631886, 1060634624, 1041361797), \nIVEC4(-1086351580, 1059444281, 1054349107, 1053190842), \nIVEC4(-1092878319, -1140851762, 1059323904, -1089094654), \nIVEC4(-1086885095, 1052934721, 1063065626, 1053572054), \nIVEC4(-1089994752, 1029701766, 1067974656, -1094377800), \nIVEC4(-1090312680, 1061455869, 1060677339, 1057353739), \nIVEC4(-1096587627, 1048051746, 1063518208, 1057488057), \nIVEC4(-1090368045, 1059939208, 1060776274, 1059486442), \nIVEC4(-1101529054, 1049886703, 1062731776, 1044663553), \nIVEC4(1036080330, 1064965662, 1061654276, 1059587424), \nIVEC4(1059213879, 1049513578, 1058013184, 1061675650), \nIVEC4(-1126784670, 1059050016, 1060052941, 1062006078), \nIVEC4(1059646027, 1032403301, 1051983855, 1061410570), \nIVEC4(-1088564494, 1044287744, 1060083727, 1063665780), \nIVEC4(1062019650, 1048082146, 1051994022, 1065165311), \nIVEC4(-1111993876, 1039395507, 1060886081, 1062961574), \nIVEC4(1060511597, 1048051746, 1041235968, 1063962385), \nIVEC4(-1113027353, -1094206672, 1061630452, 1063749901), \nIVEC4(1060079030, 1055391744, 1051983855, 1063098358), \nIVEC4(1056155946, 1042247634, 1061630452, 1062113536), \nIVEC4(-1098121199, 1025507194, 1061748732, 1058654074), \nIVEC4(1057647441, 1058454425, 1060610616, 1061103480), \nIVEC4(-1092616192, 1052246016, 1066795008, 1061970929), \nIVEC4(-1094441553, -1091710222, 1060254167, 1057656366), \nIVEC4(1058013184, -1103101952, 1045430272, 1048636398), \nIVEC4(-1091425010, 1062741003, 1059610459, 1043621151), \nIVEC4(1055129583, 1041760290, 1062469632, 1000593162), \nIVEC4(-1093444986, 1063856688, 1053542895, 1041576881), \nIVEC4(-1103626206, 1006631886, 1060634624, 1041361797), \nIVEC4(-1086351580, 1059444281, 1054008697, 1057160482), \nIVEC4(-1092354065, 1035993088, 1066926080, 1058328596), \nIVEC4(1057620597, -1088683613, 1060062588, 1056626514), \nIVEC4(1058013184, -1103101952, 1045430272, 1048636398), \nIVEC4(-1091425010, 1062741003, 1065088774, 1058315409), \nIVEC4(-1103626206, 1006631886, 1060634624, 1041361797), \nIVEC4(-1086351580, 1059444281, 1061194429, 1061692360) \n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //if (iFrame > 1) discard;\n    int index = int(fragCoord.x);//int(fragCoord.x + fragCoord.y * iResolution.x);\n    if (fragCoord.y < 2.0 && index < 746) {\n        fragColor = intBitsToFloat(geometryData[index]);\n    } else {\n        fragColor = vec4(0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}