{"ver":"0.1","info":{"id":"tlc3DM","date":"1576510796","viewed":1057,"name":"PSX dithering","username":"BitOfGold","description":"PSX dithering pattern, runs best on fullscreen (to see the pixels)\nUse mouse to show difference, The original effect is subtle. Edit _Colors to make dither more/less visible\nPorted from here: https://github.com/jmickle66666666/PSX-Dither-Shader/\n\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["dithering","psx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ported to shaderToy by László Matuska / @BitOfGold\n// from here: https://github.com/jmickle66666666/PSX-Dither-Shader/blob/master/PSX%20Dither.shader\n// uses Shadertoy's 8x8 bayer dithering pattern instead of the original pattern\n\n// Number of colors. 32 (5 bits) per channel\nconst vec3 _Colors = vec3(32.0);\n\nfloat channelError(float col, float colMin, float colMax)\n{\n    float range = abs(colMin - colMax);\n    float aRange = abs(col - colMin);\n    return aRange /range;\n}\n\nfloat ditheredChannel(float error, vec2 ditherBlockUV)\n{\n    float pattern = texture(iChannel1, ditherBlockUV).r;\n    if (error > pattern) {\n        return 1.0;\n    } else {\n        return 0.0;\n    }\n}\n\nvec4 mix(vec4 a, vec4 b, float amt)\n{\n    return ((1.0 - amt) * a) + (b * amt);\n}\n\n/// YUV/RGB color space calculations\n\nvec3 RGBtoYUV(vec3 rgb) {\n    vec3 yuv;\n    yuv.r = rgb.r * 0.2126 + 0.7152 * rgb.g + 0.0722 * rgb.b;\n    yuv.g = (rgb.b - yuv.r) / 1.8556;\n    yuv.b = (rgb.r - yuv.r) / 1.5748;\n\n    // Adjust to work on GPU\n    yuv.gb += 0.5;\n\n    return yuv;\n}\n\nvec3 YUVtoRGB(vec3 yuv) {\n    yuv.gb -= 0.5;\n    return vec3(\n        yuv.r * 1.0 + yuv.g * 0.0 + yuv.b * 1.5748,\n        yuv.r * 1.0 + yuv.g * -0.187324 + yuv.b * -0.468124,\n        yuv.r * 1.0 + yuv.g * 1.8556 + yuv.b * 0.0);\n}\n\n\nvec3 ditherColor(vec3 col, vec2 uv, float xres, float yres) {\n    vec3 yuv = RGBtoYUV(col);\n\n    vec3 col1 = floor(yuv * _Colors) / _Colors;\n    vec3 col2 = ceil(yuv * _Colors) / _Colors;\n    \n    // Calculate dither texture UV based on the input texture\n    vec2 ditherBlockUV = uv * vec2(xres / 8.0, yres / 8.0);\n   \n    yuv.x = mix(col1.x, col2.x, ditheredChannel(channelError(yuv.x, col1.x, col2.x), ditherBlockUV));\n    yuv.y = mix(col1.y, col2.y, ditheredChannel(channelError(yuv.y, col1.y, col2.y), ditherBlockUV));\n    yuv.z = mix(col1.z, col2.z, ditheredChannel(channelError(yuv.z, col1.z, col2.z), ditherBlockUV));\n    \n    return(YUVtoRGB(yuv));\n}\n\nvec3 getPixel(vec2 uv) {\n    return texture(iChannel0,uv).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = getPixel(uv);\n    if (fragCoord.x > iMouse.x) {\n    \tcol = ditherColor(col, uv, iChannelResolution[0].x, iChannelResolution[0].y);\n    } else if (fragCoord.x > iMouse.x - 2.0){\n        col = vec3(0.0);\n    }\n        \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}