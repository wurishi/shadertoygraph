{"ver":"0.1","info":{"id":"fsc3W4","date":"1629766090","viewed":344,"name":"VACUOLE :: fast perlin noise","username":"ENDESGA","description":"A clean and simple Perlin Noise using my hept32","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["noise","perlinnoise","gradient","random","hash","hept32"],"hasliked":0,"parentid":"slB3z3","parentname":"Fast Improved 3D Perlin Noise"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T iTime\n#define R iResolution.yy\n\n// hept32 bitmagic hash\n// https://www.shadertoy.com/view/flXXWs\n\nuint _HEPT32_X = 0u, _HEPT32_Y = 0u, _HEPT32_Z = 0u;\nuint hept32(uint x, uint y, uint z) {\n    x = (x * _HEPT32_X) - (~x * 0x77777777u) - ~(x * _HEPT32_Y);\n\ty = (y * _HEPT32_Y) - (~y * 0x77777777u) - ~(y * _HEPT32_Z);\n\tz = (z * _HEPT32_Z) - (~z * 0x77777777u) - ~(z * _HEPT32_X);\n\tz = ~(~(~x * y * z) * ~(x * ~y * z) * ~(x * y * ~z));\n    return z ^ (z >> 16);\n}\n\nvoid hept32_seed(uint seed) {\n\t_HEPT32_X = (hept32(seed,0x77777777u,0x77777777u) * 0x77777777u) - 0x77777777u;\n\t_HEPT32_Y = (hept32(0x77777777u,seed,0x77777777u) * 0x77777777u) - 0x77777777u;\n\t_HEPT32_Z = (hept32(0x77777777u,0x77777777u,seed) * 0x77777777u) - 0x77777777u;\n}\n\n// Based off TheTurk's Fast Improved 3D Perlin Noise\n// https://www.shadertoy.com/view/slB3z3\n\nuint hash(uvec3 h) {\n    return hept32(h.x,h.y,h.z);\n}\n\nvec3 grad_dir(uint h) {\n    switch (int(h) & 15) {\n        case 0:\n        case 12:\n            return vec3(1, 1, 0);\n        case 1:\n        case 13:\n            return vec3(-1, 1, 0);\n        case 2:\n        case 14:\n            return vec3(1, -1, 0);\n        case 3:\n        case 15:\n            return vec3(-1, -1, 0);\n        case 4:\n            return vec3(1, 0, 1);\n        case 5:\n            return vec3(-1, 0, 1);\n        case 6:\n            return vec3(1, 0, -1);\n        case 7:\n            return vec3(-1, 0, -1);\n        case 8:\n            return vec3(0, 1, 1);\n        case 9:\n            return vec3(0, -1, 1);\n        case 10:\n            return vec3(0, 1, -1);\n        case 11:\n            return vec3(0, -1, -1);\n    }\n}\n\nfloat interp(float v1, float v2, float v3, float v4, float v5, float v6, float v7, float v8, vec3 t) {\n    return mix(\n        mix(mix(v1, v2, t.x), mix(v3, v4, t.x), t.y),\n        mix(mix(v5, v6, t.x), mix(v7, v8, t.x), t.y),\n        t.z\n    );\n}\n\nvec3 fade(vec3 t) {\n\treturn t * t * t * (t * (t * 6. - 15.) + 10.);\n}\n\nfloat noise(vec3 p) {\n    vec3 fl_p = floor(p);\n    vec3 fr_p = p - fl_p;\n    uvec3 c = uvec3(fl_p);\n    \n    return interp(\n        dot(grad_dir(hash(c)), fr_p),\n        dot(grad_dir(hash((c + uvec3(1, 0, 0)))), fr_p - vec3(1, 0, 0)),\n        dot(grad_dir(hash((c + uvec3(0, 1, 0)))), fr_p - vec3(0, 1, 0)),\n        dot(grad_dir(hash((c + uvec3(1, 1, 0)))), fr_p - vec3(1, 1, 0)),\n        dot(grad_dir(hash((c + uvec3(0, 0, 1)))), fr_p - vec3(0, 0, 1)),\n        dot(grad_dir(hash((c + uvec3(1, 0, 1)))), fr_p - vec3(1, 0, 1)),\n        dot(grad_dir(hash((c + uvec3(0, 1, 1)))), fr_p - vec3(0, 1, 1)),\n        dot(grad_dir(hash((c + uvec3(1, 1, 1)))), fr_p - vec3(1, 1, 1)),\n        fade(fr_p));\n}\n\nfloat perlin(vec3 p, int freq, int octa, float pers, float lacu) {\n    float v = 0., a = 1., c_f = float(freq);\n    for (int i = 0; i < octa; i++) {\n        v += noise(p * c_f) * a;\n        a *= pers;\n        c_f *= lacu;\n    }\n    return v;\n}\n\nvoid mainImage(out vec4 O, in vec2 I) {\n    vec2 UV = ((I / R) + (T*.03)) * 4.;\n    \n    hept32_seed(7u);\n    \n    float V = perlin(vec3(UV, T * 0.25), 1, 7, 0.333, 1.777);\n    V = 1.-abs(((V*V)+V)*.5);\n    \n    O = vec4(vec3(floor((pow(V,7.777))+.5))*vec3(1.,.0,.25), 1.0);\n}","name":"Image","description":"","type":"image"}]}