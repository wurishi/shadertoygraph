{"ver":"0.1","info":{"id":"DdtBz8","date":"1696863334","viewed":85,"name":"Conway's Game of Life.","username":"Borusse29","description":"a simple implementation of Conway's Game of Life","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["cellularautomaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define framesPerGeneration 1\n#define startAmount 0.3 // probability for a pixel to start white\n#define border 0.1\n\nfloat rnd(vec2 fragCoord, float seed)\n{\n    float a = texelFetch(iChannel1, ivec2(mod(((fragCoord + vec2(52546.1531,1342.3513)) * abs(sin(100.0*seed))).xy, 64.0)), 0).x;\n    float b = texelFetch(iChannel1, ivec2(mod(((fragCoord + vec2(2464.1515,24756.1642)) * abs(cos(6533.3*seed))).yx, 64.0)), 0).x;\n    return float(texelFetch(iChannel1, ivec2(a*64.0, b*64.0), 0).x <= startAmount);\n}\n\nint imod(int a, int b)\n{\n    return a-b*(a/b);\n}\n\nint numberOfNeighbours(vec2 uv)\n{\n    int n = 0;\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            if (x == 0 && y == 0) continue;\n            n += int(texture(iChannel0, vec2(uv.x + float(x) / iResolution.x, uv.y + float(y) / iResolution.y)).x);\n        }\n    }\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (iFrame == 0) {\n        fragColor = vec4(rnd(fragCoord, tan(uv.x*uv.y)*iDate.w));\n        fragColor *= float(max(abs(uv.x - 0.5), abs(uv.y - 0.5)) <= 0.5 - border);\n        return;\n    }\n    \n    if (imod(iFrame, framesPerGeneration) == 0) {\n        int n = numberOfNeighbours(uv);\n        if (n < 2 || n > 3) {\n            fragColor = vec4(0.0);\n            return;\n        }\n        else if (n == 3 && texture(iChannel0, uv).x == 0.0) {\n            fragColor = vec4(1.0);\n            return;\n        }\n    }\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"}]}