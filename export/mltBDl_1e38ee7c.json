{"ver":"0.1","info":{"id":"mltBDl","date":"1701737165","viewed":137,"name":"starlight in space","username":"nayk","description":"cosmos, space, stars, new, copypast","likes":10,"published":1,"flags":1,"usePreview":0,"tags":["space","stars","cosmos","new","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/4tyfWy and other*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define H(a) (cos(radians(vec3(100, 140, 190))-((a)*6.2832))*.5+.5) // hue pallete\n#define RT(a) mat2(cos(m.a*1.571+vec4(0,-1.571,1.571,0))) // rotate\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nmat2 rotationMatrix(float angle)\n{\nangle *= 3.14 / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, s, -s, c );\n}\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n     float t = iTime * .1 + ((.25 + .05 * sin(iTime * 1.1))/(length(uv.xy) + .122)) * 1.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\nuv*=ma;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n    vec4 C =fragColor;\n    vec2 U = fragCoord;\n    \nvec3  c = vec3(0), \n          o = vec3(1 ,1.732, 1),\n          u, v, a, b;\n    vec2  R = iResolution.xy,\n          m = iMouse.xy/R*4.-2.,\n          uv2 = (U-.5*R)/R.y; // 2d coords\n    float t2 = iTime/5.,\n          tr = smoothstep(0., 1., sin(t)*.6+.5),\n          s = tr*4.+2., // scale\n          h;\n    if (iMouse.z < 1.)\n        m = vec2(sin(t2/2.)*.6, sin(t2)*.4); // rotate with time\n    mat2  pitch = RT(y),\n          yaw = RT(x);\n    for (float i = .1; i < 1.; i+=.1)\n    {\n        u = normalize(vec3(uv, .7*sqrt(i)))*s; // 3d coords\n        u.yz *= pitch;\n        u.xz *= yaw;\n        \n        // add distortion\n        u.xy += sin(uv.yx*20.0+t)*0.1;\n        u.xz += sin(uv.yx*30.0+t)*0.2;\n        u.yz += sin(uv.yx*10.0+t)*0.15;\n        \n        // simple hexagonal tiles by lomateron https://www.shadertoy.com/view/MlXyDl\n        a = mod(u, o)*2.-o;\n        b = mod(u+o*.5, o)*2.-o;\n        h = min(dot(a, a), dot(b, b))*.5;\n        \n        v = h*h*H(i-t/5.);\n        float k = 1.2-max(i, tr-i); // increase contrast\n        c += v*k;\n    }\n    // add more color\n    c *= vec3(1.0, 0.8, 1.2);\n    c = pow(c, vec3(2.5)) * 0.5 + 0.05;\n    C = vec4(c, 1);\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\t  uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n   \n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor*=vec4(C);\n     fragColor*= vec4(cheap_star(uv,anim) * vec3(0.55,0.5,0.55)*2.1, 1.0);\n\t\n}\n","name":"Image","description":"","type":"image"}]}