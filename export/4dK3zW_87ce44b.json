{"ver":"0.1","info":{"id":"4dK3zW","date":"1453482833","viewed":290,"name":"Day 001 - Mondrian","username":"mwalczyk","description":"Mondrian - Day 001","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const vec3 monWhite = vec3(0.996, 1.0, 0.980);\nconst vec3 monBlack = vec3(0.0, 0.0, 0.007);\nconst vec3 monRed = vec3(0.964, 0.007, 0.003);\nconst vec3 monYellow = vec3(0.992, 0.929, 0.003);\nconst vec3 monBlue = vec3(0.121, 0.498, 0.788);\n\n// A function for drawing a rectangle - all params in the range [0, 1]\n// dim: xy dimensions\n// pos: xy position (top-left corner)\n// smth: xy smoothing\n// fill: fill color (rgb)\nvec3 rect(in vec2 uv,\n\t\t\t\t\tin vec2 dim,\n\t\t\t\t\tin vec2 pos,\n\t\t\t\t\tin vec2 smth,\n\t\t\t\t\tin vec3 fill)\n{\n\t// We choose to invert the y-coordinate so that (0, 0) will\n\t// be the upper left corner of the image\n\tuv.y = 1.0 - uv.y;\n\n\t// The value we'll actually use for our stepping functions below\n\tvec2 stepAmt = (vec2(1.0) - dim) * 0.5;\n\n\t// Offset the uv-space to properly center things\n\tvec2 uvOffset = uv + stepAmt;\n  \tuvOffset -= pos;\n\n\tvec2 bl = smoothstep(stepAmt, stepAmt + smth, uvOffset);\n\tvec2 tr = smoothstep(stepAmt, stepAmt + smth, 1.0 - uvOffset);\n\tfloat pct = bl.x * bl.y * tr.x * tr.y;\n\n\treturn mix(vec3(0.0), fill, pct);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //uv.x /= 2.0;\n    \n\tuv.x *= (iResolution.x / iResolution.y);\n  \tuv.x = mod(uv.x, 0.98);\n    \n\tfloat spacing = 0.02;\n\tvec3 rect1 = rect(uv,\n                    vec2(0.4, 0.2),\n                    vec2(0.0 + spacing, 0.0 + spacing),\n                    vec2(0.0),\n                    monBlue);\n\tvec3 rect2 = rect(uv,\n                    vec2(0.6 - 3.0*spacing, 0.2),\n                    vec2(0.4 + 2.0*spacing, 0.0 + spacing),\n                    vec2(0.0),\n                    monWhite);\n\tvec3 rect3 = rect(uv,\n                    vec2(0.6, 0.4),\n                    vec2(0.0 + spacing, 0.2 + 2.0*spacing),\n                    vec2(0.0),\n                    monRed);\n\tvec3 rect4 = rect(uv,\n                    vec2(0.2, 0.4),\n                    vec2(0.6 + 2.0*spacing, 0.2 + 2.0*spacing),\n                    vec2(0.0),\n                    monYellow);\n\tvec3 rect5 = rect(uv,\n                    vec2(0.1 + spacing, 0.4),\n                    vec2(0.8 + 3.0*spacing, 0.2 + 2.0*spacing),\n                    vec2(0.0),\n                    monYellow);\n\tvec3 rect6 = rect(uv,\n                    vec2(0.8 + spacing, 0.3 + spacing),\n                    vec2(0.0 + spacing, 0.6 + 3.0*spacing),\n                    vec2(0.0),\n                    monWhite);\n\tvec3 rect7 = rect(uv,\n                    vec2(0.1 + spacing, 0.3 + spacing),\n                    vec2(0.8 + 3.0*spacing, 0.6 + 3.0*spacing),\n                    vec2(0.0),\n                    monWhite);\n\tvec3 finalColor = rect1 + rect2 + rect3 + rect4 + rect5 + rect6 + rect7;\n\tfragColor = vec4(finalColor, 1.0);\n}\n","name":"","description":"","type":"image"}]}