{"ver":"0.1","info":{"id":"7tlSWS","date":"1626460397","viewed":130,"name":"[TWITCH] It's a pattern","username":"Flopine","description":"A piece made live on Twitch, with absolutely no inspiration ^^\"\"\nYou can watch all my streams here: https://www.twitch.tv/flopine","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","animation","isometric","live","twitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.283185\n\n#define time iTime\n#define dt(sp,off) fract((time+off)*sp)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define crep(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n#define hash11(x) fract(sin(x)*1455.2)\n#define hash21(x) fract(sin(dot(x,vec2(12.5,23.4)))*124.2)\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat od (vec3 p, float d)\n{return dot(p,normalize(sign(p)))-d;}\n\nfloat sc (vec3 p, float d)\n{\n    p=abs(p)-d;\n    p=max(p,p.yzx);\n    return min(p.x,min(p.y,p.z));\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat g1=0.; vec2 starid;\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n\n    vec3 pp = p;\n    float per = 4.;\n    vec2 id = floor(p.xz/per);\n    p.xz = mod(p.xz,per)-per*.5;\n    p.xz *= rot(dt(0.5,id.y)*TAU);\n    p.xy *= rot(dt(0.3,id.x)*TAU);\n\n    p.x -= 1.;\n    float s = mix(od(p,0.25),box(p,vec3(0.4)),0.5);\n    g1 += 0.1/(0.1+s*s);\n\n    p=pp;\n    starid = round(p.xz/per); \n    crep(p.xz,per,4.);\n    float scene = max(-box(p,vec3(0.85)),mix(od(p,0.8),sc(p,0.4),0.7));\n\n    return min(scene,s);\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    float dither = hash21(uv);\n\n    vec3 ro = vec3(uv*7.,-50.), \n    rd=vec3(0.,0.,1.),\n    p=ro,\n    col=vec3(0.99),\n    l=normalize(vec3(1.,2.,-3.));\n\n    bool hit=false;\n    for (float i=0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if(d<0.001)\n        {\n            hit=true;break;\n        }\n        d *= .9+dither*.05;\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = max(0.,dot(n,l));\n        float colid = length(starid);\n        col = (mod(colid,2.)<=0.) ? \n              mix(vec3(0.5,0.,0.6),vec3(0.1,0.95,0.99),light):\n              mix(vec3(0.05,0.7,hash11(colid)*0.4),vec3(.8,1.,hash11(colid)),light);\n\n    }\n    col -= g1*.08;\n    col = clamp(col,0.,1.);\n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}