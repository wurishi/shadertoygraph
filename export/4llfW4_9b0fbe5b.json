{"ver":"0.1","info":{"id":"4llfW4","date":"1511883039","viewed":161,"name":"Time Travel Through Space","username":"somesuch","description":"Created by Kamil Kolaczynski (revers) - 2016\nModification by Somesuch -2017","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","space","blue","timetravel","spacetravel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Created by Kamil Kolaczynski (revers) - 2016\n * Modification by Somesuch -2017\n * Licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n *\n * This shader, as always, uses a lot of code (raymarching, noise and lighting) credited to iq \n * [ https://www.shadertoy.com/view/Xds3zN ]. \n * Camera path is based on Shane's \"Subterranean Fly-Through\" [ https://www.shadertoy.com/view/XlXXWj ].\n * Additional specular lighting trick is based on \"Wet stone\" by TDM [ https://www.shadertoy.com/view/ldSSzV ].\n * Thanks for sharing great code guys!\n * \n * The shader was created and exported from Synthclipse [ http://synthclipse.sourceforge.net/ ].\n */\nconst float FOV = 1.5;\nconst float MarchDumping = 0.7579;\nconst float Far = 38.925;\nconst int MaxSteps = 128;\nconst float CameraSpeed = 2.5099998;\nconst float TunnelSmoothFactor = .5;\nconst float TunnelRadius = 4.85660005;\nconst float TunnelFreqA = 0.18003;\nconst float TunnelFreqB = 0.25;\nconst float TunnelAmpA = 3.6230998;\nconst float TunnelAmpB = 2.4324;\nconst float NoiseIsoline = 0.319;\nconst float NoiseScale = 10.9980001;\nconst vec3 Color = vec3(0.085, 0.658, 1.0);\n\n#define M_NONE -1.0\n#define M_NOISE 1.0\n\nfloat hash(float h) {\n\treturn fract(sin(h) * 43758.5453123);\n}\n\nfloat noise(vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f * f * (3.0 - 2.0 * f);\n\n\tfloat n = p.x + p.y * 157.0 + 113.0 * p.z;\n\treturn mix(\n\t\t\tmix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n\t\t\t\t\tmix(hash(n + 200.0), hash(n + 200.0), f.x), f.y),\n\t\t\tmix(mix(hash(n + 11.0), hash(n + 11.0), f.x),\n\t\t\t\t\tmix(hash(n + 27.0), hash(n + 27.0), f.x), f.y), f.z);\n}\n\nfloat fbm(vec3 p) {\n\tfloat f = 0.0;\n\tf = 0.5000 * noise(p);\n\tp *= 2.01;\n\tf += 0.2500 * noise(p);\n\tp *= 2.02;\n\tf += 0.1250 * noise(p);\n\n\treturn f;\n}\n\n// by iq. https://iquilezles.org/articles/smin\nfloat smax(float a, float b, float k) {\n\tfloat h = clamp(0.5 + 0.9 * (b - a) / k, 0.0, 1.0);\n\treturn mix(a, b, h) + k * h * (1.0 - h);\n}\n\n// From \"Subterranean Fly-Through\" by Shane https://www.shadertoy.com/view/XlXXWj\nvec2 path(float z) {\n\treturn vec2(TunnelAmpA * sin(z * TunnelFreqA), TunnelAmpB * cos(z * TunnelFreqB));\n}\n\nfloat noiseDist(vec3 p) {\n\tp = p / NoiseScale;\n\treturn (fbm(p) - NoiseIsoline) * NoiseScale;\n}\n\nvec2 map(vec3 p) {\n\tfloat d = noiseDist(p);\n\tfloat d2 = length(p.xy - path(p.z)) - TunnelRadius;\n\td = smax(d, -d2, TunnelSmoothFactor);\n\n\tvec2 res = vec2(d, M_NOISE);\n\treturn res;\n}\n\nvec2 castRay(vec3 ro, vec3 rd) {\n\tfloat tmin = 0.0;\n\tfloat tmax = Far;\n\n\tfloat precis = 0.002;\n\tfloat t = tmin;\n\tfloat m = M_NONE;\n\n\tfor (int i = 0; i < MaxSteps; i++) {\n\t\tvec2 res = map(ro + rd * t);\n\t\tif (res.x < precis || t > tmax) {\n\t\t\tbreak;\n\t\t}\n\t\tt += res.x * MarchDumping;\n\t\tm = res.y;\n\t}\n\tif (t > tmax) {\n\t\tm = M_NONE;\n\t}\n\treturn vec2(t, m);\n}\n\nfloat softshadow(vec3 ro, vec3 rd, float mint, float tmax) {\n\tfloat res = 1.0;\n\tfloat t = mint;\n\n\tfor (int i = 0; i < 16; i++) {\n\t\tfloat h = map(ro + rd * t).x;\n\n\t\tres = min(res, 10.0 * h / t);\n\t\tt += clamp(h, 0.02, 0.10);\n\n\t\tif (h < 0.001 || t > tmax) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn clamp(res, 0.0, 1.0);\n}\n\nvec3 calcNormal(vec3 pos) {\n\tvec2 eps = vec2(0.001, 0.0);\n\n\tvec3 nor = vec3(map(pos + eps.xyy).x - map(pos - eps.xyy).x,\n\t\t\tmap(pos + eps.yxy).x - map(pos - eps.yxy).x,\n\t\t\tmap(pos + eps.yyx).x - map(pos - eps.yyx).x);\n\treturn normalize(nor);\n}\n\nfloat calcAO(vec3 pos, vec3 nor) {\n\tfloat occ = 0.0;\n\tfloat sca = 1.0;\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tfloat hr = 0.01 + 0.12 * float(i) / 4.0;\n\t\tvec3 aopos = nor * hr + pos;\n\t\tfloat dd = map(aopos).x;\n\n\t\tocc += -(dd - hr) * sca;\n\t\tsca *= 0.95;\n\t}\n\treturn clamp(1.0 - 3.0 * occ, 0.0, 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n\tvec3 col = vec3(0.0);\n\tvec2 res = castRay(ro, rd);\n\tfloat t = res.x;\n\tfloat m = res.y;\n\n\tif (m > -0.5) {\n\t\tvec3 pos = ro + t * rd;\n\t\tvec3 nor = calcNormal(pos);\n\n\t\t// material\n\t\tcol = Color + sin(t * 0.1) * 0.1;\n\t\tcol += 0.3 * sin(vec3(0.15, 0.02, 0.10) * iTime * 6.0);\n\n\t\t// lighitng\n\t\tfloat occ = calcAO(pos, nor);\n\t\tvec3 lig = -rd;\n\t\tfloat amb = clamp(0.5 + 0.005 * nor.y, 0.0, 1.0);\n\t\tfloat dif = clamp(dot(nor, lig), 0.0, 1.0);\n\n\t\tfloat fre = pow(clamp(1.0 + dot(nor, rd), 0.0, 1.0), 2.0);\n\n\t\tvec3 ref = reflect(rd, nor);\n\t\tfloat spe = pow(clamp(dot(ref, lig), 0.0, 1.0), 100.0);\n\n\t\tdif *= softshadow(pos, lig, 0.02, 2.5);\n\n\t\tvec3 brdf = vec3(0.0);\n\t\tbrdf += 1.20 * dif * vec3(1.00, 0.90, 0.60);\n\t\tbrdf += 1.20 * spe * vec3(1.00, 0.90, 0.60) * dif;\n\n\t\t// Additional specular lighting trick,\n\t\t// taken from \"Wet stone\" by TDM\n\t\t// https://www.shadertoy.com/view/ldSSzV\n\t\tnor = normalize(nor - normalize(pos) * 0.2);\n\t\tref = reflect(rd, nor);\n\t\tspe = pow(clamp(dot(ref, lig), 0.0, 1.0), 100.0);\n\t\tbrdf += 2.20 * spe * vec3(1.00, 0.90, 0.60) * dif;\n\n\t\tbrdf += 0.40 * amb * vec3(0.00, 0.70, 1.00) * occ;\n\t\tbrdf += 0.40 * fre * vec3(1.00, 1.00, 1.00) * occ;\n\n\t\tcol = col * brdf;\n\n\t\tcol = mix(col, vec3(0.0), 1.0 - exp(-0.005 * t * t));\n\t}\n\treturn vec3(clamp(col, 0.0, 1.0));\n}\n\nmat3 rotationZ(float a) {\n\tfloat sa = sin(a);\n\tfloat ca = cos(a);\n\n\treturn mat3(ca, sa, 0.0, -sa, ca, 0.0, 0.0, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 q = fragCoord / iResolution.xy;\n\tvec2 coord = 2.0 * q - 1.0;\n\tcoord.x *= iResolution.x / iResolution.y;\n\tcoord *= FOV;\n\n    float t = iTime * CameraSpeed + 4.0 * 60.0;\n    vec3 ro = vec3(path(t), t);\n\n    t += 0.5;\n    vec3 target = vec3(path(t), t);\n    vec3 dir = normalize(target - ro);\n    vec3 up = vec3(-0.9309864, -0.33987653, 0.1332234) * rotationZ(iTime * 0.05);\n    vec3 upOrtho = normalize(up - dot(dir, up) * dir);\n    vec3 right = normalize(cross(dir, upOrtho));\n\n    vec3 rd = normalize(dir + coord.x * right + coord.y * upOrtho);\n\n    vec3 col = render(ro, rd);\n\n    col = pow(col, vec3(0.4545));\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}