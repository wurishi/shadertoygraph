{"ver":"0.1","info":{"id":"cscfRM","date":"1696949671","viewed":40,"name":"fae","username":"makscee","description":"fae","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fbm","warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.141592653589793\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nfloat hash(vec2 p, float t)\n{\n    vec3 p3 = vec3(p, t);\n    p3  = fract(p3*0.1031);\n    p3 += dot(p3, p3.zyx+31.32);\n    return fract((p3.x+p3.y)*p3.z);\n}\n\nfloat noise(vec2 p, float t)\n{\n    vec4 b = vec4(floor(p), ceil(p));\n    vec2 f = smoothstep(0.0, 1.0, fract(p));\n    return mix(mix(hash(b.xy, t), hash(b.zy, t), f.x), mix(hash(b.xw, t), hash(b.zw, t), f.x), f.y);\n}\n\n#define num_octaves 3\nfloat fbm(vec2 v)\n{\n    float value = 0.0;\n    float scale = 1.0;\n    float atten = 0.5;\n    float t = 0.0;\n    for(int i = 0; i < num_octaves; i++)\n    {\n        t += atten;\n        value += noise(v*scale, float(i))*atten;\n        scale *= 2.0;\n        atten *= 0.5;\n        v = rotate(v, 0.125*pi);\n    }\n    return value/t;\n}\nvec2 fbm_vec(vec2 v, vec2 offset) {\n\treturn vec2(fbm(v), fbm(v + offset)) - vec2(.5);\n}\nvec2 warp(vec2 v, float str, vec2 offset) {\n\treturn v + fbm_vec(v, offset) * str;\n}\nfloat smoothhump(float start, float end, float spread, float t) {\n    return min(smoothstep(start - spread, start + spread, t), smoothstep(end + spread, end - spread, t));\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.yy * 1.9;\n    uv = warp(warp(uv, .2, vec2(iTime,0)), .6, vec2(iTime * .2, 2.));\n    float v = 1.1 - length(uv);\n    vec3 col = vec3(v);\n    const float SPREAD = 0.003;\n    const float THICKNESS = 0.05;\n    const float DIVISIONS = 50.;\n    for(float i = 1.; i < DIVISIONS; i += 1.) {\n        float vi = i / DIVISIONS;\n        col += smoothhump(vi, vi + THICKNESS, SPREAD, v) * hsv2rgb(vec3(noise(vec2(vi * 3.,vi), iTime * 0.001 + 0.00001 * i), 2., .08));\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}