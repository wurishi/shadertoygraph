{"ver":"0.1","info":{"id":"ddSXDd","date":"1671084268","viewed":80,"name":"Paper texture + basic SDF","username":"Ezra_Szanton","description":"paper texture I want to use as a background for future projects. Attempts to make a normal map with perlin noise and then shine a diffuse \"light\" on it","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","texture","paper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//hash function taken from https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat smoothNoise(vec2 uv)\n{\n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    lv = lv * lv * (3. - 2.*lv);\n    \n    float bl = hash12(id);\n    float br = hash12(id + vec2(1., 0.));\n    \n    float b = mix(bl, br, lv.x);\n    \n    \n    float tl = hash12(id + vec2(0., 1.));\n    float tr = hash12(id + vec2(1., 1.));\n    \n    float t = mix(tl, tr, lv.x);\n    \n    float c = mix(b,t, lv.y);\n    return c;\n}\n\nfloat perlin(vec2 uv, float seed)\n{\n    \n    float c = smoothNoise(uv * 4.* sin(seed * 0.01 + .113));\n    c += smoothNoise(uv * 8. * sin(seed * 0.08 + .534)) * 0.25;\n    c += smoothNoise(uv * 8. * sin(seed * 0.09 + .334)) * 0.25;\n    c += smoothNoise(uv * 16. * sin(seed * 0.1 + 1.513)) * 0.25;\n    c += smoothNoise(uv * 32.* sin(seed * 0.042 + .213)) * 0.125;\n    c += smoothNoise(uv * 64. * sin(seed * 0.0037 + .113)) * 0.0625;\n    c /= 2.;\n    return c;\n}\n\n//from here: https://iquilezles.org/articles/distfunctions2d/\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord /iResolution.x;\n    uv *= 4.2;\n    //uv += vec2(10., -9.);\n    //uv *= 400.0;\n    float x = 0.5 * perlin(uv * 10.1, 103.324);\n    float y = 2.2 * smoothNoise(uv * 534.345) + perlin(uv * 10.1, 57.124);\n    float z = 1.0;//perlin(uv * 5.1, 4.124);\n    \n    vec3 normal = normalize(vec3(x, y, z));\n    \n    //vec3 color1 = vec3(0.4, 0.8, 0.5);\n    //vec3 color2 = vec3(0.2, 0.1, 0.2);\n    //vec3 color3 = vec3(0.5, 0.5, 0.95);\n    \n    vec3 lightDir = vec3(.2, 0.8, 0.0);\n    float diffuse = dot(normal, normalize(lightDir)) - 0.4;\n    if(diffuse < 0.0) diffuse = 0.0;\n    \n    // Time varying pixel color\n    //vec3 col = vec3(mix( mix(color1, color2, c * 1.2) * 0.5, color3, fract(c * 12.321) ));\n\n    vec3 baseColor = vec3(0.98, 0.97, 0.97);\n    \n    float val = distance(vec2(1.7, 1.), uv);\n    float val2 = .9 - distance(vec2(.8, 1.1), uv);\n    float val3 = sdEquilateralTriangle(vec2(-3.0) + uv * 2.2);\n    val = max( val3, 0.9 * val2 + 0.1 * val);\n    //val = sqrt(val);\n    baseColor = mix ( baseColor, vec3(0.1, 0.1, 0.1), smoothstep( 1., -1.,(val-.61)/fwidth(val) ) );\n    baseColor = mix ( baseColor, vec3(250,208,76) / 255., smoothstep( 1., -1.,(val-.6)/fwidth(val) ) );\n    baseColor = mix ( baseColor, vec3(0.1, 0.1, 0.1), smoothstep( 1., -1.,(val-.21)/fwidth(val) ) );\n    baseColor = mix ( baseColor,vec3(71, 109, 166) / 255.0, smoothstep( 1., -1.,(val-.2)/fwidth(val) ) );\n    baseColor = mix ( baseColor, vec3(0.1, 0.1, 0.1), smoothstep( 1., -1.,(val-.11)/fwidth(val) ) );\n    baseColor = mix ( baseColor,vec3(254, 98, 53) / 255.0, smoothstep( 1., -1.,(val-.1)/fwidth(val) ) );\n    // Output to screen\n    fragColor = vec4(1.0 * baseColor - 0.15 * diffuse, 1.0);//\n    //fragColor = vec4(val, val, val, 1.0);//\n}","name":"Image","description":"","type":"image"}]}