{"ver":"0.1","info":{"id":"43fBWn","date":"1728224000","viewed":93,"name":"Hex MÃ¶bius","username":"Docteur_Raton","description":"I implemented a simple anti-aliasing in the main function but it still looks quite noisy in the center","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["mobius","hex","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 s = vec3(0., 1., -1.);\nconst float pi = acos(-1.);\nconst float two_pi = 2. * pi;\n\nfloat dot2(vec2 v)\n{\n\treturn dot(v, v);\n}\n\nvec2 cmul(vec2 a, vec2 b)\n{\n\treturn vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 cdiv(vec2 a, vec2 b)\n{\n\treturn vec2(a.x * b.x + a.y * b.y, a.y * b.x - a.x * b.y) / dot2(b);\n}\n\nvec2 transform(vec2 z)\n{\n\tz -= s.yx;\n\tz = cdiv(s.yx - z, s.yx + z);\n\tz += 2. * iTime * s.xy;\n\n\treturn z;\n}\n\n// Reference:  https://www.shadertoy.com/view/Xljczw.\nvec4 convertToHexcoords(vec2 p)\n{\n\tvec2 diagonal = vec2(1, 1.7320508);\n    vec4 center = floor(vec4(p, p - vec2(.5, 1)) / diagonal.xyxy) + .5;\n    vec4 coords = vec4(p - center.xy * diagonal,\n\t\tp - (center.zw + .5) * diagonal);\n\n    return dot(coords.xy, coords.xy)\n\t\t< dot(coords.zw, coords.zw)\n\t\t? vec4(coords.xy, center.xy)\n\t\t: vec4(coords.zw, center.zw + .5);\n}\n\n// Reference: https://www.shadertoy.com/view/Xljczw.\nfloat findDistanceToCenter(vec2 h)\n{\n\th = abs(h);\n\tvec2 diagonal = vec2(1, 1.7320508);\n\treturn max(dot(h, .5 * diagonal), h.x);;\n}\n\n// Reference: https://iquilezles.org/articles/palettes/.\nvec3 applyPalette(float t)\n{\n\tvec3 a = vec3(0.650, 0.650, 0.650);\n\tvec3 b = vec3(0.450, 0.450, 0.450);\n\tvec3 c = vec3(1.000, 1.000, 1.000);\n\tvec3 d = vec3(0.000, 0.333, 0.667);\n\n    return a + b *  cos(two_pi *(c * t + d));\n}\n\nvec3 render(vec2 coord)\n{\n\tvec2 uv = (2. * coord - iResolution.xy) / iResolution.y;\n\tuv = transform(uv);\n\tvec4 h = convertToHexcoords(uv);\n\tfloat dist = findDistanceToCenter(h.xy);\n\n\treturn clamp(vec3(.01 / abs(.4 - dist)) * applyPalette(.05 * uv.y), 0., 1.);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n\tvec3 col = s.xxx;\n\tfor (float i = -1.; i <= 1.; ++i)\n\t{\n\t\tfor (float j = -1.; j <= 1.; ++j)\n\t\t{\n\t\t\tcol += render(fragCoord + .333 * vec2(i, j));\n\t\t}\n\t}\n\tcol /= 9.;\n\n\tfragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}