{"ver":"0.1","info":{"id":"dlSyDc","date":"1692358756","viewed":142,"name":"invmin/invmax for free","username":"FabriceNeyret2","description":"find the location of the min or max in the image for free, using GeneralPurpose MIPmaps.\nNote: MIPmap can be very wrong with non-power of 2, especially on Windows. Better use with CubeMap. alas, only half precision then. ","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["minmax","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// more robust CubeMap based variant here: https://www.shadertoy.com/view/Dl2yDc\n// inspired from https://shadertoy.com/view/3sKGWy\n\nfloat LOD = 9.;                                         // less for local extremas\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texture(iChannel0, U/R).xxxw;                   // source image + resol\n\n    int  l = int(max(0.,LOD+log2(R.y/O.w)));            // select lod\n    vec4 M = texelFetch(iChannel1, ivec2(U)>>l, l);     // fetch partial sum\n    //O += M.xyww;                                      // ( for debug )\n    M /= M.z;                                           // normalize position with weight : should show ~invmin\n\n    O = mix(O, vec4(1,0,0,0), smoothstep( 11.5, 10., length(M.xy-U) )); // plot the position\n\n    O = pow( O, vec4(1./2.2) );                         // back to sRGB\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// === source image ================================\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O.x = pow( length( texture(iChannel0, U/R).rb ) , 4. ); \n // O.x = pow( length( texture(iChannel0, U/R).rb ) / 1.3, 2.2. );// luminance\n    O.w = iChannelResolution[0].y;                                // source resolution\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define POW 10.  // the larger the better min/max, but more bigfloats precision issues\n\n#define R  (iResolution.xy)\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// === prepare (inv)min/max calculation ========================\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n // float w = pow( texture(iChannel0, U/R).x, -POW ) ;  // this approximates MIN. then apply pow(LODmax, -1/POW)\n    float w = pow( texture(iChannel0, U/R).x,  POW ) ;  // this approximates MAX. then apply pow(LODmax,  1/POW)\n \n    O.xy = U*w;                                         // weighted location\n    O.z  = w;                                           // weight\n}","name":"Buffer B","description":"","type":"buffer"}]}