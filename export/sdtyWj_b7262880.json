{"ver":"0.1","info":{"id":"sdtyWj","date":"1654094069","viewed":109,"name":"Sphere SDF WIP","username":"sin3point14","description":"sdf","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float RADIUS = 10.0f;\nconst vec3 POS = vec3(0, 0, 30);\nconst vec3 camera = vec3(0,0, -1);\n\nconst vec3 MAT_COLOR = vec3(0.7,0.3,0.1);\n\nconst vec3 LIGHT = vec3(15.0f, 3.0f, 5.0f);\n\nconst vec3 DIFFUSE_COL = vec3(0,0.4,0);\nconst vec3 AMBIENT_COL = vec3(0.1, 0.1, 0.1);\nconst vec3 SPECULAR_COL = vec3(1,1,1);\n\nfloat howFarSphere(vec3 curr)\n{\n    return distance(curr, POS) - RADIUS;\n}\n\nfloat isIntersectSphere(vec3 rayDirecn)\n{\n    vec3 spherePos = POS - camera;\n    float dist = length(cross(spherePos, rayDirecn));\n    return dist > RADIUS ? 0.0f : 1.0f;\n}\n\nvec3 colorIntersectSphere(vec3 rayDirecn)\n{\n    vec3 spherePos = POS - camera;\n    float dist = length(cross(spherePos, rayDirecn));\n    if (dist > RADIUS)\n        return vec3(0.0f,0.0f,0.0f);\n    vec3 displacementUntilCentre = dot(rayDirecn, spherePos) * rayDirecn;\n    \n    vec3 intersection = displacementUntilCentre - rayDirecn * sqrt(RADIUS * RADIUS - dist * dist);\n    \n    vec3 normal = normalize(intersection - spherePos);\n    \n    vec3 color = vec3(0,0,0);\n    \n    color += AMBIENT_COL;\n    \n    vec3 lightDisplacement = intersection - LIGHT;\n    \n    color += DIFFUSE_COL * dot(-normalize(lightDisplacement), normal);\n    \n    vec3 reflected = normalize(reflect(lightDisplacement, normal));\n    \n    color += SPECULAR_COL * pow(clamp(dot(reflected, normalize(-intersection)), 0.0f, 1.0f), 6.0);\n    \n    color *= MAT_COLOR;\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord/iResolution.y - vec2(0.5 * iResolution.x / iResolution.y,0.5);\n    vec3 ray = normalize(vec3(uv, 0) - camera);\n\n    // ray tracing\n    // fragColor = vec4(colorIntersectSphere(ray), 1.0f);\n    \n    // ray marching\n    float curr = 0.0f;\n    for(float dist = 0.0f; dist < 1000.0f; dist += curr)\n    {\n        curr = howFarSphere(camera + dist * ray);\n        if (curr < 0.01f) // hit\n        {\n            fragColor = vec4(1,1,1,1);\n            return;\n        }\n    }\n    fragColor = vec4(0,0,0,1);\n}","name":"Image","description":"","type":"image"}]}