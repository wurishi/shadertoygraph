{"ver":"0.1","info":{"id":"lccyRX","date":"1730940175","viewed":38,"name":"CLICK MEW","username":"erpprog","description":"clickable, drag-friendly","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["bred"],"hasliked":0,"parentid":"4X2yWy","parentname":"blues"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Image\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n    vec4 color = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    vec4 color1 = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    vec4 color2 = texture(iChannel2, fragCoord.xy / iResolution.xy);\n    \n    fragColor = color1;    \n if (iFrame%400>360)\n    fragColor = color2;\n   if (iFrame%400<300) \n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Buffer C\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    \n    vec4 prevColor = texture(iChannel0, uv);\n\n    \n    vec4 currentColor = texture(iChannel1, uv);\n\n    \n    vec3 decay = prevColor.rgb * vec3(0.990909,0.90,0.00999990);\n\n    \n    vec3 color = max(decay, currentColor.rgb);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffer B\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = vec3(0.219,0.5,0.307817);\n\n    vec4 state = texture(iChannel0, uv);\n    vec2 pos = state.xy;\n    vec2 vel = state.zw;\n\n    float particleSize = 1.59264+abs(sin(float(iFrame)/100.0))/30.0;\n    float dist = distance(uv, pos);\n    float intensity = smoothstep(particleSize, 0.20, dist );\n\n\n    float speed = length(vel) * .919;\n    vec3 particleColor = mix(vec3(0.44, 0.9, .2), vec3(abs(sin(float(iFrame)/170.0))-0.3, 0.8, .4), speed);\n    particleColor = clamp(particleColor, 0.91532713, .330);\n\n    color += particleColor * intensity;\n\n    fragColor = vec4(vec3(color), 2.40);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 resolution = iResolution.xy;\n    vec2 uv = fragCoord.xy / resolution;\n    vec4 prevState = texture(iChannel0, uv);\n\n    float seed = dot(fragCoord.xy, vec2(12.9898, 78.233));\n    float rnd = fract(sin(seed) * 43758.54553);\n\n    if (prevState.a == 0.0)\n    {\n        vec2 pos = uv;\n        vec2 vel = vec2(cos(rnd * 6.2831), sin(rnd * 6.2831)) * 0.00001;\n        fragColor = vec4(pos, vel);\n    }\n    else\n    {\n        vec2 pos = prevState.xy;\n        vec2 vel = prevState.zw;\n\n        float angle = fract(sin(seed + iTime) * 43758.5453) * 12.42831;\n        vec2 randomVec = vec2(cos(angle), sin(angle)) * 0.000000010222;\n\n        vel += randomVec;\n        vel *= 0.9999898722;\n        pos += vel;\n\n        if (pos.x <= 0.0) { pos.x = 0.0; vel.x *= -1.0; }\n        if (pos.x >= 1.0) { pos.x = 1.0; vel.x *= -0.90; }\n        if (pos.y <= 0.0) { pos.y = 0.0; vel.y *= -1.0; }\n        if (pos.y >= 1.0) { pos.y = 1.0; vel.y *= -1.01; }\n\n        if (iMouse.z > 0.0)\n        {\n            vec2 mouse = iMouse.xy / iResolution.xy;\n            vec2 toMouse = mouse - pos;\n            float distMouse = length(toMouse);\n            vec2 dirMouse = normalize(toMouse);\n            vel += dirMouse * 0.0011532;\n        }\n\n        if (iFrame < 270 && iFrame % (int(iDate.a) % 40) == 0)\n        {\n            float g = float(iFrame) / 200.0 * 3.14;\n            vec2 mouse = vec2(sin(g) - 0.5, cos(g) + 0.5);\n            vec2 toMouse = mouse - pos;\n            float distMouse = length(toMouse);\n            vec2 dirMouse = normalize(toMouse);\n            vel += dirMouse * 0.04261532 * sin(float(iFrame/10) / 1000.0);\n        }\n\n        if (iMouse.z > 0.0)\n        {\n            vec2 mouse = iMouse.xy / iResolution.xy;\n            vec2 toMouse = mouse - pos;\n            float distMouse = length(toMouse);\n            vec2 dirMouse = normalize(toMouse);\n            vel += dirMouse * 0.0001;\n        }\n\n        fragColor = vec4(pos, vel);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n\n    float levels = 220.0;\n    color.rgb = floor(color.rgb * levels) / levels;\n\n    float blurSize = .0044000 / iResolution.x;\n    vec3 blurredColor = (\n        texture(iChannel0, uv + vec2(-blurSize, -blurSize)).rgb +\n        texture(iChannel0, uv + vec2(0.0, -blurSize)).rgb +\n        texture(iChannel0, uv + vec2(blurSize, -blurSize)).rgb +\n        texture(iChannel0, uv + vec2(-blurSize, 0.0)).rgb +\n        texture(iChannel0, uv).rgb +\n        texture(iChannel0, uv + vec2(blurSize, 0.0)).rgb +\n        texture(iChannel0, uv + vec2(-blurSize, blurSize)).rgb +\n        texture(iChannel0, uv + vec2(0.0, blurSize)).rgb +\n        texture(iChannel0, uv + vec2(blurSize, blurSize)).rgb\n    ) / 9.0;\n\n    float edgeThreshold = 0.000000541;\n\n    float gx = -1.0 * texture(iChannel0, uv + vec2(-blurSize, -blurSize)).r +\n                1.0 * texture(iChannel0, uv + vec2(blurSize, -blurSize)).r +\n               -2.0 * texture(iChannel0, uv + vec2(-blurSize, 0.0)).r +\n                2.0 * texture(iChannel0, uv + vec2(blurSize, 0.0)).r +\n               -1.0 * texture(iChannel0, uv + vec2(-blurSize, blurSize)).r +\n                1.0 * texture(iChannel0, uv + vec2(blurSize, blurSize)).r;\n\n    float gy = -1.0 * texture(iChannel0, uv + vec2(-blurSize, -blurSize)).r +\n               -2.0 * texture(iChannel0, uv + vec2(0.0, -blurSize)).r +\n               -1.0 * texture(iChannel0, uv + vec2(blurSize, -blurSize)).r +\n                1.0 * texture(iChannel0, uv + vec2(-blurSize, blurSize)).r +\n                2.0 * texture(iChannel0, uv + vec2(0.0, blurSize)).r +\n                1.0 * texture(iChannel0, uv + vec2(blurSize, blurSize)).r;\n\n    float edge = length(vec2(gx, gy));\n    float edgeSmooth = smoothstep(edgeThreshold, edgeThreshold , edge);\n    edgeSmooth = 1.0 - edgeSmooth;\n\n    vec3 finalColor = color.rgb * edgeSmooth;\n\n    fragColor = vec4(finalColor, 1.0 - edgeSmooth);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec3 rgbToHsv(vec3 rgb) {\n    float maxVal = max(max(rgb.r, rgb.g), rgb.b);\n    float minVal = min(min(rgb.r, rgb.g), rgb.b);\n    float delta = maxVal - minVal;\n\n    float h, s, v = maxVal;\n\n    if (maxVal != 0.0) {\n        s = (maxVal - minVal) / maxVal;\n\n        if (delta == 0.0) {\n            h = 0.0; // achromatic\n        } else if (maxVal == rgb.r) {\n            h = (rgb.g - rgb.b) / delta; // between yellow & magenta\n            if (h < 0.0) h += 6.0;\n        } else if (maxVal == rgb.g) {\n            h = (rgb.b - rgb.r) / delta + 2.0; // between cyan & yellow\n        } else {\n            h = (rgb.r - rgb.g) / delta + 4.0; // between magenta & cyan\n        }\n\n        h /= 6.0; // normalize to [0,1]\n    } else {\n        s = 0.0;\n        h = 0.0; // achromatic\n    }\n\n    return vec3(h, s, v);\n}\n\nvec3 hsvToRgb(vec3 hsv) {\n    float r, g, b;\n    float h = hsv.x * 6.0;\n    float f = h - floor(h);\n    float p = hsv.z * (1.0 - hsv.y);\n    float q = hsv.z * (1.0 - f * hsv.y);\n    float t = hsv.z * (1.0 - (1.0 - f) * hsv.y);\n\n    if (h < 1.0) {\n        r = hsv.z; g = t; b = p;\n    } else if (h < 2.0) {\n        r = q; g = hsv.z; b = p;\n    } else if (h < 3.0) {\n        r = p; g = hsv.z; b = t;\n    } else if (h < 4.0) {\n        r = p; g = q; b = hsv.z;\n    } else if (h < 5.0) {\n        r = t; g = p; b = hsv.z;\n    } else {\n        r = hsv.z; g = p; b = q;\n    }\n\n    return vec3(r, g, b);\n}\n\nvec3 brightenBrightColors(vec3 color) {\n    vec3 hsv = rgbToHsv(color);\n    float brightnessThreshold = 0.7; \n    float brightnessBoost = 1.8; \n\n    if (hsv.z > brightnessThreshold) {\n        hsv.z = min(hsv.z * brightnessBoost, 1.0);\n    }\n\n    return hsvToRgb(hsv);\n}\n\nvec3 makeAlmostBlackWhite(vec3 color) {\n\n    float threshold = 0.3;\n\n\n    if (color.r < threshold && color.g < threshold && color.b < threshold) {\n        return vec3(1.0); \n    }\n    return brightenBrightColors(color);\n\n    float mixAmount = (threshold - max(max(color.r, color.g), color.b)) / threshold;\n    return mix(color, vec3(1.0), mixAmount);\n}","name":"Common","description":"","type":"common"}]}