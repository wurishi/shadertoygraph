{"ver":"0.1","info":{"id":"ftBfDD","date":"1652194095","viewed":120,"name":"Mandelbrot zoom (test)","username":"kugge","description":"Mandelbrot zoom until float point precision runs out","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","julia","mandelbrot","complex"],"hasliked":0,"parentid":"ftBfWh","parentname":"Julia rotation test"},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define maxIter 256.\n#define maxNorm 1000.\n\n\n// Color palette\nvec3 color(float v) {\n    vec3 co;\n    if(v == 1.)       co = vec3(25, 7, 26);\n    else if(v == 2.)  co = vec3(9, 1, 47);\n    else if(v == 3.)  co = vec3(4, 4, 73);\n    else if(v == 4.)  co = vec3(0, 7, 100);\n    else if(v == 5.)  co = vec3(12, 44, 138);\n    else if(v == 6.)  co = vec3(24, 82, 177);\n    else if(v == 7.)  co = vec3(57, 125, 209);\n    else if(v == 8.)  co = vec3(134, 181, 229);\n    else if(v == 9.)  co = vec3(211, 236, 248);\n    else if(v == 10.) co = vec3(241, 233, 191);\n    else if(v == 11.) co = vec3(248, 201, 95);\n    else if(v == 12.) co = vec3(255, 170, 0);\n    else if(v == 13.) co = vec3(204, 128, 0);\n   \telse if(v == 14.) co = vec3(153, 87, 0);\n    else if(v == 15.) co = vec3(106, 52, 3);\n    return co / 256.0;;\n}\n\n// Complex multiplication\nvec2 cMul(vec2 a, vec2 b) {\n    vec2 m = vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n    return m;\n}\n\n// Iterate mandelbrot sequence zÂ² + c\nfloat iterMandelbrot(vec2 c) { \n    float i = 0.;\n    vec2 z = vec2(0.); // u_0\n    \n    for (i = 0.; i<maxIter; ++i) {\n        if (dot(z, z) > maxNorm) break;\n        z = cMul(z, z) + c;\n    }\n    float lz = log(dot(z, z)) / 2.; // log(||z||)\n    float nu = log(lz / log(2.)) / log(2.);\n    return i;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy; // Normalize\n    uv -= 0.5; // Center\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.5;\n    \n    // Rotation\n    float theta = -iTime*0.05*log(log(iTime+1.));\n    uv *= mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n    \n    // Zoom\n    float zoom = pow(0.00001, sin((iTime+30.) * 0.25)) + 0.1;\n    uv = vec2(-0.745592, 0.10003) + uv / (zoom * 10.5);\n\n    \n    float d = iterMandelbrot(uv);\n    vec3 col = color(mod(d, 16.));\n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}