{"ver":"0.1","info":{"id":"mlXBD2","date":"1693464224","viewed":104,"name":"EasyFace","username":"tbx","description":"This is simple 2D distance field work.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["easyface"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawCoord(vec2 uv)\n{\n    float x = distance(uv, vec2(uv.x, 0.0));\n    x = 1.0 - step(0.002, x);\n    float y = distance(uv, vec2(0.0, uv.y));\n    y = 1.0 - step(0.002, y);\n    return x + y;\n}\n\nfloat drawSphere(vec2 uv, vec2 p, float r)\n{\n    float d = distance(uv, p);\n    d = d > r ? 0.0 : (1.0 - d);\n    d = smoothstep(0.0, 1.0, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    \n    //col += drawCoord(uv);\n    \n    float scale = 1.25;\n    \n    float f = drawSphere(uv, vec2(0.0), 0.5 * scale);\n    \n    float e1 = drawSphere(uv, vec2(0.2, 0.15) * scale, 0.1 * scale);\n    float e2 = drawSphere(uv, vec2(-0.2, 0.15) * scale, 0.1 * scale);\n    \n    float st = sin(iTime) * 0.05 - 0.04;\n    float p1 = drawSphere(uv, vec2(0.24 + st, 0.15) * scale, 0.05 * scale);\n    float p2 = drawSphere(uv, vec2(-0.16 + st, 0.15) * scale, 0.05 * scale);\n    \n    float sp1 = drawSphere(uv * vec2(1.0, 1.5), vec2(0.0, - 0.05) * scale, 0.3 * scale);\n    float sp2 = drawSphere(uv * vec2(1.0, 1.5), vec2(0.0, - 0.1) * scale, 0.3 * scale);\n    \n    float m = max(sp2 - sp1, 0.0);\n    \n    vec3 fCol = vec3(f - e1 - e2 - m - p1 - p2) * vec3(1.0, 0.75, 0.1);\n    col = fCol;\n    \n    vec3 eCol = vec3(e1 + e2 - p1 - p2) * vec3(0.3, 0.6, 0.75);\n    col += eCol;\n    \n    vec3 mCol = vec3(m);\n    col += mCol;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}