{"ver":"0.1","info":{"id":"MXj3Rz","date":"1708145549","viewed":49,"name":"LV 3 Raymarching","username":"hamsterisnotcute","description":"wowowowowowo","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Distance to the scene\nfloat sdBox(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0) + min(max(q.x, max(q.y, q.z)), 0.0));\n}\n\nfloat sdSphere(vec3 p, float s){\n    return length(p) - s;\n}\n\nfloat smin(float a, float b, float k){\n    float h = max(k - abs(a-b), 0.0) /k;\n    return min(a, b) - h*h*h*k* (1.0 / 6.0);\n}\n\nmat2 rot2D(float angle){\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdOctahedron(vec3 p, float s){\n    p = abs(p);\n    return (p.x + p.y + p.z - s) * 0.57735027;\n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle){\n    return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);\n}\n\nfloat map(vec3 p){\n    p.z += iTime * 0.4; // Forward movement\n    \n    // Space repetition\n    p.xy = (fract(p.xy) - 0.5);  //Spacing : 1\n    p.z = mod(p.z, 0.25) - 0.125; //Spacing: 0.25\n    \n    float box = sdBox(p, vec3(0.75));  \n    \n    return box;\n}\n\nvec3 palette(float t){\n    vec3 a = vec3(1.0, 0.5, 1.0);\n    vec3 b = vec3(0.5, 0.5, 1.0);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y; \n    \n    // Initialization\n    vec3 ro = vec3(0, 0, -3); //ray origin\n    vec3 rd = normalize(vec3(uv, 1)); //ray direction\n    vec3 col = vec3(0); //final pixel color\n    \n    float t = 0.0; // total distance travelled\n    \n    //Default circular motion if mouse not clicked\n    if (iMouse.z < 0.0) m = vec2(cos(iTime * 0.2), sin(iTime * 0.2));\n     \n    int i;//Raymarching\n    for (int i = 0; i < 80; i++)\n    {\n        vec3 p = ro + rd * t;  // position along the ray\n        \n        p.xy *= rot2D(t * 0.2 * m.x); //rotate ray around z-axis\n        \n        p.y += sin(t * (m.y + 1.0) * 0.5) * 0.35; // wiggle ray\n    \n        float d = map(p);     // current distance to the scene\n        \n        t += d;             // \"march\" the ray\n        \n        if (d < 0.001 || t > 100.0) break; // early stop       \n    }\n    \n    \n    // Coloring\n    col = palette(t * 0.04 + float(i) * 0.005);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}