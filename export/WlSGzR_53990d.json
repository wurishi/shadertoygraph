{"ver":"0.1","info":{"id":"WlSGzR","date":"1558172594","viewed":254,"name":"Traced Blender uv color grid","username":"FMS_Cat","description":"traced perceptually, since I could not find the original source code of the texture heh","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define RESOLUTION vec2( 1024.0 )\n#define RESOLUTION iResolution.xy\n\n#define INV4 0.25\n#define INV32 0.03125\n#define INV64 0.015625\n#define INV128 0.0078125\n#define INV255 0.00392156862\n\n// https://en.wikipedia.org/wiki/HSL_and_HSV\nvec3 hueColor( in float hue ) {\n    float hd = mod( hue * 0.016666666667, 6.0 );\n    float x = 1.0 - abs( mod( hd, 2.0 ) - 1.0 );\n    return (\n        hd < 1.0 ? vec3( 1.0, x, 0.0 ) :\n        hd < 2.0 ? vec3( x, 1.0, 0.0 ) :\n        hd < 3.0 ? vec3( 0.0, 1.0, x ) :\n        hd < 4.0 ? vec3( 0.0, x, 1.0 ) :\n        hd < 5.0 ? vec3( x, 0.0, 1.0 ) :\n                   vec3( 1.0, 0.0, x )\n    );\n}\n\nvec3 hueShift( in vec3 rgb, in float hue ) {\n\tfloat rgbMax = max( rgb.r, max( rgb.g, rgb.b ) );\n    float rgbMin = min( rgb.r, min( rgb.g, rgb.b ) );\n    float c = rgbMax - rgbMin;\n    float h = 60.0 * mod( (\n    \trgbMax == rgb.r ? (       ( rgb.g - rgb.b ) / c ) :\n    \trgbMax == rgb.g ? ( 2.0 + ( rgb.b - rgb.r ) / c ) :\n    \t                  ( 4.0 + ( rgb.r - rgb.g ) / c )\n    ), 6.0 );\n    return rgbMin + c * hueColor( h + hue );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / RESOLUTION;\n    if ( 1.0 < uv.x || 1.0 < uv.y ) { discard; }\n\n    // prepare coords\n    vec2 coordMod2 = mod( fragCoord, 2.0 );\n    vec2 coordMod8 = mod( fragCoord, 8.0 );\n    vec2 coordMod128 = mod( fragCoord, 128.0 );\n\n    // base colo\n    vec3 col = vec3( mix( 64.0, 163.0, uv.y ), 36.0, 36.0 ) * INV255;\n    float hueSectionWidth = pow( 2.0, ceil( log( RESOLUTION.x ) / log( 2.0 ) ) - 3.0 );\n    float hue = 360.0 * ( floor( fragCoord.x / hueSectionWidth ) * hueSectionWidth ) / RESOLUTION.x;\n    col = hueShift( col, hue );\n\n    // grid lines\n    vec2 coordMod32 = mod( fragCoord, 32.0 );\n    if ( coordMod32.x < 1.0 || coordMod32.y < 1.0 ) {\n        col += 63.0 * INV255;\n    }\n\n    // checkers\n    vec2 coordChecker2 = floor( mod( fragCoord, 2.0 ) );\n    col += 4.0 * INV255 * mod( 1.0 + coordChecker2.x + coordChecker2.y, 2.0 );\n    vec2 coordChecker8 = floor( mod( fragCoord, 8.0 ) * INV4 );\n    col += 6.0 * INV255 * mod( 1.0 + coordChecker8.x + coordChecker8.y, 2.0 );\n    vec2 coordChecker64 = floor( mod( fragCoord, 64.0 ) * INV32 );\n    col += 9.0 * INV255 * mod( 1.0 + coordChecker64.x + coordChecker64.y, 2.0 );\n    vec2 coordChecker256 = floor( mod( fragCoord, 256.0 ) * INV128 );\n    col += 19.0 * INV255 * mod( 1.0 + coordChecker256.x + coordChecker256.y, 2.0 );\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}