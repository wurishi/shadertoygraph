{"ver":"0.1","info":{"id":"MfGSzh","date":"1714767787","viewed":50,"name":"Iso tile rendering exercise ","username":"Dubko","description":"Found an interesting idea at LinkedIn and tried to reproduce it.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","iso"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Count of tiles per screen dimension\nfloat numTiles = 100.0;\n\n// Converts continuous UV coordinates to discrete tile coordinates\nvec2 uv_to_grid(in vec2 uv)\n{\n    uv = vec2(uv.x + uv.y, uv.y - uv.x);\n    uv = uv * numTiles;\n    \n    return floor(uv);\n}\n\nconst vec3 colorA = vec3(0.0,0.5,0.0);\nconst vec3 colorB = vec3(0.0,1.0,0.0);\n\n// Converts discrete tile coordinates to binary color\nvec3 grid_to_color(vec2 coords)\n{\n    vec2 color = mod(coords, 2.0);\n    \n    \n    return texture(iChannel0, coords/numTiles).yxy;\n    \n    //float isWhite = mod(color.x + color.y,2.0);\n    \n    //if(isWhite > 0.0) return colorA; else return colorB;\n}\n\nvec2 center = vec2(100,0);\nfloat maxRadius = 50.0;\n\n//vec4 boundaries = vec4(60,-30,120,20);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvMouse = iMouse.xy/iResolution.xy;\n    \n    uv = uv_to_grid(uv);\n    \n    // Select color for grid position\n    vec3 color = grid_to_color(uv);\n    \n    // Determine if user clicked on tile\n    vec2 gridMouse = uv_to_grid(uvMouse);\n    float isMouseActivated = float(max(0.0,1.0-length(gridMouse-uv)));\n    \n    // Turn on some tiles in rectagle on the map\n    //float tileAlwaysOn = float(uv.x > 6.0 && uv.x < 13.0 && uv.y > -5.0 && uv.y < 4.0);\n    \n    \n    float tileAlwaysOn = float(length(vec2(1.0,1.5)*uv - center) < maxRadius);\n    //float tileAlwaysOn = float(uv.x > boundaries.x && uv.y > boundaries.y && uv.x < boundaries.z && uv.y < boundaries.w);\n    //float tileAlwaysOn = 1.0;\n    \n    // finally, compute if tile should be visible\n    float isTileActive = isMouseActivated + tileAlwaysOn;\n    \n    vec3 col = vec3(color*isTileActive);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}