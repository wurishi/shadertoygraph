{"ver":"0.1","info":{"id":"cdsBWN","date":"1688748592","viewed":115,"name":"spinning Hexagons","username":"tondoa","description":"Spinning Hexagons","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_HEXAGON 32.\n#define RADIUS 0.05\n#define ROTATION 20.\n#define LINE_SIZE 0.005\n\n\n\nconst float PI = 3.14;\n\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float eps = min((2. + iTime*0.25), 9.) / iResolution.y;\n    \n    \n    vec3 finalColor = vec3(0.03);\n    \n   \n    for(float i = 1.; i < NUM_HEXAGON+1.; i++) {\n        //radius of each hexagon\n        float r = RADIUS * i /** (iTime/2.)*/;\n        //rotation mat2 of each hexagon\n        mat2 rot = rotationMatrix(iTime*ROTATION*i);\n        \n        float sdistance = sdHexagon(uv * min(iTime*0.05, 0.8) * rot, r);\n        float res = smoothstep(LINE_SIZE, eps, abs(sdistance));\n        vec3 color = 0.5 + 0.5 * cos(iTime + vec3(0,1,2) + i/8.);\n        finalColor = mix(color, finalColor, res);\n    }   \n\n\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}