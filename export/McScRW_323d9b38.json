{"ver":"0.1","info":{"id":"McScRW","date":"1721960649","viewed":232,"name":"Starfield (Blue + Red)","username":"draradech","description":"Starfield, (heavily) inspired by https://www.shadertoy.com/view/tlyGW3","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["space","stars","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926536\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nvec3 star(vec2 uv, vec2 id)\n{\n    vec3 r = pcg23(id);\n    float size = r.z;\n    uv += (r.xy - .5);\n    float d = length(uv);\n    float l = size * .0002 / (d * d);\n    float s1 = min(1., (.002 / abs(uv.x)) + (.002 / abs(uv.y)));\n    uv *= rot(PI * .25);\n    float s2 = min(1., (.002 / abs(uv.x)) + (.002 / abs(uv.y)));\n    float s = s1 * smoothstep(.25, 0., d) + s2 * smoothstep(.15, 0., d);\n    s *= smoothstep(.95, 1., size) * .5;\n    float b = l +  .5 * s;\n    b *= smoothstep(1., .5, d);\n    float blink_i = smoothstep(0., .8, fract(r.z * 1000.));\n    float blink_f = smoothstep(0., 1., fract(r.z * 100.));\n    float blink = (.5+.5*sin(blink_f * iTime * 10.))*(blink_i*.5);\n    return b * (1.0 - blink) * vec3(\n        .5*smoothstep(1., .5, size)+.5,\n        (.25 + .75*smoothstep(0., 0.5, size)) * (.5+.5*smoothstep(1., 0.5, size)) ,\n        smoothstep(0., .5, size));\n        \n}\n\nvec3 layer(vec2 uv, vec2 id)\n{\n    vec3 col = vec3(0);\n    for (float x = -1.; x <= 1.; x++)\n    {\n        for (float y = -1.; y <= 1.; y++)\n        {\n            vec2 off = vec2(x, y);\n            col += star(uv - off, id + off);\n        }\n    }\n    return col;\n}\n\n#define N 6.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0);\n    float t = iTime * .05;\n    \n    uv *= rot(t);\n    \n    for (float f = 0.; f < 1.; f += 1. / N)\n    {\n        float depth = fract(f + t);\n        float scale = mix(10., .1, depth);\n        vec2 uv2 = uv * scale;\n        uv2 += vec2(123.45, 55.22) * f;\n        vec2 gv = fract(uv2) - .5;\n        vec2 id = floor(uv2);\n        col += depth * layer(gv, id) * smoothstep(1., .95, depth);\n    }\n    \n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"uvec3 pcg3d(uvec3 v) {\n    v = v * 1664525u + 1013904223u;\n    v.x += v.y * v.z; v.y += v.z * v.x; v.z += v.x * v.y;\n    v ^= v >> 16u;\n    v.x += v.y * v.z; v.y += v.z * v.x; v.z += v.x * v.y;\n    return v;\n}\n\nvec3 pcg33(vec3 p)\n{\n    uvec3 r = pcg3d(floatBitsToUint(p));\n    return vec3(r) / float(0xffffffffu);\n}\n\nvec3 pcg23(vec2 p)\n{\n    return pcg33(p.xyx);\n}\n","name":"Common","description":"","type":"common"}]}