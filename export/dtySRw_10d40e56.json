{"ver":"0.1","info":{"id":"dtySRw","date":"1685990979","viewed":178,"name":"First Shader Trippy ","username":"Bannarama23","description":"This was following the \"An introduction to Shader Art Coding\" by Kishimisu. Check out their youtube channel. Great!!!!!!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["learning","first","awesome","epilepsywarning","visualart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette (float t) {\n\n    vec3 a = vec3(0.628, 0.500, 0.500);   \n    vec3 b = vec3(-2.312, 1.518, -2.222);\n    vec3 c = vec3(-0.972, 0.228, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y; //x is for width and y is height\n    \n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.3, 0.1, 0.2);\n    \n    for(float i = 0.0; i < 4.0; i++) {\n    \n    \n        //spatial repition\n        uv = fract(uv * 1.5) - 0.5; //returns fractional parts of its input \n\n        float d = length(uv) * exp(-length(uv0));\n    \n        vec3 col = palette(length(uv0) + i * 0.4 - iTime * 0.4);\n    \n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n       \n        d = pow(0.01 / d, 1.2);\n    \n        col *= d;\n    \n        finalColor += col * d;\n    }\n    \n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}