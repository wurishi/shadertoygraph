{"ver":"0.1","info":{"id":"Mclcz2","date":"1721372727","viewed":28,"name":"Doom Transparency","username":"MichaelPohoreski","description":"Implementing DOOM's transparency as a native shader solution.\nHold left mouse button and move up/down for background zoom\nWIP version 2","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["transparency","chromakey","alpha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyleft {C} Michaelangel007\n//\n// Inspired from decino's excellent Doom video:\n// Partial Invisibility\n// https://www.youtube.com/watch?v=ONsgzLKt3vQ&t=554\n\n#define DEBUG_ALPHA 0\n#define DEBUG_LEFT  0\n#define DEBUG_RIGHT 0\n\n// ========================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float nSplitScreen = 0.5;\n    if (iMouse.z > 0.5)\n        nSplitScreen = iMouse.x / iResolution.x;\n\n    vec2 fc = fragCoord / iResolution.xy;\n    vec3 L = texture( iChannel1, fc ).rgb;\n    vec3 R = texture( iChannel2, fc ).rgb; // WIP: using tex0 until tex1 is done\n    vec3 col = (fc.x < nSplitScreen)\n        ? L\n        : R\n        ;\n\n#if DEBUG_ALPHA\n    float a = texture( iChannel0, fc ).a;\n    col = vec3(a);\n    if (fc.x < nSplitScreen)\n        col = texture( iChannel0, fc ).rgb;\n#endif\n\n#if DEBUG_LEFT\n    col = L;\n#endif\n\n#if DEBUG_RIGHT\n    col = R;\n#endif\n\n#if !DEBUG_LEFT && !DEBUG_RIGHT\n#if 0\nvec3 axis = vec3( 1.0, 0.0, 0.0 );\n    //vec3 axis = vec3( 0.0, 0.5, 1.0 );\n    float w = 3.0;\n    if (((iMouse.x - w) >= fragCoord.x) \n    &&  ((iMouse.x + w) <= fragCoord.x))\n        col = axis;\n    if (iMouse.y == fragCoord.y)\n        col = vec3( 0.0, 0.5, 1.0 );\n#endif\n\n    //float left = 2.0 / iResolution.x;\n    col *= smoothstep( 0.006, 0.008, abs(fc.x - nSplitScreen) );\n#endif\n\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n   Doom Transparency\n   Copyleft {C} Michaelangel007\n\n   Buffer  Description\n   ------  -------------------------------\n   A       Alpah mask\n   B       Background quantized to low res\n   C       A native shader version\n   D       Doom futzing re-implementation\n*/\n\n// Convert chromakey to alpha channel\n// 0,1,0 -> alpha = 0\n// x,x,x -> alpha = 1\n\n#define ORIGINAL_RESOLUTION 1\n\n// normalized uv\n// pixel resolution res\n// ========================================\nvec2 quantize( vec2 uv, vec2 res )\n{\n    uv *= res;\n    uv = trunc( uv );\n    uv /= res;\n    return uv;\n}\n\n// ========================================\nfloat Zoom()\n{\n    float result = 1.0;\n\n    if (iMouse.z > 0.5)\n    {\n        float zoom = iMouse.y / iResolution.y; // 0.0 .. 1.0\n\n        float levels = 4.0;\n        float resolution = pow( 2.0, levels );\n        zoom *= resolution;\n        zoom = trunc( zoom );\n\n        zoom += 1.0;\n        result = 1.0 / zoom;\n    }\n\n    return result;\n}\n\n// ========================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = vec2( 320.0, 200.0 ); \n    res *= Zoom();\n\n    vec2 fc = fragCoord / iResolution.xy;\n    vec2 uv = fc;\n\n#if ORIGINAL_RESOLUTION\n    // VGA Mode Y 320x200\n    // https://doomwiki.org/wiki/Aspect_ratio\n    uv = quantize( uv, res );\n#endif\n\n    vec3 fg = texture( iChannel0, uv ).rgb;\n    float K = -0.08;\n    bool isfg =   ((fg.r - fg.g) > K)\n               || ((fg.b - fg.g) > K);\n    float grad = isfg\n               ? 0.0\n               : 1.0\n               ;\n    \n    fragColor = vec4( fg, grad);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n   Doom Transparency\n   Copyleft {C} Michaelangel007\n\n   Buffer  Description\n   ------  -------------------------------\n   A       Alpah mask\n   B       Background quantized to low res\n   C       A native shader version\n   D       Doom futzing re-implementation\n*/\n\n// Background\n#define ORIGINAL_RESOLUTION 1\n\n// @param uv  normalized uv coordinates\n// @param res pixel resolution\n// ========================================\nvec2 quantize( vec2 uv, vec2 res )\n{\n    uv *= res;\n    uv = trunc( uv );\n    uv /= res;\n    return uv;\n}\n\n// ========================================\nfloat Zoom()\n{\n    float result = 1.0;\n\n    if (iMouse.z > 0.5)\n    {\n        float zoom = iMouse.y / iResolution.y; // 0.0 .. 1.0\n\n        float levels = 4.0;\n        float resolution = pow( 2.0, levels );\n        zoom *= resolution;\n        zoom = trunc( zoom );\n    \n        zoom += 1.0;\n        result = 1.0 / zoom;\n    }\n\n    return result;\n}\n\n// ========================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // VGA Mode Y 320x200\n    vec2 res = vec2( 320.0, 200.0 ); \n    res *= Zoom();\n\n    vec2 fc = fragCoord / iResolution.xy;\n    vec2 uv = fc;\n\n#if ORIGINAL_RESOLUTION\n    // https://doomwiki.org/wiki/Aspect_ratio\n    uv = quantize( uv, res );\n#endif\n\n    vec4 bg = texture( iChannel1, uv );\n    fragColor = vec4( bg );\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n   Doom Transparency\n   Copyleft {C} Michaelangel007\n\n   Buffer  Description\n   ------  -------------------------------\n   A       Alpah mask\n   B       Background quantized to low res\n   C       A native shader version\n   D       Doom futzing re-implementation\n*/\n\n// Native shader reimplementation of Doom futzing\n#define ORIGINAL_RESOLUTION 1\n#define DEBUG_RANDOM        0\n#define DEBUG_RNG_STATIC    0\n#define DEBUG_RNG_UP        0\n\n// Noise 2 - \"Wet stone\" - https://www.shadertoy.com/view/ldSSzV\nfloat hash12(vec2 p)\n{\n    float h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\n// normalized uv\n// pixel resolution res\n// ========================================\nvec2 quantize( vec2 uv, vec2 res )\n{\n    uv *= res;\n    uv = trunc( uv );\n    uv /= res;\n    return uv;\n}\n\n// Wrapper\n// ========================================\nfloat random( vec2 p )\n{\n    return hash12( p );\n}\n\n// ========================================\nfloat Zoom()\n{\n    float result = 1.0;\n\n    if (iMouse.z > 0.5)\n    {\n        float zoom = iMouse.y / iResolution.y; // 0.0 .. 1.0\n\n        float levels = 4.0;\n        float resolution = pow( 2.0, levels );\n        zoom *= resolution;\n        zoom = trunc( zoom );\n\n        zoom += 1.0;\n        result = 1.0 / zoom;\n    }\n\n    return result;\n}\n\n// ========================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = vec2( 320.0, 200.0 ); \n    res *= Zoom();\n\n    vec2 fc = fragCoord / iResolution.xy;\n    vec2 uv = fc;\n\n    vec4 fg = texture( iChannel0, uv );\n    vec3 bg = texture( iChannel1, fc ).rgb;\n    vec3 col = bg;\n\n#if ORIGINAL_RESOLUTION\n    // https://doomwiki.org/wiki/Aspect_ratio\n    uv = quantize( uv, res );\n#endif\n\n#if DEBUG_RNG_STATIC\n    float r = random( uv );\n#else\n    float r = random( uv + (mod(iTime, 50.0) / 50.0));\n#endif\n\n    bool isfg = fg.a < 0.5;\n    if (isfg)\n    {\n        // < 1.0 / 3.0 // y-1\n        // < 2.0 / 3.0 // y+1\n        // < 3.0 / 3.0 // y-0\n        float y = fragCoord.y;\n        if (r < 0.3333) y = fragCoord.y - 1.0;\n        if (r < 0.6666) y = fragCoord.y + 1.0;\n\n        vec2 st = vec2(fragCoord.x, y) / iResolution.xy;\n#if ORIGINAL_RESOLUTION\n             st = quantize( st, res );\n#endif\n        bg = texture( iChannel1, st ).rgb * 0.75;\n#if DEBUG_RNG_UP\n        bg = vec3( 1.0, 0.0, 1.0 );\n#endif\n        col = bg * (0.5 + r);\n    }\n\n#if DEBUG_RANDOM\n    col = vec3( r );\n#endif    \n\n    fragColor = vec4(col,1.0);\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"/*\n   Doom Transparency\n   Copyleft {C} Michaelangel007\n\n   Buffer  Description\n   ------  -------------------------------\n   A       Alpah mask\n   B       Background quantized to low res\n   C       A native shader version\n   D       Doom futzing re-implementation\n*/\n\n// WIP\n// Comparable re-implementation of Doom's original futzing transparency\n#define ORIGINAL_RESOLUTION 1\n#define DEBUG_RANDOM        0\n#define DEBUG_RNG_STATIC    0\n#define DEBUG_RNG_UP        0\n\n#define FUZZTABLE 50\n\n// Doom defines FUZZOFF as ScreenWidth\n// File: r_draw.c\n// Func: R_DrawFuzzColumn ()\n//\n// https://github.com/id-Software/DOOM/blob/master/linuxdoom-1.10/r_draw.c#L260\n// https://github.com/chocolate-doom/chocolate-doom/blob/5082a2f1b43736e24e9927c16268788506b3b25b/src/doom/r_draw.c#L258\n//\n// Effectively\n//    +FUZZOFF is y+1\n//    -FUZZOFF is y-1\n// https://youtu.be/ONsgzLKt3vQ?t=634\nconst int fuzzoffset[ FUZZTABLE ] = int[ FUZZTABLE ]\n(\n    +1, -1, +1, -1, +1, // [0]\n    +1, -1, +1, +1, -1, // [5]\n    +1, +1, +1, -1, +1, //[10]\n    +1, +1, -1, -1, -1, //[15]\n    -1, +1, -1, +1, +1, //[20]\n    +1, +1, +1, +1, +1, //[25]\n    -1, +1, +1, -1, -1, //[30]\n    +1, +1, -1, -1, -1, //[35]\n    -1, +1, +1, +1, +1, //[40]\n    -1, +1, +1, -1, +1  //[45]\n);\n\nint fuzzpos = 0;\nfloat nSplitScreen = 0.5;\n\n// ========================================\nvoid Init()\n{\n    fuzzpos = 0;\n    nSplitScreen = 0.5; // normalized\n}\n\n// Noise 2 - \"Wet stone\" - https://www.shadertoy.com/view/ldSSzV\n// ========================================\nfloat hash12(vec2 p)\n{\n    float h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\n// Wrapper so you use whatever hash function you want\n// ========================================\nfloat random( vec2 p )\n{\n    return hash12( p );\n}\n\n// @param uv  normalized uv coordinates\n// @param res pixel resolution\n// ========================================\nvec2 quantize( vec2 uv, vec2 res )\n{\n    uv *= res;\n    uv = trunc( uv );\n    uv /= res;\n    return uv;\n}\n\n// ========================================\nfloat Zoom()\n{\n    float result = 1.0;\n\n    if (iMouse.z > 0.5)\n    {\n        float zoom = iMouse.y / iResolution.y; // 0.0 .. 1.0\n\n        float levels = 4.0;\n        float resolution = pow( 2.0, levels );\n        zoom *= resolution;\n        zoom = trunc( zoom );\n\n        zoom += 1.0;\n        result = 1.0 / zoom;\n    }\n\n    return result;\n}\n\n// ========================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0)\n        Init();\n        \n    // VGA Mode Y 320x200\n    vec2 res = vec2( 320.0, 200.0 ); \n    res *= Zoom();\n\n    vec2 fc = fragCoord / iResolution.xy;\n    vec2 uv = fc;\n\n#if ORIGINAL_RESOLUTION\n    // https://doomwiki.org/wiki/Aspect_ratio\n    uv = quantize( uv, res );\n#endif\n\n#if DEBUG_RNG_STATIC\n    float r = random( uv );\n#else\n    float r = random( uv + (mod(iTime, 50.0) / 50.0));\n#endif\n\n    vec3 fg = texture( iChannel0, uv ).rgb;\n    vec3 bg = texture( iChannel1, fc ).rgb;\n    vec3 col = bg;\n    fragColor = vec4( col, 1.0); // writes to bufferA\n}","name":"Buffer D","description":"","type":"buffer"}]}