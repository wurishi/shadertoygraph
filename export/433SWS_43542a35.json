{"ver":"0.1","info":{"id":"433SWS","date":"1720644262","viewed":36,"name":"audiovisualiser","username":"inversemicron","description":"h","likes":2,"published":1,"flags":4,"usePreview":0,"tags":["h"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function to quantize color to a specified number of bits\nvec3 quantizeColor(vec3 color, float numBits) {\n    float maxValue = pow(2.0, numBits) - 1.0;\n    return floor(color * maxValue + 0.5) / maxValue;\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Function to convert a grayscale value to a color using hue mapping\nvec3 grayscaleToHue(float gray, vec2 p) {\n    // Ensure the grayscale value is within the range [0.0, 1.0]\n    gray = clamp(gray, 0.0, 1.0);\n    \n    // Map the grayscale value to a hue value (0.0 to 1.0)\n    float hue = gray * 2.0;\n    \n    // Convert HSV to RGB\n    vec3 color = hsv2rgb(vec3(mod(hue / 10.0, 1.0), 1.0,hue)); // some fun values to play with\n    //vec3 color = hsv2rgb(vec3(mod(hue, 1.0) + p.y + p.x + iTime, 1.0,hue)); // some fun values to play with\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = 2.0; // zooom\n    float muting = 2.0;\n    float thres = 0.75;\n    \n    vec2 uv = vec2(1.0) - fragCoord / iResolution.xy;\n    vec2 originalUV = uv;\n    \n    uv.x = uv.x / scale - 1.0 / scale / 2.0;\n    \n    if (originalUV.x < 0.5) {\n        uv.x = 2.0 - uv.x;\n    }\n    \n    // Get pixel information from uv location\n    vec4 texColor = texture(iChannel0, uv);\n\n    // Quantize texColor into 2-bit color depth\n    vec3 quantizedColor = quantizeColor(texColor.rgb, 4.0);\n    quantizedColor = grayscaleToHue(quantizedColor.x, originalUV);\n    \n    // Output to screen\n    fragColor = vec4(quantizedColor, texColor.a);\n}","name":"Image","description":"","type":"image"}]}