{"ver":"0.1","info":{"id":"MlyXWV","date":"1485925736","viewed":138,"name":"Fun with metaballs","username":"fwilliams","description":"Render some metaballs","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int MAX_ITERS = 64;\nconst float EPSILON = 1e-2;\n\n#define SPHERE1_CTR vec4(0.75*sin(0.5*iTime), -1.5*sin(0.5*iTime), 5.0, 1.0)\n#define SPHERE2_CTR vec4(-0.69*cos(0.5*iTime), 1.5*sin(0.5*iTime), 5.0, 1.0)\n#define SPHERE3_CTR vec4(0.83*cos(0.5*iTime), -1.0*cos(0.5*iTime), 5.0, 1.0)\n#define SPHERE4_CTR vec4(1.7*cos(0.6*iTime), 1.7*cos(0.7*iTime), 5.0, 1.0)\nconst vec4 SPHERE1_COLOR = vec4(0.9, 0.2, 0.2, 1.0);\nconst vec4 SPHERE2_COLOR = vec4(0.1, 0.1, 0.9, 1.0);\nconst vec4 SPHERE3_COLOR = vec4(0.2, 0.9, 0.2, 1.0);\nconst vec4 SPHERE4_COLOR = vec4(0.9, 0.9, 0.05, 1.0);\nconst float SPHERE1_RAD = 0.5;\nconst float SPHERE2_RAD = 0.5;\nconst float SPHERE3_RAD = 0.5;\nconst float SPHERE4_RAD = 0.5;\n\nconst vec4 LIGHT1_POS = vec4(10.0, -10.0, -10.0, 1.0);\nconst vec4 LIGHT2_POS = vec4(0.0, 0.0, -10.0, 1.0);\nconst vec4 LIGHT3_POS = vec4(-10.0, 10.0, -10.0, 1.0);\nconst vec4 LIGHT_COLOR = vec4(0.5, 0.5, 0.5, 1.0);\nconst float SHINE = 499.0;\nconst vec4 AMBIENT = vec4(0.0); //vec4(0.06, 0.05, 0.05, 1.0);\n\n//vec4 GROUND_COLOR = vec4(0.5* (0.5 + cos(0.05*iTime)), 0.65, 0.7 * (0.5 + sin(0.5*iTime)), 1.0);\nvec4 GROUND_COLOR = vec4(0.5, 0.5, 0.7, 1.0);\n\nfloat saturate(float x) { return clamp(x, 0.0, 1.0); }\n\nfloat sphereImplicit(in vec4 pt, in float radius, in vec4 position) {\n\treturn length(pt - position) - radius;\n}\n\nfloat smin(float a, float b, float blendRadius) {\n    float c = saturate(0.5 + (b - a) * (0.5 / blendRadius));\n    return mix(b, a, c) - blendRadius * c * (1.0 - c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    \n    vec4 rayDir = vec4(fragCoord.xy / iResolution.xy - vec2(0.5, 0.5), 1.0, 0.0);\n    vec4 iterPos = vec4(rayDir.xyz, 1.0);\n    rayDir = rayDir / length(rayDir);\n    \n    float specular = 0.0;\n    \n    vec4 color = GROUND_COLOR;\n    vec3 normal = vec3(0.0, 1.0, 0.0);\n\n    for (int i = 0; i < MAX_ITERS; i++) {\n    \tfloat d = smin(smin(smin(sphereImplicit(iterPos, SPHERE1_RAD, SPHERE1_CTR),\n                                 sphereImplicit(iterPos, SPHERE2_RAD, SPHERE2_CTR), 1.3),\n                            sphereImplicit(iterPos, SPHERE3_RAD, SPHERE3_CTR), 1.2),\n                            sphereImplicit(iterPos, SPHERE4_RAD, SPHERE4_CTR), 1.25);\n                      ;\n        if (d < EPSILON) {\n            specular = ( 8.0 * SHINE ) / ( 8.0 * 3.14159265 );\n            float d1 = abs(1.0/(EPSILON + sphereImplicit(iterPos, 0.5, SPHERE1_CTR)));\n            float d2 = abs(1.0/(EPSILON + sphereImplicit(iterPos, 0.5, SPHERE2_CTR)));\n            float d3 = abs(1.0/(EPSILON + sphereImplicit(iterPos, 0.5, SPHERE3_CTR)));\n\t\t\tfloat d4 = abs(1.0/(EPSILON + sphereImplicit(iterPos, 0.5, SPHERE4_CTR)));\n            \n            float i1 = d1 / (d1+d2+d3+d4);\n            float i2 = d2 / (d1+d2+d3+d4);\n            float i3 = d3 / (d1+d2+d3+d4);\n\t\t\tfloat i4 = d4 / (d1+d2+d3+d4);\n            \n            vec3 normal1 = normalize(vec3(iterPos - SPHERE1_CTR));\n            vec3 normal2 = normalize(vec3(iterPos - SPHERE2_CTR));\n            vec3 normal3 = normalize(vec3(iterPos - SPHERE3_CTR));\n            vec3 normal4 = normalize(vec3(iterPos - SPHERE4_CTR));\n            \n            normal = normalize(i1*normal1 + i2*normal2 + i3*normal3 + i4*normal4);\n            color = (i1*SPHERE1_COLOR + i2*SPHERE2_COLOR + i3*SPHERE3_COLOR + i4*SPHERE4_COLOR);\n            break;\n        } else {\n            iterPos += d*rayDir;\n        }\n    }\n\n    vec3 light1dir = normalize(vec3(LIGHT1_POS - iterPos));\n    vec3 light2dir = normalize(vec3(LIGHT2_POS - iterPos));\n    vec3 light3dir = normalize(vec3(LIGHT3_POS - iterPos));\n\n    vec3 r1 = -normalize(reflect(light1dir, vec3(normal))); \n    vec3 r2 = -normalize(reflect(light2dir, vec3(normal))); \n    vec3 r3 = -normalize(reflect(light3dir, vec3(normal))); \n\n   \tvec3 v = -normalize(vec3(iterPos));\n    vec3 h1 = normalize(light1dir + v);\n    vec3 h2 = normalize(light2dir + v);\n    vec3 h3 = normalize(light3dir + v);\n\n    fragColor = LIGHT_COLOR * (\n        dot(normal, light1dir) + specular*pow(max(dot(r1, h1), 0.0), SHINE) + \n        dot(normal, light2dir) + specular*pow(max(dot(r2, h2), 0.0), SHINE) + \n        dot(normal, light3dir) + specular*pow(max(dot(r3, h3), 0.0), SHINE)\n    );\n    fragColor *= color;\n    fragColor += AMBIENT;\n}\n","name":"Image","description":"","type":"image"}]}