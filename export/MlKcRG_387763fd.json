{"ver":"0.1","info":{"id":"MlKcRG","date":"1536942132","viewed":79,"name":"Circle, Smiley, Rectangle, Sine","username":"tiff","description":"Basics- Drawing a circle / smiley face / rectangle / sine function line","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//drawing a circle\nfloat Circle(vec2 uv, vec2 p, float r, float blur){\n    float d = length(uv-p);\n    float c = smoothstep(r,r-blur, d);\n    \n\treturn c; \n}\n\n//drawing a band\nfloat Band(float t, float start, float end, float blur){\n    float step1 = smoothstep(start - blur, start + blur, t); //start of band\n    float step2 = smoothstep(end + blur, end - blur, t); //end of band\n\n    return step1*step2; //multiplying both sides to make the band \n}\n\n//drawing a rectangle\nfloat Rect(vec2 uv, float left, float right, float bottom, float top, float blur){\n\tfloat band1 = Band(uv.x, left, right, blur); //vertical band\n    float band2 = Band(uv.y, bottom, top, blur); //horizontal band\n    \n    return band1 * band2; //multiplying the bands to make a rectangle\n\n}\n\n//drawing a smiley\nfloat Smiley(vec2 uv, vec2 p, float size){\n\tuv -= p; // remaps in relation to uv\n    uv /= size; //scaling coordinate system\n    \n    float mask = Circle(uv, vec2(0.), .4, .01);\n    //mask += Circle(uv, vec2(-.5, .2), .1, .01); // += adds this circle to previous circle,\n    //mask \\-= Circle(uv, vec2(-.5, .2), .1, .01); // -= makes a 'black circle, if overlaps, carves a part out of a different circle\n    mask -= Circle(uv, vec2(-.13, .2), .07, .01); //eyes\n    mask -= Circle(uv, vec2(.13, .2), .07, .01); //eyes\n    \n    float mouth = Circle(uv, vec2(0., 0.), .3, .02); \n    mouth -= Circle(uv, vec2(0., 0.1), .3, .02); //circle - cirle to make the shape of the mouth\n    \n    mask -= mouth; //drwaing mouth to the face\n    return mask; //returning the face\n}\n\nfloat remap01(float a, float b, float t){\n\treturn (t-a)/(b-a);\t\n}\n\nfloat remap(float a, float b, float c, float d, float t){\n\treturn remap01(a, b, t) * (d-c) + c;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n    \n    uv -= .5; //-0.5 <> 0.5\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(1.);\n    \n    float mask = 0.;\n\t//float mask = Smiley(uv, vec2(0.), 1.);\n    \n    float x = uv.x;\n    float m = sin(t+x*8.)*.1;\n    float y = uv.y-m;\n    \n    float blur = remap(-.5, .5, .01, .25, x);\n    //blur = pow(blur*4., 3.);    \n    x += y*0.;\n\n    mask = Rect(vec2(x,y), -.5, .5, -.1, .1, blur); \n    \n    col = vec3(1., 1., 1.)*mask;\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}\n","name":"Image","description":"","type":"image"}]}