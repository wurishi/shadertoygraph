{"ver":"0.1","info":{"id":"NlVcDD","date":"1661503629","viewed":205,"name":"Golden noodles","username":"Flopine","description":"Hexagonal truchet tiling extrude in 3D :D \nMade during a twitch stream, you can watch them here: twitch.tv/flopine","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","raymarching","glow","truchet","pattern","extrude"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define time iTime\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define hr vec2(1., sqrt(3.))\n\n#define circle(p,s) (length(p)-s)\n#define hex(p,s) ( max(abs(p.x), dot(abs(p), normalize(hr)))-s )\n#define sm(t,v) smoothstep(t, t*1.2,v)\n\n#define hash21(x) fract(sin(dot(x, vec2(164.5,234.1)))*594.5)\n#define hash11(x) fract(sin(x)*6497.5)\n\n#define dt(sp,off) fract((time+off)*sp)\n\nvec4 hgrid (vec2 uv)\n{\n    vec2 ga = mod(uv,hr)-hr*.5, gb = mod(uv-hr*.5, hr)-hr*.5, \n    guv = (dot(ga,ga)<dot(gb,gb))?ga:gb,\n    gid = uv-guv;\n    return vec4(guv,gid);\n}\n\nfloat extrude (vec3 p, float d, float h)\n{\n    vec2 q = vec2(d, abs(p.z)-h);\n    return min(0., max(q.x,q.y))+length(max(q,0.));\n}\n\nfloat truchet (vec2 uv, float w, float sdfid, bool back)\n{\n    vec4 hg = hgrid(uv);\n    vec2 uu = hg.xy, id = hg.zw; \n    uu.x *= (hash21((id+1.+sdfid)*.1)<.5)?-1.:1.;\n\n    float s = (uu.x*sqrt(3.)>-uu.y)?1.:-1.;\n    float diag;\n    if (back) diag = sm(0.01,abs(uu.y + uu.x*sqrt(3.))); \n    else diag = abs(uu.y + uu.x*sqrt(3.)); \n    \n    uu -= vec2(1., 1./sqrt(3.))*s*.5;\n    float contour; \n    if (back) contour = sm(0.02,abs(circle(uu,0.29))); \n    else contour = abs(circle(uu,sqrt(3.)/6.));\n    contour *= diag;\n    \n    return contour-w;\n}\n\nfloat g1=0.; float sid;\nfloat SDF (vec3 p)\n{\n    p.z += time;\n    float per = 2.;\n    sid = floor(p.z/per); \n    p.z = mod(p.z, per)-per*.5;\n    float d =  extrude(p.xyz, truchet(p.xy+.5, sin(length(p.xy*3.)-dt(.5,sid*.2)*TAU)*.02+.01, sid*.5, false), 0.1);\n    g1 += 0.01/(0.01+d*d);\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/ iResolution.y;\n\n    float dither = hash21(uv);\n    vec3 ro = vec3(0.001,0.001,-5.), rd=normalize(vec3(uv,1.)),p=ro,\n    col = clamp(1.-vec3(truchet(uv*3.,0.01,1.,true)),0.,1.);\n\n    bool hit = false; float shad;\n\n    for (float i=0.; i<50.; i++)\n    {\n        float d = SDF(p);\n        if (abs(d)<0.001)\n        {\n            hit = true; shad=i/64.; break;\n        }\n        d *= 0.99+dither*0.05;\n        p += d*rd;\n    }\n    \n    if (hit)\n    {\n        col = vec3(1.-shad);\n    }\n    col += g1*vec3(0.9,0.4,0.)*0.03;\n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}