{"ver":"0.1","info":{"id":"4dVSzG","date":"1465140627","viewed":266,"name":"RockShaft","username":"dila","description":"Climbing some kind of mine shaft.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float t)\n{\n    float n = t * 3.14159 * 0.5;\n\treturn mat2(cos(n), sin(n), -sin(n), cos(n));\n}\n\n/* iq's box function */\nfloat sdBox(vec3 p, float r)\n{\n  vec2 b = vec2(r);\n  vec2 d = abs(p.xy) - b;\n  return min(max(d.x,d.y),0.0) +\n         length(max(d,0.0));\n}\n\nfloat mat = 0.0;\n\n/* basic approach here is to fill the space with random junk */\n/* then carve out a straight path through it for the camera */\nfloat map(vec3 p)\n{   \n    mat = 0.0;\n\tfloat d = 0.0;\n    float sd = 1000.0;\n    \n    vec3 q = p;\n    q.xy *= rot(p.z * 0.25);\n    q.xy -= 0.5;\n    q.x = fract(q.x) - 0.5;\n    q.y = fract(q.y) - 0.5;\n    d = max(d, -sdBox(q, 0.45));\n    \n\tq = p.xzy;\n    q.xy *= rot(0.25);\n    q.xy -= 0.5;\n    q.x = fract(q.x) - 0.5;\n    q.y = fract(q.y) - 0.5;\n    d = max(d, -sdBox(q, 0.3));\n    sd = min(sd, sdBox(q, 0.1));\n    \n\tq = p.zyx;\n    q.xy *= rot(0.25);\n    q.xy -= 0.5;\n    q.x = fract(q.x) - 0.5;\n    q.y = fract(q.y) - 0.5;\n    d = max(d, -sdBox(q, 0.25));\n    sd = min(sd, sdBox(q, 0.1));\n    \n    if (sd < d) {\n        d = sd;\n        mat = 1.0;\n    }\n    \n    q = p;\n    q.xy *= rot(-p.z * 0.25);\n    float tl = mix(0.3, 0.45, 0.5+0.5*sin(p.z));\n    d = max(d, -sdBox(q, tl));\n    \n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d;\n    }\n    return t;\n}\n\nvec3 _texture(sampler2D s, vec3 p, vec3 n)\n{\n    mat3 t = mat3(texture(s, p.zy).xyz,\n                  texture(s, p.xz).xyz,\n                  texture(s, p.xy).xyz);\n\treturn t * t * abs(n);\n}\n\n/* Shane's bump mapping */\nvec3 bump(sampler2D s, vec3 p, vec3 n)\n{\n\tvec2 d = vec2(0.01, 0.0);\n    mat3 m = mat3(_texture(s, p - d.xyy, n),\n                  _texture(s, p - d.yxy, n),\n                  _texture(s, p - d.yyx, n));\n    vec3 gs = vec3(0.299, 0.587, 0.114);\n    vec3 v = gs * m;\n    vec3 c = dot(_texture(s, p, n), gs) - v;\n    return normalize(n + c * 0.5);\n    \n}\n\n/* trace the light glows as a separate scene */\nfloat light(vec3 o, vec3 r, vec3 lpos)\n{\n    float t = 0.0;\n    for (int i = 0; i < 16; ++i) {\n        vec3 p = o + r * t;\n        float d = max(sdBox(p, 1.0), abs(p.z - lpos.z));\n        t += d * 0.5;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    r.xy *= rot(iTime * 0.1);\n    r.xz *= rot(iTime * 0.2);\n    \n    vec3 o = vec3(0.0, 0.0, iTime);\n    \n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    float fd = map(w);\n    vec3 sn = normal(w);\n    \n    vec3 tex = vec3(0.0);\n    if (mat == 0.0) {\n    \ttex = _texture(iChannel0, w, sn);\n        sn = bump(iChannel0, w, sn);\n    } else {\n        tex = _texture(iChannel1, w, sn);\n        sn = bump(iChannel1, w, sn);\n    }\n    \n    float prod = max(dot(r, -sn), 0.0);\n    vec3 ref = reflect(r, sn);\n    \n    vec3 rtex = texture(iChannel2, ref).xyz;\n    \n\tfloat fres = abs(dot(r, sn));\n    \n    vec3 surf = mix(rtex, tex, fres) * prod;\n    \n    float fog = 1.0 / (1.0 + t * t);\n    \n    vec3 lit = vec3(1.0);\n    vec3 spc = vec3(0.0);\n    vec3 loff = vec3(0.0, 0.0, 25.0);\n    float lbl = 0.0;\n    \n    for (int i = 0; i < 2; ++i) {\n        \n        vec3 lpos = o + loff;\n        \n        float ld = light(o, r, lpos);\n        ld = 1.0 / (0.9 + ld * 0.005);\n        lbl += ld * 1.0;\n        \n        vec3 ldir = w - lpos;\n        float ldist = length(ldir);\n        ldir /= ldist;\n\n        lit += max(dot(ldir, sn), 0.0) * vec3(1.0) * lbl;\n        \n        vec3 lref = reflect(ldir, sn);\n        spc += pow(max(dot(r, lref), 0.0), 32.0) * 0.25;\n        spc *= 1.0 - mat;\n        \n        loff = -loff;\n    }\n    \n    float fdf = 1.0 / (1.0 + fd * 100.0);\n    vec3 fc = (surf * lit) * fog + spc * fdf;\n    \n    fc = mix(fc, vec3(1.0), lbl);\n    \n\tfragColor = vec4(fc, 1.0);\n}","name":"Image","description":"","type":"image"}]}