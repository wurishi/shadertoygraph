{"ver":"0.1","info":{"id":"4fVyRt","date":"1732247922","viewed":60,"name":"IceCream","username":"justdodumb","description":"wayneThiebaud","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["vector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis code creates basic rendering with diffuse shading and specular hightlight from a normal map. \nThis is the data: \niChannel0: Normal Map \niChannel1: Dark Texture\niChannel2: Light Texture\niChannel3: Background\n*/\n\n\nconst float pi=3.1416;\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\n\n\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat smooth_step( float min, float max, float x )\n{\n    float t =(x - min) / (max - min);\n    t = clamp(t, 0.0, 1.0);\n    t = t * t * (3.0 - 2.0 * t); // smoothstep formula   \n    return t;\n}\n\nfloat step2( float min, float max, float x )\n{\n    float t =(x - min) / (max - min);\n    t = clamp(t, 0.0, 1.0); \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy; //Normalized pixel coordinates\n    \n    vec4 col = vec4(0.0);\n    vec4 boun= vec4(1.0,1.0,0.0, 1.0);\n    vec4 spec= vec4(1.0,1.0,0.0, 1.0);\n    vec4 ambi= vec4(0.10,0.20,0.90, 1.0);\n    vec4 diff= vec4(0.90,0.50,0.20, 1.0);\n    vec4 img0 = texture(iChannel0, uv);\n    ambi = texture(iChannel1, uv);\n    diff = texture(iChannel2, uv);\n    ambi = texture(iChannel1, uv);\n    diff = texture(iChannel2, uv);\n    vec4 bg_col = texture(iChannel0, uv);\n    vec4 light_col= vec4(0.98,1.0,1.0,1.0);\n    float Ks=1.0-ambi.a;\n \n    vec3 eye=vec3(0.0,0.0,10.0); \n    vec3 normals; \n    vec3 reflect;\n    vec3 lightpos = vec3(iMouse.x,iMouse.y,80.0);\n    //vec3 dir=lightpos/length(lightpos); \n    vec3 dir = lightpos-vec3(fragCoord,0.0);\n    dir=dir/length(dir); \n    eye = eye-vec3(fragCoord,0.0);\n    eye = eye/length(eye); \n\n    \n    normals= 2.0*img0.rgb - vec3(1.0); \n    normals = normals/length(normals); \n    reflect = 2.0*dot(dir,normals)*normals-dir;\n    float t= 0.5*dot(dir,normals)+0.5;\n    float s= 0.5*dot(reflect,eye)+0.5;\n    float b= abs(dot(normals,eye));\n    //float t= clamp(dot(dir,normals),0.0,1.0);\n    //float t= dot(dir,normals);\n   \n    \n    t=step2(0.1,0.99,t);\n    t=t/0.99;\n    s=pow(s,10.00);\n    //s=step2(0.999,1.0,s);\n    //b=step2(0.1,0.99,b);\n    //t=smooth_step(0.1,0.9,t);\n    b=pow(b,5.00);\n    //t=0.5*sin(2.0*pi*t/0.50)+0.5;\n    \n    vec4 T=t*light_col;\n    \n    \n    col = ambi*(1.0-T)+diff*T; \n    col = col*(1.0-s*Ks) + spec*s*Ks;\n    col = (1.0-img0.a)*bg_col+img0.a*vec4(1.0)*col;\n    //col = col*(1.0-b) + boun*b;\n    //col= vec4(vec3(t),1.0); \n \n    fragColor = vec4(col);    // Output to screen\n}","name":"Image","description":"","type":"image"}]}