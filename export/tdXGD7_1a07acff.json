{"ver":"0.1","info":{"id":"tdXGD7","date":"1546600305","viewed":81,"name":"ok so basically","username":"ruko","description":"monky","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["im"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere(vec3 p) {\n    p += vec3(sin(iTime), 0., cos(iTime) - 1.0);\n    return length(p) - 1.;\n}\n\nfloat ground(vec3 p) {\n    return p.y + 1.5;\n}\n\nfloat ceiling(vec3 p) {\n    return -p.y + 1.5;\n}\n\nfloat walls(vec3 p) {\n    return min(-p.z + 3.0, \n               min(p.x + 3.0, -p.x + 3.0));\n}\n\nfloat creature (vec3 p) {\n    p += vec3(2.*sin(iTime/3.), 0.5*sin(iTime/3.01), cos(iTime/3.) - 1.0);\n    p.x += 0.1*sin(p.y*2.0+iTime);\n    p.z += 0.1*cos(p.y*2.0+iTime);\n    return length(p) - 1.0;\n}\n\nfloat f(vec3 p) {\n    return \n        min(creature(p), \n            min(ground(p),\n               min(ceiling(p),\n                  walls(p))));\n}\n\nfloat raymarch(vec3 o, vec3 d) {\n    vec3 p = o;\n    int count = 0;\n    while (abs(f(p)) > 0.001 && count < 160) {\n        p += f(p) * d;\n        count++;\n    }\n    return length(o - p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = vec2(fragCoord.x - 0.5 * iResolution.x, fragCoord.y - 0.5 * iResolution.y);\n    uv /= iResolution.y;\n    \n    mat3 maty = mat3(\n        cos(iTime), 0, -sin(iTime),\n        0, 1, 0,\n        sin(iTime), 0, cos(iTime));\n    \n    mat3 matx = mat3(\n        1, 0, 0, \n        0, cos(iTime), sin(iTime),\n        0, -sin(iTime), cos(iTime));\n    \n    mat3 matz = mat3(\n        cos(iTime), sin(iTime), 0,\n        -sin(iTime), cos(iTime), 0,\n        0, 0, 1);\n    \n    vec3 start = vec3(uv.x/10., uv.y/10., 0.);\n    if (mod(iTime+3.14, 4.*3.14) < 6.28) {\n        start.z -= 3.;\n    } else {\n        start.z -= 3.;\n    }\n    vec3 dir = normalize(vec3(uv.x/1., uv.y/1., 1.));\n    \n    float dist = raymarch(start, dir);\n    vec3 hit = start + dist * dir;\n    \n    // Time varying pixel color\n    vec3 col = vec3(1. - raymarch(start, dir)/10.);\n    \n    if (abs(hit.y) < 1.49 && abs(hit.z) < 2.99 && abs(hit.x) < 2.99) {\n        col = vec3(float(\n            (int(abs(hit.z*10.)) % 2)));\n    }\n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}