{"ver":"0.1","info":{"id":"Xl3cWl","date":"1534702429","viewed":263,"name":"The New ATZ Logo - Evoke Entry","username":"slerpy","description":"Space to reset.","likes":9,"published":1,"flags":48,"usePreview":0,"tags":["procedural","3d","basic","dof","shadows","reflections","tracing","path"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"A almost acceptable pathtracer\" by Aaron1924. https://shadertoy.com/view/ltjBWy\n// 2018-08-17 15:17:29\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 col = texelFetch(iChannel0, ivec2(fragCoord.xy), 0).gbra;\n    fragColor = pow(col / col.w, vec4(1.414));\n    \n    vec2 u = fragCoord / iResolution.xy - 0.5;\n    fragColor *= 1. - dot(u, u);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TAU 6.28318530718\n\n#define AA 1.414\n#define DOF .002\n\n#define FAR 20.\n#define ITER 120\n#define NORK 5e-4\n\n#define RITER 4\n#define RRFB .001\n\n//#define MODEL\n//#define SHITTY_PC_MODE 8\n\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hashSp(uint seed)\n{\n    float a=(float((seed*0x73493U)&0xfffffU)/float(0x100000))*2.-1.;\n    float b=6.283*(float((seed*0xAF71fU)&0xfffffU)/float(0x100000));\n    float c=sqrt(1.-a*a);\n    return vec3(c*cos(b),a,c*sin(b));\n}\n\nmat3 rx(float a){ float s=sin(a), c=cos(a); return mat3(1,0,0,0,c,s,0,-s,c); }\nmat3 ry(float a){ float s=sin(a), c=cos(a); return mat3(c,0,s,0,1,0,-s,0,c); }\nmat3 rz(float a){ float s=sin(a), c=cos(a); return mat3(c,s,0,-s,c,0,0,0,1); }\n\nfloat box(vec3 p){ p=abs(p); return max(max(p.x, p.y), p.z); }\nfloat box(vec2 p){ p=abs(p); return max(p.x, p.y); }\n\nvec2 amod(vec2 p, float m)\n{\n    float a=mod(atan(p.x, p.y), m) - m/2.;\n    return vec2(cos(a),sin(a)) * length(p);\n}\n\nvoid dmin(inout vec3 d, in float x, in float y, in float z)\n{\n    if(x < d.x) d = vec3(x,y,z);\n}\n\nfloat atz(vec3 p){\n    vec3 a=abs(p);\n    return max(min(max(max(\n    min(length(vec2(mod(p.x+.067,.134)-.067,p.z)),max(a.x,a.y)-.1),\n    -min(length(p.xy-vec2(0,.03))-.06,max(a.x,abs(p.y+.02)-.03)-.04)\n    ),abs(a.x+a.y)-.4),abs(abs(a.x+a.y)-.41)+.01),a.z)-.02;\n}\n\nvec3 map(vec3 p)\n{\n    vec3 d = vec2(0, 1e+31).yxx;\n    \n    // Logo\n    dmin(d, atz(0.5 * p.xzy), 0., 0.);\n    \n    \n    // Cubes\n    vec4 n = texture(iChannel2, -0.4 * p.xz);\n    float h = 0.3 * hash23(vec3(TAU*round(4.*p.xz-2.), 0)).x;\n    \n    vec2 tmp = round(p.xz*4.)/4.;\n    tmp = abs(tmp); tmp += tmp.yx;\n    if(tmp.x < 1.5)h = 0.;\n    \n    float mat = 1.0 - 0.8 * n.r;\n    if(h < 0.15 && tmp.x > 1.55 && iFrame % 5 == 0)mat = 2.;\n    \n    dmin(d, 0.2 * (p.y + 0.05 - h), mat, sin(256. * h));\n    \n    \n    // Lights\n    float r = length(abs(p.xz) - vec2(4, 0));\n    dmin(d, max(4.-p.y, r-3.), 2., 0.);\n    \n\treturn d;\n}\n\nvec3 normal(vec3 p, float k)\n{\n    float m = map(p).x;\n\tvec2 e = vec2(0,k);\n\treturn normalize(m-vec3(\n\t\tmap(p - e.yxx).x,\n\t\tmap(p - e.xyx).x,\n\t\tmap(p - e.xxy).x\n\t));\n}\n\nvec3 tracer(vec3 ro, vec3 rd)\n{    \n    vec3 m;\n    float s, t=RRFB;\n    for(int i=0; i < ITER; i++)\n    {\n        s = sqrt(1.-float(i)/float(ITER));\n        m = map(ro + rd*t);\n        t += s * m.x;\n    }\n    return vec3(t, m.yz);\n}\n\nvoid camera(out vec3 ro, out vec3 rd, in vec2 p)\n{\n    #ifdef AA\n    p.xy += AA * (hash23(vec3(p.xy, iFrame))-.5);\n\t#endif\n    \n    vec2 uv = (2.*p.xy-iResolution.xy)/iResolution.x;\n    vec2 rv = vec2(0.6, 0.4);\n    \n    #ifdef DOF\n    rv += DOF * (hash23(vec3(iFrame, p.xy))-.5);\n    #endif\n    \n    mat3 rm = ry(rv.y) * rx(rv.x);\n\tro = rm * vec3(0, 0, -4);\n    rd = rm * normalize(vec3(uv, 2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    if(iFrame > 0 && texelFetch(iChannel1, ivec2(0x20, 0), 0).r < .5)\n\t\tfragColor = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    \n#ifdef SHITTY_PC_MODE\n    \n    const int segs = SHITTY_PC_MODE;\n    if(int(float(segs)*fragCoord.x/iResolution.x) != iFrame%segs)return;\n\n#endif \n   \t\n    uvec2 temp = uvec2(fragCoord + 12345.);\n    uint seed = temp.x * temp.y;\n    \n    vec3 emit = vec3(0), ro, rd, t, sp, sn;\n    camera(ro, rd, fragCoord);\n    \n#ifdef MODEL\n        \n    float tr = tracer(ro, rd).x;\n\tsp = ro + rd * tr;\n\tsn = normal(sp, NORK);\n    \n    fragColor.rgb = exp(-0.01 * tr) * vec3(0.5+0.5*sn);\n    fragColor.a = 1.;\n    return;\n    \n#endif\n    \n    for(int i=0; i<RITER; i++)\n    {\n        t = tracer(ro, rd);\n        if(t.x > FAR)break;\n        \n\t\tsp = ro + rd*t.x;\n\t\tsn = normal(sp,NORK);\n        \n        t.z = clamp(-1.0, 1.0, t.z);\n        if(t.y > 1.)emit += t.y * 0.5 * vec3(1.-t.z, 1.+t.z, 1);\n        \n        seed ^= uint(iFrame) / uint(i+1);\n        rd = mix(reflect(rd, sn), hashSp(seed), t.y);\n        if(dot(rd, sn) < 0.)rd = -rd;\n        \n        ro = sp;\n    }\n    \n    emit = 10. * emit / (box(emit)+1.);\n    emit = pow(emit, vec3(.4545));\n    \n    fragColor += vec4(emit, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}