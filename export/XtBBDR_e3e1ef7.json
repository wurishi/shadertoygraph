{"ver":"0.1","info":{"id":"XtBBDR","date":"1515221552","viewed":181,"name":"Randazzo Dimension","username":"jpupper","description":"So iÂ´ve made it using the book of shaders as a guide. This is the one I made for the chapter about patterns","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["thebookofshaderstilepattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265358979323846\nvec2 rotate2D (vec2 _st, float _angle) {\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvec2 rotateTilePattern(vec2 _st){\n\n    //  Scale the coordinate system by 2x2\n    _st *= 2.0;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x,2.0));\n    index += step(1., mod(_st.y,2.0))*2.0;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    // Rotate each cell according to the index\n    if(index == 0.0){\n    _st = rotate2D(_st,PI*2.*1./4.);\n    }\n    else if(index == 1.0){\n        //  Rotate cell 1 by 90 degrees\n         _st = rotate2D(_st,PI*2.*3./4.);\n         \n    } else if(index == 2.0){\n        //  Rotate cell 2 by -90 degrees\n         _st = rotate2D(_st,PI*2.*1./4.);\n         \n    } else if(index == 3.0){\n        //  Rotate cell 3 by 180 degrees\n        _st = rotate2D(_st,PI*2.*3./4.);\n    }\n\n    return _st;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = tile(uv,1.);\n    uv = rotateTilePattern(uv);\n    \n    \n    vec2 pos = vec2(0.,5.) - uv;\n    float radius = length(pos);\n    float angle = atan(pos.x,pos.y);\n    float r = sin(radius*sin(uv.y*PI*5.+iTime+cos(sin(uv.x*PI*3.)*PI*2.+sin(uv.y*PI*15.)))\n                  *1.*sin(uv.y*PI+sin(uv.x*PI*5.)));\n    \n    //float r = sin(sin(uv.x*PI*5.+));\n    float g = cos(r*PI*2.+PI*2.)*0.9;\n    \n    float b = cos(r*PI*2.+PI*2.)*0.9+sin(r*PI*2.+PI*2.)*0.7;\n    \n    r+=g;\n    \n    fragColor = vec4(r,g,b,1.0);\n}","name":"Image","description":"","type":"image"}]}