{"ver":"0.1","info":{"id":"Wt3cRX","date":"1609555614","viewed":57,"name":"2d--Basico bosque","username":"jorge2017a1","description":"2d--Basico bosque","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2dbasicobosque"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----por jorge2017a1---01/Ene/2021\n//recursos\n//https://iquilezles.org/articles/distfunctions2d\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{ if (d1.x<d2.x) return d1;   else return d2; }\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{ if  (-d1.x<d2.x) return d1;  else  return d2;}\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{ if (d1.x>d2.x) return d1; else return d2;}\n\nvec2 opS(vec2 d1, vec2 d2) \n{ return vec2(max(-d2.x, d1.x), 2.0); }\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{    vec2 q = mod(p+0.5*c,c)-0.5*c; return  q; }\n\nfloat sdCirc(vec2 p, float r)\n{  return length(p)-r; }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\n\nfloat length_n(vec2 p, float n) { p=pow(abs(p), vec2(n)); return pow(p.x+p.y, 1.0/n); }\n\n//https://www.shadertoy.com/view/wldcz2\nfloat sd_ellipsoid(vec2 p, vec2 r, float roundness)\n{\n    float k1 = length_n(p/r, roundness);\n    float k2 = length_n(p/(r*r), roundness);\n    return k1*(k1-1.0)/k2;\n}\n\n\nvec2 montanasimple(vec2 p)\n{   vec2 r1=vec2(0.15,0.2);\n    vec2 r2=r1*0.80;\n    vec2 r3=r2*0.60;\n    float se1= sd_ellipsoid( p,  r1, 2.0);\n    float se2= sd_ellipsoid( p,  r2, 2.0);\n    float se3= sd_ellipsoid( p,  r3, 2.0);\n    float sb1= sdBox( p-vec2(0.0,-0.15),vec2(0.2,0.15) );\n    vec2 resp=vec2(9999.9,-1.0);\n    se1=opS(se2, se1);\n    se1=opS(se3, se1);\n    se1=opS(sb1, se1);\n    se2=opS(se3, se2);\n    se2=opS(sb1, se2);\n    se3=opS(sb1, se3);\n    resp=opU2(resp, vec2(se1, 34.0));\n    resp=opU2(resp, vec2(se2, 33.0));\n    resp=opU2(resp, vec2(se3, 32.0));\n    return resp;\n}\n\n\nvec2 simpleArbol(vec2 p)\n{\n    float sb1= sdBox( p,vec2(0.02,0.15) );\n    float sc1= sdCirc(p-vec2(0.0,0.08), 0.1);\n    float sc2= sdCirc(p-vec2(0.02,0.06), 0.09);\n    float sc3= sdCirc(p-vec2(-0.05,0.07), 0.07);\n    vec2 resp=vec2(9999.9,-1.0);\n    resp=opU2(resp, vec2(sb1, 13.0));\n    resp=opU2(resp, vec2(sc1, 18.0));\n    resp=opU2(resp, vec2(sc2, 14.0));\n    resp=opU2(resp, vec2(sc3, 12.0));\n    return resp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.4,0.8,0.3);\n    \n    p=p+iTime*0.25;\n    \n    vec2 c=vec2(0.5,0.8);\n    \n    vec2 p1=opRep2D(p, c);\n    vec2 p2=opRep2D(p-vec2(1.6,-0.4), c);\n    vec2 p3=opRep2D(p-vec2(-0.6,-0.0), c);\n    \n    vec2 m1= montanasimple( p1);\n    col= DibujoConBordeVec2(p, m1, col);\n    \n    vec2 m2= montanasimple( p2);\n    col= DibujoConBordeVec2(p, m2, col);\n    \n    vec2 sa1= simpleArbol(p3);\n    col= DibujoConBordeVec2(p, sa1, col);\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{ vec3 color; };\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.  //37 //marron o cafe\n\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\nvec3 getColorf(float ii)\n{\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang); float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);  float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nvec3 DibujoConBordeVec2(vec2 uv, vec2 vdist,   vec3 colOut)\n{   \n    vec3 colIn=getColorf(vdist.y); //color\n    float dist=vdist.x; //distancia\n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\n\nvec3 DibujoSinBordeVec2(vec2 uv, vec2 vdist,   vec3 colOut)\n{   \n    vec3 colIn=getColorf(vdist.y); //color\n    float dist=vdist.x; //distancia\n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    \n    return mix(colOut,colIn, flm );\n}\n\n\n","name":"Common","description":"","type":"common"}]}