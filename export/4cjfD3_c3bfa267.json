{"ver":"0.1","info":{"id":"4cjfD3","date":"1726104207","viewed":13,"name":"Hexagon Tiling Learning .1","username":"jcraw","description":"learning to do hexagon tiling\nhttps://www.youtube.com/watch?v=VmrIDyYiJBA","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat HexDist(vec2 p) {\n    p = abs(p);\n    float line = dot(p, normalize(vec2(1, sqrt(3.))));\n    return max(line, p.x);\n}\n\nfloat HexFromSlope(vec2 p) {\n    p = abs(p);\n    float intercept = .2;\n    float y = (-1./sqrt(3.))*p.x+2.*intercept*.5;\n    \n    float angledLine = 1.-step(.0, p.y - y);\n    float flatLine = 1.-step(intercept, p.x);\n    \n    return min(angledLine, flatLine);\n}\n\nvec4 HexCoords(vec2 uv) {\n\n    uv *= 7.;\n\n   vec2 rectSize = vec2(1, sqrt(3.));\n   vec2 offset = rectSize * .5;\n   vec2 a = mod(uv, vec2(1,sqrt(3.))) - offset;\n   vec2 b = mod(uv - offset, vec2(1, sqrt(3.))) - offset;\n   \n   vec2 grid;\n   if(length(a) < length(b))\n       grid = a; \n   else\n       grid = b; \n\n    vec2 id = uv - grid;\n    return vec4(grid.x, grid.y, id.x, id.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 timeColor = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec3 col = vec3(0);\n    \n    vec4 hexCoords = HexCoords(uv);\n    \n    float y = .5-HexDist(hexCoords.xy);\n    float x = atan(hexCoords.x, hexCoords.y);\n    \n   // col =+ vec3(x, y, x);\n     \n     col += vec3(smoothstep(.05, .1, y * sin(hexCoords.z * hexCoords.w + iTime)));\n\n    \n    //col += step(HexDist(uv), .2);\n    //col += sin(HexDist(uv)*10. + iTime*2.);\n    \n    col *= timeColor;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}