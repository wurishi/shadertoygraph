{"ver":"0.1","info":{"id":"wdffD4","date":"1588260745","viewed":846,"name":"Starfield Tutorial Experiments","username":"oroborositron","description":"Experiments from playing with the GLSL tutorial on Art of Code YT at https://www.youtube.com/watch?v=rvDo9LvfoVE. Enjoy! :)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","learningglsl","starfield","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 r)\n{\n\tr = fract(r * vec2(123.34, 456.21));\n    r += dot(r, r+45.32);\n    return fract(r.x * r.y);\n}\n\nmat2 rotate(float theta)\n{\n\tfloat s = sin(theta);\n    float c = cos(theta);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat star(vec2 uv, float flares)\n{\n    float d = length(uv);\n    float m = 0.05/d;\n    \n    float rays = max(0., 1.-abs(uv.x * uv.y * 1000.));    \n    m += rays * flares;\n    \n    uv *= rotate(3.1415/4.);\n    float rotated_rays = max(0., 1.-abs(uv.x * uv.y * 1000.));\n    m += rotated_rays * 0.3 * flares;\n    \n    m *= smoothstep(1., 0.2, d);\n    \n    return m;\n}\n\nvec3 starLayer(vec2 uv, int quality)\n{\n\tvec2 luv = fract(uv) - 0.5;\n    vec2 lid = floor (uv);\n    \n    vec3 col = vec3(0.);\n    \n    for(int y = -1*quality; y <= 1*quality; y++)\n    {\n    \tfor(int x = -1*quality; x <= 1*quality; x++)\n        {\n            vec2 offsets = vec2(x,y);\n            \n        \tfloat n1 = rand(lid + offsets);\n            float n2 = fract(n1 * 34.);\n            float size = fract(n1 * 345.32);\n            \n            float star = star(luv - offsets - vec2(n1, n2) + 0.5, smoothstep(0.9, 1., size)*0.6);\n            \n            float n3 = fract(n1 * 412.124);\n            vec3 colour = sin(vec3(0.2, 0.3, 0.9) * n3 * 123.2) * .5 + .5;\n            colour *= vec3(0.8, .025, 1.+size);\n            \n            star *= sin(iTime * 3. + n1 * 6.283)*0.5+1.;\n            \n            col += star * size * colour * 0.75;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    //Parameters for adjusting quality of simulation with performance on GPU.\n    float NUM_LAYERS = 5.;\n    int QUALITY = 3;\n    \n    float t = iTime * 0.05;\n    //float t = 0.;\n    \n    uv *= rotate(t);\n    \n    vec3 col = vec3(0.);\n    \n    for(float i = 0.; i < 1.; i += 1./NUM_LAYERS)\n    {\n        float depth = fract(i+t);\n        float scale = mix(20., 0.5, depth);\n        float fade = depth * smoothstep(1., 0.9, depth);\n    \tcol += starLayer(uv*scale+i*453.2, QUALITY)*fade;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}