{"ver":"0.1","info":{"id":"MXdXD2","date":"1719680126","viewed":76,"name":"dancing d12","username":"pb","description":"music viz","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["music","dodecahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))\n\nfloat bass, treble, change=0.;  //lazy globals\n\nvec4 color;\n\nfloat de(vec3 p) {\n\n    float dd=2.;\n    \n    if ( change == 1. ) p = round(p/dd);  //this is strange but interesting\n    \n    float uid = 2.*p.x + 3.*p.y + 5.*p.z;;\n    \n    p.xz *=  rot( bass*5.   );\n    p.yz *=  rot( iTime/2.  );\n    p.xy *=  rot( treble );\n\n    int vertex=0;\n    float dist, minDist=1e6;\n    for (int i=0; i<20; i++) {\n    \n        dist = length(p-d12[i]*(.8+bass/2.));\n        if (dist < minDist) { vertex=i; minDist=dist; }\n    }\n    \n    float fv = float(vertex);\n    vec3  cc = cos(d12[vertex]  + fv*fv) ;\n    \n    \n    cc *= cc;\n    cc  = 1. - exp( -cc*cc );\n    color = vec4( cc, 0.); \n    \n    return minDist;\n\n}\n\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    U = (2.*U - iResolution.xy)/iResolution.y *4.;\n    \n    vec3 p=vec3(0,0,-2.5), rd=normalize(vec3(U,2));\n    \n    \n    float i=0.,t=0.,d;\n    \n    O = vec4(0);\n    \n    bass=texture(iChannel0, vec2(.1,.1)).r;\n\n    treble =texture(iChannel0, vec2(sqrt(U.x*U.x+U.y*U.y),1.)).r;\n\n    float tt = mod(iTime,10.);\n    if ( tt > 5. ) change = 1.;\n    \n    for (;i<100.;i++) {\n            \n        d = de(p+t*rd);        \n        t += .9*d;\n        O += exp( -d*d*6.)*exp(-t*t/20.) * color; \n      \n    }\n    \n    O = (sqrt(O));\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//hard coding the vertices for a dodecahedron\nconst float gmh=(sqrt(5.)+1.)/2.;\nconst float gmi=1./gmh;\n\nvec3[] d12 = vec3[]  (\nvec3(1.,1.,1.),\nvec3(1.,1.,-1.),\nvec3(1.,-1,1.),\nvec3(1.,-1,-1.),\nvec3(-1,1.,1.),\nvec3(-1.,1.,-1),\nvec3(-1.,-1.,1.),\nvec3(-1.,-1.,-1.),\nvec3(0.,gmh,gmi),\nvec3(0.,gmh,-gmi),\nvec3(0.,-gmh,gmi),\nvec3(0.,-gmh,-gmi),\nvec3(gmi,0.,gmh),\nvec3(gmi,0.,-gmh),\nvec3(-gmi,0.,gmh),\nvec3(-gmi,0.,-gmh),\nvec3(gmh,gmi,0.),\nvec3(gmh,-gmi,0.),\nvec3(-gmh,gmi,0.),\nvec3(-gmh,-gmi,0.)\n);","name":"Common","description":"","type":"common"}]}