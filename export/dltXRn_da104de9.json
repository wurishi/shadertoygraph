{"ver":"0.1","info":{"id":"dltXRn","date":"1684971169","viewed":142,"name":"Mobius flow","username":"ChunderFPV","description":"Points flowing along transformed grids.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["grid","mobius","transform","loopsless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RT(a) mat2(cos(m.a*1.5708+vec4(0,-1.5708,1.5708,0)))\n#define G(x,t) (1.-abs(sin((x+t)*3.1416)))/max(0., abs(x))\n#define P(u,t) .3*min(2., 1./length((fract(u+vec2(t*round(u.y/2.), t)+.5)-.5)/fwidth(u)/1.5))/max(0., abs(u.y))\n#define H(a) (cos(radians(vec3(0, 60, 120))-((a)*6.2832))*.5+.5)\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    float t = iTime/5.,\n          fov = .75;  // field of view\n    vec2 R = iResolution.xy,\n         m = (iMouse.xy/R*4.)-2.;\n    vec3 c = vec3(0),\n         u = normalize(vec3((U-.5*R)/R.y, fov))*5.5;\n    if (iMouse.z < 1.) m = vec2(sin(t/2.)*.2, sin(t)*.1); // move camera with time\n    u.yz *= RT(y); // pitch\n    u.xz *= RT(x);   // yaw\n    \n    // transform\n    vec2 o = u.xy-vec2(1, 0),\n         v = o/dot(o, o);\n    v.x += .5;\n    u.xy = tan(log(length(v)) + atan(v.y, v.x)*vec2(2, -4)/2.);\n    \n    \n    vec3 s = t*sign(u)*sign(abs(u)-1.); // speed\n    u = max(abs(u), 1./abs(u)); // reflect\n    c += max(max(G(u.x, s.x), G(u.y, s.y)), G(u.z, s.z)); // grids\n    c += P(u.yx, s.x) + P(u.zx, s.x); // points\n    c += P(u.xy, s.y) + P(u.zy, s.y);\n    c += P(u.yz, s.z) + P(u.xz, s.z);\n    \n    // colors\n    c = H(c+sin(t)*.1+.1)*c+c*c;\n    c += H(u.x)*.1;\n    c += H(u.y+.5)*.1;\n    \n    C = vec4(c*c+.1*c, 1);\n}","name":"Image","description":"","type":"image"}]}