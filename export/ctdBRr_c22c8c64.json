{"ver":"0.1","info":{"id":"ctdBRr","date":"1700882191","viewed":39,"name":"Random number Visualizer","username":"peixu001","description":"Random number Visualizer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["randomnumbervisualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 生成一些随机数\nfloat random (in vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat noise(in vec2 st)\n{\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n#define octaves 3\nfloat fbm(in vec2 p)\n{\n    float value = 0.0;\n    float freq = 1.13;\n    float amp = 0.57;    \n    for (int i = 0; i < octaves; i++)\n    {\n        value += amp * (noise((p - vec2(1.0)) * freq));\n        freq *= 1.61;\n        amp *= 0.47;\n    }\n    return value;\n}\nfloat pat(in vec2 p)\n{\n    float time = iTime*0.75;\n    vec2 aPos = vec2(sin(time * 0.035), sin(time * 0.05)) * 3.;\n    vec2 aScale = vec2(3.25);\n    float a = fbm(p * aScale + aPos);\n    vec2 bPos = vec2(sin(time * 0.09), sin(time * 0.11)) * 1.2;\n    vec2 bScale = vec2(0.75);\n    float b = fbm((p + a) * bScale + bPos);\n    vec2 cPos = vec2(-0.6, -0.5) + vec2(sin(-time * 0.01), sin(time * 0.1)) * 1.9;\n    vec2 cScale = vec2(1.25);\n    float c = fbm((p + b) * cScale + cPos);\n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=0.5;\n    vec3 black = vec3(0.0);\n    vec3 white = vec3(1.0);\n    float d = random(uv);\n    uv = vec2(uv.x + d, uv.y + d);\n    vec3 img = texture(iChannel0, uv).rgb;\n    vec3 col;\n    if(random(uv)>iMouse.x/iResolution.x){\n        col = white;\n    }else{\n        col = black;\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}