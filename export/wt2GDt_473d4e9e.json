{"ver":"0.1","info":{"id":"wt2GDt","date":"1561612663","viewed":105,"name":"walking raymarching by suraimu","username":"suraimu752","description":"walking raymarching by suraimu752","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 lightDirection = vec3(1., 1., -.7);\n\nvec3 trans(vec3 p){\n    return mod(p, 4.) - 2.;\n}\n\nfloat dfPlane(vec3 p){\n    return p.y + 0.5;\n}\n\nfloat dfSphere(vec3 p){\n    return length(trans(p)) - .7;\n}\n\nfloat distanceFunc(vec3 p){\n    return dfSphere(p);\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        distanceFunc(p + vec3(  d, 0.0, 0.0)) - distanceFunc(p + vec3( -d, 0.0, 0.0)),\n        distanceFunc(p + vec3(0.0,   d, 0.0)) - distanceFunc(p + vec3(0.0,  -d, 0.0)),\n        distanceFunc(p + vec3(0.0, 0.0,   d)) - distanceFunc(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nmat3 kaiten(float frec){\n    float r = 2. * frec * 3.14159265358979;\n    return mat3(\n        cos(r),  0., sin(r),\n            0.,  1.,     0.,\n        -sin(r), 0., cos(r)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 cameraPos = vec3(0., sin(iTime * 0.5) * 3., -5. + iTime);\n    float screenZ = 2.5;\n    vec3 rayDirection = normalize(vec3(p, screenZ)) * kaiten(iTime*0.025);\n\n    vec3 col = vec3(0.);\n\n    float depth = 0.0;\n    for(int i = 0; i < 499; i++){\n        vec3 rayPos = cameraPos + rayDirection * depth;\n        float dist = distanceFunc(rayPos);\n        depth += dist;\n\n        if(dist < 0.0001){\n            col = vec3(1.) * clamp(dot(getNormal(rayPos), lightDirection), 0.2, 1.0);\n            break;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}