{"ver":"0.1","info":{"id":"sdS3zc","date":"1617733036","viewed":154,"name":"Cog of Chaos","username":"Hyeve","description":"Funky patterns, inversion, and of course the Cog of Chaos!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["glitch","chaos","cog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define inv(a) 1. - a * 2.\n\n#define pi 3.14159265359\n\nfloat quaim( float k, float x )\n{\n    return 2.0*sqrt(k)*x/(1.0+k*x*x);\n}\n\nfloat lsdf(vec2 p, vec2 a, vec2 b ) {\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0., 1. );\n\treturn length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec4 pattern = vec4(0.,0.,0.,1.);  \n    \n    \n    float distort = sin(iTime * 3.) * 0.01;\n    \n    vec2 rruv = uv * rot(iTime);\n    vec2 aruv = uv * rot(-iTime);\n    vec2 druv = uv * rot(iTime / 2.);\n    \n    for(float i = 0.; i < 5.; i ++)\n    {\n        \n        pattern.g += 1. - smoothstep(0.04,0.05, lsdf(abs(rruv) + sin(abs(druv.x) * 3000.) * distort, vec2(0.8 * mod(iTime + i, 5.) - 0.2,0.0), vec2(0.,0.8 * mod(iTime + i, 5.) - 0.2)));\n        pattern.bg += 1. - smoothstep(0.02, 0.03, lsdf(abs(aruv)  + tan(abs(druv.y) * 3000.) * distort, abs(vec2(sin(iTime), cos(iTime + i))) - vec2(0.4, 0.4), abs(vec2(cos(iTime + i), sin(iTime)))  - vec2(0.4, 0.4)));\n    }\n    \n    \n    float sq1 = quaim(3., sin(iTime * 4.)) / 2.;\n    float sq2 = quaim(3., sin(iTime * 3.)) / 2.;\n    float ofst = 0.46;\n    \n    \n    float sl = 1. - step(sq1, uv.x + ofst);\n    float st = 1. - step(sq2, uv.y + ofst);\n    \n    float sr = step(sq1, uv.x - ofst);\n    float sb = step(sq2, uv.y - ofst);\n    \n    float slr = sl + sr;\n    float stb = st + sb;\n    \n    \n    mat2 r = rot(iTime);\n    \n    float cb = step(quaim(3., cos(iTime)) / 2., distance(uv, vec2(0.,0.)));\n    \n    float add = quaim(0.5, cos(iTime)) * 20.;\n    \n    for(float i = 0.; i < add; i++)\n    {\n        vec2 point = vec2(sin((i/add) * 2. * pi), cos((i/add) * 2. * pi)) * 0.47;\n        cb += 1. - step(quaim(3., cos(iTime)) / 16., distance(uv, point * r));\n    }\n    \n    pattern = mix(inv(pattern), pattern, slr + stb);   \n    pattern = inv(pattern);   \n    pattern.rgb = mix(pattern.ggg + (pattern.rgb/3.), inv(pattern.rgb), cb);    \n    pattern.rgb = mix(mix(pattern.rgb, pattern.brg, sin(iTime/5.)), pattern.gbr, cos(iTime/5.));\n    \n   \n    fragColor = vec4(pattern);\n}","name":"Image","description":"","type":"image"}]}