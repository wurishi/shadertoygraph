{"ver":"0.1","info":{"id":"4Xfcz8","date":"1726061293","viewed":20,"name":"Berserk Ecplise","username":"Wildric","description":"Tried to reproduce berserk's eclipse","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","clouds","moon","eclipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) * vec2(1.0, iResolution.y / iResolution.x);\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec2 lineOffset = vec2(0.0,0.0);\n    vec2  pos   = vec2(uv.x, uv.y - 0.12);\n    vec2  linePos = vec2(uv.x, uv.y) - vec2(0.0, -0.222);\n    float r     = 0.38;\n    float l     = length(pos) / r;\n    vec2  n     = pos/l;\n    \n    vec3 ecol = vec3(float(0xF2), float(0x50), float(0x1D)) / 255.0;\n    vec3 col = vec3(0.0);\n    float d = l; //- fbm(n*30.0)*0.01;\n    vec2 tresh  = vec2(0.95, 1.0)*r;\n    tresh.y += fbm(n*10.0)* (-0.01);\n    vec2 tresh0 = vec2(tresh.x - 0.02*r,tresh.x);\n    col = smoothstep(tresh0.x,tresh0.y,d) * vec3(1.0); \n    \n    bool outside = false;\n    if (d > tresh.x && tresh.y < 1.0) {\n        float coord = (d - tresh.x) / (tresh.y - tresh.x);\n        col = ecol / (coord);\n        outside = true;\n    }\n    //-------------\n    float lrect = sdfbox(linePos, vec2(0.0,0.2));  \n    col   += uv0.y * ecol*0.007/abs(lrect);\n    //--------------\n    \n    //Clouds\n    float   c  = pow(fbm(vec2(fbm(uv0*7.), fbm(uv0*15.0))),10.0);\n    vec3 bg   = vec3(c);\n    if (outside == true)\n        col += c *0.14* ecol;\n    col = (col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float rand(in vec2 uv) {\n    return fract(sin(dot(uv,  vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat noise(in vec2 pos) {\n    vec2 localPos = fract(pos);\n    float a        = rand(floor(pos));\n    float b        = rand(floor(pos + vec2(1.0, 0.0)));\n    float c        = rand(floor(pos + vec2(1.0, 1.0)));\n    float d        = rand(floor(pos + vec2(0.0, 1.0)));\n    \n    vec2 xy = localPos*localPos*(3.0 - 2.0*localPos);\n    \n    return mix(mix(a, b, xy.x), mix(d, c, xy.x), xy.y);\n    \n}\n\nfloat fbm(in vec2 pos) {\n   float ret  = 0.0;\n   float freq = 1.0;\n   \n   ret += noise(pos);\n   ret += 0.5     * noise(2.0 * pos);\n   ret += 0.25    * noise(4.0 * pos);\n   ret += 0.125   * noise(8.0 * pos);\n   ret += 0.0625  * noise(16.0* pos);\n   ret += 0.03125 * noise(32.0  * pos);\n   \n   return ret;\n}\n\nvec3 aces(vec3 x) {\n  const float a = 2.51;\n  const float b = 0.03;\n  const float c = 2.43;\n  const float d = 0.59;\n  const float e = 0.14;\n  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\n}\n\nfloat aces(float x) {\n  const float a = 2.51;\n  const float b = 0.03;\n  const float c = 2.43;\n  const float d = 0.59;\n  const float e = 0.14;\n  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\n}\n\nvec3 unreal(vec3 x) {\n  return x / (x + 0.155) * 1.019;\n}\n\nfloat unreal(float x) {\n  return x / (x + 0.155) * 1.019;\n}\n\nvec3 uncharted2Tonemap(vec3 x) {\n  float A = 0.15;\n  float B = 0.50;\n  float C = 0.10;\n  float D = 0.20;\n  float E = 0.02;\n  float F = 0.30;\n  float W = 11.2;\n  return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\n}\n\nvec3 uncharted2(vec3 color) {\n  const float W = 11.2;\n  float exposureBias = 2.0;\n  vec3 curr = uncharted2Tonemap(exposureBias * color);\n  vec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W));\n  return curr * whiteScale;\n}\n\nfloat uncharted2Tonemap(float x) {\n  float A = 0.15;\n  float B = 0.50;\n  float C = 0.10;\n  float D = 0.20;\n  float E = 0.02;\n  float F = 0.30;\n  float W = 11.2;\n  return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\n}\n\nfloat uncharted2(float color) {\n  const float W = 11.2;\n  const float exposureBias = 2.0;\n  float curr = uncharted2Tonemap(exposureBias * color);\n  float whiteScale = 1.0 / uncharted2Tonemap(W);\n  return curr * whiteScale;\n}\n\nfloat sdfbox(vec2 point, vec2 boxRect)\n{\n   vec2 delta = abs(point) - boxRect;\n   return length(max(delta, 0.0)) + min(max(delta.x,delta.y),0.0); \n}","name":"Common","description":"","type":"common"}]}