{"ver":"0.1","info":{"id":"NsK3Wz","date":"1631361021","viewed":131,"name":"rainbow rings","username":"HaleyHalcyon","description":"a","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (6.283185307)\n#define LOOPLEN 4.\n\n// adjusts the saturation\nvec3 sat(vec3 rgb)\n{\n    // Algorithm from Chapter 16 of \"OpenGL Shading Language\"\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    vec3 intensity = vec3(dot(rgb, W));\n    return mix(intensity, rgb, 2.5); // adjust strength here\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Make sure this loops\n    float time = fract(iTime / LOOPLEN);\n    // Simulate lower framerate\n    //time = floor(iTime * 20.) / 20. / LOOPLEN;\n    // Normalized pixel coordinates\n    vec2 uv = ( 2.* fragCoord - iResolution.xy ) / length(iResolution.xy);\n    // use log distance for perspective/tunnel effect\n    float dist = log(uv.x * uv.x + uv.y * uv.y);\n    float angle = atan(uv.y, uv.x);\n    \n    vec3 chanTime = 0.01 * vec3(-1, 0, 1) + time;\n    vec3 zoomTime = 1. * chanTime + 2.5 * sin(TAU * chanTime + dist * 0.5);\n    \n    vec3 col = smoothstep(-1.0, 1.0, sin(\n        dist * 7. + zoomTime * TAU\n    ));\n    \n    col += 0.3 * sin(dist * 4.5 + 3. * angle + (time + vec3(1, 0, 1) / 12.) * TAU);\n    \n    // Output to screen\n    fragColor = vec4(\n        sat(col), 1.0\n    );\n}","name":"Image","description":"","type":"image"}]}