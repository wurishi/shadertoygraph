{"ver":"0.1","info":{"id":"43VGD1","date":"1717610357","viewed":16,"name":"2Prak_red1","username":"VEAX","description":"Redaction of second prak","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["f"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DEPTH 100.\n\nfloat smin( float a, float b, float k){\n    float h = max(k - abs(a - b), 0.) / k;\n    return min(a, b) - h*h*h*k*(1./6.);\n}\n\nfloat sdSphere( vec3 p, vec3 sphereCenter, float s )\n{\n    return length(p - sphereCenter)-s;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b + r;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  p -= vec3(sin(iTime), 0, cos(iTime));\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  p -= vec3(cos(iTime) * 1.5, 1., -1.);\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdHexPrism( vec3 p, vec3 shift, vec2 h )\n{\n  p -= shift;\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0., 0., -3.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    vec3 col = vec3(0);\n    \n    \n    float t = 0.; // traveled distance\n    vec3 color = vec3(.9, .9, .1);\n    float d = 1.;\n    \n    // raymarching  \n    for (int i = 0; i < 80 && d > .001 && t < MAX_DEPTH; ++i){\n        vec3 p = ro + rd * t; // current point in space\n        float dsphere = sdSphere(p, vec3(sin(iTime)*1.2, 0., 0.), 1.); // current distance to the closest object\n        float dcube = sdRoundBox(p, vec3(.7, .7, .7), .1);\n        float dcone = sdCone(p, vec2(1., 1.), 1.);\n        float dbreak = sdBox(p, vec3(.3, .6, .3));\n        float dground = sdSphere(p, vec3(0., -1010., 0.), 1000.);\n        float dhex = sdHexPrism(p, vec3(1.5, 1., -1.), vec2(.5, .5));\n    \n        d = min(dsphere, min(dcube, min(dcone, min(dbreak, min(dground, dhex)))));\n        color = vec3(.1, .8, .1);\n        \n        if (d == dsphere){\n            color = vec3(.8, .8 * cos(5. * uv.x), .8 * sin(5. * uv.x));\n        }\n        else if (d == dcube){\n            color = vec3(.6, .4, .5);\n        }\n        else if (d == dbreak){\n            color = vec3(sin(2. * iTime), cos(iTime), abs(.5 * sin(iTime)) + abs(cos(iTime)));\n        }\n        else if (d == dground){\n            color = vec3(.5, .5, .5);\n        }\n        else if (d == dhex){\n            color = vec3(.1, .6, .8 * sin(5.5 * t));\n        }\n        else{\n            color = vec3(.9, .9, .1);\n        }\n        \n    \n        t += d; // add distance to the closest object to the current point\n    }\n    \n    if (t < MAX_DEPTH){\n        vec3 point_light = vec3(1., 1., -1.);\n        vec3 curr = vec3(uv.x, uv.y, t+ro.z);\n        vec3 normal = normalize(curr - 0.);\n        vec3 light = normalize(point_light - curr);\n        vec3 view = normalize(ro - curr);\n        vec3 h = normalize(light + view);\n        vec3 ambient = .2*color;\n        vec3 diffuse = vec3(max(dot(normal, light), 0.));\n        vec3 specular = vec3(max(.2*pow(dot(normal, h), 200.), 0.));\n        color *= sqrt(ambient+1.1*diffuse+specular);\n    }\n    else{\n        color = vec3(1., 1., 1.);\n    }\n    \n    \n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}