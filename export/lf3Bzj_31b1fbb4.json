{"ver":"0.1","info":{"id":"lf3Bzj","date":"1733261595","viewed":33,"name":"different grayscales","username":"artefox","description":"different gamma corrections and comparisons","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["differentgammacorrections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 1. What we would see if light values increased linearly (notice how it's NOT linear looking, human eyes just work like that)\n// 2. A gradient in sRGB that LOOKS linear but is not physically (your monitor transforms physical light values to be non-linear but LOOK linear)\n// 3. An approximation for what we should see instead of that (c^(1/2.2))\n// 4. A correct gamma correction defined in the sRGB standard (displays PHYSICAL light values of the gradient above, this is actually linear)\n//\n// It is important we transform all our colors into linear space (c^2.2) then back into sRGB (c^(1/2.2)) when doing light calculations e.g. in a raytracer\n//\n// https://en.wikipedia.org/wiki/SRGB#From_CIE_XYZ_to_sRGB\n// https://learnopengl.com/Advanced-Lighting/Gamma-Correction\n\nvoid grayscale(inout vec3 color, vec3 newColor, vec2 uv, float minimum, float maximum) {\n    color = uv.y >= minimum && uv.y <= maximum ? newColor : color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float realgamma = uv.x <= 0.0031308 ? 12.92 * uv.x : 1.055 * pow(uv.x, 1.0 / 2.4) - 0.055;\n    \n    vec3 col = vec3(0.0);\n    grayscale(col, vec3(pow(uv.x, 2.2)),       uv, 0.66, 0.76);\n    grayscale(col, vec3(uv.x),                 uv, 0.52, 0.62);\n    grayscale(col, vec3(pow(uv.x, 1.0 / 2.2)), uv, 0.38, 0.48);\n    grayscale(col, vec3(realgamma),            uv, 0.24, 0.34);\n    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}