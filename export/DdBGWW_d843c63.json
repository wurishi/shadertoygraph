{"ver":"0.1","info":{"id":"DdBGWW","date":"1667747589","viewed":146,"name":"game of life easy shader","username":"afmika","description":"Simple implementation of Conway's game of life.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["easy","gameoflife","buffers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 zoom(vec2 uv) {\n    float zoom = (0.5 + 0.5 * sin(iTime / 5.));\n    vec2 scaleCenter = vec2(0.5);\n    return (uv - scaleCenter) * zoom + scaleCenter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = zoom(uv);\n    fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define STORAGE_BUFF iChannel0\n#define EPS 0.00001\n\nbool isBlack (vec4 color) {\n    return length(color) <= EPS;\n}\n\nint countIn(vec2 coord) {\n    vec4 color = texture(STORAGE_BUFF, coord / iResolution.xy);\n    return isBlack(color) ? 0 : 1;\n}\n\nint countNei(vec2 p) {\n    int sum = 0;\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            if (x == 0 && y == 0) continue;\n            sum += countIn(p + vec2(x, y));\n        }\n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    int count = countNei(fragCoord);\n    bool dead = isBlack(texture(STORAGE_BUFF, uv));\n    \n    vec4 col = vec4(0.);\n    if (dead && count == 3 || !dead && (count == 2 || count == 3))\n        col = vec4(1.);\n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float randBW(vec2 co) {\n    return (fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453) > 0.5) ? 1. : 0.;\n}\n\n\n#define NEW_COL iChannel0\n#define SELF iChannel1\n#define TEST_INIT iChannel2\n\nbool cooldown() {\n    int frame = 100;\n    return iFrame % 10 == 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color = vec4(0.);\n    if (iFrame > 0) {\n        // after init\n        int fcount = 10;\n        // webgl2 does not support \"%\" operator\n        // iFrame % fcount == 0\n        bool retexture = 0 == iFrame - fcount * (iFrame / fcount);\n        if (retexture) {\n            color = texture(NEW_COL, uv);\n        } else {\n            // do nothing\n            color = texture(SELF, uv);\n        }\n    } else {\n        // init\n        // custom image\n        // color = vec4(length(fwidth(step(0.5, texture(TEST_INIT, uv)))));\n        // noise\n        color = vec4(1.) * randBW(fragCoord);\n    }\n    fragColor = color;\n}","name":"Buffer B","description":"","type":"buffer"}]}