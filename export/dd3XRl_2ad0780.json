{"ver":"0.1","info":{"id":"dd3XRl","date":"1680239009","viewed":110,"name":"Cool Planet","username":"ShaderToyEpic","description":"A cool planet","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["raymarching","planet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching for Dummies!\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/PGtv-dBi2wE\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n#define SPECULAR_SIZE 10.\n\n#define NOISE fbm\n#define NUM_NOISE_OCTAVES 30\n\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n \n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\n\nfloat fbm(float x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tfloat shift = float(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat GetDist(vec3 p) {\n    return length(p) - 1.0f;\n}\n\nfloat GetDistNormal(vec3 p) {\n    float d = length(p) - 1.0f;\n    \n    if (NOISE(normalize(p)) >= 0.49f)\n    {\n        d -= NOISE(normalize(p)) / (10.0f / 0.51f) * (NOISE(normalize(p)) - 0.49) * 10.0f;\n    }\n    return d;\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsl( in vec3 c ){\n  float h = 0.0;\n\tfloat s = 0.0;\n\tfloat l = 0.0;\n\tfloat r = c.r;\n\tfloat g = c.g;\n\tfloat b = c.b;\n\tfloat cMin = min( r, min( g, b ) );\n\tfloat cMax = max( r, max( g, b ) );\n\n\tl = ( cMax + cMin ) / 2.0;\n\tif ( cMax > cMin ) {\n\t\tfloat cDelta = cMax - cMin;\n        \n        //s = l < .05 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) ); Original\n\t\ts = l < .0 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) );\n        \n\t\tif ( r == cMax ) {\n\t\t\th = ( g - b ) / cDelta;\n\t\t} else if ( g == cMax ) {\n\t\t\th = 2.0 + ( b - r ) / cDelta;\n\t\t} else {\n\t\t\th = 4.0 + ( r - g ) / cDelta;\n\t\t}\n\n\t\tif ( h < 0.0) {\n\t\t\th += 6.0;\n\t\t}\n\t\th = h / 6.0;\n\t}\n\treturn vec3( h, s, l );\n}\n\nvec3 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float cdS = 10000.0f;\n    float cdO;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dS < cdS)\n        {\n            cdS = dS;\n            cdO = dO;\n        }\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return vec3(dO, cdS, cdO);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDistNormal(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDistNormal(p-e.xyy),\n        GetDistNormal(p-e.yxy),\n        GetDistNormal(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, vec3 rd) {\n    vec3 lightDir = vec3(sin(iTime / 5.0f), 0, cos(iTime / 5.0f));\n    vec3 fakeLightPos = -lightDir * SPECULAR_SIZE;\n    vec3 n = GetNormal(p);\n    \n    float spec = pow(clamp(dot(reflect(rd, n), normalize(p - fakeLightPos)), 0., 1.), 100.) + 1.;\n    \n    float dif = clamp(dot(n, lightDir), 0., 1.);\n    if (NOISE(normalize(p)) < 0.49f) dif *= spec;\n    float d = RayMarch(p+n*SURF_DIST*2., lightDir).x;\n    if(d<MAX_DIST) dif *= .1;\n    \n    return dif;\n}\n\nvec3 lerp(vec3 a, vec3 b, float t)\n{\n    return (b - a) * t + a;\n}\n\nvec3 GetColor(vec3 p)\n{\n    float n = NOISE(normalize(p));\n    vec3 c = lerp(vec3(0, 0, 1), vec3(0, 0.5, 1), n / 0.49f);\n    if (n > 0.49f) c = vec3(0.76, 0.7, 0.5);\n    if (n > 0.5f) c = vec3(0, 1, 0);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    float ax = -iMouse.y / iResolution.y * 3.14f - 1.57f;\n    float ay = clamp(iMouse.x / iResolution.x, 0.0f, 1.0f) * 6.28f;\n    \n    mat3 xr = mat3(1, 0, 0,\n                  0, cos(ax), sin(ax),\n                  0, -sin(ax), cos(ax));\n    \n    mat3 yr = mat3(cos(ay), 0, sin(ay),\n                  0, 1, 0,\n                  -sin(ay), 0, cos(ay));\n    \n    mat3 r = xr * yr;\n    \n    vec3 ro = vec3(0, 0, 3.0f) * r;\n    vec3 rd = normalize(vec3(uv.x, uv.y, -1)) * r;\n\n    vec3 d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d.x;\n    \n    if (d.x < MAX_DIST)\n    {\n        float dif = GetLight(p, rd);\n        col = GetColor(p);\n        col = rgb2hsl(col);\n        col.z *= dif;\n        col = hsl2rgb(col);\n\n        col = pow(col, vec3(.4545));\t// gamma correction\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}