{"ver":"0.1","info":{"id":"clXSDj","date":"1675654784","viewed":351,"name":"RayTracingWater","username":"jynwang","description":"water","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\n#define FOV 60.\n#define NEAR 0.02\n#define FAR 1000.\n\nconst float EPSILON\t= 1e-3;\n#define EPSILON_NRM (0.1 / iResolution.x)\n#define SAMPLE 4\n\n\n// sea\nconst int ITER_GEOMETRY = 10;\nconst int ITER_FRAGMENT = 5;\nconst float SEA_HEIGHT = 0.8;\nconst float SEA_CHOPPY = 8.0;\nconst float SEA_SPEED = 1.0;\nconst float SEA_FREQ = 0.16;\nconst vec3 SEA_BASE = vec3(0.0, 0.19, 0.28);\nconst vec3 SEA_WATER_COLOR = vec3(0.9, 0.9, 0.2) * 0.2;\n#define SEA_TIME (1.0 + iTime * SEA_SPEED)\nconst mat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\n\n\nconst float Aspect = 16. / 9.;\n\n\nconst vec2[] Samples = vec2[16]\n(\n    vec2(0.25, 0.25),\n    vec2(0.25, 0.75),\n    vec2(0.75, 0.25),\n    vec2(0.75, 0.75),\n\n    vec2(0.6916590768959918, 0.22475458460589848),\n    vec2(0.09193505221863951, 0.2071589058889014),\n    vec2(0.5391680786991171, 0.646649611423054),\n    vec2(0.20509363480446097, 0.050568296562372606),\n   \n    vec2(0.4897098863415559, 0.8946319318657339),\n    vec2(0.8477241105265931, 0.9460383421635754),\n    vec2(0.00501694268903119, 0.44380170245835493),\n    vec2(0.09356277024146142, 0.7593893576561448),\n\n    vec2(0.6387923313657464, 0.07457929242653161),\n    vec2(0.2218585649309639, 0.4833217041577078),\n    vec2(0.9644686829234066, 0.22475458460589848),\n    vec2(0.09193505221863951, 0.39726745008104936)\n); \n\n\nfloat DegreeToRad(float degree) \n{\n    return degree * PI / 180.0;\n}\n\n\n/*\n 光线\n*/\nstruct Ray \n{\n    vec3 origin;\n    vec3 direction;\n};\n\n\n/*\n光线到达的点的位置\n*/\nvec3 RayPointAt(Ray ray, float t)\n{\n    return ray.origin + ray.direction * t;\n}\n\n\n/*\n相机\n*/\nstruct Camera\n{\n    vec3 position;\n    vec3 rotation;\n    mat4 viewMatrix;\n    mat4 inverseViewMatrix;\n    float fov;\n    float aspect;\n    float near;\n    float far;\n};\n\n\nCamera MainCamera;\n\n\n\n\n\nCamera CreateCamera(vec3 position, vec3 rotation, float fov, float aspect, float near, float far)\n{\n    vec3 rotationToRad = vec3(\n        DegreeToRad(rotation.x),\n        DegreeToRad(rotation.y + 180.), // 默认看向-z\n         DegreeToRad(rotation.z)\n    );\n\n    mat4 matrix = mat4(\n        vec4(1, 0, 0, 0),\n        vec4(0, 1, 0, 0),\n        vec4(0, 0, 1, 0),\n        vec4(position, 1.0));\n\n    float sinX = sin(rotationToRad.x);\n    float cosX = cos(rotationToRad.x);\n    mat4 rotateX = mat4(\n        vec4(1, 0, 0, 0),\n        vec4(0, cosX, sinX, 0),\n        vec4(0, -sinX, cosX, 0),\n        vec4(0, 0, 0, 1)\n    );\n\n    float sinY = sin(rotationToRad.y);\n    float cosY = cos(rotationToRad.y);\n    mat4 rotateY = mat4(\n        vec4(cosY, 0, -sinY, 0),\n        vec4(0, 1, 0, 0),\n        vec4(sinY, 0, cosY, 0),\n        vec4(0, 0, 0, 1)\n    );\n\n    float sinZ = sin(rotationToRad.z);\n    float cosZ = cos(rotationToRad.z);\n    mat4 rotateZ = mat4(\n        vec4(cosZ, sinZ, 0, 0),\n        vec4(-sinZ, cosZ, 0, 0),\n        vec4(0, 0, 1, 0),\n        vec4(0, 0, 0, 1)\n    );\n\n    mat4 Rzxy = rotateZ * rotateX * rotateY;\n\n    mat4 M = matrix * Rzxy;\n\n    return Camera(position, rotation, inverse(M), M, fov, aspect, near, far);\n}\n\n\nRay CreateRay(vec2 uv, Camera camera)\n{\n    uv = uv * 2. - 1.;\n    float viewportHeight = 2.0 * tan(DegreeToRad(camera.fov / 2.)) * camera.near;\n    float viewportWidth = viewportHeight * camera.aspect;\n    // 相机空间下\n    vec3 targetPointVS = vec3(uv.x * viewportWidth, uv.y * viewportHeight, camera.near); \n\n    vec3 targetPointWS = (camera.inverseViewMatrix * vec4(targetPointVS, 1.0)).xyz;\n    \n    return Ray(camera.position, normalize(targetPointWS - camera.position));\n}\n\n// https://www.shadertoy.com/view/Ms2SD1\nfloat hash( vec2 p ) {\n\tfloat h = dot(p, vec2(127.1,311.7));\t\n    return fract(sin(h) * 43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n  \n    return -1.0 + 2.0 * mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// sea\nfloat sea_octave(vec2 uv, float choppy) {\n    uv += noise(uv);        \n    vec2 wv = 1.0 - abs(sin(uv));\n    vec2 swv = abs(cos(uv));    \n    wv = mix(wv,swv,wv);\n    return pow(1.0-pow(wv.x * wv.y,0.65), choppy);\n}\n\n\n// 计算着色点的y和水面高度y的差值\nfloat map(vec3 point)\n{\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = point.xz; uv.x *= 0.75;\n    \n    float d, h = 0.0; \n    \n    for(int i = 0; i < 1; i++) {        \n    \td = sea_octave((uv + SEA_TIME) * freq, choppy);\n        d += sea_octave((uv - SEA_TIME) * freq, choppy);\n        h += d * amp;        \n    \tfreq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy, 1.0, 0.2);\n    }\n    return point.y - h;\n}\n\n\nfloat map_detailed(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    \n    float d, h = 0.0;    \n    for(int i = 0; i < ITER_FRAGMENT; i++) {        \n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\n        h += d * amp;        \n    \tuv *= octave_m; freq *= 1.5; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\n\n// tracing\nvec3 getNormal(vec3 p, float eps) {\n    vec3 n;\n    n.y = map_detailed(p);    \n    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\n    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\n    n.y = eps;\n    return normalize(n);\n}\n\n\nvec3 light = normalize(vec3(0.0,1.0,0.8));\n \nvec3 Sky(vec3 direction) {\n    float t = 0.5 * direction.y + 0.5;\n    return (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.9, 1.0) + dot(light, direction) * 0.3;\n}\n\nconst int NUM_STEPS = 32;\n\n// lighting\nfloat diffuse(vec3 n,vec3 l,float p) {\n    return pow(dot(n,l) * 0.4 + 0.6,p);\n}\n\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (PI * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\n\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  \n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n    fresnel = pow(fresnel,3.0) * 0.5;\n        \n    vec3 reflected = Sky(reflect(eye,n));    \n    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12; \n    \n    vec3 color = mix(refracted,reflected,fresnel);\n    \n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;\n    \n    color += vec3(specular(n,l,eye,60.0));\n    \n    return color;\n}\n\nvec3 RayTrace(Ray ray)\n{\n    vec3 hitPoint;\n    \n    // \n    float tm = EPSILON;\n    float tx = FAR;    \n    float hx = map(RayPointAt(ray, tx));\n    // 远平面作为RayTracing最远范围，算出来的水面高度差大于0，说明在水上，则属于天空背景\n    if (hx > 0.)\n    {\n        return Sky(ray.direction);\n    }\n    \n    // 渲染水面\n    \n    // 1. 从近点\n    float hm = map(RayPointAt(ray, tm));    \n    \n    \n    \n    float tmid = 0.0;\n    for(int i = 0; i < NUM_STEPS; i++) {\n        tmid = mix(tm, tx, hm / (hm - hx));                   \n        hitPoint = RayPointAt(ray, tmid);                   \n    \tfloat hmid = map(hitPoint);\n\t\tif(hmid < 0.0) {\n        \ttx = tmid;\n            hx = hmid;\n        } else {\n            tm = tmid;\n            hm = hmid;\n        }\n    }\n    \n    vec3 dist = hitPoint - ray.origin;\n    vec3 waterNormal = getNormal(hitPoint, dot(dist,dist) * EPSILON_NRM);\n    //return waterNormal;\n    return getSeaColor(hitPoint, waterNormal, light, ray.direction, dist);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    MainCamera = CreateCamera(vec3(0, 10. + ((sin(iTime * 0.8)) * 5.), 10.5 + iTime * 5.), vec3(0.0, iTime * 5., 0.0), FOV, Aspect, NEAR, FAR);\n \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 color = vec3(0, 0, 0);\n\n\n#if SAMPLE > 1\n    float sampleCount = 0.0;\n    for(int i = 0; i < SAMPLE; ++i) {\n        \n        sampleCount++;\n        vec2 st = (fragCoord.xy + Samples[i]) / iResolution.xy;\n        Ray ray = CreateRay(st, MainCamera);\n        color += RayTrace(ray);\n    }\n    color /= sampleCount;\n#else\n    Ray ray = CreateRay(uv, MainCamera);\n    color += RayTrace(ray);\n#endif\n\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n    \n    //fragColor = vec4(fract(24. * uv), 0., 1.0);\n}","name":"Image","description":"","type":"image"}]}