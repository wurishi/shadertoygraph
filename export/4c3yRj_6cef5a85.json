{"ver":"0.1","info":{"id":"4c3yRj","date":"1730845738","viewed":28,"name":"ðŸ‘½Infinite Tunnel ","username":"Secretstar","description":"Infinite tunnel","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Questo Ã¨ il codice completo per ShaderToy\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Coordinate normalizzate\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.9;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Effetto di tempo per il movimento del tunnel\n    float time = iTime * 0.4;\n    \n    // Coordinate polari per il tunnel\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n\n    // Effetto di oscillazione usando il coseno\n    float tunnel = cos(radius * 11.0 - time * 5.0) * 0.5 + 0.5;\n\n    // Colore basato sull'angolo e sul raggio per creare variazioni di colore\n    vec3 color = vec3(0.3 + 2.2 * cos(angle + time * 4.0),\n                      1.2 + 1.5 * sin(radius * 3.0 + time * 2.5),\n                      1.7 + 0.0 * cos(angle - time * 3.0));\n\n    // Applicazione dell'effetto del tunnel al colore\n    fragColor = vec4(color * tunnel, 1.0);\n}","name":"Image","description":"","type":"image"}]}