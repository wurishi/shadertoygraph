{"ver":"0.1","info":{"id":"4tKXD3","date":"1486218827","viewed":533,"name":"Infinite zooming noise","username":"nomadiclizard","description":"Zooms forever into simplex noise, fading in and out successive octaves.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","simplex","infinitezoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265358979\n#define twoPi (2.0*pi)\n\n// snoise from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\nvec3 permutezz(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoisezz(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permutezz( permutezz( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// number of octaves of noise\n#define octaves\t\t4\n// zoom level between each successive octave\n#define octave_zoom 20.0\n// how long in seconds it takes to zoom in one octave\n#define zoom_time   2.0\n// scaling multiplier of the zoomiest octave\n#define base_zoom   1.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 uvspin = vec2(0.1 * cos(0.7 * twoPi * iTime),\n                       0.1 * sin(0.35 * twoPi * iTime));\n    float timeI = floor(iTime / zoom_time);\n    float timeF = mod(iTime, zoom_time) / zoom_time;\n    float smoothtimeF = timeF;//sin(twoPi * timeF) / (2.0 * twoPi) + timeF;\n    float zoom = base_zoom / pow(octave_zoom, smoothtimeF);\n    for(int i=0; i<octaves; i++) {\n        // linear interpolate contribution from last and first octaves to make it supersmooth <3\n        float contrib = i==0 ? (1.0-timeF) : i==octaves-1 ? timeF : 1.0;\n        // offset ensures infinite randomness as octaves no longer repeat :D\n        vec2 offset = vec2(float(i) + timeI);\n        fragColor += contrib * (0.5 * vec4(snoisezz((uv + uvspin) * zoom + offset)));\n        zoom *= octave_zoom;\n        \n        // TODO make it zoom in on the mouse location :v\n    }\n}","name":"Image","description":"","type":"image"}]}