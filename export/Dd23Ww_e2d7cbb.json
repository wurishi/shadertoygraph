{"ver":"0.1","info":{"id":"Dd23Ww","date":"1667693975","viewed":76,"name":"Tangent Plotter (Parametric)","username":"Envy24","description":"Template for plotting tangent lines for parametric functions.\nQuick instruction in Image Tab.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["template","plotter","parametric","tangent","graphs"],"hasliked":0,"parentid":"Dsj3Ww","parentname":"Tangent Plotter (Explicit)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Curve defined as parametric(t) = (x(t), y(t))     - redefine.\n    First derivative parametric is parametric_dydx(t) - redefine of use numeric (see function body).\n    First derivative of parametric_dydx is deriv(t)   - redefine of use numeric (see mainImage body).\n    Recompile.\n    \n    \n    Some interpretation:\n         p(t) = [x(t), y(t)] - parametric curve \n                       dy/dt - change of y(t) with respect to t\n                       dx/dt - change of x(t) with respect to t\n         dy/dx = (dy/dt) / (dx/dt) =\n               = (dy/dt) * (dt/dx)\n                             - change of y(t) with respect to x(t).\n    \n    Tangent line: ax + b\n        a = tan(theta) = dy/dx at t0 => theta = atan(dy/dx)\n        x = x - x(t0)\n        b = y(t0)\n        \n*/\n#define R                           iResolution\n#define AR                        (  R.x / R.y  )\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      (  16.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define HASH(x,y)                 ( hash2to2(uint(x), uint(y)) )\n#define SCENE_SCALE               ( 5.0 )\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_explicit_func(vec2 NDC, float fx, float dfdx)\n{\n    float sdf = NDC.y - fx;\n    return SMAA(abs(sdf) / sqrt(1.0 + dfdx * dfdx)); // absolute value / arclenght over unit length interval\n}\n\n\nfloat x(float t) { return t - sin(t); }\nfloat y(float t) { return 1. - cos(t); }\nvec2 parametric(float t) { return vec2(x(t), y(t)); }\nfloat dxdt(float t) \n{    \n    return (x(t+0.01) - x(t)) * 100.; // Numeric derivative.    \n    //return 1. - cos(t);           // Analytic derivative.\n}\nfloat dydt(float t) \n{     \n    return (y(t+0.01) - y(t)) * 100.; // Numeric derivative. \n    //return sin(t);                // Analytic derivative.\n}\nvec2 tangent(float t)\n{   \n    return (parametric(t+0.01) - parametric(t)) * 100.; // Numeric derivative.  \n    //return vec2(dxdt(t), dydt(t));                  // Analytic derivative.\n}\nvec2 gradient(float t) { return tangent(t); }\nvec2 normal(float t) { vec2 T = tangent(t); return vec2(-T.y, T.x);  }\nfloat parametric_dydx(float t) { vec2 T = tangent(t); return T.y/T.x; }\nfloat parametric_d_dydx_dt(float t)\n{ \n    // d_dydx_dt = [d(dy/dx)]/dt          - not second derivative of parametric!\n    //   ddydxx = ([d(dy/dx)]/dt)/(dx/dt) - second derivative.\n        \n    return ( parametric_dydx(t+0.01) - parametric_dydx(t) ) * 100.; // Numeric derivative.    \n    //return 0.; // Analytic derivative.\n}\nfloat parametric_ddydxx(float t) { return parametric_d_dydx_dt(t) / dxdt(t); }\n\n// https://www.shadertoy.com/view/NtVfWG\nfloat parametric_sdf(\n    in vec2 NDC,\n    in vec2 from, // NDC.x range\n    in vec2 to,   // t range\n    in float count)\n{\n    float dt = (from.y - from.x) / (count - 1.);\n    \n    float minimal_distance = 99.;\n    vec2 B = parametric(linear_remap(from.x, from.x, from.y, to.x, to.y));\n      \n    for (float i = 1.; i < count; i += 1.)\n    {\n        float t = linear_remap(from.x + dt * i, from.x, from.y, to.x, to.y);\n    \n        vec2 E = parametric(t);\n        minimal_distance = \n            min(minimal_distance, segmentSDF(NDC, B, E, 0.));\n        B = E;\n    }\n    \n    //float thickness = sinOSC(-5., 20., iTime)/R.y;\n    return minimal_distance;//-thickness;\n}\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - R.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse)\n{\n    vec2 M = MOUSE_OFFSET * (mouse == true ? 1. : 0.);\n    return ((2. * (SC - M) - R.xy) / R.y) * scale - origin;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0, 0), true);\n\n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n         \n      \n      \n    /* Parametric function (x,y)=f(t) */\n    //                                                                         from                      to\n    //color = mix( color, vec3(1,0,0), SMAA(parametric_sdf(NDC, vec2(-AR*SCENE_SCALE, AR*SCENE_SCALE), vec2(0, 1), 64.)) );\n    color = mix( color, vec3(1,0,0), SMAA(parametric_sdf(NDC, vec2(-AR*SCENE_SCALE, AR*SCENE_SCALE), vec2(-20, 20), 256.)) );\n\n\n\n    /* First derivative dydx */\n    color = mix( color, vec3(0,1,0), draw_explicit_func(NDC, parametric_dydx(NDC.x), parametric_d_dydx_dt(NDC.x)) );\n\n\n\n    /* Define t0 */\n#define RANGE      ( AR*SCENE_SCALE )\n    float t0 = sinOSC(-RANGE, RANGE, iTime*0.15) * 0.5;\n    //float t0 = sinOSC(0.1, RANGE, iTime*0.15);\n   \n \n \n    /* Tangent line */\n    vec2 p0 = parametric(t0);\n    float slope = parametric_dydx(t0);\n#define tangent_line(t) ( slope*((t)-p0.x)+p0.y ) // variable t used, istead of x, because of compiler.\n    color = mix(color, vec3(0,0,1), draw_explicit_func(NDC, tangent_line(NDC.x), slope) ); // tangent line\n\n\n\n    /* Tangent (gradient) and normal vectors */\n    vec2 B = p0, T = tangent(t0), N = normal(t0), E = B + normalize(T);\n    color = mix(color, vec3(0,0,0), SMAA(segmentSDF(NDC, B, E, 0.01)) ); // unit tangent vector (gradient vector)\n    E = B + normalize(N);\n    color = mix(color, vec3(0,0,0), SMAA(segmentSDF(NDC, B, E, 0.01)) ); // unit normal vector\n    color = mix(color, vec3(1,0,1), SMAA(diskSDF(NDC, p0, 2.*UNIT)) );\n\n\n\n    /* Cells */\n    #define CELL_SIZE 1\n    NDC = mod(NDC, vec2(CELL_SIZE)); \n    color -= vertical_line(NDC, 0.)*.2;  color -= horizontal_line(NDC, 0.)*.2; // comment this line if you not use mod\n    color -= vertical_line(NDC, -1.)*.2; color -= horizontal_line(NDC, -1.)*.2;         \n    color -= vertical_line(NDC, 1.)*.2;  color -= horizontal_line(NDC, 1.)*.2; \n    /* */ \n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF(vec2 NDC, vec2 C, float R) { return length(C - NDC)-R; }\n\nfloat segmentSDF(in vec2 NDC, in vec2 B, in vec2 E, in float R)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}\n\nfloat linear_remap(\n    float val,\n    float fl,\n    float fr,\n    float tl,\n    float tr)\n{\n    val = (val - fl) / (fr - fl); // inverse linear map from [fl; fr] to [0; 1].\n    return val * (tr - tl) + tl;  // linear map from [0; 1] to [tl; tr].\n}","name":"Common","description":"","type":"common"}]}