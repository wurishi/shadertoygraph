{"ver":"0.1","info":{"id":"NltBDS","date":"1663614474","viewed":87,"name":"ode to Julia","username":"pb","description":"Move the Mouse Horizontally slowly, if you find a point you like and want to change slower then move the Mouse Vertically at that point\n\nReduce MAX_ITER if you want to explore the points where it looks random","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["fractal","animation","juliasets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    //size of one texel in iChannel0\n    vec2 texel = 1./iResolution.xy;\n\n    vec4 total_color;\n    //see 5x5 gaussian weights in Common \n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n   \n    fragColor = total_color;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//philip.bertani@gmail.com\n#define MAX_ITER 14.  //if you are at a point that looks random reduce this to 5 or 10\nvec2 invz2( in vec2 z ) {  //1/z^2 here, z being complex\n    float xy = z.x*z.y; z*=z;\n    float modz2 = 1./max(z.x*z.x + z.y*z.y + 2.*xy*xy, 1e-3);\n    z.x = z.x - z.y; z.y = -2.*xy; return modz2*z; }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //float ar = iResolution.x/iResolution.y;\n    vec2 uv = (2.*fragCoord.xy - iResolution.xy)/iResolution.y; \n    //uv.x *= ar;\n    vec2 center = vec2(0), width  = vec2( 2.);  \n    vec2 final_uv = (uv*width - center);  \n    float mix_factor=1., infinity=1e5;\n    vec2 jc = 3.*(iMouse.xy/iResolution.xy-vec2(.5));\n    jc.x += jc.y/50.; jc.y = 0.; jc.x -= .5; \n    if (iMouse.w==0.) jc = vec2(-1.028+.1*sin(iTime/3.),0.);\n    vec2 iter=final_uv, new_iter;\n    float escape_value = 0.;    \n    for ( float i=0.; i<MAX_ITER; i++ ) {    \n        new_iter = invz2(iter) + jc; iter = new_iter;\n        float distance = new_iter.x*new_iter.x + new_iter.y*new_iter.y;\n        if ( distance > infinity ) {\n            escape_value = i; break; }       \n    }    \n    if ( escape_value != 0. ) {\n        fragColor = vec4( vec3(0.), 1.);\n    }\n    else {\n        vec2 l1 = cos(log(abs(new_iter))*vec2(.3,.15));\n        float l2 = cos(atan( new_iter.y/new_iter.x)*.5);\n        fragColor = vec4( pow( (vec3( l1*l1, l2*l2)),vec3(8.)), 1. );\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}