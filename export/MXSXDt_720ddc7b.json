{"ver":"0.1","info":{"id":"MXSXDt","date":"1711213747","viewed":168,"name":"Sound Reactive Circle","username":"Friend","description":"Deforming circle with value nose and sound","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["2d","noise","sound","circle","valuenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 gfb(vec2 ndc) {\n    float bass   = 0.0;\n    float mid    = 0.0;\n    float treble = 0.0;\n    \n    // Loop over a set range of indices for each band to average their magnitudes\n    int spb = 10; \n    for (int i = 0; i < spb; i++) {\n        bass += texelFetch(iChannel0, ivec2(i, 0), 0).x;          // Bass band (low frequencies)\n        mid += texelFetch(iChannel0, ivec2(170 + i, 0), 0).x;     // Mid band (middle frequencies)\n        treble += texelFetch(iChannel0, ivec2(340 + i, 0), 0).x;  // Treble band (high frequencies)\n    }\n    \n    // Average the magnitudes for each band\n    bass /= float(spb);\n    mid /= float(spb);\n    treble /= float(spb);\n    \n    return vec3(bass, mid, treble);\n}\n\nvoid mainImage(out vec4 o, in vec2 i) {\n    vec2 p = d(i, 5.5);\n    vec2 ndc = i.xy / R.xy;\n    vec3 bands = gfb(ndc);\n\n    float vn1  = vn3(vec3(p-vec2(t), t));\n    float vn2  = vn3(vec3(p*2., t*2.));\n    float vn3_ = vn3(vec3(p*4., t*4.));\n    float vn4  = vn3(vec3(-p*16., -t*16.));\n    float vn   = .8*vn1 + .3*vn2 + .2*vn3_ + .1*vn4;\n    \n    float cd = abs(length(p) - (.5+3.*bands.x) + .5*vn);\n    cd = smoothstep(0.55+bands.z, 0.01, cd);\n  \n    vec3 col = vec3(0.388,0.388,0.992);\n    col += vn3(vec3(log(cd), vn, vn)) / length(p*.45);    \n    col.r += 3.*bands.y*log(vn+1.)*vn2;\n    \n    o = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R       iResolution\n#define t       iTime\n#define d(p,s)  (2. * p.xy - R.xy) / R.y * s\n#define mod3_   vec3(.1031, .11369, .13787)\n\nfloat hash3_1(vec3 p3) {\n\tp3  = fract(p3 * mod3_);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1. + 2. * fract((p3.x + p3.y) * p3.z);\n}\n\nfloat vn3(vec3 p) {\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3. - 2. * pf);\n    \n    return \tmix(\n    \tmix(\n        \tmix(hash3_1(pi + vec3(0, 0, 0)), hash3_1(pi + vec3(1, 0, 0)), w.x),\n            mix(hash3_1(pi + vec3(0, 0, 1)), hash3_1(pi + vec3(1, 0, 1)), w.x), \n  \t    w.z),\n        mix(\n            mix(hash3_1(pi + vec3(0, 1, 0)), hash3_1(pi + vec3(1, 1, 0)), w.x),\n            mix(hash3_1(pi + vec3(0, 1, 1)), hash3_1(pi + vec3(1, 1, 1)), w.x), \n      \tw.z),\n\tw.y);\n}\n\n","name":"Common","description":"","type":"common"}]}