{"ver":"0.1","info":{"id":"lcVXDd","date":"1716119285","viewed":47,"name":"Ray(path)tracing w/ discard","username":"ZoldLeo","description":"Raytracing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float co) {return fract(sin(co*(91.3458)) * 47453.5453);}\nvec3 randDir(float seed) {\n    float U = rand(seed*(iTime+20.))*2.-1.;\n    float V = rand(U)*2.-1.;\n    float S = U*U+V*V;\n    while (S >= 1.) {\n        U = rand(V)*2.-1.;\n        V = rand(U)*2.-1.;\n        S = U*U+V*V;\n    }\n    vec3 dir = vec3(U*sqrt(-2.*log(S)/S),V*sqrt(-2.*log(S)/S),0);\n    U = rand(V)*2.-1.;\n    V = rand(U)*2.-1.;\n    S = U*U+V*V;\n    while (S >= 1.) {\n        U = rand(V)*2.-1.;\n        V = rand(U)*2.-1.;\n        S = U*U+V*V;\n    }\n    return normalize(vec3(dir.xy,U*sqrt(-2.*log(S)/S)));\n}\n\nvec3 randDir(vec3 norm, vec2 seed) {\n    vec3 dir = randDir(rand((1.-length(seed))*100.));\n    if (dot(norm, dir) < 0.)\n        dir = -dir;\n    return dir;\n}\n\nstruct sph {vec4 pos;vec3 col;bool light;float roughness;};\nsph[] sphs = sph[9](sph(vec4(1,1.5,10,1),vec3(.9,.1,.1),false,.5),sph(vec4(1.2,1,10,1),vec3(.9,.1,.9),false,.5),sph(vec4(0,-100,10,100),vec3(.9),false,.5),sph(vec4(0,0,120,100),vec3(.9),false,0.),sph(vec4(0,120,10,100),vec3(.9),false,1.),sph(vec4(0,0,-110,100),vec3(.9),false,0.),sph(vec4(110,0,10,100),vec3(.9),false,1.),sph(vec4(-110,0,10,100),vec3(.9),false,1.),sph(vec4(-3,2,10,1),vec3(1),true,.5));\n\nvec2 minvec(vec2 a, vec2 b){\n    return mix(a,b,step(b.x,a.x));\n}\n\nfloat dist(vec4 sphere, vec3 ray) {\n    float a = dot(ray,ray);\n    float b = dot(ray, sphere.xyz);\n    float c = dot(sphere.xyz,sphere.xyz)-pow(sphere.w,2.);\n    float t0 = (b+sqrt(pow(b,2.)-a*c))/a;\n    float t1 = (b-sqrt(pow(b,2.)-a*c))/a;\n    if (isnan(min(t0,t1)) || min(t0,t1)<=0.)\n        return 101.;\n    return min(t0,t1);\n}\nvoid castBounce(inout vec3 orig, inout vec3 ray, inout vec3 col, vec2 seed){\n    vec2 d = vec2(100,-1);\n    for(int i=0; i<sphs.length(); i++){\n        d = minvec(d,vec2(dist(sphs[i].pos-vec4(orig,0),ray),i));\n    }\n    int ind = int(d.y);\n    if (ind == -1) {\n        orig = vec3(0);\n        ray = vec3(0);\n        return;\n    }\n    if (sphs[ind].light) {\n        orig = vec3(0);\n        ray = vec3(1);\n        col = col*sphs[ind].col;\n        return;\n    }\n    orig = orig+ray*d.x;\n    vec3 norm = (orig-sphs[ind].pos.xyz)/sphs[ind].pos.w;\n    ray = ray-2.*dot(ray,norm)*norm;\n    if (sphs[ind].roughness > 0.) ray = randDir(norm, seed);\n    col = col*sphs[ind].col;\n}\nvec3 castRay(vec2 uv) {\n    vec3 ray = vec3(uv,1);\n    vec3 orig = vec3(0);\n    vec3 col = vec3 (1);\n    for (int i=0; i<=100; i++) {\n        castBounce(orig,ray,col,uv);\n        if (ray==vec3(1))\n            return col;\n        if (ray==vec3(0))\n            break;\n    }\n    discard;\n    return vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.x*2.;\n    fragColor = vec4(castRay(uv), 1);\n}","name":"Image","description":"","type":"image"}]}