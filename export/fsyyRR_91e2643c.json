{"ver":"0.1","info":{"id":"fsyyRR","date":"1654312303","viewed":75,"name":"Xor operation","username":"tk87","description":"xor mod","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["xor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float xor(float x, float y) {\n    float ret = 0.0;\n    float a = 1.0;\n    for(int i = 0; i < 31; ++i){\n        ret += mod(x + y, 2.0) * a;\n        a *= 2.0;\n        x = floor(x * 0.5);\n        y = floor(y * 0.5); \n    }\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float t = iTime;\n    \n    float m = mod(floor(t*3.0), 300.0) + 2.0;\n    uv *= 200.0;\n    uv = floor(abs(uv));\n    \n    fragColor = vec4(vec3(log(m) / mod(float(int(uv.x)^int(uv.y)), m)), 1.0);\n    //fragColor = vec4(vec3(log(m) / mod(xor(uv.x, uv.y), m)), 1.0);\n}","name":"Image","description":"","type":"image"}]}