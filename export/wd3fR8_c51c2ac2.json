{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define pi 3.14159265359\n\nfloat get_ratio(float ratio, float start, \n                float finish, float power) \n{\n    return pow(\n        (\n            step(start, ratio) * \n            step(-finish, -ratio) * \n            (ratio-start)/(finish-start)\n        ),\n        power\n    );\n}\n\n\nconst float speed = 0.6;\nconst float blur = 10.;\nconst float zoom = 0.3;\n\nconst vec3 strip_col = vec3(0.05); // vec3(30./255., 50./255., 50./255.);\nconst vec3 background_col = vec3(0.8);\nconst float strip_count = 5.;\n\n\n////////////////////\n///   Stage 1.   ///\n////////////////////\nconst float start_1 = 0.0;\nconst float finish_1 = 0.3;\nconst float power_1 = 0.5;\n\n\n////////////////////\n///   Stage 2.   ///\n////////////////////\nconst float start_2 = 0.3;\nconst float finish_2 = 0.7;\nconst float power_2 = 1.;\n\n\n////////////////////\n///   Stage 3.   ///\n////////////////////\nconst float start_3 = 0.7;\nconst float finish_3 = 1.0;\nconst float power_3 = 2.;\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = mod(speed*iTime, 2.) - 1.;\n    time *= step(0., time);\n    \n    bool change_scene = int((speed*iTime + start_2)/2.) % 2 == 0;\n    float ratio = time;\n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float stage_1 = get_ratio(ratio, start_1, finish_1, power_1);\n    float stage_2 = get_ratio(ratio, start_2, finish_2, power_2);\n    float stage_3 = get_ratio(ratio, start_3, finish_3, power_3);\n    \n    \n    ////////////////////\n    ///   Stage 1.   ///\n    ////////////////////\n    uv -= 0.5;\n    uv *= 1. + zoom * stage_1;\n    uv += 0.5;\n    \n    \n    ////////////////////\n    ///   Stage 2.   ///\n    ////////////////////\n    uv -= 0.5;\n    uv *= 1. + zoom * float(stage_2 > 0.);\n    uv += 0.5;\n    uv.y -= stage_2;\n    \n    \n    ////////////////////\n    ///   Stage 3.   ///\n    ////////////////////\n    uv -= 0.5;\n    uv *= (stage_3 == 0.) ? 1. : 1. + zoom * (1.-stage_3);\n    uv += 0.5;\n    \n    \n    /////////////////////\n    ///   Mirroring   ///\n    /////////////////////\n    if (uv.y < 0.) {\n        if (stage_3 == 0.) {\n            change_scene = !change_scene;\n        }\n        uv.y += 1.;\n        if (uv.y < 0.) {\n            if (stage_2 <= 0.) {\n                change_scene = !change_scene;\n            }\n            uv.y += 1.;\n        }\n    } else if (uv.y > 1.) {\n        if (stage_3 > 0.) {\n            change_scene = !change_scene;\n        }\n        uv.y -= 1.;        \n    }\n        \n    \n    \n    /////////////////////////////\n    ///   Picking the color   ///\n    /////////////////////////////\n    vec3 col = (change_scene) \n        ? texture(iChannel0, uv).rgb \n        : texture(iChannel1, uv).rgb;\n    \n    \n    \n    //////////////////////\n    ///   Background   ///\n    //////////////////////\n    vec2 real_uv = fragCoord/iResolution.xy;\n    if (uv.x < 0. || uv.x > 1. ) {\n        col = 1.5 * texture(iChannel2, real_uv).rgb;\n        if (sin(strip_count*2.*pi*uv.y) >= 0.) {\n            col = strip_col;\n        }\n    }\n    if (uv.x < 0. && uv.x > -0.4*zoom/(2.*(1.+zoom)) ) {\n        col = strip_col;\n    }\n    if (uv.x > 1. && uv.x < 1.+0.4*zoom/(2.*(1.+zoom)) ) {\n        col = strip_col;\n    }\n    if (uv.x < -0.9*zoom/(2.*(1.+zoom))) \n    {\n        col = strip_col;\n    }\n    if (uv.x > 1.+0.9*zoom/(2.*(1.+zoom)) ) {\n        col = strip_col;\n    }\n    \n    \n    \n    //////////////////////////\n    ///    Sliding blur    ///\n    //////////////////////////\n    /*\n    float numSteps = float(int(\n        blur * sin(pi * pow(ratio, power))\n    ));\n    float sigma = 0.01;\n    for (float i=1.; i<numSteps; i++)\n    {\n        uv.y -= sigma;\n        col += (change_scene) \n            ? texture(iChannel0, uv).rgb \n            : texture(iChannel1, uv).rgb;\n    }\n    if (numSteps != 0.)\n        col /= numSteps;\n    */\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":true,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"wd3fR8","date":"1734427177","viewed":31,"name":"Transition.Strip.No.1","username":"avartation","description":"DC,NB ","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["skcjbn"],"hasliked":0,"parentid":"","parentname":""}}