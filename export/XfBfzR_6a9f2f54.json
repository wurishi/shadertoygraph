{"ver":"0.1","info":{"id":"XfBfzR","date":"1724533025","viewed":93,"name":"Kessel Run [Interactive]","username":"jakeeis","description":"My submission for the 2024 OLC Code jam (https://itch.io/jam/olc-codejam-2024)\n\n\"It's the ship that made the Kessel Run in less than twelve parsecs\" Han Solo\n\nClick to move the black hole around the screen.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["blackhole","starwars","olc","2024","codejam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rotX(vec3 v, float theta)\n{\n    return vec3(v.x, v.y * cos(theta) - v.z * sin(theta), v.y * sin(theta) + v.z * cos(theta));\n}\n\nvec3 rotY(vec3 v, float theta)\n{\n    return vec3(v.x * cos(theta) + v.z * sin(theta), v.y, v.x * -sin(theta) + v.z * cos(theta));\n}\n\nvec3 rotZ(vec3 v, float theta)\n{\n    return vec3(v.x * cos(theta) - v.y * sin(theta), v.x * sin(theta) + v.y * cos(theta), v.z);\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdHollowCylinder(vec3 p, float h, float r, float t)\n{\n    return max(\n        sdCappedCylinder(p, h, r),\n        -sdCappedCylinder(p, h + 0.1f, r - t)\n    );\n}\n\nfloat getDist(vec3 pos)\n{\n    float sqrt2 = 1.4142f;\n    \n    vec3 ringPos = vec3(0.0f, 0.0f, max(floor(pos.z / 2.0f) * 2.0f + 0.5f, -3.5f));\n    float ringRot = 3.14159f / 2.0f;\n    \n    vec3 boxDims = vec3(0.25f, 0.125f, 2.0f);\n    vec3 boxPos = vec3(1.25f * vec2(sqrt2) + ringPos.xy, 1.5f);\n    \n    return min(\n            sdHollowCylinder(rotX(pos - ringPos, ringRot), 0.125f, 2.5f, 0.25f),\n            sdBox(rotZ(abs(pos) - boxPos, 3.14159f / 4.0f), boxDims)\n        );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec3 ray = normalize(vec3(p, -1.0f) - vec3(0.0f));\n    \n    vec3 cockpitLightPos = vec3(0.0f, 0.5f, -0.5f);\n    float cockpitLightStrength = 0.6f;\n    \n    vec3 bhLightPos = 6.0f * vec3(m, -1.0f);\n    float bhLightStrength = 5.0f;\n    \n    vec3 albedo = vec3(0.2f);\n    \n    bool hit = false;\n    \n    float dist = 0.0f;\n    while(dist < 10.f)\n    {\n        vec3 pos = ray * dist;\n        float distInc = getDist(pos);\n        \n        if (distInc < 0.0001f)\n        {\n            fragColor = vec4(1.0f, 1.0f, 0.0f, 1.0f);\n            \n            vec3 n = normalize(vec3(\n                getDist(pos + vec3(0.00001f, 0.0f, 0.0f)) - distInc,\n                getDist(pos + vec3(0.0f, 0.00001f, 0.0f)) - distInc,\n                getDist(pos + vec3(0.0f, 0.0f, 0.00001f)) - distInc\n            ));\n            \n            float lightStrength =\n                cockpitLightStrength * pow(distance(cockpitLightPos, pos), -2.0f) * dot(n, normalize(cockpitLightPos - pos))\n                + bhLightStrength * pow(distance(bhLightPos, pos), -2.0f) * dot(n, normalize(bhLightPos - pos));\n            \n            fragColor = vec4(lightStrength * albedo, 1.0f);\n            hit = true;\n            break;\n        }\n        \n        dist += distInc;\n    }\n    \n    float gamma = 2.2f;\n    fragColor = vec4(hit ? pow(fragColor.rgb, vec3(1.0/gamma)) : texture(iChannel0, uv).xyz, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://www.shadertoy.com/view/lsf3WH\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n\n// Value Noise (http://en.wikipedia.org/wiki/Value_noise), not to be confused with Perlin's\n// Noise, is probably the simplest way to generate noise (a random smooth signal with \n// mostly all its energy in the low frequencies) suitable for procedural texturing/shading,\n// modeling and animation.\n//\n// It produces lowe quality noise than Gradient Noise (https://www.shadertoy.com/view/XdXGW8)\n// but it is slightly faster to compute. When used in a fractal construction, the blockyness\n// of Value Noise gets qcuikly hidden, making it a very popular alternative to Gradient Noise.\n//\n// The principle is to create a virtual grid/latice all over the plane, and assign one\n// random value to every vertex in the grid. When querying/requesting a noise value at\n// an arbitrary point in the plane, the grid cell in which the query is performed is\n// determined, the four vertices of the grid are determined and their random\n// value fetched and then bilinearly interpolated with a smooth interpolant.\n\n// All noise functions here:\n//\n// https://www.shadertoy.com/playlist/fXlXzf&from=0&num=12\n\nfloat hash( in ivec2 p )  // this hash is not production ready, please\n{                         // replace this by something better\n\n    // 2D -> 1D\n    int n = p.x*3 + p.y*113;\n\n    // 1D hash by Hugo Elias\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return -1.0+2.0*float( n & 0x0fffffff)/float(0x0fffffff);\n}\n\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n    vec2 f = fract( p );\n\t\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);  \n\n    float m =  mix( mix( hash( i + ivec2(0,0) ), \n                     hash( i + ivec2(1,0) ), u.x),\n                mix( hash( i + ivec2(0,1) ), \n                     hash( i + ivec2(1,1) ), u.x), u.y);\n                     \n    return m;\n}\n\n// https://www.shadertoy.com/view/Xt23Ry\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 galaxy(vec2 fragCoord, vec3 iResolution)\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n    \n    float f = 0.0;\n    \n    uv *= 8.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    f += 0.03125*noise( uv ); uv = m*uv;\n    f += 0.015*noise( uv ); uv = m*uv;\n\n\tf = 0.5 + 0.5*f;\n    \n    f = 1.0f - pow(f, pow(0.8f - abs(0.5f - p.y), 3.0f));\n    f *= 2.0f;\n    \n    vec3 base = mix(vec3(0.55f, 0.4f, 0.43f), vec3(0.25f, 0.2f, 0.16f), f);\n\t\n    return vec4( base, f );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float val = rand(uv);\n    val = val < 0.99 ? 0.0f : val;\n    val *= 0.75f * sin(iTime + val * 2500.0f + 2374.0f * uv.x) + 0.5f;\n    \n    float bgColorStep = 0.85f * pow(1.0f - abs(0.5f - uv.y), 7.0f);\n    \n    vec3 bgColor = 0.8f * mix(vec3(0.05f, 0.1f, 0.15f), vec3(0.90f, 0.91f, 0.92f), bgColorStep);\n    \n    vec4 galaxyColor = galaxy(fragCoord, iResolution);\n    \n    bgColor = galaxyColor.xyz * galaxyColor.a + bgColor * (1.0f - galaxyColor.a);\n    \n\n    // Output to screen\n    fragColor = vec4(vec3(val) + bgColor, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float getIOR(float r, float m) {\n    float g = 1.0f;\n    float c = 100.0f;\n\n    float phi = g * m / (r * pow(c, 2.0f));\n    \n    return 1.0f / (0.5f * (sqrt(1.0f - 2.0f * phi) + 1.0f - phi) * sqrt(1.0f - 2.0f * phi));\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.y / iResolution.x;\n    float focalLength = 1.0f;\n    \n    if (iMouse.x < 2.0f && iMouse.y < 2.0f) m = vec2(0.75f, -0.2f);\n    \n    vec3 focalPoint = vec3(0.0f);\n    vec3 screenPoint = focalLength * vec3(p, -1.0f);\n    vec3 ray = normalize(screenPoint - focalPoint);\n    \n    vec3 centerBH = 2.0f * vec3(m, -1.0f);\n    float radiusBH = 2.0f;\n    \n    // Not accurate, but cool\n    float mass = 1000.0f * (0.95f + 0.005f * sin(iTime / 2.0f));\n\n    float dist = 0.0f;\n\n    float prevIOR = 1.0f;\n    float ior = 1.0f;\n\n    int iter = 0;\n    \n    bool colSet = false;\n    vec4 col;\n\n    while (dist < 10.0f) {\n        if (iter++ >= 1000) break;\n\n        vec3 pos = ray * dist + focalPoint;\n        float distFromCenter = distance(centerBH, pos);\n        float distInc = distFromCenter - radiusBH;\n        bool isInsideBH = distInc < 0.0f;\n        \n        if (distFromCenter < 0.4f) {\n            fragColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n            return;\n        }\n        \n        // Check disk dist\n        float distToDisk = sdCappedCylinder(pos - centerBH, 0.005f, 1.0f);\n        if (distToDisk < 0.0001f) {\n            // Color\n            float d = distFromCenter / 1.0f;\n            d *= d;\n            \n            float t = 0.25f * sin(iTime) + 0.75f;\n            \n            vec3 white = vec3(0.97f, 0.98f, 0.99f);\n            vec3 blue = vec3(0.69f, 0.82f, 0.93f);\n            \n            \n            vec3 diskCol = mix(white, blue, 1.33f * d) + 0.1f * t;\n             \n            // Noise\n            float f = 0.0;\n\n            vec2 x = 8.0 * vec2(d, 1.0f);\n            mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n            f  = 0.5000*noise( x ); x = m*x;\n            f += 0.2500*noise( x ); x = m*x;\n            f += 0.1250*noise( x ); x = m*x;\n            f += 0.0625*noise( x ); x = m*x;\n\n            f = 0.4f * f * t;\n            \n            colSet = true;\n            col = vec4(diskCol + f, 1.0f - pow(d, 5.0f));\n            break;\n        }\n\n        prevIOR = getIOR(distance(centerBH, pos - 0.01f * ray), mass);;\n        ior = getIOR(distFromCenter, mass);\n\n        vec3 i = normalize(ray);\n        vec3 n = normalize(pos - centerBH);\n\n        if(dot(i, n) > 0.0f) n *= -1.0f;\n\n\n        float eta = prevIOR / ior;\n\n        ray = refract(i, n, eta);\n        focalPoint = pos - ray * dist;\n        distInc = abs(distInc) + 0.1;\n\n        dist += min(0.75f * (isInsideBH ? min(abs(distInc), radiusBH / 100.0f) : abs(distInc)), distToDisk);\n    }\n    \n    // Output to screen\n    ray.x *= aspectRatio;\n    float w2 = focalLength / -ray.z;\n    vec2 uv2 = (ray.xy * w2 + 1.0f)/ 2.0f;\n    \n    \n    if (colSet) fragColor = vec4(mix(texture(iChannel0, uv2).xyz, col.xyz, col.a), 1.0f);\n    else fragColor = texture(iChannel0, uv2);\n}","name":"Buffer B","description":"","type":"buffer"}]}