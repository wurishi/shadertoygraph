{"ver":"0.1","info":{"id":"7tj3Dm","date":"1624064434","viewed":152,"name":"Spiral Circle Distance Field","username":"lumic","description":"\"Big pixel grid\" based on https://www.shadertoy.com/view/ltcfR7\n\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"ltcfR7","parentname":"krlozadan_animating_circles"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float spiralSdf(vec2 p, float t) {\n    float r2 = dot(p,p);\n    float angle = atan(p.y, p.x);\n    return abs((fract(log(r2) * t + angle * 0.159)));\n    //return (sin(fract((0.005 * r2) * t + angle * 0.159)));\n}\n\nfloat bigPixelColor(vec2 p, vec2 center) {\n    return sin(distance(p, center));\n}\n\nvec2 rotateUV(vec2 uv, float rotation)\n{\n    float mid = 0.0;\n    return vec2(\n        cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n        cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\n\nfloat triangleWave(float range, float stretch) {\n    return (abs(mod(iTime / stretch, range) - 0.5 * range) - 0.25) * 2.0;\n}\n\nfloat triangleStepWave(float range, float stretch, float refinement) {\n    return floor(triangleWave(range, stretch) * refinement) / refinement;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pixelWidth = 1.0 / iResolution.y;\n\n    // Defines the grid and circle size\n    float gridGranularity = 20.0;    \n    float radius = gridGranularity * 0.5;\n    \n    // Center the coordinates\n    float stepZoomAnimation = (1.75 + triangleStepWave(1.0, 5.0, 15.0));\n    vec2 p = iResolution.y * stepZoomAnimation * (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    // We calculate the big pixel coord and the circle center for that coord\n    vec2 gridCoord = floor(p / gridGranularity);\n\n    float t = iTime;\n    float spiralFactor = 0.22;\n    \n    float sdfZoomFactor = 8.0 * sin(iTime * 0.25);\n    vec2 sdfCoords = rotateUV(gridCoord, t) * sdfZoomFactor;\n    vec2 sdfCoords2 =  rotateUV(gridCoord, t + 3.14159) * sdfZoomFactor;\n\n    float sdf =  spiralSdf(sdfCoords * 5.0, spiralFactor);\n    sdf = step(0.5, sdf);\n    //sdf = sin(sdf * 10.0 * 3.14159);\n    //sdf = smoothstep(0.0, 1.0, sdf);\n\n    \n    float sdf2 =  spiralSdf(sdfCoords2 * 5.0, spiralFactor);\n    sdf2 = step(0.5, sdf2);\n    \n    float r1 = radius * clamp(sdf, 0.0, 1.0);\n    float r2 =  radius * clamp(sdf2, 0.0, 1.0);\n    \n    \n    // The center of the current \"big pixel\"\n    vec2 circleCenter = gridCoord * gridGranularity + radius;\n\t\n\t// This will create a cool effect of animating a circle\n    vec2 bigCircleCoord = vec2((iResolution.x * 0.5) + sin(iTime) * iResolution.x * 0.5, 0.0);\n    float diameter_scale = sin( distance( circleCenter, bigCircleCoord) * 0.03) * (sin(iTime) + 3.5) + 2.5; \n    \n    // Distance from \"big pixel center\"\n    float d = distance(p, circleCenter);\n    float d1 = clamp(d, 0.0, r1);\n\n    \n    // Add some smooth drop from light to dark towards the edge of the circle\n    float c1 = smoothstep(r1, r1 - 500.0 * pixelWidth, d1);\n    \n    // Rings/outlines\n    float d2 = clamp(d, 0.0, r2);\n    float c2 = sin(smoothstep(r2, (r2 - 1500.0 * pixelWidth), d2) * 3.0);\n    //c2 = smoothstep(0.5, 1.0, c2);\n    \n    //fragColor = vec4(sdf, sdf2, 0.0, 1.0);\n    \n    fragColor += vec4(0.15 * c1, 0.45 * c1, c1, 1.0) + c2;\n}","name":"Image","description":"","type":"image"}]}