{"ver":"0.1","info":{"id":"4f3cWn","date":"1730451787","viewed":88,"name":"funny pipes lol :3","username":"jy483752","description":":3","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["w"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi acos(-1.)\n#define tau pi*2.\n\nmat2 rot(float n){return mat2(vec2(cos(n),-sin(n)),vec2(sin(n),cos(n)));}\n\nvec4 hexagon(vec2 p, float sca)\n{\n    p = p*sca;\n    p.y /= sqrt(3.)/2.;\n    float odd_rows = mod(floor(p.y),2.);\n    p.x += odd_rows*.5;\n    vec2 i_uv = floor(p),\n         f_uv = fract(p)*2.-1.;\n    \n    vec2 q = (vec2(1)-abs(f_uv))*vec2(1.,sqrt(3.));\n    \n    if(q.x+q.y<.5){\n        i_uv = i_uv+vec2(sign(f_uv.x)*.5-odd_rows+.5,sign(f_uv.y));\n        f_uv = f_uv-2.*vec2(.5,1.)*sign(f_uv);\n    }\n    \n    return vec4(i_uv, f_uv*vec2(1.,sqrt(3.)/2.));\n}\n\nvec2 rand(vec2 p)\n{\n    return fract(sin(\n    p*vec2(4438.4183,6893.5365)+vec2(435.465,974.577)+\n    p.yx*vec2(8538.4124,5793.5495)+vec2(845.421,447.257)\n    ));\n}\n\nfloat truchet(vec2 p){\n    float width = .2;\n    \n    vec2 q = vec2(p.x,abs(p.y));\n    q.y-=2./sqrt(3.);\n    float arc = step(width,abs(length(q)-1./sqrt(3.)));\n    float line = step(width, abs(p.y));\n    return arc*line;\n}\n\nfloat image( vec2 p )\n{   \n    p*=rot(.2);\n    p.x-=iTime*.33;\n    \n    vec2 i_uv = hexagon(p,2.0).xy;\n    vec2 f_uv = hexagon(p,2.0).zw;\n    \n    float prev_r = rand(i_uv).x;\n    return truchet(f_uv*rot(\n    floor(prev_r*3.)*tau/3.\n    ));\n}\n\nfloat marcher( vec2 p, float far ){\n    const int iter = 8;\n    const int samp = 32;\n\n    if(image(p)>.5){\n        return 0.;\n    }\n    \n    float dist = 0.;\n    for(int j=0; j<iter; j++){\n        float d = 0.;\n        float diverge = 1.;\n        for(int i=0; i<samp; i++){\n            float perc = pow(float(i)/float(samp),2.);\n            d = mix(d,perc*far,diverge);\n\n            float ang = float(i*554+24+j);\n            vec2 rd = vec2(cos(ang),sin(ang));\n            if(image(p + rd * d)>.5){\n                diverge *= .1;\n            }\n        }\n        dist += d;\n    }\n    dist/=float(iter);\n    \n    return dist/far;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 ep = vec2(.015,0.);\n    vec3 nor = vec3(\n    marcher(uv-ep, .05)-marcher(uv+ep, .05),\n    marcher(uv-ep.yx, .05)-marcher(uv+ep.yx, .05),\n    0.\n    );\n    nor.z = 1.-max(abs(nor.x),abs(nor.y));\n    nor = normalize(nor);\n\n    vec3 col;\n    if(fragCoord.x<iMouse.x){\n        col = nor+.5;\n    }\n    else{\n        col = mix(vec3(0),\n        sin(vec3(4.,3.5,3.)+atan(nor.y,nor.x)*3.+iTime)+.5+vec3(.0,.1,.2),\n        1.-nor.z);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}