{"ver":"0.1","info":{"id":"3lyfRW","date":"1613924836","viewed":42,"name":"Fractal Experiment - 2 Mandelbro","username":"Learner_CC","description":"Mandelbro Demo","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2dmandelbro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Mandelbrot Fractor Demo\nvec3 MandelbrotFractor(vec2 st, int depth) {\n    vec2 frac = vec2(0.0);\n    float pct = 0.0;\n    for (int i = 0; i < depth; ++i) {\n        frac = vec2(frac.x * frac.x - frac.y * frac.y, 2.0 * frac.x * frac.y) + st;\n        if (dot(frac, frac) > 4.0) {\n            float s = 0.05 * float(i);\n            pct = cos(s + 0.5) * 0.4 + 0.6;\n            return vec3(pct);\n        }\n    }\n    return vec3(0.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / iResolution.xy;\n    vec2 uv = 2.0 * st - 1.0;\n    uv -= vec2(0.0, 0.3);\n    uv *= 2.0;\n    \n    uv *= mat2(0.0, 1.0, -1.0, 0.0);\n   \n    float n = 128.0;\n    float time = n * smoothstep(0.0, n, abs(mod(iTime * 20.0 + n, n * 2.0) - n));\n    int depth = int(time) + 2;\n    vec3 color = MandelbrotFractor(uv, depth);\n \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}