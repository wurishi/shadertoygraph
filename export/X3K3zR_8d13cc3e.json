{"ver":"0.1","info":{"id":"X3K3zR","date":"1717339698","viewed":59,"name":"play with hexagonal tiling","username":"letbonsaibe","description":"The Art of Code\n\nhttps://www.youtube.com/watch?v=VmrIDyYiJBA&t=813s&ab_channel=TheArtofCode","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","tiling","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.1415926\n#define iColor vec3(.5, 0.5, 0.)\n#define oColor vec3(.0, .0, 0.)\n\n\nfloat SdfHexgon(vec2 p, float r) {\n    p = abs(p);\n    float d = dot(p, vec2(cos(0.3 * PI), sin(0.3 * PI))); \n    d = max(d, p.x);\n    return d - r; \n}\n\nvec4 HexCoords(vec2 uv) {\n    vec2 r = vec2(1., sqrt(3.));\n    vec2 h = r * .5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b=  mod(uv - h, r) - h; \n \n    vec2 gv = length(a) < length(b) ? a : b;\n    \n    \n    gv.x = atan(gv.x, gv.y);\n    gv.y = SdfHexgon(gv, 0.5);\n    \n    vec2 id = uv - gv;\n    \n    return vec4(gv,  id);\n}\n\n\n// shameless stolen from https://www.ronja-tutorials.com/post/034-2d-sdf-basics/\nvoid paintSdf(inout vec3 color, float dist, float  lineDistance, float lineThinkness, float subLineThinkness, float subLineCount) {\n    float distanceChange = fwidth(dist) * .5; // anti aliasing\n\n    float majorLineDistance = abs(fract(dist / lineDistance + 0.5) - 0.5) * lineDistance;\n    float majorLines = smoothstep(lineThinkness - distanceChange, lineThinkness + distanceChange, majorLineDistance);\n    float distanceBetweenSubLines = lineDistance / subLineCount;\n    float subLineDistance = abs(fract(dist / distanceBetweenSubLines + 0.5) - 0.5) * distanceBetweenSubLines;\n    float subLines = smoothstep(subLineThinkness - distanceChange, subLineThinkness + distanceChange, subLineDistance);\n    color *= majorLines;\n    color *= subLines;\n}\n\n\n\nfloat func(float x) {\n\treturn x;\n}\n\nfloat plotValue(vec2 uv, float y) {\n    float m = smoothstep(-.01, .0, -uv.y + y);\n    m -= smoothstep(.01, .02, -uv.y + y);\n    return m;\n}\n\nvoid drawGrid(inout vec3 col, vec2 p, vec3 color, float thinkness , vec2 h) {\n  if ( h.x - abs(p).x  < thinkness) {\n        col += color;\n        }\n    \n    if ( h.y - abs(p).y  < thinkness) {\n        col += color;\n    }\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) /iResolution.y ;\n      \n        \n    vec3 col = vec3(0.0);\n\n       \n    uv *= 5.;\n    \n  \n    \n    col.rb =  (HexCoords(uv).zw + vec2(4.0)) / vec2(8.0);\n\n\n  \n \n          \n   // drawGrid(col, a,  vec3(1.0, 0.0, 0.0), 0.02, h);\n   // drawGrid(col, b, vec3(0.0, 1.0, 1.0), 0.01, h);\n   \n\n       \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}