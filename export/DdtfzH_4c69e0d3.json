{"ver":"0.1","info":{"id":"DdtfzH","date":"1696868646","viewed":56,"name":"Alive Fractals","username":"ixtam","description":"Ixtam Mendelbrot Set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mendelbrot","ixtam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Escala y desplazamiento para el conjunto de Mandelbrot\n    float zoom = 3.0;\n    vec2 offset = vec2(-0.5, 0.0);\n\n    // Aplica el zoom y el desplazamiento\n    uv = (uv - 0.5) * zoom + offset;\n\n    // Movimiento errático\n    vec2 jitter = vec2(sin(iTime * 0.4), cos(iTime * 0.3)) * 0.01;\n    uv += jitter;\n\n    // Calcula el color del conjunto de Mandelbrot\n    vec2 z = uv;\n    vec2 c = uv;\n    int iterations = 100;\n    int i = 0;\n\n    for (i = 0; i < iterations; i++) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if (length(z) > 2.0) {\n            break;\n        }\n    }\n\n    // Mapea el número de iteraciones a un color\n    float colorValue = float(i) / float(iterations);\n    vec3 col = vec3(colorValue);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}