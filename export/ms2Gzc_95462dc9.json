{"ver":"0.1","info":{"id":"ms2Gzc","date":"1667986337","viewed":47,"name":"Twist Any Shape","username":"Mario8664","description":"twist any shape","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DISTANCE 6.0\n#define PI 3.1415926535897932384626\n#define FRESNEL 2.0\n#define AOSTEP 0.1\n#define LIGHT vec3(-1.0, 2.0, -1.0)\n\nvec4 sdSphere(vec3 pos, vec3 color)\n{\n\treturn vec4(color, length(pos) - 1.0);\n}\n\nvec4 sdBox(vec3 pos, vec3 size, vec3 color)\n{\n    pos = abs(pos) - size;\n    return vec4(color, length(max(pos, 0.0)) + min(max(pos.x, max(pos.y,pos.z)),0.0));\n}\n\nvec3 twistY(vec3 pos, float k)\n{\n    float a = k * pos.y;\n    float sa = sin(a);\n    float ca = cos(a);\n    mat2 rotMat = mat2(ca, -sa, sa, ca);\n    pos.xz = rotMat * pos.xz;\n    return pos;\n}\n\nvec4 getScene(vec3 pos)\n{\n    float x = sin(iTime * 3.0) * 0.5;\n    //twist\n    pos = twistY(pos, x);\n    return sdBox(pos, vec3(1.0, 2.0, 1.0), vec3(1.0));\n}\n\nvec3 skyBox(vec3 rd)\n{\n    //return texture(iChannel0, rd).xyz;\n    return ceil(rd * 10.0) / 10.0;\n    //return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n    //Camera\n    vec2 m = iMouse.xy / iResolution.xy;//Camera input\n    vec3 target = vec3(0.0, 0.0, 0.0);//Camera view target\n    float theta = m.x * 2.0 * PI - sin(iTime * 3.0);//Input to y-axis angle(0 ~ 2PI)\n    float fai = clamp(m.y - 0.5, -0.4, 0.4) * PI;//Input to local x-axis angle(-0.4Pi ~ 0.4PI)\n\n    //rotation vector(unit vector)\n    vec3 rotation = vec3(cos(theta), sin(fai) ,sin(theta));\n    rotation.xz *= cos(fai);\n    \n    vec3 cameraPos = rotation * DISTANCE;\n    vec3 cameraForward = normalize(target - rotation);\n    vec3 cameraRight = normalize(cross(cameraForward, vec3(0.0, 1.0, 0.0)));\n    vec3 cameraUp = cross(cameraRight, cameraForward);\n    \n    vec3 ro = cameraPos;\n    vec3 rd = cameraForward * 2.0 + uv.x * cameraRight + uv.y * cameraUp;\n    rd = normalize(rd);\n    \n    float t = 0.0;\n    vec3 pos = ro;\n    vec3 col = skyBox(rd);\n    \n    for(int i = 0; i < 128; i++)\n    {\n    \tvec4 d = getScene(pos);\n        if(abs(d.w)<(0.0001*t))\n        {\n            vec2 offset = vec2(0.001, 0.0);\n            vec3 normal = vec3(getScene(pos + offset.xyy).w - getScene(pos - offset.xyy).w,\n                               getScene(pos + offset.yxy).w - getScene(pos - offset.yxy).w,\n                               getScene(pos + offset.yyx).w - getScene(pos - offset.yyx).w);\n            normal = normalize(normal);\n            //reflection\n            vec3 ref = skyBox(reflect(rd,normal));\n            //fresnel\n            float fresnel = (1.0 - dot(normal, -rd));\n            fresnel = pow(fresnel, FRESNEL);\n            ref *= fresnel;\n            //diffuse\n            float diffuse = dot(normal, normalize(LIGHT));\n            diffuse = clamp(diffuse, 0.1, 1.0);\n            diffuse = pow(diffuse, 0.5);\n            //specular\n            float specular = clamp(dot(normal,normalize(LIGHT-rd)), 0.0, 1.0);\n            specular = pow(specular, 18.0) * 0.1;\n            //ambient occlusion\n            ro = pos;\n            t = 0.0;\n            float ao = 0.0;\n            for(int j = 0; j < 4; j++)\n            {\n                ao += 1.0 / pow(2.0, float(j)) * (float(j) * AOSTEP - getScene(pos).w);\n                t -= AOSTEP;\n                pos = ro + rd * t;\n            }\n            ao = 1.0 - ao;\n        \tcol = diffuse * d.rgb + ref * fresnel + vec3(0.05) + specular;\n            //col *= ao;\n            break;\n            break;\n        }\n        t += d.w;\n        pos = ro + rd * t;        \n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}