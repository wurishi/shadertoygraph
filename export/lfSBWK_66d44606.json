{"ver":"0.1","info":{"id":"lfSBWK","date":"1730050553","viewed":61,"name":"spunup","username":"pb","description":"why not","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["fractal","raymarch"],"hasliked":0,"parentid":"4cfBDj","parentname":"neo"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//philip.bertani@gmail.com\n\n#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos( h*8.*(1.+.8*sin(iTime/7.)) + 30.*vec3(1,3,2)  )*.7 + .2  )\n\n//formula for mapping scale factor \n#define M(c)  log(c)\n\n#define R iResolution\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0), rd = normalize( vec3(U-.5*R.xy, R.y))*50.;\n    \n    float sc,dotp,totdist=0., t=iTime/2.;\n   \n    \n    for (float i=0.; i<100.; i++) {\n        \n        vec4 p = vec4( rd*totdist, 0.);\n      \n        p -= ( (mod(iTime,4.)<2.) ? round(p/1.5): vec4(0.) );\n        \n        p.xyz += vec3(4.*cos(t),0,-30.+5.*sin(t));\n        sc = 1.;  //scale factor         \n          \n        p.xyz = ROT( p.xyz,\n            normalize(vec3(sin(t/5.),sin(t/3.),0)), mod(5.*t,60.)*sin(t));\n        \n        for (float j=0.; j<2.; j++) {\n        \n            p =  log(1.+abs(p)) ;\n            \n            dotp = max(1./dot(p,p),.3);\n            sc *= dotp;  \n      \n            p *= dotp - .75;\n           \n        }\n         \n        float dist = abs(length(p)-.5)/sc ;  //distance estimate\n        float stepsize = dist/40. + 4e-4;   \n        totdist += stepsize;                  \n        \n       \n        //accumulate color, fading with distance and iteration count\n        c += .03 *  H(M(sc)) * exp(-stepsize*stepsize*totdist*totdist*1e5);\n    }\n    \n    c = clamp(c,0.,1.);\n    //c *= c ;\n    \n    O = ( vec4(c,0) );\n    //this one needs some gaussian blur \n               \n}        \n  ","name":"Buffer A","description":"","type":"buffer"}]}