{"ver":"0.1","info":{"id":"flBGWh","date":"1623772368","viewed":75,"name":"Expanding Hexagonal Grid","username":"AgentArachnid","description":"Need a bit of help with getting the hexagons to expand from the centre.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","hexagons","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float HexDist(vec2 p){\n    p = abs(p);\n    \n    \n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    return c;\n    }\n\nfloat CircleDist(vec2 uv, float radius){\n\n\n    float d = length(uv);\n    // Generates a smooth falloff for the circle mask\n    float c = smoothstep(radius, radius-2., d);\n    \n    return c;\n}\n\nvec4 HexCoord(vec2 uv){\n    // Generates a grid of Hexagons\n    vec2 r = vec2(1.,1.73);\n    vec2 h = r*0.5;\n    vec2 a = mod(uv,r) -h;\n    vec2 b = mod(uv-h,r)-h;\n    \n    vec2 gv;\n    if(length(a) < length(b))\n        gv  = a;\n    else\n        gv = b;\n        \n    float x = atan(gv.x, gv.y);\n    float y = 0.5-HexDist(gv);\n    // Makes an ID for each grid cell\n    vec2 id = uv - gv;\n    return vec4(x, y, id.x,id.y);\n}\n\nfloat HexColour(vec2 pos, vec2 maskCentre, float radius, float mask){\n    vec4 coord = HexCoord(pos);\n    float dist = distance(coord.zw, maskCentre);\n    if(dist < radius)\n    // If the distance is less than radius than the mask has passed this cell\n    // I want it to be able to start shrinking at this point so\n    // the size will be the distance to the radius normalised between 0-1 \n        return ((radius - dist) * mask)/5.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    float radius = iTime*5.;\n    vec2 centre =  vec2(0., 0.);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;    \n    // Controls size of grid cells\n    uv *= 10.;\n\n// Time varying pixel color\n    vec3 col = vec3(0);\n    \n    \n       \n    vec4 hc = HexCoord(uv);\n    float mask = CircleDist(uv, radius);\n    float c = smoothstep(0.05, 0.2,hc.y*clamp(\n    min(1.-HexColour(uv, centre, radius-5., mask), HexColour(uv, centre, radius, mask)),\n    0.,1.));\n    \n    \n    col +=  c;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}