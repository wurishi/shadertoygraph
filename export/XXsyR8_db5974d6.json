{"ver":"0.1","info":{"id":"XXsyR8","date":"1725838367","viewed":81,"name":"grass culegamer","username":"CuleGamer","description":"it's grass.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","grass","wind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float steps = 24.;\nconst vec3 colA = vec3(0.75, 0.8, 0.5);\nconst vec3 colB = vec3(0.3, 0.7, 0.3);\n\nvec2 randVec(vec2 I, float seed)\n{\n    return normalize(hash23(vec3(I, seed)));\n}\nfloat voronoi(vec2 pos, float seed)\n{\n    float dist = 1.0;\n    for(int x = -1; x <= 1; x++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            vec2 posNew = pos + vec2(x, y);\n            vec2 cellPos = fract(posNew);\n            vec2 cellCenter = posNew - cellPos;\n            vec2 offset = randVec(cellCenter, seed);\n            vec2 cellPoint = cellCenter + offset;\n            dist = min(dist, distance(pos, cellPoint));\n        }\n    }\n    return dist;\n}\n\nfloat wave(float x)\n{\n    x = abs(fract(x) - .5);\n    return x * x * (-32. * x + 24.) - 1.;\n}\n\nfloat wind(vec2 uv)\n{\n    return 0.02 * wave(uv.y - 0.5 * iTime) * wave(uv.x * 0.5 - 0.25 * iTime);\n}\n\nvoid mainImage(out vec4 O, in vec2 I)\n{\n    vec2 uv = (2. * I - iResolution.xy) / iResolution.y;\n    vec2 uvMouse = (2. * iMouse.xy - iResolution.xy) / iResolution.y;\n    float length = 0.15;\n    vec2 samplePos = uv;\n    vec2 uvGrass;\n    float height;\n    for(float i; i < steps; i++)\n    {\n        samplePos.y -= length / steps;\n        samplePos.x += wind(uv) / steps;\n        //float s = hash12(floor(samplePos * 100.) * 10.);\n        float s = voronoi(32. * samplePos, 0.5);\n        if(s <= 1. - i / steps)\n        {\n            uvGrass = samplePos;\n            height = i / steps;\n        }\n        \n    }\n    vec3 col;\n    vec3 grassCol = mix(colA, colB, hash12(floor(100. * uvGrass)));\n    col = grassCol * height;\n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}","name":"Common","description":"","type":"common"}]}