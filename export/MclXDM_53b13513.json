{"ver":"0.1","info":{"id":"MclXDM","date":"1705355560","viewed":77,"name":"planarUV example","username":"darkomtc","description":"just an example of fake 3d plane + anisotropicTexture filtering","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["projection","plane","perspective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nfloat cubicPulse( float c, float w, float x ){\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nfloat lerp(float a, float b, float f)\n{\n    return a + f * (b - a);\n}\n\nvec4 anisotropicTexture(sampler2D textureSampler, vec2 texCoords) {\n    vec2 texSize = vec2(textureSize(textureSampler, 0));\n\n    // Calculate the mip level weights\n    vec2 f = fract(texCoords * texSize);\n\n    // Calculate derivatives to estimate the mip level\n    vec2 dx = dFdx(texCoords) * texSize;\n    vec2 dy = dFdy(texCoords) * texSize;\n    float lod = max(max(abs(dx.x), abs(dy.x)), max(abs(dx.y), abs(dy.y)));\n\n    // Enable anisotropic filtering\n    float maxAnisotropy = 1.0; // Adjust as needed\n    vec4 texel = texture(textureSampler, texCoords, maxAnisotropy);\n\n    return texel;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy; // normalize XY \n    float y = max(abs(uv.y - 0.5) * 2.0 - 0.6, 0.00);\n    \n    vec3 viewDir = vec3(uv.x - 0.5, y, 0.5); // move X and Y to center and add fake Z\n    vec2 fogUV = viewDir.xz / abs(viewDir.y); // drop XZ into Y: XYZ -> XY  \n    \n    //if(abs(viewDir.y) > 0.0){\n        vec2 planarUV = viewDir.xz / abs(viewDir.y); // drop XZ into Y: XYZ -> XY\n        planarUV.x *= 0.1;\n        planarUV.y *= 0.1;\n        vec2 textureUV = vec2(planarUV);\n\n        textureUV += vec2(0.0, iTime * 0.02); // changes Y depending on time, so it moves in constantly   \n\n        vec4 txtre = anisotropicTexture(iChannel0, textureUV.xy); // puts texture into dropped XY      \n        //vec4 txtre = texture(iChannel0, textureUV.xy); // puts texture into dropped XY  \n        \n\n        float fog = min(max(abs(uv.y - 0.5) * 15.0 - 6.0, 0.0), 1.0);\n        //txtre *= fog;\n\n        fragColor = txtre;\n        //fragColor = vec4(vec3(y), 1.0);\n    //}\n}","name":"Image","description":"","type":"image"}]}