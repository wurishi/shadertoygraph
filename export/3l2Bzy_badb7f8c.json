{"ver":"0.1","info":{"id":"3l2Bzy","date":"1599559693","viewed":128,"name":"Simple spring","username":"linlin64","description":"Use mousse click to move and release the ball\nPosition the ball on the spring and see the spring action ","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["ball","spring","euler","physic","grativy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float segmentDistance( vec2 p, vec2 a, vec2 b )\n{\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n\treturn length(pa - ba * h);\n}\n\nbool drawLine( vec2 coords, vec2 p0, vec2 p1, float thickness )\n{\n    float sD = segmentDistance(coords, p0, p1);\n\t\n    if (sD < 0.01) {\n        return true;\n    } else {\n    \treturn false;\n    }\n}\n\nbool drawSpring( vec2 coords, vec2 p0, vec2 p1, float thickness, int loops )\n{\n    vec2 d = p1 - p0;\n    if (length(d) < 0.001)\n        return false;\n    \n    vec2 dir = normalize(d);\n    vec2 per = vec2(dir.y, -dir.x);\n    \n    vec2 st = d / float(loops * 2);\n    vec2 last = p0 + per * thickness / 2.0 + st / 2.0;\n    vec2 sw = -thickness * per;\n    float th = 1.0;\n    \n    bool draw = drawLine(coords, p0, last, th);\n    \n    for (int i=0; i<loops*2-1; i++)\n    {\n        vec2 next = last + st + sw;\n        sw = -sw;\n        draw = draw || drawLine(coords, last, next, th);\n        last = next;\n    }\n    \n    draw = draw || drawLine(coords, last, p1, th);\n    return draw;\n}\n\nbool drawCircle(vec2 uv, vec2 pos) {\n    vec2 diff = uv - pos;\n    if (length(diff) < 0.2f) {\n    \treturn true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 anchor = texture (iChannel0, vec2(1, 1) / iResolution.xy).xy;\n    vec2 pos = texture (iChannel0, vec2(3, 1) / iResolution.xy).xy;\n\n    vec2 ballpos = texture (iChannel0, vec2(7, 1) / iResolution.xy).xy;\n\n    vec2 uv = fragCoord.xy * 7.0 /iResolution.x;\n    \n    if (drawLine(uv, vec2(0, 3.5), vec2(7, 3.5), 0.5)) {\n   \t\tfragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    \treturn;\n    }\n    \n    if (drawSpring(uv, anchor, pos, 0.5, 5)) {\n   \t\tfragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    if (drawCircle(uv, ballpos)) {\n   \t\tfragColor = vec4(0.0, 1.0, 0.0, 1.0);\n    \treturn;\n    }\n    \n\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// spring stiffness\nfloat k = 3.0;\n// mass supported by the spring\nfloat m = 0.3;\n// damping\nfloat b = 0.1;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // spring\n    vec2 anchor = texture (iChannel0, vec2(1, 1) / iResolution.xy).xy;\n    vec2 pos = texture (iChannel0, vec2(3, 1) / iResolution.xy).xy;\n    vec2 v = texture (iChannel0, vec2(5, 1) / iResolution.xy).xy;\n    \n    // ball\n    vec2 ballpos = texture (iChannel0, vec2(7, 1) / iResolution.xy).xy;\n    vec2 ballv = texture (iChannel0, vec2(9, 1) / iResolution.xy).xy;\n    \n    int init = int(texture (iChannel0, vec2(11, 1) / iResolution.xy).x);\n\n    int state = int(texture (iChannel0, vec2(13, 1) / iResolution.xy).x);\n\n    float mass = texture (iChannel0, vec2(15, 1) / iResolution.xy).x;\n\n    vec2 mouse = texture (iChannel0, vec2(17, 1) / iResolution.xy).xy;\n\n    vec2 prevmouse = texture (iChannel0, vec2(19, 1) / iResolution.xy).xy;\n    \n    if (init == 0) {\n        anchor = vec2(3.5,3.5);\n        pos = vec2(3.5,2.5);\n        v = vec2(0.0, 0.0);\n        \n        ballpos = vec2(3.5, 1.0);\n        ballv = vec2(0.0, 0.0);\n        \n        mass = m;\n        \n        state = 0;\n    }\n\n    // Spring\n    vec2 x = pos - anchor;\n    float deltaTime = 0.01;\n    vec2 g = vec2(0.0,-9.81);\n    vec2 a = g + (-k*x/mass - b*v/mass);\n    v += a * deltaTime;\n    pos += v * deltaTime;\n\n    if (state == 0) {\n        // Ball\n        ballv += g * deltaTime;\n        ballpos += ballv * deltaTime;\n\n        if(ballpos.y < 0.2) {\n            ballpos = vec2(ballpos.x, 0.2);\n            ballv = vec2(ballv.x, -ballv.y) * 0.60;\n        } else if(ballpos.y > 3.3) {\n            ballpos = vec2(ballpos.x, 3.3);\n            ballv = vec2(ballv.x, -ballv.y) * 0.60;\n        }\n        if(ballpos.x < 0.2) {\n            ballpos = vec2(0.2, ballpos.y);\n            ballv = vec2(-ballv.x, ballv.y) * 0.60;\n        } else if(ballpos.x > 6.8) {\n            ballpos = vec2(6.8, ballpos.y);\n            ballv = vec2(-ballv.x, ballv.y) * 0.60;\n        }\n        \n        vec2 diff = ballpos - pos;\n        if (length(diff) < 0.2) {\n            ballpos = pos;\n            v += ballv;\n            //ballv = vec2(0,0);\n            state = 2;\n        } else if (iMouse.z > 0.0) {\n            vec2 mouseclick = (iMouse.xy * 7.0 / iResolution.x);\n            vec2 diff = ballpos - mouseclick;\n            if (length(diff) < 0.2) {\n                state = 1;\n            }\n        }\n    } else if (state == 2) {\n    \tballpos = pos;\n        mass = m + 0.3;\n\n        \n        if (iMouse.z > 0.0) {\n            vec2 mouseclick = (iMouse.xy * 7.0 / iResolution.x);\n            vec2 diff = ballpos - mouseclick;\n            if (length(diff) < 0.2) {\n                mass = m;\n                state = 1;\n            }\n        }\n\n    } else {\n        if (iMouse.z > 0.0) {\n            prevmouse = mouse;\n            mouse = ballpos;\n\n            vec2 mouseclick = (iMouse.xy * 7.0 /iResolution.x);\n            ballpos = mouseclick;\n        } else {\n            vec2 mouseclick = (iMouse.xy * 7.0 /iResolution.x);\n            vec2 diff = mouseclick - pos;\n            if (length(diff) < 0.2) {\n                ballpos = pos;\n                ballv = vec2(0,0);\n                state = 2;\n            } else {\n                ballv = (mouse - prevmouse)*60.0;\n                state = 0;\n            }\n        }\n    }\n    \n    // Spring anchor\n    if (fragCoord.x >= 0.0 && fragCoord.x < 2.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(anchor.x,anchor.y,0.0,0.0);\n\n    // Spring pos\n    } else if (fragCoord.x >= 2.0 && fragCoord.x < 4.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(pos.x,pos.y,0.0,0.0);\n    \n    // Spring velocity    \n    } else if (fragCoord.x >= 4.0 && fragCoord.x < 6.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(v.x,v.y,0.0,0.0);\n    \n    // Ball position\n    } else if (fragCoord.x >= 6.0 && fragCoord.x < 8.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(ballpos.x,ballpos.y,0.0,0.0);\n    \n    // Ball velocity\n    } else if (fragCoord.x >= 8.0 && fragCoord.x < 10.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(ballv.x,ballv.y,0.0,0.0);\n    \n    // Init\n    } else if (fragCoord.x >= 10.0 && fragCoord.x < 12.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(1.0,0.0,0.0,0.0);\n\n    // State\n    } else if (fragCoord.x >= 12.0 && fragCoord.x < 14.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(state,0.0,0.0,0.0);\n\n    // Mass\n    } else if (fragCoord.x >= 14.0 && fragCoord.x < 16.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(mass,0.0,0.0,0.0);\n\n    // Mouse\n    } else if (fragCoord.x >= 16.0 && fragCoord.x < 18.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(mouse.x,mouse.y,0.0,0.0);\n\n    // PrevMouse\n    } else if (fragCoord.x >= 18.0 && fragCoord.x < 20.0\n    \t&& fragCoord.y >= 0.0 && fragCoord.y < 2.0) {\n\t    fragColor = vec4(prevmouse.x,prevmouse.y,0.0,0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}