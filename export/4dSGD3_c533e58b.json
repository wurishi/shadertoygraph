{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Based on Clouds by inigo quilez : https://www.shadertoy.com/view/XslGRr\n\nvec3 c =  vec3(1.05);//vec3(.7,.9,1.41);\nconst int MaxIter = 12;\nvec3 sundir = vec3(-1.0,0.0,0.0);\n\n\nvec4 map( vec3 p)\n{\n\tfloat dr = 1.0;\n\tfloat g=1.0;\n\tvec3 ot = vec3(1000.0); \n\tfloat r2;\n  \n\tfor( int i=0; i<MaxIter;i++ )\n\t{          \n        r2 = dot(p,p);\n        if(r2>100.)continue;\n\t\t\n        ot = min( ot, abs(p) );\n\n\t\t//Kali formula \n        p=abs(p)/r2*g-c;         \n\t\tdr= dr/r2*g;  \t\t\n\t}\n\t\n\tfloat d;\n\td = (abs(p.x)+abs(p.y))*length(p)/dr;\t\n\t//d = (length(p.xz)*abs(p.y)+length(p.xy)*abs(p.z)+length(p.yz)*abs(p.x))/dr;\n\t//d = 1.5*(length(p.xz))*length(p.xy)/dr;\n\t//r2 = dot(p,p);d = .5*sqrt(r2)*log(r2)/dr;\n\t//d = 1.*length(p)/dr;\n\treturn vec4(ot,d);\n\t\n}\n\n\n\nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n\tvec4 sum = vec4(0, 0, 0, 0);\n\n    float fog = .65+.6*cos(.3*iTime);\n\n    \n\tfloat t = 0.0;\n\tfor(int i=0; i<64; i++)\n\t{\n\t\tif( sum.a > 0.99 ) continue;\n\n\t\tvec3 pos = ro + t*rd;\t\t\n\t\tvec4 col = map( pos );\n\t\tfloat d = col.a;\n\t\tcol.a = 0.035*fog/d;\n\t\tcol.rgb *= col.a;\n\n\t\tif(dot(pos,pos)<11.)sum = sum + col*(1.0 - sum.a);\t\n     \n\t\t//t += 0.1;\n\t\tt += min(0.1,d*.25);\n\t\t\n\t}\n\n\tsum.xyz /= (0.001+sum.w);\n\n\treturn clamp( sum, 0.0, 1.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    vec2 mo = -1.0 + 2.0*(iMouse.xy) / iResolution.xy+sin(.1*iTime);\n    \n    // camera\n    vec3 ro = 4.0*normalize(vec3(cos(2.75-3.0*mo.x), 0.7+(mo.y+1.0), sin(2.75-3.0*mo.x)));\n\tvec3 ta = vec3(0.0, 1.0, 0.0);\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\t\n    vec4 res = raymarch( ro, rd );\n\n\tfloat sun = clamp( dot(sundir,rd), 0.0, 1.0 );\n\tvec3 col = vec3(0.6,0.71,0.75) - rd.y*0.2*vec3(1.0,0.5,1.0) + 0.15*0.5;\n\tcol += 0.2*vec3(1.0,.6,0.1)*pow( sun, 8.0 );\n\tcol *= 0.95;\n\tcol = mix( col, res.xyz, res.w );\n\tcol += 0.1*vec3(1.0,0.4,0.2)*pow( sun, 3.0 );\n\t    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dSGD3","date":"1393960575","viewed":273,"name":"Foggy fractal","username":"guil","description":"I tried to render a fractal using the raymarching from Clouds by IQ (https://www.shadertoy.com/view/XslGRr) and I got this.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","kleinian"],"hasliked":0,"parentid":"","parentname":""}}