{"ver":"0.1","info":{"id":"WllcRM","date":"1591687190","viewed":301,"name":"OceanWaves - Dancing at night","username":"photonic","description":"Trying to achieve like a night scene in the ocean with the effect of the light refracting through the water. This is a WIP, I'm going to put some stars and some clouds at BG, and some fishes swimming :). Also I'm thinking to add more layers for the waves.","likes":16,"published":1,"flags":64,"usePreview":0,"tags":["subsurfacescattering","refraction","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4lBGRc","filepath":"https://soundcloud.com/troublesleepingmusicuniverse/calming-ocean-sound","previewfilepath":"https://soundcloud.com/troublesleepingmusicuniverse/calming-ocean-sound","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0);\n    uv.x *= 1.5;\n    \n    //Stars\n    vec2 uv2 = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float c = fract( sin(uv.x*102323.+uv.y*200.*(iTime * .00001)));\n    float xOff = uv2.y + 5.0;\n    uv2 += 2000.;\n    uv2.x += iTime / 500.0;\n    uv2.y += .5;\n    vec2 gv = fract(uv2 * 10. * c);\n    float d2 = length(gv - 0.5);\n    float m2 = (.04 + abs(sin(iTime * 3.) / 40.)) / d2 - xOff;\n    //vec2 gv = fract(uv2);\n\tvec3 stars = vec3(1);\n    stars /= m2 * m2;\n    stars *= vec3(.1,.5,.5);\n\n    //stars *= vec3(.0, 0.0, .0);\n    \n    vec2 lightPos = fragCoord/iResolution.xy;\n    float w = tan(iTime * 0.4);\n    lightPos.xy = (uv.xy + iResolution.xy) / iResolution.xy;\n    lightPos.y += -.4 + sin(iTime * 2.0) / 5.;\n    lightPos.x += -.4 + w / 10.;\n\n    float d = length(uv - lightPos);\n    float m = 0.01/d;\n    uv.x *= cos(iTime) * 1.;\n    uv.x += iTime / 1.3;\n    uv.y += 0.15;\n\tfloat rect = smoothstep(0. , 0.05 + abs(sin(iTime * 0.2) * 0.1), -(uv.y + sin(iTime * 1.2) * 0.1) + (12.0 + sin(uv.x * 4.0)) * 0.04);\n    stars *= 1.0 - rect;\n    //float rect = (1.0 - step(0.5, abs(uv.x))) * (1.0 - step(0.01, abs(uv.y)));\n    \n\n    \n    col += vec3(rect + (m * d + abs(sin(iTime - w) * .2) ));\n  \t\n    col *= vec3(.3, .74, 1.0)  / (d * 0.4) * .1;\n    \n    fragColor = vec4(col + stars,1.0);\n}","name":"Image","description":"","type":"image"}]}