{"ver":"0.1","info":{"id":"tlcSDS","date":"1581594723","viewed":144,"name":"Ball lightning","username":"krotos139","description":"Ball lightning ver 0.1\n\nI used hash function from https://www.shadertoy.com/view/4djSRW\nAnd I used 2D distance functions from https://iquilezles.org/articles/distfunctions2d/distfunctions2d.htm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","lightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License...\n/* Copyright (c)2020 Yuri Yakovlev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat figure(vec2 p) {\n    float c = 1.0;\n    vec2 from = vec2(0.5, 0.5);\n    vec2 to;\n    for (float i=0.0 ; i<16.0 ; i+=1.0) {\n        to = from + (hash21(i+iTime)-vec2(0.5,0.5))*0.1;\n        c = min(c,sdLine(p, from, to));\n        from = to;\n    }\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float c = figure(uv);\n    float a =  1.0-c*10.0;\n    \n\tvec3 col = mix(vec3(0.0),vec3(0.3, 0.2, 0.7), smoothstep(0.0, 0.5, a));\n    col = mix(col,vec3(1.0), smoothstep(0.5, 1.0, a));\n    \n    fragColor = vec4(col,a);\n}","name":"Image","description":"","type":"image"}]}