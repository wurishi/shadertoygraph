{"ver":"0.1","info":{"id":"DdGfDy","date":"1698738976","viewed":63,"name":"stard","username":"STaghavi","description":"star","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float easeOutElastic(float x) {\nfloat c4 = (2.0 * 3.1415) / 3.;\n\nif (x == 0.)\n  return 0.0;\nif (x == 1.0)\n  return 1.0;\nreturn pow(2., -10. * x) * sin((x * 10. - 0.75) * c4) + 1.;\n}\n\nfloat easeInOutElastic(float x) {\nfloat c5 = (2.0 * 3.1415) / 4.5;\n\nif (x == 0.0)\n  return 0.0;\nif (x == 1.0)\n  return 1.0;\nif( x < 0.5 )\n  return -(pow(2.0, 20.0 * x - 10.0) * sin((20.0 * x - 11.125) * c5)) / 2.0;\nreturn (pow(2.0, -20.0 * x + 10.0) * sin((20.0 * x - 11.125) * c5)) / 2.0 + 1.0;\n}\n\nfloat easeInBack(float x) {\n    float c1 = 1.70158;\n    float c3 = c1 + 1.0;\n\n    return c3 * x * x * x - c1 * x * x;\n}\n\nfloat easeOutBack(float x) {\n    float c1 = 1.70158;\n    float c3 = c1 + 1.0;\n\n    return 1.0 + c3 * pow(x - 1.0, 3.0) + c1 * pow(x - 1.0, 2.0);\n}\n\nfloat easeInOutBack(float x) {\nfloat c1 = 1.70158;\nfloat c2 = c1 * 1.525;\n\nif (x < 0.5)\n  return (pow(2.0 * x, 2.0) * ((c2 + 1.0) * 2.0 * x - c2)) / 2.0;\n  \nreturn (pow(2.0 * x - 2.0, 2.0) * ((c2 + 1.0) * (x * 2.0 - 2.0) + c2) + 2.0) / 2.0;\n}\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nvec3 genShape( vec2 uv, vec3 color )\n{\n     float sdf = sdHexagon(uv, 0.005);\n    float shape = smoothstep( 0.005, 0.0, sdf);\n    \n    float glow = exp( -sdf * 50.0 ) * 1.0 * (1.0 - shape);\n    \n    return vec3( shape + glow * color );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float aspect = iResolution.x / iResolution.y;\n    //vec2 m = -vec2(1.0) * iMouse.xy / iResolution.xy + vec2(0.5, 0.5);\n    //m.y /= aspect;\n    uv.y /= aspect;\n    vec2 uv1 = uv - vec2(0.5, 0.5 / aspect);\n    //uv1.x += m.x;// - (easeInOutBack((cos(iTime * 5.0) + 1.0) * 0.5) - 0.5) * 0.1;\n    //uv1.y += m.y;// - (easeInOutBack((sin(iTime * 5.0) + 1.0) * 0.5) - 0.5) * 0.1;\n    //uv1.y += cos(iTime) * 0.25;\n    \n    vec3 col ;//= 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float count = 15.0;\n    float invCount = 1.0 / count * (3.1415 * 2.);\n    for( float i = 0.0; i < count; ++i ){\n    \n       col += genShape(uv1 + vec2(\n       cos(i * invCount + iTime * 0.2 + iTime * i ),\n       sin(i * invCount + iTime * 0.2 + iTime * i  )\n       ) * .1,  vec3(0.8, 0.8, 1.0));\n    }\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}