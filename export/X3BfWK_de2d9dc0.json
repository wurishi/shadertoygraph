{"ver":"0.1","info":{"id":"X3BfWK","date":"1729930376","viewed":37,"name":"Example: SDF Translation ","username":"ElliotPadfield","description":"This shader renders a 2D circle using Signed Distance Functions (SDFs), with translation and aspect ratio correction for consistent scaling.\nUV Normalization: Adjusts UVs for aspect ratio to avoid stretching. Translation: Moves UVs to position the circle","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["example"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Reference: https://iquilezles.org/articles/distfunctions/\n\n// Translation function for SDF\nvec2 translate(vec2 p, vec2 offset) {\n    return p - offset; // Moves `p` by `offset`\n}\n\n// SDF for a circle\nfloat sdfCircle(vec2 p, float radius) {\n    return length(p) - radius; // Distance from `p` to circle edge\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Step 1: Normalize UV coordinates with aspect ratio correction\n    // https://www.shadertoy.com/view/lf2fWw\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - R) / min(R.x, R.y); // Normalize to [-1, 1] along the shortest side\n\n    // Step 2: Define circle parameters\n    float radius = 0.3;\n\n    // Step 3: Define animated translation (centered around the middle of the screen)\n    vec2 translation = vec2(0.3 * cos(iTime), 0.3 * sin(iTime)); // Move in a circular path\n\n    // Step 4: Apply translation to normUV, offsetting the circle's center\n    vec2 transformedUV = translate(uv, translation);\n\n    // Step 5: Compute SDF for the circle using normUV (now replaced)\n    float dist = sdfCircle(transformedUV, radius);\n\n    // Step 6: Anti-aliasing for smooth edges\n    // https://www.shadertoy.com/view/MfjBDw\n    float pix = 1.5 / min(R.x, R.y); // Pixel width (Adjusted to use min(R.x, R.y) for consistent pixel scaling)\n    float aa = smoothstep(-pix / 2., pix / 2., dist); // Adjusted smoothstep for smoother anti-aliasing transition\n    \n    // Step 7: Render the circle with color\n    vec3 circleColor = mix(vec3(1.0, 0.0, 0.0), vec3(0.0), aa); // Red circle\n    fragColor = vec4(circleColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}