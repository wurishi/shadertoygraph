{"ver":"0.1","info":{"id":"XtyyWG","date":"1537400049","viewed":93,"name":"Simple Smoothstep","username":"TinyTexel","description":"quadratic smoothstep","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Lincense: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n#define Frame float(iFrame)\n#define Time iTime\n#define PixelCount iResolution.xy\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define rsqrt inversesqrt\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\nconst float Pi2  = Pi * 2.0;\nconst float RcpPi= 1.0 / Pi;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\nfloat ddxyLen(float v) { return length(vec2(dFdx(v), dFdy(v))); }\nfloat ddxyRcpLen(float v) { return rsqrt( Pow2(dFdx(v)) + Pow2(dFdy(v)) ); }\n\n\nfloat rescale(float v) { return v * ddxyRcpLen(v); }\n\nfloat Graph(float f, float b)\n{\n    return clamp01(1.0 - (abs(rescale(f))-0.5-b)); \n}\n\n\nfloat Line(float u, float b) { return Graph(u, b); }\nfloat Lines(float u, float b) { return Graph(sin(u * Pi), b); }\n\nfloat Grid(vec2 uv, float b)\n{\n    float xl = Lines(uv.x, b);    \n    float yl = Lines(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Cross(vec2 uv, float b)\n{\n    float xl = Line(uv.x, b);    \n    float yl = Line(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Dot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    if(v > dr) return 0.0;\n    \n    v *= ddxyRcpLen(v);\n    v = 1.0 - clamp(v * 1.0, 0.0, 1.0);\n    \n    return v;\n}\n\nfloat Smoothstep(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    return x*x * (x * -2.0 + 3.0);\n}\n\nfloat Smootherstep(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    return x*x*x * (x * (x * 6.0 - 15.0) + 10.0);\n}\n\nfloat Smoothstep(float x, float p)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    float xp = x < 0.5 ? x * 2.0 : x * -2.0 + 2.0;\n    \n    float y = pow(xp, p);\n    \n    return x < 0.5 ? y * 0.5 : y * -0.5 + 1.0;\n}\n\nfloat SimpleStep(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    float xp = x < 0.5 ? x * 2.0 : x * -2.0 + 2.0;\n    \n    float y = xp*xp;\n    \n    return x < 0.5 ? y * 0.5 : y * -0.5 + 1.0;\n}\n\nfloat SmoothstepM(float x)\n{\n    return 0.5 + (x - 0.5) * sqrt(1.0+(4.0-4.0*x)*x);\n\n\t//return x * sqrt(2.0 - x*x);\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n\tvec2 uv = uv0 - 0.5;\n    uv0 += .0;\n    \n    vec2 tex = uv0;\n    tex -= iResolution.xy * 0.125;\n    tex /= iResolution.xx * 0.125;\n\n    tex *= 0.25+0.0375;\n    \n\n    vec3 col = vec3(0.0);\n    \n\tcol = mix(vec3(1.0), vec3(0.9), Grid(tex.xy * 4.0, 0.0));        \n\tcol = mix(col, vec3(0.5), Grid(tex.xy * 1.0, 0.0));        \n\tcol = mix(col, vec3(0.125), Cross(tex.xy * 1.0, 0.)); \t\n    \n    \n    col = mix(col, vec3(0.5), Graph(Smoothstep(tex.x) -tex.y, 0.0));  \n    col = mix(col, vec3(0.5), Graph(Smootherstep(tex.x) -tex.y, 0.0));       \n\n\n    //col = mix(col, vec3(1.0, 0.0, 0.0), Graph(SmoothstepM(tex.x) -tex.y, 0.5));    \n    col = mix(col, vec3(1.0, 0.0, 0.0), Graph(SimpleStep(tex.x) -tex.y, 0.5));       \n       \n    //col = mix(col, vec3(1.0, 0.0, 0.0), Graph(Smoothstep(tex.x, 2.0) -tex.y, 0.5));        \n\n    \n    #if 1\n    vec2 s = (uv0/iResolution.xy*2.0-1.0);\n    s.x = 1.0-Pow2(s.x);    s.y = 1.0-Pow2(s.y);\n    col *= mix(1.0, 0.4, Pow2(1.0-sqrt(s.x*s.y)));\n    #endif\n    \n    outCol = vec4(GammaEncode(clamp01(col)), 1.0);    \n\n}","name":"Image","description":"","type":"image"}]}