{"ver":"0.1","info":{"id":"mtKfWd","date":"1702668759","viewed":55,"name":"Mandeltex 2","username":"MV10","description":"Another fun mix from my audio-visualization program. See Mandeltex 1 for details, but this one is using [url=https://www.shadertoy.com/view/mlfBDX]Discoteq[/url] in Buffer A. Also very cool at 4K on a big screen (and this one can do hi-res in webGL).","likes":7,"published":1,"flags":96,"usePreview":0,"tags":["fractal","mandelbrot","blur","lines","audio","remix"],"hasliked":0,"parentid":"dtVfDt","parentname":"Mandeltex 1"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// The core functionality is Tessellated Mandelbrot, but I have added\n// desaturation for the small-scale copies, rotation, and the large-scale\n// copies in the fractal \"lakes\" are rendered unchanged. Like Mandeltex 1,\n// it's cooler when the effects can be randomized for each new run, but\n// that's not reasonably possible in Shadertoy-land.\n\n// http://stackoverflow.com/questions/9320953/what-algorithm-does-photoshop-use-to-desaturate-an-image\nvec4 desaturate(vec3 rgb, float factor)\n{\n\tvec3 lum = vec3(0.299, 0.587, 0.114);\n\tvec3 gray = vec3(dot(lum, rgb));\n\treturn vec4(mix(rgb, gray, factor), 1.0);\n}\n\nconst float pi_deg = 3.141592 / 180.0;\nmat2 rotationMatrix(float angle)\n{\n\tangle *= pi_deg;\n    float s=sin(angle), c=cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.y;\n\n    uv *= rotationMatrix(iTime * 4.0);\n\n    vec2 c = vec2(-0.74441,0.18631) + 3.0 * (uv - 0.5) * pow(0.01, 1.0 - cos(0.2 * iTime));\n    vec2 z = vec2(0.0);\n    for (int i = 0; i < 60; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if (dot(z,z) > 1e4)\n        {\n            float tu = mod(atan(z.y, z.x) / 6.283185 + iTime * 0.5, 1.0); \n            float tv = log2(log(dot(z, z)) / log(1e4)); \n\n            fragColor = desaturate(texture(iChannel0, vec2(tu, tv)).rgb, 1.0);\n\n            return;\n        }\n    }\n\n    fragColor = texture(iChannel0, z + 0.5);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4stGzf","filepath":"https://soundcloud.com/ez-rollers/ez-rollers-the-lady-roller","previewfilepath":"https://soundcloud.com/ez-rollers/ez-rollers-the-lady-roller","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// Discoteq is unchanaged from the original.\n\n#define S smoothstep\nconst float NUM_LINES = 20.;\n\nvec4 Line(float vu0, float t, vec2 uv, float speed, float height, vec3 col) \n{\n    float ti = 1. - t;\n    float vu = ((texture( iChannel0, vec2(ti, .25)).x )) * ti;\n    \n    float b = S(1., 0., abs(uv.x)) * sin(iTime * speed + uv.x * height * t) * .2;\n    uv.y += b*2. * (vu0 *1. + 0.3);    \n\n    uv.x += vu * 12. - 2.;\n        \n    return vec4(S(.06 * S(.2, .9, abs(uv.x)), 0., abs(uv.y) - .004) * col, 1.0) * S(1., .3, abs(uv.x));\n}\n\nvoid mainImage(out vec4 O, in vec2 I) \n{\n    vec2 uv = (I - .5 * iResolution.xy) / iResolution.y;\n    O = vec4 (0.);\n\n    float vu0 = (texture( iChannel0, vec2(0.1,  0.25)).x  +\n                 texture( iChannel0, vec2(0.2, 0.25)).x +\n                 texture( iChannel0, vec2(0.4, 0.25)).x +\n                 texture( iChannel0, vec2(0.6, 0.25)).x +\n                 texture( iChannel0, vec2(0.7, 0.25)).x +\n                 texture( iChannel0, vec2(0.9, 0.25)).x ) / 6.;\n\n    for (float i = 0.; i <= NUM_LINES; i += 1.) {\n        float t = i / NUM_LINES;\n\n        float c = (vu0 - t) + .3;\n        \n        O += Line(vu0, t, uv, 1. + t, 4. + t, vec3(.2 + c * .7, .2 + c * .4, 0.3)) * 2.;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}