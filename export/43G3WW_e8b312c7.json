{"ver":"0.1","info":{"id":"43G3WW","date":"1717619520","viewed":36,"name":"Spirall","username":"Muhammad","description":"spiral using polar coordinates","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spiralpolarcooridnates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Get the resolution of the screen\n    vec2 resolution = iResolution.xy;\n    \n    // Normalize the coordinates to the range [-1, 1]\n    vec2 uv = fragCoord / resolution;\n    uv = uv * 2.0 - 1.0;\n    \n    // Adjust for aspect ratio\n    uv.x *= resolution.x / resolution.y;\n    \n    // Convert Cartesian coordinates to polar coordinates\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    \n \n     // Constants for the Archimedean spiral\n    float a = 0.5; // start radius\n    float b = 0.5; // spacing between turns\n        \n    // Create a visual effect based on the distance to the spiral\n    float spiralEffect = sin(10. * (r -theta) + iTime);\n    \n    // Map the effect to a color\n    vec3 color = vec3(spiralEffect) * vec3(0.6,0.8,1.);\n    \n    // Output the final color\n    fragColor = vec4( color, 1.0);\n}","name":"Image","description":"","type":"image"}]}