{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Gradient noise's normal mapping using analytic formula instead of numerical derivatives.\n// Based on iq's shader (Noise - gradient ...) : https://www.shadertoy.com/view/Xsl3Dl\n\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//#define USE_CUBIC_INERP\n//#define FBM\n#define GrNoise GrNoiseK // GrNoiseIq // GrNoiseNumDiff // \n#define Noise SNoise // SqrNoise // TurbulenceNoise // \n\nvec3 hash( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\tfloat a = iTime*6.;\n\tmat2  m = mat2(vec2(cos(a),-sin(a)), vec2(sin(a), cos(a)));//in general use 3d rotation\n\tp = -1.0 + 2.0*fract(sin(p)*43758.5453123);\n\tp.xy = m * p.xy;//rotate gradient vector\n\treturn p;\n}\n\nvec3 interp(vec3 f){\n#ifdef USE_CUBIC_INERP\n\treturn f*f*(3.0-2.0*f);\n#else\n\treturn ((6.*f-15.)*f+10.)*f*f*f;\n#endif\n}\n\nvec3 Dinterp(vec3 f){\n#ifdef USE_CUBIC_INERP\n\treturn f*(6.0-6.0*f);\n#else\n\treturn ((30.*f-60.)*f+30.)*f*f;\n#endif\n}\n\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = interp(f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nvec3 GrNoiseIq( in vec3 p )//Modification by iq\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n    vec3 u = interp(f);\n    vec3 du= Dinterp(f);\n\t\n    vec3 h000 = hash( i + vec3(0.0,0.0,0.0) );\n    vec3 h100 = hash( i + vec3(1.0,0.0,0.0) );\n    vec3 h010 = hash( i + vec3(0.0,1.0,0.0) );\n    vec3 h110 = hash( i + vec3(1.0,1.0,0.0) );\n    vec3 h001 = hash( i + vec3(0.0,0.0,1.0) );\n    vec3 h101 = hash( i + vec3(1.0,0.0,1.0) );\n    vec3 h011 = hash( i + vec3(0.0,1.0,1.0) );\n    vec3 h111 = hash( i + vec3(1.0,1.0,1.0) );\n\n    vec3 v=mix( mix( mix( h000, \n                          h100, u.x),\n                     mix( h010, \n                          h110, u.x), u.y),\n                mix( mix( h001, \n                          h101, u.x),\n                     mix( h011, \n                          h111, u.x), u.y), u.z );\n\t\n    float d000=dot(h000, f - vec3(0.0,0.0,0.0));//added those :o)\n\tfloat d100=dot(h100, f - vec3(1.0,0.0,0.0));\n\tfloat d010=dot(h010, f - vec3(0.0,1.0,0.0));\n\tfloat d110=dot(h110, f - vec3(1.0,1.0,0.0));\n\tfloat d001=dot(h001, f - vec3(0.0,0.0,1.0));\n\tfloat d101=dot(h101, f - vec3(1.0,0.0,1.0));\n\tfloat d011=dot(h011, f - vec3(0.0,1.0,1.0));\n\tfloat d111=dot(h111, f - vec3(1.0,1.0,1.0));\n\t\n\tv.x+=  mix( mix( mix( d000, d100, du.x),\n                     mix( d010, d110, du.x), u.y),\n                mix( mix( d001, d101, du.x),\n                     mix( d011, d111, du.x), u.y), u.z );\n    v.x-=  mix( mix( d000, d010, u.y),\n                mix( d001, d011, u.y), u.z);\n\n    v.y+=  mix( mix( mix( d000, d100, u.x),\n                     mix( d010, d110, u.x), du.y),\n                mix( mix( d001, d101, u.x),\n                     mix( d011, d111, u.x), du.y), u.z );\n    v.y-=  mix( mix( d000, d100, u.x),\n                mix( d001, d101, u.x), u.z);\n\t\n    v.z+=  mix( mix( mix( d000, d100, u.x),\n                     mix( d010, d110, u.x), u.y),\n                mix( mix( d001, d101, u.x),\n                     mix( d011, d111, u.x), u.y), du.z );\n    v.z-=  mix( mix( d000, d100, u.x),\n                mix( d010, d110, u.x), u.y);\n\n\n    return v;\n}\n\nvec3 GrNoiseNumDiff( in vec3 p )//using numerical differentiation\n{\n#define EPS 0.001\n\tconst vec2 e=vec2(EPS,0.);\n\tfloat v=noise(p);\n\t\n\treturn vec3(noise(p+e.xyy)-v, noise(p+e.yxy)-v, noise(p+e.yyx)-v)*1./EPS;\n}\n//Analytic formula of the gradient of the noise function... quite cumbersome :/\nvec3 GrNoiseK( in vec3 p ){\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = interp(f);\n\tvec3 du= Dinterp(f);\n\n    vec3 v=mix( mix( mix( hash( i + vec3(0.0,0.0,0.0) ), \n                          hash( i + vec3(1.0,0.0,0.0) ), u.x),\n                     mix( hash( i + vec3(0.0,1.0,0.0) ), \n                          hash( i + vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( hash( i + vec3(0.0,0.0,1.0) ), \n                          hash( i + vec3(1.0,0.0,1.0) ), u.x),\n                     mix( hash( i + vec3(0.0,1.0,1.0) ), \n                          hash( i + vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n\t\n\tv.x+=  mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), du.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), du.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), du.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), du.x), u.y), u.z );\n\tv.x-=  mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                     dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), u.y),\n                mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                     dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), u.y), u.z);\n\n\tv.y+=  mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), du.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), du.y), u.z );\n\tv.y-=  mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                     dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                     dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x), u.z);\n\t\n\tv.z+=  mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), du.z );\n\tv.z-=  mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                     dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                     dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y);\n\n\n\treturn v;\n}\n//===============================================================================================\nvec4 SNoise( in vec3 p )\n{\n\tfloat f=noise(p);\n\tvec3 n=GrNoise(p);\n\treturn vec4(n,f);\n}\n\nvec4 TurbulenceNoise( in vec3 p )\n{\n\tfloat f=noise(p);\n\tvec3 n=GrNoise(p);\n\treturn vec4(-sign(f)*n,-abs(f));\n}\n\nvec4 SqrNoise( in vec3 p )\n{\n\tfloat f=noise(p);\n\tvec3 n=GrNoise(p);\n\treturn vec4(2.*f*n,f*f);\n}\n//===============================================================================================\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\n     // camera movement\t\n\tfloat an = 0.05*iTime;\n\tvec3 ro = vec3( 2.5*cos(an), 1.0, 2.5*sin(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    // sphere center\t\n\tvec3 sc = vec3(0.0,1.0,0.0);\n\n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tfloat occ = 1.0;\n\tvec3  pos = vec3(0.0);\n\t\n\t// raytrace-plane\n\tfloat h = (0.0-ro.y)/rd.y;\n\tif( h>0.0 ) \n\t{ \n\t\ttmin = h; \n\t\tnor = vec3(0.0,1.0,0.0); \n\t\tpos = ro + h*rd;\n\t\tvec3 di = sc - pos;\n\t\tfloat l = length(di);\n\t\tocc = 0.5*(1.0 - 1.05*dot(nor,di/l)*1.0*1.0/(l*l)); \n\t}\n\n\t// raytrace-sphere\n\tvec3  ce = ro - sc;\n\tfloat b = dot( rd, ce );\n\tfloat c = dot( ce, ce ) - 1.0;\n\th = b*b - c;\n\tif( h>0.0 )\n\t{\n\t\th = -b - sqrt(h);\n\t\tif( h<tmin ) \n\t\t{ \n\t\t\ttmin=h; \n\t\t\tnor = normalize(ro+h*rd-sc); \n\t\t\tocc = 0.5 + 0.5*nor.y;\n\t\t}\n\t}\n\n    // shading/lighting\t\n\tvec3 col = vec3(0.);//*texture( iChannel1, rd ).xyz;\n\tif( tmin<100.0 )\n\t{\n\t    pos = ro + tmin*rd;\n\t\tvec4 nf = vec4(0.);\n\t\t\n#ifndef FBM\n\t\t{\n\t\t\tnf= Noise( 32.0*pos );\n\t\t}\n#else\n\t\t{\n            vec3 q = 8.0*pos;\n\t\t\tnf  = 1.000*Noise( q ); q = m*q*2.01;\n\t\t\tnf += 0.500*Noise( q ); q = m*q*2.02;\n\t\t\tnf += 0.250*Noise( q ); q = m*q*2.03;\n\t\t\tnf += 0.125*Noise( q ); q = m*q*2.01;\n\t\t}\n#endif\n\t\t\n\t\tnor=normalize(nor - 0.1 * nf.xyz);\n\t\tfloat f = smoothstep( -2.5, 1., nf.w );\n\t\tf *= (occ)*2.;\n\t\tvec3 rdr=reflect(rd,nor);\n\t\tcol=f*(vec3(0.95,1.,0.4)*texture( iChannel0, rdr ).xyz);\n\t\tcol = mix( col, vec3(0.0), 1.0-exp( -0.1*tmin*tmin ) );\n\t}\n\t\n\tcol = sqrt( 2.*col );\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldB3RR","date":"1382470262","viewed":1409,"name":"Do not enter ...","username":"knighty","description":"... The SPHERE !\n\nOk! Ok! Could have been better with darker mood and non reflective ground. It's just meant for illustrating analytic gradien of gradient noise.\nBased on iq's shader: https://www.shadertoy.com/view/Xsl3Dl","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","gradient","normal","mapping","analytic"],"hasliked":0,"parentid":"","parentname":""}}