{"ver":"0.1","info":{"id":"3s2cD1","date":"1586564021","viewed":136,"name":"Kaleidoscopic accident","username":"Robinsong","description":"I broke a function but liked the results","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float r = .1*iTime;\n    uv.x = uv.x*cos(r) + uv.y*sin(r);\n    uv.y = uv.x*cos(r) + uv.y*sin(r);\n    \n   \tuv.x = mix(-1000.0, 1000.0, uv.x);\n\tuv.y = mix(-1000.0, 1000.0, uv.y);\n\t    \n    float th = atan(uv.y, uv.x);\n\tfloat k = pow(length(uv), .9);\n\tfloat f = 3.14159 / 3.5;\n\n\tth = abs(mod(th + f/4.0, f) - f/2.0) / (1.0 + k);\n\tth = sin(th * 6.283 / f);\n    uv = vec2(cos(th), sin(th)) * k * .1;\n    \n    vec2 q = uv - vec2(sin(iTime*.1)*10.,cos(iTime*.1)*10.);\n\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*(q.xyx+vec3(0,2,4));\n\t \n    float n = sin(iTime*2.1)*.1+1.;\n    float m = sin(iTime*.8)*.1+1.;\n        \n    col.x = smoothstep(sin(col.x*100.)*1.1,(sin(iTime*1.)*1.1),n);\n    col.y = smoothstep(cos(col.y*100.)*1.2,(cos(iTime*1.)*1.),m);\n        \n    // Output to screen    \n\n\t\n\tfragColor = vec4(col,1.0);    \n\n        \n}","name":"Image","description":"","type":"image"}]}