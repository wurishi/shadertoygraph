{"ver":"0.1","info":{"id":"7ltyR4","date":"1659381801","viewed":118,"name":"Playing around with spirals","username":"mati_software","description":"Different spirals are mixed to generate a colorful glow. One value of the music is used to transform the animation a little bit.","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["spiral","musicvisualization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XlSXRm","filepath":"https://soundcloud.com/starforce/starforce-age-of-nano","previewfilepath":"https://soundcloud.com/starforce/starforce-age-of-nano","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 spiralCenter = iResolution.xy / 2.0;\n    float abstandSpiralCenter = distance(fragCoord, spiralCenter);\n    float abstandSpiralCenterNorm = abstandSpiralCenter / length(iResolution.xy / 2.0);\n    \n    float winkel = sqrt(abstandSpiralCenterNorm) * 10.0 * sin(iTime * .17)   + iTime * .61;\n    vec2 vergleichspunkt = spiralCenter + abstandSpiralCenter * vec2(sin(winkel), cos(winkel));\n    float abstandVergleichspunkt = distance(fragCoord, vergleichspunkt);\n    float abstandVergleichspunktNorm = abstandVergleichspunkt / length(iResolution.xy / 2.0);\n    float subtrahend = abstandVergleichspunktNorm / abstandSpiralCenterNorm;\n\n    float winkel2 = sqrt(abstandSpiralCenterNorm) * 10.0 * sin(iTime * .23 + .1)   + iTime * .31;\n    vec2 vergleichspunkt2 = spiralCenter + abstandSpiralCenter * vec2(sin(winkel2), cos(winkel2));\n    float abstandVergleichspunkt2 = distance(fragCoord, vergleichspunkt2);\n    float abstandVergleichspunktNorm2 = abstandVergleichspunkt2 / length(iResolution.xy / 2.0);\n    float subtrahend2 = abstandVergleichspunktNorm2 / abstandSpiralCenterNorm;\n\n    float winkel3 = sqrt(abstandSpiralCenterNorm) * 10.0 * sin(iTime * .41 + .62)   + iTime * .47;\n    vec2 vergleichspunkt3 = spiralCenter + abstandSpiralCenter * vec2(sin(winkel3), cos(winkel3));\n    float abstandVergleichspunkt3 = distance(fragCoord, vergleichspunkt3);\n    float abstandVergleichspunktNorm3 = abstandVergleichspunkt3 / length(iResolution.xy / 2.0);\n    float subtrahend3 = abstandVergleichspunktNorm3 / abstandSpiralCenterNorm;\n\n    float winkel4 = sqrt(abstandSpiralCenterNorm) * 10.0 * sin(iTime * .38 + .17)   + iTime * .85;\n    vec2 vergleichspunkt4 = spiralCenter + abstandSpiralCenter * vec2(sin(winkel4), cos(winkel4));\n    float abstandVergleichspunkt4 = distance(fragCoord, vergleichspunkt4);\n    float abstandVergleichspunktNorm4 = abstandVergleichspunkt4 / length(iResolution.xy / 2.0);\n    float subtrahend4 = abstandVergleichspunktNorm4 / abstandSpiralCenterNorm;\n\n    float winkel5 = sqrt(abstandSpiralCenterNorm) * 10.0 * sin(iTime * .48 + .95)   + iTime * .57;\n    vec2 vergleichspunkt5 = spiralCenter + abstandSpiralCenter * vec2(sin(winkel5), cos(winkel5));\n    float abstandVergleichspunkt5 = distance(fragCoord, vergleichspunkt5);\n    float abstandVergleichspunktNorm5 = abstandVergleichspunkt5 / length(iResolution.xy / 2.0);\n    float subtrahend5 = abstandVergleichspunktNorm5 / abstandSpiralCenterNorm;\n\n    float winkel6 = sqrt(abstandSpiralCenterNorm) * 10.0 * sin(iTime * .29 + .27)   + iTime * .54;\n    vec2 vergleichspunkt6 = spiralCenter + abstandSpiralCenter * vec2(sin(winkel6), cos(winkel6));\n    float abstandVergleichspunkt6 = distance(fragCoord, vergleichspunkt6);\n    float abstandVergleichspunktNorm6 = abstandVergleichspunkt6 / length(iResolution.xy / 2.0);\n    float subtrahend6 = abstandVergleichspunktNorm6 / abstandSpiralCenterNorm;\n\n    vec3 fragColor1 = vec3(2.0 - abstandVergleichspunktNorm - abstandVergleichspunktNorm4 - abstandVergleichspunktNorm6, 2.0 - abstandVergleichspunktNorm2 - abstandVergleichspunktNorm5 - abstandVergleichspunktNorm4, 2.0 - abstandVergleichspunktNorm3 - abstandVergleichspunktNorm6 - abstandVergleichspunktNorm5);\n    vec3 fragColor2 = vec3(4.0 - subtrahend - subtrahend4 - subtrahend6, 4.0 - subtrahend2 - subtrahend5 - subtrahend4, 4.0 - subtrahend3 - subtrahend6 - subtrahend5);\n    float faktor = texture(iChannel0,vec2(0,0)).x;\n    faktor = pow(faktor, 5.0);\n    \n    // Output to screen\n    fragColor = vec4(mix(fragColor1, fragColor2, faktor), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}