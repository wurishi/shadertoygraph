{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Configurable parameters\n#define FOIL vec2(0.5, 0.5)  // foil effect parameters\n#define TEXTURE_DETAILS vec4(0.0, 0.0, 1.0, 1.0)  // xy: offset, zw: scale\n#define IMAGE_DETAILS vec2(1.0, 1.0)\n#define HOVER_STRENGTH .1;\n\nfloat hue(float s, float t, float h) {\n    float hs = mod(h, 1.0) * 6.0;\n    if (hs < 1.0) return (t-s) * hs + s;\n    if (hs < 3.0) return t;\n    if (hs < 4.0) return (t-s) * (4.0-hs) + s;\n    return s;\n}\n\nvec4 RGB(vec4 c) {\n    if (c.y < 0.0001)\n        return vec4(vec3(c.z), c.a);\n\n    float t = (c.z < 0.5) ? c.y*c.z + c.z : -c.y*c.z + (c.y+c.z);\n    float s = 2.0 * c.z - t;\n    return vec4(hue(s,t,c.x + 1.0/3.0), hue(s,t,c.x), hue(s,t,c.x - 1.0/3.0), c.w);\n}\n\nvec4 HSL(vec4 c) {\n    float low = min(c.r, min(c.g, c.b));\n    float high = max(c.r, max(c.g, c.b));\n    float delta = high - low;\n    float sum = high + low;\n\n    vec4 hsl = vec4(0.0, 0.0, 0.5 * sum, c.a);\n    if (delta == 0.0)\n        return hsl;\n\n    hsl.y = (hsl.z < 0.5) ? delta / sum : delta / (2.0 - sum);\n\n    if (high == c.r)\n        hsl.x = (c.g - c.b) / delta;\n    else if (high == c.g)\n        hsl.x = (c.b - c.r) / delta + 2.0;\n    else\n        hsl.x = (c.r - c.g) / delta + 4.0;\n\n    hsl.x = mod(hsl.x / 6.0, 1.0);\n    return hsl;\n}\n\n// Mouse hover effect calculation\nvec2 calculateHoverEffect(vec2 position, vec2 mousePos) {\n    if (iMouse.z < 0.0) { // If mouse is not clicked/hovering\n        return position;\n    }\n    \n    vec2 screenCenter = iResolution.xy * 0.5;\n    float midDist = length(position - screenCenter) / length(iResolution.xy);\n    vec2 mouseOffset = (position - mousePos);\n    float hoverStrength = HOVER_STRENGTH;\n    \n    float scale = 0.2 * (-0.03 - 0.3 * max(0.0, 0.3 - midDist))\n                 * hoverStrength * (length(mouseOffset) * length(mouseOffset))\n                 / (2.0 - midDist);\n                 \n    return position + vec2(0.0, scale);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Apply hover effect to fragment coordinate\n    vec2 adjustedCoord = calculateHoverEffect(fragCoord, iMouse.xy);\n    \n    // Convert to UV coordinates\n    vec2 uv = adjustedCoord/iResolution.xy;\n    \n    // Sample the texture\n    vec4 tex = texture(iChannel0, uv);\n    vec2 texture_coords = uv;\n    \n    // Calculate effect UVs\n    vec2 effect_uv = (((texture_coords)*(IMAGE_DETAILS)) - TEXTURE_DETAILS.xy*TEXTURE_DETAILS.ba)/TEXTURE_DETAILS.ba;\n    vec2 adjusted_uv = effect_uv - vec2(0.5, 0.5);\n    adjusted_uv.x = adjusted_uv.x*TEXTURE_DETAILS.b/TEXTURE_DETAILS.a;\n\n    // Color range calculations\n    float low = min(tex.r, min(tex.g, tex.b));\n    float high = max(tex.r, max(tex.g, tex.b));\n    float delta = min(high, max(0.5, 1.0 - low));\n\n    // Foil effect calculations\n    float foil_time = iTime * 0.5; // Animate the foil effect\n    float fac = max(min(2.0*sin((length(90.0*adjusted_uv) + FOIL.x*2.0 + foil_time) + \n                   3.0*(1.0+0.8*cos(length(113.1121*adjusted_uv) - FOIL.x*3.121))) - \n                   1.0 - max(5.0-length(90.0*adjusted_uv), 0.0), 1.0), 0.0);\n                   \n    vec2 rotater = vec2(cos(FOIL.x*0.1221 + foil_time), sin(FOIL.x*0.3512 + foil_time));\n    float angle = dot(rotater, adjusted_uv)/(length(rotater)*length(adjusted_uv));\n    \n    float fac2 = max(min(5.0*cos(FOIL.y*0.3 + angle*3.14*(2.2+0.9*sin(FOIL.x*1.65 + 0.2*FOIL.y))) - \n                    4.0 - max(2.0-length(20.0*adjusted_uv), 0.0), 1.0), 0.0);\n                    \n    float fac3 = 0.3*max(min(2.0*sin(FOIL.x*5.0 + uv.x*3.0 + foil_time + \n                    3.0*(1.0+0.5*cos(FOIL.x*7.0))) - 1.0, 1.0), -1.0);\n                    \n    float fac4 = 0.3*max(min(2.0*sin(FOIL.x*6.66 + uv.y*3.8 + foil_time + \n                    3.0*(1.0+0.5*cos(FOIL.x*3.414))) - 1.0, 1.0), -1.0);\n\n    float maxfac = max(max(fac, max(fac2, max(fac3, max(fac4, 0.0)))) + \n                  2.2*(fac+fac2+fac3+fac4), 0.0);\n\n    // Apply foil effect to colors\n    tex.r = tex.r-delta + delta*maxfac*0.3;\n    tex.g = tex.g-delta + delta*maxfac*0.3;\n    tex.b = tex.b + delta*maxfac*1.9;\n    tex.a = min(tex.a, 0.3*tex.a + 0.9*min(0.5, maxfac*0.1));\n    \n    fragColor = tex;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcVfDc","date":"1734535013","viewed":327,"name":"Foil Balatro","username":"Cheesy_Brik","description":"Foil card shader from balatro","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["balatro"],"hasliked":0,"parentid":"","parentname":""}}