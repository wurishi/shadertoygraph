{"ver":"0.1","info":{"id":"fsSGWG","date":"1617846219","viewed":89,"name":"Distance to feature points II","username":"tomoe","description":"Computing method of getting the first distance is improved from the na√Øve one (improved from [url=https://www.shadertoy.com/view/sdj3zd]Distance to feature points I[/url])","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bd202104"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nconst uint max32 = 0xffffffffu;\nconst float PI = 3.14159265359;\nuvec2 hash22u(uvec2 n) {  \n    n ^= (n.yx << 24);\n    n ^= (n.yx >> 1);\n    n *= k.xy;\n    n ^= (n.yx << 1);\n    return n * k.xy;\n}\nvec2 hash22(vec2 p) {\n    uvec2 n = uvec2(p);\n    return vec2(hash22u(n)) / vec2(max32) - 0.5;\n}\nfloat length2(vec2 v){\n    return dot(v, v);\n}\nfloat F1_(vec2 p){   \n    vec2 n = round(p);\n    vec2 f = p - round(p);\n    float dist = sqrt(2.0);\n    for(float j = - 2.0; j <= 2.0; j ++ ) {\n        for(float i = - 2.0; i <= 2.0; i ++ ){\n            vec2 nbd = vec2(i, j);\n            nbd += hash22(n + nbd);\n            dist = min(dist, length(nbd - f));\n        }\n    }\n    return dist;\n}\nfloat F1(vec2 p){   \n    vec2 n = round(p);\n    vec2 f = p - round(p);\n    float dist = length2(abs(f) + 0.5);\n    vec2 sgn = vec2(1.0);\n    vec2 glid = vec2(0.0);\n    for(float j = 0.0; j <= 2.0; j ++ ) {\n        glid.y += sgn.y * j;\n        sgn.y *= -1.0;\n        float rowDist = max(abs(glid.y - f.y) - 0.5, 0.0);\n        if (rowDist > sqrt(dist)){\n            continue;\n        }\n        for(float i = 0.0; i <= 2.0; i ++ ){\n            glid.x += sgn.x * i;\n            sgn.x *= -1.0;\n            vec2 nbd = glid + hash22(n + glid);\n            dist = min(dist, length2(nbd - f));\n        }\n        glid.x = 0.0;\n    }\n    return sqrt(dist);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 pos = fragCoord.xy/ iResolution.xx;\n    pos *= 20.0;\n    pos += iTime;\n    if (fragCoord.x < 0.5 * iResolution.x){\n        fragColor = vec4(vec3(F1(pos)), 1.0);  //improved\n    } else {\n        fragColor = vec4(vec3(F1_(pos)), 1.0);  //naive\n    }\n    \n}\n","name":"Image","description":"","type":"image"}]}