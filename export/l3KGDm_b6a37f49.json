{"ver":"0.1","info":{"id":"l3KGDm","date":"1718201617","viewed":45,"name":"Reflections conquered","username":"MonadoMaster0","description":"I finally figured out hot to make reflections. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","fbm","reflections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RO vec3(0,1,-4)\n#define fog_d 20.0\n#define MAT_GR 0\n#define MAT_BALL 1\n#define MAT_BOX 2\n\n#define REFLECTIVITY 1.2\n#define FOG_LEVEL 1.0\n\nvec2 map(vec3 p) {\n    int id;\n    float val = 0.0;\n    \n    float h = 0.0;\n    float f = 1.0;    \n    \n    float pl = sdPlane(p, h);\n    float sp1 = sdSphere(p-vec3(-1,0.5,0), 0.4);\n    \n    vec3 p2 = rotBy(p-vec3(1,0.5,0),1.0+iTime*0.5,1);\n    float sp2 = sdBox(p2, vec3(1.0,0.5,0.1));\n    \n    val = min(min(pl,sp1),sp2);\n    \n    if(val==pl) id=MAT_GR;\n    else if(val==sp1) id=MAT_BALL;\n    else if(val==sp2) id=MAT_BOX;\n    \n    return vec2(val,id);\n}\n\nvec3 getNorm(vec3 p) {\n    vec2 e = vec2(0.001,0);\n    \n    float x1=map(p+e.xyy).x,x2=map(p-e.xyy).x,\n          y1=map(p+e.yxy).x,y2=map(p-e.yxy).x,\n          z1=map(p+e.yyx).x,z2=map(p-e.yyx).x;\n    \n    return normalize(vec3(x1-x2,y1-y2,z1-z2));\n}\n\nvec2 march(vec3 ro, vec3 rd) {\n    \n    float t=0.0;\n    vec2 d;\n    for (int i=0;i<80;i++) {\n        \n        vec3 p = ro+rd*t;\n        d = map(p);\n        t+=d.x;\n        \n        if(d.x<0.001 || t>50.0) break;\n        }\n    return vec2(t,d.y);\n}\n\nvec3 render1(inout vec3 ro, inout vec3 rd) {\n    vec3 col = vec3(0);\n    vec2 ty = march(ro, rd);\n    float t = ty.x;\n    int mat = int(ty.y);\n    \n    vec3 p = ro+rd*t;\n    vec3 fog = clamp(dot(p,p)/(fog_d*fog_d)*vec3(0,0.5,1),0.0,FOG_LEVEL);\n    if(t<30.0) {\n        \n        vec3 n = getNorm(p);\n        \n        //phong\n        float dif = dot(-rd,n);\n        vec3 r = reflect(rd,n);\n        float ref = pow(max(0.0,dot(-rd,r)),32.0);\n        float ambient = 0.1;\n        col += dif + ambient + ref ;\n        \n        if(mat==MAT_GR) col*=getTexture(p*0.7,n,iChannel1).xyz;\n        else if(mat==MAT_BALL) col*=getTexture(p,abs(n),iChannel0).xyz;\n        else if(mat==MAT_BOX) col*=vec3(0,0,1);\n        ro = p+n*0.01;\n        rd = reflect(rd,n);;\n                \n    } else col = vec3(0.6,0.9,1)*0.8;\n    col+= fog;\n    \n    return col;\n}\n\nvec3 render2(inout vec3 ro, inout vec3 rd) {\n    vec3 col = vec3(0);\n    vec2 ty = march(ro, rd);\n    float t = ty.x;\n    int mat = int(ty.y);\n    \n    vec3 p = ro+rd*t;\n    if(t<30.0) {\n        \n        vec3 n = getNorm(p);\n        \n        col += dot(-rd,n);\n        \n        if(mat==MAT_GR) col*=getTexture(p*0.3,n,iChannel1).xyz;\n        else if(mat==MAT_BALL) col*=getTexture(p,abs(n),iChannel0).xyz;\n        else if(mat==MAT_BOX) col*=vec3(0,0,1);\n        ro = p;\n        rd = reflect(rd,n);\n        \n    } else col = vec3(0.6,0.9,1)*0.8;\n    \n    if(mat==MAT_GR) col*=0.01;\n    \n    return clamp(col,0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*RES)/RES.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    vec3 ro = RO;\n    vec3 la = vec3(0);\n    vec3 rd = getCam(uv, ro, la, 1.0);\n    \n    vec3 lo = vec3(0,0,1);\n    \n    col += render1(ro,rd);\n    col += render2(ro,rd)*REFLECTIVITY;\n    \n    col = pow(col,vec3(1.0/2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n#define RES iResolution.xy\n#define max_n int(80);\n#define min_d 0.001;\n#define max_d 50.;\n\nvec2 map(vec3 p);\n\nmat2 rot(float t) {\n    float c=cos(t),s=sin(t);\n    return mat2(c,-s,s,c);\n}\n\nvec3 rotBy(vec3 p, float angle, int axis) {\n    if(axis==0) {\n        p.yz *= rot(angle);}\n    if(axis==1) {\n        p.xz *= rot(angle);}\n    if(axis==2) {\n        p.xy *= rot(angle);}\n    \n    return p;\n}\n\nfloat _smin(float a,float b,float k) {\n    float d = a-b;\n    return a+b - sqrt(d*d+k*k);\n}\n\nfloat smin( float a, float b, float k )\n{\n    k *= 1.0;\n    float r = exp2(-a/k) + exp2(-b/k);\n    return -k*log2(r);\n}\n\nfloat _smax(float a,float b,float k) {\n    float d = a-b;\n    return a+b + sqrt(d*d+k*k);\n}\n\nfloat smax( float a, float b, float k )\n{\n    k *= -1.0;\n    float r = exp2(-a/k) + exp2(-b/k);\n    return -k*log2(r);\n}\n\nvec3 getCam(vec2 uv, vec3 ro, vec3 la, float z) {\n    vec3 f = normalize(la-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 u = cross(f,r);\n    \n    return normalize(r*uv.x + u*uv.y + f*z);\n}\n\nfloat sdPlane(vec3 p, float h) {\n    return dot(vec3(0,1,0),p) + h;\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec4 getTexture(vec3 p, vec3 n, sampler2D ch) {\n    return texture(ch, p.yz)*n.x+\n           texture(ch, p.xz)*n.y+\n           texture(ch, p.xy)*n.z;\n}\n","name":"Common","description":"","type":"common"}]}