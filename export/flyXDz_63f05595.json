{"ver":"0.1","info":{"id":"flyXDz","date":"1640453890","viewed":133,"name":"Relative cursor movement","username":"imagicien","description":"Persistent parameters that can be adjusted using mouse movement. Useful for panning.\n\nTwo variables need to persist between frames: the mouse position at the previous frame, and the data vector itself (e.g. the panning position). The buffer stores these.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["mouse","input"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////\n// Memory Management\n/////////////////////////////////\nvec4 load(in vec2 fragCoordRead)\n{\n    return texture(iChannel0, (0.5 + fragCoordRead) / iChannelResolution[0].xy, -100.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 storage_data = vec2(1., 0.);\n    vec2 persistentData = load(storage_data).xy;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= persistentData;\n    \n    uv = fract(uv * 4.);\n    float shade = float(bool(round(uv.x)) ^^ bool(round(uv.y)));\n\n    // Output to screen\n    fragColor = vec4(vec3(shade), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/////////////////////////////////\n// Memory Management\n// from https://www.shadertoy.com/view/Xst3zX\n/////////////////////////////////\nvec4 load(in vec2 fragCoordRead)\n{\n    return texture(iChannel0, (0.5 + fragCoordRead) / iChannelResolution[0].xy, -100.0 );\n}\n\nfloat isInside( vec2 p, vec2 c ) \n{ \n    vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); \n}\n\nvoid store( in vec2 fragCoordWrite, in vec4 value, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = (isInside(fragCoord, fragCoordWrite) > 0.0) ? value : fragColor;\n}\n/////////////////////////////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 storage_mouse = vec2(0., 0.);\n    const vec2 storage_data = vec2(1., 0.);\n\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    vec2 oldMouse = load(storage_mouse).xy;\n    \n    // Store mouse pos\n    vec4 newMouse = vec4(mouse.x, mouse.y, 0., 0.);\n    store(storage_mouse, newMouse, fragColor, fragCoord);\n    \n    // Persistent data\n    vec2 oldData = load(storage_data).rg;\n\n    vec2 deltaMouse = mouse - oldMouse;\n    bool isClickFrame = iMouse.w > 0.;\n    deltaMouse *= float(!isClickFrame);\n    \n    vec2 deltaData = deltaMouse;\n    vec2 newData = oldData + deltaData;\n    vec4 newData_ = vec4(newData.x, newData.y, 0., 0.);\n    store(storage_data, newData_, fragColor, fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"}]}