{"ver":"0.1","info":{"id":"wlGGRR","date":"1578113304","viewed":332,"name":"Wind Waker Water (Voronoi)","username":"onlinerocker","description":"Tried my best to emulate the water from Wind Waker using a Voronoi pattern...\nIt's not exactly the same, but I think I got pretty close.\n\nlet me know what you think!\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat random(float pos, float range, float start)\n{\n \treturn start + mod(sin(pos*3.43)*23432.4, range);   \n}\n\nvec2 random(vec2 pos, vec2 range, vec2 start)\n{\n    float newX = sin(dot(pos, vec2(32.1232, 7.324)))*23432.4;\n    float newY = cos(dot(pos, vec2(432.23, 21.4)))*32145.4;\n    \n    newX = start.x + mod(newX, range.x);\n    newY = start.y + mod(newY, range.y);\n    \n    return vec2(newX, newY);\n}\n\nfloat floatRandom(vec2 pos, float range, float start)\n{\n    float val = cos(dot(pos, vec2(54.54, 6.766)))*12344.4;\n\tval = start + mod(val, range);\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n    vec3 waterCol = vec3(0, 0.5, 1.0);\n    \n    float minDist = 100.0;\n    float minDist2 = 100.0;\n    float d;\n    float scale = 5.0;\n    \n    \n    vec2 newUv = scale*uv;\n    float z = 1.0+(0.5 + 0.5*sin(newUv.y/2.0 + 1.5*iTime)/5.0);\n    \n\tnewUv /= z;\n    \n    vec2 frac = mod(newUv+vec2(0.5, 0.5), 1.0);\n   \tvec2 id = floor(newUv);\n    \n    vec2 newId, newId2;\n    \n    for(float x=-1.0; x<=1.0; x++){\n        for(float y=-1.0; y<=1.0; y++){   \n     \t\tvec2 off = vec2(x,y);\n            vec2 offId = id+off;\n            vec2 posOff = offId;\n            \n            posOff += random(posOff, vec2(1.0), vec2(0.0));\n            posOff.y += 0.1*sin(frac.x * PI);\n            posOff.x += 0.1*sin(frac.y * PI);\n            \n\n            d = length(posOff - newUv);\n\n            \n            if(d < minDist)\n            {\n                minDist2 = minDist;\n                newId2 = newId;\n                \n                minDist = d;\n            \tnewId = offId;\n            }else if(d < minDist2)\n            {\n                minDist2 = d;\n                newId2 = offId;\n            }\n       \t}\n    }\n    \n    float val = smoothstep(0.05, 0.08, minDist2-minDist);\n    col = mix(waterCol/2.25, waterCol/2., val);\n    \n    minDist = 100.0;\n    minDist2 = 100.0;\n    //uv+=iTime*0.1;\n    newUv = scale*uv;\n    newUv += vec2(5.0, 0.0);\n\tnewUv /= z;\n    \n    frac = mod(newUv+vec2(0.5, 0.5), 1.0);\n   \tid = floor(newUv);\n    \n    newId, newId2;\n    \n    for(float x=-1.0; x<=1.0; x++){\n        for(float y=-1.0; y<=1.0; y++){   \n     \t\tvec2 off = vec2(x,y);\n            vec2 offId = id+off;\n            vec2 posOff = offId;\n            \n            posOff += random(posOff, vec2(1.0), vec2(0.0));\n            posOff.y += 0.1*sin(frac.x * PI);\n            posOff.x += 0.1*sin(frac.y * PI);\n            \n\n            d = length(posOff - newUv);\n\n            \n            if(d < minDist)\n            {\n                minDist2 = minDist;\n                newId2 = newId;\n                \n                minDist = d;\n            \tnewId = offId;\n            }else if(d < minDist2)\n            {\n                minDist2 = d;\n                newId2 = offId;\n            }\n       \t}\n    }\n    \n    val = smoothstep(0.05, 0.06, minDist2-minDist);\n    col += mix(vec3(1), waterCol/2., val);\n    \n\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}