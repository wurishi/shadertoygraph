{"ver":"0.1","info":{"id":"mtfyzs","date":"1691044161","viewed":194,"name":"Infinite Starfield","username":"LightningFlashAria","description":"A field of stars (my first shader)\n-Based on a tutorial by \"The Art of Code\" on Youtube.\n-You can \"look around with your mouse.\"\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_LAYERS 13.\nmat2 Rot(float a){\n float s=sin(a), c=cos(a);\n return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flare, float secFlare){\n    float d = length(uv);\n\tfloat m = .083/d; //star center\n\n    float rays = max(0.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n    m += rays*.5*flare; // horizontal + vertical rays\n    uv *= Rot(3.145/4.0);\n    rays = max(0.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n    m += rays * 0.3*flare; // 45 degree diagonal rays\n    \n    uv *= Rot(3.145/8.0);\n    rays = max(0.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n    m += rays * 0.17*secFlare; // 22.5 degree diagnoal rays\n    uv *= Rot(3.145/4.0);\n    rays = max(0.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n    m += rays * 0.17*secFlare; //67.5 degree diagonal rays\n   \n    m *= smoothstep(1.0, .2, d);\n    return m;\n}\n\n//random # generator\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n//creates a layer of stars\nvec3 StarLayer(vec2 uv) {\n    vec3 col = vec3(0);\n\t\n    vec2 gv = fract(uv)- .5;\n    vec2 id = floor(uv);\n    \n    \n    for(int y=-1;y<=1 ;y++) {\n        for(int x=-1;x<=1;x++){\n            vec2 offs = vec2(x, y);\n            \n            float n = Hash21(id + offs); // random between 0 and 1\n            float size = fract(n*345.32);\n            \n            float star = Star(gv-offs-vec2(n, fract(n*34.0))+ .5, smoothstep(.4, .7, size)*.4, smoothstep(.6, 1.0, size)*.4);\n            vec3 color = sin(vec3(.2,.3,.9)*fract(n*2367.4)*239.1)*.5+.5;   \n            color = color*vec3(1,.2,1.+size);\n            \n            star *= sin(iTime*3.+n*6.2831)*.5+1.;\n            col += star*size*color;\n       }\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    float t = iTime*.023;\n    uv += M*4.;\n    uv *= Rot(t);\n    vec3 col = vec3(0);\n    \n    for(float i = 0.0; i<1.0; i +=1./NUM_LAYERS){\n        float depth = fract(i+t);\n        \n        float scale = mix(20.,.5, depth);\n        float fade = depth*smoothstep(1.,.9, depth);\n        col += StarLayer(uv*scale+i*435.7)*fade;\n    }\n\t\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}