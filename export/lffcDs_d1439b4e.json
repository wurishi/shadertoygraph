{"ver":"0.1","info":{"id":"lffcDs","date":"1726160756","viewed":19,"name":"Glass Sim","username":"Saw8888","description":"IDK","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t ){\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float w = sqrt(r*r-h*h);\n    \n    return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                            abs(length(q)-r) ) - t;\n}\n\nfloat SDFshpere(vec3 p, vec3 pos, float d){\n    return distance(p,pos) - d;\n}\n\nfloat GetDist(vec3 p) {\n    p.xy = (mat2(3,4,-4,3)/5.0)*p.xy;\n    float r = 0.5;\n    float h = 1.;\n    float t = 0.01;\n    \n    return min(sdCutHollowSphere(p, r, h, t ), SDFshpere(p, vec3(0.,3.,2.),1.));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float side /*If raymarch is in or out of the shape*/) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p)*side;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = texture(iChannel0, rd).rgb; //Generates a Skybox\n    \n    float IOR = 1.51; //Refractive Index \n   \n    float d = RayMarch(ro, rd, 1.); // Outside of object\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d; // 3D Object Hit Position \n        vec3 n = GetNormal(p); // Orientation of the suface\n        vec3 r = reflect(rd, n);\n        vec3 rdIn = refract(rd, n, 1./IOR); // This function calculates the refracted ray direction going into the object, we invert the refractive index because we are moving into a denser medium\n        \n        vec3 pEnter = p - n*SURF_DIST*3.; // We move te point of refraction down in order to prevent breaking out of the loop because of how close the ray is to the shape\n        float dIn = RayMarch(pEnter, rdIn, -1.); // The raymarch within the object to calculate the angle of light when it leaves\n        \n        vec3 pExit = pEnter + rdIn * dIn; // Point of exit\n        vec3 nExit = -GetNormal(pExit); // Normal of the exit point, we invert it because we are inside the object still and need the normal outside \n        vec3 rdOut = refract(rdIn, nExit, IOR); // This function calculates the refracted ray direction coming out of the object\n        \n        if(length(rdOut) == 0.){ //Checks if redfraction is not ocurring which means Total Internal Reflection is ocurring, you can also do dot(rdOut, rdOut) instead of length(rdOut)\n            rdOut = reflect(rdIn, nExit);\n        }\n        \n        vec3 reflTex = texture(iChannel0, rdOut).rgb; // The result of reflection shown using the skybox\n        col = vec3(reflTex);\n    }\n    \n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}