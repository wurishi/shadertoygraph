{"ver":"0.1","info":{"id":"lfGcDh","date":"1731781506","viewed":78,"name":"Light monospheres","username":"I_m_not_here","description":"lower quality than the other version for speed","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["monoballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float iTime2 = iTime + 50.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 oldUV = uv;\n    uv = uv*2. - vec2(1.);\n    uv.x *= iResolution.x/iResolution.y;\n    oldUV.x *=  iResolution.x/iResolution.y;\n    \n    \n    Sphere[] spheres = Sphere[] (Sphere(vec3(sin(iTime2/2.),cos(iTime2/4.),2),0.3, vec4(0.2,0.5,0.8,1)),\n    Sphere(vec3(sin(iTime2/5.+1.)*0.3,sin(iTime2/4.+2.)*0.1,3),0.8, vec4(1,0.5,0.2,1)),\n    Sphere(vec3(sin(iTime2/3.+4.),sin(iTime2/2.+3.),sin(iTime2/5.)+3.),0.2, vec4(0.7,1.9,0.4,1)),\n    Sphere(vec3(cos(iTime2/7.+5.),sin(iTime2/3.+1.),cos(iTime2/2.+2.)+2.),0.4, vec4(0.7,0.4,1.9,1)),\n    Sphere(vec3(sin(iTime2/2.+2.),cos(iTime2/4.+6.),sin(iTime2+2.)*0.5+2.),0.4, vec4(1.9,0.1,0.3,1)));\n    \n    \n    float t = iTime2/10.;\n    float camDistance = 4.5;\n    if (iMouse[2] > 0.)\n    {\n        t-=iMouse[0]/iResolution.x * 6.283 + 3.1415;\n        camDistance *= iMouse[1]/iResolution.y * 3.;\n    }\n    \n    vec3 color = RunRay(uv, spheres, t, oldUV, iTime2, camDistance);\n    fragColor = vec4(color,1);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//#define DOSPACEDEFORMATION\n\nstruct Sphere {\n    vec3 pos;\n    float radius;\n    vec4 color;\n};\n\nfloat SDF(Sphere sphere, vec3 pos){\n    return length(pos-sphere.pos)-sphere.radius;\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nvec3 GetColor(Sphere[5] spheres, vec3 pos)\n{\n    vec4 color = vec4(1);\n    float weight = 0.000001;\n    for (int j = 0; j < 5; j++)\n    {\n        float current_weight = 1./(length(spheres[j].pos - pos)*500.+1.);\n        color = (color * weight + spheres[j].color * current_weight)/(weight + current_weight);\n        weight += current_weight;\n    }\n    return color.rgb;\n}\nvec3 GetRayPos(vec2 uv, float degree, vec3 focusPoint, float camDistance)\n{\n    return focusPoint + vec3(cos(degree),0,sin(degree))*-camDistance;\n}\nvec3 GetRayDir(vec2 uv, float degree)\n{\n    float FOVfactor = 0.6;\n    vec3 canvasPoint = vec3(sin(degree),0,cos(degree)) + vec3(uv.x * FOVfactor * cos(degree),uv.y * FOVfactor,uv.x * FOVfactor * sin(-degree));\n    return normalize(canvasPoint);\n\n}\n\nfloat RealSDF(Sphere[5] spheres, vec3 rayPos, float iTime)\n{\n#ifdef DOSPACEDEFORMATION\n    rayPos.y += 0.2 * (sin(rayPos.z*4.)+sin(rayPos.x*4.));\n#endif\n\n#define ZERO min(iTime,0.) // non-constant zero\n\n    float dist = SDF(spheres[0], rayPos);\n    for (int j = 1; j < 5; j++){\n        dist = smin(dist,SDF(spheres[j], rayPos),0.4 + ZERO);\n    }\n    return dist;\n}\n\n\nvec3 RunRay(vec2 uv, Sphere[5] spheres, float degree, vec2 oldUV,float iTime, float camDistance)\n{\n    vec3 focusPoint = vec3(0,0,3);\n    vec3 rayPos = GetRayPos(uv, degree, focusPoint, camDistance);\n    vec3 rayDir = GetRayDir(uv, -degree-3.1415*1.5);\n    \n    for (float i = 0.0; i < 14.0; i++)\n    {\n        float dist = RealSDF(spheres, rayPos, iTime);\n        rayPos += rayDir * dist;\n        \n        if (dist < 0.1)\n        {\n            //vec3 normal = GetNormal(spheres, rayPos, iTime);\n            return GetColor(spheres, rayPos);// * (0.9 + vec3(1,0.5,0.1)*0.1*max(0.,dot(normal, vec3(-1,1,0.001))));\n        }\n        \n    }\n    return vec3(0.5,0.2,0.1);\n}\n\n","name":"Common","description":"","type":"common"}]}