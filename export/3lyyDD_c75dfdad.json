{"ver":"0.1","info":{"id":"3lyyDD","date":"1611043376","viewed":164,"name":"Isometric view attempt","username":"linlin64","description":"Use left/right arrow to change orientation\nUse mouse left clic to place building\n\nThanks to knarkowicz for sprite loading solution : https://github.com/knarkowicz/ShadertoySprite","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["projection","isometric","perspective","view"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int viewSelection;\n\nvec2 gridToScreen(vec2 grid) {\n    return gridToScreen(grid, viewSelection, iResolution.xy);\n}\n\nvec2 screenToGrid(vec2 screen) {\n    return screenToGrid(screen, viewSelection, iResolution.xy);\n}\n\nbool displayWorld(vec2 fragCoord) {\n    // Draw columns\n    for(int i = 0; i < gridCaseNumber + 1; ++i) {\n        vec2 v1 = gridToScreen(vec2(i, 0));\n        vec2 v2 = gridToScreen(vec2(i, gridCaseNumber));\n    \n        if (sdLine(fragCoord, v1, v2)) {\n            return true;\n        }\n    }\n\n    // Draw lines\n    for(int i = 0; i < gridCaseNumber + 1; ++i) {\n        vec2 v1 = gridToScreen(vec2(0, i));\n        vec2 v2 = gridToScreen(vec2(gridCaseNumber, i));\n\n        if (sdLine(fragCoord, v1, v2)) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nbool drawLine(vec2 fragCoord, vec2 pointA, vec2 pointB) {\n    vec2 v1 = gridToScreen(pointA);\n    vec2 v2 = gridToScreen(pointB);\n    return sdLine(fragCoord, v1, v2);\n}\n\nbool displayGreenSquare(vec2 fragCoord) {\n    vec2 grid = screenToGrid(vec2(iMouse.x, iMouse.y));\n    vec2 gridFloor = vec2(floor(grid.x), floor(grid.y));\n    vec2 ptA = vec2(gridFloor.x, gridFloor.y);\n    vec2 ptB = vec2(gridFloor.x + 1.0, gridFloor.y);\n    vec2 ptC = vec2(gridFloor.x + 1.0, gridFloor.y + 1.0);\n    vec2 ptD = vec2(gridFloor.x, gridFloor.y + 1.0);\n    \n    if (drawLine(fragCoord, ptA, ptB)) {\n        return true;\n    }\n    if (drawLine(fragCoord, ptB, ptC)) {\n        return true;\n    }\n    if (drawLine(fragCoord, ptC, ptD)) {\n        return true;\n    }\n    if (drawLine(fragCoord, ptD, ptA)) {\n        return true;\n    }\n    \n    return false;\n}\n\nbool displayBuildings(vec2 fragCoord, out vec4 color) {\n    vec2 shift = vec2(0);\n    if(viewSelection == 0) {\n        shift = vec2(cellSize, 0);\n    } else if(viewSelection == 1) {\n        shift = vec2(2.0 * cellSize, cellSize * 0.5);\n    } else if(viewSelection == 2) {\n        shift = vec2(cellSize, cellSize);\n    } else if(viewSelection == 3) {\n        shift = vec2(0, cellSize * 0.5);\n    }\n\n    // Draw Building\n    vec2 buildingPositionOnScreen[10];\n    int buildingNumber = int(texelFetch(iChannel0, ivec2(50,50),0).x);\n    for(int i = 0; i < buildingNumber; ++i) {\n        vec2 buildingPositionOnGrid = texelFetch(iChannel0, ivec2(i,0),0).xy;\n        buildingPositionOnScreen[i] = gridToScreen(buildingPositionOnGrid);\n    }\n    \n    bool swapped = true;\n    int j = 0;\n    vec2 tmp;\n    for (int c = 0; c < buildingNumber; c--)\n    {\n        if (!swapped)\n            break;\n        swapped = false;\n        j++;\n        for (int i = 0; i < buildingNumber; i++)\n        {\n            if (i >= buildingNumber - j)\n                break;\n            if (buildingPositionOnScreen[i].y > buildingPositionOnScreen[i + 1].y)\n            {\n                tmp = buildingPositionOnScreen[i];\n                buildingPositionOnScreen[i] = buildingPositionOnScreen[i+1];\n                buildingPositionOnScreen[i+1] = tmp;\n                swapped = true;\n            }\n        }\n    }\n    \n    \n    for(int i = 0; i < buildingNumber; ++i) {\n        vec2 uv = vec2(floor(buildingPositionOnScreen[i].x - fragCoord.x + shift.x), floor(fragCoord.y - buildingPositionOnScreen[i].y + shift.y));\n        if (uv.x >= 0.0 && uv.x < 100.0\n            && uv.y >= 0.0 && uv.y < 120.0) {\n            vec3 colorTemp = vec3(0,0,0);\n            vec2 uvfloor = vec2(floor(uv.x/2.0), floor(uv.y/2.0));\n            drawBuilding(colorTemp, uvfloor);\n            if (colorTemp.x != 0.0 && colorTemp.x != 0.0 && colorTemp.z != 0.0) {\n                color = vec4(colorTemp, 1.0);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0,0,0,1);\n    viewSelection = int(texelFetch(iChannel0, ivec2(51,51),0).x);\n\n    if (displayWorld(fragCoord)) {\n        fragColor = vec4(1,0,0,1);\n    }\n\n    if (displayGreenSquare(fragCoord)) {\n        fragColor = vec4(0,1,0,1);\n    }\n\n    vec4 color;\n    if (displayBuildings(fragCoord, color)) {\n        fragColor = color;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nbool isPressed(int key) {\n   return bool(texelFetch( iChannel1, ivec2(key,0),0 ).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int number = int(texelFetch(iChannel0, ivec2(50.0,50.0),0).x);\n    vec2 info = texelFetch(iChannel0, ivec2(51,51),0).xy;\n    int vue = int(info.x);\n    int pressed = int(info.y);\n\n    if (fragCoord.x >= 0.0 && fragCoord.x < 10.0\n        && fragCoord.y >= 0.0 && fragCoord.y < 1.0) {\n        vec2 pos = texelFetch(iChannel0, ivec2(fragCoord.x,fragCoord.y),0).xy;\n        int fragCoordXint = int(fragCoord.x);\n        if (fragCoordXint == number && iMouse.w > 0.0) {\n            vec2 posTemp = screenToGrid(iMouse.xy, vue, iResolution.xy); \n            pos = vec2(floor(posTemp.x), floor(posTemp.y));\n        }\n        fragColor = vec4(pos.x, pos.y, 0.0, 0.0);\n        return;\n    }\n    \n    if (fragCoord.x >= 50.0 && fragCoord.x < 51.0\n        && fragCoord.y >= 50.0 && fragCoord.y < 51.0) {\n        if(iMouse.w > 0.0 && number < 9 ) {\n            ++number;\n        }\n        \n        fragColor = vec4(number, 0,0,0);\n        return;\n    }\n    \n    if (fragCoord.x >= 51.0 && fragCoord.x < 52.0\n        && fragCoord.y >= 51.0 && fragCoord.y < 52.0) {\n\n        if (pressed == 0 && isPressed(KEY_LEFT)) {\n            --vue;\n            if (vue < 0) {\n                vue = 3;\n            }\n            pressed = 1;\n        } \n        if (pressed == 0 && isPressed(KEY_RIGHT)) {\n            ++vue;\n            if (vue >= 4) {\n                vue = 0;\n            }\n            pressed = 1;\n        } \n\n        if (!isPressed(KEY_LEFT) && !isPressed(KEY_RIGHT)) {\n            pressed = 0;\n        }\n        \n        fragColor = vec4(vue,pressed,0.0,0.0);\n        return;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float cellSize = 50.0;\nconst int gridCaseNumber = 8;\nconst float mapWidth = cellSize * float(gridCaseNumber);\nconst float mapHeight = cellSize * float(gridCaseNumber);\n\nbool sdLine( in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    if(length( pa - ba*h ) <= 2.02) {\n    \treturn true;\n    }\n    return false;\n}\n\n//                                        (2,2)\n// (0,2) | (1,2) | (2,2)               (1,2) (2,1)\n// (0,1) | (1,1) | (2,1)            (0,2) (1,1) (2,0)  \n// (0,0) | (1,0) | (2,0)     =>         (0,1) (1,0)\n//                                        (0,0)\nconst mat2 toScreenForView0 = mat2(\n    vec2(1.0 * cellSize, 0.5 * cellSize), \n    vec2(-1.0 * cellSize, 0.5 * cellSize));\n\n//                                        (0,2)\n// (0,2) | (1,2) | (2,2)               (0,1) (1,2)\n// (0,1) | (1,1) | (2,1)            (0,0) (1,1) (2,2)  \n// (0,0) | (1,0) | (2,0)     =>         (1,0) (2,1)\n//                                        (2,0)\nconst mat2 toScreenForView1 = mat2(\n    vec2(1.0 * cellSize, -0.5 * cellSize), \n    vec2(1.0 * cellSize, 0.5 * cellSize));\n\n//                                        (0,0)\n// (0,2) | (1,2) | (2,2)               (1,0) (0,1)\n// (0,1) | (1,1) | (2,1)            (2,0) (1,1) (0,2)  \n// (0,0) | (1,0) | (2,0)     =>         (2,1) (1,2)\n//                                        (2,2)\nconst mat2 toScreenForView2 = mat2(\n    vec2(-1.0 * cellSize, -0.5 * cellSize), \n    vec2(1.0 * cellSize, -0.5 * cellSize));\n\n//                                        (2,0)\n// (0,2) | (1,2) | (2,2)               (2,1) (1,0)\n// (0,1) | (1,1) | (2,1)            (2,2) (1,1) (0,0)  \n// (0,0) | (1,0) | (2,0)     =>         (1,2) (0,1)\n//                                        (0,2)\nconst mat2 toScreenForView3 = mat2(\n    vec2(-1.0 * cellSize, 0.5 * cellSize), \n    vec2(-1.0 * cellSize, -0.5 * cellSize));\n\nconst mat2 toScreen[] = mat2[4] (\n    toScreenForView0,\n    toScreenForView1,\n    toScreenForView2,\n    toScreenForView3\n);\n\nconst mat2 invertedToScreenForView0 = inverse(toScreenForView0);\nconst mat2 invertedToScreenForView1 = inverse(toScreenForView1);\nconst mat2 invertedToScreenForView2 = inverse(toScreenForView2);\nconst mat2 invertedToScreenForView3 = inverse(toScreenForView3);\n\nconst mat2 invertedToScreen[] = mat2[4] (\n    invertedToScreenForView0,\n    invertedToScreenForView1,\n    invertedToScreenForView2,\n    invertedToScreenForView3\n);\n\nvec2 getOffset(int viewSelection, vec2 iResolution) {\n    vec2  offset;\n    if (viewSelection == 0) {\n        offset = vec2(iResolution.x / 2.0, iResolution.y / 2.0 - mapHeight * 0.5);    \n    } else if (viewSelection == 1) {\n        offset = vec2(iResolution.x / 2.0 - mapWidth, iResolution.y / 2.0);   \n    } else if (viewSelection == 2) {\n        offset = vec2(iResolution.x / 2.0, iResolution.y / 2.0 + mapHeight * 0.5);    \n    } else {\n        offset = vec2(iResolution.x / 2.0 + mapWidth, iResolution.y / 2.0);   \n    }\n    return offset;\n}\n\nvec2 gridToScreen(vec2 grid, int viewSelection, vec2 iResolution) {\n    vec2  offset = getOffset(viewSelection, iResolution);\n    return offset + toScreen[viewSelection] * grid;\n}\n\nvec2 screenToGrid(vec2 screen, int viewSelection, vec2 iResolution) {\n    vec2  offset = getOffset(viewSelection, iResolution);\n    return invertedToScreen[viewSelection] * (screen - offset);\n}\n\nvoid drawBuilding(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 59. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 536870912u : (p.x < 32. ? 2577u : 0u)))) : v;\n\tv = p.y == 58. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 287309824u : (p.x < 32. ? 659729u : 0u)))) : v;\n\tv = p.y == 57. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 286334976u : (p.x < 32. ? 168890641u : 0u)))) : v;\n\tv = p.y == 56. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 286331168u : (p.x < 32. ? 286331153u : (p.x < 40. ? 10u : 0u))))) : v;\n\tv = p.y == 55. ? (p.x < 8. ? 0u : (p.x < 16. ? 536870912u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 2577u : 0u))))) : v;\n\tv = p.y == 54. ? (p.x < 8. ? 0u : (p.x < 16. ? 287309824u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 659729u : 0u))))) : v;\n\tv = p.y == 53. ? (p.x < 8. ? 0u : (p.x < 16. ? 286334976u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 168890641u : 0u))))) : v;\n\tv = p.y == 52. ? (p.x < 8. ? 0u : (p.x < 16. ? 286331168u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 10u : 0u)))))) : v;\n\tv = p.y == 51. ? (p.x < 8. ? 536870912u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 2577u : 0u)))))) : v;\n\tv = p.y == 50. ? (p.x < 8. ? 287309824u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 659729u : 0u)))))) : v;\n\tv = p.y == 49. ? (p.x < 8. ? 286334976u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 168890641u : 0u)))))) : v;\n\tv = p.y == 48. ? (p.x < 8. ? 286331200u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : 10u)))))) : v;\n\tv = p.y == 47. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 286331153u : 33u)))))) : v;\n\tv = p.y == 46. ? (p.x < 8. ? 286331204u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 554766609u : 34u)))))) : v;\n\tv = p.y == 45. ? (p.x < 8. ? 286344260u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 572592401u : 34u)))))) : v;\n\tv = p.y == 44. ? (p.x < 8. ? 289686596u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 572662033u : 34u)))))) : v;\n\tv = p.y == 43. ? (p.x < 8. ? 1145324356u : (p.x < 16. ? 286331153u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 286331153u : (p.x < 48. ? 572662305u : 34u)))))) : v;\n\tv = p.y == 42. ? (p.x < 8. ? 1145411908u : (p.x < 16. ? 286331204u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 554766609u : (p.x < 48. ? 690102818u : 34u)))))) : v;\n\tv = p.y == 41. ? (p.x < 8. ? 1184471364u : (p.x < 16. ? 286344260u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 572592401u : (p.x < 48. ? 697901602u : 34u)))))) : v;\n\tv = p.y == 40. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 289686596u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 572662033u : (p.x < 48. ? 697932066u : 34u)))))) : v;\n\tv = p.y == 39. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1145324436u : (p.x < 24. ? 286331153u : (p.x < 32. ? 286331153u : (p.x < 40. ? 572662305u : (p.x < 48. ? 697932087u : 34u)))))) : v;\n\tv = p.y == 38. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1145411988u : (p.x < 24. ? 286331204u : (p.x < 32. ? 554766609u : (p.x < 40. ? 2569151010u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 37. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1167694228u : (p.x < 24. ? 286344260u : (p.x < 32. ? 571543825u : (p.x < 40. ? 2576949794u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 36. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 289686598u : (p.x < 32. ? 572662033u : (p.x < 40. ? 2576978466u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 35. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1145325209u : (p.x < 32. ? 1109533217u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 34. ? (p.x < 8. ? 2576979268u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1145477529u : (p.x < 32. ? 2570199588u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 33. ? (p.x < 8. ? 2576565316u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 574200120u : 34u)))))) : v;\n\tv = p.y == 32. ? (p.x < 8. ? 2487511364u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 589445432u : 34u)))))) : v;\n\tv = p.y == 31. ? (p.x < 8. ? 1148819780u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 697508392u : 34u)))))) : v;\n\tv = p.y == 30. ? (p.x < 8. ? 2040109380u : (p.x < 16. ? 1218024260u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 1771672217u : (p.x < 48. ? 697930530u : 34u)))))) : v;\n\tv = p.y == 29. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1217610836u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 576295577u : (p.x < 48. ? 697932082u : 34u)))))) : v;\n\tv = p.y == 28. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1145334164u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2485277337u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 27. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1147771284u : (p.x < 24. ? 1146722708u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576556633u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 26. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146721348u : (p.x < 32. ? 966337060u : (p.x < 40. ? 2576978466u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 25. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146373257u : (p.x < 32. ? 574169636u : (p.x < 40. ? 2576978579u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 24. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1145342361u : (p.x < 32. ? 2502042148u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 23. ? (p.x < 8. ? 2576958532u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576687652u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 597268792u : 34u)))))) : v;\n\tv = p.y == 22. ? (p.x < 8. ? 2554611780u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 572758328u : 34u)))))) : v;\n\tv = p.y == 21. ? (p.x < 8. ? 1145674052u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 696394552u : 34u)))))) : v;\n\tv = p.y == 20. ? (p.x < 8. ? 1234803012u : (p.x < 16. ? 1218025796u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 697926179u : 34u)))))) : v;\n\tv = p.y == 19. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218004036u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 597267097u : (p.x < 48. ? 697932082u : 34u)))))) : v;\n\tv = p.y == 18. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1212434836u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 1646498457u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 17. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1145674132u : (p.x < 24. ? 1146722712u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2574394009u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 16. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722372u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576970275u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 15. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146569801u : (p.x < 32. ? 580461092u : (p.x < 40. ? 2576978562u : (p.x < 48. ? 1234803000u : 34u)))))) : v;\n\tv = p.y == 14. ? (p.x < 8. ? 2576980292u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1145321881u : (p.x < 32. ? 2183275044u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 697932088u : 34u)))))) : v;\n\tv = p.y == 13. ? (p.x < 8. ? 2576966724u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1145674137u : (p.x < 32. ? 2575442468u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 681154872u : 34u)))))) : v;\n\tv = p.y == 12. ? (p.x < 8. ? 2573485124u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 573086008u : 162u)))))) : v;\n\tv = p.y == 11. ? (p.x < 8. ? 1682195456u : (p.x < 16. ? 1218025876u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 2720147512u : 0u)))))) : v;\n\tv = p.y == 10. ? (p.x < 8. ? 1145307136u : (p.x < 16. ? 1218025860u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2576978585u : (p.x < 48. ? 10625576u : 0u)))))) : v;\n\tv = p.y == 9. ? (p.x < 8. ? 1140850688u : (p.x < 16. ? 1218012228u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 681153177u : (p.x < 48. ? 41506u : 0u)))))) : v;\n\tv = p.y == 8. ? (p.x < 8. ? 0u : (p.x < 16. ? 1214530628u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 573084313u : (p.x < 48. ? 162u : 0u)))))) : v;\n\tv = p.y == 7. ? (p.x < 8. ? 0u : (p.x < 16. ? 1145324544u : (p.x < 24. ? 1146722713u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 2720146073u : 0u))))) : v;\n\tv = p.y == 6. ? (p.x < 8. ? 0u : (p.x < 16. ? 1145307136u : (p.x < 24. ? 1146722644u : (p.x < 32. ? 2576949796u : (p.x < 40. ? 10625575u : 0u))))) : v;\n\tv = p.y == 5. ? (p.x < 8. ? 0u : (p.x < 16. ? 1140850688u : (p.x < 24. ? 1146704964u : (p.x < 32. ? 664347172u : (p.x < 40. ? 41506u : 0u))))) : v;\n\tv = p.y == 4. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 1145324612u : (p.x < 32. ? 572924452u : (p.x < 40. ? 162u : 0u))))) : v;\n\tv = p.y == 3. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 1145324544u : (p.x < 32. ? 2720145956u : 0u)))) : v;\n\tv = p.y == 2. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 1145307136u : (p.x < 32. ? 10625572u : 0u)))) : v;\n\tv = p.y == 1. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 1140850688u : (p.x < 32. ? 41508u : 0u)))) : v;\n\tv = p.y == 0. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 0u : (p.x < 32. ? 164u : 0u)))) : v;\n    v = p.x >= 0. && p.x < 50. ? v : 0u;\n\n    float i = float((v >> uint(4. * p.x)) & 15u);\n    color = i == 1. ? vec3(0.41, 0.42, 0.41) : color;\n    color = i == 2. ? vec3(0.6, 0.61, 0.6) : color;\n    color = i == 3. ? vec3(0.64, 0.74, 0.73) : color;\n    color = i == 4. ? vec3(0.7, 0.71, 0.7) : color;\n    color = i == 5. ? vec3(0.69, 0.83, 0.81) : color;\n    color = i == 6. ? vec3(0.66, 0.85, 0.82) : color;\n    color = i == 7. ? vec3(0.65, 0.89, 0.85) : color;\n    color = i == 8. ? vec3(0.65, 0.93, 0.88) : color;\n    color = i == 9. ? vec3(0.65, 1, 0.94) : color;\n    color = i == 10. ? vec3(0.86, 0.87, 0.86) : color;\n}\n","name":"Common","description":"","type":"common"}]}