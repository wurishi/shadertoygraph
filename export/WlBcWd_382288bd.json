{"ver":"0.1","info":{"id":"WlBcWd","date":"1595867725","viewed":150,"name":"log_polar_thingy_0","username":"balkhan","description":"toying with this space: https://www.osar.fr/notes/logspherical/","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","logpolar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by balkhan\n*/\n\n\n\n#define I_MAX\t\t400\n#define E\t\t\t0.0001\n#define FAR\t\t\t2.\n\n#define\tFUDGE\t\t1.\n\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tcalcNormal(in vec3 pos, float e, vec3 dir);\nvoid\trotate(inout vec2 v, float angle);\nfloat\tmylength(vec2 p);\nfloat\tmylength(vec3 p);\n\nvec3\th;\nvec3\tvolumetric;\nvec2\tmous;\n\n#define PI\t\t\t3.14159\n#define TAU\t\t\tPI*2.\n\n#define SCALE 2.0/PI\n\nfloat sdf(in vec3 pos3d)\n{\n    vec2 pos2d = pos3d.xz;\n    \n    float r = length(pos2d);\n    float ata = atan(pos2d.y, pos2d.x);\n    pos2d = vec2(\n        log(r)+iTime*-.25+sin(ata*.25+.2290035)*2.28\n        ,\n        iTime*.125+ata\n    \t);\n    pos2d *= SCALE;\n    pos2d = fract(pos2d) - 0.5;\n    float mul = r;///SCALE;\n    float ret = \n        (\n            mylength(vec2(pos2d.x, pos3d.y/mul+.0*(pos3d.y+.205)/(mul)))\n            - .1252125\n        ) * mul/SCALE\n        ;\n//    ret = max(ret, -(length(vec2(pos2d.x, (fract(pos3d.x*20./mul)-.50)/(20.)) )-.0120023));\n    ret = min(ret, (mylength(vec2(pos2d.x, (fract(pos3d.x*9./mul)-.50)/(9.)) )+.055-.050023*(1.42504041+pos3d.y*1./mul))*mul/SCALE);\n    \n    // middle tentacles\n    ret = min(ret, (mylength(vec2(\n        ( fract(pos2d.x*2.-.0)-.5)/2.\n        , \n                                  ( fract((pos3d.y/mul+-2.20485)*.25)-.5)/2.\n                                  //(fract(pos3d.x*3./mul)-.50)/(3.)\n                            ))-.005125050023*1.*(.1+pos3d.y/mul) )*mul/SCALE);\n\n    ret = min(ret, \n              \n              max(\n                  -(length(pos3d.zx)-.015)\n                  ,\n                  (mylength(vec2(\n        ( (pos2d.x*1.-.0)-.5*.0)/1.-.0\n        , \n                                  (.25+ fract((pos3d.x*1./mul+-0.020485*.0+-.125*.25*.0)*9.)-.5)/9.\n                                  //(fract(pos3d.x*3./mul)-.50)/(3.)\n                            ))\n                    +.05-.050023*-(-0.7050+pos3d.y*1./mul)*step(-.50, pos3d.y/mul))*mul/SCALE)\n                    //-.02512505125050023*1. )*mul/SCALE);\n              );\n    ret =\n        min(\n            ret\n            ,\n        (\n            mylength(vec2(pos2d.x, pos3d.y/mul+.5+.0*(pos3d.y+.205)/(mul)))\n            - .025252125\n        ) * mul/SCALE\n            )\n        ;\n    ret = max(ret, pos3d.y/mul+.05+.0*-.003125*-.750);\n    h += vec3(.69, .5, .34)/max(.01, ret*70000. + 40.501510);\n    return ret*1.*1.;\n}\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    h *= 0.;\n    volumetric *= 0.;\n    vec3\tcol = vec3(0., 0., 0.);\n    vec2\tR = iResolution.xy;\n\tvec2\tuv  = vec2((f.xy-.5*R.xy)/R);\n\tvec3\tdir = normalize(vec3(uv*vec2(1.,-1.), 1.));//camera(uv);\n    vec3\tpos = vec3(-.0, -.2105017501050*.450+.033, -2.0*.0-.2525045);\n    mous = (iMouse.xy-R*.5) / R;\n    \n\n    vec4\tinter = (march(pos, dir));\n//    col += volumetric;\n    if (inter.y <= E*1.)\n    {\n        col += smoothstep(.125, .9, 1.-.750*inter.w)*vec3(0.9, .75, .524);\n        /*\n        \n        vec3\tv = pos+(inter.w-E*0.)*dir;\n\t    vec3\tn = calcNormal(v, E*.1, dir);\n\t    vec3 ref = reflect(dir,n);\n        */\n        vec3\tv = pos+(inter.w-E*0.)*dir;\n        vec3\tn = calcNormal(v, E*.5, dir);\n        vec3\tev = normalize(v - pos);\n\t\tvec3\tref_ev = reflect(ev, n);\n        vec3\tlight_pos   = vec3(-100.0, 60.0, -50.0);\n\t\tvec3\tlight_color = vec3(.1, .4, .7);\n        vec3\tvl = normalize(light_pos - v);\n\t\tfloat\tdiffuse  = max(0.0, dot(vl, n));\n\t\tfloat\tspecular = pow(max(0.0, dot(vl, ref_ev)), 5.);\n        col.xyz += light_color * (specular)+ diffuse * vec3(.51,.515, .53);\n\t    col += h*-.235025;  \n    }\n    c_out =  vec4(col, h.x);\n}\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec4\tret = vec4(0.0, 0.0, 0.0, 0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = sdf(p);\n        dist.y += dist.x*FUDGE;\n        if ( dist.x < E || dist.y > FAR)\n            break;\n    }\n    ret.w = dist.y;\n    ret.y = dist.x;\n    return (ret);\n}\n\n// Utilities\n\nfloat\tmylength(vec3 p)\n{\n\tfloat\tret = 1e5;\n\n    p = abs(p);\n    ret = max(p.x, max(p.y, p.z));\n    \n    return ret;\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret = 1e5;\n\n    p = abs(p);\n    \n    ret = max(p.x, p.y);\n\n    return ret;\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}