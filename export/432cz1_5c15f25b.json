{"ver":"0.1","info":{"id":"432cz1","date":"1726962281","viewed":36,"name":"Save the planet","username":"klchhh","description":"https://www.nts.live/infinite-mixtapes/labyrinth","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["kopimi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    //fragColor = vec4(1.0);\n    fragColor *= 0.5 + 0.5 * step(0.5, fract(fragCoord.y / 2.0));\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float beam (vec2 p, vec2 c, float a) {\n    p-= c;\n    p = vec2(cos(a) * p.x - sin(a) * p.y, sin(a) * p.x + cos(a) * p.y);\n    \n\n    return p.y;\n}\n\nfloat demo (vec2 p) {\n    float d = 999.0;\n    \n    float r = beat * 3.141592 / 16.0;\n    \n    p = abs(p);\n    p = vec2(cos(r) * p.x - sin(r) * p.y, cos(r) * p.y + sin(r) * p.x);\n    \n    \n    \n    p = fract(p * 4.0);\n    \n    \n    d = min(d, beam(p, 0.1 * vec2(cos(3.14 * beat / 2.0), sin(3.1415 * beat / 3.0)), beat * 3.141592));\n    return d;\n}\n\n\nvec3 scene(vec2 p) {\n    vec3 col = vec3 (1.0);\n    \n    col *= step(0.0, demo(p));\n    col = max(col, 1.0 - step(0.0, length(p) - 0.5));\n    \n    col = min(col, 1.0 - step(0.0, length(p) - 1.0));\n    \n    \n    return col;\n}\n\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    \n    vec2 p = uv * 2.0 - 1.0;\n    p = p * iResolution.xy / iResolution.yy;\n    \n    col = scene(p);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv - 0.5) * 2.0 + 0.5;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    col = fract(col - 1.0 / vec3(2.0, 4.0, 6.0) * beat) * (1.0 - step(col.r, col.g + col.b));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_fdb = uv - 16.0 * (uv - 0.5) / iResolution.xy;\n    \n    \n    float msk = texture(iChannel0, uv).r;\n    vec3 tex = texture(iChannel3, uv).rgb;\n    vec3 fdb = texture(iChannel1, uv_fdb).rgb;\n    \n    fdb = fract(fdb + vec3(1.0, 4.0, 7.0) / 256.0);\n    \n    vec3 col = mix(fdb, tex, msk);\n    //col = tex;\n    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BPM 155.0\n#define beat (iTime / 60.0 * BPM)","name":"Common","description":"","type":"common"}]}