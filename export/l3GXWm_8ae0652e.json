{"ver":"0.1","info":{"id":"l3GXWm","date":"1720020933","viewed":65,"name":"Random starward","username":"ODtian","description":"null","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define WIDTH 32.0\n#define HEIGHT 16.0\n#define CHAR_WIDTH (1.0 / WIDTH)\n#define CHAR_HEIGHT (1.0 / HEIGHT)\n#define CHAR_SIZE vec2(CHAR_WIDTH, CHAR_HEIGHT)\n\nconst float s = 0.7;\n\n// https://www.shadertoy.com/view/llySRh font\nvec4 char(vec2 pos, uint c) {\n    if (pos.x < 0. || pos.x > 1. || pos.y < 0. || pos.y > 1.)\n        return vec4(0, 0, 0, 1.0);\n    //return texture   ( iChannel0, p/16. + fract( vec2(C, 15-C/16) / 16. ) );\n    //return textureLod( iChannel0, p/16. + fract( vec2(C, 15-C/16) / 16. ) , \n    //                   log2(length(fwidth(p/16.*iResolution.xy))) );\n    // return textureGrad(iChannel0, pos / 16. + fract(vec2(char, 15 - char / 16) / 16.), dFdx(pos / 16.), dFdy(pos / 16.));\n    // possible variants: (but better separated in an upper function) \n    //     - inout pos and include pos.x -= .5 + linefeed mechanism\n    //     - flag for bold and italic \n    return textureGrad(iChannel0, pos / 16. + fract(vec2(c, 15u - c / 16u) / 16.), dFdx(pos / 16.), dFdy(pos / 16.));\n}\n\n// https://www.shadertoy.com/view/slfGWX noise gen\nfloat rand(vec2 co) {\n    //Note: fract function return de fractional part of a division and dumps the integer part\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 hash(vec2 p) {\n    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n    //The output must be between 0.0 and 1.0\n    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\n\nfloat noise(in vec2 p) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n    vec2 i = floor(p + (p.x + p.y) * K1);\n\n    vec2 a = p - i + (i.x + i.y) * K2;\n    vec2 o = step(a.yx, a.xy);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0 * K2;\n\n    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n\n    vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n\n    return dot(n, vec3(70.0));\n}\n\n// colormap https://www.shadertoy.com/view/Nd3fR2\nvec3 inferno(float t) {\n    const vec3 c0 = vec3(0.000129, 0.001094, -0.041044);\n    const vec3 c1 = vec3(0.083266, 0.574933, 4.155398);\n    const vec3 c2 = vec3(11.783686, -4.013093, -16.439814);\n    const vec3 c3 = vec3(-42.246539, 17.689298, 45.210269);\n    const vec3 c4 = vec3(78.087062, -33.838649, -83.264061);\n    const vec3 c5 = vec3(-72.108852, 32.950143, 74.479447);\n    const vec3 c6 = vec3(25.378501, -12.368929, -23.407604);\n    return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))));\n}\n\n// https://www.shadertoy.com/view/McG3WW tonemapper\nvec3 tonemapping_ACES(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy, ouv = uv;\n    uv = vec2(0.5, 2.0 - mod(iTime / 3.0, 4.0)) - (vec2(0.5, 0.0) - uv) / (1.0 - uv.y * s);\n    fragColor = vec4(0.0);\n    float asp = iResolution.x / iResolution.y;\n    vec2 pos = uv;\n    pos.y /= asp;\n    \n    float ox = pos.x;\n\n    for (int i = 0; i < 16; i++) {\n        for (int j = 0; j < 32; j++) {\n            float n = noise(vec2(float(i + int(iTime)), float(j + int(iTime)))) * 0.5 + 0.5;\n            uint c = uint(n * 128.0);\n            fragColor.rgb += pow((1.0 - char(pos * 16.0, c).a) * 2.0, 8.0) * inferno(n);\n            pos.x -= CHAR_WIDTH;\n        }\n        pos.y -= CHAR_HEIGHT;\n        pos.x = ox;\n    }\n    fragColor.rgb += 10.0 * smoothstep(0.6, 1.8, noise(uv * 50.0));\n    fragColor *= smoothstep(0.2, 0.5, 1.0 - ouv.y);\n    fragColor.rgb = tonemapping_ACES(fragColor.rgb);\n}\n","name":"Image","description":"","type":"image"}]}