{"ver":"0.1","info":{"id":"4dGSDW","date":"1474100628","viewed":136,"name":"coolant tubes","username":"jameswilddev","description":"I'l confess that I don't know enough maths to make the cylinder function in any way &amp;quot;right&amp;quot;.\n\nBeen draft a long time, making public so I can link it!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["volumetrics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INFINITY 10000.0\n#define PI 3.142\n#define HALFPI (PI / 2.0)\n\nvec3 plane(vec2 pos, vec3 ndc) {\n    float divisor = length(pos) / abs(dot(normalize(pos), ndc.xy));\n    return vec3(dot(vec2(-ndc.y, ndc.x), normalize(pos)) * divisor, abs(divisor) + ndc.z, abs(divisor));\n}\n\nvec3 planeZ(float z, vec3 ndc) {\n    return vec3(ndc.xy * (z - ndc.z), z - ndc.z);\n}\n\nvec3 cylinder(vec2 pos, float radius, vec3 ndc, bool inside) {\n    float dist = length(pos) / abs(dot(normalize(pos), ndc.xy));\n    float onX = dot(vec2(-ndc.y, ndc.x), normalize(pos)) * dist;\n    onX = asin(onX / radius);\n    float z = abs(dist) - (cos(onX) * radius * dist);\n    return vec3(onX * radius + (onX < 0.0 ? 1.0 : -1.0) * (cos(onX) * radius), abs(dist) - (cos(onX) * radius * dist) + ndc.z, z > 0.0 ? z : INFINITY);\n}\n\nvec3 cylinderZ(float z, float radius, vec3 ndc) {\n    float relX = ndc.x * (z - ndc.z) / radius;\n    if (abs(relX) > 1.0) return vec3(0.0, 0.0, INFINITY);\n    float ang = asin(relX);\n    return vec3(\n        sin(ang * radius), \n        ndc.y * (z - ndc.z - cos(ang) * radius), \n        z - ndc.z - cos(ang) * radius);\n}\n    \nvec3 light(vec3 ndc, vec3 location, vec3 color, float size, float rate, float scene) {\n    vec3 sampleFrom = vec3(ndc.xy * abs(location.z - ndc.z), max(ndc.z, min(scene + ndc.z, location.z)));\n    return color * pow(1.0 / (1.0 + (distance(location, sampleFrom) / size)), rate);\n}\n\nvec3 combine(vec3 a, vec3 b) {\n    return a.z < b.z ? a : b;\n}\n\nvec3 difference(vec3 a, vec3 b) {\n    return a.z > b.z ? a : b;\n}\n\nbool inChequer(vec3 ndc) {\n    vec2 local = fract(ndc.xy);\n    return local.x > 0.5 != local.y > 0.5;\n}\n\nvec3 chequer(vec3 ndc, float falloff) {\n    vec2 local = fract(ndc.xy);\n    return (local.x > 0.5 != local.y > 0.5 ? vec3(1.0, 1.0, 0.3) : vec3(0.3, 0.3, 1.0)) / (1.0 + ndc.z * falloff);\n}\n\nvec3 gammaCorrect(vec3 c) {\n    return pow(c, vec3(1.0 / 2.2));\n}\n\nvec2 forAngle(float angle) {\n    return vec2(cos(angle), sin(angle));\n}\n\nvec3 render(vec2 fragCoord, vec2 res, float seconds) {\n    vec3 ndc = vec3((fragCoord - res / 2.0) / min(res.x, res.y), 5.0 + seconds);\n    vec3 scene = \n        combine(cylinder(forAngle(0.0), 0.1, ndc, true),\n        combine(cylinder(forAngle(PI / 3.0) * 0.5, 0.1, ndc, true),\n        combine(cylinder(forAngle(2.0 * PI / 3.0) * 0.5, 0.1, ndc, true),\n        combine(plane(forAngle(PI / 3.0), ndc),\n        combine(plane(forAngle(2.0 * PI / 3.0), ndc), \n        plane(forAngle(0.0), ndc))))));\n    return gammaCorrect(\n        chequer(scene * 4.0, 80.0) \n        + light(ndc, vec3(cos(seconds), sin(seconds), 8.5), vec3(0.0, 1.5, 0.0), 0.5, 4.0, scene.z)\n    \t+ light(ndc, vec3(-cos(seconds), -sin(seconds), 12.5), vec3(0.0, 2.0, 0.4), 0.5, 4.0, scene.z)\n        + light(ndc, vec3(0.0, 0.5, mod(seconds * 10.0, 100.0)), vec3(0.0, 0.8, 2.0), 1.0, 8.0, scene.z)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(render(fragCoord.xy, iResolution.xy, iTime), 1.0);\n}","name":"Image","description":"","type":"image"}]}