{"ver":"0.1","info":{"id":"XcG3WD","date":"1712741985","viewed":89,"name":"cubix mandala","username":"akr51","description":"A Mandala like pattern made from 3D glow cubes","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"4fyGWD","parentname":"Insectoids loading screen"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define EPSILON 0.0001\n#define MAX_DST 54.0\n#define ITERATI 32\n\n\n\nfloat glw(float d, float r, float i)\n{\n\t\n    \n    return pow(r / max(d, 0.0001), i);\t\n\n}\n\n\n\nmat2 rt(float t)\n{\n\n    float c = cos(t);\n    float s = sin(t);\n    return mat2(c, -s, s, c);\n\n}\n\n\nfloat cube(vec3 p, vec3 s)\n{\n    vec3 rp = p;\n    rp.xy *= rt(iTime * 0.15);\n    rp.zy *= rt(iTime * 0.175);\n    rp = abs(rp) - s;\n    return length(max(rp, 0.0)) + min(max(rp.x, max(rp.y, rp.z)), 0.0);\n}\n\n\n\nvec2 map(vec3 sp)\n{\n\n\n    float c_id = 0.01;\n    \n    float d0 = cube(sp, vec3(0.5));\n    \n    return vec2(d0, c_id);\n   \n\n}\n\n\nvec2 mrch(vec3 ro, vec3 rd, inout float g)\n{\n\n    float d0 = 0.0;\n    vec2 dsi = vec2(0.0);\n    \n    for (int i = 0; i < ITERATI; i++)\n    {\n    \n        vec3 p = ro + rd * d0;\n        p.z += iTime * 0.5;\n        float z = 5.0;\n        p = mod(p, z) - z * 0.5;\n        \n        dsi = map(p);\n        float ds = dsi.x;\n        g += glw(ds, 0.019, 1.1);\n        d0 += ds;\n        \n        if (d0 > MAX_DST || abs(ds) < EPSILON) break;\n        \n        \n    \n    }\n    \n    return vec2(d0, dsi.y);\n\n}\n\n\n\nvec3 dir(vec2 uv, vec3 ro, vec3 fx)\n{\n\n    \n    vec3 w = normalize(fx - ro);\n    vec3 u = normalize(cross(w, vec3(0.0, 1.0, 0.0)));\n    vec3 v = normalize(cross(u, w));\n    \n    return mat3(u, v, w) * normalize(vec3(uv, 1.5));\n\n}\n\n\nvoid mainImage(out vec4 c_out, in vec2 u)\n{\n    \n    vec2 rr = iResolution.xy, uv = (u + u - rr) / rr.y;\n    uv *= 0.4;\n    uv *= rt(iTime * 0.15);\n    uv = abs(uv);\n    uv = vec2(length(uv), atan(uv.y, uv.x));\n    uv.x += 1.0;\n    uv = fract(uv);\n    \n    vec3 ro = vec3(0.0, 0.1,  -2.0);\n    vec3 fx = vec3(0.0, -0.1, 0.1);\n    uv.x += sin((iTime * 0.1 + uv.x + sin(uv.y * 2.0)) * 2.1) * 0.1;\n    uv.xy *= rt(iTime * 0.0001);\n    vec3 rd = dir(uv, ro, fx);\n    float g = 0.0;\n    float fog = 0.25;\n    float f = length(uv);\n    vec2 sci = mrch(ro, rd, g);\n    float d0 = sci.x;\n    \n    d0 = mix(fog, g, f);\n    \n    c_out = vec4(vec3(d0) * vec3(1.8, 0.4, 0.1), 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}