{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define FREQUENCY 75\n#define TILT -60\n#define PATTERN 0.7\n\n//method used to define the grid line and its x & y offsets\nfloat coordinateGrid(vec2 r, float lineWidth, float offset, bool doubleLine) {\n\n\tfloat pixel = 0.0;\n\t\n\t//draw grid lines\n\tfor(float i = 0.0; i < 2.0; i += PATTERN) {\n               \n        float x = mod(i, PATTERN * 2.0); //even or naw? I want to offset negatively or positively based on this, so I get symmetry.\n        \n        if (doubleLine) { //some of these grid lines have pairs, but only a few don't need a pair, so I'll use my argument to draw pairs or not.\n            \n            if (x == 0.0) {\n                pixel += 1.0 - step(lineWidth, abs(r.x - i - offset)); //first x line\n                pixel += 1.0 - step(lineWidth, abs(r.y - i + offset)); //first y line\n            } else {\n                pixel += 1.0 - step(lineWidth, abs(r.x - i + offset)); //second x line\n                pixel += 1.0 - step(lineWidth, abs(r.y - i - offset)); //second y line\n            }\n            \n        } else { //make a single x and y line only\n            pixel += 1.0 - step(lineWidth, abs(r.x - i*2.0 - offset)); //first x line\n            pixel += 1.0 - step(lineWidth, abs(r.y - i*2.0 + offset)); //first y line\n        }\n\t}\n\n\treturn pixel;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n \n\tvec2 r = vec2(fragCoord.xy - 0.01*iResolution.xy)/iResolution.y;\n\n    //define my color palette, initially I had a method to calculate the colors, but ultimately performed the calculations inline due to optimization - suggested by a friend.\n    vec4 lightred = vec4(198.0/255.0, 23.0/255.0, 36.0/255.0, 0.5);\n    vec4 darkRed = vec4(120.0/255.0, 12.0/255.0, 46.0/255.0, 1.0); \n    vec4 yellow = vec4(185.0/255.0, 166.0/255.0, 59.0/255.0, 1.0);\n    vec4 white = vec4(242.0/255.0, 242.0/255.0, 203.0/255.0, 0.1);\n    vec4 blue = vec4(5.0/255.0, 77.0/255.0, 175.0/255.0, 0.1); \n    vec4 purp = vec4(42.0/255.0, 1.0/255.0, 56.0/255.0, 0.1); \n\n    vec4 pixel = lightred; //background color\n    \n    //adding my lines to the output\n\tpixel = mix(pixel, darkRed, coordinateGrid(r, 0.15, 0.0, true)); //paired line\n    pixel = mix(pixel, white, coordinateGrid(r, 0.01, 0.005, true)); //paired line\n    pixel = mix(pixel, white, coordinateGrid(r, 0.01, -0.35, false)); //paired line\n    pixel = mix(pixel, purp, coordinateGrid(r, 0.01, -0.4, false)); //single line\n    pixel = mix(pixel, purp, coordinateGrid(r, 0.01, -0.3, false)); //single line\n    pixel = mix(pixel, blue, coordinateGrid(r, 0.02, 0.15, true)); //paired line\n    pixel = mix(pixel, yellow, coordinateGrid(r, 0.01, 0.05, true)); //paired line\n\n    //add some stripes for texture\n    float stripe = fract( dot(r, vec2(FREQUENCY,TILT))); //This adds a line based on the dot product between the current pixel and my defined frequency, and returns the decimal value with fract. This means is increments every time, creating a stripe.\n    pixel = mix(pixel, lightred, stripe);\n\t\n\tfragColor = pixel; //return\n   \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XljyDd","date":"1510645384","viewed":396,"name":"Tartan Plaid","username":"alecksia","description":"Tartan plaid. Based on the theme \"warm.\" First shader.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["grid","lines","cloth","plaid","tartan"],"hasliked":0,"parentid":"","parentname":""}}