{"ver":"0.1","info":{"id":"DdGGRw","date":"1678287532","viewed":161,"name":"Starsplodey","username":"Xibanya","description":"the violently expanding ripples were discovered by mistake while trying to do something else, but I decided to try to make something pleasing out of it","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["2d","ripples","sdf","stars","orbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define RADIUS 0.15\n#define TOTAL 100\n#define VIOLET vec3(.6,.6,.9)\n#define BLUE vec3(0.1, 0.1, 0.8)\n#define CORAL vec3(.9,.6,.6)\n#define YELLOW vec3(0.9, 0.8, 0.4)\n#define BACKGROUND vec3(0.)\n\n//https://www.shadertoy.com/view/4djSRW\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n// sdf functions by iq\n// https://iquilezles.org/articles/distfunctions/\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\nvec2 positions[TOTAL];\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 uv = fragCoord.xy / iResolution.xy; \n    uv -= 0.5; \n    uv.y *= iResolution.y / iResolution.x;\n    uv *= 2.;\n\n    vec3 bg = mix(vec3(0.1), BACKGROUND, smoothstep(0.1, 0.9, length(uv)));\n\n    vec3 color = bg;\n    \n    float final = 0.;\n    vec2 center = uv;\n    for (int i = 0; i < TOTAL; i++) \n    {\n        if (iFrame <= 0)\n        {\n            positions[i] = uv;\n        }\n        float period = PI * 1.25 + float(i);\n        float t = mod(iTime + float(i) / float(TOTAL), period);\n        float progress = clamp(t / period, 0., 1.);\n\n        vec4 inHash = vec4(vec2(i), float(i + TOTAL), float(i + TOTAL * 2));\n        vec4 outHash = hash44(inHash);\n        float r = outHash.x * RADIUS + (RADIUS * outHash.y) + progress * 0.5;\n        float angle = outHash.z * period + PI * .1 + progress;\n        float speed = (outHash.w + progress * 0.1) * 2. - 1.;\n       \n        angle += speed * t; \n      \n        vec2 angleOffset = r * vec2(cos(angle), sin(angle));\n        vec2 pos = uv - angleOffset;\n\n        vec2 dir = normalize(pos - positions[i]);\n        vec2 next = pos + dir * angle;\n      \n        vec3 c = vec3(1.);\n      \n        float alpha = clamp(\n            smoothstep(0.05, 0.25, progress) - smoothstep(0.75, 0.95, progress),\n            0., 1.);\n\n        float sdf = 1.; \n        float thresh = 0.;\n        float modulo = mod(outHash.x * 10., 2.);\n        if (modulo < 1.75)\n        {\n            if (modulo < 1.) pos *= next / outHash.y;\n            else pos += next * 0.1;\n            sdf = sdHexagram(pos, (r * 0.05 * alpha));\n            thresh = 0.075 - r * alpha * 0.1;\n            c = mix(BLUE, VIOLET, alpha) * 2.;\n        }\n        else\n        {\n            next /= t;\n            pos = mod(pos, next * float(i + 1) * r);\n            sdf = sdStar5(pos, (r * 0.1 * alpha), r * 1.) * alpha;\n            sdf -= 0.01 * alpha;\n            thresh = 0.001 + r * 0.05;\n            c = pow(mix(CORAL, YELLOW, progress), vec3(2.)) * 2.;\n        }\n        positions[i] = pos;\n        float blend = smoothstep(0., thresh, -sdf);\n        color = mix(color.rgb, c, blend);\n        final = max(final, blend);\n    }\n    fragColor.rgb = mix(bg, color, final);\n    fragColor.a = 1.;\n}","name":"Image","description":"","type":"image"}]}