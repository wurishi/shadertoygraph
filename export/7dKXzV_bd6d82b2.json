{"ver":"0.1","info":{"id":"7dKXzV","date":"1634962154","viewed":74,"name":"spirograph rosette","username":"pwf","description":"tried to implement stuff from https://www.youtube.com/watch?v=n-e9C8g5x68","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spirograph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Radius of the first circle, scales the whole image.\nfloat R = 40.;\n// Ratio of the radius of the first circle to the second\nfloat k = 1.;\n// Ratio of the radius of the first circle to the third\nfloat k2 = 2.01;\n// Distance to the drawing point\nfloat h = 1.;\n// Ratio of the paths\nfloat p = 0.5;\n\nfloat coolX(float R, float r, float r2, float h, float p, float t) {\n    return (R + r) * cos(t) \n            + (r + r2) * cos(t + (R*t)/r - R*t/(p*r))\n            + h * cos(t + R*t/r - R*t/(p*r) - R*t/(p*r2));\n}\n\nfloat coolY(float R, float r, float r2, float h, float p, float t) {\n    return (R + r) * sin(t)\n            + (r + r2) * sin(t + (R*t)/r - R*t/(p*r))\n            + h * sin(t + R*t/r - R*t/(p*r) - R*t/(p*r2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // x = (R + r) * np.cos(t) \n    //   + (r + r2) * np.cos(t + (R*t)/r - R*t/(p*r))\n    //   + h * np.cos(t + R*t/r - R*t/(p*r) - R*t/(p*r2))\n    // y = (R + r) * np.sin(t)\n    //   + (r + r2) * np.sin(t + (R*t)/r - R*t/(p*r))\n    //   + h * np.sin(t + R*t/r - R*t/(p*r) - R*t/(p*r2))\n    \n    \n    //vec2 muv = (iMouse.xy/iResolution.xy - .5) * 2.;\n    \n    h = sin((iTime+100.)/50.)*2.;\n    p = cos((iTime+100.)/100.)*2.;\n    \n    \n    float r = R/k;\n    float r2 = R/k2;\n    \n    //float t = iTime;\n    \n    // Normalized pixel coordinates (from -1.0 to 1.0)\n    vec2 uv = (fragCoord/iResolution.xy - .5) * 2. * 300.;\n    \n    // Initialize the Color\n    vec3 color  = vec3(0.0);\n    // Initialize the Coordinates\n    //vec2 coord = fragCoord;\n\n    float num_points = 300.;\n    for (float t = 0.0; t < num_points; t+=.1) {\n        vec2 xy = vec2(\n            coolX(R, r, r2, h, p, t),\n            coolY(R, r, r2, h, p, t)\n        );\n           \n        float dist = distance(uv, xy);\n        //fragColor = vec4(float(dist<.5));\n        fragColor += vec4(mix(1.0, 0.0, smoothstep(0.1, 1., dist)));\n    }\n\n    //fragColor = vec4(vec3(dist<1.), 1.);\n}","name":"Image","description":"","type":"image"}]}