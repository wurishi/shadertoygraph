{"ver":"0.1","info":{"id":"stXfD2","date":"1651534726","viewed":177,"name":"Exponential interpolation","username":"fermion","description":"Interpolation of an exponential function with curvature determined by the mouse x-position.\n\nPlay with the function here:\n[url]https://www.desmos.com/calculator/b9z3gtxma2[/url]","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["math","function","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// parameters\nfloat start = 0.9;\nfloat end = 0.1;\n\nfloat lineWidth = .015;\nfloat antiAliasing = 0.002;\nfloat glowWidth = .25;\n\n// colors\nvec3 aboveGradientTop    = vec3(0.15, 0.1, 0.5);\nvec3 aboveGradientBottom = vec3(0.0 , 0.0, 0.15);\nvec3 belowGradientTop    = vec3(0.1 , 0.2, 0.7);\nvec3 belowGradientBottom = vec3(0.3 , 0.6, 0.9);\n\nvec3 lineColor = vec3(0.6, 0.8, 1.0);\nvec3 glowColor = vec3(0.1, 0.1, 0.25);\n\nfloat exponentialFunction(float x, float yStart, float yEnd, float k) {\n    \n    float expOfK = exp(k);\n    float expOfKX = exp(k * x);\n    float normalization = expOfK - 1.0;\n\n    return (1.0f / normalization) * (yEnd * (expOfKX - 1.0) - (yStart * (expOfKX - expOfK)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    float curvature = 32.0f * ((iMouse.x / iResolution.x) - 0.5f);\n    \n    vec3 aboveColor = mix(aboveGradientBottom, aboveGradientTop, uv.y);\n    vec3 belowColor = mix(belowGradientBottom, belowGradientTop, uv.y);\n\n    // y value of exponential curve\n    float y;\n    if (abs(curvature) < 0.0001) // prevent division by zero\n        y = mix(start, end, uv.x); // 0 curvatuve is just a line\n    else\n        y = exponentialFunction(uv.x, start, end, curvature);\n        \n    float verticalDistance = uv.y - y;\n    float derivativeOfVerticalDistance = fwidth(verticalDistance) * iResolution.y;\n\n    // Output to screen\n    vec3 backgroundColor = (verticalDistance < 0.0) ? belowColor : aboveColor;\n    \n    float line = abs(verticalDistance) - 0.5 * lineWidth * derivativeOfVerticalDistance;\n    line = smoothstep(antiAliasing, -antiAliasing, line);\n    \n    float glow = abs(verticalDistance) - 0.5 * glowWidth * derivativeOfVerticalDistance;\n    glow = smoothstep(glowWidth, -glowWidth, glow);\n    \n    fragColor.rgb = mix(backgroundColor, lineColor, line);\n    fragColor.rgb += glow * glowColor;\n}","name":"Image","description":"","type":"image"}]}