{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"/*\n  2012 by Felix Weiszig\n*/\n\n#define NUM_BLOBS     120\n#define BLOB_SIZE_INV 8.0\n\nfloat samplev (vec2 normFragPos, float aspect)\n{\n  float valueAll = 0.0;\n  for (int i=0; i!=NUM_BLOBS; ++i)\n  {\n    // create a particle\n    vec3 particlePos;\n    particlePos.x = sin(sin(iTime*0.05 + float(i*i)))\n                  * 0.5 + 0.5;\n\n    particlePos.y = cos(iTime*0.016 + float(i)*0.1)\n                    * 0.5 + 0.5;\n\n    // calculate its influence\n    float normDist = length(normFragPos/vec2(1.0, aspect)-particlePos.xy);\n    normDist = 1.0 - normDist*BLOB_SIZE_INV;\n    normDist *= normDist*normDist*(0.5 - abs(0.5 - particlePos.y));\n    valueAll += max(0.0, normDist);\n  }\n\t\n  return valueAll;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float aspect      = iResolution.x/iResolution.y;\n  vec2  normFragPos = fragCoord.xy / iResolution.xy;\n\t\n  float pixelStepX  = 1.0/iResolution.x;\n  float pixelStepY  = 1.0/iResolution.y;\n\t\n\t\n  float sampleXL = samplev(normFragPos + vec2(-pixelStepX, 0.0), aspect);\n  float sampleXR = samplev(normFragPos + vec2( pixelStepX, 0.0), aspect);\n\t\n  float diffX = sampleXL - sampleXR;\n\t\n  float sampleYB = samplev(normFragPos + vec2( 0.0, -pixelStepY), aspect);\n  float sampleYU = samplev(normFragPos + vec2( 0.0, pixelStepY), aspect);\n\t\n  float diffY = sampleYB - sampleYU;\n\t\n  vec3 gradien = vec3(diffX*5.0, diffY*5.0, 0.125);\n  gradien = normalize(gradien);\n\n\n  float sampleCenter = samplev(normFragPos, aspect);\n\t\n\t\n  // lighting\n  vec3 lightPos = vec3(1.0, 1.5, 2.5);\n  vec3 lightDir = normalize(lightPos - vec3(normFragPos, 0.0));\n\t\n  // diffuse\n  float nDotL   = max(0.0, dot(gradien, lightDir));\n  float diffuse = nDotL;\n\t\n  // specular\n  vec3  reflectionDir  = normalize( ( ( 2.0 * gradien ) * nDotL ) - lightDir );\n  vec3  viewDir        = normalize((vec3(normFragPos, 1.2)));\n  float reflectDotView = max( 0.0, dot( reflectionDir,  viewDir) );\n  float specular = max(0.0, pow(reflectDotView, 15.0));\n\t\n  float value = samplev(normFragPos, aspect);\n\n  //fragColor = vec4(gradien,1.0);\n  fragColor = texture(iChannel0,\n\t\t\t\t\t\t   vec2(sampleCenter, 0.495)) * diffuse + specular;\n  //fragColor = vec4(diffuse,diffuse,diffuse,1.0);\n  //fragColor = vec4(specular,specular,specular,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sX3zH","date":"1362179450","viewed":1545,"name":"Blobs'n Goo","username":"otacocato","description":"Blobs, inspired by this demo: http://vimeo.com/44202159","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["blobs","texture"],"hasliked":0,"parentid":"","parentname":""}}