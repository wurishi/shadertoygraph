{"ver":"0.1","info":{"id":"clcyzM","date":"1698977862","viewed":39,"name":"My Simple Pulsating Fractal #1","username":"potNick616","description":"experiments with fractal stuff or something, mouse x is iterations, mouse y is coordinates multiplier, angle changes with time","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fFractalIterations; //fractal parameter 2, range 1 to 128, classic is 32\nfloat fCoordMultiplier; // fractal parameter 3, range 1.0 to 1.5, classic is 1.3\nfloat fCoordPreMulti; // fractal parameter 4, classic is 2.0\nfloat fRotCenter; // fractal parameter 5, classic is -1.0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfFractalIterations = 32.0;\nfCoordMultiplier = 1.2;\nfCoordPreMulti = 1.5; //v2 =  1.0\nfRotCenter = -1.5; //v2 = -1.5\nfloat fRotAngle = sin(iTime * 10.0) * 0.1 + 1.0; //fractal parameter 1\n    vec2 normalizedCoord = fragCoord / iResolution.xy * fCoordPreMulti + fRotCenter;\n    // coordinates from center, range -1 to 1,\n    // set floats to 2.0 and -1.0 for classic\n    //start of fractal loop\n    for (float i = 0.0; i < fFractalIterations; i += 1.0)\n    {\n    normalizedCoord = abs(normalizedCoord) - 0.5;\n    //makes 4\n    normalizedCoord *= fCoordMultiplier;\n    normalizedCoord *= mat2(cos(fRotAngle), -sin(fRotAngle),\nsin(fRotAngle), cos(fRotAngle)); // rotation\n    }//end of fractal loop\n    fragColor = vec4(\n    length(normalizedCoord + vec2(0.2, -0.5)), //RED \n    length(normalizedCoord + vec2(0.0, -0.0)), //GREEN\n    length(normalizedCoord + vec2(0.0, -0.0)), //BLUE\n    1.0); //ALPHA\n}","name":"Image","description":"","type":"image"}]}