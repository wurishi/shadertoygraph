{"ver":"0.1","info":{"id":"cslfDf","date":"1689665429","viewed":30,"name":"learning-spiral(moving)","username":"bazylevnik0","description":"https://en.wikipedia.org/wiki/Archimedean_spiral","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["patterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float p = 3.14159265359;    // pi constant\n \nfloat n_atan(float y, float x) {\n  if(y<0.0){\n      return  p+atan(y,x);\n  } else return atan(y,x);\n} //for idea of norm_atan function thx to Bard\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  // Normalized pixel coordinates (from -1 to 1)\n  vec2 uv = (fragCoord/iResolution.xy-0.5)*2.0;\n    \n  // Calc\n  float a = 0.0;        // center point\n  float b = 0.025;      // distance between loops\n  float t = iTime;      // time\n  float r = a+b*t;      // radius formula\n  float l = length(uv); // length of point  \n  float d = 0.001;      // delta koef\n  \n  // Draw blue\n  float blue;\n  if(abs(l)<r) blue=0.2;\n  // Draw green and red\n  float red,green;\n  if(l<r+d&&l>r-d){\n    float a_c = mod(t,p);          //angle of time\n    float a_p = n_atan(uv.y,uv.x); //angle of point\n    // If near to drawing angle draw(delta koef)\n    if(a_p>a_c-d*10.0&&a_p<a_c+d*10.0)green=1.0;\n    if(a_p<a_c+d)red=1.0;\n  }  \n  \n    \n  // Output to screen\n  fragColor = vec4(red,green,blue,1.0);\n}","name":"Image","description":"","type":"image"}]}