{"ver":"0.1","info":{"id":"DtVSRc","date":"1686253808","viewed":66,"name":"Kay Lie Da Scope","username":"kydenwilson","description":"My first ever shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circles","firstshader","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colorPallete( float t )\n{\n    vec3 a = vec3(-0.382, 0.968, 0.368);\n    vec3 b = vec3(-0.222, 1.258, -0.812);\n    vec3 c = vec3(2.398, 1.678, 2.758);\n    vec3 d = vec3(-0.092, 0.228, -0.312);\n\n    return a + b* cos(6.28318*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 -iResolution.xy)/iResolution.y;\n\n    //Creates a spining \"center\" coordinate\n    float spinRadius = 0.5;    \n    vec2 center = vec2(sin(iTime/1.33),cos(iTime/1.33));\n    center = center * spinRadius;\n    vec2 relativeUV = uv - center;\n    vec2 rotatingCenter = relativeUV;\n\n    //Skew the center\n    float vertChangeRate = 4.0;\n    float horzChangeRate = 4.0;\n    float vertDoubleChangeRate = 3.5;\n    float horzDoubleChangeRate = 3.0;\n    float vertConst = 0.5;\n    float horzConst = 0.5;\n\n    float vertSkew = sin(iTime/vertChangeRate) * cos(iTime/vertDoubleChangeRate)*vertConst;\n    float horzSkew = cos(iTime/horzChangeRate) * sin(iTime/horzDoubleChangeRate)*horzConst;\n    relativeUV.x += sin(uv.x)*horzSkew;\n    relativeUV.y += sin(uv.y)*vertSkew;\n\n\n    //Creates a circle that expands and shrinks centered on the spinning \"center\" coordinate\n    //Adjustable Values\n    float circleWidth = 0.045;    \n    float circleRadiusChangeRate = 0.5;\n    float circleRepeatDistance = 1.0;\n    float circleRepitition = 10.0;\n    float circleChangeRate = 0.02;\n    float circleReboundRate = 5.0;\n    \n    //Calculations\n    float circleRadius = abs(sin(iTime * circleRadiusChangeRate)) - circleWidth; \n    \n    vec3 finalColor = vec3(0.0);\n\n    for(float i = 0.0; i < abs(sin(iTime))*6.0 + 1.0; i++)\n    {        \n        //Create repeating fractals    \n        relativeUV = fract(relativeUV * 1.75) - 0.5;\n   \n        float distance = sqrt((relativeUV.x*relativeUV.x)+(relativeUV.y*relativeUV.y));\n        float circleDistance = sin(distance*circleRepitition + (iTime*sin(iTime/circleReboundRate)*circleChangeRate));\n        circleDistance -= circleRadius*1.25;\n        circleDistance = abs(circleDistance);\n        circleDistance *= exp(-distance);\n        \n        //ColorAssignment\n        vec3 col = colorPallete(cos(length(rotatingCenter)) + sin(circleDistance) + iTime*0.5);\n\n        float colorIntensity = pow(0.01/circleDistance/ (i+1.0), 1.2);\n        finalColor += col * colorIntensity * ((1.0/abs(length(rotatingCenter))*0.5));\n    }    \n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}