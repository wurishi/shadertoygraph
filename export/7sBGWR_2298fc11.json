{"ver":"0.1","info":{"id":"7sBGWR","date":"1617212618","viewed":771,"name":"CRT TV distortion effect","username":"astaund","description":"I made this during class so now I'm missing a lot of work.\nAlso, this is heavily inspired by Gaming Reverends' tunnel distortion video, but all I did is invert some math.\nIf you want to nab the code then feel free to do so","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration","distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Basic uv coords\n    vec2 uv     = fragCoord/iResolution.xy;\n    \n    // Calculate CRT TV distortion effect\n    vec2 dist   = .5 - uv;\n    \n    float strength  = 1.0; // Strength of the CRT TV effect\n    vec2 new;\n    new.x       = (uv.x - dist.y * dist.y * dist.x * strength/(iResolution.x/iResolution.y));\n    new.y       = (uv.y - dist.x * dist.x * dist.y * strength);\n    \n    // Chromatic aberration\n    vec2 chrom;\n    chrom       = vec2(mod(abs(sin(iTime)*2.0), 0.01), 0.0); // Strength of the color shift\n    \n    vec3 col;\n    col.r       = texture(iChannel0, vec2(new.x+chrom.x, new.y)).r;\n    col.g       = texture(iChannel0, vec2(new.x, new.y)).g;\n    col.b       = texture(iChannel0, vec2(new.x-chrom.x, new.y)).b;\n    \n    col         = ((new.x >= 0.0) && (new.x <= 1.0)) && ((new.y >= 0.0) && (new.y <= 1.0)) ? col : vec3(0.0);\n    \n    // Output to screen\n    fragColor   = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}