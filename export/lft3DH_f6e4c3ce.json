{"ver":"0.1","info":{"id":"lft3DH","date":"1711655149","viewed":94,"name":"K4RB1NE WebApp BG","username":"nextrix","description":"opengl bg for k4rb1ne site\n[school project]","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["reactive","audio","webapp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat luma(vec3 color) {\n\treturn dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat bayer( int iter, vec2 rc )\n{\n\tfloat sum = 0.0;\n\tfor( int i=0; i<1; ++i )\n\t{\n\t\tif ( i >= iter ) break;\n\t\tvec2 bsize = vec2(pow(2.0, float(i+1)));\n\t\tvec2 t = mod(rc, bsize) / bsize;\n\t\tint idx = int(dot(floor(t*2.0), vec2(2.0,1.0)));\n\t\tfloat b = 0.0;\n\t\tif ( idx == 0 ) { b = 0.0; } else if ( idx==1 ) { b = 2.0; } else if ( idx==2 ) { b = 3.0; } else { b = 1.0; }\n\t\tsum += b * pow(4.0, float(iter-i-1));\n\t}\n\tfloat phi = pow(4.0, float(iter))+1.0;\n\treturn (sum+1.0) / phi;\n}\n\n\nmat2 r2d (float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat hash2D(vec2 x) {\n\treturn fract(sin(dot(x, vec2(13.454, 7.405)))*12.3043);\n}\n\nfloat voronoi2D(vec2 uv) {\n    vec2 fl = floor(uv);\n    vec2 fr = fract(uv);\n    float res = 1.0;\n    for( int j=-1; j<=1; j++ ) {\n        for( int i=-1; i<=1; i++ ) {\n            vec2 p = vec2(i, j);\n            float h = hash2D(fl+p);\n            vec2 vp = p-fr+h;\n            float d = dot(vp, vp);\n            \n            res +=1.0/pow(d, 8.0);\n        }\n    }\n    return pow( 1.0/res, 1.0/16.0 );\n}\n\nvec3 fire(in vec2 uv)\n{\n\tfloat FAlpha = 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;  // fix stretching\n    \n    /*if(uv.y > 1.1){ // flip\n    \tuv.y = 0.5 - (uv.y - 0.5);\n    }*/\n    \n    float up0 = voronoi2D(uv * vec2(6.0, 4.0) + vec2(0,-iTime * 2.0)  );\n\tfloat up1 = 0.5 + voronoi2D(uv * vec2(6.0, 4.0) + vec2(42,-iTime * 2.0) + 30.0 );\n\tfloat finalMask = up0 * up1 + (1.0-uv.y);\n    \n    finalMask *= abs(uv.y - 0.5) + 1.0; // when using log (vibrant)\n    //finalMask *= abs(uv.y - 0.5) + 0.35; // when using cos (cleaner / controlable)\n\n    vec3 fire = vec3(0.0);\n    \n    float iter = 12.0; // iterations\n    \n    vec3 color = vec3(0.502,0.624,1.000) * 0.04; // color\n    \n    for (float i = 0.0; i<floor(iter); i++) {\n        vec3 color = vec3(clamp(i*color.r , 0., 1.), clamp(i*color.g, 0., 1.), clamp(i*color.b, 0., 1.));\n        //fire += vec3(iter * 0.2) * color * step(cos(i * 0.75),finalMask); // cleaner / controlable (linear -> exponential)\n        fire += vec3(iter * 0.2) * color * step(log(i * 0.75),finalMask); // vibrant (exponential)\n    }\n    \n\treturn vec3(fire * FAlpha);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 uv = ((I.xy / iResolution.xy) - 0.5) * 2.;\n    vec2 uvFire = (I.xy / iResolution.xy) - 0.5;\n    \n    float bass[2];\n    bass[1] = texture( iChannel0, vec2( 0.01, 0.25 ) ).x; // bass\n    bass[0] = texture( iChannel0, vec2( 0.77, 0.25 ) ).x; // hit\n    \n    uv.xy *= 0.5;//-bass[1]*0.05;\n    //uv.xy *= r2d(iTime*2.);\n    uvFire.xy *= 0.75;//-bass[1]*0.15;\n    \n    uvFire.y += (cos(iTime*0.5) * 0.2 ) + 0.5;\n    uv += 0.5;\n    \n    uvFire.x += -iMouse.x/iResolution.x * 0.075;\n    uvFire.y += -iMouse.y/iResolution.y * 0.1;\n    \n    float dither_amount = 0.5; // https://www.shadertoy.com/view/3lSyzG\n\tfloat thresh = bayer(1, uv * (iResolution.xy * dither_amount) );\n\n    vec3 col = vec3(0.,0.,0.);\n    \n    col *= step(thresh, luma(col));\n    \n    col = fire(uvFire.xy);\n    \n    O = vec4((col*0.3) * pow(thresh, 1.), 1.); //    0.5+bass[0]*8.\n}","name":"Image","description":"","type":"image"}]}