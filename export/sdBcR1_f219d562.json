{"ver":"0.1","info":{"id":"sdBcR1","date":"1643079799","viewed":207,"name":"binary tree SDF","username":"jt","description":"Binary Tree SDF (exact euclidean).","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["binary","sdf","tree","distance","euclidean","loopless","exact"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/sdBcR1 binary tree SDF 2022-01-25 by jt\n\n// tags: binary, sdf, tree, distance, euclidean, loopless, exact\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n/*\nfloat binarytree( vec2 v ) // modification suggested by iq\n{\n    if( v.y<0.0) return -v.y;\n    float s = exp2(ceil(-log2(v.y)));\n    v.x = 0.25 + 0.25*v.x;\n    vec2 w = fract(v*s);\n    return (s - (1.0+w.y)/v.y + abs(4.0*abs(w.x-0.5)+w.y-1.0))/(s*sqrt(2.0));\n}\n*/\nfloat binarytree(vec2 v)\n{\n    v *= vec2(0.5, 1.0);\n    v.x += 0.5;\n    float s = exp2(ceil(-log2(v.y)));\n    vec2 w = v * s;\n    w.x *= .5;\n    w = fract(w);\n    return (v.y < 0.0) ? -v.y : (1.0 - 1.0/s *  ((1. + w.y) / v.y - abs(4. * abs(w.x -.5) - (1. - w.y)))) / sqrt(2.0);\n}\n\n/*\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) // by iq\n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nfloat sdBox( in vec2 p ) // by iq\n{\n    vec2 d = abs(p)-1.0;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n*/\n\n#ifdef DETECT_SDF_ERRORS\n#define EPSILON 0.001\n// part of sdf error detection (jt/spalmer)\nvec2 gradient(vec2 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec2(binarytree(p+h.xy) - binarytree(p-h.xy),\n                 binarytree(p+h.yx) - binarytree(p-h.yx)))/EPSILON/2.0;\n}\n#define pi 3.1415926\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    float d;\n\td = binarytree(p);\n    //d = sdRhombus(p, vec2(1)); // compare sdf scale\n    //d = sdBox(p); // compare sdf scale\n    \n\t// coloring by iq\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    // iq's mouse distance visualization\n    if( iMouse.z>0.001 )\n    {\n        d = binarytree(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n#ifdef DETECT_SDF_ERRORS\n    // sdf error detection (jt/spalmer) see https://www.shadertoy.com/view/DdX3WH Interior Distance Detect Errors\n    {\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the minimal distance to the surface,\n        // the result should be (close to) zero. (translation from math to words: jt)\n        float error = binarytree(p - gradient(p) * binarytree(p)); // SDF error detection suggested to me by spalmer - thanks!\n        //col += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.r += smoothstep(0.0,/*sqrt*/(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n    }\n#endif\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}