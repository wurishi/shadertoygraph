{"ver":"0.1","info":{"id":"dsfSWH","date":"1668886111","viewed":318,"name":"Floyd–Steinberg dithering","username":"Rutvik_Tak","description":"Trying out recreation of Floyd–Steinberg dithering in GLSL\n","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["grayscale","imagefilter","image","pixelation"],"hasliked":0,"parentid":"csfXDn","parentname":"GMTK Elden Ring Cards Inspired"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv=fragCoord/iResolution.xy;\n    \n    // Output to screen\n    \n    vec4 mycolor=vec4(uv.xyx,1.);\n    \n    //vec4 color = texture( iChannel0, uv.xy );\n    \n    vec4 bitRateColor=vec4(sin(mycolor.x*700.)*.3,cos(mycolor.y*700.)*.3,1.,1.);\n    vec2 res=iResolution.xy/3.;\n    vec2 pos=floor(uv*res)/res;\n    //if(max(abs(pos.x-.5),abs(pos.y-.5))>.5){\n   //     fragColor=vec4(0.);\n  //  }\n    \n    vec4 imagePixel=texture(iChannel0,pos.xy);\n    float factor = 1.0;\n    \n    //vec4 imagetopixelcolor=vec4(bitRateColor.xy,imagePixel.x,imagePixel.x);\n    \n   // float grayScaleValue=(imagetopixelcolor.x+imagetopixelcolor.y+imagetopixelcolor.z)/3.;\n    float newR = round(factor*imagePixel.r)*1./factor;\n    float newG = round(factor*imagePixel.g)*1./factor;\n    float newB = round(factor*imagePixel.b)*1./factor;//step(0.5,imagePixel.b);\n    \n    float errR = imagePixel.r - newR;\n    float errG = imagePixel.g - newG;\n    float errB = imagePixel.b - newB;\n    \n    \n    \n   // pixels[x + 1][y    ] := pixels[x + 1][y    ] + quant_error × 7 / 16\n  //  pixels[x - 1][y + 1] := pixels[x - 1][y + 1] + quant_error × 3 / 16\n  //  pixels[x    ][y + 1] := pixels[x    ][y + 1] + quant_error × 5 / 16\n  //  pixels[x + 1][y + 1] := pixels[x + 1][y + 1] + quant_error × 1 / 16\n\n\n    \n    vec3 filteredColor = vec3(errR,errG,errB);\n        fragColor=vec4(filteredColor,1.);\n    \n}","name":"Image","description":"","type":"image"}]}