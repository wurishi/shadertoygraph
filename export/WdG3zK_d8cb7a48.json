{"ver":"0.1","info":{"id":"WdG3zK","date":"1570523320","viewed":135,"name":"Squiggly pentagons","username":"matthen","description":"each line is a noisy copy of the last","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nfloat contour(float x, float thickness) {\n    // function is 0 except between x = 0 and 2 * thickness, where it smoothly\n    // peaks at 1.\n    // Useful for drawing contours.\n    return (\n        x < thickness\n    ) ? smoothstep(0., thickness, x) :\n        smoothstep(2. * thickness, thickness, x);\n}\n\nfloat rand(float x, float y) {\n    // Generate a psuedo-random number from two inputs.\n    return fract(\n        103.2 * sin(5102.2 * x + 983.87 * y + 23.1) * (7. * x + 923.2*y));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\tvec3 outputRGB;\n    \n    // convert to polar.\n    uv = vec2(\n        atan(uv.x, uv.y),\n        sqrt(uv.x * uv.x + uv.y * uv.y)\n    );\n    // spiral\n    uv.x += 0.2 * uv.y;\n   \n    \n    // Add distortion to the coordinates.\n    float noise = 0.0;\n    for (float i = 1.; i <= 64.; i += 4.) {\n        float amp = 1. / (1. + 0.01 * i);\n        noise += amp * sin(\n            iTime\n            + 2. * i * (uv.x + PI * rand(i, 1.0) + .5 * clamp(uv.y, 0., .5)));\n    }\n    for (float i = 1.; i <= 64.; i += 4.) {\n        float amp = 1. / (1. + 0.01 * i);\n        noise += amp * sin(\n            -2.5 * iTime\n            + 2. * i * (uv.x + PI * rand(i, 2.0) - .5 * clamp(uv.y, 0., .5)));\n    }\n    uv += mix(0., 0.0025 * noise, clamp(uv.y - 0.1, 0., 1.));\n    \n    // Modulo the angle to create polygons.\n    float nSides = 5.;\n    uv.x = mod(uv.x, 2. * PI / nSides) - PI / nSides;\n    \n    uv.y *= cos(uv.x);\n \n    \n    outputRGB += contour(fract(0.5 + 45. * uv.y), 50. / iResolution.y);\n    \n    \n    if (uv.y < 0.1) {\n        outputRGB *= 0.;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(1. - outputRGB, 1.0);\n}","name":"Image","description":"","type":"image"}]}