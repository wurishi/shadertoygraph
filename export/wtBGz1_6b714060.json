{"ver":"0.1","info":{"id":"wtBGz1","date":"1558455470","viewed":258,"name":"Gas clouds","username":"skythedragon","description":"A simple gas cloud testing ground","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","clouds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int STEPS = 64;\nconst float STEP_SIZE = 1.0;\nconst float STEP_INCREMENT = 1.0;\n\n\n// noise and random\n// =============================================================================================================================\n\n// random float\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n// these hash functions are by dave hoskins\n\n// random vector\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n// noise\n// =============================================================================================================================\n\n// by iq, https://www.shadertoy.com/view/4sfGzS\n\nfloat fnoise(vec3 x) {\n\n\tvec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash13(p+vec3(0,0,0)), \n                        hash13(p+vec3(1,0,0)),f.x),\n                   mix( hash13(p+vec3(0,1,0)), \n                        hash13(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash13(p+vec3(0,0,1)), \n                        hash13(p+vec3(1,0,1)),f.x),\n                   mix( hash13(p+vec3(0,1,1)), \n                        hash13(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nvec3 vnoise(vec3 x) {\n\n\tvec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash33(p+vec3(0,0,0)), \n                        hash33(p+vec3(1,0,0)),f.x),\n                   mix( hash33(p+vec3(0,1,0)), \n                        hash33(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash33(p+vec3(0,0,1)), \n                        hash33(p+vec3(1,0,1)),f.x),\n                   mix( hash33(p+vec3(0,1,1)), \n                        hash33(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Raymarching\n// =============================================================================================================================\n\n// get the color at the current position\nvec3 get_color(vec3 pos) {\n\t// gas cloud color\n    float n = fnoise(pos/1000.0);\n   \treturn (fnoise(pos/10.0) * vnoise(pos/50.0) ) * cos(n*10.0) * sin(n*10.0) * 2.0;\n}\n\nvec3 march(vec3 eye, vec3 dir) {\n\tvec3 pos = eye;\n    vec3 col = vec3(0.0);\n    float step_size = STEP_SIZE;\n    float step_contribution = 1.0/float(STEPS);\n    // loop\n    for (int i = 0; i < STEPS; ++i) {\n        // increment the position\n        pos += dir*step_size;\n        // decrease the step contribution\n        step_size *= STEP_INCREMENT;\n        // step_contribution /= STEP_INCREMENT;\n        // get the color\n    \tcol += get_color(pos)*step_contribution;\n    }\n    return col;\n}\n\n// ray direction\nvec3 ray_dir(vec2 size, vec2 pos) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( radians(22.5) );\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\n\t\n\treturn normalize( vec3( xy, -z ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // default ray dir\n\tvec3 dir = ray_dir(iResolution.xy, fragCoord.xy );\n\t\n\t// default ray origin\n\tvec3 eye = vec3(100.0, 100.0, -iTime*8.0 - 100.0);\n    \n    // get the color\n    vec3 col = march(eye, dir);\n\n    // Output to screen\n    fragColor = vec4(col, 0.1);\n}","name":"Image","description":"","type":"image"}]}