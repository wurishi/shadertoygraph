{"ver":"0.1","info":{"id":"Ndsyzj","date":"1642371979","viewed":93,"name":"Random spreading","username":"strojac","description":"Randomly spreads, based on my sketch: https://editor.p5js.org/jackstrosahl/sketches/oeClYM84t\n\nMay need to restart a few times.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["spreading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 state = texture(iChannel0, uv);\n    // Output to screen\n    fragColor = vec4(1.-state.x);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 getState(vec2 coord) {\n    vec2 uv = coord/iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\nconst uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 state = getState(fragCoord);\n    float midX = floor(iChannelResolution[0].x/2.)+.5;\n    float midY = floor(iChannelResolution[0].y/2.)+.5;\n    if(iFrame == 0 && fragCoord == vec2(midX,midY))\n        fragColor = vec4(1.,0.,0.,0.);\n    if (state.x!=0.)\n        fragColor = vec4(1.,0.,0.,0.);\n    bool enable = false;\n    int ring = iFrame-1;\n    for (int dx=-1;dx<=1;dx++) {\n        for (int dy=-1;dy<=1;dy++) {\n            vec2 neighbor = fragCoord+vec2(dx,dy);\n            // Check bounds\n            if (neighbor.x < 0. || neighbor.x > iChannelResolution[0].x || neighbor.y < 0. || neighbor.y > iChannelResolution[0].y) continue;\n            // Check if in next ring\n            if (int(abs(neighbor.x-midX)) != ring && int(abs(neighbor.y-midY)) != ring) continue;\n            vec4 nstate = getState(neighbor);\n            // Check state\n            if (nstate.x != 1.) continue;\n            // Check random\n            if(!(hash(uvec3(neighbor,iDate.w)).x<.55)) continue;\n            enable = true;\n        }\n        if(enable) break;\n    }\n    if(enable)\n        fragColor = vec4(1.,0.,0.,0.);\n}","name":"Buffer A","description":"","type":"buffer"}]}