{"ver":"0.1","info":{"id":"cdtGDn","date":"1677146618","viewed":127,"name":"Fork Fork Confu sleeplessm 414","username":"sleeplessmonk","description":"added audioreactivity","likes":3,"published":1,"flags":4,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"fltSDl","parentname":"Fork Confusion sleeplessm 225"},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Convert the fragment coordinate to a position in the scene\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y * 0.04;\n\n    // Apply a scaling factor to the position to squash it\n    float dp = dot(uv, uv);\n    uv /= dp;\n\n    // Apply a sine function to the x coordinate to give it some curvature\n    uv.x = sin(uv.x - 11.5);\n\n    // Scale the position down and get the angle in radians\n    uv *= 0.85;\n    float a = atan(uv.y, uv.x);\n\n    // Calculate the time and use it to animate the scene\n    float t = iTime * 0.01;\n    float r2 = max(5.0, abs(sin(t * 0.5)) * 0.5 - length(uv));\n    t += r2 * r2 * cos(r2 + t) + a * 1.0;\n\n    // Rotate the position based on the time and calculate the final color\n    uv *= mat2(cos(t), sin(t), cos(t), cos(t));\n    vec3 col = 0.1 + cos(uv.y * (cos(t) * 1.5 + 1.05) + t) * sin(iTime + uv.yxy);\n\n    // Audio Reactivity\n    vec4 audioData = texture(iChannel1, vec2(iTime * 1.1, 0.5));\n    col *= 1.0 + audioData.r * 10.0;\n    \n    // Kaleidoscope Effect\n    float kaleidoscope = 5.0;\n    uv = abs(mod(uv + kaleidoscope * 0.05, kaleidoscope) - kaleidoscope * 0.5);\n    col *= 0.5 + 0.5 * (1.0 - pow(length(uv), 0.5));\n\n    // Output the final color\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}