{"ver":"0.1","info":{"id":"DsyBzt","date":"1718999587","viewed":106,"name":"Hot Dots","username":"Mojomajor","description":"dots","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["dots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define DEBUG_NO_POSTEFFECT\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define PI2 6.28318530718\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = vec3(0.0);\n    \n#ifdef DEBUG_NO_POSTEFFECT\n    col = texture(iChannel0, uv).rgb;\n#else\n    // Zoom\n    uv = uv * 2.0 - 1.0;\n    uv *= 0.9;\n    uv = (uv + 1.0) * 0.5;\n\n    // Lens distortion\n    vec2 dir = uv - vec2(0.5);\n    uv += dir * dot(dir, dir) * 0.2;\n    \n    float it = sin(iTime*3.);\n    // Chromatic aberration\n    vec2 offset = vec2(1.+it, 1.0) * 0.025*it/2.;\n    offset/=5.;\n    col.r = texture(iChannel0, uv - offset).r;\n    col.g = texture(iChannel0, uv).g;\n    col.b = texture(iChannel0, uv + offset).b;\n    \n    // Vignette\n    vec2 d = abs(uv - vec2(0.5)) * 1.6;\n    \n    d = d*d;\n    float toPow = saturate(1.1 - dot(d, d));\n    col.rgb *= toPow*toPow*toPow;\n#endif\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// step 1. color circles texture animation\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat circle(vec2 p, float r)\n{\n    return step(length(p), r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 5. * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    uv *= 10.;\n    vec2 cells = (floor(uv)*.1)*1.5;\n    uv = fract(uv)-.5;\n    vec3 col = vec3(0.0);\n    \n    float r = random(cells);\n    \n    col = vec3(circle(uv, .5));\n    col *= palette((r*iTime), vec3(.5), vec3(.5), vec3(1.0), vec3(0.0, 0.33, 0.67));\n    col *= fract(r+iTime*.1);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}