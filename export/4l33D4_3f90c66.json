{"ver":"0.1","info":{"id":"4l33D4","date":"1469167350","viewed":460,"name":"Spiral Quantization","username":"AmazingThew","description":"Draws a spiral for each color channel, with the thickness of the spiral line corresponding to the brightness of the input channel\n\nClick around the image to change parameters:\nX axis: input brightness\nY axis: spiral size\n\nWebcam input looks rad!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","postprocessing","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Spiral math adapted from https://www.shadertoy.com/view/XsfXR2\n\n#define PI 3.14159265359\n\nconst int samples = 4;\n\nfloat aux;\nfloat aux2;\nfloat tightness;\nvec2 aspect;\nvec2 texAspect;\n\nmat2 spin(float angle) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nvec4 samplePixel(vec2 uv) {\n    float separation = 0.1;\n    vec2 rCenter = (vec2(separation, 0.0)                    * spin(-iTime*0.1)) / aspect + vec2(0.5);\n    vec2 gCenter = (vec2(separation, 0.0) * spin(2.0*PI/3.0) * spin(-iTime*0.1)) / aspect + vec2(0.5);\n    vec2 bCenter = (vec2(separation, 0.0) * spin(4.0*PI/3.0) * spin(-iTime*0.1)) / aspect + vec2(0.5);\n    \n    vec2 rPoint = (uv-rCenter) * aspect;\n    vec2 gPoint = (uv-gCenter) * aspect;\n    vec2 bPoint = (uv-bCenter) * aspect;\n    \n    rPoint = rPoint * spin(-iTime*10.0) * spin(length(rPoint) * tightness);\n    gPoint = gPoint * spin(-iTime*10.0) * spin(length(gPoint) * tightness);\n    bPoint = bPoint * spin(-iTime*10.0) * spin(length(bPoint) * tightness);\n    \n    vec3 image = texture(iChannel0, uv*aspect*texAspect).ggg; //Grayscale input looks cooler. Change to .rgb for color\n    image = pow(image, vec3(mix(0.5, 4.0, aux)));\n    \n    vec3 imageThreshold = mix(vec3(1.0), vec3(-1.0), image) * vec3(length(rPoint), length(gPoint), length(bPoint));\n    imageThreshold = step(imageThreshold, vec3(rPoint.x, gPoint.x, bPoint.x));\n    \n    return vec4(imageThreshold, 1.0);\n}\n\nvec4 superSamplePixel(vec2 pos) {\n    vec2 off = 1.0 / float(samples) / iResolution.xy;\n    vec4 sum = vec4(0.0);\n    for (int x=0; x<samples; x++) {\n        for (int y=0; y<samples; y++) {\n            sum += samplePixel(pos + vec2(off.x*float(x), off.y*float(y)));\n        }\n    }\n    return sum / float(samples * samples);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    aux  = max(0.1, iMouse.x/iResolution.x);\n    aux2 = max(0.2, iMouse.y/iResolution.y);\n    tightness = aux2 * 3000.0;\n    aspect = vec2(1.0, iResolution.y/iResolution.x);\n    texAspect = vec2(1.0, iChannelResolution[0].x/iChannelResolution[0].y);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = superSamplePixel(uv);\n}","name":"Image","description":"","type":"image"}]}