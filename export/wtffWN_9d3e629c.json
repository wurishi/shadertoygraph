{"ver":"0.1","info":{"id":"wtffWN","date":"1596724932","viewed":89,"name":"UVs of basic fractal","username":"CoolerZ","description":"Based on https://www.shadertoy.com/view/tltSWs \"Basic Fractal Zero\" by @paulofalcao","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","domain","uvs","manipulation","mirroring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://www.shadertoy.com/view/tltSWs \"Basic Fractal Zero\" by @paulofalcao\n// Too see the uvs that we get after mirroring and shifting uncomment below line.\n//#define UVS\n// To see the original fractal, comment UVS and uncomment below line.\n//#define ORIGINAL\n\nconst int maxIterations = 5;\nconst float radius = .5;\n\n//generic rotation formula\nmat2 rot(float a)\n{\n    float c=cos(a);float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    // Taken from https://iquilezles.org/articles/distfunctions2d\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    // Taken from https://iquilezles.org/articles/distfunctions2d\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat scene_d(vec2 p)\n{\n    // Try out different shapes.\n    #ifdef ORIGINAL\n    return length(p)-radius;\n    #else\n    //return sdEquilateralTriangle(p);\n    return sdHexagon(p, 1.);\n    #endif\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n\t//global zoom\n\t//uv*=sin(iTime)*0.5+1.5;\n    \n\tfor(int i = 0; i < maxIterations; i++)\n    {\n        uv = abs(uv); // Mirror the uvs so that all quadrants become the 1st quadrant\n        uv = 2.*uv-1.; // Shift all the numbers back to -1 to 1 range so we are back where we started.\n        uv = rot(iTime)*uv; // Rotate by some amount, these rotations add up as you go to deeper levels.\n        // Recursion, do all above steps again and again to get the fractal structure.\n\t}\n\n    #ifdef UVS\n    vec3 col = vec3(uv, 0.);\n    #else\n\t//draw a circle\n    float d = scene_d(uv);\n    #ifdef ORIGINAL\n    float mask = 1.-smoothstep(0., .01, d);\n    vec3 col = vec3(mask);\n    #else\n    float mask = 1.-smoothstep(0., 10., d);\n    vec3 col = vec3(uv*mask+uv.yx,0.);\n    #endif\n    #endif\n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}