{"ver":"0.1","info":{"id":"DdlSR8","date":"1701358669","viewed":17,"name":"First Raymarch akara","username":"akara","description":"https://michaelwalczyk.com/blog-ray-marching.html","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat distance_from_sphere(in vec3 p, in vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nfloat map_the_world(in vec3 p, in vec3 phase)\n{\n    float per = 5.0;\n    float displacement = (sin(per * p.x + phase.x)) * sin(per * p.y + phase.y) * sin(per * p.z + phase.z) * 0.25;\n    float sphere_0 = distance_from_sphere(p, vec3(0.0), 1.0);\n\n    return sphere_0 + displacement;\n}\n\nvec3 calculate_normal(in vec3 p, in vec3 phase)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = map_the_world(p + small_step.xyy, phase) - map_the_world(p - small_step.xyy, phase);\n    float gradient_y = map_the_world(p + small_step.yxy, phase) - map_the_world(p - small_step.yxy, phase);\n    float gradient_z = map_the_world(p + small_step.yyx, phase) - map_the_world(p - small_step.yyx, phase);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\nvec3 ray_march(in vec3 ro, in vec3 rd, in vec3 phase)\n{\n    float total_distance_traveled = 0.0;\n    const int NUMBER_OF_STEPS = 32;\n    const float MINIMUM_HIT_DISTANCE = 0.001;\n    const float MAXIMUM_TRACE_DISTANCE = 1000.0;\n\n    for (int i = 0; i < NUMBER_OF_STEPS; ++i)\n    {\n        vec3 current_position = ro + total_distance_traveled * rd;\n\n        float distance_to_closest = map_the_world(current_position, phase);\n\n        if (distance_to_closest < MINIMUM_HIT_DISTANCE) \n        {\n            vec3 normal = calculate_normal(current_position, phase);\n            vec3 light_position = vec3(2.0, -2.0, 3.0);\n            vec3 direction_to_light = normalize(current_position - light_position);\n\n            float diffuse_intensity = max(0.0, dot(normal, direction_to_light));\n\n            return vec3(0.0, 0.0, 1.0) * diffuse_intensity;\n        }\n\n        if (total_distance_traveled > MAXIMUM_TRACE_DISTANCE)\n        {\n            break;\n        }\n        total_distance_traveled += distance_to_closest;\n    }\n    return vec3(1.0, 1.0, 0.25);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n\n    vec3 camera_position = vec3(0.0, 0.0, -3.0);\n    vec3 ro = camera_position;\n    vec3 rd = vec3(uv, 1.0);\n    \n\n    vec3 shaded_color = ray_march(ro, rd, vec3(iTime*10.0, iTime*0.0, iTime*5.0));\n\n    fragColor = vec4(shaded_color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}