{"ver":"0.1","info":{"id":"4sGfRD","date":"1527712531","viewed":276,"name":"Simple 3D spheres","username":"artyomabramov","description":"Simple 3D spheres","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["3d","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float radius = 0.1;\n\nfloat remap(float a, float b, float t) {\n    return (t - a) / (b - a);\n}\n\nvec4 drawSphere(vec3 ro, vec3 rd, vec3 s) {\n    float t = dot(s - ro, rd);\n    vec3 p = ro + rd * t;\n    \n    float y = length(p - s);\n    float d = -1.0;\n    \n    float col = 0.0;\n    \n    if (y < radius) {\n        float x = sqrt(radius * radius - y * y);\n        float t1 = t - x;\n        \n\t\td = 1.0 - t1 / 5.0;\n        \n        float dist = length(s - ro);\n        t1 = remap(dist, dist - radius, t1);\n        t1 = t1 / 2.0 + 0.5;\n        \n        col = t1;\n    }\n    \n    return vec4(p * col, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float speed = 1.0;\n    \n    vec3 ro = vec3(0.5 + 3.0 * sin(iTime * speed), 1.5, 0.5 + 3.0 * cos(iTime * speed));\n    \n    vec3 lookat = vec3(0.5, 0.5, 0.5);\n     \n    vec3 f = normalize(lookat - ro);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = cross(f, r);\n    \n    float zoom = 1.0;\n    \n    vec3 c = ro + f * zoom;\n    \n    vec3 i = c + uv.x * r + uv.y * u;\n    \n    vec3 rd = normalize(i - ro);\n    \n\tvec4 res = vec4(0.95);\n    res.a = 0.0;    \n    \n    const int n = 5;\n    \n    for (int x = 0; x < n; x++) {\n        for (int y = 0; y < n; y++) {\n            for (int z = 0; z < n; z++) {\n                vec3 coord = vec3(float(x) / float(n - 1), \n                                  float(y) / float(n - 1),\n                                  float(z) / float(n - 1));\n                vec4 point = drawSphere(ro, rd, coord);\n                \n                if (point.a > res.a) {\n                    res = point;\n                }\n            }\n        }\n    }\n    \n    float m = 1.0 - iMouse.x / iResolution.y - 0.1;\n    \n    fragColor = vec4(mix(vec3(res.a) * 1.5, res.rgb, smoothstep(0.4, 0.6, uv.x + 0.5 + m)), 1.0);\n}","name":"Image","description":"","type":"image"}]}