{"ver":"0.1","info":{"id":"XdlcRl","date":"1489455377","viewed":421,"name":"Deep Breath Shader","username":"Flopine","description":"Blow in to your microphone for digging in the foamy/cloudy shader","likes":3,"published":1,"flags":4,"usePreview":0,"tags":["raymarching","interaction","micro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////////////////////////////////////////////////////////////////////////////\n// Made by Flopine\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\n// Cloud effect from iq : https://www.shadertoy.com/view/XslGRr \t\t\t\t//\n// Fractal effect from a guy in GLSL Sandbox : http://glslsandbox.com/e#39222.0 //\n//////////////////////////////////////////////////////////////////////////////////  \n\n\n#define time iTime*0.05\n\n\n/////////////////\n//NOISE AND FBM//\n/////////////////\n\nmat3 m = mat3(0.80,-0.60,0,0.60,0.80,0,0,0,1); // rotation matrice\n\n\nfloat noise( in vec3 x ) // image noise\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n    \n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z)+f.xy;\n\tvec2 rg = textureLod(iChannel0,(uv+ 0.5)/128.0, 0.).yx;\n    return mix( rg.x, rg.y, f.z );\n\n}\n\n\n//FBM decomposition\n/*\nfloat fbm6 ( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*(0.5+0.5*noise( p )); p = m*p*2.02;\n    f += 0.250000*(0.5+0.5*noise( p )); p = m*p*2.03;\n    f += 0.125000*(0.5+0.5*noise( p )); p = m*p*2.01;\n    f += 0.062500*(0.5+0.5*noise( p )); p = m*p*2.04;\n    f += 0.031250*(0.5+0.5*noise( p )); p = m*p*2.01;\n    f += 0.015625*(0.5+0.5*noise( p ));\n    return f*0.9;\n}*/\n\n\n// FBM reduit - défini la \"densité\" du SDF\nfloat fbm(in vec3 p, float STP, in vec3 Ray, float son)\n{\t\n\tfloat z=2.;\n\tfloat f;\n\tvec3 q = p-time;\n    \n\tfor (float i= 1.0; i <= STP; i++)\n\t{\n      \n        f += abs((0.5*noise(q)-0.5)*(2./z));\n        \n\t\tz = z*2.;\n\t\tq = q*m*2.;\n    }\n\n    return mix(clamp(1.8 - p.y -2. + 1.75*f,.0,1.)*noise(q),\n        \t\tclamp(1.8 - p.y -2. + 1.75*f,.0,1.)*noise(q)*smoothstep(0.1,0.6,length(Ray.z-1.1)),\n                son*2.5);\n    \n    /* return clamp(2.4- p.y -2. + 1.75*f,.0,1.) //ponderation pour horizon\n         \t\t*smoothstep(0.1,0.4,length(Ray.z-1.))\n                 *noise(q*1.5);*/\n}\n\n\n//////////////////////\n//SHADING AND CAMERA//\n//////////////////////\n\nvec3 sundir = normalize(vec3 (1.0, 0.3, 1.0));\n\nvec4 integrate( in vec4 sum, in float dif, in float den, in float t )\n{\n    // lighting\n    vec3 lin = vec3(1.0,0.8,0.7) + vec3(0.6, 0.6, 0.6)*dif*2.;        \n    vec4 col = vec4( mix( vec3(1.0,0.95,0.8), vec3(0.9,0.4,0.6), den ), den );\n    col.xyz *= lin;\n \tcol.xyz = mix( col.xyz, vec3(0.5,0.5,0.6), 1.0-exp(-0.003*t*t) );\n    // front to back blending    \n    col.a *= 0.5;\n    col.rgb *= col.a;\n    return sum + col*(1.0-sum.a);\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat field(in vec3 p) \n{\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 4373.11));\n\tfloat accum = 0.;\n\tfloat prev = 0.;\n\tfloat tw = 0.;\n\tfor (int i = 0; i < 30; ++i) {\n\t\tfloat mag = dot(p, p);\n\t\tp = abs(p) / mag + vec3(-.5, -.4, -1.5);\n\t\tfloat w = exp(-float(i) / 7.);\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.3));\n\t\ttw += w;\n\t\tprev = mag;\n\t}\n\treturn max(0., 5. * accum / tw - .7);\n}\n\n\n///////////////\n//RAYMARCHING//\n///////////////\n\n#define MARCH(STEPS,MAPLOD,DEF) for(int i=0; i<STEPS; i++) { vec3  pos = ro+t*rd; vec3 ray = rd; float freqs = son; if( pos.y<-3.0 || pos.y>2.0 || sum.a > 0.99 ) break; float den = MAPLOD(pos,DEF,ray,freqs); if( den>0.01 ) { float dif =  clamp((den - MAPLOD(pos+0.3*sundir,DEF,ray,freqs))/0.6, 0.0, 1.0 ); sum = integrate( sum, dif, den, t ); } t += max(0.05,0.02*t); }\n \nvec4 raymarch( in vec3 ro, in vec3 rd, in vec2 uv, float son)\n{\n\tvec4 sum = vec4(0.0);\n\tvec2 text = textureLod(iChannel0, uv/256., 0.).yx;\n\tfloat t = 0.05*text.x;\n \n    MARCH(20,fbm,4.0);\n    MARCH(30,fbm,3.0);\n    MARCH(40,fbm,2.0);\n    MARCH(50,fbm,2.0);\n\n    \n    return clamp( sum, .0,1.);\n}\n\nvec4 SDF( in vec3 ro, in vec3 rd, in vec2 uv, in vec3 p, float son)\n{\n    // background sky     \n\tfloat t = field(p);\n\t//vec3 col = vec3(0.6,0.71,0.75) - rd.y*0.2*vec3(1.0,0.5,1.0) + 0.15*0.5; // CHANGER POUR LE DEUXIEME SHADER\n    vec3 col = vec3 (0.9 * t * t * t, 1.4 * t * t, t) * vec3(0.6,0.71,0.75) - rd.y*0.2*vec3(1.0,0.5,1.0) + 0.15*0.5;\n    \n    // clouds  \n    vec4 res = raymarch(ro, rd, uv,son);\n    col = col*(1.0-res.w) +res.xyz;\n     \n    return vec4( col, 1.0 );\n}\n\n\n\n/////////\n//IMAGE//\n/////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord.xy)/ iResolution.y;\n    vec2 uv2 = 2. * fragCoord.xy / iResolution.xy - 1.;\n\tvec2 uvs = uv2 * iResolution.xy / max(iResolution.x, iResolution.y);\n    //Camera\n    vec3 ro = 4.0*(vec3(0.14,0.0,-1.));\n\tvec3 ta = vec3(0.0, -1.0, 0.0);\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    //Ray\n    vec3 rd = ca * normalize( vec3(uv,2.));\n    \n    //Son\n    float son = texture(iChannel1, vec2(0.2)).x;\n    \n    //2eme raymarching\n    vec3 p = vec3(uvs/4., 0) + vec3(1., -1.3, 0.);\n\tp += .2 * vec3(sin(time*2. / 16.), sin(time*2. / 12.),  sin(time*2. / 128.));\n\n    fragColor = SDF(ro, rd, vec2(fragCoord-0.5),p,son);\n    \n}\n","name":"Image","description":"","type":"image"}]}