{"ver":"0.1","info":{"id":"4XXcWr","date":"1726018854","viewed":14,"name":"The Amazing Sunshine","username":"Akiko","description":"- Implement a spinning sun\n- Feel the power of the sunshine!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author AkikozZM\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * TODO\n */\nfloat computeRadius(vec2 uv)\n{\n    float scale = 15.0;\n    float radius = 0.25 * iResolution.y;\n    float x = sinc(iTime, 0.5);\n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    float edgePulse = 5.0 * sin(a * 17.0);\n    \n    return radius + x * edgePulse;\n}\n\nfloat computeRadius2(vec2 uv)\n{\n    float scale = 15.0;\n    float radius = 0.19 * iResolution.y;\n    float x = cos(iTime * 5.0 + 15.0);\n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    float edgePulse = x * 2.0;\n    \n    return radius + edgePulse;\n}\n\nfloat computeRadius3(vec2 uv)\n{\n    float scale = 25.0;\n    float radius = 0.25 * iResolution.y;\n    float x = cos(iTime * 5.0 + 15.0);\n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    a = 200.0 * triangleWave(a, 14.0, 0.2);\n    float edgePulse = x * 2.0;\n    \n    return radius + edgePulse * a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;  \n\tvec2 center = iResolution.xy * 0.5;\n    float dist = length(uv - center);\n    uv = rotatePoint2d(uv, center, iTime) + center;\n\tfloat radius = computeRadius(uv);\n    float radius2 = computeRadius2(uv);\n    float radius3 = computeRadius3(uv);\n    \n    // Define color\n    vec3 red = rgb(225.0, 50.0, 70.0);\n    vec3 blue1 = rgb(32.0, 156.0, 255.0);\n    vec3 blue2 = rgb(104.0, 224.0, 207.0);\n    vec3 orange_light = rgb(237.0, 225.0, 178.0);\n    vec3 orange_dark = rgb(255.0, 150.0, 0.0);\n    \n    // Background layer\n\tvec4 background_layer = vec4(mix(blue2, blue1, (fragCoord.y / iResolution.y) * tan(iTime * 0.5)), 1.0);\n\t// outsie Circle\n\tvec4 sun_red_layer = circle(uv, center, radius, red);\n    \n    // outside Circle 2\n    vec3 red_orange = mix(red, orange_light, smoothstep(0.01, 1.0, dist/radius3));\n    vec4 sun_red_layer2 = circle(uv, center, radius3, red_orange);\n    // Inside Circle\n    vec3 orange_mix = mix(orange_dark, orange_light, smoothstep(0.05, 0.9, dist/radius2));\n    vec4 sun_center_layer = circle(uv, center, radius2, orange_mix);\n\t\n\t// Blend the two\n\tfragColor = mix(background_layer, sun_red_layer, sun_red_layer.a);\n    fragColor = mix(fragColor, sun_red_layer2, sun_red_layer2.a);\n    fragColor = mix(fragColor, sun_center_layer, sun_center_layer.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nfloat gain (float g, float t) {\n    if (t < 0.5) {\n        return bias(1.0 - g, 2.0 * t) / 2.0;\n    }\n    else {\n        return 1.0 - bias(1.0 - g, 2.0 - 2.0 * t) / 2.0;\n    }\n}\n\nfloat sinc(float x, float k) {\n    float a = 3.14 * (k * x - 1.0);\n    return sin(a) / (k-0.2);\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\nfloat triangleWave(float x, float freq, float amp) {\n    return abs(mod((x * freq), amp) - (0.5 * amp));\n}\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}