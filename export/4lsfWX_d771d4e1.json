{"ver":"0.1","info":{"id":"4lsfWX","date":"1513665408","viewed":272,"name":"Demon_Head_0","username":"balkhan","description":"modelling","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","isaac","pentagram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nvec3\tcalcNormal( in vec3 pos, float e, vec3 dir);\nfloat\tloop_circle(vec3 p);\nfloat\tcircle(vec3 p, float phase);\nfloat\tsdTorus( vec3 p, vec2 t, float phase );\nfloat\tmylength(vec2 p);\nfloat\tnrand( vec2 n );\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// torus color\nvec3\th; \t\t\t// light amount\n\n#define I_MAX\t\t200.\n#define E\t\t\t0.00001\n#define FAR\t\t\t25.\n#define\tPI\t\t\t3.14159\n#define TAU\t\t\tPI*2.\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, -1.0, .0);\n\n    pos.z = 10.5+1.5*sin(t*15.);    \n    h*=0.;\n    vec2\tinter = (march(pos, dir));\n    if (inter.y <= FAR)\n        col.xyz = ret_col*(1.-inter.x*.0025+inter.y*.025);\n    else\n        col = vec3(.1,.2,.5);\n    col += h*.005125;\n    c_out =  vec4(col,1.0);\n}\n\n/*\n**\tLeon's mod polar from : https://www.shadertoy.com/view/XsByWd\n*/\n\nvec2 modA (vec2 p, float count) {\n    float an = TAU/count;\n    float a = atan(p.y,p.x)+an*.5;\n    a = mod(a, an)-an*.5;\n    return vec2(cos(a),sin(a))*length(p);\n}\n\n/*\n**\tend mod polar\n*/\n\nfloat Cylinder(in vec3 p, in float r, in float h) \n{\n    return max(length(p.xz) - r, abs(p.y) - h);\n}\n\n\nfloat\tscene(vec3 p)\n{\n    float\tvar;\n    float\tmind = 1e5;\n    rotate(p.xz, +.75*cos(1.*iTime) );\n    rotate(p.yz, -3.14+.5*sin(-.5*iTime) );\n    vec3\top = p;\n    vec2 q = vec2(length(p.xy)-2.,p.z);\n    var = 1.*atan(p.x,p.y);\n    var = .25-abs(var);\n    rotate(q, var*3.+iTime*2.);\n    q.xy = abs(q.xy)-.251;\n    var=floor(var*5.)/5.;\n    ret_col = 1.-vec3(.5-.5, .5, .3+.5);\n    mind = mylength(q)-.253125-.09*var;\n    \n    op.y -= 4.5;\n    rotate(op.yz, 3.14-1.57);\n    rotate(op.zx, 3.14);\n    q = vec2(length(op.yz)-2., op.x);\n    var = 1.*atan(op.y, op.z)*2.;\n    rotate(q, var*1.+iTime*2.);\n    q.xy = abs(q.xy)-.251;\n    mind = min(mind, length(q)-.25-.09*var*1.);\n    \n    op = p;\n    float\tvar2 = atan(op.x, op.y);\n    var2= -3.+abs(var2);\n    rotate(op.xy, iTime);\n    float\tvar3 = atan(op.x, op.y);\n    op.xy = modA(op.xy, 22.);\n    op.x -= 2.;\n    rotate(op.yz, -iTime*5.);\n    rotate(op.zx, -iTime*4.);\n    // 0.15915 == 1./(2. * pi)\n    mind = min(mind\n               ,\n               (\n                   mod(11.*var3*0.15915, 1.)-.5 <= 0.\n               )\n               ?\n               max(abs(op.x), max(abs(op.y), abs(op.z) )) - .15-.1*(var2 )\n               :\n               length(op) - .15-.1*(var2 )\n              \n              );\n    op = p;\n    op.y -= 2.5;\n    mind = min(mind, length(op) - 1.5);\n    \n    op = p;\n    op.y -= 1.5;\n\top.z -= -1.;\n    float ball = length(op)-.5;\n    mind = min(mind, ball);\n    h += (mind == ball) ? vec3(.2, .1, .5)*.5/(ball * ball + .01) : vec3(0.);\n    ret_col = (mind == ball) ? vec3(-1.0, -.2, -1.0) : ret_col;\n\n    // this must be one of the most inneficient way to draw a pentagram\n    // 18 degree = 0,314159\n    const float angle = 0.314159;\n\top = p;\n    op.y+=.25;\n    op.x += .15*2.;\n    rotate(op.xy, angle);\n\n    float\tpentagram = Cylinder(op, .015, 1.);\n    op = p;\n    op.y+=.25;\n    op.x -= .15*2.;\n    rotate(op.xy, -angle);\n\tpentagram = min(pentagram, Cylinder(op, .015, 1.));\n    op = p;\n    op.y+=.25;\n    op.y -= -.11*2.;\n    rotate(op.xy, -5.*angle);\n\tpentagram = min(pentagram, Cylinder(op, .015, 1.));\n    op = p;\n    op.y+=.25;\n    op.x -= -.1*2.;\n    op.y -= .18*2.;\n    rotate(op.xy, 7.*angle);\n\tpentagram = min(pentagram, Cylinder(op, .015, 1.));\n    op = p;\n    op.y+=.25;\n    op.x -= .1*2.;\n    op.y -= .18*2.;\n    rotate(op.xy, -7.*angle);\n\tpentagram = min(pentagram, Cylinder(op, .015, 1.));\n    mind = min(mind, pentagram);\n    ret_col = (mind == pentagram) ? vec3(1.0, .82, .50) : ret_col;\n    h += (mind == pentagram) ? vec3(1.,.5,.7)/(pentagram*pentagram+.1) : vec3(0.) ;\n    \n    \n    op = p;\n    op.y -= 2.;\n\top.z -= -1.25;\n    op.x = abs(op.x)-.55;\n    float eyes = length(op)-.25;\n    mind = min(mind, eyes); // eyes\n    ret_col = (mind == eyes) ? vec3(.8, .1, .15) : ret_col;\n    h += (mind == eyes) ? vec3(.4, .1, .1)/(eyes*eyes+.051) : vec3(0.);\n    \n    \n    op = p;\n    op.y -= 2.8;\n    op.z -= -.5;\n    float\tmouth = length(op*vec3(.55,1.25,.5) )-.6;\n    mind = max(mind, -mouth);\n    ret_col = (mind == -mouth ) ? vec3(0.72) : ret_col;\n    h -= (mind == -mouth ) ? vec3(.25, .55, .26)/(mouth*mouth + .251) : vec3(.0) ;\n\n    op = p;\n    op.y -= 2.8;\n    op.z -= -1.1;\n    op.xy = modA(op.xy*vec2(.55, 1.25), 15.);\n    op.x -= .4;\n    float\tteeth = max(abs(op.x), max(abs(op.y), abs(op.z) ) )-.0525;\n    mind = min(mind, teeth);\n    ret_col = (mind == teeth) ? vec3(1., 1.0, 1.0) : ret_col;\n\n    h -= vec3(.75,.8,.5)*.05/(.00815+mind*mind);\n    \n    return (mind);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\n\t    for (float i = -1.; i < I_MAX; ++i)\n\t    {\n\t    \tp = pos + dir * dist.y;\n\t        dist.x = scene(p);\n\t        dist.y += dist.x*.5; // makes artefacts disappear\n\t        if (log(dist.y*dist.y/dist.x/1e5)>0. || dist.x < E || dist.y > FAR) // log trick from aiekick\n            {\n                break;\n            }\n\t        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret;\n    \n    p = p*p*p*p;\n    p = p*p;\n    ret = (p.x+p.y);\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).y - march(pos-eps.xyy, dir).y,\n           march(pos+eps.yxy, dir).y - march(pos-eps.yxy, dir).y,\n           march(pos+eps.yyx, dir).y - march(pos-eps.yyx, dir).y ));\n}","name":"Image","description":"","type":"image"}]}