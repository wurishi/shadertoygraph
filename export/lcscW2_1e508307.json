{"ver":"0.1","info":{"id":"lcscW2","date":"1721655800","viewed":35,"name":"Bodagarden","username":"Hultsborn10","description":"Logotype for Bodagarden Camping","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["logobodagarden"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S smoothstep\n#define PI 3.14159\n#define edge 0.04\n\n//Rotation matrix\nmat2 Rot(float a) {\n    float s = sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n//Creates a triangle with base, height, placed with base center at xpos,ypos, rotated clockwise\nfloat Triangle(vec2 uv, float base, float height, float xpos, float ypos, float rotation){\n    base = base / 2.0;      //half base (to the right)\n    uv -= vec2(xpos, ypos); //move the triangle to position\n    uv *= Rot(rotation);    //rotate (radians, clockwise)\n    uv.x = abs(uv.x);       //mirror along y axis\n    float kFactor = -height/base; //calculat k factor for line equation\n    float horizontal = S(0.0, edge/2.0, uv.y); //show triangle above x axis, when Y is positive\n    float slope = S(0.0, edge, uv.x * kFactor + height - uv.y); //show triangle below the slope\n    float triangle = horizontal * slope; //combine horizontal and slope edges of triangle\n    return triangle;\n}\n\n//Creates a disc of radius at xpos, ypos \nfloat Disc(vec2 uv, float radius, float xpos, float ypos, float yCutOff){\n    uv -= vec2(xpos, ypos);\n    float d = S(radius + edge/2.0, radius, length(uv));\n    float cut = S(yCutOff, yCutOff + edge/2.0, uv.y);\n    return d * cut;\n}\n\n//Creates a sun\nfloat Sun(vec2 uv, float ang){\n    uv -= vec2(-0.2, 0.0);\n    //Sun disc\n    float radius = 0.67;\n    float d = Disc(uv, radius, 0.0, 0.0, -2.0);\n    radius += 0.05;\n    //10 Sun flares\n    for(float i = 0.0; i < 10.0; i += 1.0){\n        float angle = i * PI / 5.0+ang;\n        float xpos = radius * cos(angle);\n        float ypos = radius * sin(angle);\n        float t = Triangle(uv, 0.21, 0.25, xpos, ypos, PI/2.0 - angle);\n        d += t;\n    }\n    //Remove part behind windmill\n    float w1 = 1.0 - Disc(uv, 0.35, 0.40, -0.05, -2.0);\n    float w2 = 1.0 - Triangle(uv, 0.30, 0.98, 0.06, -0.90, 0.0);\n    //Return clipped sun\n    return d * w1 * w2;\n}\n\n\n//Creates a windmill\nfloat Windmill(vec2 uv, float xpos, float ypos){\n    float base = Triangle(uv, 0.89, 2.95, xpos, ypos - 0.99, 0.0);     //Blue base\n    float w1 = 1.0 - Triangle(uv, 0.69, 2.12, xpos, ypos - 0.19, 0.0); //White cutoff\n    base *= w1;\n    float top = Disc(uv, 0.30, xpos, ypos - 0.13, 0.0);                //Top half disc\n    return min(base + top, 1.0);\n}\n\nfloat Wings(vec2 uv, float base, float height, float shift, float xc, float yc, float a){\n    //4 mill wings\n    float w = 0.0;\n    for(float i = 0.0; i < 4.0; i += 1.0){\n        float angle = i * PI / 2.0 + a;\n        float xpos = xc - shift * cos(PI / 2.0 - angle);\n        float ypos = yc - shift * sin(PI / 2.0 - angle);\n        float t = Triangle(uv, base, height, xpos, ypos, angle);\n        w += t;\n    }\n    return min(w, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized square pixel coordinates (from -1 to 1 for X)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    //Windy flag...\n    /*\n    float t = uv.x*7.0 - 2.0 * iTime + uv.y * 2.0;\n    uv.y += sin(t) * 0.05;\n    */\n    \n    //Swinging swirl...\n    //uv *= Rot(length(uv)*sin(iTime)*2.0);\n    \n    \n    //Blue = 0.01,0.28,0.52\n    vec3 blue = vec3(0.99, 0.72, 0.48);\n    //Yellow = 0.98, 0.73, 0.09\n    vec3 yellow = vec3(0.02, 0.27, 0.91);\n    vec3 white = vec3(0);\n    \n    float xc = 0.19;\n    float yc = 0.08;\n    float wm = Windmill(uv, xc, yc);\n    float ang = 0.0;\n    ang = iTime / 2.0; //Angle for rotating the wings\n    float ww = 1.0 - Wings(uv, 0.38, 1.15, 0.75, xc, yc, ang);\n    float bw = Wings(uv, 0.25, 0.88, 0.71, xc, yc, ang);\n    float sun = Sun(uv, ang /4.0);\n    \n    //Add windmill on top of sun (sun only visible where there is no windmill)\n    //Add white wings on top\n    //Add blue wings on top\n    vec3 col = blue * wm * ww + (1.0 - wm) * sun * yellow * ww + blue * bw;\n    \n\n    // Output to screen (white background, inverted colors)\n    fragColor = vec4(1.0-col,1.0);\n}","name":"Image","description":"","type":"image"}]}