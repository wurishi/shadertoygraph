{"ver":"0.1","info":{"id":"4lXyWB","date":"1506150561","viewed":273,"name":"Meinhardt / Ginzburg-Landau","username":"FlexMonkey","description":"Coupled Meinhardt / Ginzburg-Landau systems\n\nBased on: https://github.com/GollyGang/ready/blob/gh-pages/Patterns/Meinhardt1982/stripes.vti\n...and: https://www.shadertoy.com/view/XlsyWn","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["meinhardtreactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tCoupled Ginzburg-Landau / Meinhardt Reaction Diffusion\n\n\tBuffer A: Meinhardt: A, B, and C chemicals \n\tBuffer B: Meinhardt: D and E Chemicals\n\tBuffer C: Ginzburg-Landau system\n\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | September 2017\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 rgb0 = texture(iChannel0, fragCoord.xy / iResolution.xy).xyz; \n    vec3 rgb1 = texture(iChannel1, fragCoord.xy / iResolution.xy).xyz; \n    vec3 rgb2 = texture(iChannel2, fragCoord.xy / iResolution.xy).xyz; \n    \n    fragColor = vec4(max(max(rgb0, rgb1), rgb2.xzz), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tMeinhardt: A, B, and C chemicals \n*/\n\nfloat k_ab = 0.04;\nfloat k_c = 0.055;\nfloat diff1 = 0.05;\nfloat timestep = 0.5; \n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 colorNoise(vec2 co) {\n    float r = noise(co);\n    float g = noise(co * 2.0); \n    float b = noise(co * 3.0); \n    \n    return vec4(r, g, b, 1.0); \n}\n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0); \n\n    vec3 abc = texture(iChannel0, coord).xyz;\n    vec3 de = texture(iChannel1, coord).xyz;\n    vec2 ginzburgLandau = texture(iChannel2, coord).xz;\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float a = abc.x - ginzburgLandau.y * 0.0025;\n    float b = abc.y;\n    float c = abc.z + ginzburgLandau.x * 0.001;\n    float d = de.x;\n    float e = de.y;\n\n    float delta_a = diff1 * laplacian.x + 0.01 * a * a * e / c - a * k_ab;\n    float delta_b = diff1 * laplacian.y + 0.01 * b * b * d / c - b * k_ab;\n    float delta_c = 0.01 * a * a * e + 0.01 * b * b * d - c * k_c;\n\n   \tvec3 result = vec3(a + delta_a * timestep, \n                       b + delta_b * timestep,\n                       c + delta_c * timestep);\n\n    if(abc.xyz == vec3(0) || reset()) {\n        fragColor = colorNoise(coord);\n    } else {\n        fragColor = vec4(clamp(result, vec3(0.0), vec3(1.0)), 1.0);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\tMeinhardt: D & E Chemicals\n*/\n\nfloat k_de = 0.04;\nfloat diff2 = 0.35;\nfloat timestep = 0.5; \n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 colorNoise(vec2 co) {\n    float r = noise(co);\n    float g = noise(co * 2.0); \n    float b = noise(co * 3.0); \n    \n    return vec4(r, g, b, 1.0); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0); \n\n    vec3 abc = texture(iChannel0, coord).xyz;\n    vec3 de = texture(iChannel1, coord).xyz;\n\n    vec3 laplacian = vec3(texture(iChannel1, coord - pixelSize.zy) +\n                          texture(iChannel1, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel1, coord) +\n                          texture(iChannel1, coord + pixelSize.xz) +\n                          texture(iChannel1, coord + pixelSize.zy));\n\n    float a = abc.x;\n    float b = abc.y;\n    float c = abc.z;\n    float d = de.x;\n    float e = de.y;\n\n    float delta_d = diff2 * laplacian.x + (a - d) * k_de;\n    float delta_e = diff2 * laplacian.y + (b - e) * k_de;\n\n   \tvec2 result = vec2(d + delta_d * timestep, \n                       e + delta_e * timestep);\n\n    if(abc.xyz == vec3(0) || reset()) {\n        fragColor = colorNoise(coord.xy * 2.0);\n    } else {\n        fragColor = vec4(clamp(result.xyy, vec3(0.0), vec3(1.0)), 1.0);\n    }\n    \n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n\tGinzburg-Landau\n*/\n\nfloat alpha = 1.185;\nfloat beta = 0.65;\nfloat delta = 2.75;\nfloat gamma = 0.45;\nfloat D_a = 1.1;\nfloat D_b = 1.95;\nfloat timestep = 0.025; \n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 colorNoise(vec2 co) {\n    float r = noise(co);\n    float g = noise(co * 2.0); \n    float b = noise(co * 3.0); \n    \n    return vec4(r, g, b, 1.0); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0); \n\n    vec3 p = texture(iChannel0, coord).xyz;\n    vec3 abc = texture(iChannel1, coord).xyz; // Meinhardt: A, B, and C chemicals \n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float a = p.x + abc.x * 0.1;\n    float b = p.y + abc.z * 0.2;\n\n    float delta_a = D_a * laplacian.x + alpha*a - gamma*b + (-beta*a + delta*b)*(a*a+b*b);\n    float delta_b = D_b * laplacian.y + alpha*b + gamma*a + (-beta*b - delta*a)*(a*a+b*b);\n\n   \tvec2 result = vec2(a + delta_a * timestep, b + delta_b * timestep);\n\n    if(p.xyz == vec3(0) || reset()) {\n        fragColor = colorNoise(coord * 3.0);\n    } else {\n        fragColor = vec4(result.xyy, 1.0);\n    }\n    \n}","name":"Buf C","description":"","type":"buffer"}]}