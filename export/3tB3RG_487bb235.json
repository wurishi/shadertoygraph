{"ver":"0.1","info":{"id":"3tB3RG","date":"1559899444","viewed":173,"name":"Wobbling candy","username":"jblanper","description":"Experimenting with boolean operators and ray marching.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","boolean"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float a) {\n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat sphereSDF (vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat displacement(vec3 p, float n) {\n  return sin(p.x * n) * cos(p.y * n + n) - sin(p.z + p.y * n);\n}\n\nfloat map (vec3 p) {\n  float time = iTime * .7;\n    \n  vec3 p1 = p;\n  p1.xz *= rotate(time * .3);\n  p1.yz *= rotate(time * .2);\n\n  float s1 = sphereSDF(p1, 1.3);\n  s1 += sin((p1.x + p1.y * p1.z) * (3.14 * 10.) - time * 2.) * .015 - sin((p1.x - p1.y * p1.z) * (3.14 * 12.) - time) * .01;\n\n  p.z -= time * .6 + sin((p.x * p.z) + time);\n  p.xy *= rotate(time * .2);\n  vec3 c = vec3(1.4, 1.4, 2.);\n  p = mod(p, c) - .5 * c;\n\n  float s2 = sphereSDF(p, .75);\n  s2 += sin((p.x + p.y * p.z) * 20. + time * 2.) * .03 + cos(length(p.x - p.y * p.z) * 65. - time) * .01;\n\n  return max(s1 * .6 + displacement(p1, 8. * (sin(time) * .7 + .4)) * .1, -s2 * .3);\n}\n\nfloat trace (vec3 ro, vec3 rd) {\n  float e = .0001;\n  float d = e * 2.;\n  float t = 0.;\n  for (int i = 0; i < 60; i++) {\n    if (d < e || t > 50.) continue;\n    d = map(ro + rd * t);\n    t += d;\n  }\n  return t;\n}\n\nvec3 getNormal (vec3 p) {\n  float d = map(p);\n  vec2 e = vec2(.01, 0.);\n\n  return normalize(d - vec3(\n    map(p - e.xyy),\n    map(p - e.yxy),\n    map(p - e.yyx)));\n}\n\nfloat getLight (vec3 p, vec3 light, vec3 rd) {\n  vec3 nor = getNormal(p);\n  float lOcclusion = .8;\n  float ambient = clamp(.5 + .5 * nor.y, 0., 1.) * .3;\n  float diffuse = clamp(dot(nor, light), 0., 1.) * .8;\n  vec3 half_way = normalize(-rd + light);\n  float specular = pow(clamp(dot(half_way, nor), 0.0, 1.0), 16.) * diffuse * .6;\n\n  return (ambient + diffuse + specular) * lOcclusion;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float time = iTime * .6;\n    \n  vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n  uv.x *= iResolution.x / iResolution.y;\n  vec3 color;\n\n  // camera\n  vec3 ro = vec3(0., 0., 5.);\n  vec3 rd = normalize(vec3(uv, -3.));\n\n  float t = trace(ro, rd);\n  vec3 p = ro + rd * t;\n\n  // texture\n  color += sin(length(p + cos(atan(p.x, p.z * p.z) * 5.)) * 50.) * (t * .02);\n  color *= cos(dot(p.xy, uv) * 5. - iTime) * .5;\n\n  // lights\n  vec3 light1 = normalize(vec3(3., 2., 1.));\n  vec3 light2 = normalize(vec3(3., 5., -2.));\n  light1.xz *= rotate(time);\n  light2.xz *= rotate(-time * .2);\n  color += getLight(p, light1, rd) * vec3(.5, .6, .2);\n  color += getLight(p, light2, rd) * vec3(.2, .3, .8);\n  color += vec3(.6 + p.y * .3, .3 + p.x * .1, .4 + p.z * .5) * .3;\n\n  float fog = 1. / (1. + t * t * .1);\n  color *= fog * 3.;\n\n  if (t > 50.) color += .5 / length(uv);\n\n  fragColor = vec4(color, 1.);\n}\n","name":"Image","description":"","type":"image"}]}