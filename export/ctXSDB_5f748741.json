{"ver":"0.1","info":{"id":"ctXSDB","date":"1675407304","viewed":84,"name":"3D Triangle Properties","username":"iradicator","description":"Shows inscribed and circumcenter circles as well as angle and perpendicular bisectors with their respective intersection points with the triangle.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","math","triangle","circle","animated","geometry","circumcircle","circumcenter","perp","bisectors","properties","inscribedcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////////////////////////////////\n// 3D Triangle Propoerties (Legend):                                                      //\n// Yellow - center of mass                                                                //\n// Green - angle bisectors                                                                //\n// Purple - inscribed circle                                                              //\n// Red - perpendicular bisectors                                                          //\n// Blue - circumcenter                                                                    //\n// Gold - \"mixed\" center (circumcircle which its center forced to be inside the triangle) //\n//                                                                                        //\n// 2D version: https://www.shadertoy.com/view/mtXXRs                                      //\n////////////////////////////////////////////////////////////////////////////////////////////\n\n/////////\n// SDF //\n/////////\n\n// REF: https://iquilezles.org/articles/distfunctions/\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\n///////////\n// Utils //\n///////////\n\n#define AA 2\n\n#define sqr(x) ((x)*(x))\n#define mag(x) (length(x))\n#define sqrMag(x) (dot((x),(x)))\n\n//////////\n// Geom //\n//////////\n\nfloat cross2(vec2 a, vec2 b) { return a.x*b.y-a.y*b.x; }\n\n// line <-> line intersection (assuming intersection exists and lines aren't skewed)\nvec3 intersect(vec3 a1, vec3 m1, vec3 a2, vec3 m2)\n{\n#define _ij .xy\n#if 1\n    float t1 = -cross2((a1-a2)_ij,(m2)_ij)/cross2((m1)_ij,(m2)_ij);\n    return a1+m1*t1;\n#else\n    float t2 =  cross2((a1-a2)_ij,(m1)_ij)/cross2((m2)_ij,(m1)_ij);\n    return a2+m2*t2;\n#endif\n#undef _ij\n}\n\n// point <-> line intersection of the \"shortest distance\" (perpendicular)\nvec3 shortest_intersect(vec3 p, vec3 a, vec3 m)\n{\n    float t = dot(p-a,m)/dot(m,m);\n    return a+m*t;\n}\n\n// REF: https://www.cuemath.com/geometry/incenter/\nvec4 tri_inscribed_circle(vec3 p0, vec3 p1, vec3 p2, out vec3 q0, out vec3 q1, out vec3 q2)\n{\n    vec3 a0 = normalize(p1-p0)+normalize(p2-p0);\n    vec3 a1 = normalize(p0-p1)+normalize(p2-p1);\n    vec3 a2 = normalize(p0-p2)+normalize(p1-p2);    \n\n    vec3 pc = intersect(p0,a0,p2,a2); // == intersect(pi,ai,pj,aj) for i != j        \n    q0 = shortest_intersect(pc,p1,p2-p1);\n    q1 = shortest_intersect(pc,p0,p2-p0);\n    q2 = shortest_intersect(pc,p0,p1-p0);\n    float r = mag(pc-q0); // == mag(pc-qi) for i\n    \n    return vec4(pc,r);\n}\n\n// REF: https://www.cuemath.com/geometry/circumcenter/\nvec4 tri_circum_circle(vec3 p0, vec3 p1, vec3 p2)\n{\n    vec3 n = cross(p1-p0,p2-p0);\n    \n    vec3 p10 = (p1+p0)/2.0;\n    vec3 m10 = cross(p1-p0,n);\n    vec3 p21 = (p2+p1)/2.0;\n    vec3 m21 = cross(p2-p1,n);\n    vec3 p02 = (p0+p2)/2.0;\n    vec3 m02 = cross(p0-p2,n);\n    \n    vec3 pc = intersect(p10,m10,p02,m02); // == intersect(pij,mij,plk,mlk) for i != l and j != k\n    float r = mag(pc-p0); // == mag(pc-pi) for i    \n    return vec4(pc,r);\n}\n\nvec4 tri_mixed_circle(vec3 p0, vec3 p1, vec3 p2)\n{\n    if (dot(p1-p0,p2-p0) < 0.0)\n        return 0.5*vec4(p1+p2,mag(p1-p2));\n    if (dot(p0-p1,p2-p1) < 0.0)\n        return 0.5*vec4(p0+p2,mag(p0-p2));\n    if (dot(p0-p2,p1-p2) < 0.0)\n        return 0.5*vec4(p0+p1,mag(p0-p1));\n    return tri_circum_circle(p0,p1,p2);\n}\n\nvoid tri_angle_bisectors(vec3 p0, vec3 p1, vec3 p2, out vec3 q0, out vec3 q1, out vec3 q2)\n{\n    vec3 a0 = normalize(p1-p0)+normalize(p2-p0);\n    vec3 a1 = normalize(p0-p1)+normalize(p2-p1);\n    vec3 a2 = normalize(p0-p2)+normalize(p1-p2);\n    \n    q0 = intersect(p0,a0,p1,p2-p1);\n    q1 = intersect(p1,a1,p0,p2-p0);\n    q2 = intersect(p2,a2,p0,p1-p0);    \n}\n\nvoid tri_perpendicular_bisectors(vec3 p0, vec3 p1, vec3 p2, out vec3 q0, out vec3 q1, out vec3 q2)\n{\n    q0 = (p2+p1)/2.0;\n    q1 = (p0+p2)/2.0;\n    q2 = (p1+p0)/2.0;\n}\n\n//////////\n// Main //\n//////////\n\n#define MAX_D 100000.0\n\n#define MATERIAL_TRIEDGE 1.0\n#define MATERIAL_TRICENTERMASS 2.0\n#define MATERIAL_TRIANGLEBISECTOR 3.0\n#define MATERIAL_TRIINSCRIBEDCIRCLE 4.0\n#define MATERIAL_TRIPERPENDICULARBISECTORS 5.0\n#define MATERIAL_TRICIRCUMCIRCLE 6.0\n#define MATERIAL_TRIMIXEDCIRCLE 7.0\n\nvec2 scene(in vec3 pos)\n{\n    float t = 0.38*iTime;\n    vec3 p0 = vec3(sin(1.97*t),cos(3.42*t),-5.0*(0.5+0.5*cos(2.12*t)));\n    vec3 p1 = vec3(sin(3.12*t),cos(0.71*t),-5.0*(0.5+0.5*cos(1.17*t)));\n    vec3 p2 = vec3(sin(1.12*t),cos(1.83*t),-5.0*(0.5+0.5*cos(0.53*t)));\n    \n    mat3 rot = mat3(\n        cos(t), 0.0, -sin(t),\n        0.0   , 1.0,     0.0,\n        sin(t), 0.0,   cos(t)\n    );\n#if 0 // force right triangle\n    p0 = rot*vec3(-0.5,-0.5,0.0);\n    p1 = rot*vec3(+0.5,-0.5,0.0);\n    p2 = rot*vec3(-0.5,+0.5,0.0);\n#elif 0 // force equilateral triangle\n    p0 = rot*vec3(-0.5,-0.5,0.0);\n    p1 = rot*vec3(+0.5,-0.5,0.0);\n    p2 = rot*vec3( 0.0,-0.5+sqrt(3.0/4.0),0.0);\n#elif 0 // force obtuse isosceles triangle\n    p0 = rot*vec3(-1.5,-0.5,0.0);\n    p1 = rot*vec3(+1.5,-0.5,0.0);\n    p2 = rot*vec3( 0.0, 0.0,0.0);\n#endif    \n        \n    vec3 n = normalize(cross(p1-p0,p2-p0));\n    \n    float d = MAX_D;\n    float m = 0.0;    \n    float cd;        \n    \n    float timer = 68.0 * fract(iTime / 68.0);\n\n    float tAngleBisectors = smoothstep(3.0, 10.0, timer) - smoothstep(18.0, 28.0, timer);\n    float tInscribedCircle = smoothstep(12.0, 17.0, timer) - smoothstep(30.0, 35.0, timer);\n    float tInscribedIntersection = smoothstep(22.0, 26.0, timer) - smoothstep(33.0, 35.0, timer);\n    float tPerpendicularBisectors = smoothstep(39.0, 42.0, timer) - smoothstep(43.0, 60.0, timer);\n    float tCircumCircle = smoothstep(42.0, 45.0, timer) - smoothstep(59.0, 67.0, timer);\n    float tMixedCircle = smoothstep(52.0, 57.0, timer) - smoothstep(59.0, 67.0, timer);\n    \n#if 0 // force showing all inscribed circle realted properties\n    tAngleBisectors = 1.0;\n    tInscribedCircle = 1.0;\n    tInscribedIntersection = 1.0;\n    tPerpendicularBisectors = 0.0;\n    tCircumCircle = 0.0;\n    tMixedCircle = 0.0;\n#endif\n#if 0 // force showing all cirumcircle realted properties\n    tAngleBisectors = 0.0;\n    tInscribedCircle = 0.0;\n    tInscribedIntersection = 0.0;\n    tPerpendicularBisectors = 1.0;\n    tCircumCircle = 1.0;\n    tMixedCircle = 1.0;\n#endif\n        \n    // draw triangle's edges\n    cd = sdCapsule(pos, p0, p1, 0.01);\n    if (cd < d) { d = cd; m = MATERIAL_TRIEDGE; }\n    cd = sdCapsule(pos, p1, p2, 0.01);\n    if (cd < d) { d = cd; m = MATERIAL_TRIEDGE; }\n    cd = sdCapsule(pos, p2, p0, 0.01);\n    if (cd < d) { d = cd; m = MATERIAL_TRIEDGE; }\n    \n    // draw triangle's center of mass\n    cd = sdSphere(pos - (p0+p1+p2)/3.0, 0.05);\n    if (cd < d) { d = cd; m = MATERIAL_TRICENTERMASS; }\n    \n    // draw traingle's angle bisector\n    if (0.0 < tAngleBisectors)\n    {\n        vec3 a0,a1,a2;\n        tri_angle_bisectors(p0,p1,p2,a0,a1,a2);\n        cd = min(sdSphere(pos-a0, 0.04*tAngleBisectors),sdCapsule(pos, p0, a0, 0.004*tAngleBisectors));\n        if (cd < d) { d = cd; m = MATERIAL_TRIANGLEBISECTOR; }\n        cd = min(sdSphere(pos-a1, 0.04*tAngleBisectors),sdCapsule(pos, p1, a1, 0.004*tAngleBisectors));\n        if (cd < d) { d = cd; m = MATERIAL_TRIANGLEBISECTOR; }\n        cd = min(sdSphere(pos-a2, 0.04*tAngleBisectors),sdCapsule(pos, p2, a2, 0.004*tAngleBisectors));\n        if (cd < d) { d = cd; m = MATERIAL_TRIANGLEBISECTOR; }\n    }\n     \n    // draw triangle's incenter and its inscribed circle\n    vec3 q0,q1,q2;\n    vec4 insribedCircle = tri_inscribed_circle(p0,p1,p2,q0,q1,q2);\n    if (0.0 < tInscribedCircle)\n    {\n        cd = abs(sdSphere(pos-insribedCircle.xyz,insribedCircle.w))-0.001;\n        cd = max(cd,abs(sdPlane(pos-insribedCircle.xyz,n,0.0))-0.05*tInscribedCircle);\n        if (cd < d) { d = cd; m = MATERIAL_TRIINSCRIBEDCIRCLE; }\n    }\n    if (0.0 < tInscribedIntersection)\n    {\n        cd = sdSphere(pos-q0, 0.06*tInscribedIntersection);\n        if (cd < d) { d = cd; m = MATERIAL_TRIINSCRIBEDCIRCLE; }\n        cd = sdSphere(pos-q1, 0.06*tInscribedIntersection);\n        if (cd < d) { d = cd; m = MATERIAL_TRIINSCRIBEDCIRCLE; }\n        cd = sdSphere(pos-q2, 0.06*tInscribedIntersection);\n        if (cd < d) { d = cd; m = MATERIAL_TRIINSCRIBEDCIRCLE; }\n    }\n\n    // draw triangle's circumcenter and its cirumcircle\n    vec4 circumCircle = tri_circum_circle(p0,p1,p2);\n    if (0.0 < tCircumCircle)\n    {\n        cd = abs(sdSphere(pos-circumCircle.xyz,circumCircle.w))-0.001;\n        cd = max(cd,abs(sdPlane(pos-circumCircle.xyz,n,0.0))-0.05*tCircumCircle);\n        if (cd < d) { d = cd; m = MATERIAL_TRICIRCUMCIRCLE; }\n        cd = sdSphere(pos-circumCircle.xyz, 0.06*tCircumCircle);\n        if (cd < d) { d = cd; m = MATERIAL_TRICIRCUMCIRCLE; }\n    }\n\n    // draw trinagle's mixed circle (circumcenter whose center \"forced\" to be inside the triangle)\n    if (0.0 < tMixedCircle)\n    {\n        vec4 mixedCircle = tri_mixed_circle(p0,p1,p2);\n        if (mag(mixedCircle - circumCircle) > 0.0)\n        {\n            cd = abs(sdSphere(pos-mixedCircle.xyz,mixedCircle.w))-0.001;\n            cd = max(cd,abs(sdPlane(pos-mixedCircle.xyz,n,0.0))-0.05*tMixedCircle);\n            if (cd < d) { d = cd; m = MATERIAL_TRIMIXEDCIRCLE; }\n            cd = sdSphere(pos-mixedCircle.xyz, 0.06*tMixedCircle);\n            if (cd < d) { d = cd; m = MATERIAL_TRIMIXEDCIRCLE; }\n        }\n    }\n    \n    // draw triangle's perpendicular bisectors\n    if (0.0 < tPerpendicularBisectors)\n    {\n        vec3 g0,g1,g2;\n        tri_perpendicular_bisectors(p0,p1,p2,g0,g1,g2);\n        cd = min(sdSphere(pos-g0, 0.04*tPerpendicularBisectors),sdCapsule(pos, g0, circumCircle.xyz, 0.004*tPerpendicularBisectors));\n        if (cd < d) { d = cd; m = MATERIAL_TRIPERPENDICULARBISECTORS; }\n        cd = min(sdSphere(pos-g1, 0.04*tPerpendicularBisectors),sdCapsule(pos, g1, circumCircle.xyz, 0.004*tPerpendicularBisectors));\n        if (cd < d) { d = cd; m = MATERIAL_TRIPERPENDICULARBISECTORS; }\n        cd = min(sdSphere(pos-g2, 0.04*tPerpendicularBisectors),sdCapsule(pos, g2, circumCircle.xyz, 0.004*tPerpendicularBisectors));\n        if (cd < d) { d = cd; m = MATERIAL_TRIPERPENDICULARBISECTORS; }\n    }\n\n    return vec2(d,m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec3 accum = vec3(0.0);\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n\n        vec2 pw = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        vec3 ro = vec3(0.0,0.0,2.0);\n        vec3 rd = normalize(vec3(pw,-2.0));\n\n        float t = 0.0;\n        vec2 dm;\n        for(int i=0; i<128; ++i)\n        {\n            vec3 p = ro + t*rd;\n            dm = scene(p);\n            if (dm.x <= 0.0) \n                break;\n            t += dm.x;\n        }\n\n        vec3 col = sqr(vec3(0.05,0.06,0.03));\n        if (t < MAX_D)\n        {\n            if (MATERIAL_TRIEDGE == dm.y) col = vec3(0.80,0.72,0.63);\n            if (MATERIAL_TRICENTERMASS == dm.y) col = vec3(0.58,0.52,0.14);;\n            if (MATERIAL_TRIANGLEBISECTOR == dm.y) col = vec3(0.23,0.63,0.44);\n            if (MATERIAL_TRIINSCRIBEDCIRCLE == dm.y) col = vec3(0.48,0.12,0.83);\n            if (MATERIAL_TRIPERPENDICULARBISECTORS == dm.y) col = vec3(0.88,0.03,0.08);\n            if (MATERIAL_TRICIRCUMCIRCLE == dm.y) col = vec3(0.14,0.23,0.87);\n            if (MATERIAL_TRIMIXEDCIRCLE == dm.y) col = vec3(0.97,0.36,0.11);\n        }\n        \n        col = pow(col, vec3(1.0/2.2));\n        accum += col;\n    }\n    accum /= float(AA*AA);\n\n    fragColor = vec4(accum/(accum+vec3(1.0)), 1.0);\n}","name":"Image","description":"","type":"image"}]}