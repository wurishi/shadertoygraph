{"ver":"0.1","info":{"id":"Ns3fDl","date":"1657419277","viewed":145,"name":"sphere of many colors","username":"pb","description":"accumulate color after ray hits sphere and continues inward","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["fbm","sphere","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// philip.bertani@gmail.com\n\n#define oct 9   //number of fbm octaves\n#define pi  3.14159265\n\nfloat random(vec3 p) {\n    //a random modification of the one and only random() func\n    return fract( sin( dot( p, vec3(12., 90., -.8)))* 1e5 );\n}\n\n\n//this is taken from Visions of Chaos shader \"Sample Noise 2D 4.glsl\"\n//and mangled to use vec3s at corners of tetrahedron\nfloat noise(vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    float a = random(i + vec3(1.,1.,1.));\n    float b = random(i + vec3(1.,-1.,-1.));\n    float c = random(i + vec3(-1.,1.,1.));\n    float d = random(i + vec3(-1.,1.,-1.));\n    vec2 u = f.yz *f.xy*(3.-2.*f.xz); //smoothstep here, it also looks ok with u=f.yz\n    \n    return mix(a,b,u.x) + (c-a)*u.y*(1.-u.x) + (d-b)*u.x*u.y;\n\n}\n\nfloat fbm3d(vec3 p) {\n    float v = 0.;\n    float a = .5;\n  \n    for (int i=0; i<oct; i++) {\n        v += a * noise(p);\n        p = p * 2.;\n        a *= .57*(1.+max(.1*sin(iTime/2.),0.));  //small increase causes increased brightness\n    }\n    return v;\n}\n\nmat3 rxz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(cc,0.,-ss,\n                0.,1.,0.,\n                ss,0.,cc);                \n}\nmat3 ryz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(1.,0.,0.,\n                0.,cc,-ss,\n                0.,ss,cc);\n}   \n\nstruct RayInfo  {\n    vec3 p1,p2;\n    bool hit;\n};\n\nRayInfo RaySphereIntersect(vec3 ro, vec3 rd, vec3 spherepos, float r) {\n\n    vec3  a = (spherepos - ro);\n    float b = dot(rd, a);\n    float c = dot(a,a) - r*r;\n    float d = b*b - c;\n\n    RayInfo ri; ri.hit=false;\n\n    if ( d < 0.0 ) return ri;\n\n    float sd = sqrt(d);\n    float t1 = b - sd, t2 = b + sd;\n\n    ri.p1 = ro + rd * t1;\n    ri.p2 = ro + rd * t2;\n  \n    ri.hit = true;\n\n    return ri;\n\n}\n\n\nvec3 get_color(vec3 p) {\n    vec3 q;\n    q.x = fbm3d(p);\n    q.y = fbm3d(p.yzx);\n    q.z = fbm3d(p.zxy);\n\n    float f = fbm3d(p + q);\n    \n    return f*q;\n}\n\nvec3 sphere_colors(vec3 ro, vec3 rd) {\n\n    \n    vec3 p = ro *(2.+cos(iTime/7.));  //zoom in and out a little\n    \n    vec3 cc = vec3(0.);\n\n    float stepsize = .01;\n    float totdist = stepsize;\n    \n    for (int i=0; i<40; i++) {\n       vec3 cx = get_color(p+vec3(0.,0.,iTime/5.));\n       p += stepsize*rd;\n       //float fi = float(i);\n       cc += exp(-totdist*totdist)* cx;\n       totdist += stepsize;\n       //rd = ryz(.5)*rd;   //yz rotation here\n    }\n    \n    \n    cc = .5 + 2.3*(cc-.5);  //more contrast makes nice shimmering blobs\n    cc = pow( cc / 50., vec3(6.));    //play with this\n    \n    return cc;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    //vec2 mm = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    vec3 rd = normalize( vec3(uv, -2.) );  \n    vec3 ro = vec3(0.); \n    vec3 spherepos = vec3(0.,0.,-2.5);\n    vec3 cc = vec3(0.);\n    \n   \n    ro += vec3(0.,0., max(-1.3,min(0.,1.3*sin(iTime/4.))));\n    \n    RayInfo ri = RaySphereIntersect(ro,rd,spherepos,1.);    \n    \n    if ( ri.hit ) {\n    \n        mat3 rot2 = rxz(-iTime/9.)*ryz(iTime/20.);\n    \n        ro = rot2*ri.p1;\n        rd = normalize( spherepos - ro);  //new rd point to center of sphere\n    \n        cc = sphere_colors(ro,rd);\n    }\n    \n    fragColor = vec4(cc,1.0);\n    \n    \n}\n","name":"Image","description":"","type":"image"}]}