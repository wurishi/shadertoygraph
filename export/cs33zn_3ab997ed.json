{"ver":"0.1","info":{"id":"cs33zn","date":"1676847875","viewed":97,"name":"Basic Apollonian [159 Chars]","username":"AleDev","description":"A simple apollonian shader","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["apollonian","tweet","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -18 Chars Version! Thanks to FabriceNeyret2\n\nvoid mainImage( out vec4 C, vec2 P )\n{\n\tvec2  r = iResolution.xy, q = (P+P-r)/r.y;\n    float s = .004, i = s, k;\n    for(; i++ < 11.; q = 1. - mod((q*=k)+1.,2.) ) \n        s *= k = 1./dot(q,q);\n    C = abs(q.yyyy)/s;\n}\n\n\n/* 157 Chars Version (This does not work on some systems)\nvoid mainImage( out vec4 C, vec2 P )\n{\n\tvec2  r = iResolution.xy, q = (P+P-r)/r.y;\n    float s = .004, i, k;\n    for(; i++ < 11.; q = 1. - mod((q*=k)+1.,2.) ) \n        s *= k = 1./dot(q,q);\n    C = abs(q.yyyy)/s;\n}\n\n/*/\n\n/* Old Version 177 Chars\nvoid mainImage( out vec4 C, in vec2 P )\n{\n\tvec2 r=iResolution.xy,q=((P+P-r)/r.y);//*sin(iTime*.2);\n    float s=1.,k,i;\n    for(C-=C;i++<1e1;q=1.-fract((q*=k)*.5+.5)*2.) s*=k=1./dot(q,q);\n    C+=1e3*(.25*abs(q.y)/s);\n}\n/*/","name":"Image","description":"","type":"image"}]}