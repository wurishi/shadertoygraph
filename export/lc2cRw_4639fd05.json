{"ver":"0.1","info":{"id":"lc2cRw","date":"1722591136","viewed":109,"name":"chamfered rectangle","username":"nomkcode","description":"this is a color gradient demo","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["rectangle","colorgradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 chamferedRectangle(vec2 uv, float w, float h, float r, vec3 innerColor, vec3 outerColor, float offset) \n{\n    vec3 col = vec3(1.0);\n    float bias = 0.002;\n    \n    float len1 = length(uv - vec2(w * 0.5-r, h * 0.5 -r));\n    float len2 = length(uv - vec2(w * 0.5-r, -h * 0.5+r));\n    float len3 = length(uv - vec2(-w * 0.5+r, h * 0.5-r));\n    float len4 = length(uv - vec2(-w * 0.5+r, -h * 0.5+r));\n\n    float alpha1 = (1.0 - smoothstep(r, r + bias, len1));\n    alpha1 += (1.0 - smoothstep(r, r + bias, len2));\n    alpha1 += (1.0 - smoothstep(r, r + bias, len3));\n    alpha1 += (1.0 - smoothstep(r, r + bias, len4));\n    alpha1 *= step(0.5 * w-r, uv.x) + 1.0 - step(-0.5*w+r, uv.x);\n    alpha1 *= step(0.5 * h-r, uv.y) + 1.0 - step(-0.5*h+r, uv.y);\n    \n    float alpha2 = (1.0 - smoothstep(w*0.5 - r, w*0.5-r, abs(uv.x))) * (1.0 - smoothstep(h * 0.5, h *0.5+bias, abs(uv.y)));\n    alpha2 += (1.0 - smoothstep(w * 0.5, w * 0.5 + bias, abs(uv.x))) * (1.0 - smoothstep(h*0.5-r, h*0.5-r, abs(uv.y)));\n    alpha2 = clamp(alpha2, 0.0, 1.0);\n    \n    float alpha12 = clamp(alpha1 + alpha2, 0.0, 1.0);\n    col = alpha12 * innerColor + (1.0 - alpha12) * outerColor;\n    \n    // 中间不显示\n    float r2 = r - offset;\n    float alpha3 = 0.0;\n    alpha3 += (1.0 - smoothstep(r2, r2 + bias, len1));\n    alpha3 += (1.0 - smoothstep(r2, r2 + bias, len2));\n    alpha3 += (1.0 - smoothstep(r2, r2 + bias, len3));\n    alpha3 += (1.0 - smoothstep(r2, r2 + bias, len4));\n    alpha3 *= step(0.5 * w-r, uv.x) + 1.0 - step(-0.5*w+r, uv.x);\n    alpha3 *= step(0.5 * h-r, uv.y) + 1.0 - step(-0.5*h+r, uv.y);\n    \n    alpha3 += (1.0 - smoothstep(w*0.5-r, w*0.5-r, abs(uv.x))) * (1.0 - smoothstep(h*0.5-offset, h*0.5-offset + bias, abs(uv.y)));\n    alpha3 += (1.0 - smoothstep(w*0.5-offset, w*0.5-offset+bias, abs(uv.x))) * (1.0 - smoothstep(h*0.5-r, h*0.5-r, abs(uv.y)));\n    \n    alpha3 = clamp(alpha3, 0.0, 1.0);\n    col = alpha3 * outerColor + (1.0 - alpha3) * col;\n   \n    return col;\n}\n \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv - vec2(0.5, 0.5);\n    float scale = iResolution.y / iResolution.x;\n    uv.y *= scale;\n    \n    vec3 color1 = vec3(255.0, 116.0, 64.0) / 255.0;\n    vec3 color2 = vec3(255.0, 169.0, 79.0) / 255.0;\n    vec3 color3 = vec3(59.0, 165.0, 255.0) / 255.0;\n    vec3 color4 = vec3(49.0, 113.0, 255.0) / 255.0;\n    \n    float rotate = fract(0.1 * iTime) * 360.0;\n    float angle = mod(degrees(atan(uv.y, uv.x)) + rotate, 360.0);\n    \n    vec3 col = vec3(1.0);\n    \n    vec3 color = vec3(0.0);\n    float alpha1 = smoothstep(0.0, 90.0, angle);\n    color += (1.0 - alpha1) * step(0.0, angle) * color4 + alpha1 * (1.0 - step(90.0, angle)) * color1;\n\n    float alpha2 = smoothstep(90.0, 180.0, angle);\n    color += (1.0 - alpha2) * step(90.0, angle) * color1 + alpha2 * (1.0 - step(180.0, angle)) * color2;\n    \n    float alpha3 = smoothstep(180.0, 270.0, angle);\n    color += (1.0 - alpha3) * step(180.0, angle) * color2 + alpha3 * (1.0 - step(270.0, angle)) * color3;\n    \n    float alpha4 = smoothstep(270.0, 360.0, angle);\n    color += (1.0 - alpha4) * step(270.0, angle) * color3 + alpha4 * (1.0 - step(360.0, angle)) * color4;\n    \n    vec3 fragColor1 = chamferedRectangle(uv, 0.8, 0.1, 0.03, color, col, 0.005);\n\n   \n    // Output to screen\n    fragColor = vec4(fragColor1, 1.0);\n}","name":"Image","description":"","type":"image"}]}