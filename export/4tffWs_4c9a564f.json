{"ver":"0.1","info":{"id":"4tffWs","date":"1513812035","viewed":117,"name":"Shiny Waves","username":"jchabin1","description":"Raymarched waves.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nconst float EPSILON = 0.0001;\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat sphere(vec3 p, vec3 pos, float size){\n    return length(p - pos) - size;\n}\n\nfloat box(vec3 p, vec3 pos, vec3 size){\n    return length(max(abs(p - pos) - size, 0.0));\n}\n\nfloat sceneDist(vec3 p){\n\treturn p.y + sin(p.x) * sin(iTime) + sin(p.z) * cos(iTime) + sin((p.x + p.z + iTime * 3.0) * 0.1) * 5.0;\n}\n\nvec3 getNormal(vec3 p){\n    return normalize(vec3(\n        sceneDist(vec3(p.x + EPSILON, p.y, p.z)) - sceneDist(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneDist(vec3(p.x, p.y + EPSILON, p.z)) - sceneDist(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneDist(vec3(p.x, p.y, p.z  + EPSILON)) - sceneDist(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 cameraAngle = vec2(iTime * 0.5, 0.0);\n\tvec3 camera = vec3(0.0, 6.5, 0.0);\n    float fov = PI / 2.0;\n    \n    vec2 pos = vec2((2.0 * (fragCoord.x / iResolution.x) - 1.0), (2.0 * (fragCoord.y / iResolution.y) - 1.0) / iResolution.x * iResolution.y);\n    \n    float t = 0.0;\n    const int maxSteps = 200;\n    vec3 direction = normalize(vec3(sin(pos.x * fov + cameraAngle.x), sin(pos.y * fov + cameraAngle.y), cos(pos.x * fov + cameraAngle.x) * cos(pos.y * fov + cameraAngle.y)));\n    \n    vec4 color = vec4(1.0);\n    \n    for(int i = 0; i < maxSteps; ++i)\n    {\n        vec3 p = (camera) + direction * t;\n        float d = sceneDist(p);\n        if(d < EPSILON)\n        {\n            vec3 light = vec3(1.0, 1.0, 1.0);\n            vec3 normal = getNormal(p);\n            //color = vec4(vec3(clamp(dot(normalize(light), normal), 0.0, 1.0)), 1.0);\n            color = texture(iChannel0, reflect(normalize(p - camera), normal));\n            //color += vec4(vec3(dot(normalize(light), normal)), 1.0) * 0.5;\n            break;\n        }\n        t += clamp(d, 0.01, 0.5);\n    }\n\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}