{"ver":"0.1","info":{"id":"3tKGzh","date":"1589174745","viewed":127,"name":"lofi shader to relax/study with","username":"jcf1","description":"Chill with a cow.","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["2d","sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MlsXD4","filepath":"https://soundcloud.com/lofi_girl/lazy-sunday","previewfilepath":"https://soundcloud.com/lofi_girl/lazy-sunday","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A dedication to the artist formally known as Chilled Cow, Lofi Girl.\n// Every part of the cow is made using circles.\n\n// Music from Lofi Girl's Soundcloud:\n// https://soundcloud.com/lofi_girl\n\n// Shaders referenced\n// \"Input - Sound\" by iq: https://www.shadertoy.com/view/Xds3Rr\n// \"Noise - value - 2D \" by iq: https://www.shadertoy.com/view/lsf3WH\n\n//=======================================================================\n// iq Noise Functions\n// Noise used to create the spots on the cow's body\nfloat hash(vec2 p)\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n//=======================================================================\n\nvoid body(vec2 center, float body_radius, vec2 res, vec2 xy, inout vec3 col)\n{\n    if(length(xy - center) <= body_radius)\n    {\n        xy = xy/res;\n        vec2 uv = xy/0.5;\n        uv *= 8.0;\n        \n        // iq noise function\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tfloat f  = 0.5000*noise( uv ); uv = m*uv;\n\t\tf += 0.1250*noise( uv ); uv = m*uv;\n        f = 0.5 + 0.5*f;\n        f = step(0.52,f);\n    \tcol = vec3(f);\n    }\n}\n\nvoid feet(vec2 body_center, float body_radius, vec2 res, vec2 xy, inout vec3 col)\n{\n    float foot_size = res.x / 12.0;\n    vec2 left_foot  = body_center - vec2((0.5 * body_radius), (1.0 * body_radius));\n    vec2 right_foot = body_center - vec2(-(0.5 * body_radius), (1.0 * body_radius));      \n    \n    if(((length(xy - left_foot) <= foot_size) || (length(xy - right_foot) <= foot_size)) && (xy.y >= left_foot.y))\n    {\n     \tcol = vec3(0.2);   \n    }\n}\n\nvoid head(vec2 center, float head_radius, vec2 res, vec2 xy, inout vec3 col)\n{    \n    vec2 nose_center = center - vec2(0.0,res.y/2.4);\n    float nose_size  = res.x / 5.0;\n    \n    float nostril_size = res.x / 90.0;\n    vec2 left_nostril  = center - vec2(res.x/50.0,res.y/7.0);\n    vec2 right_nostril = center - vec2(-res.x/50.0,res.y/7.0);\n    \n    float glass_size = res.x / 20.0;\n    vec2 left_glass  = center + vec2(res.x/22.0,res.y/12.0);\n    vec2 right_glass = center + vec2(-res.x/22.0,res.y/12.0);\n    \n    if(length(xy - center) <= head_radius)\n    {\n        // Nose\n        if(length(xy - nose_center) <= nose_size)\n        {\n            if((length(xy - left_nostril) <= nostril_size) || (length(xy - right_nostril) <= nostril_size))\n            {\n            \tcol = vec3(0.0);\n            }\n            else\n            {\n         \t\tcol = vec3(1.0,0.6,1.0);\n            }\n        }\n        else \n        {\n            // Sunglasses\n            if(((length(xy - left_glass) <= glass_size) || (length(xy - right_glass) <= glass_size)) && (xy.y <= left_glass.y))\n            {\n                col = vec3(0.0);\n            }\n            else\n            {\n    \t\t\tcol = vec3(0.9);\n            }\n        }\n    }\n}\n\nvoid headphones(vec2 head_center, float head_radius, vec2 res, vec2 xy, inout vec3 col)\n{\n   \tvec3 color = vec3(1.0,0.0,0.0);\n    float headband_width = res.x / 70.0;\n    \n    float cup_size = res.x / 20.0;\n    vec2 left_cup  = head_center - vec2(res.x / 8.5,0.0);\n    vec2 right_cup = head_center + vec2(res.x / 8.5,0.0);\n    \n    if(((length(xy - left_cup) <= cup_size) && (xy.x <= left_cup.x)) || ((length(xy - right_cup) <= cup_size) && (xy.x >= right_cup.x)))\n    {\n   \t\tcol = color;\n    }\n    else if((length(xy - head_center) > head_radius) && (length(xy - head_center) <= head_radius + headband_width) && (xy.y >= head_center.y)) {\n        col = color;\n    }\n}\n\nvoid horns(vec2 head_center, vec2 res, vec2 xy, inout vec3 col)\n{\n    vec3 color = vec3(0.4);\n    \n    float horn_size        = res.x / 20.0;\n    float horn_offset_size = res.x / 25.0;\n    \n\tvec2 left_horn         = head_center + vec2(-res.x / 15.0, res.y / 4.7);\n    vec2 right_horn        = head_center + vec2(res.x / 15.0, res.y / 4.7);\n    vec2 left_horn_offset  = left_horn + vec2(res.x * 0.01, res.y * 0.02);\n    vec2 right_horn_offset = right_horn - vec2(res.x * 0.01, -res.y * 0.02);\n    \n    if((length(xy - left_horn) <= horn_size) && (length(xy - left_horn_offset) >= horn_offset_size))\n    {\n     \tcol = color;\n    }\n    else if((length(xy - right_horn) <= horn_size) && (length(xy - right_horn_offset) >= horn_offset_size))\n    {\n     \tcol = color;\n    }\n}\n\n// Change background colors over time and reacts to music\n// Based on iq sound demo\nvec3 background(vec2 res, vec2 xy) {\n    float t   = iTime/5.0;\n    vec3 col1 = vec3(abs(sin(t)),abs(sin(t/5.0)),abs(sin(t/2.0)));\n    vec3 col2 = vec3(abs(sin(t/3.0)),abs(sin(t/10.0)),abs(sin(t)));\n    vec2 uv   = xy/(res * 0.75);\n    float fft = smoothstep(0.45,0.6,texture( iChannel0, vec2(uv.y,0.5) ).x);\n    return mix(col1, col2, fft);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = background(iResolution.xy,fragCoord);\n    \n    // Cow Body and Feet\n    vec2 center = vec2(iResolution.x/2.0,(1.3 * iResolution.y)/3.0);\n    float body_radius = iResolution.x / 5.0;\n    body(center, body_radius, iResolution.xy, fragCoord, col);\n    feet(center, body_radius, iResolution.xy, fragCoord, col);\n    \n    // Calculate head position based on music\n    vec2 head_pos = vec2(iResolution.x/2.0,(1.8 * iResolution.y)/3.0);\n    float freq = smoothstep(0.0, 1.0, texture( iChannel0, vec2(0.2,0.25) ).x);\n    head_pos.y += mix(0.0, (0.1 * iResolution.y), freq);\n    \n    // Cow Head\n    float head_radius = iResolution.x / 8.0;\n    horns(head_pos, iResolution.xy, fragCoord, col);\n    head(head_pos, head_radius, iResolution.xy, fragCoord, col);\n    headphones(head_pos, head_radius, iResolution.xy, fragCoord, col);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}