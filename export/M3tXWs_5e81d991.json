{"ver":"0.1","info":{"id":"M3tXWs","date":"1719812755","viewed":78,"name":"Pseudo Spatiotemporal Blue Noise","username":"Zentient","description":"A pseudo 3d blue noise generator of use to pretty much nobody.\nIt's significantly more expensive than pulling from a texture, and provides worse results than just randomly varying blue noise","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["noise","temporal","hashing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RES iResolution.xy\n\nvoid mainImage( out vec4 col, in vec2 vpos )\n{\n    vec2 uv = vpos / RES;\n    col = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RES iResolution.xy\nvec4 hash43(vec3 inp)\n{\n\tuint pg = uint(RES.x * RES.x * inp.z) % 0xFFFFFFu + uint(RES.x * inp.y + inp.x);\n\tuint state = pg * 747796405u + 2891336453u;\n\tuint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n\tuvec4 RGBA = uvec4(0xFFu) & uvec4(word) >> uvec4(0,8,16,24); \n\treturn vec4(RGBA) / float(0xFFu);\n}\n\n//https://www.shadertoy.com/view/4djSRW\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec4 psuedoB(vec3 xyz)\n{\n    vec4 noise = hash43(xyz);\n    vec4 bl;\n    for(int i; i < 27; i++)\n    {\n        vec3 offset = vec3(floor(float(i) / 27.0), int(float(i) / 9.0) % 3, i % 3) - 1.0;\n        bl += hash43(xyz + offset);\n    }\n         \n    return noise - (bl / 27.0) + 0.5;\n}\n\nvoid mainImage( out vec4 col, in vec2 vpos )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = vpos/iResolution.xy;\n    \n    col = hash43(vec3(vpos, iFrame + 1 % 2048));\n    \n    if(uv.y > 0.334) col = psuedoB(vec3(vpos, float(iFrame + 1 % 2048)));\n    \n    \n    \n    if(uv.y > 0.667) col = texelFetch(iChannel1, ivec2(vpos + 128.0 * hash21(float(iFrame))) % 1024, 0 );\n    \n    if(iFrame > 1 && uv.x > 0.5) {\n        col = mix(texture(iChannel0, uv), col, 1.0 / float(iFrame));\n    }\n    //col = vec4(col.g);\n    //vec2 blockxy = floor(vpos / 64.0);\n    //float block = floor(blockxy.x * RES.x / 64.0) / 64.0 + blockxy.y;\n\n    // Time varying pixel color\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}