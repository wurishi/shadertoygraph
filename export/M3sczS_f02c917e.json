{"ver":"0.1","info":{"id":"M3sczS","date":"1727290282","viewed":18,"name":"Cube of cubes of dots","username":"jcraw","description":"learning simple camera in 3d\nfrom Martin at https://www.youtube.com/watch?v=PBxuVlp7nuM","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 rayOrigin, vec3 rayDirection, vec3 point) {\n    vec3 rayOriginToPoint = point - rayOrigin;\n    float parallelogramArea = length(cross(rayOriginToPoint, rayDirection));\n    float distanceToPoint = parallelogramArea / length(rayDirection);\n    return distanceToPoint;\n}\n\nfloat DrawPoint(vec3 rayOrigin, vec3 rayDirection, vec3 point) {\n    float distanceToPoint = DistLine(rayOrigin, rayDirection, point);\n    float dotInSpace = smoothstep(.1, .06, distanceToPoint);\n    return dotInSpace;\n}\n\nfloat DrawCube(vec3 rayOrigin, vec3 rayDirection, vec3 center, float diameter) {\n    float cube = 0.;\n    vec3 offset = vec3(diameter/2.) - center;\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(0., 0., 0.) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(0., 0., diameter) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(0., diameter, 0.) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(0., diameter, diameter) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(diameter, 0., 0.) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(diameter, 0., diameter) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(diameter, diameter, 0.) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(diameter, diameter, diameter) - offset);\n    return cube;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 changingColor = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 rayOrigin = vec3(5.*sin(iTime*.75), 0, -5.* cos(iTime*.75)); //.5 + 3.*cos(iTime), -3.); \n    //vec3 rayOrigin = vec3(0, 0, -5.);    // static camera\n    vec3 lookAt = vec3(.0);\n    \n    vec3 forward = normalize(lookAt - rayOrigin);\n    vec3 right = normalize(cross(vec3(0, 1, 0), forward));\n    vec3 up = normalize(cross(forward, right));\n    \n    float zoom = .5;\n    vec3 centerOfScreen = rayOrigin + forward*zoom;\n    \n    vec3 intersectionWithScreen = centerOfScreen + uv.x * right + uv.y * up;\n    vec3 rayDirection = intersectionWithScreen - rayOrigin;\n    \n    float dots = 0.;\n    \n    // well its a cube of cubes\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-2, -2, -2), .5);\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-2, -2, 2), .5);\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-2, 2, -2), .5);\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-2, 2, 2), .5);\n    dots += DrawCube(rayOrigin, rayDirection, vec3(2, -2, -2), .5);\n    dots += DrawCube(rayOrigin, rayDirection, vec3(2, -2, 2), .5);\n    dots += DrawCube(rayOrigin, rayDirection, vec3(2, 2, -2), .5);\n    dots += DrawCube(rayOrigin, rayDirection, vec3(2, 2, 2), .5);\n    \n    vec3 col = vec3(dots);\n    \n   // col = vec3(pointDirection);\n    //col.b = 0.;\n\n    // Output to screen\n    col *= changingColor;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}