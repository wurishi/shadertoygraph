{"ver":"0.1","info":{"id":"ctsBRr","date":"1692540654","viewed":89,"name":"closer you get ,more you miss!","username":"hydrophobic_fish","description":"Gyroid for noise generation and FBM by repeatedly applying the gyroid with different scales ,color gradients for some fun.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define ss(a,b,t) smoothstep(a,b,t)\n\nfloat gyroid (vec3 seed) {\n    return dot(sin(seed), cos(seed.yzx));\n}\n\nfloat fbm (vec3 seed) {\n    float result = 0.0, a = 0.5;\n    for (int i = 0; i < 5; ++i, a /= 2.0) {\n        seed.z += result * 0.5;\n        result += abs(gyroid(seed / a) * a);\n    }\n    return result;\n}\n\nvec3 getColor(float t) {\n    // Define a color palette here\n    vec3 colors[5];\n    colors[0] = vec3(0.0, 0.5, 0.0); // Blue\n    colors[1] = vec3(0.0, 1.0, 0.0); // Green\n    colors[2] = vec3(1.0, 0.0, 0.0); // Red\n    colors[3] = vec3(1.0, 1.0, 0.0); // Yellow\n    colors[4] = vec3(0.8, 0.2, 0.8); // Purple\n    \n    int numColors = 5;\n    int index = int(floor(t * float(numColors)));\n    return colors[index];\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord - R / 2.0) / R.y;\n    float d = length(p);\n    p = normalize(p) * log(length(p) * 0.5);\n    p = vec2(atan(p.y, p.x), length(p) * 0.5 + iTime * 0.5);\n    float shades = 6.0;\n    float shape = ss(0.9, 0.5, fbm(vec3(p * 0.5, 0.0)));\n    float shade = ceil(shape * shades) / shades;\n    \n    // Get a color based on the shade value\n    vec3 bgColor = getColor(shade);\n    \n    vec3 color = mix(bgColor, vec3(1.0), ss(2.0, 0.0, d));\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}