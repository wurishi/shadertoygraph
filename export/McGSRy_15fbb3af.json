{"ver":"0.1","info":{"id":"McGSRy","date":"1718018424","viewed":79,"name":"3D perlin noise effect","username":"Dalmador","description":"fork of https://www.shadertoy.com/view/lctXWN","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","perlinoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define numOctaves 7.\n#define twoPi 6.28318530718\n\n//https://www.shadertoy.com/view/mtyGWy\nvec3 palette( float t ) {\n    vec3 a = vec3(0.500,0.500,0.500);\n    vec3 b = vec3(0.500,0.500,0.500);\n    vec3 c = vec3(1.000,1.000,1.000);\n    vec3 d = vec3(0.000,0.333,0.667);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// https://www.shadertoy.com/view/ttc3zr\nuvec2 murmurHash23(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uvec2 h = uvec2(1190494759u, 2147483647u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\nvec2 hash23(vec3 src) {\n    uvec2 h = murmurHash23(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\n\nvec3 randomVec3(vec3 p)\n{       \n    vec2 u = hash23(p);  \n    float phi = acos(2. * u.x - 1.) - twoPi * 0.25;\n    float lambda = twoPi * u.y;\n    return vec3(cos(phi) * cos(lambda), cos(phi) * sin(lambda), sin(phi));\n}\n\nfloat interpolate(float a, float b, float f) {\n\n    return (b - a) * ((f * (f * 6.0 - 15.0) + 10.0) * f * f * f) + a;\n}\n\nfloat perlinNoise(vec3 p)\n{\n    float xi = floor(p.x);\n    float yi = floor(p.y);\n    float zi = floor(p.z);\n    float xf = fract(p.x);\n    float yf = fract(p.y);\n    float zf = fract(p.z);\n    \n    float btr = dot(vec3(xf-1.0, yf-1.0, zf-1.0), randomVec3(vec3(xi+1.0, yi+1.0, zi+1.0)));\n    float btl = dot(vec3(xf, yf-1.0, zf-1.)    , randomVec3(vec3(xi, yi+1.0, zi+1.)));\n    float bbr = dot(vec3(xf-1.0, yf, zf-1.)    , randomVec3(vec3(xi+1.0, yi, zi+1.)));\n    float bbl = dot(vec3(xf, yf, zf-1.)        , randomVec3(vec3(xi, yi, zi+1.0)));\n    float ftr = dot(vec3(xf-1.0, yf-1.0, zf), randomVec3(vec3(xi+1.0, yi+1.0, zi)));\n    float ftl = dot(vec3(xf, yf-1.0, zf)    , randomVec3(vec3(xi, yi+1.0, zi)));\n    float fbr = dot(vec3(xf-1.0, yf, zf)    , randomVec3(vec3(xi+1.0, yi, zi)));\n    float fbl = dot(vec3(xf, yf, zf)        , randomVec3(vec3(xi, yi, zi)));\n    \n    return interpolate(interpolate(interpolate(fbl, fbr, xf), interpolate(ftl, ftr, xf), yf), \n                       interpolate(interpolate(bbl, bbr, xf), interpolate(btl, btr, xf), yf), zf);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv *= pow(1.2, 4.);\n    //uv.x += iTime / 3.;\n    vec3 pos = vec3(uv, iTime / 6.);\n    \n    float res = 0.;\n    float amplitude = 1.0;\n    float frequency = 2.0;\n    for (float i = 0.; i < numOctaves; i++)\n    {\n        float n = amplitude * perlinNoise(vec3((pos + vec3(frequency, amplitude, amplitude)) * frequency));\n        n = abs(n);\n        n = amplitude - n;\n        n = n * n * 0.7;\n        res += n;\n        \n        amplitude *= 0.5;\n        frequency *= 2.0;\n        \n    }\n    \n   \n    vec3 col = palette(res + iTime / 15. + perlinNoise(vec3(uv, iTime / 10.)));\n    fragColor = vec4(col, 0.);\n}\n","name":"Image","description":"","type":"image"}]}