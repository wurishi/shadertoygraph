{"ver":"0.1","info":{"id":"tsVczK","date":"1603283648","viewed":115,"name":"pipe editor","username":"jt","description":"pipe editor - click to draw (still buggy, WORK IN PROGRESS)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["editor","pipe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// keep in sync with bufferA!\n#define N 16.0\n\nfloat get_cell(vec2 p)\n{\n    //return step(0.5, texture(iChannel0, vec3(floor(p*N)/N, iTime/10.0)).x);\n    return step(0.5, texelFetch(iChannel0, ivec2(iResolution.xy * vec2(floor(p*N)/N)), 0).x);\n}\n\nfloat vertical(vec2 p)\n{\n    return min(step(0.4, p.x), step(p.x, 0.6));\n}\n\nfloat horizontal(vec2 p)\n{\n    return vertical(p.yx);\n}\n\nfloat curve0(vec2 p)\n{\n    return min(step(0.4, length(p)), step(length(p), 0.6));\n}\n\nfloat curve1(vec2 p)\n{\n    p.x = 1.0 - p.x;\n    return curve0(p);\n}\n\nfloat curve2(vec2 p)\n{\n    return curve0(1.0 - p);\n}\n\nfloat curve3(vec2 p)\n{\n    p.y = 1.0 - p.y;\n    return curve0(p);\n}\n\nfloat norm(vec2 p)\n{\n    float n = 7.0;\n    return pow(pow(abs(p.x), n) + pow(abs(p.y), n), 1.0/n);\n}\n\nfloat T0(vec2 p)\n{\n    return min(min(step(p.y, 0.6), step(0.4, norm(p))), step(0.4, norm(vec2(1.0 - p.x, p.y))));\n}\n\nfloat T1(vec2 p)\n{\n    p.x = 1.0 - p.x;\n    p = p.yx;\n    return T0(p);\n}\n\nfloat T2(vec2 p)\n{\n    p.y = 1.0 - p.y;\n    return T0(p);\n}\n\nfloat T3(vec2 p)\n{\n    p = p.yx;\n    return T0(p);\n}\n\nfloat plus(vec2 p)\n{\n    return max(horizontal(p), vertical(p));\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    \n    float R = get_cell(p + vec2(+1.0/N, 0.0));\n    float L = get_cell(p + vec2(-1.0/N, 0.0));\n    float U = get_cell(p + vec2(0.0, +1.0/N));\n    float D = get_cell(p + vec2(0.0, -1.0/N));\n    float C = get_cell(p);\n\n    fragColor = vec4(0.0);\n    \n    if(C > 0.5)\n    {\n        if(U > 0.5 && D > 0.5 && L < 0.5 && R < 0.5) fragColor = vec4(vertical(fract(p*N)));\n        if(R > 0.5 && L > 0.5 && U < 0.5 && D < 0.5) fragColor = vec4(horizontal(fract(p*N)));\n        if(D > 0.5 && L > 0.5 && U < 0.5 && R < 0.5) fragColor = vec4(curve0(fract(p*N)));\n        if(D > 0.5 && R > 0.5 && U < 0.5 && L < 0.5) fragColor = vec4(curve1(fract(p*N)));\n        if(U > 0.5 && R > 0.5 && D < 0.5 && L < 0.5) fragColor = vec4(curve2(fract(p*N)));\n        if(U > 0.5 && L > 0.5 && D < 0.5 && R < 0.5) fragColor = vec4(curve3(fract(p*N)));\n        if(D > 0.5 && R > 0.5 && L > 0.5 && U < 0.5) fragColor = vec4(T0(fract(p*N)));\n        if(U > 0.5 && D > 0.5 && R > 0.5 && L < 0.5) fragColor = vec4(T1(fract(p*N)));\n        if(U > 0.5 && R > 0.5 && L > 0.5 && D < 0.5) fragColor = vec4(T2(fract(p*N)));\n        if(U > 0.5 && D > 0.5 && L > 0.5 && R < 0.5) fragColor = vec4(T3(fract(p*N)));\n        if(U > 0.5 && D > 0.5 && L > 0.5 && R > 0.5) fragColor = vec4(plus(fract(p*N)));\n    }\n    else\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    //fragColor = vec4(C);\n    \n    //fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0); // debug render-exture\n    if(floor(iMouse.xy/iResolution.xy*N) == floor(fragCoord/iResolution.xy*N)) fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// keep in sync with Image!\n#define N 16.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iTime < 1.0)\n        fragColor = vec4(0);\n    else\n    {\n        float c = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n        float e = floor(iMouse.xy/iResolution.xy*N) == floor(fragCoord/iResolution.xy*N) ? 1.0 : 0.0;\n        fragColor = vec4(1.0 - (1.0 - c) * (1.0 - e));\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}