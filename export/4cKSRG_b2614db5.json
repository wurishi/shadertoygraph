{"ver":"0.1","info":{"id":"4cKSRG","date":"1715353083","viewed":257,"name":"Thunder Energy Effect","username":"Akascape","description":"Thunder/electric/lightning energy scan effect, controls in the common tab","likes":19,"published":1,"flags":32,"usePreview":0,"tags":["vfx","effect","scan","lightning","electricity","thunder","energy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple Edge Detection\n\nfloat d;\n\nfloat lookup(vec2 p, float dx, float dy)\n{\n    vec2 uv = (p.xy + vec2(dx * d, dy * d)) / iResolution.xy;\n    vec4 c = texture(iChannel0, uv.xy);\n\t\n\t// return as luma\n    return 0.516*c.r + 1.152*c.g + 0.722*c.b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    d = GLOW;\n    vec2 p = fragCoord.xy;\n    \n\t// simple sobel edge detection\n    float gx = 0.0;\n    gx += -1.0 * lookup(p, -1.0, -1.0);\n    gx += -2.0 * lookup(p, -1.0,  0.0);\n    gx += -1.0 * lookup(p, -1.0,  1.0);\n    gx +=  1.0 * lookup(p,  1.0, -1.0);\n    gx +=  2.0 * lookup(p,  1.0,  0.0);\n    gx +=  1.0 * lookup(p,  1.0,  1.0);\n    \n    float gy = 0.0;\n    gy += -1.0 * lookup(p, -1.0, -1.0);\n    gy += -2.0 * lookup(p,  0.0, -1.0);\n    gy += -1.0 * lookup(p,  1.0, -1.0);\n    gy +=  1.0 * lookup(p, -1.0,  1.0);\n    gy +=  2.0 * lookup(p,  0.0,  1.0);\n    gy +=  1.0 * lookup(p,  1.0,  1.0);\n    \n\t// hack: use g^2 to conceal noise in the video\n    float g = gx*gx + gy*gy;\n    \n    vec4 col = texture(iChannel1, p / iResolution.xy);\n    col += vec4(g*COLOR.x, g*COLOR.y, g*COLOR.z, 1.0);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// VIDEO SOURCE\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n \n\tfragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// CONTROLS FOR THE EFFECT\n\n#define ZIGZAG 1 // Use 0 for scan effect\n#define TIME_VARIANT 1\n#define SCALE 8.0\n#define GLOW 1.6\n#define COLOR vec3(0.9, 0.5, 0.5)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Voronoi Patterns\n\nvec2 hash2( vec2 p ){\n\n    float animation = fract(iTime*0.00003);\n    if (TIME_VARIANT==0){\n        animation = 1.0;\n    }\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453*animation); \n}\n\nvec2 voronoi( in vec2 x ) {\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ ) {\n    \n        vec2 g = vec2(float(i),float(j));\n        vec2 o = hash2( n + g );\n        if (ZIGZAG==0) {\n            o = vec2(0.0);\n        }\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n        if( d<md ) {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    return mr;\n}\n\nvec3 VoronoiLayer(float steps, vec2 p, vec2 uv) {\n    vec2 c = voronoi( steps*p);\n    \n    vec2 uv1 = uv;\n    uv1.x += c.x/steps;\n    uv1.y += c.y/steps *  iResolution.x/iResolution.y;\n    \n    return texture(iChannel0, vec2(uv1.x, uv1.y)).xyz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 p = fragCoord.xy/iResolution.xx;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    \n    for (float i=0.0; i<4.0; i+=1.0) {\n        float steps = SCALE*pow(2.0,i);\n        color += VoronoiLayer(steps, p, uv);\n    }\n\n\tfragColor = vec4(color*0.25,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}