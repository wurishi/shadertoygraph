{"ver":"0.1","info":{"id":"lXsSDj","date":"1710038758","viewed":147,"name":"Hexagon Music Visualiser","username":"rubixcom","description":"Playing around with hexagons and music\n\nSimpler version:\nhttps://www.shadertoy.com/view/lXlXDl","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Colourful hexagon layers with music.\n\n// Using colour palettes from:\n// https://www.shadertoy.com/view/ll2GD3\n// Copyright Â© 2015 Inigo Quilez\n\n// I reserve the copyright to the rest of the code. You are welcome to use it in your\n// own shader on shadertoy.com. I have learned everything about the amazing stuff \n// you can do with 3D graphics from amazing work of talented individuals on this site \n// and me sharing my work is a way for me to give back to the community. If you can \n// attribute my code back to this shader, it would be nice. If you want to use code \n// in any other way please contact me and I would be happy to chat and am likely to \n// allow it.\n//\n// I do not permit the copying or use of this code to train AI models, publishing it \n// without my permission, including it in archives (including archive.org) or publishing\n// screenshots of the output. Please respect my wishes.\n\n// Thanks to IQ: https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy ) / iResolution.x;\n    vec3 col = vec3(0.);\n\n    float height = 4.0 + 3.0 * sin(iTime*.1);//+texture(iChannel0, vec2(0.8,0.)).x);\n    float depthForCineshader = 1.;\n    float transparencyFactor = 1.;\n    for (float layer = 1.; layer < 6.; layer++) {\n    \n        float rotation = sin(iTime)+layer;// + texture(iChannel0, vec2(0.2,0.)).x*.1;\n        vec2 uvTransformed = \n            (uv * height * layer*layer // Layer scale\n            + vec2(.7*layer)*(3.*sin(iTime*.1))*sin(iTime)*cos(iTime*.2)) // Rotation offset\n            * mat2(cos(rotation),-sin(rotation),sin(rotation),cos(rotation));\n//            + vec2(0., fract(iTime));\n\n        vec2 uvFract = fract(uvTransformed);\n        uvFract.x = mod(uvTransformed.x,2.0) > 1.0 ? 1.0 - uvFract.x : uvFract.x;\n\n        float d1 = (length(uvFract)), d2 = (length(uvFract-vec2(0.,1.))), d3 = (length(uvFract-vec2(1.,.5)));\n\n        float m = min(min(d1,d2),d3);\n        \n        vec3 col1 = vec3(0.), col2 = vec3(0.);\n        if (texture(iChannel0, vec2(0.2,0.)).x != 0.) {\n            col1 = pal( floor((uvTransformed.y))/3. + texture(iChannel0, vec2(abs(fract(iTime/10.+layer*.2)),0.0)).x*.75, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n            col2 = pal( floor((uvTransformed.y+.5))/6. + texture(iChannel0, vec2(abs(fract(iTime/10.+layer*.2)),0.0)).x*.75, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n        } else {\n            col1 = pal( (iTime+floor(uvTransformed.y))/3., vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n            col2 = pal( (iTime+floor(uvTransformed.y+.5))/6., vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n        }\n        \n        depthForCineshader-=.05;\n\n        if (m >.30) {\n            float diff = m == d1 ? abs(m-min(d2,d3)) : (m == d2) ? abs(m-min(d1,d3)) : abs(m-min(d1,d2));\n            float edgeThickness = .025;\n            float thickLine =  m >.33 && (diff > edgeThickness*2. && (uvFract.y < (1.-edgeThickness) && uvFract.y > edgeThickness || uvFract.x < .6)) ? .6+.4*sin(iTime*.2+layer) : .6+.4*cos(iTime*.2+layer);\n            float music = (.6 + 0.4*texture(iChannel0, vec2((layer) * .3, 0.)).x);\n            float d = (6. - layer)/6.;//(3.0+3.0*sin(0.05*iTime));\n            col += music * transparencyFactor * thickLine * d * (1.-m*m) * ( m == d1 || m == d2 ? col2 : col1);\n            transparencyFactor /= 4.+.4*cos(iTime*.1);\n        }\n    }\n    \n    vec3 desat = vec3(length(col)) * vec3(0.5+.5*sin(iTime*.1), 0.5+.5*cos(iTime*.2), 0.5+.5*sin(iTime*.4+.25));\n\n    fragColor = vec4(mix(col, desat, 0.5 + 0.5 * sin(iTime*.05)),depthForCineshader);\n}","name":"Image","description":"","type":"image"}]}