{"ver":"0.1","info":{"id":"tlGXWD","date":"1582816075","viewed":116,"name":"Positive Definitive Ellipse","username":"ircss","description":"Working from the Strang book I came across the xT*S*X formulation of an ellipse, here is that one plotted. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["matrix","ellipse","positivedefinitive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime*0.5\n\nvoid drawEllipse(in vec2 uv, in vec2 Sx, in vec2 Sy, float radius, inout vec3 col){\n \n    \n   // actual equation x_Transpose*S*x = 1\n   // for simplicity, I changed that to (S_Transpose*x)_Transpose*x \n    mat2x2 S_T = mat2x2(Sx.x, Sy.x, Sx.y, Sy.y);\n    float    f = dot(S_T*uv, uv);\n    float    r = f;\n    \n    f = smoothstep(0.001, 0.007, abs(f -radius)/length(S_T*uv));\n    \n    col *= f;\n    \n    col.r = fract(r*5.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.xy -= vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    \n    // Time varying pixel color\n    vec3 col = vec3(0.5) * exp(1.-length( uv)) ;\n\n    // You can use A_T*A to get a positive definitv matrix S as axis for the elipse\n    // the only condition is that A needs to have liniearlly independent basis\n//    mat2x2 A = mat2x2(cos(t+0.1)*3., sin(t*.5+0.3)*2. + cos(t*0.4 +0.1), -sin(t*0.5+0.5)*2. + tan(t), cos(t+0.1)*3.);\n//          A = transpose(A)*A;\n    \n    \n    // based on another test of positive definitv matrices. The first determinate A needs to be bigger than 0\n    // b and a make the second determinate which also need to be bigger than zero so c>b*b/a\n    float a = ((sin(t)+1.2) + cos(t*1.2+1.4)+1.)*0.5;\n    float b = (cos(t+1.2))*0.5 + (cos(t*0.7+0.4))*0.5;\n    float c = (b*b/a) + (cos(t*0.8) +1.1)*1.1;\n    \n      mat2x2 A = mat2x2(a, b, b, c);\n    \n    \n    \n     drawEllipse(uv, A[0], A[1],0.04, col);\n    // Output to screen\n    fragColor = vec4(col.xyz, 1.);\n}","name":"Image","description":"","type":"image"}]}