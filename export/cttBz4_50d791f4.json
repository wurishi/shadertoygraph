{"ver":"0.1","info":{"id":"cttBz4","date":"1701385675","viewed":14,"name":"Lobes","username":"lluic","description":"Lacks comment, I know. Have fun playing with the parameters","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dots","flexible"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    const vec4 lighten = vec4(.12, .16, .13, 1.);\n    const int nCircles = 8;   // even number\n    const float pi = 3.141592;\n    \n    int nP      = 20;   // dots per circle\n    float speed = .5,   // rotation speed both for circles and for dots\n          r     = .008, // radius of dots\n          dP    = .1,  // distance of dots from circle center\n          dC    = .28;   // distance of circles from image center\n    \n    I -= iResolution.xy / 2.;\n    I /= iResolution.y;\n    \n    O = vec4(.56, .71, .77, 1.);\n    \n    vec2[nCircles] centers;\n    for(int k = 0; k < nCircles ; ++k){\n        vec2 polarCenter = vec2(dC, iTime * speed + 2. * pi / float(nCircles) * float(k));\n        centers[k] = vec2(polarCenter.x * sin(polarCenter.y), polarCenter.x * cos(polarCenter.y));\n    }\n    \n    for (int j = 0; j < nCircles; ++j){\n        float rotDir;\n        if (mod(float(j), 2.) == 0.)\n            rotDir = 3.;\n        else\n            rotDir = -1.;\n        vec2 polar = vec2(dP, iTime * rotDir * speed + 2. * pi / float(nCircles) * float(j)/* + pi / 2. / float(nP) * rotDir*/);\n        for(int i = 0; i < nP ; ++i){\n            polar.y += 2. * pi / float(nP);\n            vec2 p = vec2(polar.x * sin(polar.y) + centers[j].x, polar.x * cos(polar.y) + centers[j].y);\n            vec2 d = I - p;\n            float distFromDotCenterSq = d.x * d.x + d.y * d.y;\n            if(distFromDotCenterSq < r * r){\n                float rho = (r * r - distFromDotCenterSq) / (r * r);\n\n                float distFromBigCircleNormalized = (sqrt(p.x * p.x + p.y * p.y) - dC) / dP;\n                float alpha;\n                if (mod(float(j), 2.) == 0.)\n                    alpha = distFromBigCircleNormalized;\n                else\n                    alpha = -distFromBigCircleNormalized;\n                alpha = max(0., alpha);\n                O += vec4(lighten.xyz * alpha * rho, 1.);\n            }\n        }\n    }\n\n}","name":"Image","description":"","type":"image"}]}