{"ver":"0.1","info":{"id":"ltK3DD","date":"1474783290","viewed":142,"name":"Raymarched asteroid ","username":"A2K","description":"Raymarched asteroid ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec4 quat_from_axis_angle(vec3 axis, float angle)\n{\n  vec4 qr;\n  float half_angle = (angle * 0.5);\n  qr.x = axis.x * sin(half_angle);\n  qr.y = axis.y * sin(half_angle);\n  qr.z = axis.z * sin(half_angle);\n  qr.w = cos(half_angle);\n  return qr;\n}\n\nvec3 rotate(vec3 position, vec3 axis, float angle)\n{\n  vec4 q = quat_from_axis_angle(axis, angle);\n  vec3 v = position.xyz;\n  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec3 qtransform(vec4 q, vec3 v)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec3 tex(vec3 p) {\n    vec2 uv = vec2((atan(p.x, p.y) / 3.1415926 + 1.0) * 0.5, (asin(p.z) / 3.1415926 + 0.5));\n\n    return texture(iChannel0, uv).xyz;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p) - length(p) * length(tex(normalize(p * 0.125) * 1.0)) * 0.075 + 0.1\n      \n      - s;\n}\n\nvec3 color(vec3 p) \n{\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iTime < 1.0) {\n    \tfragColor.rgba = vec4(vec3(0.0), 1.0);\n        return;\n    }\n\tvec2 uv = fragCoord.xy / iResolution.xy + vec2(-0.5);\n    uv.x *= iResolution.x / iResolution.y ;\n    \n    if (length(uv) > 0.25) discard;\n    \n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    \n    vec3 rd = normalize(vec3(uv, 1.0 - dot(uv,uv)));\n    \n    float s = 0.0;\n    vec3 pos;\n    #define STEP 0.005\n    for(int i = 0; i < int(3.0 / STEP); ++i) {\n\t\tfloat d = 0.0 + STEP * float(i);\n        pos = rotate(ro + d * rd, vec3(0.0, 1.0, 0.0), iTime * .10);\n        pos = rotate(pos, vec3(1.0, 0.0, 0.0), 360.0);\n    \tfloat dd = sdSphere(pos, 0.5);\n        if (dd <= 0.0) {\n            s = 1.0;\n            break;\n        }\n    }\n    \n    fragColor.rgb = tex(pos) * vec3(s) * ((sqrt(distance(pos, vec3(0.0, 0.0, 0.0)))/ 2.0));\n    if (length(fragColor.rgb) > 0.0) {\n        vec3 lightDir = normalize(vec3(sin(iTime), cos(iTime), sin(iTime) + cos(iTime)));\n        float light = pow(dot(normalize(pos), lightDir), 1.0);\n        if (light > 0.0) light *= 0.25;\n    \tfragColor.rgb += light;\n        fragColor.rgb += 2.0 * light * pow(max(0.0, dot(reflect(lightDir, normalize(pos)), vec3(0.0, 0.0, -1.2))), 3.0);\n    }\n    \n    fragColor.a = 1.0;\n}\n","name":"Image","description":"","type":"image"}]}