{"ver":"0.1","info":{"id":"4lBfRK","date":"1517135224","viewed":310,"name":"Thing_4","username":"balkhan","description":"inspired by aiekick's phantom mode : https://www.shadertoy.com/view/MtScWW","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["thing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\n#define I_MAX\t\t150\n#define E\t\t\t0.001\n\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nvec2\trot_t;\nvec3\th;\nvec3\tbase;\nvec3\tlight_pos;\nvec3\tlight_green = vec3(.5,.7,.4);\nvec3\tlight_blue = vec3(.1,.5,.7);\nvec3\tlight_red = vec3(.7,.2,.1);\nvec3\tuglob;\nfloat \tt;\nfloat\taccum;\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    accum = 0.;\n    uglob*=0.;\n    vec3\tcol = vec3(0., 0., 0.);\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(-.0, .0, 1.0-iTime*.5*0.);\n    t = iTime;\n\n    dir.xy *= 1.51*1.+.35/(sin(iTime*2.1)+1.1);\n    dir=normalize(dir);\n    vec4\tinter = (march(pos, dir));\n\n    col.xyz = .5-vec3(.59, .59, .87)*( (inter.w*.006251)+(-.125+inter.x*.006));\n    col.xyz += -.5+h*.253061251;\n    col.xyz += + accum  * (.750-exp(-0.001*inter.w*inter.w));\n    c_out =  vec4(col,1.0);\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret;\n    \n    p = p*p*p*p;\n    p = p*p;\n    ret = (p.x+p.y);\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\nfloat\tscene(vec3 p)\n{\n    float\tmind = 1e5;\n    p.x -= 15.;\n    p.z += -t*180.*.5+18.;\n    vec3\top = p;\n    p.xy = (fract(p.xy/60.)-.5)*40.;\n    p.z = (fract(p.z/60.)-.5)*120.;\n    \n    mind = min(mind, \n              +mylength( vec2(length(p.xy)-19., p.z))-5.10012501\n              );\n    h += .076125-vec3(.10, .15, .14)*1./(mind*mind +2.05102);\n    return(mind)*.25;\n}\n\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec4\ts = vec4(0.0, 0.0, 0.0, 0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        p.x -= 20.;\n    \trotate(p.zx, 1.+iTime*.5);\n        rotate(p.yz, 1.+iTime*.5);\n        dist.x = scene(p);\n        dist.x = max(abs(dist.x), 0.02);\n        dist.y += dist.x;\n        accum += 0.005;\n/*        if (dist.x < E )\n        {\n            s.y = 1.;\n            break;\n        }\n*/\n        s.x++;\n    }\n    s.w = dist.y+dist.x;\n    return (s);\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}