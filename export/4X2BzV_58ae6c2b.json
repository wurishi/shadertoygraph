{"ver":"0.1","info":{"id":"4X2BzV","date":"1729703572","viewed":130,"name":"color particles dance","username":"nayk","description":"source https://www.shadertoy.com/view/mtyGWy https://www.shadertoy.com/view/43jfzV","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["particles","neon","dance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define size 035.\n\nvec2 Hash12(float t)\n{\n    float x = fract(sin(t * 36.3) * 453.2);\n    float y = fract(sin(t * 54.3) * 453.2);\n    \n    return vec2(x,y);\n}\nvec3 palette( float t ) {\n    vec3 a = vec3(2.5, 2.5, 2.5);\n    vec3 b = vec3(2.5, 2.5, 2.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    vec2 uv3 = fragCoord / iResolution.xy;\n uv3 = uv3 * 2.0 - 1.0;\n    uv3.x *= iResolution.x / iResolution.y; // Aspect ratio correction\n\n    // Animated light position (rotating around the center)\n    float t3 = iTime * 0.5; // Time-based animation speed\n    vec3 lightPos = vec3(sin(t3), cos(t3), 1.5); // Moving light position\n\n    // Surface normal at each point (simplified sphere shape)\n    vec3 normal = normalize(vec3(uv3, 1.0));\n\n    // View direction (camera looking towards the center)\n    vec3 viewDir = normalize(vec3(0.0, 0.0, 1.0));\n\n    // Gradient background\n    vec3 backgroundColor = mix(vec3(0.1, 0.1, 0.3), vec3(0.9, 0.3, 0.5), uv3.y * 0.5 + 0.5);\n    \n    // Lighting calculations\n    vec3 lightDir = normalize(lightPos - normal);\n    float diffuse = max(dot(lightDir, normal), 0.0);\n\n    // Animated color palette for the object\n    vec3 baseColor = vec3(0.5 + 0.5 * sin(iTime), 0.5 + 0.5 * cos(iTime * 0.7), 0.7);\n\n    // Diffuse lighting (color influenced by light direction)\n    vec3 diffuseColor = diffuse * baseColor;\n\n    // Specular highlight (shiny effect)\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float specular = pow(max(dot(viewDir, reflectDir), 0.0), 32.0); // Shiny factor\n    vec3 specularColor = specular * vec3(1.0, 1.0, 1.0); // White highlight\n\n    // Fresnel effect (edge glow)\n    float fresnel = pow(1.0 - max(dot(viewDir, normal), 0.0), 3.0);\n    vec3 fresnelColor = fresnel * vec3(0.8, 0.9, 1.0); // Light blue glow at edges\n\n    // Final color combining all effects\n    vec3 color = backgroundColor + diffuseColor + specularColor + fresnelColor;\n\n    // Apply soft glow using exponential falloff for a smooth finish\n    float glow = exp(-length(uv3) * 1.0);\n    color += glow * vec3(0.3, 0.5, 5.9); // Add soft glow effect\n\n\n\n    vec2 uv = (fragCoord-.5 * iResolution.xy)/iResolution.y;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\n    vec3 col = vec3(0.0);\n    float tt = iTime*0.0001;\n       uv*=mat2(cos(iTime),sin(iTime),-sin(iTime) ,cos(iTime));\n    for(float i = 0.; i < size; i++)\n    {\n       vec3 col2 = palette(length(uv) + i*.4 + iTime*.4);\n uv*=mat2(cos(iTime*0.31),sin(iTime*0.31),-sin(iTime*0.31) ,cos(iTime*0.31));\n        vec2 dir= Hash12(i+tt) -.5; \n        dir*=mat2(cos(iTime),sin(iTime),-sin(iTime) ,cos(iTime));\n        float d = length(uv-dir);\n \n        float brightness = 0.002+i*0.0001;\n        col += vec3(brightness*col2*0.5 / d);\n        \n    \n    }   \n    fragColor = vec4(vec3(col* color),1.0);\n}","name":"Image","description":"","type":"image"}]}