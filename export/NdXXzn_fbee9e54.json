{"ver":"0.1","info":{"id":"NdXXzn","date":"1618594077","viewed":58,"name":"Magic octahedron","username":"lelya_g_a","description":"Гончарова Ольга, 316 группа\nЗадание 2. Вариант 3-6. Октаэдр с водой внутри.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["magic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3  CAMERA_POS    = vec3(0.4, 0.8, -4.5);\n\nconst vec3  LIGHT1_POS    = vec3(-2, 1.0, 5);\nconst float LIGHT1_RADIUS = 0.2;\nconst vec3  LIGHT1_COLOR  = vec3(0.7, 1, 0.5);\n\nconst vec3  LIGHT2_POS    = vec3(-2.5, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3  LIGHT2_COLOR  = vec3(0.5, 1, 1);\n\nconst vec3  LIGHT3_POS    = vec3(0.5, 1.1, 0.5);\nconst float LIGHT3_RADIUS = 0.2;\nconst vec3  LIGHT3_COLOR  = vec3(1, 0.5, 0.75);\n\nconst int EMISSION   = 0;\nconst int DIFFUSE    = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst float OCTAH_N  = 1.5;\nconst float WATER_N  = 1.33;\nconst float AIR_N    = 1.0;\n\nconst float TRANSP   = 0.6; \n\nvec3 randDir;\n\n\n//============================================================================//\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceOct(vec3 pos, vec3 dir, float r, out vec3 normal) \n{\n    \n    float t1 = (r - pos.x - pos.y - pos.z) / ( dir.x + dir.y + dir.z);\n    float t2 = (r + pos.x - pos.y - pos.z) / (-dir.x + dir.y + dir.z);\n    float t3 = (r - pos.x + pos.y - pos.z) / ( dir.x - dir.y + dir.z);\n    float t4 = (r + pos.x + pos.y - pos.z) / (-dir.x - dir.y + dir.z);\n    float t5 = (r - pos.x - pos.y + pos.z) / ( dir.x + dir.y - dir.z);\n    float t6 = (r + pos.x - pos.y + pos.z) / (-dir.x + dir.y - dir.z);\n    float t7 = (r - pos.x + pos.y + pos.z) / ( dir.x - dir.y - dir.z);\n    float t8 = (r + pos.x + pos.y + pos.z) / (-dir.x - dir.y - dir.z);\n\n    if (t1 < 0.0) {t1 = INF;}\n    if (t2 < 0.0) {t2 = INF;}\n    if (t3 < 0.0) {t3 = INF;}\n    if (t4 < 0.0) {t4 = INF;}\n    if (t5 < 0.0) {t5 = INF;}\n    if (t6 < 0.0) {t6 = INF;}\n    if (t7 < 0.0) {t7 = INF;}\n    if (t8 < 0.0) {t8 = INF;}\n    \n    float tMin = INF;\n    \n    vec3 worldPos = t1 * dir + pos;\n    if (!((worldPos.x >= 0.0) && (worldPos.y >= 0.0) && (worldPos.z >= 0.0)))\n    {\n        t1 = INF;\n    }\n    worldPos = t2 * dir + pos;\n    if (!((worldPos.x < 0.0) && (worldPos.y >= 0.0) && (worldPos.z >= 0.0)))\n    {\n        t2 = INF;\n    }\n    worldPos = t3 * dir + pos;\n    if (!((worldPos.x >= 0.0) && (worldPos.y < 0.0) && (worldPos.z >= 0.0)))\n    {\n        t3 = INF;\n    }\n    worldPos = t4 * dir + pos;\n    if (!((worldPos.x < 0.0) && (worldPos.y < 0.0) && (worldPos.z >= 0.0)))\n    {\n        t4 = INF;\n    }\n    worldPos = t5 * dir + pos;\n    if (!((worldPos.x >= 0.0) && (worldPos.y >= 0.0) && (worldPos.z < 0.0)))\n    {\n        t5 = INF;\n    }\n    worldPos = t6 * dir + pos;\n    if (!((worldPos.x < 0.0) && (worldPos.y >= 0.0) && (worldPos.z < 0.0)))\n    {\n        t6 = INF;\n    }\n    worldPos = t7 * dir + pos;\n    if (!((worldPos.x >= 0.0) && (worldPos.y < 0.0) && (worldPos.z < 0.0)))\n    {\n        t7 = INF;\n    }\n    worldPos = t8 * dir + pos;\n    if (!((worldPos.x < 0.0) && (worldPos.y < 0.0) && (worldPos.z < 0.0)))\n    {\n        t8 = INF;\n    }\n    \n    if (t1 < tMin) {tMin = t1;}\n    if (t2 < tMin) {tMin = t2;}\n    if (t3 < tMin) {tMin = t3;}\n    if (t4 < tMin) {tMin = t4;}\n    if (t5 < tMin) {tMin = t5;}\n    if (t6 < tMin) {tMin = t6;}\n    if (t7 < tMin) {tMin = t7;}\n    if (t8 < tMin) {tMin = t8;}\n    \n    if (tMin == INF) {return INF;}\n\n    if (t1 == tMin)\n    {\n       normal = normalize(vec3(1, 1, 1));\n       return t1;\n    }\n    \n    if (t2 == tMin)\n    {\n        normal = normalize(vec3(-1, 1, 1));\n        return t2;\n    }\n    \n    if (t3 == tMin)\n    {\n        normal = normalize(vec3(1, -1, 1));\n        return t3;\n    }\n    \n    if (t4 == tMin)\n    {\n        normal = normalize(vec3(-1, -1, 1));\n        return t4;\n    }\n    \n    if (t5 == tMin)\n    {\n        normal = normalize(vec3(1, 1, -1));\n        return t5;\n    }\n    \n    if (t6 == tMin)\n    {\n        normal = normalize(vec3(-1, 1, -1));\n        return t6;\n    }\n    \n    if (t7 == tMin)\n    {\n        normal = normalize(vec3(1, -1, -1));\n        return t7;\n    }\n    \n    if (t8 == tMin)\n    {\n        normal = normalize(vec3(-1, -1, -1));\n        return t8;\n    }\n}\n\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal, float dis_flag) \n{\n    float dis = dis_flag * 0.085 * sin(16.0 * (pos.x + dir.x)) \n                                 * sin(16.0 * (pos.y + dir.y))\n                                 * sin(16.0 * (pos.z + dir.z));\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - (r + dis) * (r + dis);\n    float D = b * b - a * c;\n    \n    if (D < 0.0) \n    {\n        return INF;\n    }\n    \n    float t = -b - sqrt(D);\n    if (t > 0.0) \n    {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = -b + sqrt(D);\n    if (t < 0.0) \n    {\n        return INF;\n    }\n    \n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) \n    {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) \n    {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    \n    if (D < 0.0) \n    {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) \n    {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) \n        {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) \n    {\n        return INF;\n    }\n    \n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) \n    {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target) \n{\n    vec3  dir  = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 octNorm;\n    float octT = traceOct(pos, dir, 1.0, octNorm);\n    if (octT < dist)\n        return true;\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) \n{\n    vec3  toLight1 = LIGHT1_POS - pos;\n    float distSq1  = dot(toLight1, toLight1);\n    float att1     = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) \n                     ? 0.0 : 10.0f / distSq1;\n    \n    vec3  toLight2 = LIGHT2_POS - pos;\n    float distSq2  = dot(toLight2, toLight2);\n    float att2     = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) \n                     ? 0.0 : 20.0f / distSq2;\n    \n    vec3  toLight3 = LIGHT3_POS - pos;\n    float distSq3  = dot(toLight3, toLight3);\n    float att3     = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) \n                     ? 0.0 : 15.0f / distSq3;\n    \n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n                  + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n                  + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n                  + texture(iChannel1, normal).rgb * 0.1);\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool flag)\n{\n    if (dot(v, normal) < 0.0) \n    {\n        normal = -normal;\n    }\n    \n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3  tang = normalize(v - cosA * normal);\n    \n    float sinB = sinA / n2 * n1;\n    if (abs(sinB) >= 1.0)\n    {\n        flag = false;\n        return reflect(v, normal);\n    }\n    else \n    {\n        flag = true;\n        float cosB = sqrt(1.0 - sinB * sinB);\n        return sinB * tang + cosB * normal;\n    }\n}\n\n\nfloat pow2(float x) \n{\n    return x * x;\n}\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432)) ) * 43758.5453);\n}\n\n\n//============================================================================//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), \n                         rand(float(iFrame + 5)), \n                         rand(float(iFrame + 15)));\n    randDir    = normalize(randVals - 0.5);\n    vec2 uv    = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up    = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    \n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    float n1      = AIR_N;\n    float OCTAH_R = pow2(AIR_N   - OCTAH_N) / pow2(AIR_N   + OCTAH_N);\n    float WATER_R = pow2(WATER_N - OCTAH_N) / pow2(WATER_N + OCTAH_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 100; ++i) \n    {\n        float t = INF;\n        int   materialType;\n        vec3  color;\n        vec3  normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) \n        {\n            t = planeT;\n            vec3 worldPos = t * curDir + curPos;\n            color  = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            \n            if (randVals.x < 0.5) \n            {\n                materialType = REFLECTION;\n            } \n            else \n            {\n                materialType = DIFFUSE;\n            }\n        }\n        \n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm, 0.0);\n        if (light1T < t) \n        {\n            t = light1T;\n            materialType = EMISSION;\n            color  = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm, 0.0);\n        if (light2T < t) \n        {\n            t = light2T;\n            materialType = EMISSION;\n            color  = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm, 0.0);\n        if (light3T < t) \n        {\n            t = light3T;\n            materialType = EMISSION;\n            color  = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        \n        vec3 octNorm;\n        float octT = traceOct(curPos, curDir, 1.0, octNorm);\n        if (octT < t) \n        {\n            t = octT;\n            normal = octNorm;\n            if (randVals.x < OCTAH_R * 2.0) \n            {\n                materialType = REFLECTION;\n            } \n            else \n            {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) \n                {\n                    nEnter = AIR_N;\n                } \n                else \n                {\n                    nEnter = OCTAH_N;\n                }\n            }\n        }\n        \n        \n        if (randVals.x < TRANSP)\n        {\n            vec3 sphNorm;\n            float sph2T = traceSphere(curPos, curDir, 0.5, sphNorm, 1.0);\n            if (sph2T < t) \n            {\n                t = sph2T;\n                normal = sphNorm;\n                vec3 worldPos = t * curDir + curPos;\n                // for more realistic water\n                color = texture(iChannel3, worldPos).rgb + vec3(0, 0.3, 0.3);\n\n                if (randVals.x * 0.01 < WATER_R) \n                {\n                    materialType = EMISSION;\n                } \n                else \n                {\n                    colorMult *= vec3(0, 1, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) \n                    {\n                        nEnter = OCTAH_N;\n                    } \n                    else \n                    {\n                        nEnter = WATER_N;\n                    }\n                }\n            }\n        }\n        \n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) \n        {\n            t = cylT;;\n            vec3 worldPos = t * curDir + curPos;\n            color  = texture(iChannel2, worldPos.xz * worldPos.y * 0.5).rgb + vec3(0.1, 0.4, 1);\n            normal = cylNorm;\n            materialType = DIFFUSE;\n        }\n        \n        \n        if (t != INF) \n        {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            \n            if (materialType == EMISSION) \n            {\n                fragColor.rgb = color * colorMult;\n                break;\n            } \n            else if (materialType == DIFFUSE) \n            {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } \n            else if (materialType == REFLECTION) \n            {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } \n            else if (materialType == REFRACTION) \n            {\n                bool change;\n                curDir = refraction(curDir, normal, n1, nEnter, change);\n                curPos = worldPos + curDir * 1e-5;\n                if (change)\n                {\n                    n1 = nEnter;\n                }\n            }\n        } \n        else \n        {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"// https://www.shadertoy.com/view/4tXSDf\n//============================================================================//\n\nvec2 hash2(vec2 p ) \n{\n   return fract(sin(vec2(dot(p, vec2(123.4, 748.6)), dot(p, vec2(547.3, 659.3))))*5232.85324);   \n}\n\n\nfloat hash(vec2 p) \n{\n  return fract(sin(dot(p, vec2(43.232, 75.876)))*4526.3257);   \n}\n\n\nfloat voronoi(vec2 p) \n{\n    vec2 n   = floor(p);\n    vec2 f   = fract(p);\n    float md = 5.0;\n    vec2 m   = vec2(0.0);\n    for (int i = -1;i<=1;i++) \n    {\n        for (int j = -1; j <= 1; j++) \n        {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n + g);\n            o = 0.5 + 0.5 * sin(5.038 * o);\n            vec2 r  = g + o - f;\n            float d = dot(r, r);\n            if (d < md) \n            {\n              md = d;\n              m  = n + g + o;\n            }\n        }\n    }\n    return md;\n}\n\nfloat ov(vec2 p) \n{\n    float v = 0.0;\n    float a = 0.4;\n    for (int i = 0; i < 3; i++) \n    {\n        v += voronoi(p)*a;\n        p *= 2.0;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\n//============================================================================//\n\nvoid mainCubemap(out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir)\n{\n\tvec2 uv   = fragCoord.xy / iResolution.xy;\n    vec4 a    = vec4(0.2, 0.4, 1.0, 1.0);\n    vec4 b    = vec4(0.85, 0.9, 1.0, 1.0);\n\tfragColor = vec4(mix(a, b, smoothstep(0.0, 0.5, ov(uv*5.0))));\n    \n}","name":"Cube A","description":"","type":"cubemap"}]}