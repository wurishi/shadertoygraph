{"ver":"0.1","info":{"id":"7sG3zG","date":"1631795453","viewed":71,"name":"mandelbrot fun","username":"mysticping","description":"Playing around with the mandelbrot set zooming.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 scaleRange(vec2 pos, vec2 xRangeNew, vec2 yRangeNew) {\n    vec2 rPos = vec2(0.0,0.0);\n    rPos.x =  pos.x * (xRangeNew[1]-xRangeNew[0]) + xRangeNew[0];\n    rPos.y =  pos.y * (yRangeNew[1]-yRangeNew[0]) + yRangeNew[0];\n    return rPos;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    // Mandelbrot coordinate\n    vec2 mandelCenter = vec2(-0.7455936, -0.1249403);\n    \n    // Scale amd zoom.\n\n    float m = pow(0.5, iTime);\n    vec4 mandelRange = vec4(mandelCenter.x-m*2.47, mandelCenter.x+m*2.47, mandelCenter.y-m*2.24, mandelCenter.y+m*2.24);\n    vec2 pos0 = scaleRange(uv, mandelRange.xy, mandelRange.zw);\n    \n    // Mandelbrot algorithm\n    vec2 pos = vec2(0.0,0.0);\n    int iteration = 0;\n    int max_iteration = 1000;\n    \n    while (pos.x*pos.x + pos.y*pos.y <= 4.0 && iteration < max_iteration) {\n        float xtemp = pos.x*pos.x - pos.y*pos.y + pos0.x;\n        pos.y = 2.0*pos.x*pos.y + pos0.y;\n        pos.x = xtemp;\n        iteration += 1;\n    }\n    \n    if (iteration == max_iteration) {\n        fragColor = vec4(1.0,1.0,1.0,1.0);\n    }\n    else {\n        // Color gradient\n        vec3 colorB = vec3(0.0,0.0,0.0);\n        vec3 colorA = vec3(0.8,0.0,0.0);\n        float mixValue = float(iteration) / float(max_iteration);\n        vec3 col = mix(colorA, colorB, sqrt(mixValue));\n        fragColor = vec4(col,1.0);\n    }\n}\n    ","name":"Image","description":"","type":"image"}]}