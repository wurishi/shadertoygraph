{"ver":"0.1","info":{"id":"43lcWr","date":"1726061188","viewed":14,"name":"Evaporating water","username":"MackFitz","description":"A wild experiment that got out of hand, with trigs upon trigs - but at the same time something I wouldn't be able to do with CSS. That's what I'm here for!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["animation","morphing","trigonometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 uv = (fragCoord / iResolution.xy - .5); // normalized, aspect ratio purposely not fixed\n\nfloat d = abs(uv.y/cos(sin(uv.x*7.)) + .15*cos(iTime*3.2)*uv.x) + .2*(1. + tan(iTime*.35))*abs(length(uv)*6./tan(cos(cos(length(uv)*7.)))); // mask\nfloat f = .45; // mask radius\nfloat s = 1.5/iResolution.y; // blur radius\nfloat c = smoothstep(f, f - s, d); // anti-aliasing\n\nfloat sinePattern = (.5*f - s*4.) + d*.25*(1. + sin(uv.x * 18.));\nfloat color = smoothstep(sinePattern, f, d);\n\nvec3 col = vec3(color*.8, 1.5*color, 2.5*color);\n\nfragColor = vec4(vec3(col) * c, 1.0); // Output the color\n}","name":"Image","description":"","type":"image"}]}