{"ver":"0.1","info":{"id":"Xdy3Rc","date":"1455545306","viewed":871,"name":"2D Weyl hash #1","username":"MBR","description":"a 2D equidistributed sequence based on Weyl generators","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// LICENSE: http://unlicense.org/\n\n// Not interesting if you can use XOR.\n// SEE: https://www.shadertoy.com/view/4dlcR4\n\n#define W0 0.5545497\n#define W1 0.308517\n\n\n// as is this will start to show defects outside of\n// the interval [-2048, 2048]\nfloat hash(in vec2 c)\n{\n  float x = c.x*fract(c.x * W0);\n  float y = c.y*fract(c.y * W1);\n\n  // NOTICE: as is - if a sampling an integer lattice\n  // any zero input will cause a black line in that\n  // direction. \n  return fract(x*y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2  p = fragCoord.xy ;\n  float r = hash(p+vec2(iFrame));\n  vec4  c = vec4(vec3(r),1.0);\n    \n  fragColor = c;\n}","name":"Image","description":"","type":"image"}]}