{"ver":"0.1","info":{"id":"DdcSzN","date":"1679432975","viewed":79,"name":"tartan","username":"fishbrains","description":"make tartan design assignment from pattern section of book of shaders","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\n// from book of shaders\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\n// from book of shaders\nvec2 tile(vec2 _st, float _zoom){\n    _st *= _zoom;\n    return fract(_st);\n}\n\n// from book of shaders\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat drawLine( float a, float b, float w ) {\n    return step(a, b) + step(b, a-w);\n}\n\nfloat drawTexture(vec2 st, float w) {\n    st = rotate2D(st, PI*0.25);\n    float lines = 1.;\n    for(int i=0;i<50;++i) {\n        lines *= drawLine(float(i)/20., st.x, w);\n    }\n    return lines;\n}\n\nvec3 tartan(vec2 st) {\n    vec3 color = vec3(0.);\n\n    float red = (drawLine(.1, st.y, .05) * drawLine(.81, st.y, .05) * drawLine(.6, st.x, .05) * drawLine(-.11, st.x, .05));\n    float redtexture = red + drawTexture(st, .02);\n    float grey = (drawLine(.4, st.x, .25) * drawLine(1.109, st.x, .25) * drawLine(.9, st.y, .25) * drawLine(.2, st.y, .25));\n    float greytexture = grey + drawTexture(st, .02);\n    float black = drawLine(.5, st.x, .15) * drawLine(1.21, st.x, .15);\n    float blacktexture = black + drawTexture(st, .035);\n\n    color = (vec3(0.665,0.000,0.000)*(1.-red));\n    color += vec3(0.585,0.585,0.585)*(1.-grey)*red;\n    color += vec3(0.800,0.800,0.800)*(1.-greytexture)*red;\n    color += vec3(1.)*red*grey*greytexture;\n    \n    color *= clamp(blacktexture, 0., 1.); // show the picture only where the blacktexture mask is white\n    return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(0.0);\n\n    st = tile(st,5.);\n\n    // Use a matrix to rotate the space 45 degrees\n    st = rotate2D(st,PI*0.25);\n\n    color = tartan(st);\n\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}