{"ver":"0.1","info":{"id":"ftyXWK","date":"1641334509","viewed":102,"name":"Quaternion Rotation for X and Y","username":"DexM","description":"Rotate vector (0, 0, 1) depending on the distance from the center of the canvas using rotation matrixes. Solution is not optimized at all.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rotation happens in the direction specified by right hand rule\n// Axis must be unit vector (normalized)\nvec3 rotate(vec3 vec, vec3 rotationAxis, float rotationAngle)\n{\n    rotationAngle /= 2.0;\n    vec4 q = vec4(rotationAxis * sin(rotationAngle), cos(rotationAngle));\n\n    mat4 p = mat4(\n         0,      vec.z, -vec.y,  vec.x, // Column 1\n        -vec.z,  0,      vec.x,  vec.y, // Column 2\n         vec.y, -vec.x,  0,      vec.z, // Column 3\n        -vec.x, -vec.y, -vec.z,  0);    // Column 4\n\n    mat4 invQ = mat4(\n         q.w, -q.z,  q.y, -q.x,  // Column 1\n         q.z,  q.w, -q.x, -q.y,  // Column 2\n        -q.y,  q.x,  q.w, -q.z,  // Column 3\n         q.x,  q.y,  q.z,  q.w); // Column 4\n    \n    return (q * p * invQ).xyz;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    // UV has origin at the center of the screen and farthest edge of the canvas is at distance 1\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / max(iResolution.x, iResolution.y);\n\n    // Rotation angle is proportional to the distance from the center of the canvas\n    float rotationAngle = radians(150.0) * length(uv);\n    \n    // Calculate the direction of rotation\n    vec3 rotationAxis = normalize(cross(vec3(uv, 0), vec3(0, 0, 1)));\n\n    // Perform rotation\n    vec3 vec = rotate(vec3(0, 0, 1), rotationAxis, rotationAngle);\n\n    // Render result\n    vec3 color;\n    float time = fract(iTime / 7.0);\n    if (time < 0.25)\n        color = vec3(vec);\n    else if (time < 0.5)\n        color = vec3(abs(vec.x), 0, 0);\n    else if (time < 0.75)\n        color = vec3(0, abs(vec.y), 0);\n    else\n        color = vec3(0, 0, abs(vec.z));\n        \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}