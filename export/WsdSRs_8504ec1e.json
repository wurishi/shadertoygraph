{"ver":"0.1","info":{"id":"WsdSRs","date":"1572708756","viewed":117,"name":"voronoi_experiment_2","username":"skaplun","description":"Original animation by Maurice Fransen","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Hit{ float dst; int id; vec3 normal;};\nstruct Light { vec3 pos; vec3 color; };\n\n#define NB_LIGHTS 1\n#define GOLD vec3(1.0, 0.71, 0.29)\n#define r(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nconst Hit miss = Hit(0., -1, vec3(0.));\n\nvec3 BASE_COLORS[6] = vec3[6](\n\tvec3(172., 239., 160.)/255.,\n    vec3(247., 148., 151.)/255.,\n    vec3(136., 204., 213.)/255.,\n    vec3(131., 235., 224.)/255.,\n    vec3(199., 196., 73.)/255.,\n    vec3(102., 120., 123.)/255.\n);\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.37,71.3)))*43758.5453123);\n}\n\nvec3 colorByID(float id){\n\treturn BASE_COLORS[int(floor(random(vec2(id * .13, .72)) * 6.))];\n}\n\nfloat fbm1x(float x, float time){\n\tfloat amplitude = 1.;\n    float frequency = 1.;\n    float y = sin(x * frequency);\n    float t = 0.01*(-time * 130.0);\n    y += sin(x*frequency*2.1 + t)*4.5;\n    y += sin(x*frequency*1.72 + t*1.121)*4.0;\n    y += sin(x*frequency*2.221 + t*0.437)*5.0;\n    y += sin(x*frequency*3.1122+ t*4.269)*2.5;\n    y *= amplitude*0.06;\n    return y;\n}\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nHit sceneSDF(vec3 p) {    \n\tvec4 topology = texture(iChannel0, p.xz/(iResolution.xy/iResolution.y) * .25 + .5, 0.);\n    float h = fbm1x(topology.y, -iTime) * (.15 + .2 * step(4., topology.y));\n    \n    return Hit(opSubtraction(h - p.y, topology.x), int(topology.y), vec3(0.));\n}\n\nconst float epsilon = 0.01;\nvec3 calculateNormals(vec3 pos){\n    vec2 eps = vec2(0.0, epsilon);\n    vec3 n = normalize(vec3(\n    sceneSDF(pos + eps.yxx).dst - sceneSDF(pos - eps.yxx).dst,\n    sceneSDF(pos + eps.xyx).dst - sceneSDF(pos - eps.xyx).dst,\n    sceneSDF(pos + eps.xxy).dst - sceneSDF(pos - eps.xxy).dst));\n    return n;\n}\n\nconst int stepsCnt = 100;\nHit castRay(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float stepSize = (end - start)/float(stepsCnt);\n    float t = start;\n    for(int i = 0; i <= stepsCnt; i++){\n        vec3 p = eye + marchingDirection * t;\n        Hit hit = sceneSDF(p);\n        \n        if(hit.dst < stepSize)\n            return Hit(t, hit.id, hit.normal);\n        \n        t += stepSize;\n    }\n    return miss;\n}\n\nvec3 render(in vec3 ro, in vec3 rd){\n    vec3 col = vec3(0.);\n    float minD = ( .35 - ro.y)/rd.y;\n    float maxD = (-.35 - ro.y)/rd.y;\n    \n    Hit res = castRay( ro, rd, minD, maxD );\n    float t = res.dst;\n    vec3 p = ro + t * rd;\n    if (res.id != -1){\n    \tvec3 nrm = calculateNormals(p);\n        vec3 albedo = colorByID(float(res.id));\n        \n        vec3 light0  = vec3(1., 4., 1.);\n        vec3 dir = normalize(light0 - p);\n        float diffuse = max(dot(dir, nrm), .25);\n        return vec3(1.) * diffuse * albedo;\n    }\n    return vec3(0.);\n}\n\nmat3 setCamera(in vec3 ro, in vec3 ta, float cr){\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 color(in vec2 fragCoord){\n\tvec3 viewDir = rayDirection(60., iResolution.xy, fragCoord);\n    float ang = (iResolution.y - iMouse.y) * .01 / 3.1415;\n    vec3 origin = vec3(2., 3., 2.);\n    mat4 viewToWorld = viewMatrix(origin, vec3(.2, 0., .2), vec3(0., 1., 0.));\n    vec3 dir = (viewToWorld * vec4(viewDir, 1.0)).xyz;\n    \n    return render(origin, dir);\n}\n\n#define AA 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = vec4(0.);\n    for(int y = 0; y < AA; ++y)\n        for(int x = 0; x < AA; ++x){\n            fragColor.rgb += clamp(color(fragCoord + vec2(x, y) / float(AA)), 0., 1.);\n        }\n    \n    fragColor.rgb /= float(AA * AA);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float MAX_FLOAT = 1e10;\nvec2 hash2(vec2 p){\n\treturn textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n}\n\nconst int BASE_POINTS_CNT = 12;\nconst int TOTAL_POINTS_CNT = 20;\nvec2 BASE_POINTS[BASE_POINTS_CNT] = vec2[BASE_POINTS_CNT](\n    vec2(-2.5), vec2(-2.5, 2.5),\n    vec2(2.5),  vec2(2.5, -2.5),\n\tvec2(-.1, 1.75), vec2(.1, 1.75),\n\tvec2(-.1, -1.75), vec2(.1, -1.75),\n\tvec2(-1.75, .1), vec2(1.75, .1),\n\tvec2(-1.75, -.1), vec2(1.75, -.1));\n\n#define r(a) mat2(cos(a), -sin(a), sin(a), cos(a))\nvec4 voronoi2(in vec2 coord){\n    vec2 points[TOTAL_POINTS_CNT];\n    for (int i=0; i<BASE_POINTS_CNT; i++)\n        points[i] = BASE_POINTS[i];\n    for (int i=BASE_POINTS_CNT; i<TOTAL_POINTS_CNT; i++)\n        points[i] = r(radians(45.)) * (hash2(vec2(float(i) * 1.47, float(i) * 1.37)) * 1.5 - .75);\n    \n    vec2 mr;\n\tfloat minDistance = MAX_FLOAT;\n    int index = -1;\n    for(int i=0; i<TOTAL_POINTS_CNT; i++){\n    \tvec2 to = points[i] - coord;\n        float curDistance = distance(points[i], coord);\n        if(curDistance < minDistance){\n            minDistance = curDistance;\n            mr = to;\n            index = i;\n        }\n    }\n    minDistance = MAX_FLOAT;\n    vec2 nrm = vec2(0.);\n    for(int i=0; i<TOTAL_POINTS_CNT; i++){\n    \tif(i == index)\n            continue;\n        vec2 r = points[i] - coord;\n        if(distance(mr, r)>0.0000000000001){\n        \t//minDistance = min(minDistance, dot((mr + r), normalize(r - mr)));\n            float cd = dot( .5 * (mr+r), normalize(r-mr));\n            if (cd < minDistance){\n\t\t\t\tminDistance = cd;\n            \tnrm = normalize(mr - r);\n            }\n        }\n            \n    }\n    return vec4(minDistance, nrm, float(index));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    if(iFrame < 5){\n    \tvec2 p = (2. * fragCoord.xy - iResolution.xy)/iResolution.y;\n        vec4 c = voronoi2(p * 7.);\n        //fragColor = vec4(.1 - c.x, c.w, c.yz);//mix(vec4(1.0,0.6, 0.0, 1.), vec4(fract(p.x * 10.)), smoothstep( 0.02, 0.04, c.x));\n        fragColor = vec4(.05 - c.x, c.w, c.yz);//mix(vec4(1.0,0.6, 0.0, 1.), vec4(fract(p.x * 10.)), smoothstep( 0.02, 0.04, c.x));\n    }else{\n    \tfragColor = texture(iChannel1, fragCoord.xy/iResolution.xy);//mix(vec4(1.0,0.6, 0.0, 1.), vec4(fract(p.x * 10.)), smoothstep( 0.02, 0.04, c.x));\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.;\n    float z = size.y / tan(radians(fieldOfView) / 2.);\n    return normalize(vec3(xy, -z));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye),\n         s = normalize(cross(f, up)),\n         u = cross(s, f);\n    return mat4(vec4(s, 0.), vec4(u, 0.), vec4(-f, 0.), vec4(vec3(0.), 1.));\n}","name":"Common","description":"","type":"common"}]}