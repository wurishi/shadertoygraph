{"ver":"0.1","info":{"id":"tsKBzG","date":"1607525445","viewed":263,"name":"Pulsating Cubes","username":"andrinr","description":"Basic raytracer","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p){\n    vec3 q = fract(p) * 2.0 - 1.; \n    \n    //sphere\n    //return length(q)*0.6 - 0.05; \n    \n    //box \n    q = abs(q);\n    return max(q.x, max( (sin(3.*iTime+p.z*0.4+p.y*0.8+p.x*0.55)*0.3 + 0.5) *q.y,q.z)) - 0.1;\n} \n\nfloat trace(vec3 origin, vec3 ray){ \n    float t = 0.; \n    for (int i = 0; i < 64; ++i){ \n        vec3 p = origin + ray * t; \n        float d = map(p);\n        t += d*0.5; \n    } return t; \n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) { \n    // Normalized pixel coordinates (from 0 to 1) \n    vec2 uv = fragCoord/iResolution.xy; \n    uv = uv * 2.0 - 1.0; \n    uv.x *= iResolution.x / iResolution.y; \n    \n    // Start raytracer\n    vec3 ray = normalize(vec3(uv, 1.0)); \n    vec3 origin = vec3(0.0, 0.0, iTime); \n    float t = trace(origin, ray); \n    \n    \n    // Calculate fog\n    float fog = 1.0 / (1.0 + t*t* 0.1); \n    vec3 fc = vec3(fog); \n    // Output to screen \n    fragColor = vec4(fc,1.0); \n}","name":"Image","description":"","type":"image"}]}