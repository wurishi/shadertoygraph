{"ver":"0.1","info":{"id":"WdtXzN","date":"1571591290","viewed":292,"name":"Shadertober 19 Sling","username":"GreenChicken","description":"fast and crap as i like","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["inktober","sling","raymarchinig"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SHADERTOBER 19 Sling\n// Poulet Vert 20-10-2019\n// thanks iq, leon, Allan Alcorn\n\n#define PI 3.14159\n#define MAXSTEP 64\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nfloat ThirdRules(vec2 uv)\n{\n    float r = 0.; // final rule output\n    float rs = 0.005; // rule line size\n    float ds = 0.5; // dot size\n    \n    float hr = 0.0;\n    hr = step(fract(uv.x * 3.), rs);\n    hr *= 1. - step(uv.x, .1);\n    float d = step(fract(uv.y * 100.), ds);\n    hr = min(hr, d);\n    \n    float vr = 0.0;\n    d = step(fract(uv.x * 100.), ds);\n    vr = min(step(fract(uv.y * 3.), rs), d);\n    vr *= 1. - step(uv.y, .1);\n    \n    return max(hr, vr);\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\n\nvec3 opRep(vec3 p, vec3 c)\n{\n     return mod(p+0.5*c,c)-0.5*c;\n}\n\nfloat opU(float d1, float d2)\n{\n    return min(d1, d2);\n}\n\nvec2 opU2( vec2 d1, vec2 d2 )\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// Scene setup\nvec2 map(vec3 pos)\n{\n    vec2 scene = vec2(0.0, 0.0);\n    \n    pos.y += iTime;\n    \n    vec3 bp = pos + vec3(2.0, 0.0, 0.0);\n    bp = opRep(bp, vec3(4.0, 1.0, 10.));\n    float box = sdBox(bp, vec3(.3, .3, 1.0));\n    \n    vec3 hp = pos + vec3(sin(iTime*5.0)*1.5, -iTime, 0.0);\n    float heart = sdSphere(hp, .3);\n    \n    \n    // materials\n    scene = vec2(box, 0.0);\n    scene = opU2(scene, vec2(heart, 1.0));\n    \n    return scene;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<128 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(float(i)/128., ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = vec3(ro + rd * t.x);\n    \n    vec3 col = vec3(0.0);\n    vec3 polyCol = palette(t.x+fract(iTime), vec3(.5), vec3(.5), vec3(1.0), vec3(0.0, 0.33, 0.67));\n    \n    if(t.x == -1.0)\n    {\n        \n        col = vec3(.1)*(length(uv)-.4);\n        \n    }\n    else\n    {\n        float depth = 1.0 - t.x;\n        \n        if(t.y == 0.0)\n        {\n            col = vec3(depth)*.4;\n        }\n        else if(t.y == 1.0)\n        {\n            col = polyCol;\n        }\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 2.0 * forward);\n}\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n\n    float time = iTime * .5;\n    vec3 cp = vec3(sin(time), 0.0, cos(time))*5.0;\n    vec3 ct = vec3(0.0, 0.0, 0.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec3 col = Render(cp, vd, uv);\n    \n    col -= ThirdRules(screenUV)*sin(iTime*10.);\n    \n    fragColor = vec4(sqrt(clamp(col, 0.0, 1.0)),1.0);\n}","name":"Image","description":"","type":"image"}]}