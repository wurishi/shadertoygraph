{"ver":"0.1","info":{"id":"ldjcDc","date":"1504436960","viewed":1430,"name":"GLSL standard functions","username":"gPlatl","description":"Display GLSL standard functions in a 2d graph.\nPress button an the right side to select a function group:  common, limitation, trigonometric, hyperbolic\nPress z to switch zoom factor.\n","likes":6,"published":1,"flags":16,"usePreview":1,"tags":["2d","glsl","graph","functions","standard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------------\n// GLSL_Standard_Functions.glsl        by Gerd Platl\n//\n// display GLSL standard functions\n//\n// original:  https://www.shadertoy.com/view/MdjGRy\n//\n// tags: 2d, glsl, graph, functions, standard\n//\n// v0.1  2017-05-14   preRelease - function drawings\n// v1.0  2017-09-03   initial release\n//       2018-01-29   working on... \n// infos:\n// https://www.opengl.org/sdk/docs/reference_card/opengl45-reference-card.pdf\n// https://www.shadertoy.com/view/4tB3WV\n// https://www.shadertoy.com/view/Ml3Gz8\n//\n//----------------------------------------------------------\n/** Usage:\n\t- Click on right buttons to select function group.\n\t- Key z toggles zooming effect.\n*/\n\n//--- common data ---\n\n#define baseScale 8.\n#define thickness 2.0\n#define backColor vec3(1.0)    // backgound color\n\nfloat time = 0.0;\nfloat zoom = baseScale;\nfloat width = 0.;\n\nvec2 uv = vec2(0.0);   // -1 .. 1\n\nint functionGroup = 0; // 0 .. 4\nint zoomState = 0;     // 0 .. 1\n\n//== font handling =========================================\n\n#define FONT_SPACE 0.55\n\nvec2 tp = vec2(0.0);  // text position\n\nconst vec2 vFontSize = vec2(8.0, 15.0);  // multiples of 4x5 work best\n\n//----- access to the image of ascii code characters ------\n\n#define SPACE tp.x-=FONT_SPACE;\n#define _     tp.x-=FONT_SPACE;\n\n#define S(a) c+=char(a);  tp.x-=FONT_SPACE;\n\n#define _note  S(10);   //\n#define _star  S(28);   // *\n#define _smily S(29);   // :-)        \n#define _exc   S(33);   // !\n#define _add   S(43);   // +\n#define _comma S(44);   // ,\n#define _sub   S(45);   // -\n#define _dot   S(46);   // .\n#define _slash S(47);   // /\n\n#define _0 S(48);\n#define _1 S(49);\n#define _2 S(50);\n#define _3 S(51);\n#define _4 S(52);\n#define _5 S(53);\n#define _6 S(54);\n#define _7 S(55);\n#define _8 S(56);\n#define _9 S(57);\n#define _ddot S(58);   // :\n#define _sc   S(59);   // ;\n#define _less S(60);   // <\n#define _eq   S(61);   // =\n#define _gr   S(62);   // >\n#define _qm   S(63);   // ?\n#define _at   S(64);   // at sign\n\n#define _A S(65);\n#define _B S(66);\n#define _C S(67);\n#define _D S(68);\n#define _E S(69);\n#define _F S(70);\n#define _G S(71);\n#define _H S(72);\n#define _I S(73);\n#define _J S(74);\n#define _K S(75);\n#define _L S(76);\n#define _M S(77);\n#define _N S(78);\n#define _O S(79);\n#define _P S(80);\n#define _Q S(81);\n#define _R S(82);\n#define _S S(83);\n#define _T S(84);\n#define _U S(85);\n#define _V S(86);\n#define _W S(87);\n#define _X S(88);\n#define _Y S(89);\n#define _Z S(90);\n\n#define _a S(97);\n#define _b S(98);\n#define _c S(99);\n#define _d S(100);\n#define _e S(101);\n#define _f S(102);\n#define _g S(103);\n#define _h S(104);\n#define _i S(105);\n#define _j S(106);\n#define _k S(107);\n#define _l S(108);\n#define _m S(109);\n#define _n S(110);\n#define _o S(111);\n#define _p S(112);\n#define _q S(113);\n#define _r S(114);\n#define _s S(115);\n#define _t S(116);\n#define _u S(117);\n#define _v S(118);\n#define _w S(119);\n#define _x S(120);\n#define _y S(121);\n#define _z S(122);\n\n//---------------------------------------------------------\n// return high quality font lookup\n//---------------------------------------------------------\nvec4 hqTexture(vec2 xy)\n{\n  //return texture(iChannel0,xy); /* low quality font lookup */\n  vec2 d = vec2(1.0 / 1200.,0.);  \n  return (     texture(iChannel0, xy + d + d.yx)\n          +    texture(iChannel0, xy + d - d.yx)\n          +    texture(iChannel0, xy - d - d.yx)\n          +    texture(iChannel0, xy - d + d.yx)\n          + 2.*texture(iChannel0,xy)\n         ) / 6.0;\n}\n\n//---------------------------------------------------------\n// return font image intensity of character ch at text position tp\n//---------------------------------------------------------\n/*\nfloat char(int c)    // old versions\n{ float ch = float(c); \n//return texture(iChannel0,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,15.999-float(ch)/16.))/16.));\n  return texture(iChannel0,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,16.-(1e-6)-floor(ch)/16.))/16.)).x;\n}\n*/\n\nfloat char(int ch)\n{\n  vec4 f = any(lessThan(vec4(tp,1,1), vec4(0,0,tp))) \n               ? vec4(0) \n               : hqTexture(0.0625*(tp + vec2(ch - ch/16*16, 15 - ch/16)));  \n    \n  return f.x * (f.y+0.3)*(f.z+0.3)*2.0;   // 3d\n}\n\n//----------------------------------------------------------------\n// set text starting position to x=line, y=column (left/top = 1,1) \n//----------------------------------------------------------------\nvoid SetTextPosition(float x, float y)  //\n{\n  tp = 10.0*uv;\n  tp.x = tp.x +17. - x;\n  tp.y = tp.y -9.4 + y;\n}\n\n//== value drawings ========================================\n\n//--- display number fraction with leading zeros --- \nfloat drawFract(float value, int digits)\n{ \n  float c = 0.0;\n  value = fract(value) * 10.0;\n  for (int ni = 1; ni < 60; ni++) \n  {\n    c += char(48 + int(value)); // add 0..9\n    tp.x -= FONT_SPACE;\n    digits -= 1;\n    value = fract(value) * 10.0;\n    if (digits <= 0 || value == 0.0) break;\n  } \n  tp.x -= FONT_SPACE*float(digits);\n  return c;\n}\n                                                                                                             \n//--- display integer value --- \nfloat drawInt(int value, int minDigits)\n{\n  float c = 0.;\n  if (value < 0) \n  { value = -value;\n    if (minDigits < 1) minDigits = 1;\n    else minDigits--;\n    _sub                   // add minus char\n  } \n  int fn = value, digits = 1; // get number of digits \n  for (int ni=0; ni<10; ni++)\n  {\n    fn /= 10;\n    if (fn == 0) break;\n    digits++;\n  } \n  digits = max(minDigits, digits);\n  tp.x -= FONT_SPACE * float(digits);\n  for (int ni=1; ni < 11; ni++) \n  { \n    tp.x += FONT_SPACE; // space\n    c += char(48 + (value-((value/=10)*10))); // add 0..9 \n    if (ni >= digits) break;\n  } \n  tp.x -= FONT_SPACE * float(digits);\n  return c;\n}\n\n//--- display float value ---\nfloat drawFloat(float value, int prec, int maxDigits)\n{ \n  float tpx = tp.x-FONT_SPACE*float(maxDigits);\n  float c = 0.;\n  if (value < 0.0) \n  { \n    c = char(45); // write minus sign\n    value = -value;\n  }\n  tp.x -= FONT_SPACE;\n  c += drawInt(int(value),1);\n  c += char(46); SPACE; // add dot \n  c += drawFract(fract(value), prec);\n  tp.x = min(tp.x, tpx);\n  return c;\n}\n\nfloat drawFloat(float value)           {return drawFloat(value,2,5);} \n\nfloat drawFloat(float value, int prec) {return drawFloat(value,prec,2);} \n\nfloat drawInt(int value)               {return drawInt(value,1);}\n\n\n//----------------------------------------------------------\n// initialize function color array\n//----------------------------------------------------------\nvec3 colors[7];\n\n#define color1 vec3(0.1, 0.5, 0.0)\n#define color2 vec3(0.1, 0.3, 0.9)\n#define color3 vec3(0.6, 0.1, 0.6)\n#define color4 vec3(0.5, 0.5, 0.2)\n#define color5 vec3(0.6, 0.4, 0.2)\n#define color6 vec3(0.5, 0.1, 0.1)\n#define color7 vec3(0.6, 0.6, 0.1)\n\nvec3 color = vec3(1.0);    // current pixel color\n\n//== text infos ============================================\n\nconst vec3 colorF = vec3(0.2, 0.6, 0.4);\n\nfloat c = 0.;\n\n#define addText(col) if(c>0.1) color=c*col; c=0.;\n\nvoid drawFunctionInfo(inout vec3 color, const in int num)  \n{\n  SetTextPosition(1.0, 1.0);\n    \n  c = drawInt(functionGroup+1);  SPACE\n      \n  if (functionGroup == 0) { _c _o _m _m _o _n _ddot _ _\n      addText(colorF);   _a _b _s _ \n      addText(color1);   _s _i _g _n _ \n      addText(color2);   _f _r _a _c _t _ \n      addText(color3);   _r _o _u _n _d _\n      addText(color4);   _f _l _o _o _r _\n      addText(color5);   _c _e _i _l _\n      addText(color6);   _m _o _d _\n      addText(color7);\n    }\n  else if (functionGroup == 1) { _l _i _m _i _t _a _t _i _o _n _ddot _ _\n      addText(colorF);   _m _i _n _ \n      addText(color1);   _m _a _x _ \n      addText(color2);   _c _l _a _m _p _ \n      addText(color3);   _ _ _ _ _3 _ _star _ _s _m _o _o _t _h _s _t _e _p _\n      addText(color4);   \n    }\n  else if (functionGroup == 2) { _t _r _i _g _o _n _o _m _e _t _r _i _c  _ddot _ _  \n      addText(colorF);   _c _o _s _ \n      addText(color1);   _s _i _n _ \n      addText(color2);   _t _a _n _ \n      addText(color3);   _a _s _i _n _\n      addText(color4);   _a _c _o _s _\n      addText(color5);   _a _t _a _n _\n      addText(color6);\n    }\n  else if (functionGroup == 3) { _h _y _p _e _r _b _o _l _i _c _ddot _ _\n      addText(colorF);   _s _i _n _h _ \n      addText(color1);   _c _o _s _h _ \n      addText(color2);   _t _a _n _h _ \n      addText(color3);   _a _s _i _n _h _\n      addText(color4);   _a _c _o _s _h _\n      addText(color5);   _a _t _a _n _h _\n      addText(color6);\n    }\n  else if (functionGroup == 4) { _c _o _l _o _r _s _ddot\n      addText(colorF);   _1 _ \n      addText(color1);   _2 _ \n      addText(color2);   _3 _ \n      addText(color3);   _4 _\n      addText(color4);   _5 _\n      addText(color5);   _6 _\n      addText(color6);   _7 _\n      addText(color7);\n  }\n}\n\n//----------------------------------------------------------\n// draw GLSL FUNCTIONS\n//----------------------------------------------------------\nfloat getFunctionValue(const in float x, const in int num)\n{\n  if (functionGroup == 0) // COMMON FUNCTIONS\n  {\n    if      (num == 1) return abs(x);\n    else if (num == 2) return sign(x);\n    else if (num == 3) return fract(x);\n    else if (num == 4) return round(x);\n    else if (num == 5) return floor(x)+0.1;\n    else if (num == 6) return ceil(x)-0.1;\n    else if (num == 7) return mod(x, 2.2);\n  }\n  else if (functionGroup == 1) // LIMIT FUNCTIONS\n  {\n    if      (num == 1) return min(x, -2.5);\n    else if (num == 2) return max(x, +2.5);\n    else if (num == 3) return clamp(x+1., -0.5, 0.5);\n    else if (num == 4) return -1.5+3.0*smoothstep(-2.0, 2.0, x);\n    else if (num == 5) return -1.5+3.0*smoothstep(0.5, -0.5, x);\n    else if (num == 6) return -2.0+4.0*(smoothstep(-4., -1., x) - smoothstep(3., 5., x));\n  }\n  else if (functionGroup == 2) // TRIGONOMETRIC FUNCTIONS\n  {\n    if      (num == 1) return cos(x);  // cosine\n    else if (num == 2) return sin(x);  // sine\n    else if (num == 3) return tan(x);  // tangent\n    else if (num == 4) return asin(x); // arc sine \n    else if (num == 5) return acos(x); // arc cosine\n    else if (num == 6) return atan(x); // arc tangent\n        \n  }\n  else if (functionGroup == 3) // HYPERBOLIC FUNCTIONS\n  {\n    if      (num == 1) return sinh(x); // hyperbolic sine\n    else if (num == 2) return cosh(x); // hyperbolic cosine\n    else if (num == 3) return tanh(x); // hyperbolic tangent\n    else if (num == 4) return asinh(x); // hyperbolic arc sine \n    else if (num == 5) return acosh(x); // hyperbolic arc cosine\n    else if (num == 6) return atanh(x); // hyperbolic arc tangent\n  }\n  else if (functionGroup == 4) // FUNCTION COLORS\n  {\n    if      (num == 1) return -3.;\n    else if (num == 2) return -2.;\n    else if (num == 3) return -1.;\n    else if (num == 4) return 0.;\n    else if (num == 5) return 1.;\n    else if (num == 6) return 2.;\n    else if (num == 7) return 3.;\n  }\n  return -999.999;\n}\n\n#define decimalPlace 3.\n\n//----------------------------------------------------------\n// distance estimation\n// https://iquilezles.org/articles/distance\n//----------------------------------------------------------\nfloat dist(const in vec2 p, in int num)\n{\n  float v = getFunctionValue (p.x, num)-p.y;\n  float h = 0.5;\n  float g = 1.5+ pow(getFunctionValue (p.x+h, num) \n                   - getFunctionValue (p.x-h, num),2.);\n  float de = abs(v) / sqrt(g);\n  return float(smoothstep(0.0, 0.13, de));\n}\n//----------------------------------------------------------\n// draw function graph\n//----------------------------------------------------------\nfloat draw(const in vec2 p, const in int num, const in float zoom)\n{\n    float rz = dist(p, num);\n\trz *= (1./thickness)/sqrt(zoom/iResolution.y);\n\trz = 1.-clamp(rz, 0., 1.);\n\treturn rz;\n}\n\n\n//== key input handling ====================================\n\nconst int KEY_1  = 49;\nconst int KEY_2  = 50;\nconst int KEY_3  = 51;\nconst int KEY_4  = 52;\nconst int KEY_5  = 53;\n\nconst int KEY_F1 = 112;\nconst int KEY_F2 = 113;\nconst int KEY_F3 = 114;\nconst int KEY_F4 = 115;\nconst int KEY_F5 = 116;\n\n#define KEY_Z 90\n//----------------------------------------------------------\n// get javascript keycode: http://keycode.info/\n//----------------------------------------------------------\nbool ReadKey(int key, bool toggle)\n{\n  return 0.5 < texture(iChannel3\n    ,vec2((float(key)+0.5) / 256.0, toggle ? 0.75 : 0.25)).x;\n}\n\n//=== TestRahmen ==========================================\n\nfloat aspect = 1.0;       // aspect ratio x/y\nvec2 ratio = vec2 (1.0);  // aspect ratio (x/y,1)\nvec2 npos = vec2(0.0);    // pixel position 0 .. 1\nvec2 mpos = vec2(0.0);    // mouse position 0 .. 1\nvec2   mp = vec2(0.0);    //      centered -1 .. 1\n\nconst vec3 gray      = vec3(0.40);\nconst vec3 darkGray  = vec3(0.15);\nconst vec3 red       = vec3(1.00, 0.00, 0.00);\nconst vec3 green     = vec3(0.00, 1.00, 0.00);\nconst vec3 blue      = vec3(0.00, 0.00, 1.00);\nconst vec3 lightRed  = vec3(1.00, 0.50, 0.50);\nconst vec3 lightGreen= vec3(0.50, 1.00, 0.50);\nconst vec3 lightBlue = vec3(0.50, 0.50, 1.00);\nconst vec3 cyan      = vec3(0.00, 0.95, 0.95);\nconst vec3 orange    = vec3(1.00, 0.55, 0.20);\nconst vec3 yellow    = vec3(0.80, 0.80, 0.20);\n\n//---------------------------------------------------------\n// draw rectangle at pos(-1..+1) with given size\n//---------------------------------------------------------\nfloat rectangle(vec2 pos, vec2 size)\n{\n  size *= 0.5;\n  vec2 r = abs(uv - pos - size) - size;\n  return step( max(r.x,r.y),0.0);\n}\n//---------------------------------------------------------\n// select function depending on mouse click\n//---------------------------------------------------------\n#define maxSelection 10.0\n#define maxButtons 4.0\nfloat selection = 0.;\n//int functionIndex = 0;\n\nvoid functionSelection()\n{\n  selection = clamp (0.0, maxSelection-1., floor(mpos.y * maxSelection));\n//  if (mpos.x > 0.94)\n  if (selection < 4.5) \n       functionGroup = int(selection);     // 0..4 \n  else functionGroup = 4; // 0..4\n}\n//---------------------------------------------------------\n// draw buttons on right side\n//---------------------------------------------------------\n#define pPos(y) vec2(aspect*0.9,y*2.0/maxSelection-0.98)\nvoid drawButtons()\n{\n  vec2 buttonSize = vec2 (0.15, 1.4 / maxSelection);\n  for (float n=0.0; n < maxButtons; n++)\n  {\n    if (rectangle(pPos(n), buttonSize) > 0.5) color = gray;\n  }\n  if (rectangle(pPos(selection), buttonSize) > 0.0) color = yellow;\n}\n//---------------------------------------------------------\nvoid setZoom(int zoomValue)\n{\n  zoom = baseScale * float(zoomValue+1);\n  //width = -0.02;\n}\n\n//== main program ==========================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  //float t = iTime;\n\n  aspect = iResolution.x / iResolution.y;    // aspect ratio\n  ratio = vec2(aspect, 1.0);                 //      \n  npos = fragCoord.xy / iResolution.xy;      //  0.0 .. 1.0\n  uv = (2.0 * npos - 1.0) * ratio;           // -1.0 .. 1.0\n  mpos = iMouse.xy / iResolution.xy;         //  0.0 .. 1.0\n  mp = (2.0 * mpos - 1.0) * ratio;           // -1.0 .. 1.0\n    \n  if (ReadKey(KEY_Z, true)) setZoom (1);\n  width += 3. / iResolution.x * zoom;\n\n  if      (ReadKey(KEY_1, true)) functionGroup = 0;\n  else if (ReadKey(KEY_2, true)) functionGroup = 1;\n  else if (ReadKey(KEY_3, true)) functionGroup = 2;\n  else if (ReadKey(KEY_4, true)) functionGroup = 3;\n  else if (ReadKey(KEY_5, true)) functionGroup = 4;\n    \n  vec2 pos = fragCoord.xy / iResolution.y;  //  0.0 .. 1.0\n  vec2 uv = (pos - 0.5) * zoom;             // -1.0 .. 1.0\n//    uv.x -= 3.0;\n    \n  float     grid = step(abs(uv.x), width*0.5)*.8;\n  grid = max(grid, step(abs(uv.y), width*0.5)*.8);\n  grid = max(grid, step(fract(uv.x), width*1.2)*.2);\n  grid = max(grid, step(fract(uv.y), width*1.2)*.2);\n  grid = max(grid, step(fract(uv.x-0.5), width*1.2)*.04);\n  grid = max(grid, step(fract(uv.y-0.5), width*1.2)*.04);\n  color -= grid;\n\n  //if (iMouse.z > 0.0)    // mousePressed ?\n  functionSelection();\n\n  drawFunctionInfo(color, functionGroup);\n\n  color = mix(color, color1, draw(uv,1, zoom));\n  color = mix(color, color2, draw(uv,2, zoom));\n  color = mix(color, color3, draw(uv,3, zoom));\n  color = mix(color, color4, draw(uv,4, zoom));\n  color = mix(color, color5, draw(uv,5, zoom));\n  color = mix(color, color6, draw(uv,6, zoom));\n  color = mix(color, color7, draw(uv,7, zoom));\n\t\n  drawButtons();\n        \n  fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}