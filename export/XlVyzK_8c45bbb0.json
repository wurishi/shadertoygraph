{"ver":"0.1","info":{"id":"XlVyzK","date":"1536939263","viewed":69,"name":"Exp.audio","username":"tqle","description":"with audio","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["experiments"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sphere - Signed Distance Function\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n}\nmat2 rot(float a){\n    return mat2(cos(a), -sin(a),\n                sin(a), cos(a));\n}\n\n\n\n// Locate objects\nfloat map(vec3 p)\n{    \n    // Sphere radius\n    float sphereSize = 1.2;\n    \n    // Transform coordinate space so spheres repeat\n    vec3 q = fract(p) * 2.0 - 1.0;\n    \n     int tx = int(q.x);\n    float fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\tfft *= 2.5;\n    // Signed distance of sphere\n    float s = sphere(q, sphereSize);\n    \n    float d = 0.1 * (cos(q.x*5.*fft));\n    //return s +wave;\n    return sin(s)+sin(d);\n}\n\n\n// Trace rays\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0; // Distance Traveled\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = origin + r * t;\n        float d = map(p); // Locate object\n        t += d * 0.5; // Step along the ray\n    }\n\treturn t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = vec3(sin(iTime*1.15), 0.0, 0.134);\n    \n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y;\n\n   \t// Create ray to fire into scene\n   \tvec3 ray = normalize(vec3(uv, 1.0));\n    \n    ray.zx *= rot(iTime*0.1);\n    \n    // Create origin of scene\n    vec3 origin = vec3(0., 0.,iTime);\n   \n    // Trace any objects in the scene\n    float t = trace(origin, ray);\n    \n    // Generate fog based on distance from t\n    //float fog = 1.0 / (1.0 + t * t * 0.5);\n    float expFog = 3.0 / (t*t*.75);\n\n    // Final color with includes sdf + fog\n    vec3 fc = vec3(expFog);\n    \n\n\n\t\n    //fc = cos(log(color*fft)*0.5);\n    fc -= tan(color)+.25;\n    // Output to screen\n    fragColor = vec4(fc,sin(iTime));\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}