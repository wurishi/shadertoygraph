{"ver":"0.1","info":{"id":"ll3GWs","date":"1472322795","viewed":2712,"name":"Structured Sampling Diagram","username":"huwb","description":"New volume sampling algorithm. Fast, simple, robust. Alternates between new algorithm and naive raymarching. Mouse to set viewer pos. Sample count is fixed (hence 'shadow' in blend regions). ","likes":48,"published":1,"flags":32,"usePreview":0,"tags":["sampling","structured"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Huw Bowles, Daniel Zimmermann, Beibei Wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n//\n// For volume render shader:\n//\n// https://www.shadertoy.com/view/Mt3GWs\n//\n// We are in the process of writing up this technique. The following github repos\n// is the home of this research.\n//\n// https://github.com/huwb/volsample\n//\n\n#define PERIOD (30.)\n#define SAMPLE_CNT 15\n#define RESOLUTIONS 1\n#define GRID_CONTRAST 1.5\n#define PI 3.141592654\nbool STRATIFIED;\n\nfloat line( vec2 p, vec2 n, bool repeat )\n{\n    //n /= dot(n,n);\n    \n    float d = abs(dot(p, n));\n    \n    if( !repeat )\n    {\n\t    d = d / PERIOD;\n\t    return smoothstep( 1.5/PERIOD, 0., abs(d) );\n    }\n    \n    float res = 0.;\n    for( int i = 0; i < RESOLUTIONS; i++ )\n    {\n        float period = PERIOD*pow(2.,float(RESOLUTIONS-i-1));\n        \n        float fr = abs(fract(d/period));\n        // fix fract boundary\n        fr = min( fr, 1.-fr );\n        float col = mix( 0., .3, pow(GRID_CONTRAST,-float(i)) );\n        res = max( res, smoothstep( 2./period, 0., fr ) * col );\n    }\n    return res;\n}\n\nfloat lines( vec2 p )\n{\n    float l = 0.;\n    \n    l = max( l, line( p, vec2(1.,0.), true ) );\n    \n    if( bool( 10 ) )\n    {\n        l = max( l, line( p, vec2(1.,1.)/sqrt(2.), true ) );\n        l = max( l, line( p, vec2(1.,-1.)/sqrt(2.), true ) );\n        l = max( l, line( p, vec2(0.,1.), true ) );\n    }\n    \n    return l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tSTRATIFIED = fract(iTime/(4.*PI))<0.5;\n    \n    vec2 p = fragCoord.xy - iResolution.xy / 2.;\n    \n    float l = lines( p );\n    \n    fragColor = vec4(l);\n\n    fragColor += texture( iChannel0, fragCoord/iResolution.xy );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Huw Bowles, Daniel Zimmermann, Beibei Wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n//\n// For volume render shader:\n//\n// https://www.shadertoy.com/view/Mt3GWs\n//\n// We are in the process of writing up this technique. The following github repos\n// is the home of this research.\n//\n// https://github.com/huwb/volsample\n//\n\n#define PERIOD (30.)\n#define SAMPLE_CNT 12\n#define RESOLUTIONS 1\n#define GRID_CONTRAST 1.5\n#define PI 3.141592654\n\nbool STRATIFIED;\nbool ACCUMULATE = false;\n\n// doubles the step size, and then moves to the next line if at an 'odd' position\n// TODO could this be posed as skipping the leftover to get to the next line, and therefore\n// remove the code to compute ts?\nvoid halveDensity( inout vec2 t, inout vec2 dt, vec3 ro, vec3 rd, vec3 n0, vec3 n1, vec2 dotd )\n{\n    dt *= 2.;\n    \n    vec2 doto; // normal dot ro\n    doto.x = dot( n0, ro + t.x*rd );\n    doto.y = dot( n1, ro + t.y*rd );\n    vec2 dist = abs(doto/dotd);\n    vec2 fr = fract( dist/dt );\n\tif( fr.x > .01 && fr.x < .99 ) t.x += .5 * dt.x;\n\tif( fr.y > .01 && fr.y < .99 ) t.y += .5 * dt.y;\n}\nfloat smoothbump( float r, float x )\n{\n    return smoothstep( r-2., r, x ) - smoothstep( r, r+2., x );\n}\n\n// to share with unity hlsl\n#define float2 vec2\n#define float3 vec3\n#define fmod mod\n\nvoid IntersectPlanes( float3 n, float3 rd, float3 ro, out float t_0, out float dt, out float wt )\n{\n    // step size\n    float ndotrd = dot( rd, n );\n    dt = PERIOD / abs( ndotrd );\n\n    // raymarch start offset - skips leftover bit to get from ro to first strata lines\n    t_0 = -fmod( dot( ro, n ), PERIOD ) / ndotrd;\n    if( t_0 < 0. ) t_0 += dt;\n\n    // ray weight\n    float minperiod = PERIOD;\n    float maxperiod = .8*sqrt( 2. )*PERIOD;\n    wt = smoothstep( maxperiod, minperiod, dt );\n}\n\n// compute ray march start offset and ray march step delta and blend weight for the current ray\nvoid SetupSampling( out float2 t, out float2 dt, out float2 wt, in float3 ro, in float3 rd )\n{\n    if( !STRATIFIED )\n    {\n        dt = float2(PERIOD,PERIOD);\n        t = dt;\n        wt = float2(0.5,0.5);\n        return;\n    }\n    \n    // the following code computes intersections between the current ray, and a set\n    // of (possibly) stationary sample planes.\n    \n    // this would be better computed on the VS\n        \n    // intersect ray with planes\n    float3 n;\n    \n    n = abs( rd.x ) > abs( rd.z ) ? float3(1., 0., 0.) : float3(0., 0., 1.); // non diagonal\n    IntersectPlanes( n, rd, ro, t.x, dt.x, wt.x );\n    \n    n = float3( rd.x * rd.z > 0. ? 1. : -1., 0., 1.) / sqrt(2.); // diagonal\n    IntersectPlanes( n, rd, ro, t.y, dt.y, wt.y );\n\n    wt /= (wt.x + wt.y);\n}\n\nfloat MarchAgainstPlanes( float t0, float dt, float wt, vec3 ro, vec3 rd, vec2 p )\n{\n    float t = t0;\n    float res = 0.;\n    vec3 pos;\n    \n    float firstWt = t0/dt;\n    \n    // first sample - blend in\n    pos = ro + t * rd;\n    res = max( res, firstWt*wt*smoothstep( 4., 2., length( pos.xz - p ) ) );\n    t += dt;\n    \n    // interior samples\n    for( int i = 1; i < SAMPLE_CNT-1; i++ )\n    {\n        pos = ro + t * rd;\n        \n        // render - in this case draw dots at each sample\n        res = max( res, wt*smoothstep( 4., 2., length( pos.xz - p ) ) );\n        \n        t += dt;\n    }\n    \n    // last sample - blend out\n    pos = ro + t * rd;\n    res = max( res,(1.-firstWt)*wt*smoothstep( 4., 2., length( pos.xz - p ) ) );\n    t += dt;\n    \n    return res;\n}\n\nvec3 Raymarch( vec3 ro, vec3 rd, vec2 p )\n{\n    vec3 fragColor = vec3(0.);\n    \n    // this intersects the ray with a set of planes (shown as lines in the diagram).\n    // these calculations could be moved outside the pixel shader in normal scenarios.\n    vec2 t, dt, wt;\n    SetupSampling( t, dt, wt, ro, rd );\n    \n    if( wt.x >= 0.01 )\n    {\n        float march = MarchAgainstPlanes( t.x, dt.x, wt.x, ro, rd, p );\n        fragColor = max( fragColor, march * .6*vec3(1.2,.2,.2) );\n    }\n    if( wt.y >= 0.01 )\n    {\n        float march = MarchAgainstPlanes( t.y, dt.y, wt.y, ro, rd, p );\n        fragColor = max( fragColor, march * .6*vec3(.2,1.2,.2) );\n    }\n    \n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tSTRATIFIED = fract(iTime/(4.*PI))<0.5;\n    \n    vec2 p = fragCoord.xy - iResolution.xy / 2.;\n    \n    fragColor = vec4(0.);\n    \n    vec2 ro2 = 82.*vec3(cos(.5*iTime)-.01,0.,sin(.7*iTime)).xz;\n    if( iMouse.z > 0. )\n        ro2 = iMouse.xy - iResolution.xy/2.;\n    vec3 ro = vec3(ro2.x,0.,ro2.y);\n    vec3 center = 80.*vec3(cos(iTime),0.,sin(iTime));\n    vec3 rd = normalize(center-ro);\n    vec2 mn = vec2( -rd.z, rd.x );\n    \n    // cast a bunch of rays to emulate a frustum.\n    float fov = 0.015;\n    for( float of = -20.; of <= 20.; of += 5. )\n    {\n    \tfragColor.rgb += Raymarch( ro, rd + fov*of*float3(mn.x,0.,mn.y), p );\n    }\n    \n    if( ACCUMULATE )\n\t    fragColor = max( fragColor.rgba, texture(iChannel0,fragCoord/iResolution.xy)*.95);\n    \n    float maxextent = float(SAMPLE_CNT) * PERIOD;\n    \n    fragColor.r += .6*smoothbump( maxextent, length(p-ro.xz) );\n    fragColor.b += .6*smoothbump( maxextent, length(p-ro.xz) );\n    \n    // viewer pos\n    fragColor.g += smoothstep(4.,2.,length(ro.xz+iResolution.xy/2.-fragCoord));\n    // look target\n    fragColor.b += smoothstep(4.,2.,length(center.xz+iResolution.xy/2.-fragCoord));\n}\n","name":"Buf A","description":"","type":"buffer"}]}