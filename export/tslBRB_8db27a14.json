{"ver":"0.1","info":{"id":"tslBRB","date":"1588650103","viewed":78,"name":"My Spinning Planet","username":"aberkson1","description":"For fun","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spaceplanet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define scale 10.0\n\n\nfloat random(vec2 st)\n{\n \treturn fract(sin(dot(st, vec2(12.43, 67.88)))*94436.3453);   \n}\n\nfloat noise(vec2 uv)\n{\n\tvec2 i = floor(uv);\n    vec2 f = fract(uv);\n    vec2 u = smoothstep(0.0, 1.0, f);\n    \n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    \n    return mix( mix(a, b, u.x),\n                mix(c, d, u.x), u.y);\n}\n\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle), -sin(angle),\n                sin(angle),  cos(angle));\n}\n\nvec2 line(in vec2 uv, float b, float c)\n{\n \tvec2 f = fract(uv);\n    return smoothstep(b - c, b, f) - smoothstep(b, b + c, f);\n}\n\nfloat smoothLine(in vec2 uv)\n{\n    vec2 f = fract(uv);\n    vec2 u = smoothstep(0.0, 1.0, f);\n    float b1 = noise(uv - vec2(0.0, -1.0));\n    float b2 = noise(uv - vec2(0.0, 0.0));\n    float dist = (1.0 - abs(b2 - u.y)) * abs(b2 - u.y);\n    return  1.0 - dist;\n}\n\nvec3 planet( in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= scale;\n    //uv = rotate2d(3.2*(uv.x - 14.2) * (uv.y / 8.0) * 3.1415 / 180.0) * uv;\n    uv = rotate2d(21.0 * 3.1415 / 180.0) * uv;\n    \n    vec2 pos = vec2(uv.x + iTime, uv.y);\n    float pattern = line(pos, noise(pos), 0.07).y;\n    float colorPattern = smoothLine(pos);\n    \n    return vec3(pattern * .2, (1.0 - colorPattern) + pattern * .2, pattern * .2);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec2 random3( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(103.1,311.7)),dot(p,vec2(183.5,183.3))))*43758.5453);\n}\n\nvec3 star(in vec2 uv, float _scale)   \n{\n    \n    uv *= _scale;\n    \n    vec2 i_st = floor(uv);\n    vec2 f_st = fract(uv);\n    \n    float min_dist = 1.0;\n    float max_dist = 1.0;\n    float min_dist2 = 1.0;\n    \n    for (int y = -1; y <= 1; ++y)\n    {\n    \tfor (int x = -1; x <= 1; ++x)\n        {\n        \tvec2 neighbor = vec2(float(x), float(y));\n            \n            vec2 point = random2(i_st + neighbor);\n            point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n            \n            vec2 point2 = random3(i_st + neighbor);\n            point2 = 0.5 + 0.5*sin(iTime + 8.2831*point2);\n            \n            vec2 point3 = random2(i_st + neighbor);\n            point2 = 0.5 + 0.5*sin(iTime + 1.2831*point3);\n            \n            vec2 diff = neighbor + point - f_st;\n            vec2 diff2 = neighbor + point2 - f_st;\n            vec2 diff3 = neighbor + point3 - f_st;\n            \n            float dist = abs(length(diff));\n            float dist2 = abs(length(diff2));\n            float dist3 = abs(length(diff3));\n            \n            min_dist = min(min_dist, dist);\n            max_dist = min(max_dist, dist2);\n            min_dist2 = min(min_dist2, dist3);\n        }\n    }\n    return vec3(min_dist + max_dist + min_dist2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 color;\n    vec3 starCol = vec3(0.6, 0.6, 0.6);\n    vec2 center = vec2(0.85, 0.5);\n    \n    float shadow = distance(center + 0.4, uv);\n    float shadow2 = distance(center + vec2(-0.5, -0.5), uv);\n    \n    vec3 stars = star(0.6*uv, 50.0);\n    vec3 circleForeground = (1.0 - step(0.4, distance(center, uv))) * vec3(1.0);// (planet(fragCoord) * 0.4);\n    vec3 circleBackground = (step(0.4, distance(center, uv))) * vec3(1.0);\n    \n    vec2 ringPos = rotate2d(30.0 * 3.1415 / 180.0) * (uv + 1.25);\n    float ring = line(ringPos, 0.5, 0.07).y * 10.0;\n\t\n    starCol -= stars;\n    circleBackground *= starCol * abs(sin(iTime / 10.0 + uv.x));\n    circleForeground *= shadow2 * shadow * planet(fragCoord);\n    color = circleBackground + circleForeground;\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}