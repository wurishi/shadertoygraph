{"ver":"0.1","info":{"id":"WstSWH","date":"1575537109","viewed":206,"name":"Ray marching 00","username":"MaximeG","description":"Awe","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float D_MIN = 0.001;\nfloat D_MAX = 30.;\nint STEP_MAX = 512;\n\nfloat sMin(float a, float b, float t)\n{\n    float tt = max(t - abs(a-b), 0.);\n    return min(a, b) - tt * tt / t / 4.;\n}\n\nvec4 sMin(vec4 a, vec4 b, float t){\n    //https://iquilezles.org/apps/graphtoy/?f1(x)=4*sin(x)&f2(x)=x/3&f3(x)=0.2&f4(x)=max(f3(x)-abs(f1(x)-f2(x)),0)&f6(x)=1-max(min((0.5%20-%20(f1(x)-f2(x))/2/f3(x)),%201.),%200.)\n    float tt = max(t - abs(a.x-b.x), 0.);\n    float s = 1.-max(min(0.5-(a.x-b.x)/(2.*t),1.),0.);\n    return vec4(min(a.x, b.x) - tt * tt / t / 4., mix(a.yzw, b.yzw, s*s*(3.0-2.0*s)));\n}\n\nfloat sMax(float a, float b, float t){\n    float tt = max(t - abs(a-b), 0.);\n    return max(a, b) + tt * tt / t / 4.;\n}\n\nvec4 sMax(vec4 a, vec4 b, float t){\n    float tt = max(t - abs(a.x-b.x), 0.);\n    float s = 1.-max(min(0.5-(a.x-b.x)/(2.*t),1.),0.);\n    return vec4(max(a.x, b.x) + tt * tt / t / 4., mix(a.yzw, b.yzw, s*s*(3.0-2.0*s)));\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 s, float r){\n    return length(max(abs(p) - s, 0.)) - r;\n}\n\nfloat sdTorus(vec3 p, float r1, float r2){\n    return length(vec2(length(p.xz)-r2,p.y)) - r1;\n}\n\n\nvec4 dist(vec3 p){\n    float dplan = p.y;\n    vec4 plan = vec4(dplan, vec3(0.5,0.5,0.5));\n    \n    float dsphere = sdSphere(p-vec3(1.5,1.5,0), 1.);\n    vec4 sphere = vec4(dsphere, vec3(0.3, 0.2, 0.8));\n\n    dsphere = -sdSphere(p-vec3(-1.5,1.5,0), 1.);\n    vec4 sphere2 = vec4(dsphere, vec3(0.3, 0.8, 0.2));\n    \n    float dbox = sdBox(p-vec3(sin(iTime * 0.6) * 3., 0.5, 1), vec3(0.5, 1, 2), 0.);\n    vec4 box = vec4(dbox, vec3(0.8, 0.3, 0.2));\n\n    vec4 m = sMin(sMax(box, sphere2, 0.2), sphere, 0.8 + cos(iTime * 1.)*0.0);\n    \n    \n    vec3 pt = p;\n    pt.y -= 0.04*sin(p.x*11.);\n    dbox = abs(sdBox(pt-vec3(0,1,5), vec3(.8,.2,.2),0.) -0.4)-0.1;\n    box = vec4(dbox, vec3(.7,.7,.7));\n    \n    vec4 m2 = sMax(box, vec4(pt.y-1.-sin(iTime),vec3(0.8,0.2,0.3)),0.1);\n    \n    pt = vec3(mod(p.x,16.)-8.,p.y-1.,mod(p.z,16.)-8.);\n    float a = pt.y * .4 + iTime * .6;\n    mat2 mr = mat2(cos(a),-sin(a),sin(a),cos(a));\n    pt.xz *= mr;\n    dbox = sdBox(pt, vec3(.125,16.,0.5),0.);\n    box = vec4(dbox, vec3(0.2,.7,.5));\n    \n    vec4 m3 = sMin(box, plan, 4.);\n    \n    m2 = sMin(m2, m3, 0.1);\n    \n    pt = p;\n    pt.yz *= 1.;\n    \n    m2 = sMin(m2, vec4(sdTorus(pt-vec3(0.,0.,0.),.5,6.), .7,.3,.8), 0.2);\n    \n    return sMin(m, m2, 0.001);\n}\n\nvec4 RayMarch(in vec3 ro, vec3 dir)\n{\n    float td = 0.;\n    vec4 p;\n    for (int i=0; i<STEP_MAX; i++){\n        vec3 pos = ro + dir * td;\n        p = dist(pos);\n        if (p.x<D_MIN) break;\n        td += p.x * .9;\n        if (td>D_MAX) break;\n    }\n    return vec4(td, p.yzw);\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0.001, 0);\n    return normalize(vec3(dist(p + e.xyy).x - dist(p - e.xyy).x,\n                          dist(p + e.yxy).x - dist(p - e.yxy).x,\n                          dist(p + e.yyx).x - dist(p - e.yyx).x ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    vec3 ro = vec3(7.*sin(iTime*0.09),6,-7.*cos(iTime*0.09));\n    vec3 o = normalize(vec3(0,1,1)-ro);\n    vec3 x = cross(vec3(0,1.,0), o);\n    vec3 y = cross(o, x);\n    mat3 cd = mat3(x.x,y.x,o.x,x.y,y.y,o.y,x.z,y.z,o.z);\n    vec3 rd = normalize(vec3(uv.x,uv.y,0.9)*cd);\n    \n    vec4 rm = RayMarch(ro, rd);\n    float d = rm.x;\n    vec3 pos = ro + d * rd;\n    \n    vec3 col = vec3(0);\n    \n    if (d<D_MAX)\n    {\n        col = rm.yzw;\n        vec3 n = normal(pos);\n        vec3 lp = vec3(2,6,-3);\n        vec3 ld = normalize(pos-lp);\n        float ll = dot(n, -ld);\n        float pl = dot(n, vec3(0, -1, 0));\n        float sl = dot(n, vec3(0, 1, 0));\n        float c = ll*1.4 + pl*0.8 + sl*0.8;\n        //c = pow(c, 0.4545);\n        col *= c;\n        float ldist = length(pos - lp);\n        if (RayMarch(pos + n * 0.4, -ld).x < ldist) col *= 0.2;\n    }\n    else\n    {\n        col = vec3(0.5, 0.5, 0.75) * (1. - rd.y * 0.2);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}