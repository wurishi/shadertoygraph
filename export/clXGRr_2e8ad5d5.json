{"ver":"0.1","info":{"id":"clXGRr","date":"1671142083","viewed":84,"name":"inverse dodecahedron roofs","username":"jt","description":"A [url=https://en.wikipedia.org/wiki/Dodecahedron]Dodecahedron[/url] with it's \"roofs\" reflected into the cube gives an interesting structure,\nwhich should together with Dodecahedron tile space in a checker pattern. Unfortunately this SDF is not exact.\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["inverse","dodecahedron","inexact","roofs"],"hasliked":0,"parentid":"clfGRn","parentname":"dodecahedron roofs"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/clXGRr inverse dodecahedron roofs by jt\n// based on https://www.shadertoy.com/view/clfGRn dodecahedron roofs\n\n// Inverting the \"roofs\" on a cube gives an interesting structure,\n// which should together with Dodecahedron tile space in a checker pattern.\n// Unfortunately this SDF is not exact.\n\n// tags: dodecahedron, roofs, inverse, inexact.\n\n// The MIT License\n// Copyright (c) 2022 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define MAX_ITER 500u\n#define MAX_DIST 1000.0\n#define EPSILON 0.001\n\n// modified https://www.shadertoy.com/view/NsKSDc Truncated Pyramid SDF by TheTurk\nfloat frustum(vec3 p, vec2 base, vec2 top, float halfHeight)\n{\n    p.xy = abs(p.xy); // symmetry\n    p.z -= halfHeight;\n\n    float s1 = abs(p.z) - halfHeight;\n    // bottom\n    vec3 base1 = vec3(max(p.xy - base, vec2(0.0)), abs(p.z + halfHeight));\n    float d1 = dot(base1, base1);\n    // top\n    vec3 base2 = vec3(max(p.xy - top, vec2(0.0)), abs(p.z - halfHeight));\n    float d2 = dot(base2, base2);\n\n    vec3 point1 = vec3(base,-halfHeight);\n    vec3 point2 = vec3(top,+halfHeight);\n    vec3 position1 = p - point1;\n    vec3 position2 = p - point2;\n    vec3 end = point2 - point1;\n\n    vec3 segment = position1 - end * clamp(dot(position1, end) / dot(end, end), 0.0, 1.0);\n    float d = dot(segment, segment);\n\n    vec3 normal1 = vec3(+end.z, 0.0,-end.x);\n    float s2 = dot(position1, normal1);\n    float d3 = d;\n    if (dot(position1.xz,-end.xz) < 0.0 &&\n        dot(position2.xz,+end.xz) < 0.0 &&\n        dot(position1, cross(normal1,-end)) < 0.0)\n    {\n        d3 = s2 * s2 / dot(normal1, normal1);\n    }\n\n    vec3 normal2 = vec3(0.0,+end.z,-end.y);\n    float s3 = dot(position1, normal2);\n    float d4 = d;\n    if (dot(position1.yz,-end.yz) < 0.0 &&\n        dot(position2.yz,+end.yz) < 0.0 &&\n        dot(position1, cross(normal2,+end)) < 0.0)\n    {\n        d4 = s3 * s3 / dot(normal2, normal2);\n    }\n    return sqrt(min(min(min(d1, d2), d3), d4)) * sign(max(max(s1, s2), s3));\n}\n\nfloat box(vec3 p, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\n#define PHI ((1.0 + sqrt(5.0))/2.0)\n\nfloat map(vec3 p)\n{\n    float t = 0.02;\n    float d = MAX_DIST;\n    //float d = halfspace(p,-1.0);\n    d = min(d, box(p, vec3(1)));\n    float h = PHI-1.0;\n    p = abs(p); // reflection symmetry\n    d = max(d,-frustum((p.xyz-vec3(0,0,1.01+t))*vec3(1,1,-1), vec2(1), vec2(0.0, h), h/2.0));\n    d = max(d,-frustum((p.yzx-vec3(0,0,1.01+t))*vec3(1,1,-1), vec2(1), vec2(0.0, h), h/2.0));\n    d = max(d,-frustum((p.zxy-vec3(0,0,1.01+t))*vec3(1,1,-1), vec2(1), vec2(0.0, h), h/2.0));\n    return abs(d)-0.01;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t;\n    uint i;\n    for(i = 0u, t = 0.0; i < MAX_ITER && t < MAX_DIST; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return MAX_DIST;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow(in vec3 ro, in vec3 rd, float mint, float maxt)\n{\n    float t;\n    uint i;\n    for(i = 0u, t = mint; i < MAX_ITER && t < maxt; i++)\n    {\n        float h = map(ro + rd*t);\n        if(h < EPSILON)\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives by iq\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(pi * p.x + pi/2.0)*sin(pi *p.y + pi/2.0)*sin(pi *p.z + pi/2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y;\n    vec3 rd = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    vec3 ro = vec3(0.0,-4.0, 0.0);\n\n    float mx = -2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = -pi / 2.0 + pi * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 5.0) ? mx : +pi / 4.0 + 2.0 * pi * fract(iTime * 0.01);\n    my = (iMouse.y > 5.0) ? my : -pi / 6.0;\n\n    mat3 M = yaw_pitch_roll(mx, my, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    vec3 lightdir = normalize(vec3(4.0, 2.0, 1.0));\n    vec3 color = vec3(0.0);\n\n    float dist = trace(ro, rd);\n    if(dist < MAX_DIST)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        vec3 ambient = vec3(0.02);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0) brightness *= shadow(dst+0.01*n,lightdir, 0.0, MAX_DIST);\n        color = vec3(1.0);\n        // hack to color surface\n        if(dst.x <= -1.0) color = vec3(1,0,0);\n        if(dst.x >= +1.0) color = vec3(0,1,1);\n        if(dst.y <= -1.0) color = vec3(0,1,0);\n        if(dst.y >= +1.0) color = vec3(1,0,1);\n        if(dst.z <= -1.0) color = vec3(0,0,1);\n        if(dst.z >= +1.0) color = vec3(1,1,0);\n\n        color = mix(color, (n * 0.5 + 0.5), 0.25); // normal colors\n        color = (ambient * calcAO(dst, n) + brightness) * color;\n    }\n    else\n    {\n        vec3 sky = vec3(0); // black sky\n        //vec3 sky = mix(vec3(0.2,0.5,1), vec3(0.0,0.0,0.5), rd.z); // blue sky\n        color = sky;\n\n        color += smoothstep(0.998, 0.999, dot(lightdir, rd)); // sun\n        color += 0.5 * smoothstep(0.998, 1.0, dot(lightdir, rd)); // halo\n    }\n\n    fragColor = vec4(sqrt(color), 1.0); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}