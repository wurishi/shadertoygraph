{"ver":"0.1","info":{"id":"Dl3fWs","date":"1701707257","viewed":30,"name":"First shader animation","username":"amzy55","description":"Tutorial - https://youtu.be/f4s1h2YETNY?si=Ac_KXxwfK2OYZcm4","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(in float t)\n{\n    // hardcoded values for my desired pallete\n    vec3 a = vec3(0.660, 0.660, 1.208);\n    vec3 b = vec3(0.696, 0.696, 0.696);\n    vec3 c = vec3(1.090, 0.978, 1.120);\n    vec3 d = vec3(6.157, 5.447, 6.823);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // between -1 and 1\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    // multiply x by aspect ration to avoid stretching\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // copy for the color change\n    vec2 uvCopy = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++)\n    {\n        // repetition\n        uv = fract(uv * 1.6) - 0.5;\n\n        float d = length(uv) * exp(-length(uvCopy));\n        vec3 col = palette(length(uvCopy) + i * 0.4 + iTime * 0.2);\n\n        float rings = 9.0;\n        d = sin(d * rings + iTime) / rings;\n        d = abs(d);\n        //d = smoothstep(0.0, 0.1, d);\n        d = pow(0.015 / d, 1.2);\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor - 0.6, 1.0);\n}","name":"Image","description":"","type":"image"}]}