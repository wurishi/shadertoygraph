{"ver":"0.1","info":{"id":"NtS3Rc","date":"1624361394","viewed":167,"name":"Color gradations","username":"imagire","description":"Rainbow patterns in different techniques.\n\nReferences:\n- PrzemyslawZaworski, \"Shader Text for beginners,\" https://www.shadertoy.com/view/4sBfRd\n- metaeaux, \"HCL Colors,\" https://www.shadertoy.com/view/lly3Dc","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["hsv","gamma","lab","colorspace","hcl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// thanks to \"Shader Text for beginners\" by PrzemyslawZaworski  \n// thanks to Fabrice Neyret for algorhitm https://www.shadertoy.com/view/llySRh and thanks to otaviogood for font texture\n#define C(c) U.x-=.5; o+= char(U,64+c).x\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\n\n// HSV\nvec3 hue_to_rgb(float hue)\n{\n    return clamp(abs(6.0 * hue - vec3(3.0, 2.0, 4.0)) * vec3(1.0, -1.0, -1.0) + vec3(-1.0, 2.0, 2.0), 0.0, 1.0);\n}\n\n// sRGB\nfloat sRGB_gamma_correction(float c)\n{\n\treturn (c <= 0.00304) ? (12.92 * c) : (1.055 * pow(c, 1.0/2.4) - 0.055);\n}\n\nvec3 sRGB_gamma_correction(vec3 rgb)\n{\n    rgb.x = sRGB_gamma_correction(rgb.x);\n    rgb.y = sRGB_gamma_correction(rgb.y);\n    rgb.z = sRGB_gamma_correction(rgb.z);\n    \n    return rgb;\n}\n\n\n// CIELAB\nvec3 xyz_to_rgb(vec3 xyz) \n{\n  xyz = xyz / 100.0;\n\n  mat3 m = mat3(\n      +3.2404542, -1.5371385, -0.4985314,\n      -0.9692660, +1.8760108, +0.0415560,\n      +0.0556434, -0.2040259, +1.0572252);\n  vec3 rgb = m * xyz;\n\n  rgb.r = sRGB_gamma_correction(rgb.r);\n  rgb.g = sRGB_gamma_correction(rgb.g);\n  rgb.b = sRGB_gamma_correction(rgb.b);\n\n  return rgb;\n}\n\nvec3 lab_to_Xyz(vec3 lab) \n{\n    float y = (lab.x + 16.) / 116.;\n    float x = y + lab.y / 500.;\n    float z = y - lab.z / 200.;\n\n    x = (0.206896552 < x) ? pow(x, 3.0) : 0.12841855 * (x - 0.137931034);\n    y = (0.206896552 < y) ? pow(y, 3.0) : 0.12841855 * (y - 0.137931034);\n    z = (0.206896552 < z) ? pow(z, 3.0) : 0.12841855 * (z - 0.137931034);\n\n    vec3 D65 = vec3(95.0470, 100.000, 108.8830);\n\n    return vec3(x * D65.x,y * D65.y,z * D65.z);\n}\n\nvec3 lab_to_rgb(vec3 lab)\n{\n    return xyz_to_rgb(lab_to_Xyz(lab));\n}\n\n\n// hcl\nvec3 hcl_to_Lab(vec3 hcl) \n{\n    return vec3(hcl.z, cos(hcl.x) * hcl.y, sin(hcl.x) * hcl.y);\n}\n\nvec3 hcl_to_rgb(vec3 hcl)\n{\n    return lab_to_rgb(hcl_to_Lab(hcl));\n}\n\n\nvoid mainImage( out vec4 fragColor, vec2 uv )\n{\n    fragColor = vec4(0,0,0,1);\n    \n    float param = uv.x / iResolution.x;// linear parameter for color bar\n    \n    // TEXTs\n    const float FontSize = 6.;\n    float o = 0.0;\n    uv /= iResolution.y;\n    \n    {// text: HUE\n    vec2 position = vec2(.0, 0.8);\n    vec2 U = ( uv - position)*64.0/FontSize;\n    C(40);C(53);C(37);\n    }\n\n    {// text: sRGB gamma correct\n    vec2 position = vec2(.0, 0.6);\n    vec2 U = ( uv - position)*64.0/FontSize;\n    C(51);C(18);C(7);C(2);C(-32);C(39);C(33);C(45);C(45);C(33);C(-32);C(35);C(47);C(50);C(50);C(37);C(35);C(52);\n    }\n\n    {// text: CIELAB\n    vec2 position = vec2(.0, 0.4);\n    vec2 U = ( uv - position)*64.0/FontSize;\n    C(3);C(9);C(5);C(12);C(1);C(2);\n    }\n\n    {// text: HCL\n    vec2 position = vec2(.0, 0.2);\n    vec2 U = ( uv - position)*64.0/FontSize;\n    C(8);C(3);C(12);\n    }\n\n    fragColor.rgb += o;\n\n    // COLOR BARs\n    if(0.7 < uv.y && uv.y < 0.8 ){// HUE\n        fragColor.rgb = hue_to_rgb(param);\n    }else\n    if(0.5 < uv.y && uv.y < 0.6 ){// sRGB gamma correct\n        fragColor.rgb = sRGB_gamma_correction(hue_to_rgb(param));\n    }else\n    if(0.3 < uv.y && uv.y < 0.4 ){// CIELAB\n        // waling on three edges\n        float a, b;\n        if(param < 1.0/3.0){\n            param = 3.0 * param - 0.0; a = +100.0 - 200.0 * param; b = +100.0;// red -> green\n        }else if(param < 2.0/3.0){\n            param = 3.0 * param - 1.0; b = +100.0 - 200.0 * param; a = -100.0;// green -> blue\n        }else{\n            param = 3.0 * param - 2.0; a = -100.0 + 200.0 * param; b = -100.0;// blue -> purple\n        }        \n        fragColor.rgb = lab_to_rgb(vec3(85.0, a, b));\n    }else\n    if(0.1 < uv.y && uv.y < 0.2 ){// HCL\n        fragColor.rgb = hcl_to_rgb(vec3(param * 6.0 * (3.0 / 4.0) + 1.0, 90.0, 75.0));\n    }\n}\n\n","name":"Image","description":"","type":"image"}]}