{"ver":"0.1","info":{"id":"MXjfDd","date":"1731346294","viewed":81,"name":"sdfs to try + contour","username":"kofi","description":"trying to derive different sdfs","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define MIN_DIST 0.01\n\nstruct FlVec3 {\n    float dist;\n    vec3 norm;\n};\nfloat rand(vec2 pos) {\n    return \n        fract(sin(dot(pos, vec2(23.2342, 82.29561))) * 82931.1857193);\n    \n}\nfloat sdSphere(vec3 pos, vec3 o, float r) {\n    return length(pos - o) - r;\n}\nFlVec3 calcSphere(vec3 pos, vec3 o, float r) {\n    FlVec3 res;\n    res.dist = sdSphere(pos, o, r);\n    if (res.dist < MIN_DIST) {\n        vec2 e = vec2(0.001, 0.);\n        res.norm = normalize(\n            vec3(\n                sdSphere(pos + e.xyy, o, r) - sdSphere(pos - e.xyy, o, r),\n                sdSphere(pos + e.yxy, o, r) - sdSphere(pos - e.yxy, o, r),\n                sdSphere(pos + e.yyx, o, r) - sdSphere(pos - e.yyx, o, r)\n            )\n        );\n    }\n    return res;\n}\n\nfloat sdBox(vec3 pos, vec3 o, vec3 s) {\n    return length(max(abs(pos)-s, 0.));\n}\nFlVec3 calcBox(vec3 pos, vec3 o, vec3 s) {\n    FlVec3 res;\n    res.dist = sdBox(pos, o, s);\n    if (res.dist < MIN_DIST) {\n        vec2 e = vec2(0.001, 0.);\n        res.norm = normalize(\n            vec3(\n                sdBox(pos + e.xyy, o, s) - sdBox(pos - e.xyy, o, s),\n                sdBox(pos + e.yxy, o, s) - sdBox(pos - e.yxy, o, s),\n                sdBox(pos + e.yyx, o, s) - sdBox(pos - e.yyx, o, s)\n        )\n    );\n    }\n    return res;\n}\nfloat sdTube(vec3 pos) {\n    pos.z = 0.;\n    return \n    //length(max(abs(pos)-1., 0.))\n    length(vec3(pos.x, pos.y, 0.)) - 1.\n    ;\n}\nFlVec3 calcTube(vec3 pos) {\n    FlVec3 res;\n    res.dist = sdTube(pos);\n        if (res.dist < MIN_DIST) {\n        vec2 e = vec2(0.001, 0.);\n        res.norm = normalize(\n            vec3(\n                sdTube(pos + e.xyy) - sdTube(pos - e.xyy),\n                sdTube(pos + e.yxy) - sdTube(pos - e.yxy),\n                sdTube(pos + e.yyx) - sdTube(pos - e.yyx)\n        )\n    );\n    if (fract(pos.z) > .1) res.norm = vec3(1.);\n    }\n    return res;\n} \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(246.,243.,163.)/255.;\n    \n    vec3 lookat = vec3(0.);\n    vec3 cam = 8.*vec3(cos(iTime), .8, sin(iTime));\n    vec3 f = normalize(lookat - cam);\n    vec3 r = cross(vec3(0., 1., 0.), f);\n    vec3 u = cross(f, r);\n    vec3 c = cam + f;\n    vec3 i = c + uv.x*r + uv.y*u;\n    vec3 dir = i-cam;\n    \n    float d = 0.;\n    float prevd = 999.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 curPos = cam + d*dir;\n        FlVec3 val = //calcBox(curPos, vec3(0., 0., 0.), vec3(.3));\n                     calcSphere(curPos, vec3(2.*normalize(curPos.xy), 0.), .5); //calculates torus sdf\n        if (val.dist < MIN_DIST) col = vec3(.8)*dot(val.norm, vec3(1.))*rand(uv)*.5;\n        d += val.dist;\n        prevd = val.dist;\n        \n    }\n    fragColor = vec4(col,1.0);\n} ","name":"Image","description":"","type":"image"}]}