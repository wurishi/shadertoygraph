{"ver":"0.1","info":{"id":"4tKXDc","date":"1486230987","viewed":157,"name":"raymarch tunnel pipes","username":"ShaderLyf","description":"test, just experimenting with making some tunnels!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tunneltest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float eps = 0.01;\nconst vec3 floorColor = vec3(0.5,0.0,1.0);\nconst vec3 otherColor = vec3(1.0,0.0,0.0);\n\nvec2 rotate(vec2 p, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    \n    return mat2(c,s,-s,c) * p;\n}\n\nfloat fCylinder(vec3 p, float r, float height) \n{\n\tfloat d = length(p.xy) - r; // xy and xz give cool results\n\td = max(d, abs(p.z) - height);\n\treturn d;\n}\n\nfloat sphere(vec3 p)\n{ \n    p.xy = rotate(p.xy,0.5+p.z*sin(iTime*0.1)*-0.03+0.4);\n //   p.xy = rotate(p.xy,(iTime*0.5)*-0.531);\n    p = mod(p + 1.0, 18.0)-9.; // plus 2 to get it out the way of the camera\n  //  p.xy = rotate(p.xy, iTime);\n\n //return length(p)-0.9;\n    \n    return fCylinder(p,1.5,7.5);\n}\n\nfloat scene (vec3 p)\n{\n   return sphere(p);\n}\n\nvec3 getNormal(vec3 p)\n{\n\tvec3 normal;\n    vec3 ep = vec3(eps,0.0,0.0);\n    normal.x = scene(p+ep.xyz) - scene(p-ep.xyz);\n    normal.y = scene(p+ep.yxz) - scene(p-ep.yxz);\n    normal.z = scene(p+ep.yzx) - scene(p-ep.yzx);\n    return normalize(normal);\n}\n\nfloat calcShadowFactor(vec3 p, vec3 norm, vec3 lightDir)\n{\n    float t = .0;\n    vec3 rayStart = p + norm + eps*2.0;\n        for (int i =0; i<16;i++)\n        {\n            vec3 sP = rayStart - lightDir * t;\n            float dist = scene(sP);\n            if(dist < eps)\n            {\n                return 1.0;\n            }\n            t+=dist;\n        }\n    return 0.0;\n}\n\nvec3 albedo(vec3 pos)\n{\n   // pos *= 1.0;\n //return fract(pos.x * fract(pos.z)) * vec3(1.0);  \n    float f = smoothstep(0.5,0.51,fract(pos.x));\n   // f *= smoothstep(0.5,0.51,fract(pos.y));\n    return f * vec3(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tvec4 finalColor = vec4(0.0,0.0,0.0,1.);\n    \n    uv = uv * 2.0 -1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv,1.0));\n    \n    vec3 o = vec3(0.0,0.0,4.0*sin(iTime*0.1)*90.9);\n    float t = 0.0;\n    float sq = sqrt(dot(uv,uv));\n    for (int i = 0; i < 16; ++i)\n    {\n    \tvec3 p = o + r *t;\n        float d = scene(p);\n        \n        if (d < eps)\n        {\n        \tvec3 norml = getNormal(p);\n        \tvec3 ldir = vec3(-0.5,0.1,1.0);\n            float diffuseFactor = max(dot(norml,-ldir),0.42);\n\n        \tfloat shadow = calcShadowFactor(p,norml,ldir);   \n        \tvec3 diffuseColor = albedo(p);\n        \tfinalColor = vec4((2.1-shadow*sq)*diffuseFactor*(sin(r+1.7))*diffuseColor,1); \n        }\n        t += d;\n    }\n    \n    float fog = 0.2 / (0.9 +t*t*0.1);\n   \n    //finalColor += fog; \n\tfragColor = vec4(finalColor);\n}","name":"Image","description":"","type":"image"}]}