{"ver":"0.1","info":{"id":"Mslfzj","date":"1497060487","viewed":135,"name":"Sketch_TriLattice7","username":"cexlearning","description":"TriLattice7ï¼Œcopy from https://github.com/keijiro/ShaderSketches","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["sketch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 uv2tri(vec2 uv)\n{\n    float sx = uv.x - uv.y / 2.0; // skewed x\n    float offs = step(fract(1.0 - uv.y), fract(sx));\n    return vec2(floor(sx) * 2.0 + offs, floor(uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float res = iResolution.y / (5.0 + sin(iTime * 0.5));\n\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / res;\n    uv += vec2(1.0, 0.5) * iTime;\n\n    vec3 p = vec3(dot(uv, vec2(1.0, 0.5)), dot(uv, vec2(-1.0, 0.5)), uv.y);\n    vec3 p1 = fract(+p);\n    vec3 p2 = fract(-p);\n\n    float d1 = min(min(p1.x, p1.y), p1.z);\n    float d2 = min(min(p2.x, p2.y), p2.z);\n    float d = min(d1, d2);\n    float c1 = (d - 0.04) * res;\n\n    float r = rand(uv2tri(uv)) * 6.3;\n    d = dot(uv, vec2(cos(r), sin(r))) + iTime * 0.25;\n    float c2 = (abs(0.5 - fract(d * 4.0)) - 0.18) * res / 4.0;\n\n    float c = min(c1, c2);\n    fragColor = vec4(c, c, c, 1.0);\n}","name":"Image","description":"","type":"image"}]}