{"ver":"0.1","info":{"id":"DddyzX","date":"1695304230","viewed":31,"name":"Hazy memories","username":"JiaHao994","description":"Hazy memories","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(in vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  \n                        0.366025403784439,  \n                        -0.577350269189626, \n                        0.024390243902439); \n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    vec2 i1;\n\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    i = mod289(i); \n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n\nvec2 snoise2( vec2 x ){\n    float s  = snoise(vec2( x));\n    float s1 = snoise(vec2( x.y - 19.1, x.x + 47.2 ));\n    return vec2( s , s1 );\n}\n\nvec2 curl( vec2 p ){\n    vec2 a = snoise2( p - vec2(0.1, 0.0) + iTime * 0.005 );\n    vec2 b = snoise2( p + vec2(0.1, 0.0) - iTime );\n    vec2 c = snoise2( p - vec2(0.0, 0.1) + iTime * 0.002);\n    vec2 d = snoise2( p + vec2(0.0, 0.1) - iTime * 0.003);\n\n    return normalize( vec2(a.y + b.y , c.x - d.x) * 1.0 / ( 2.0 * 0.1 ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    uv = uv * 3.0; /// 1.0;\n    vec4 color = vec4(1.0);\n    color.rgb =  vec3(curl(uv * 0.5 + iTime * 0.3),1.0);\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}