{"ver":"0.1","info":{"id":"DttyDM","date":"1699289268","viewed":107,"name":"galaxy torus","username":"nayk","description":"strars, galaxy, universe,copypast","likes":0,"published":1,"flags":1,"usePreview":0,"tags":["galaxy","universe","copypast","strars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original https://www.shadertoy.com/view/msBBRw https://www.shadertoy.com/view/lslyRn */\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n// input in pixels (ie not normalized uv)\nfloat ScreenSpaceDither(vec2 vScreenPos)\n{\n\t// Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR\n    float vDither = dot( vec2( 171.0, 231.0 ), vScreenPos.xy + iTime); \n    return fract( vDither / 71.0) - 0.5;\n}\n\n// makes a simple flowmap in the shape a donut swirl centered on point\nvec2 donutFlow(vec2 point, float spread, float offset)\n{    \n    float cenderDistance = length(point); // distance to center    \n    // simple inverted x^2 https://www.desmos.com/calculator/ibidozowyh\n    float donut =  1.0-pow(2.0*(cenderDistance-offset)/spread, 2.0);     \n    donut = clamp(donut, 0.0, 1.0);  // saturate\n    \n    vec2 flow = normalize(vec2(-point.y, point.x)); // flow vectors\n    flow *= donut;  // masked by donut\n    //flow = (flow+1.0)/2.0; // generates a flowmap texture\n    //flow += vec2(0.0001,0.0001); //adding tiny offset so it isnt 0\n    return flow;\n}\n\n// dithered temporal Flowmaps \nvec3 ditherFlowmaps(vec2 uv, vec2 flowUV, vec2 ditherUV, float time, float strength) {\n    // sample flow texture or function\n    vec2 flow = donutFlow(flowUV, 0.7, 0.5);\n    flow *= strength;\n    \n    // time caculatation, one is offset by half\n    float time1 = fract(time);\n    float time2 = fract(time - .5);\n\n    // generate dither pattern\n    float dither = ScreenSpaceDither(ditherUV);\n    \n    // normal alpha flipping between 0-1 using timer 1\n    float alpha = abs((0.5-time1)*2.);\n    \n    // flip  between time 1 and two using the alpha and dither, if is slightly faster than step mix\n    float mixTime = (alpha + dither >= 0.5) ? time2 : time1;\n    \n    // calculate UV values using our dither time offset\n    vec2 mixUV = uv - (mixTime * flow);\n    \n    // Mip caculation as the automatic ones don't work\n    vec2 duvdx = dFdx( uv );\n    vec2 duvdy = dFdy( uv );\n    \n    // texture sample\n  vec3 tex= vec3(mixUV,mixUV);\n    return tex;\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n           // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\n\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.003);\n\tfloat time=iTime*speed+.25;\n\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n    \n\t float time2 = iTime* 0.1; // flow speed multiplier\n    float strength = 0.3; // flow distrotion strength\n    float scale = 1.0;  // scale of the \"wave\" texture\n     \n  dir.xy=rotate(uv,iTime/1.-length(uv)*1.);\n    vec2 uv2 = (fragCoord.xy- (0.5*iResolution.xy))/iResolution.y; // center screen coords\n    \n    vec3 flow = ditherFlowmaps(uv2*scale, uv2, fragCoord, time2, strength);\n\t\n\n\tvec3 from=vec3(1.,.5,0.5)+flow;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor+= vec4(cheap_star(uv,anim) * vec3(0.005,0.02,0.005), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}