{"ver":"0.1","info":{"id":"wsKXzK","date":"1574482722","viewed":141,"name":"Bright line","username":"ParaBellum","description":"Naive approach to get 2d area light","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","arealight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float area_light(in vec2 p, in vec2 a, in vec2 b)\n{\n    // projection point to line\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float u = dot(pa, ba)/dot(ba, ba);\n    u = clamp(u, 0., 1.);\n    vec2 c = mix(a, b, u);\n    p = p-c;\n    \n    //calculate normal and use it to get diffuse light\n    vec2 n = normalize(vec2(ba.y, -ba.x));\n    float diffuse = dot(n, normalize(p));\n    \n    //compute attenuation\n    float l = length(p);\n    float kc = 1.;\n    float kl = .7;\n    float kq = 1.8;\n    float attenuation = 1. / (kc+kl*l+kq*l*l);\n    \n    //return final light\n    return diffuse*attenuation;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 6.;\n\n    vec3 col = vec3(0.);\n    \n    vec2 a = vec2(-3., 6.);\n    vec2 b = vec2( 3., 6.);\n    float al = area_light(uv, a, b);\n    \n    col += al;\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}