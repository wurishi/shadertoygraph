{"ver":"0.1","info":{"id":"DlGcRt","date":"1700518381","viewed":111,"name":"Sierpinski Splat","username":"Real_NC","description":"this is my favorite way to define a Sierpinski triangle. Start at a vertex, and move 50% closer to a random other vertex.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["fractal","iterative","sierpinski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord + fragCoord - iResolution.xy)/iResolution.y;\n    uv *= 0.8;\n    uv.y += 0.25;\n    \n    \n    fragColor = vec4(0);\n    \n    vec2 p;\n    for(int x = 0; x <= SPEED; x++)\n    {\n        for(int y = 0; y <= SPEED; y++)\n        {\n            p = texelFetch(iChannel0, ivec2(x,y), 0).xy;\n            if(distance(p, uv) <= 0.9/iResolution.y)\n            {\n                fragColor = vec4(1); \n            }\n        }\n    }\n    \n    if(iFrame != 0 && fragColor.x == 0.)\n    {\n        discard;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvec2[3] vertices = vec2[](\nvec2(0, 1),\nvec2(sq32, -0.5), \nvec2(-sq32, -0.5));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    if (max(fc.x, fc.y) > SPEED) discard;\n    if (iFrame == 0)\n    {\n        fragColor.xy = vec2(0,1);\n    }\n    else\n    {\n        fragColor = texelFetch(iChannel0, fc, 0);\n        fragColor.xy = mix(fragColor.xy, vertices[int(hash(vec3(fragCoord+iResolution.xy, iFrame))*3.)], 0.5);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SPEED 16\n#define sq32 sqrt(3.0)*0.5\n\nfloat hash(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}","name":"Common","description":"","type":"common"}]}