{"ver":"0.1","info":{"id":"DtfGRj","date":"1671995681","viewed":104,"name":"bumpmap applied","username":"b11","description":"bump","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["bump"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define PI 3.1415925359\n\n\n#define MAX_OCTAVES 8\n#define octaves 1.\n#define persistence 0.5\n#define lacunarity 2.\n#define offset 0.\n#define multiplier  -1.\n#define scale 10. \n#define speed 2.\n#define first 0.5\n#define second 0.5\n\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n//\n// Compatibility layer with demo\n//\nfloat noise3(vec3 p) {\n  return cnoise(p);\n}\n\n\nfloat octaveNoise (vec3 p) {\n  float total = 0.;\n  float frequency = 1.;\n  float amplitude = 1.;\n  float value = 0.;\n  for (int i = 0; i < MAX_OCTAVES; ++i) {\n    if (float(i) >= octaves) break;\n    value += noise3(p * frequency) * amplitude;\n    total += amplitude;\n    amplitude *= persistence;\n    frequency *= lacunarity;\n  }\n  return value / total;\n}\n\nfloat getNoiseColor( vec3 p ) {\n  return offset + multiplier * octaveNoise(vec3 (scale*p + speed*iTime));\n}\n\n//=======================================wworley noise=========================\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec3(0.71,0.113,0.419));\n    return -1.0+2.0*fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n\n// return value noise (in x) and its derivatives (in yzw)\nvec4 noised( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 w = fract(x);\n    \n#if 1\n    // quintic interpolation\n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n#else\n    // cubic interpolation\n    vec3 u = w*w*(3.0-2.0*w);\n    vec3 du = 6.0*w*(1.0-w);\n#endif    \n    \n    \n    float a = hash(i+vec3(0.0,0.0,0.0));\n    float b = hash(i+vec3(1.0,0.0,0.0));\n    float c = hash(i+vec3(0.0,1.0,0.0));\n    float d = hash(i+vec3(1.0,1.0,0.0));\n    float e = hash(i+vec3(0.0,0.0,1.0));\n\tfloat f = hash(i+vec3(1.0,0.0,1.0));\n    float g = hash(i+vec3(0.0,1.0,1.0));\n    float h = hash(i+vec3(1.0,1.0,1.0));\n\t\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return vec4( k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z, \n                 du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,\n                            k2 + k5*u.z + k4*u.x + k7*u.z*u.x,\n                            k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );\n}\n\n\nfloat noise4(vec3 p) {\n  vec4 v = noised(p);\n  return v.x; \n}\n\nfloat fbmNoise (vec3 p) {\n  float total = 0.;\n  float frequency = 1.;\n  float amplitude = 1.;\n  float value = 0.;\n  for (int i = 0; i < MAX_OCTAVES; ++i) {\n    if (float(i) >= octaves) break;\n    value += noise4(p * frequency) * amplitude;\n    total += amplitude;\n    amplitude *= persistence;\n    frequency *= lacunarity;\n  }\n  return value / total;\n}\n\nfloat getFbmNoiseColor( vec3 p ) {\n  return offset + multiplier * fbmNoise (vec3 (scale*p + speed*iTime));\n}\n\n//=======================================wworley noise=========================\n\n\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + 6x) mod 289\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 10.0) * x);\n}\n\n// Cellular noise, returning F1 and F2 in a vec2.\n// 3x3x3 search region for good F2 everywhere, but a lot\n// slower than the 2x2x2 version.\n// The code below is a bit scary even to its author,\n// but it has at least half decent performance on a\n// modern GPU. In any case, it beats any software\n// implementation of Worley noise hands down.\n\nvec2 cellular(vec3 P) {\n#define K 0.142857142857 // 1/7\n#define Ko 0.428571428571 // 1/2-K/2\n#define K2 0.020408163265306 // 1/(7*7)\n#define Kz 0.166666666667 // 1/6\n#define Kzo 0.416666666667 // 1/2-1/6*2\n#define jitter 1.0 // smaller jitter gives more regular pattern\n\n\tvec3 Pi = mod289(floor(P));\n \tvec3 Pf = fract(P) - 0.5;\n\n\tvec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n\tvec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n\tvec3 p1 = permute(p + Pi.y - 1.0);\n\tvec3 p2 = permute(p + Pi.y);\n\tvec3 p3 = permute(p + Pi.y + 1.0);\n\n\tvec3 p11 = permute(p1 + Pi.z - 1.0);\n\tvec3 p12 = permute(p1 + Pi.z);\n\tvec3 p13 = permute(p1 + Pi.z + 1.0);\n\n\tvec3 p21 = permute(p2 + Pi.z - 1.0);\n\tvec3 p22 = permute(p2 + Pi.z);\n\tvec3 p23 = permute(p2 + Pi.z + 1.0);\n\n\tvec3 p31 = permute(p3 + Pi.z - 1.0);\n\tvec3 p32 = permute(p3 + Pi.z);\n\tvec3 p33 = permute(p3 + Pi.z + 1.0);\n\n\tvec3 ox11 = fract(p11*K) - Ko;\n\tvec3 oy11 = mod7(floor(p11*K))*K - Ko;\n\tvec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed\n\n\tvec3 ox12 = fract(p12*K) - Ko;\n\tvec3 oy12 = mod7(floor(p12*K))*K - Ko;\n\tvec3 oz12 = floor(p12*K2)*Kz - Kzo;\n\n\tvec3 ox13 = fract(p13*K) - Ko;\n\tvec3 oy13 = mod7(floor(p13*K))*K - Ko;\n\tvec3 oz13 = floor(p13*K2)*Kz - Kzo;\n\n\tvec3 ox21 = fract(p21*K) - Ko;\n\tvec3 oy21 = mod7(floor(p21*K))*K - Ko;\n\tvec3 oz21 = floor(p21*K2)*Kz - Kzo;\n\n\tvec3 ox22 = fract(p22*K) - Ko;\n\tvec3 oy22 = mod7(floor(p22*K))*K - Ko;\n\tvec3 oz22 = floor(p22*K2)*Kz - Kzo;\n\n\tvec3 ox23 = fract(p23*K) - Ko;\n\tvec3 oy23 = mod7(floor(p23*K))*K - Ko;\n\tvec3 oz23 = floor(p23*K2)*Kz - Kzo;\n\n\tvec3 ox31 = fract(p31*K) - Ko;\n\tvec3 oy31 = mod7(floor(p31*K))*K - Ko;\n\tvec3 oz31 = floor(p31*K2)*Kz - Kzo;\n\n\tvec3 ox32 = fract(p32*K) - Ko;\n\tvec3 oy32 = mod7(floor(p32*K))*K - Ko;\n\tvec3 oz32 = floor(p32*K2)*Kz - Kzo;\n\n\tvec3 ox33 = fract(p33*K) - Ko;\n\tvec3 oy33 = mod7(floor(p33*K))*K - Ko;\n\tvec3 oz33 = floor(p33*K2)*Kz - Kzo;\n\n\tvec3 dx11 = Pfx + jitter*ox11;\n\tvec3 dy11 = Pfy.x + jitter*oy11;\n\tvec3 dz11 = Pfz.x + jitter*oz11;\n\n\tvec3 dx12 = Pfx + jitter*ox12;\n\tvec3 dy12 = Pfy.x + jitter*oy12;\n\tvec3 dz12 = Pfz.y + jitter*oz12;\n\n\tvec3 dx13 = Pfx + jitter*ox13;\n\tvec3 dy13 = Pfy.x + jitter*oy13;\n\tvec3 dz13 = Pfz.z + jitter*oz13;\n\n\tvec3 dx21 = Pfx + jitter*ox21;\n\tvec3 dy21 = Pfy.y + jitter*oy21;\n\tvec3 dz21 = Pfz.x + jitter*oz21;\n\n\tvec3 dx22 = Pfx + jitter*ox22;\n\tvec3 dy22 = Pfy.y + jitter*oy22;\n\tvec3 dz22 = Pfz.y + jitter*oz22;\n\n\tvec3 dx23 = Pfx + jitter*ox23;\n\tvec3 dy23 = Pfy.y + jitter*oy23;\n\tvec3 dz23 = Pfz.z + jitter*oz23;\n\n\tvec3 dx31 = Pfx + jitter*ox31;\n\tvec3 dy31 = Pfy.z + jitter*oy31;\n\tvec3 dz31 = Pfz.x + jitter*oz31;\n\n\tvec3 dx32 = Pfx + jitter*ox32;\n\tvec3 dy32 = Pfy.z + jitter*oy32;\n\tvec3 dz32 = Pfz.y + jitter*oz32;\n\n\tvec3 dx33 = Pfx + jitter*ox33;\n\tvec3 dy33 = Pfy.z + jitter*oy33;\n\tvec3 dz33 = Pfz.z + jitter*oz33;\n\n\tvec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n\tvec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n\tvec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n\tvec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n\tvec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n\tvec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n\tvec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n\tvec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n\tvec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n\n\t// Sort out the two smallest distances (F1, F2)\n#if 0\n\t// Cheat and sort out only F1\n\tvec3 d1 = min(min(d11,d12), d13);\n\tvec3 d2 = min(min(d21,d22), d23);\n\tvec3 d3 = min(min(d31,d32), d33);\n\tvec3 d = min(min(d1,d2), d3);\n\td.x = min(min(d.x,d.y),d.z);\n\treturn vec2(sqrt(d.x)); // F1 duplicated, no F2 computed\n#else\n\t// Do it right and sort out both F1 and F2\n\tvec3 d1a = min(d11, d12);\n\td12 = max(d11, d12);\n\td11 = min(d1a, d13); // Smallest now not in d12 or d13\n\td13 = max(d1a, d13);\n\td12 = min(d12, d13); // 2nd smallest now not in d13\n\tvec3 d2a = min(d21, d22);\n\td22 = max(d21, d22);\n\td21 = min(d2a, d23); // Smallest now not in d22 or d23\n\td23 = max(d2a, d23);\n\td22 = min(d22, d23); // 2nd smallest now not in d23\n\tvec3 d3a = min(d31, d32);\n\td32 = max(d31, d32);\n\td31 = min(d3a, d33); // Smallest now not in d32 or d33\n\td33 = max(d3a, d33);\n\td32 = min(d32, d33); // 2nd smallest now not in d33\n\tvec3 da = min(d11, d21);\n\td21 = max(d11, d21);\n\td11 = min(da, d31); // Smallest now in d11\n\td31 = max(da, d31); // 2nd smallest now not in d31\n\td11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n\td11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n\td12 = min(d12, d21); // 2nd smallest now not in d21\n\td12 = min(d12, d22); // nor in d22\n\td12 = min(d12, d31); // nor in d31\n\td12 = min(d12, d32); // nor in d32\n\td11.yz = min(d11.yz,d12.xy); // nor in d12.yz\n\td11.y = min(d11.y,d12.z); // Only two more to go\n\td11.y = min(d11.y,d11.z); // Done! (Phew!)\n\treturn sqrt(d11.xy); // F1, F2\n#endif\n}\n\nfloat noise5(vec3 p) {\n  vec2 v = cellular(p);\n  return v.x * first + v.y * second; \n}\n\n\nfloat worleyNoise (vec3 p) {\n  float total = 0.;\n  float frequency = 1.;\n  float amplitude = 1.;\n  float value = 0.;\n  for (int i = 0; i < MAX_OCTAVES; ++i) {\n    if (float(i) >= octaves) break;\n    value += noise5(p * frequency) * amplitude;\n    total += amplitude;\n    amplitude *= persistence;\n    frequency *= lacunarity;\n  }\n  return value / total;\n}\n\nfloat getworleyNoiseColor( vec3 p ) {\n  return offset + multiplier * worleyNoise (vec3 (scale*p + speed*iTime));\n}\n\n\n//====================================================\nmat2 Rot (float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\nfloat dBox(vec3 p, vec3 s) {\n    return length(max(abs(p) - s, 0.0));\n}\nfloat dSphere(vec3 p, vec4 s) {\n    return length(p - s.xyz) - s.w;\n}\n\n// SDF octahedron\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n\n    // exact distance\n    #if 0\n    vec3 o = min(3.0*p - m, 0.0);\n    o = max(6.0*p - m*2.0 - o*3.0 + (o.x+o.y+o.z), 0.0);\n    return length(p - s*o/(o.x+o.y+o.z));\n    #endif\n    \n    // exact distance\n    #if 1\n \tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n    #endif\n    \n    // bound, not exact\n    #if 0\n\treturn m*0.57735027;\n    #endif\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    const float k = sqrt(3.0);\n    h.x *= 0.5*k;\n    p.xy /= h.x;\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p.xy=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    float d1 = length(p.xy)*sign(-p.y)*h.x;\n    float d2 = abs(p.z)-h.y;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n\n\nfloat blendSDF(float sda, float sdb, float k) {\n    float h = clamp(0.5 + 0.5 * (sdb - sda) / k, 0.0, 1.0);\n    return mix(sdb, sda, h) - k * h * (1.0 - h);\n}\nfloat getDist(vec3 p) {\n    float planeDist = p.y + 1.5;   \n    float s = sin(iTime);\n    vec3 bp = p - vec3(3, 0.75, 7);\n    bp.xz *= Rot(iTime); \n    \n    vec3 ocha = p - vec3(-5, 0.75, 10);\n    vec3 prism = p - vec3(5, 0.8, 10);\n    \n    ocha.z -= -s;\n    ocha.xz *= Rot(s+10.);\n    ocha.xz *= Rot(cos(iTime)+10.);\n    \n    vec3 tp = p - vec3(0, 0.5, 6);\n    tp.y -= s;    \n    vec3 bp2 = p - vec3(-3, 0.75, 6);\n    bp2.y -= -s; \n    float cx = -3.0;\n    cx -= s;    \n    vec3 a = vec3(0, 0.3, 3);\n    vec3 b = vec3(3, 0.3, 5);\n    vec3 ab = normalize(b - a).zyx;\n    ab.x = -ab.x;\n    a -= s * ab;\n    b -= s * ab; \n    float sd  = dSphere(p, vec4(0, 1, 6 , 1));\n    float sd3 = dSphere(p, vec4(cx, 3, 8, 1));\n    float sd4 = dSphere(p, vec4(-2, 3, 8, 1));    \n    float octa = sdOctahedron(ocha, 2.);\n    float trp = sdTriPrism(prism, vec2(2,5));\n    \n    \n    float d = min(sd, planeDist);\n    d = min(d, octa);\n    d = min(d,trp);\n    return d;\n}\n\nconst int MAT_SPHERE = 1;\nconst int MAT_BOX = 2;\nconst int MAT_PRISM = 3;\n\n\nint getMat(vec3 p) {\n    float planeDist = p.y + 1.5;   \n    float s = sin(iTime);\n    vec3 bp = p - vec3(3, 0.75, 7);\n    bp.xz *= Rot(iTime); \n    \n    vec3 ocha = p - vec3(-3, 0.75, 10);\n    ocha.z -= -s;\n    ocha.xz *= Rot(s+10.);\n    ocha.xz *= Rot(cos(iTime)+10.);\n    vec3 prism = p - vec3(5, 0.8, 10);\n    \n    vec3 tp = p - vec3(0, 0.5, 6);\n    tp.y -= s;    \n    vec3 bp2 = p - vec3(-3, 0.75, 6);\n    bp2.y -= -s; \n    float cx = -3.0;\n    cx -= s;    \n    vec3 a = vec3(0, 0.3, 3);\n    vec3 b = vec3(3, 0.3, 5);\n    vec3 ab = normalize(b - a).zyx;\n    ab.x = -ab.x;\n    a -= s * ab;\n    b -= s * ab; \n    float sd  = dSphere(p, vec4(0, 1, 6 , 1));\n    float sd3 = dSphere(p, vec4(cx, 3, 8, 1));\n    float sd4 = dSphere(p, vec4(-2, 3, 8, 1));    \n    float octa = sdOctahedron(ocha, 2.);\n    float d = min(sd, planeDist);\n    float trp = sdTriPrism(prism, vec2(2,5));\n    d = min(d, octa);\n    \n    int mat = 0;\n    \n    if(d == sd){\n        mat = MAT_SPHERE;\n    }\n    else if(d == octa){\n        mat = MAT_BOX;\n    }\n    else if(d >= trp){\n        mat = MAT_PRISM;\n    }\n    \n    \n    return mat;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n/*vec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0);\n    vec3 n = \n        vec3(\n        getDist(p + e.xyy),\n        getDist(p + e.yxy),\n        getDist(p + e.yyx)) - \n        vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));  \n    return normalize(n);\n}*/\n\nvec3 getNormalFromDistanceField(vec3 p) {\n    vec2 e = vec2(0.001, 0);\n    vec3 n = \n        vec3(\n        getDist(p + e.xyy),\n        getDist(p + e.yxy),\n        getDist(p + e.yyx)) - \n        vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));  \n    return normalize(n);\n}\n\nvec3 getNormal(vec3 p, sampler2D bumpMap, int type) {\n    //vec2 texCoord = vec2(p.x, p.z); // calculate texture coordinates\n    \n    if(type == 1){\n    vec2 texCoord = vec2(p.x, p.z) + getFbmNoiseColor(p);\n    vec3 bump = texture(bumpMap, texCoord).rgb; // sample bump map\n    \n    bump = bump * 4.0 - 1.0; // convert from [0, 1] to [-1, 1] range\n    vec3 n = getNormalFromDistanceField(p); // get normal from distance field\n    n += bump; // perturb normal using bump map   \n    return normalize(n);\n    }\n    else if(type == 2){\n    \n        vec2 texCoord = vec2(p.x, p.z) + getworleyNoiseColor(p);\n        vec3 bump = texture(bumpMap, texCoord).rgb; // sample bump map\n        bump = bump * 4.0 - 1.0; // convert from [0, 1] to [-1, 1] range\n        vec3 n = getNormalFromDistanceField(p); // get normal from distance field\n        n += bump; // perturb normal using bump map   \n        return normalize(n);\n    \n    }\n    else{\n    \n        vec2 texCoord = vec2(p.x, p.z) + getNoiseColor(p);\n        vec3 bump = texture(bumpMap, texCoord).rgb; // sample bump map\n\n        bump = bump * 2.0 - 1.0; // convert from [0, 1] to [-1, 1] range\n        vec3 n = getNormalFromDistanceField(p); // get normal from distance field\n        n += bump; // perturb normal using bump map   \n        return normalize(n);\n    }\n    \n    \n    \n    \n}\n\n\nfloat getLight(vec3 p, vec3 ro, sampler2D bumpMap, int type) {\n    vec3 lightPos = vec3(0, 5, 6);\n   \n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p,  bumpMap, type);\n    vec3 r = reflect(-l,n);\n   \n    float amb = 0.1;\n    float ka = 1.0;\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    float kd = 0.8;\n    float shininess = 100.;\n    vec3 v = normalize(ro-p);\n    float spec = clamp(dot(r, v), 0.0, 1.0);\n    spec = pow(spec,shininess);\n    float ks = 1.0;\n    float d = rayMarch(p + 2. * n * SURF_DIST , l);\n\n    if (d < length(lightPos - p)) {\n      \n        dif *= 0.1;\n        spec *= 0.5;\n    } \n    return ka * amb + kd * dif + ks * spec;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) { \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y); \n   \n    //vec3 ro = vec3(0, 2, 0); \n    vec3 ro = vec3(cos(iTime), sin(iTime) + 0.1, 0);\n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));      \n    rd.yz *= Rot(PI * 10. / 600.);   \n    float d = rayMarch(ro, rd); \n    vec3 p = ro + rd * d;\n    \n    //vec2 texCoord = fragCoord + getNoiseColor(p);\n    \n    float light_intensity = getLight(p, ro, iChannel0, 0); \n    vec3 background_color = texture(iChannel0, uv*vec2(1.,2.) ).rgb; \n    vec3 surface_color = vec3(250, 235, 215) / 190.;\n    vec3 color;\n  \n    if (d < MAX_DIST){\n        color = surface_color * vec3(light_intensity);\n        \n        int mat = getMat(p);\n        \n        if(mat == MAT_SPHERE){\n            light_intensity = getLight(p, ro, iChannel0, 1); \n            color = surface_color * vec3(light_intensity);\n        }\n        else if (mat == MAT_BOX){\n            light_intensity = getLight(p, ro, iChannel0, 0); \n            color = surface_color * vec3(light_intensity);\n        }\n        else if (mat == MAT_PRISM){\n            light_intensity = getLight(p, ro, iChannel1, 2); \n            color = surface_color * vec3(light_intensity);\n        }\n        \n     }\n    else \n        color = vec3(150,197,212)/255.;\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}