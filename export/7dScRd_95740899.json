{"ver":"0.1","info":{"id":"7dScRd","date":"1643983229","viewed":201,"name":"Reusable graph editor","username":"kastorp","description":"May be useful in the future.\nuse mouse to select/move vertexes\nA= vertex mode (hold and click to add/remove)\nS= edge mode (hold and click to add/remove)\nR= reset","likes":12,"published":1,"flags":48,"usePreview":0,"tags":["graph","editor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Reusable graph editor by Kastorp\n//-------------------\n// use mouse to select/move vertexes\n// A= vertex mode (hold and click to add/remove)\n// S= edge mode (hold and click to add/remove)\n// To add an edge click between the two vertices\n// Only unconnected vertexes can be removed\n//-------------\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\n    int N =int(A(0).x); \n    int M =int(B(0).x);\n    \n    O=vec4(.5)* (.9+ .1*smoothstep(0.,.01,sin(U.x*0.0628)*sin(U.y*.0628 )));\n    \n    for(int i =1;i<= M;i++){\n          vec2 l = B(i).xy;\n          vec4 s =vec4(A(l.x).xy,A(l.y).xy);\n          float dm = line(iMouse.xy,s.xy,s.zw),\n                d = line(U,s.xy,s.zw);\n          O=mix(O,vec4(1,1,0,0),smoothstep(.8,-.8,d-2.));\n#ifdef DEBUG          \n          if(keyboard(EDGE_MODE) || ( iMouse.z>0. &&  dm<5.) ) drawChars(iChannel3, O.xyz, vec3(0,0,0), U, .5*(s.xy+s.zw)+vec2(-10,12), vec2(20), int[2] (48+ i/10,(i%10)+48));\n#endif\n    }\n    \n    for(int i =1;i<=N;i++){\n         O=mix(O,vec4(1,0,0,0),smoothstep(.8,-.8,length(A(i).xy -U)-5.));\n#ifdef DEBUG         \n         if(keyboard(VERTEX_MODE) || ( iMouse.z>0. &&  length(A(i).xy-iMouse.xy)<30.)) drawChars(iChannel3, O.xyz, vec3(1), U, (A(i).xy+vec2(-10,12)), vec2(20), int[2] (48+i/10,(i%10)+48) );\n#endif\n    }\n}         ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 O, in vec2 U )\n{\n   O=vec4(0);\n   ivec2 c =ivec2(U);\n   if(c.y>1) discard;\n    if(iFrame<1){\n    \n        vec2 V[] = vec2[] (vec2(150,150),vec2(150,50),vec2(50,50),vec2(50,150),vec2(100,100),vec2(350,150),vec2(350,50),vec2(250,50),vec2(250,150),vec2(300,100));\n        vec2 E[] = vec2[] (vec2(1,2),vec2(2,3),vec2(3,4),vec2(4,1),vec2(1,5),vec2(2,5),vec2(3,5),vec2(4,5),vec2(6,7),vec2(7,8),vec2(8,9),vec2(9,6),vec2(1,9));\n        if(c.y==0){\n           if(c.x==0) O=vec4(V.length(),0,0,0);\n           else if(c.x<=V.length()+1)  O.xy= V[c.x-1];\n\n        }else{\n           if(c.x==0) O=vec4(E.length(),0,0,0);\n           else if(c.x<=E.length()+1)  O.xy= E[c.x-1];\n            \n        }\n    } else {\n        O=texelFetch(iChannel0,ivec2(U),0);\n        int N = int(A(0).x); \n        int M = int(B(0).x); \n        int LA =int(max(A(0).y,B(0).y)); //last action\n        \n        //get closest vertex\n        vec2 m =vec2(0,1e8);\n        for(int i =1;i<=N;i++) {\n            float d = length(iMouse.xy-A(i).xy);\n            if(m.y>d) m=vec2(i,d);\n         } \n                       \n\n        //get closest potential edge\n        vec3 ms =vec3(0,0,150);\n        for(int i =1;i<= N;i++) for(int j =i+1;j<= N;j++){\n            float d =    line(iMouse.xy, A(i).xy, A(j).xy),\n                  l = length(A(i).xy -A(j).xy);\n            if(d<5. && l<ms.z) ms=vec3(i,j,l);\n        }\n        //get closest existing edge\n        int  id=0;\n        for(int j =1;j<= M;j++) {\n            float d = line(iMouse.xy, A(B(j).x).xy, A(B(j).y).xy);\n            if( d<5.) id=j;\n        }\n        \n        //reset\n        if( keyboard(RESET)) {\n             O=vec4(0);\n             return;\n         \n         }  \n        //drag vertex\n        vec2 d =iMouse.xy-A(c.x).xy;\n        if(c.y==0 && length(d)<30. && int(m.x)==c.x && !keyboard(EDGE_MODE) && !keyboard(VERTEX_MODE)) O.xy += d;\n        \n        //add vertex\n        if( keyboard(VERTEX_MODE)  && iMouse.z>0.  && m.y> 15. && (iFrame - LA)>WAIT) { \n                  \n            if(c.y==0 && c.x==N+1)  O.xy =vec2(iMouse.xy); \n            if(c.y==0 && c.x==0) O.xy=vec2(N+1,iFrame);\n            if(id>0 && c.y==1){\n                if( c.x==id) O.x=float(N+1);\n                if( c.x==M+1) O.xy =vec2(B(id).x, N+1);\n                if( c.x==0) O.xy=vec2(M+1,iFrame); \n                \n            }            \n        }\n        //remove unconnected vertex\n         if( keyboard(VERTEX_MODE)  && iMouse.z>0. && m.y< 15.  && (iFrame - LA)>WAIT ) { \n           int  id=0;\n            for(int j =1;j<= M;j++) {\n                if( B(j).x==m.x || B(j).y==m.x ) id=j;\n            }\n            if(id==0){\n                if(c.y==0 && c.x>= int(m.x) ) O.xy= A(c.x+1).xy;\n                if(c.y==0 && c.x==0) O.xy=vec2(N-1,iFrame);\n                if( c.y==1 && c.x>0 && O.x>m.x) O.x-=1.;\n                if( c.y==1 && c.y>0 && O.y>m.x) O.y-=1.;\n            }\n        }        \n\n        if( keyboard(EDGE_MODE)  && iMouse.z>0. && (iFrame - LA)>WAIT ) {\n           \n\n            //remove edge\n            if(id>0 && (iFrame - LA)>WAIT){                           \n                if(c.y==1  && c.x>= id ) O.xy= B(c.x+1).xy;\n                if(c.y==1  && c.x==0) O.xy=vec2(M-1,iFrame);\n            }\n            //add edge\n            else if(id==0 && ms.x!=0. && (iFrame - LA)>WAIT){\n                if(c.y==1  && c.x==M+1)  O.xy = ms.xy;\n                if(c.y==1  && c.x==0) O.xy=vec2(M+1,iFrame); \n            } \n            else if(m.y> 15. && m.y<150. &&N>0){           \n                if(c.y==0 && c.x==N+1)  O.xy =vec2(iMouse.xy); \n                if(c.y==0 && c.x==0) O.xy=vec2(N+1,iFrame); \n                if(c.y==1  && c.x==M+1) O.xy = vec2(N+1,m.x);\n                if(c.y==1  && c.x==0) O.xy=vec2(M+1,iFrame); \n            }\n        }\n        \n    }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define VERTEX_MODE 65\n#define EDGE_MODE 83\n#define RESET 82\n#define WAIT 30\n#define DEBUG \n\nfloat line( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n   \n   float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n#define A(x) texelFetch(iChannel0,ivec2(x,0),0)\n#define B(y) texelFetch(iChannel0,ivec2(y,1),0)  \n#define keyboard(k) (texelFetch(iChannel1, ivec2(k,0), 0).r>.5)\n\nvoid drawChar(sampler2D ch, inout vec3 color, in vec3 charColor, in vec2 p, in vec2 pos, in vec2 size, in int char) {\n    p = (p - pos) / size + 0.5;\n    if (all(lessThan(abs(p - 0.5), vec2(0.5)))) {\n        float val = textureGrad(ch, p / 16.0 + fract(vec2(char, 15 - char / 16) / 16.0), dFdx(p / 16.0), dFdy(p / 16.0)).r;\n        color = mix(color, charColor, val);\n    }\n}\n\n\n#define drawChars( ch, color,  charColor,p,  pos,  size, chars){for(int i_=0;i_<chars.length();i_++) drawChar( ch, color,  charColor,p,  pos +vec2(i_,0)*size.x*.5,  size , chars[i_]);}\n","name":"Common","description":"","type":"common"}]}