{"ver":"0.1","info":{"id":"XX2SDt","date":"1711267311","viewed":65,"name":"Borromean Rings v2","username":"tholzer","description":"use mouse to rotate scenery","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","torus","rotate","ring","elliptical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Borromean Rings\" by dr2 2019 \n//   https://shadertoy.com/view/wd2SD3\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Borromean_Rings_v2.glsl  2024-03-24\n//   https://www.shadertoy.com/view/XX2SDt\n\n#define AA 2   // optional antialiasing\n\nconst float PI = 3.14159;\n\nconst float farAway = 100.;\n\nconst vec3 backColor  = vec3 (0.2, 0.2, 0.2);\nconst vec3 ringColor1 = vec3 (1.0, 0.5, 0.2);\nconst vec3 ringColor2 = vec3 (0.2, 1.0, 0.5);\nconst vec3 ringColor3 = vec3 (0.5, 0.2, 1.0);\n\nconst float r1 = 17.0;     // radii\nconst float r2 = 2.0;\n\nfloat PrTorusDf (vec3 p)\n{\n  return length (vec2 (length (p.xy) - r1, p.z)) - r2;\n}\n\nvec3 ltDir, qHit;   int idObj;\n\n#define DMINQ(id,d) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjectDistance (vec3 p)\n{\n  float dMin = farAway;\n  vec3 q = vec3(0);\n  vec3 ds = vec3 (1.05, 1.5, 0.6);   // ring dimensions\n  q = ds * p;       DMINQ (1, PrTorusDf (q));\n  q = ds * p.zxy;   DMINQ (2, PrTorusDf (q));\n  q = ds * p.yzx;   DMINQ (3, PrTorusDf (q));\n  return 0.7 * dMin;\n}\n\nfloat ObjectRay (vec3 ro, vec3 rd)\n{\n  float hit = 0.;\n  float dist = 0.;\n  for (int j = 0; j < 80; j ++) \n  {\n    dist = ObjectDistance (ro + hit * rd);\n    if (dist < 0.0005 || hit >= farAway) break;\n    hit += dist;\n  }\n  return hit;\n}\n\nvec3 ObjectNormal (vec3 p)\n{\n  vec2 e = vec2 (0.0002, -0.0002);\n  vec4 v = vec4 (- ObjectDistance (p + e.xxx)\n                 , ObjectDistance (p + e.xyy)\n                 , ObjectDistance (p + e.yxy)\n                 , ObjectDistance (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjectShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) \n  {\n    h = ObjectDistance (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.2, 1.);\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, sh, nDotL;\n  dstObj = ObjectRay (ro, rd);\n  if (dstObj >= farAway) \n    return backColor;\n  \n  ro += dstObj * rd;\n  vn = ObjectNormal (ro);\n  if      (idObj == 1) col = ringColor1;\n  else if (idObj == 2) col = ringColor2;\n  else if (idObj == 3) col = ringColor3;\n  sh = ObjectShadow (ro, ltDir);\n  nDotL = max (dot (vn, ltDir), 0.);\n  col = col * (0.2 + 0.8 * sh * nDotL * nDotL) \n    +0.4 * step (0.95, sh) * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  return clamp (col, 0., 1.);\n}\n\nvec2 Rotate2D (vec2 q, float a)\n{\n  vec2 cs = sin (a + vec2 (0.5 * PI, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float tCur, el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) \n  { az += 2. * PI * mPtr.x;\n    el += PI * mPtr.y;\n  } else \n  { az += 0.47 * tCur;\n    el += 0.43 * tCur;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -60.);\n  zmFac = 3.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) \n       * Rotate2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * PI), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n","name":"Image","description":"","type":"image"}]}