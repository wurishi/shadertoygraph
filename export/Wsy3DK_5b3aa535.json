{"ver":"0.1","info":{"id":"Wsy3DK","date":"1570928452","viewed":70,"name":"mandelbrot iterations","username":"vdecaria","description":"Each iteration is linearly interpolated in time to create a continuous animation of the set converging.\n\nRestarts with different color palette after one minute.\n\nChange speed and number of iterations on lines 8 and 9.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","iterations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//My Mandelbrot set so I can learn Shadertoy\nvec2 complex_square(vec2 a){\n    return vec2(a.x*a.x - a.y*a.y, 2.*a.x*a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float num_periods = 20.;  //Number of Mandelbrot iterations.\n    float period_small = 3.;  //How long to transition between iterations.\n    float period = num_periods*period_small;\n    float freq = 1./period_small;\n    float period1 = 1.;\n    float mod_time_small = freq*mod(iTime,period_small);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=  vec2(0.1,0.5);\n\n    vec3 col = vec3(0.);\n    vec2 z = vec2(0.);\n    vec2 z_next;;\n    vec2 c = uv;\n    \n    for (int i = 0; i < int(floor(freq*mod(iTime,period))); i++){\n        z = complex_square(z) + c;\n    }\n    z_next = complex_square(z) + c;\n    z = mix(z,z_next,mod_time_small);\n    \n    z = abs(z);\n    z = clamp(z, vec2(0.,0.),vec2(1.,1.));\n    \n    z = mod(iTime,period) + period_small < period ? z : mix(z,vec2(0.),mod_time_small); //Transition to zero at end.\n    \n    //Choose colors\n    int color_choice = int(floor(iTime/period))%3;\n    if(color_choice == 0){\n\t\tcol.xz = z ;\n    }\n    else if(color_choice ==1) {\n        col.yz = z ;\n    }\n    else{\n        col.xy = z ;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}