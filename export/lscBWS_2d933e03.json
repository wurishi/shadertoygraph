{"ver":"0.1","info":{"id":"lscBWS","date":"1526502171","viewed":135,"name":"flowers2000","username":"dls","description":"experiments with tiles","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rotation","tiles","flowers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define M_PI 3.1416\n\n\nvec2 rot(vec2 v, float a) {\n\tv = vec2(v.x * cos(a) - v.y * sin(a),\n             v.x * sin(a) + v.y * cos(a));\n    return v;\n}\n\nvec2 rot2d(vec2 v, float a){\n    v -= 0.5;\n    v =  mat2(cos(a),-sin(a),\n              sin(a),cos(a)) * v;\n    v += 0.5;\n    return v;\n}\n\n\nfloat petal(vec2 pos, float a) {\n    pos = rot(pos, a);\n\n    // Lets start with a circle and distort space\n    pos *= 6.0; // Scale\n    pos.y += pos.x * 2.0;\n    \n    \n    float c = smoothstep(0.0, 1.0, (1.0 - distance(vec2(0.0), pos)) * 50.0);\n    return c;    \n}\n\nfloat center(vec2 pos) {\n \tfloat c = smoothstep(1.0, 0.0, (distance(vec2(0.0), pos) - 0.01) * 150.0);\n    \n    return c;\n}\n\nvec3 colormap(vec2 pos, vec3 base) {\n    return smoothstep(1.0, 0.0, distance(vec2(0.0), pos)) * base;\n}\n\nvec3 fl1(vec2 uv) {\n   \n    float p = 0.0;\n    for (int i = 0; i < 3; i++) {\n       p += petal(uv * 0.9, float(i) * M_PI/3.0);\n    }\n\tvec3 col = colormap(uv, vec3(0.8, 0.1, 0.0)) * p;   \n    \n    p = 0.0;\n    for (int i = 0; i < 3; i++) {\n       p += petal(uv * 1.3, (0.5 + float(i)) * M_PI/3.0);\n    }\n\tcol += colormap(uv, vec3(1.0, 1.0, 1.0)) * p;   \t\n\n    p = 0.0;\n    for (int i = 0; i < 6; i++) {\n       p += petal(uv * 1.7, (0.5 + float(i)) * M_PI/6.0);\n    }\n\tcol += colormap(uv, vec3(1.0, 1.0, 1.0)) * p;   \t\n\t\n    col = clamp(vec3(0.0), vec3(1.0), col);\n    col -= vec3(1.0, 1.0, 1.0) * center(uv);\n    col = clamp(vec3(0.0), vec3(1.0), col);\n    col += vec3(0.9, 0.7, 0.3) * center(uv); \n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Aspect\n    uv.x *= iResolution.x/iResolution.y;\n\n    uv = rot2d(uv, iTime * 0.25);\n    \n    uv *= 6.5; \n\tuv = fract(uv);\n    // Center\n    \n    uv.x -= 0.5; uv.y -= 0.5;\n \n    \n  \n    \n    // Distort space\n   \t// uv.x -= 0.5;\n\n  \n\n    \n    vec3 col = fl1(rot(uv, iTime));\n   \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}