{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define MAX_STEPS 500\n#define MAX_DIST 50.0 \n#define EPS 0.001\n#define SMOOTH_FACTOR 0.03\n#define FRAME_LENGTH 0.075\n#define DELAY_TIME 3.0\n\nmat3 rotateY(float al) \n{\n    float c = cos(al);\n    float s = sin(al);\n    return mat3(\n        vec3( c,0,s),\n        vec3( 0,1,0),\n        vec3(-s,0,c)\n    );\n}\n\n\nfloat sMin(float a, float b, float k)\n{\n    // sigmoid\n    k *= log(2.0);\n    float x = b - a;\n    return a + x/(1.0-exp2(x/k));\n}\n\n\nfloat sdBoxFrame(vec3 pos, vec3 b, float e ) \n{\n       pos = abs(pos  )-b;\n  vec3 q = abs(pos+e)-e;\n  return min(min(\n      length(max(vec3(pos.x,q.y,  q.z),0.0))+  min(max(pos.x,max(q.y,  q.z)),  0.0),\n      length(max(vec3(q.x,  pos.y,q.z),0.0))+  min(max(q.x,  max(pos.y,q.z)),  0.0)),\n      length(max(vec3(q.x,  q.y,  pos.z),0.0))+min(max(q.x  ,max(q.y,  pos.z)),0.0));\n}\n\nfloat sdPlane(vec3 p) \n{\n    return p.y;\n}\n\n\n\nfloat buildScene(vec3 p, float time, mat3 m) \n{\n     p = m * p;\n    float distPlane = sdPlane(p);\n    \n    vec3 offset;\n    if (time >= DELAY_TIME) \n    {\n        time -= DELAY_TIME;\n        offset = vec3(0, 0.7 + 0.8 * sin(time), 0);\n    } else \n    {\n        offset = vec3((DELAY_TIME-time) * 2.0, 0.7, 0);\n    }\n    float distBoxFrame = sdBoxFrame(p - offset, vec3(0.5, 0.7, 0.4), FRAME_LENGTH);\n    return sMin(distPlane, distBoxFrame, SMOOTH_FACTOR);\n}\n\n\n\nfloat trace(vec3 from, vec3 dir, float time, out bool hit, in mat3 m) \n{\n    hit = false;\n    \n    float dist = 0.0;\n    for (int i = 0; i < MAX_STEPS; ++i) \n    {\n        vec3 p = from + dir * dist;\n        float d = buildScene(p, time, m);\n        if (d < EPS )\n        {\n            hit = true; \n            return dist;\n        }\n        \n        dist += d;\n        if (dist > MAX_DIST)\n        {\n            break;\n        }\n    }\n    \n    return MAX_DIST;\n}\n\n\nvec3 generateNormal(vec3 p, float time, mat3 m) \n{\n    float e = EPS;\n    \n    float dx1 = buildScene(p + vec3(e, 0, 0), time, m);\n    float dx2 = buildScene(p - vec3(e, 0, 0), time, m);\n    float dy1 = buildScene(p + vec3(0, e, 0), time, m);\n    float dy2 = buildScene(p - vec3(0, e, 0), time, m);\n    float dz1 = buildScene(p + vec3(0, 0, e), time, m);\n    float dz2 = buildScene(p - vec3(0, 0, e), time, m);\n    \n    return normalize(vec3(dx1 - dx2, dy1 - dy2, dz1 - dz2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0.0);\n    bool hit;\n    \n    float time = iTime;\n    \n    vec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5, iMouse.z - 0.5);\n    mat3 m = rotateY(6.0 * mouse.x);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 light = vec3(-1.0, 3.0, 1.0);\n    vec3 eye = vec3(0.0, 1.0, 5.0);\n    vec3 dir = normalize(vec3(uv, -1.0));\n    \n    float dist = trace(eye, dir, time, hit, m);\n    if (hit) \n    {\n        vec3 p = eye + dir * dist;\n        vec3 n = generateNormal(p, time, m);\n        vec3 l = normalize(light - p);\n        float nl = max(0.0, dot(l, n));\n        \n        vec3 v = normalize(eye - p);\n        vec3 h = normalize(v + l);\n        float sp = pow(max(0.0, dot(n, h)), 50.0);\n        \n        vec4 colorW = vec4(1.0, 0.7, 0.3, 1);\n        color = 0.5* (nl + sp) * colorW;\n        \n    }\n    fragColor = vec4(color);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XftBW7","date":"1733767000","viewed":26,"name":"kinda gold box frame ","username":"TblKVANYA","description":"small study project","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["study"],"hasliked":0,"parentid":"","parentname":""}}