{"ver":"0.1","info":{"id":"M3KGR1","date":"1717315422","viewed":27,"name":"2024_6_2","username":"sako","description":"2024.6.2\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["daily"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float sphereSize = 1.0;\n\nfloat sdSphere(vec3 p){\n    return length(p)-sphereSize;\n}\n\nvec3 getNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        sdSphere(p + vec3(  d, 0.0, 0.0)) - sdSphere(p + vec3( -d, 0.0, 0.0)),\n        sdSphere(p + vec3(0.0,   d, 0.0)) - sdSphere(p + vec3(0.0,  -d, 0.0)),\n        sdSphere(p + vec3(0.0, 0.0,   d)) - sdSphere(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec3 lightDir = vec3(-0.577, 0.577, 0.577);\n    const float sphereSize = 1.0;\n    // center is (0,0)\n    vec2 p = (fragCoord.xy*2.0 - iResolution.xy);\n    // normalize\n    p /= min(iResolution.x, iResolution.y);\n    \n    vec3 cPos = vec3(0.0, 0.0, 4.0);\n    vec3 cDir = vec3(0.0, 0.0, -1.0);\n    vec3 cUp = vec3(0.0, 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 2.0;\n    \n    // ray direction\n    vec3 rayDir = normalize(cSide*p.x + cUp*p.y + cDir*targetDepth);\n    \n    float distance = 0.0;\n    float rLen = 0.0;\n    vec3 rPos = cPos;\n    for(int i=0; i<16; i++){\n        distance = sdSphere(rPos);\n        rLen += distance;\n        rPos = cPos + rayDir*rLen;\n    }\n    \n    \n    if(abs(distance) < 0.001){\n        vec3 normal = getNormal(rPos);\n        float diff = clamp(dot(lightDir, normal), 0.1, 1.0);\n        fragColor = vec4(vec3(diff), 1.0);\n        fragColor = vec4(vec3(normal), 1.0);\n    }\n    else{\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}