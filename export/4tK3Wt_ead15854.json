{"ver":"0.1","info":{"id":"4tK3Wt","date":"1477452293","viewed":245,"name":"Continuous Mandelbrot Iteration ","username":"VoidChicken","description":"A fractal that iterates constantly. Of course, this won't be too effective since floating points will run out way before the precision of this will. You can change the zoom and offset preset. Post more in the comments. Buffer A has zoom options!","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","mandelbrot","iteration","chicken","repetative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Creative Commons Attribution 4.0 Void Chicken\n//BUF A has ZOOM options.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float r = texture(iChannel0, uv).r;\n\tfragColor = vec4(r/float(iFrame)*10.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// ZOOM OFFS PRESETS  \n/*\n\t//ZOOMED OUT ALL THE WAY WHOLE FRACTAL:\n\t0.      0 , 0\t\n\n\t6.      .749, 0.\n\t17.73   .749, 0. \n\t//POST MORE IN THE COMMENTS\n\n\n\n*/\n#define ZOOM 0.\n#define OFFS 0., 0.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 dat = texture(iChannel0, fragCoord/iResolution.xy);\n\tvec4 f = dat;\n    {\n        vec4 newdat = dat;\n        float r = dat.x;\n        vec4 v = vec4((fragCoord/iResolution.y-.5)*4./exp2(ZOOM)-vec2(OFFS)-vec2(1, 0),dat.zw);\n        if (length(v.zw)<2.)  {\n            v.zw=vec2(v.z*v.z-v.w*v.w,dot(v.zw, v.wz))+v.xy;\n            r++;\n        }\n        newdat = vec4(r, 0., v.zw); \n        f=newdat;\n    }\n    fragColor = f;\n}","name":"Buf A","description":"","type":"buffer"}]}