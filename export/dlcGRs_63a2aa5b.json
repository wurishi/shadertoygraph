{"ver":"0.1","info":{"id":"dlcGRs","date":"1682930703","viewed":155,"name":"Shader Jam - Cube Tunnel","username":"gam0022","description":"Shader Jam about 1 hours @ SESSIONS in C4 LAN 2023 SPRING\nhttps://twitter.com/gam0022/status/1652251487836446720","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","ifs","sessions2023"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original Bonzomatic Shader\n// https://gist.github.com/gam0022/b09b6e4c89262d55a88632456f0ef535\n\nfloat fft(float d) { return texture(iChannel0, vec2(fract(d), 0)).r * 0.4; }\n#define time iTime\nfloat beat, bpm, beatTau, beatPhase;\n\n#define VOL 0.\n#define SOL 1.\n#define PI acos(-1.)\n#define TAU (2. * PI)\n#define saturate(x) clamp(x, 0., 1.)\n\nvec3 pal(float x) { return 0.5 + 0.5 * cos(TAU * (x + vec3(0, 0.333, 0.666))); }\n\nvoid U(inout vec4 m, float d, float a, float b, float c) { m = (d < m.x) ? vec4(d, a, b, c) : m; }\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.)) + min(0., max(q.x, max(q.y, q.z)));\n}\n\nvoid rot(inout vec2 p, float x) { p = mat2(cos(x), sin(x), -sin(x), cos(x)) * p; }\n\nfloat phase(float x) { return floor(x) + 0.5 + 0.5 * cos(PI * exp(-5. * fract(x))); }\n\nvec3 target;\n\nvec4 map(vec3 p) {\n    vec4 m = vec4(1, VOL, 0, 0);\n    vec3 pos = p;\n\n    float a = 15.;\n    p = mod(p, a) - 0.5 * a;\n\n    vec3 of = vec3(1.5);\n    vec3 ro = vec3(0.34 - 0.02 * sin(TAU * phase(beat) / 4.), 0.3, 0.3);\n    p -= of;\n\n    for (int i = 0; i < 5; i++) {\n        p = abs(p + of) - of;\n        rot(p.xz, ro.x * TAU);\n        rot(p.yx, ro.y * TAU);\n        rot(p.zy, ro.z * TAU);\n    }\n\n    float hue = 0.9 + pos.z;\n    if (mod(beat, 16.) < 8.) hue = 0.9;\n    float emi = saturate(cos(TAU * (beat / 2. + pos.z / 32.)));\n\n    U(m, sdBox(p, vec3(1)), SOL, 0., 1.);\n    U(m, sdBox(p, vec3(0.1, 1.1, 1.1)), VOL, hue, emi);\n    U(m, sdBox(p, vec3(1.1, 1.1, 0.1)), VOL, hue + 0.5, emi);\n\n    vec3 p2 = pos - target;\n\n    of = vec3(0.3);\n    ro = vec3(0.34 - 0.2 * sin(TAU * phase(beat) / 4.), 0.3, 0.3);\n\n    for (int i = 0; i < 2; i++) {\n        p2 = abs(p2 + of) - of;\n        rot(p2.xz, ro.x * TAU);\n        rot(p2.yx, ro.y * TAU);\n        rot(p2.zy, ro.z * TAU);\n    }\n\n    float s = 0.4 + clamp(fft(0.1) * 10., 0., 2.);\n    hue = beat / 8.;\n    emi = fft(0.1) * 10.;\n    U(m, sdBox(p2, s * vec3(1)), SOL, beat / 8., 1.);\n    U(m, sdBox(p2, s * vec3(0.1, 1.1, 1.1)), VOL, hue + 0.5, emi);\n    U(m, sdBox(p2, s * vec3(1.1, 1.1, 0.1)), VOL, hue + 0.0, emi);\n\n    return m;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    bpm = 130.;\n    beat = bpm * time / 60.;\n    beatTau = beat * TAU;\n\n    vec3 col = vec3(0);\n\n    vec3 ro, ray;\n    target = ro + vec3(0., 0., beat * 2.);\n\n    if (mod(beat, 16.) < 4.) {\n        ro = target + vec3(0, 0, -10);\n        ray = vec3(uv, 0.3);\n    } else {\n        float a = 6.;\n        ro = target + vec3(a * cos(beatTau / 32.), 2. * sin(beatTau / 16.), a * sin(beatTau / 32.));\n        vec3 up = vec3(0, 1, 0);\n        vec3 fwd = normalize(target - ro);\n        vec3 right = normalize(cross(up, fwd));\n        up = normalize(cross(fwd, right));\n        ray = normalize(uv.x * right + uv.y * up + fwd * 0.3);\n    }\n\n    float t, d;\n    for (int i = 0; i < 300; i++) {\n        vec3 p = ro + ray * t;\n        vec4 m = map(p);\n        d = m.x;\n\n        if (m.y == VOL) {\n            col += clamp(0.01 * m.w * pal(m.z) / abs(d), 0.0, 0.3);\n            t += 0.25 * abs(d) + 0.01;\n        } else {\n            if (d < 0.01) {\n                col += 0.01 * float(i);\n                break;\n            }\n\n            t += d;\n        }\n    }\n\n    col = mix(vec3(0), col, exp(-0.1 * t));\n    col = saturate(col);\n    vec2 uv2 = abs(uv);\n    float hue = beat / 8.;\n    col += pal(hue) * clamp((fft(uv2.y * 0.2) - uv2.x), 0., 1.);\n    col += pal(hue + 0.5) * clamp((fft(uv2.y * 0.3) - uv2.x), 0., 1.);\n\n    fragColor = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}