{"ver":"0.1","info":{"id":"mtSBRV","date":"1694264765","viewed":92,"name":"Visualizing Mouse Events","username":"hasenpfote","description":"The controls are simple: just click the mouse on the screen.\nFor details, please refer to the comments in the Image tag.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["mouse","mouseevents"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * The following is what is displayed on the screen.\n *\n * iMouse.z > 0\n * iMouse.z < 0\n * iMouse.w > 0\n * iMouse.w < 0\n *\n * Mouse Up\n * Mouse Down\n * Mouse Pressed\n * Mouse Released\n * Mouse Double Click\n *\n * ===\n * I created this to enhance my understanding of mouse events.\n * Much of the functionality is based on the following work.\n * I am grateful to the original author.\n * [mouse events - FabriceNeyret2] https://www.shadertoy.com/view/fsfGDn\n */\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 color = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(linear_to_srgb(color), 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/**\n * In this pass, various states are loaded and stored.\n */\n\nconst float MOUSE_DOUBLE_CLICK_DELAY = 0.3;\n\nint state_pos_to_id(in ivec2 pos){\n    return int(iResolution.y) * pos.y + pos.x;\n}\n\nbool can_store_state(in int id, in ivec2 pos){\n    return state_id_to_pos(int(iResolution.y), id) == pos;\n}\n\nvec4 load_state(in int id){\n    return load_state(iChannel0, int(iResolution.y), id);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    ivec2 pos = ivec2(fragCoord);\n    vec4 state;\n\n    if(can_store_state(SID_MOUSE, pos)){\n        state = iMouse;\n    }else if(can_store_state(SID_MOUSE_EVENTS, pos)){\n        state = load_state(SID_MOUSE_EVENTS);\n        vec4 state_mouse = load_state(SID_MOUSE);\n        // released\n        state.x = float(iMouse.z < 0. && state_mouse.z > 0.);\n        // released -> pressed ... double click\n        state.y = float(iMouse.w > 0. && iTime - state.z < MOUSE_DOUBLE_CLICK_DELAY);\n        state.z = state.x > 0. ? iTime : state.z;\n    }else{\n        discard;\n    }\n\n    fragColor = state;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define SID_MOUSE 0\n#define SID_MOUSE_EVENTS 1\n\n//==============================================================================\n\nfloat srgb_to_linear(in float x){\n    return x <= 0.04045 ? x / 12.92 : pow((x + 0.055) / 1.055, 2.4);\n}\n\nvec3 srgb_to_linear(in vec3 color){\n    return vec3(srgb_to_linear(color.r), srgb_to_linear(color.g), srgb_to_linear(color.b));\n}\n\nfloat linear_to_srgb(in float x){\n    return x <= 0.0031308 ? 12.92 * x : 1.055 * pow(x, 1./2.4) - 0.055;\n}\n\nvec3 linear_to_srgb(in vec3 color){\n    return vec3(linear_to_srgb(color.r), linear_to_srgb(color.g), linear_to_srgb(color.b));\n}\n\n//==============================================================================\n\nivec2 state_id_to_pos(in int num_rows, in int id){\n    return ivec2(id % num_rows, id / num_rows);\n}\n\nvec4 load_state(in sampler2D ch, in int num_rows, in int id){\n    return texelFetch(ch, state_id_to_pos(num_rows, id), 0);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/**\n * In this path, mouse events are visualized.\n */\n\nconst int MAX_EVENTS = 10;\n\nconst float BAR_OFFSET = 80.;\nconst float BAR_SPEED = 3.;\n\nconst vec4[MAX_EVENTS] EVENT_COLORS = vec4[](\n    vec4( 42., 157., 143., 255.) / 255.,\n    vec4(233., 196., 106., 255.) / 255.,\n    vec4(244., 162.,  97., 255.) / 255.,\n    vec4(231., 111.,  81., 255.) / 255.,\n    vec4(0.),\n    vec4(133., 203., 205., 255.) / 255.,\n    vec4(168., 222., 224., 255.) / 255.,\n    vec4(249., 226., 174., 255.) / 255.,\n    vec4(251., 199., 141., 255.) / 255.,\n    vec4(167., 214., 118., 255.) / 255.\n);\n\nvec4 load_state(in int id){\n    return load_state(iChannel1, int(iResolution.y), id);\n}\n\nbool event_0(){\n    return iMouse.z > 0.;\n}\n\nbool event_1(){\n    return iMouse.z < 0.;\n}\n\nbool event_2(){\n    return iMouse.w > 0.;\n}\n\nbool event_3(){\n    return iMouse.w < 0.;\n}\n\nbool is_mouse_down(){\n    return iMouse.z > 0.;\n}\n\nbool is_mouse_pressed(){\n    return iMouse.w > 0.;\n}\n\nbool is_mouse_up(){\n    return iMouse.z < 0.;\n}\n\nbool is_mouse_released(){\n    vec4 state = load_state(SID_MOUSE_EVENTS);\n    return state.x > 0.;\n}\n\nbool is_mouse_double_click(){\n    vec4 state = load_state(SID_MOUSE_EVENTS);\n    return state.y > 0.;\n}\n\nvec4 fetch(in ivec2 pos){\n    return texelFetch(iChannel0, pos, 0);\n}\n\nfloat circle(in vec2 pos, in vec2 center, in float radius){\n    return clamp(radius - distance(pos, center), 0., 1.);\n}\n\nfloat ring(in vec2 pos, in vec2 center, in float radius, in float thickness){\n    return abs(distance(pos, center) - radius) < 0.5 * thickness ? 1. : 0.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec4 color = vec4(0.);\n    float[MAX_EVENTS] events = float[](\n        float(event_0()),\n        float(event_1()),\n        float(event_2()),\n        float(event_3()),\n        -100.,\n        float(is_mouse_up()),\n        float(is_mouse_down()),\n        float(is_mouse_pressed()),\n        float(is_mouse_released()),\n        float(is_mouse_double_click())\n    );\n\n    float bar_height = iResolution.y / float(MAX_EVENTS + 1);\n\n    for(int i = 0; i < MAX_EVENTS; i++){\n        if(events[i] <= -100.)\n            continue;\n\n        vec2 center = vec2(0.5 * BAR_OFFSET, iResolution.y - (0.5 + float(i)) * bar_height);\n\n        float w = ring(fragCoord, center, 15., 3.);\n        color.rgb = mix(color.rgb, EVENT_COLORS[i].rgb, w);\n\n        if(events[i] > 0.){\n            w = circle(fragCoord, center, 10.);\n            color.rgb = mix(color.rgb, (events[i] * EVENT_COLORS[i]).rgb, w);\n        }\n        if(fragCoord.x > BAR_OFFSET){\n            vec4 prev = fetch(ivec2(fragCoord - vec2(BAR_SPEED, 0.)));\n            float start = iResolution.y - float(i) * bar_height;\n            if(fragCoord.y < start && fragCoord.y > start - bar_height){\n                color = fragCoord.x < BAR_OFFSET + BAR_SPEED ? events[i] * EVENT_COLORS[i] : prev;\n            }\n        }\n    }\n\n    fragColor = color;\n}\n","name":"Buffer B","description":"","type":"buffer"}]}