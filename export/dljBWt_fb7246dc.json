{"ver":"0.1","info":{"id":"dljBWt","date":"1694626989","viewed":22,"name":"FlowerPuz03 | aykae","username":"aykae","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"cl2BWd","parentname":"FlowerPuz02 | aykae"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n \nfloat random(float seed) {\n    return (5. * sin(seed * iTime * 23.23)) + 1.;\n}\n\nvec3 random3(float seed) {\n    float bseed = bias(seed, 0.8);\n    return vec3(sin(bseed * 2342.43589),\n                sin(bseed * 12.2342),\n                sin(bseed * 901.2));\n}\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n    color = abs(random3(iTime * 0.00003));\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n\n//AKR:\nfloat computePeakyRadius(vec2 uv) {\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    float time = 20. * sin(1. * iTime);\n    float petals = 2.5;\n    /*\n    //every time 'time' equals 0, i.e. shape is back to circle\n    //randomize the number of cuts there are.\n    if (abs(time) < 0.01) {\n        petals = random(petals);\n    }\n    */\n    float offset = 50. * atan(tan(petals * a + time)); //https://en.wikipedia.org/wiki/Sawtooth_wave\n    float scale = (sin(iTime));\n    offset *= scale;\n    \n    radius = radius + offset;\n    \n    return radius;\n}\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computePeakyRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 215.0, 210.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n\tvec4 layer2 = circle(uv, center, radius, red);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}