{"ver":"0.1","info":{"id":"NddGWs","date":"1630885037","viewed":147,"name":"2d Infinite Stairs SDF","username":"jt","description":"Distancefield of 2d infinite stairs using iq's nice visualization.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","infinite","stairs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/NddGWs\n\n// 2d infinite stairs SDF, 2021 jt\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n/*\nfloat infinite_stairs_original(vec2 p)\n{\n    // rotate 45 deg\n    vec2 q = vec2(dot(p, vec2(1.0,1.0)/sqrt(2.0)), dot(p, vec2(-1.0,1.0)/sqrt(2.0)));\n    // scale (diagonal to unit)\n    q.x /= sqrt(2.0);\n    // reflect\n    q.x = 1.0-2.0*abs(1.0-2.0*fract((q.x+1.0)/4.0));\n    // unscale (unit to diagonal)\n    q.x *= sqrt(2.0);\n    // unrotate 45 deg\n    q = vec2(dot(q, vec2(1.0,-1.0)/sqrt(2.0)), dot(q, vec2(1.0,1.0)/sqrt(2.0)));\n    return sdBox(q, vec2(1.0));\n}\n*/\n\nfloat infinite_stairs(vec2 p)\n{\n    // rotate 45 deg & scale (diagonal to unit)\n    mat2 M = mat2(vec2(1.0,1.0), vec2(-1.0,1.0));\n    p = p * M / 2.0;\n    //p.x = 1.0-2.0*abs(1.0-2.0*fract((p.x+1.0)/4.0)); // reflect\n    p.x = 2.0 * fract((p.x+1.0)/2.0) - 1.0; // shift\n    // rotate again 45 deg - same as unrotate due to symmetry\n    p = p * M;\n    return sdBox(p,vec2(1.0));\n}\n\n// https://www.shadertoy.com/view/XdXcRB Rhombus - distance 2D by iq\nfloat sdUnitRhombus( in vec2 p ) // simplified: sdRhombus(p, 1.0)\n{\n    vec2 q = abs(p);\n\n    float h = clamp( (-2.0*(q.x-q.y) )/2.0, -1.0, 1.0 );\n    float d = length( q - 0.5*vec2(1.0-h,1.0+h) );\n    d *= sign( q.x + q.y - 1.0 );\n\n    return d;\n}\n\nfloat infinite_stairs_variant(vec2 p)\n{\n    mat2 M = mat2(vec2(1.0,1.0), vec2(-1.0,1.0));\n    p = p * M / 2.0;\n    //p.x = 1.0-2.0*abs(1.0-2.0*fract((p.x+1.0)/4.0)); // reflect\n    p.x = 2.0 * fract((p.x+1.0)/2.0) - 1.0; // shift\n    return sqrt(2.0) * sdUnitRhombus(p);\n}\n\nfloat iqs_infinite_stairs(vec2 p) // improved version suggested by iq (note offset vec2(1,1) compared to other versions)\n{\n    p = vec2(p.x+p.y,p.x-p.y)/4.0;\n    p = fract(p.x) + vec2(p.y,-p.y);\n    p = 2.0*p-1.0;\n    return sdBox(p,vec2(1.0));\n}\n\nfloat finite_stairs(vec2 p, float n)\n{\n    return max(infinite_stairs(p), n*sdBox(p/n, vec2(1.0)));\n    //return max(infinite_stairs_variant(p), n*sdBox(p/n, vec2(1.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    p *= 6.0; // zoom out\n\n    // sdf\n    //float d = sdBox(p, vec2(1.0)); // compare with unit-box to verify scale\n    //float d = infinite_stairs_original(p); // compare with original to verify simplifications are correct\n    //float d = infinite_stairs(p); // simplified using box\n    //float d = infinite_stairs_variant(p); // simplified using rhombus\n    float d = iqs_infinite_stairs(p+vec2(1.0)); // iq's improved version (added offset to match other versions)\n    //float d = finite_stairs(p, 5.0); // finite variant\n\n    // colorize\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-2.0*abs(d));\n    col *= 0.8 + 0.2*cos(40.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.05,abs(d)) );\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}