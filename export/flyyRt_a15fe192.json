{"ver":"0.1","info":{"id":"flyyRt","date":"1661962654","viewed":170,"name":"UnityChromakey Port","username":"kkirbatski","description":"This is a port of the UnityChromakey green screen shader from https://github.com/otdavies/UnityChromakey","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["chroma","screen","greenscreen","green","chromakey","key"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * This is a port of the UnityChromakey green screen shader from https://github.com/otdavies/UnityChromakey\n **/\n\nvec4 _KeyColor = vec4(0.0, 1.0, 0.0, 1.0);\nvec4 _TintColor = vec4(1.0,1.0,1.0,1.0);\nfloat _ColorCutoff = 0.3;\nfloat _ColorFeathering = 0.45;\nfloat _MaskFeathering = 0.5;\nfloat _Sharpening = 0.8;\nfloat _Despill = 0.3;\nfloat _DespillLuminanceAdd = 0.1;\n\nfloat rgb2y(vec3 c)\n{\n    return (0.299*c.r + 0.587*c.g + 0.114*c.b);\n}\n\nfloat rgb2cb(vec3 c) \n{\n    return (0.5 + -0.168736*c.r - 0.331264*c.g + 0.5*c.b);\n}\n\nfloat rgb2cr(vec3 c) \n{\n    return (0.5 + 0.5*c.r - 0.418688*c.g - 0.081312*c.b);\n}\n\nfloat colorclose(float Cb_p, float Cr_p, float Cb_key, float Cr_key, float tola, float tolb)\n{\n    float temp = (Cb_key-Cb_p)*(Cb_key-Cb_p)+(Cr_key-Cr_p)*(Cr_key-Cr_p);\n    float tola2 = tola*tola;\n    float tolb2 = tolb*tolb;\n    if (temp < tola2) return (0.0);\n    if (temp < tolb2) return (temp-tola2)/(tolb2-tola2);\n    return (1.0);\n}\n\nfloat maskedTex2D(sampler2D tex, vec2 uv)\n{\n    vec4 color = texture(tex, uv);\n    \n    // Chroma key to CYK conversion\n    float key_cb = rgb2cb(_KeyColor.rgb);\n    float key_cr = rgb2cr(_KeyColor.rgb);\n    float pix_cb = rgb2cb(color.rgb);\n    float pix_cr = rgb2cr(color.rgb);\n\n    return colorclose(pix_cb, pix_cr, key_cb, key_cr, _ColorCutoff, _ColorFeathering);\n}\n\nfloat lerp(float a, float b, float w) {\n  return a + w*(b-a);\n}\n\n//-------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy / iResolution.xy;\n\n    \n    \n    // Get pixel width\n    vec2 pixelWidth = vec2(1.0 / iResolution.x, 0.0);\n    vec2 pixelHeight = vec2(0.0, 1.0 / iResolution.y);\n\tvec2 texPos = fragCoord / iResolution.xy;\n\n    // Unmodified MainTex\n    vec4 color = texture(iChannel0, texPos);\n\n    // Unfeathered mask\n    float mask = maskedTex2D(iChannel0, texPos);\n\n    // Feathering & smoothing\n    float c = mask;\n    float r = maskedTex2D(iChannel0, texPos + pixelWidth);\n    float l = maskedTex2D(iChannel0, texPos - pixelWidth);\n    float d = maskedTex2D(iChannel0, texPos + pixelHeight); \n    float u = maskedTex2D(iChannel0, texPos - pixelHeight);\n    float rd = maskedTex2D(iChannel0, texPos + pixelWidth + pixelHeight) * .707;\n    float dl = maskedTex2D(iChannel0, texPos - pixelWidth + pixelHeight) * .707;\n    float lu = maskedTex2D(iChannel0, texPos - pixelHeight - pixelWidth) * .707;\n    float ur = maskedTex2D(iChannel0, texPos + pixelWidth - pixelHeight) * .707;\n    float blurContribution = (r + l + d + u + rd + dl + lu + ur + c) * 0.12774655;\n    float smoothedMask = smoothstep(_Sharpening, 1.0, lerp(c, blurContribution, _MaskFeathering));\n    vec4 result = color * smoothedMask;\n\n    // Despill\n    float v = (2.0*result.b+result.r)/4.0;\n    if(result.g > v) result.g = lerp(result.g, v, _Despill);\n    vec4 dif = (color - result);\n    float desaturatedDif = rgb2y(dif.xyz);\n    result += lerp(0.0, desaturatedDif, _DespillLuminanceAdd);\n    vec4 background = texture(iChannel1, fragCoord / iResolution.xy);\n    fragColor = vec4(mix(background.rgb,result.xyz, smoothedMask),1.0);\n}","name":"Image","description":"","type":"image"}]}