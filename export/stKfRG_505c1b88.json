{"ver":"0.1","info":{"id":"stKfRG","date":"1664771974","viewed":202,"name":"Looking Glass Portrait SBS","username":"jakedowns","description":"an attempt to make a SBS interlacing shader for looking glass **portrait** based on the older, landscape-specific shader found here: https://github.com/lonetech/LookingGlass/blob/master/quiltshader.glsl","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lookingglass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// this is especially made for looking glass portrait.\n// something is not quite right with the math tho.\n// oddly, this same math *does* work for my citra interlacing shader:\n// https://github.com/jakedowns/reshade-shaders/blob/main/interlaced-shader/lookingglass.glsl\n// based on https://github.com/lonetech/LookingGlass/blob/master/quiltshader.glsl\n\n// if you want to test with a sbs image, you can paste this line in the JS console:\n\n//gShaderToy.SetTexture(0, {mSrc:'https://i.imgur.com/FZ4vNhq.jpeg', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\n// !!! set this to true if you do:\nconst bool useImgTexture = false;\n\nconst float width = 1536.0f;\nconst float height = 2048.0f;\nconst float dpi = 324.0f;\n// Calibration values \n// via: https://jakedowns.github.io/looking-glass-calibration.html\nconst float slope = -7.083540916442871;\nconst float pitch = 52.59267044067383;\nconst float center = 0.8167931437492371;\n\nconst float tilt = height / (width * slope);\nconst float pitch_adjusted = pitch * width / dpi * cos(atan(1.0f, slope));\nconst float subp = 1.0f / (3.0f * width) * pitch_adjusted;\n\nconst float repeat = 100.0/3.0;\n\nvec3 my_sample(vec2 uv, float alpha){\n\tfloat halfX = uv.x / 2.0f;\n    \n    // one-shot mode\n    if(fract(alpha) < .5){\n    // repeated mode\n    //if(mod(fract(alpha)*100.0,repeat) < repeat*0.5){\n\t\t\n        if(useImgTexture)\n            return texture(iChannel0, vec2(0.5 + halfX, uv.y)).xyz;\n        \n        return vec3(0.0,0.0,1.0);\n\t}\n\t// left eye (left half of SBS)\n    if(useImgTexture)\n        return texture(iChannel0, vec2(halfX, uv.y)).xyz;\n    \n    //return vec3(0.0);\n\treturn vec3(1.0,0.0,0.0);\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 col = vec3(0.0);\n    float alpha = (uv.x + uv.y * tilt) * pitch_adjusted - center;\n    col.r = my_sample(uv,alpha).r;\n    col.g = my_sample(uv,alpha + subp).g;\n    col.b = my_sample(uv,alpha + 2.0f * subp).b;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}