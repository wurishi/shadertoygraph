{"ver":"0.1","info":{"id":"ttSBzw","date":"1598512722","viewed":159,"name":"large pixel point filter AA","username":"toocanzs","description":"Usually you enable point filtering to keep things pixelated\nWhen you have rotation/scaling like in a 3d game like Minecraft the edges get all aliased and jagged.\nIf you keep linear filtering and apply a point filter-like function you can get anti aliasing","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["xd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a)\n{ \n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 AntiAliasedPointFiltering(vec2 uv, vec2 texelSize)\n{\n    float pixelSize = max(texelSize.x, texelSize.y);\n    uv *= pixelSize;\n    vec2 duv = vec2(dFdx(uv.x), dFdy(uv.y));\n    float rf = inversesqrt(dot(duv, duv));\n    vec2 newUv = floor(uv);\n    newUv = newUv - max(vec2(0.), .5 - rf * (uv - floor(uv)));\n    newUv = newUv + max(vec2(0.), .5 - rf * (ceil(uv) - uv));\n    newUv = (newUv + .5) / pixelSize;\n    return newUv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    float scale = 0.3 + sin(iTime*0.2) * 0.1;\n    vec2 st = uv * scale;\n    st *= rot(sin(iTime*0.3)*0.2);\n    if(uv.x < -0.2)\n    {\n\t\t//Point filtered\n    \tfragColor = texture(iChannel0, st);\n    }\n    else if(uv.x < 0.2)\n    {\n        //Normal linear filtering\n        fragColor = texture(iChannel1, st);\n    }\n    else\n    {\n        //Linear filtering with AA point filtering function used\n        fragColor = texture(iChannel1, AntiAliasedPointFiltering(st, iChannelResolution[1].xy));\n    }\n}","name":"Image","description":"","type":"image"}]}