{"ver":"0.1","info":{"id":"tllyz4","date":"1591580412","viewed":247,"name":"fork-XY Oscilloscope Cube","username":"jorge2017a1","description":"fork-XY Oscilloscope Cube\n\n///XY Oscilloscope Cube (Loud)\n//Creado por Flyguy en 2016-10-23\n//https://www.shadertoy.com/view/lly3DG","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["forkxyoscilloscopecube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///XY Oscilloscope Cube (Loud)\n//Creado por Flyguy en 2016-10-23\n//https://www.shadertoy.com/view/lly3DG\n\n//Modificado por: jorge2017a1  \n//fecha 07/jun/2020\n\n\n\n//Preview of the shape being drawn. (may fall out of sync with the sound when paused)\n\nfloat tau = atan(1.0)*8.0;\n\nfloat gShapeTime = 0.0;\nmat4 gModel = mat4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);\n\nvec2 cossin(float x)\n{\n\treturn vec2(cos(x), sin(x));   \n}\n\n//Single point projection\nvec2 Project(vec3 p0)\n{\n    vec3 vanish = vec3(0.0,-2.0,0.0);\n    \n    p0 -= vanish;\n    \n\treturn length(vanish) * p0.xz / p0.y;\n}\n\n//Transformation functions\nmat4 Translate(vec3 v)\n{\n    return mat4(vec4(1,0,0,v.x), vec4(0,1,0,v.y), vec4(0,0,1,v.z), vec4(0,0,0,1));\n}\n\n//Angle-axis rotation\nmat4 Rotate(vec3 u,float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    u = normalize(u);\n    \n    vec3 c0 = vec3(c + (u.x*u.x) * (1.0-c), (u.y*u.x) * (1.0-c) + (u.z*s), (u.z*u.x) * (1.0-c) - (u.y*s));    \n    vec3 c1 = vec3((u.x*u.y) * (1.0-c) - (u.z*s), c + (u.y*u.y) * (1.0-c), (u.z*u.y) * (1.0-c) + (u.x*s)); \n    vec3 c2 = vec3((u.x*u.z) * (1.0-c) + (u.y*s), (u.y*u.z) * (1.0-c) - (u.x*s), c + (u.z*u.z) * (1.0-c));\n    \n    return mat4(mat3(c0,c1,c2));\n}\n\nmat4 Scale(vec3 v)\n{\n    return mat4(vec4(v.x,0,0,0), vec4(0,v.y,0,0), vec4(0,0,v.z,0), vec4(0,0,0,1));\n}\n\n//Projected line\nfloat Line3d(vec3 p0,vec3 p1,vec2 uv)\n{\n    p0 = (vec4(p0,1.0) * gModel).xyz;\n    p1 = (vec4(p1,1.0) * gModel).xyz;\n    \n\tp0.xy = Project(p0);\n\tp1.xy = Project(p1);\n    \n\tvec2 dir = normalize(p1.xy - p0.xy);\t\n\tuv = (uv - p0.xy) * mat2(dir.x, dir.y, -dir.y, dir.x);\t\n    \n    float d = distance(uv, clamp(uv, vec2(0.0), vec2(distance(p0.xy, p1.xy), 0.0)));\n    \n\treturn smoothstep(4.0/iResolution.y, 0.0, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = (fragCoord.xy / iResolution.y) - (res / 2.0);\n    uv *= 2.0;\n    \n    float time = iTime*0.5+4.0;\n    \n    \n    gModel *= Scale(vec3(0.081525));\n    \n    gModel *= Rotate(vec3(0, 0, 1), time);\n    gModel *= Rotate(vec3(0, 1, 0), time);\n    gModel *= Rotate(vec3(1, 0, 0), time);\n    //gModel *= Translate(vec3(0.4 * cossin(1.0 * time), 0.4 * sin(0.6 * time)));\n    \n    \n    \nvec3 cube[18];\ncube[0] = vec3(2, 2, 0);\ncube[1] = vec3(2, 7, 0);\ncube[2] = vec3(5, 10, 0);\ncube[3] = vec3(8, 7, 0);\ncube[4] = vec3(8, 2, 0);\ncube[5] = vec3(7, 2, 0);\ncube[6] = vec3(6, 2, 0);\ncube[7] = vec3(6, 5, 0);\ncube[8] = vec3(7, 5, 0);\n    \ncube[9] = vec3(2, 2, 10);\ncube[10] = vec3(2, 7, 10);\ncube[11] = vec3(5, 10, 10);\ncube[12] = vec3(8, 7, 10);\ncube[13] = vec3(8, 2, 10);\ncube[14] = vec3(7, 2, 10);\ncube[15] = vec3(6, 2, 10);\ncube[16] = vec3(6, 5, 10);\ncube[17] = vec3(7, 5, 10);\n    \n    \n     for(int j=0;j<18;j++)\n     {\n        cube[j]+= vec3(-15.0,0.0,0.0);\n     } \n         \n    \n    \n    vec3 cout = vec3(0);\n    \n    \n    //z0\n\tcout += Line3d(cube[0],cube[1], uv);\n    cout += Line3d(cube[1],cube[2], uv);\n    cout += Line3d(cube[2],cube[3], uv);\n    cout += Line3d(cube[3],cube[4], uv);\n    cout += Line3d(cube[4],cube[5], uv);\n    cout += Line3d(cube[5],cube[6], uv);\n    cout += Line3d(cube[6],cube[7], uv);\n    cout += Line3d(cube[7],cube[8], uv);\n    cout += Line3d(cube[8],cube[5], uv);\n    cout += Line3d(cube[6],cube[0], uv);\n    \n    \n    // z2\n    cout += Line3d(cube[9],cube[10], uv);\n    cout += Line3d(cube[10],cube[11], uv);\n    cout += Line3d(cube[11],cube[12], uv);\n    cout += Line3d(cube[12],cube[13], uv);\n    cout += Line3d(cube[13],cube[14], uv);\n    cout += Line3d(cube[14],cube[15], uv);\n    cout += Line3d(cube[15],cube[16], uv);\n    cout += Line3d(cube[16],cube[17], uv);\n    cout += Line3d(cube[17],cube[14], uv);\n    cout += Line3d(cube[14],cube[9], uv);\n    \n    \n    //lineas de largo eje z\n    cout += Line3d(cube[0],cube[9], uv);\n    cout += Line3d(cube[1],cube[10], uv);\n    cout += Line3d(cube[2],cube[11], uv);\n    cout += Line3d(cube[3],cube[12], uv);\n    cout += Line3d(cube[4],cube[13], uv);\n   \n\n\n    \n    \n    \nvec3 casa2[24];\ncasa2[0]=vec3( 1, 1, 0) ;  //1\ncasa2[1]=vec3( 1, 4, 0) ;  //2\ncasa2[2]=vec3( 2, 5, 0) ;  //3\ncasa2[3]=vec3( 3, 6, 0) ;  //4\ncasa2[4]=vec3( 4, 7, 0) ;  //5\ncasa2[5]=vec3( 4, 8, 0) ;  //6\ncasa2[6]=vec3( 5, 8, 0) ;  //7\ncasa2[7]=vec3( 5, 7, 0) ;  //8\ncasa2[8]=vec3( 6, 6, 0) ;  //9\ncasa2[9]=vec3( 7, 5, 0) ;  //10\ncasa2[10]=vec3( 8, 4, 0) ;  //11\ncasa2[11]=vec3( 8, 1, 0) ;  //12\n    \ncasa2[12]=vec3( 1, 1, 25) ;  //13\ncasa2[13]=vec3( 1, 4, 25) ;  //14\ncasa2[14]=vec3( 2, 5, 25) ;  //15\ncasa2[15]=vec3( 3, 6, 25) ;  //16\ncasa2[16]=vec3( 4, 7, 25) ;  //17\ncasa2[17]=vec3( 4, 8, 25) ;  //18\ncasa2[18]=vec3( 5, 8, 25) ;  //19\ncasa2[19]=vec3( 5, 7, 25) ;  //20\ncasa2[20]=vec3( 6, 6, 25) ;  //21\ncasa2[21]=vec3( 7, 5, 25) ;  //22\ncasa2[22]=vec3( 8, 4, 25) ;  //23\ncasa2[23]=vec3( 8, 1, 25) ;  //24\n    \n    \n   for(int j=12;j<24;j++)\n     {\n        casa2[j]+= vec3(0.0,0.0,-15.0);\n     } \n    \n    \n    //lado A\n    cout += Line3d(casa2[0],casa2[1], uv);\n    cout += Line3d(casa2[1],casa2[2], uv);\n    cout += Line3d(casa2[2],casa2[3], uv);\n    cout += Line3d(casa2[3],casa2[4], uv);\n    cout += Line3d(casa2[4],casa2[5], uv);\n    cout += Line3d(casa2[5],casa2[6], uv);\n    cout += Line3d(casa2[6],casa2[7], uv);\n    cout += Line3d(casa2[7],casa2[8], uv);\n    cout += Line3d(casa2[8],casa2[9], uv);\n    cout += Line3d(casa2[9],casa2[10], uv);\n    cout += Line3d(casa2[10],casa2[11], uv);\n    cout += Line3d(casa2[11],casa2[0], uv);\n    \n    //lado B\n    cout += Line3d(casa2[12],casa2[13], uv);\n    cout += Line3d(casa2[13],casa2[14], uv);\n    cout += Line3d(casa2[14],casa2[15], uv);\n    cout += Line3d(casa2[15],casa2[16], uv);\n    cout += Line3d(casa2[16],casa2[17], uv);\n    cout += Line3d(casa2[17],casa2[18], uv);\n    cout += Line3d(casa2[18],casa2[19], uv);\n    cout += Line3d(casa2[19],casa2[20], uv);\n    cout += Line3d(casa2[20],casa2[21], uv);\n    cout += Line3d(casa2[21],casa2[22], uv);\n    cout += Line3d(casa2[22],casa2[23], uv);\n    cout += Line3d(casa2[23],casa2[12], uv);\n    \n    \n    //union a y b\n    cout += Line3d(casa2[0],casa2[12], uv);\n    cout += Line3d(casa2[1],casa2[13], uv);\n    cout += Line3d(casa2[2],casa2[14], uv);\n    cout += Line3d(casa2[3],casa2[15], uv);\n    cout += Line3d(casa2[4],casa2[16], uv);\n    cout += Line3d(casa2[5],casa2[17], uv);\n    cout += Line3d(casa2[6],casa2[18], uv);\n    cout += Line3d(casa2[7],casa2[19], uv);\n    cout += Line3d(casa2[8],casa2[20], uv);\n    cout += Line3d(casa2[9],casa2[21], uv);\n    cout += Line3d(casa2[10],casa2[22], uv);\n    cout += Line3d(casa2[11],casa2[23], uv);\n   \n    \n        \n    \n    \nvec3 tria[18];\ntria[0]=vec3( 1, 1,0);  //1\ntria[1]=vec3( 2, 2,0);  //2\ntria[2]=vec3( 3, 3,0);  //3\ntria[3]=vec3( 4, 4,0);  //4\ntria[4]=vec3( 5, 5,0);  //5\ntria[5]=vec3( 6, 4,0);  //6\ntria[6]=vec3( 7, 3,0);  //7\ntria[7]=vec3( 8, 2,0);  //8\ntria[8]=vec3( 9, 1,0);  //9\ntria[9]=vec3( 1, 1,20);  //10\ntria[10]=vec3( 2, 2,20);  //11\ntria[11]=vec3( 3, 3,20);  //12\ntria[12]=vec3( 4, 4,20);  //13\ntria[13]=vec3( 5, 5,20);  //14\ntria[14]=vec3( 6, 4,20);  //15\ntria[15]=vec3( 7, 3,20);  //16\ntria[16]=vec3( 8, 2,20);  //17\ntria[17]=vec3( 9, 1,20);  //18\n\t\n    \n     for(int j=0;j<18;j++)\n     {\n        tria[j]+= vec3(10.0,0.0,0.0);\n     } \n    \n     for(int j=9;j<18;j++)\n     {\n        tria[j]+= vec3(0.0,0.0,-10.0);\n     } \n    \n    \n    //lado A\n    cout += Line3d(tria[0],tria[1], uv);\n    cout += Line3d(tria[1],tria[2], uv);\n    cout += Line3d(tria[2],tria[3], uv);\n    cout += Line3d(tria[3],tria[4], uv);\n    cout += Line3d(tria[4],tria[5], uv);\n    cout += Line3d(tria[5],tria[6], uv);\n    cout += Line3d(tria[6],tria[7], uv);\n    cout += Line3d(tria[7],tria[8], uv);\n    cout += Line3d(tria[8],tria[0], uv);\n    \n    //lado B\n    cout += Line3d(tria[9],tria[10], uv);\n    cout += Line3d(tria[10],tria[11], uv);\n    cout += Line3d(tria[11],tria[12], uv);\n    cout += Line3d(tria[12],tria[13], uv);\n    cout += Line3d(tria[13],tria[14], uv);\n    cout += Line3d(tria[14],tria[15], uv);\n    cout += Line3d(tria[15],tria[16], uv);\n    cout += Line3d(tria[16],tria[17], uv);\n    cout += Line3d(tria[17],tria[9], uv);\n    \n    //union A y B \n    cout += Line3d(tria[0],tria[9], uv);\n    cout += Line3d(tria[1],tria[10], uv);\n    cout += Line3d(tria[2],tria[11], uv);\n    cout += Line3d(tria[3],tria[12], uv);\n    cout += Line3d(tria[4],tria[13], uv);\n    cout += Line3d(tria[5],tria[14], uv);\n    cout += Line3d(tria[6],tria[15], uv);\n    cout += Line3d(tria[7],tria[16], uv);\n    cout += Line3d(tria[8],tria[17], uv);\n    \n    \n    \n\n    cout *= vec3(0.1,0.8,0.1);\n    \n    fragColor = vec4(cout, 1.0);\n}","name":"Image","description":"","type":"image"}]}