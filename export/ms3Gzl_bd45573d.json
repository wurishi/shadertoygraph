{"ver":"0.1","info":{"id":"ms3Gzl","date":"1677697853","viewed":209,"name":"Simulated Swampland","username":"Hyeve","description":"this scene is a awful, awful mess... but at least with this lighting and these effects, you can't tell (; ","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","transparency","glass","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//See the common tab for fps control.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.1415926535\n#define DTR 0.01745329\n#define ang(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define vmin(a, b) (a.x < b.x ? a : b)\n\n\nvec2 uv=vec2(0);\nvec3 cp,cn,cr,ss,oc,gl=vec3(0),vb,ro,rd,so,ld,no,on,lp;\nvec4 fc=vec4(0),cc=vec4(0),vs,hs,sp;\nfloat tt,cd,sd,md,io,oa,td=0.,li;\nint sk,sc;\n\n//3D Shapes\nfloat bx(vec3 p,vec3 s){vec3 q=abs(p)-s;return min(max(q.x,max(q.y,q.z)),0.)+length(max(q,0.));}\nfloat fcy(vec3 p,vec2 s){vec2 w=vec2(length(p.xy)-s.x,abs(p.z)-s.y);return min(max(w.x,w.y),0.0)+length(max(w,0.0));}\n\n//Maths\nfloat h11(float a){return fract(sin((a)*12.9898)*43758.5453123);}\nfloat noise(float p){float i=floor(p),f=fract(p);return mix(h11(i)*f,h11(i+1.)*(f-1.),f*f*(3.0-2.0*f));}\nvec3 rot(vec3 a,vec3 r){a.zy*=ang(r.x);a.xz*=ang(r.y);a.yx*=ang(r.z);return a;}\nfloat sharp(float inp,float sca){return 1.-pow(1.-pow(inp,sca),sca*2.);}\nvec3 thsv(vec3 c){vec4 K=vec4(0.,-1./3.,2./3.,-1.),p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g)),\nq=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);\nreturn vec3(abs(q.z+(q.w-q.y)/(6.*d)),d/(q.x),q.x);}\nvec3 trgb(vec3 c){vec4 K=vec4(1.,2./3.,1./3.,3.);vec3 p=abs(fract(c.xxx+K.xyz)*6.-K.www);\nreturn c.z*mix(K.xxx,clamp(p-K.xxx,0.,1.),c.y);}\n\n//SDF Maths\nfloat smin(float a,float b,float k){float h=clamp(0.5+0.5*(b-a)/k,0.,1.);return mix(b,a,h)-k*h*(1.-h);}\n\nfloat gyroid(vec3 pos, vec3 size) {\n    return abs(dot(sin(pos * size.x), cos((pos * size.y).zxy)) - size.z) / max(size.x, size.y) * 1.8;\n}\n\n\nfloat fbm(float x, float h, float n, float o)\n{    \n    vec2 g = vec2(2,exp2(-h));\n\t\tvec3 f = vec3(1,1,0);\n\t\tx -= o * 0.5;\n    for(float i=0.; i<n; i++){f=vec3(f.xy*g,f.z+f.y*sin(f.x*x+o));}\n    return f.z;\n}\n\n\nfloat surface(vec3 p, vec3 o)\n{\n\tfloat v = p.y;\n\tv -= fbm(p.z * 0.5, 1., 3., o.x)*o.z+0.5;\n\tv -= fbm(p.x * 0.5, 1., 3., o.y)*o.z+0.5;\n\treturn abs(v)-0.1;\n}\n\n\nfloat mp(vec3 p)\n{\t\t\n    //p.xz *= ang(35.*DTR);\n  \n    vec3 pp = p;\n  \n    //p.xz*=ang(tt*0.2);\n  \n    p.z+=tt;\n  \n    float surf = surface(p,vec3(tt*0.3,tt,0.1));\n\n  \n    //p.xz*=ang(tt*0.2);\n  \n  \n    p.x+=10.;\n    \n  \n    vec2 moid = floor((p.xz+10.)/20.);\n    float hid = h11(length(moid)+floor(tt*0.1));\n    p.xz = mod(p.xz+10.,20.)-10.;\n    p.xy += hid-0.5;\n    float slice = h11(floor(tt*5.)*7.7);\n    float tree = fcy(p.xzy, vec2(3.-p.y*0.03+hid*3.,999))+fbm(p.y*2.,1.,3.,tt)*0.1;\n    if(hid>0.5||length(hid-slice)<0.03) tree = abs(fcy(p.xzy,vec2(5,100)))+1.;\n    \n    vec3 tp = p;\n    \n    p=pp;\n    \n    p.z += tt;\n    p.y -= mix(30.,50.,noise(p.x*0.05+p.z*0.05+tt*0.05));\n    \n    \n    p.xz = mod(p.xz+10.,20.)-10.;\n    \n    float canopy = length(p) - 3.;\n    \n    for(li=0.;li<3.;li++) {\n      p=abs(p)-2.9-li;\n      p=rot(p,vec3(0,h11(li*2.)*10.,0));\n      p+=vec3(h11(li),h11(li*2.),h11(li*3.));\n      canopy = smin(canopy, length(p) - 3.+li*0.5,8.);\n    }\n    \n   \n  \n    tree = min(tree, canopy);\n  \n    surf = abs(surf) - 0.001;\n  \n    sd = min(surf, tree);\n    \n    \n  \n    \n    \n  \n\t\tif(sd<0.05)\n\t\t{\t\n      if(surf<sd+0.01) {\n        io=pp.y<1.05?1.1:-1.;\n        oc=vec3(0.1,0.3,0.7);\n        oa=0.3;\n        sp=vec4(1.3,1.5,0.,0.);\n        no = vec3(0,0,0);\n      }\n      else if(canopy<sd+0.01){\n        no = vec3(noise(p.x+p.y),noise(p.y+p.z),noise(p.z+p.x))-0.5;\n        io=1.;\n        oc=vec3(0.1,0.8,0.)*1.-hid*0.1;\n        oa=1.;\n        sp=vec4(1.,5.,0.,0.);\n      }\n      else {\n        no = vec3(0,noise(tp.x*3.+hid*5.)+noise(tp.z*3.-hid*5.),0);\n        io=1.;\n        oc=vec3(0.,0.5+noise(p.y)*0.1,0.);\n        oa=1.;\n        sp=vec4(1.5,2.,0.,0.);\n      }\n     \n \n\t\t\tss=vec3(0);\n\n      lp = vec3(0,50,1000);\n      sk = -1;\n\t\t}\n    \n    vs = vec4(1.5,1.,0.1, 16);\n    hs = vec4(3.,0.3,3.,-0.3);\n    \n\t\treturn sd;\n}\n\nvoid nm(){mat3 k=mat3(cp,cp,cp)-mat3(.001);cn=on=normalize(mp(cp)-vec3(mp(k[0]),mp(k[1]),mp(k[2])));cn=rot(cn,no);cn=dot(cn,-rd)>0.?cn:reflect(cn,rd);}\n  \n  \nvoid tr(vec4 i){for(li=cd=0.,md=64.;li+cd<i.x;li++,td+=sd*i.w){cd+=mp(cp=ro+on*i.y+(i.w>0.?rd:-ld)*cd)*i.z;if(sd<md&&cd<128.)md=sd;if(sd<(i.w>0.?1e-4:1e-2))break;}md/=.5;cp-=rd*.005;nm();}\nvoid tr(vec3 o, vec3 d){for(li=cd=0.;li<12.;li++){cd+=mp(o+d*cd);if(cd<1e-3||cd>32.)break;}}  \n \nvec3 tone(vec4 b, float d){\n  vec3 r=thsv(b.rgb);\n  r.z=decim(pow(max(b.w*r.z+vs.z,0.),vs.x)*vs.y-d,vs.w);\n  r.x+=pow(1.-min(r.z*0.5,1.),hs.x)*hs.y*(r.x>.19&&r.x<.69?1.:-1.);\n  r.y+=pow(1.-min(r.z*0.5,1.),hs.z)*hs.w;r.y*=2.-r.z;\n  return trgb(r);\n}\n\nvoid px(vec3 rd, int i)\n{\n  vec3 bg=cc.rgb=decim(vec3(0.2,0.5,0.2)-pow(length(uv),5.)*0.5,vs.w)*0.3;\n  \n  \n  \n\tif(cd<128.){\n    \n    \n    \n    cc.a=oa;ld=normalize(cp-lp);\n\tfloat df=max(dot(cn,-ld),0.),ps=pow(max(1.-length(cross(rd+ld,cn)),0.),sp.y)*sp.x,\n\tfo=exp(-pow(0.015*td,3.)),ao=0.,\n\tfr=max(pow(1.-abs(dot(rd,-cn)),3.),1e-4);vec3 sc=oc;float sh=0.;\n  if(sp.w>0.){tr(cp+on*0.005,on);ao=(1.-pow(clamp(cd/24.,0.,1.),0.1))*sp.w;}\n  if(sp.z>0.){tr(vec4(256,0.5,0.4,0.));sh=max(pow(1.-clamp(md,0.,1.),1.5),0.)*sp.z;}\n\n    \n\n  \n  cc.rgb=tone(vec4(sc+(fr*mix(cc.rgb,oc,0.))+ss,df+(ps*max(1.-sh,0.))+fr*0.5),sh+ao);\n  cc.rgb=mix(bg,cc.rgb,fo);\n\n     \n    }else {cc.a=1.;}cc.rgb+=gl;\n\tcc.rgb*=max(max(cc.r,max(cc.g,cc.b)),1.);\n}\n\nvec3 refracter(vec3 I, vec3 N, float ior)\n{\n    float k = 1.0 - ior * ior * (1.0 - dot(N, I) * dot(N, I));\n    \n    k = abs(k);\n    \n    if (k < 0.0)\n        return vec3(0);\n    else\n        return ior * I - (ior * dot(N, I) + sqrt(k)) * N;\n        \n}\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n  tt=mod(time, 100.);\n  \n  \n  vec2 pix = decim(uv, 100.);\n  vec2 id = vec2(h11(pix.x),h11(pix.y));\n\n  uv.x += (length(id)*sin(uv.y*30.+tt*h11(id.x)*5.))*id.x>0.2?0.03*pow(1.1-length(uv.y),5.):0.;\n\t\n  uv.x += fract(uv.y*0.53+tt*0.1)>0.5?0.05:0.;  \n    \n  uv*=1.-pow(length(uv),5.)*0.2;  \n    \n  ro=vec3(0,5,-20);\n  rd = normalize(vec3(uv, 1));\n  \n\tfor(int i=0;i<20;i++)\n  {\n\t\ttr(vec4(256,0,1,1));ro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n    if(io<0.)cr=reflect(rd,cn);px(rd, i);\n     if(length(cr)!=0.)rd=cr;\n        \n        \n\t\tif(sc<1) fc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;sc=sc==0?io<0.?0:sk:sc-1;\n  }\n  col=fc/fc.a;\n\t\n\tcol *= 1.-pow(length(uv), 1.)*0.8;\n\tcol = pow(col,vec4(0.9));\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(mod(float(iFrame), 60./FPS) < 1. || iFrame < 5) render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n    else fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//fps control for performance. Assumes the refresh rate of your monitor is 60hz\n//(120hz monitor set to 30 here will actually run at 60fps)\n#define FPS 60.\n\n#define decim(a, b) (floor((a)*(b))/(b))","name":"Common","description":"","type":"common"}]}