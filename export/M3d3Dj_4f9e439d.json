{"ver":"0.1","info":{"id":"M3d3Dj","date":"1717043726","viewed":67,"name":"Rainbow Neon Ripples","username":"dansh0","description":"Playing with simplex noise and how to manipulate it","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex"],"hasliked":0,"parentid":"lXdGDj","parentname":"Green Ripples"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Playing with noise, made something like ripples and had it vomit rainbow\n\n// ---------------------------------\n// Simplex Noise functions by iq https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n// -----------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // controls\n    vec3 colorStrengths = vec3(1.0, 1.0, 1.0); \n    float colorWhiteRatio = 0.5;\n    float size = .5;\n\n    // obtain position and uv\n    vec2 pos = (fragCoord/iResolution.xy);\n    vec2 uv1 = pos*vec2(iResolution.x/iResolution.y,1.0) + vec2(iTime*0.02,-(iTime)*0.012);\n    vec2 uv2 = pos*vec2(iResolution.x/iResolution.y,1.0) + vec2(iTime*0.01,(iTime)*0.016);\n    vec2 uv3 = pos*vec2(iResolution.x/iResolution.y,1.0) + vec2(iTime*0.015,(iTime)*0.014);\n\n\n    // get noise values\n    float modifier = 0.6;\n    float greenVal = modifier*noise(uv1*3./size)+modifier*noise(uv2*5./size);\n    float blueVal = modifier*noise(uv2*2./size)+modifier*noise(uv3*4./size);\n    float redVal = modifier*noise(uv3*5./size)+modifier*noise(uv1*4./size);\n   \n    // manipulate noise\n    float greenAbsVal = abs(greenVal);\n    float greenWhite = (1.-smoothstep(0.,0.1,greenAbsVal))*colorStrengths.g;\n    float green = (1.-smoothstep(0.,0.6,greenAbsVal))*colorStrengths.g*colorWhiteRatio;\n    float blueAbsVal = abs(blueVal);\n    float blueWhite = (1.-smoothstep(0.,0.1,blueAbsVal))*colorStrengths.b;\n    float blue = (1.-smoothstep(0.,0.6,blueAbsVal))*colorStrengths.b*colorWhiteRatio;\n    float redAbsVal = abs(redVal);\n    float redWhite = (1.-smoothstep(0.,0.1,redAbsVal))*colorStrengths.r;\n    float red = (1.-smoothstep(0.,0.6,redAbsVal))*colorStrengths.r*colorWhiteRatio;\n    float totalWhite = (greenWhite + blueWhite + redWhite)/3.;\n    \n    // Output to screen\n    vec3 col = vec3(totalWhite+red, totalWhite+green, totalWhite+blue);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}