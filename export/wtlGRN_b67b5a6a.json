{"ver":"0.1","info":{"id":"wtlGRN","date":"1555800895","viewed":322,"name":"Low Poly Summer Ride","username":"supervitas","description":"ride in low poly world :)","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["lowpoly"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: supervitas\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define AA 1\n#define MAX_MARCHING_STEPS 255\n#define MAX_DIST  250. // far\n#define EPSILON 0.01\n#define PI 3.1415926535\n\n#define TRUNK vec3(0.175,0.050,0.005)\n#define CAR_TIRES vec3(0.060,0.060,0.060)\n#define ROAD vec3(0.150,0.150,0.150)\n#define CAR_WINDOW vec3(0.505,0.540,0.510)\n#define ROAD_WIDTH 12.752\n#define TREES_ROAD_OFFSET_RIGHT ROAD_WIDTH + 2.\n#define SPEED 26.\n\n\nuniform float u_time;\n\n#define u_time iTime\n#define u_resolution iResolution\n\n\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat piramidSDF(vec3 p, vec3 size) {\n    vec3 ap = abs(p);\n    vec3 d = ap - size;\n    return max(dot(normalize(size), d), -p.y);\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h ) {\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdOctahedron(in vec3 p, in float s) {\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h ) {\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.)*k.xy;\n    vec2 d = vec2(length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n\n    return min(max(d.x,d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdPlane( vec3 p ) {return p.y;}\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec4 unionSDF(vec4 d1, vec4 d2) {\n    return (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nvec4 tree1(vec3 p, float randValue,  mat3 rotationLeaf) {\n  \tvec4 trunc = vec4(sdCappedCylinder((( p + vec3(0., -.5, 0)) ) , vec2(0.15, 2.) * randValue) , TRUNK);\n  \tvec4 leaf = vec4(sdOctahedron(((rotationLeaf * p + vec3(0., -4.5 * randValue, 0.)) ) , 3.120  * randValue ), vec3(0.129,0.420,0.207));           \n  \treturn unionSDF(trunc, leaf);\n}\n\nvec4 tree2(vec3 p, float randValue,  mat3 rotationLeaf) {\n \tvec4 trunc = vec4(sdCappedCylinder(((p + vec3(0., -.5, 0)) ) , vec2(0.5,2.990) * randValue), TRUNK);\n\tvec4 leaf = vec4(piramidSDF(rotationLeaf * p + vec3(0, -3.5 * randValue, 0.), vec3(1.6, 1.2, 1.5) * randValue), vec3(0.197,0.270,0.216));\n  \treturn unionSDF(trunc, leaf);\n}\n\nvec4 tree3(vec3 p, float randValue, mat3 rotationLeaf) {\n \tfloat scale = 1.1 * randValue;\n  \tvec4 trunc = vec4(sdCappedCylinder((((p + vec3(0., -1.5, 0)) ) ) , vec2(0.2,2.0) * scale), TRUNK);\n\tvec4 leaf = vec4(sdHexPrism(((rotationLeaf * p + vec3(0, -3.8 * scale, 0.5))), vec2(1.8, 1.5) * scale ), vec3(0.357,0.365,0.087));\n\treturn unionSDF(trunc, leaf);\n}\n\nvec4 tree4(vec3 p, float randValue, mat3 rotationLeaf) {\n    float scale = 1.3 * randValue;\n\tvec4 trunc = vec4(sdCappedCylinder((( p + vec3(0., -1.5, 0))), vec2(0.4,2.0) * scale), TRUNK);\n\tvec4 leaf = vec4(sdBox(((rotationLeaf  *  p + vec3(0., -4. *scale, 0.)) ) , vec3(1.5) * scale), vec3(0.690,0.402,0.247));\n\treturn unionSDF(trunc, leaf);\n}\n\nvec3 pModXZ(vec3 p, const in vec3 size) {\n  p.x = mod(p.x + size.x * 0.5, size.x) - size.x * 0.5;\n  p.z = mod(p.z + size.z * 0.5, size.z) - size.z * 0.5;\n  return p;\n}\n\nvec4 createTrees(vec3 samplePoint) {\n    vec3 domainRepition = pModXZ(vec3(samplePoint.x , samplePoint.y - 2.5, samplePoint.z + u_time * SPEED), vec3(8.5, 0., 25. ));   \n\n    vec3 tree1Repeat = domainRepition;\n    vec3 tree2Repeat = vec3(tree1Repeat.x - .1 , tree1Repeat.y, tree1Repeat.z + 7.5 );;\n    vec3 tree3Repeat = vec3(tree1Repeat.x - 1.7, tree1Repeat.y, tree1Repeat.z - 11.7);\n    vec3 tree4Repeat = vec3(tree1Repeat.x + 1.3, tree1Repeat.y, tree1Repeat.z - 6.5);\n    \n    float scaleDistance = min(1., (1.2 + -samplePoint.z * 0.02));\n    mat3 rotationLeaf = rotateY(PI * scaleDistance);\n    \n    vec4 tree1 = tree1(tree1Repeat, scaleDistance, rotationLeaf);\n    vec4 tree2 = tree2(tree2Repeat, scaleDistance, rotationLeaf);\n    vec4 tree3 = tree3(tree3Repeat, scaleDistance, rotationLeaf);\n    vec4 tree4 = tree4(tree4Repeat, scaleDistance, rotationLeaf);\n\n    return unionSDF(unionSDF(tree1, tree2), unionSDF(tree3, tree4));\n}\n\nvec4 createCar(vec3 p) {\n    float jumping = mix(0., .3, sin(u_time * 5.));\n    \n   \tvec4 car = vec4(sdBox(p + vec3(0., -2. - jumping, 0), vec3(2., 2., 3.9)), vec3(0.170,0.274,0.325));\n\tfloat subFront = sdBox(  p + vec3(0., -3. - jumping, -3.5), vec3(2.5, 1.3, 1.2));\n    float subBack = sdBox(  p + vec3(0., -3. - jumping, 3.5), vec3(2.5, 1.3, 1.2));\n    \n    car.x = opSubtraction(subFront, car.x);\n    car.x = opSubtraction(subBack, car.x);\n    \n    vec4 windowBack =  vec4(sdBox(p + vec3(0., -3. - jumping, 2.15), vec3(1.3, .43, 0.01)) - 0.21, CAR_WINDOW);\n    vec4 windowLeft =  vec4(sdBox(rotateY(-1.548) * p + vec3(0., -3. - jumping, 1.8), vec3(1.3, .43, 0.01)) - 0.3, CAR_WINDOW);\n    car = unionSDF(car, unionSDF(windowLeft, windowBack));\n\n    vec3 t = rotateZ(1.564) * p;\n   \n    vec3 wheelBackPosition = t + vec3(-0.2 - jumping * .5, .4 , 2.1);\n    vec3 wheelFrontPosition = t + vec3(-0.2 - jumping * .5, .4, -2.1);\n    \n    vec4 wheel = vec4(sdCappedCylinder(wheelBackPosition, vec2(1., 2.1)), CAR_TIRES);\n    vec4 wheel2 = vec4(sdCappedCylinder(wheelFrontPosition, vec2(1., 2.2)), CAR_TIRES);\n    \n    vec4 wheelWhite = vec4(sdCappedCylinder(wheelBackPosition, vec2(.4, 2.1)), vec3(1.));\n    vec4 wheelWhite2 = vec4(sdCappedCylinder(wheelFrontPosition, vec2(.4, 2.2)), vec3(1.));\n\n    return unionSDF(unionSDF(car, unionSDF(wheelWhite, unionSDF(wheel, wheel2))), unionSDF(car, unionSDF(wheelWhite, wheelWhite2)));\n}\n\nvec4 createFence(vec3 p) {\n    const vec3 pillarColor = vec3(0.235,0.188,0.202);\n        \n    vec4 pillar = vec4(sdBox(p + vec3(TREES_ROAD_OFFSET_RIGHT - 2., -.5, 0), vec3(.15, 2., 100.)), pillarColor);\n\tvec4 fence = vec4(sdBox(p + vec3(TREES_ROAD_OFFSET_RIGHT - 2., -2.5, 0), vec3(.25, 0.12, 100.)), pillarColor);\n    \n    vec4 pillarLeft = vec4(sdBox(p + vec3(-TREES_ROAD_OFFSET_RIGHT - 2., -.5, 0), vec3(.15, 2., 100.)), pillarColor);\n\tvec4 fenceLeft = vec4(sdBox(p + vec3(-TREES_ROAD_OFFSET_RIGHT - 2., -2.5, 0), vec3(.25, 0.12, 100.)), pillarColor);\n\n    float needsCut = step(mod(p.z + SPEED * u_time, SPEED), 0.5);\n    \n    pillar.x = mix(0.5, pillar.x, needsCut);\n    pillarLeft.x = mix(.5, pillarLeft.x, needsCut);\n    \n    return unionSDF(unionSDF(pillar, fence), unionSDF(pillarLeft, fenceLeft));\n}\n\nvec4 map(vec3 samplePoint) {    \n    float sizeOfLine = step(0., samplePoint.x) * step(samplePoint.x, 0.7)  // getting white line\n    * step( mod(samplePoint.z + SPEED * u_time , 16.), 6.6); // getting offset\n    \n    vec4 plane = vec4(sdPlane(samplePoint), mix(ROAD, vec3(1.0), sizeOfLine));\n    float insideRoad = step(-ROAD_WIDTH, samplePoint.x) * step(samplePoint.x, ROAD_WIDTH) ;\n    vec4 trees = vec4(1.);\n    \n    if (insideRoad == 0.) {\n        trees = createTrees(samplePoint);\n        plane.yzw = vec3(0.177,0.215,0.140);\n    }\n\n    vec4 car = createCar(samplePoint + vec3(6., -1.5, -2.5));\n    vec4 fence = createFence(samplePoint);\n        \n    return unionSDF(unionSDF(fence, trees), unionSDF(car, plane));\n}\n\nvec4 raymarsh(vec3 eye, vec3 marchingDirection) {\n    float depth = 0.0;\n\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec4 dist = map(eye + depth * marchingDirection);\n        if (dist.x < EPSILON) {\n\t\t\treturn vec4(depth, dist.yzw);\n        }\n        depth += dist.x;\n        if (depth >= MAX_DIST) {\n            return vec4(-1, vec3(0.0));\n        }\n    }\n\n    return vec4(-1, vec3(0.0));\n}\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)).x - map(vec3(p.x - EPSILON, p.y, p.z)).x,\n        map(vec3(p.x, p.y + EPSILON, p.z)).x - map(vec3(p.x, p.y - EPSILON, p.z)).x,\n        map(vec3(p.x, p.y, p.z  + EPSILON)).x - map(vec3(p.x, p.y, p.z - EPSILON)).x\n    ));\n}\n\nvec3 fresnel( vec3 F0, vec3 h, vec3 l ) {\n\treturn F0 + ( 1.0 - F0 ) * pow( clamp( 1.0 - dot( h, l ), 0.0, 1.0 ), 5.0 );\n}\n\nvec3 phongIllumination(vec3 p, vec3 dir) { \n    float dayCycle =  max(fract(u_time * 0.05 + .5), 0.) * 2. - 1.;\n    \n    vec3 Ks = vec3(0.425,0.425,0.425);\n    vec3 Kd = vec3(5.5);\n  \tvec3 n = getNormal(p);\n    \t\n\tvec3 ref = reflect( dir, n );\n\n    vec3 light_pos = mix( vec3(-100.0, 20.0 , 40.040 ), vec3(100.0, 200.0 , -40.040 ), 1. - abs(dayCycle));\n    vec3 lightPosNight = vec3(-100.0, 20.0 , 40.040 );\n\tvec3 light_color = mix(vec3(0.285,0.099,0.072), vec3(0.995,0.900,0.872), 1. - abs(dayCycle));\n\t\n\tvec3 vl = normalize(light_pos - p);\n\t\n\tvec3 diffuse  = Kd * vec3(max(0.0, dot( vl, n )));\n\tvec3 specular = vec3(max(0.0, dot(vl, ref)));\n\t\t\n    vec3 F = fresnel(Ks, normalize(vl - dir ), vl);\n\tspecular = pow(specular, vec3( 1.6 ) );\n      \n    return light_color * mix( diffuse, specular, F ) + light_color;\n}\n\nmat3 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\nvec3 render(vec2 p, vec2 uv) {\n    vec3 ro = mix(vec3(5.5, 22.5, -8.5), vec3(5.5, 20.5, -9.5), sin(u_time * 0.25));\n    \n    vec3 ta = normalize(vec3(-1.,-1.,-1.000));\n    mat3 ca = calcLookAtMatrix(ro, ta, 0.0);\n    vec3 rd = ca * normalize(vec3(p.xy, 1.2));\n    \n    vec4 scene = raymarsh(ro, rd);\n \tvec3 point = ro + scene.x * rd;\n    vec3 nor = getNormal(point);\n\n\treturn scene.yzw *= phongIllumination(point, rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / u_resolution.xy;\n#if AA>1\n    vec3 color = vec3(0.0);\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ ) {\n        vec2 px = fragCoord + vec2(float(m),float(n)) / float(AA);\n        vec2 p = (-u_resolution.xy+2.0*px) / u_resolution.y;\n    \tcolor += render( p, uv );    \n    }\n    color /= float(AA*AA);\n#else\n \tvec2 p = (-u_resolution.xy + 2.0*fragCoord) / u_resolution.y;\n    vec3 color = render(p, uv);\n#endif \n \n   \tcolor *= 0.25+0.334*pow( 16.0 * uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y), 0.3 ); // Vigneting\n    color = smoothstep(0., .7, color);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}