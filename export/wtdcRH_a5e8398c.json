{"ver":"0.1","info":{"id":"wtdcRH","date":"1613294886","viewed":61,"name":"OpenSimplex2 Noise experiment 2","username":"Baruch","description":"Uses 2 * OpenSimplex2  -> Color Gradients","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","opensimplex2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(float x)\n{\n    float clampToBlack = 3.0;\n\n    if(x < clampToBlack)\n        return 0.0;\n    \n    return (x - clampToBlack)*0.7;\n}\n\n\nfloat map(float value, float min1, float max1, float min2, float max2) \n{\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n// expected input value range 0 - 1\nvec3 colorGradient(float v, vec3 color0, vec3 color1, vec3 color2, float pos)\n{\n    vec3 mixed;\n    \n    if(v < pos)\n        mixed = mix(color0, color1, map(v, 0.0, pos, 0.0, 1.));\n    else\n        mixed = mix(color1, color2, map(v, pos, 1.0, 0.0, 1.));\n    \n    return mixed;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float scaleX = 12.0;\n    float scaleY = 12.0;\n    float speed = 0.25;\n    float t = iTime * speed;\n    \n    vec3 v = vec3(uv.x*scaleX, uv.y*scaleY, t);\n    vec3 v2 = vec3(uv.x*2000.0, uv.y*2000.0, t);\n    \n    // move it around\n    v = vec3(v.x + t, v.y + cos(t), v.z);\n    v2 = vec3(v2.x + t, v2.y + cos(t), v2.z);    \n    \n    vec4 c0 = bccNoisePlaneFirst(v);\n    vec4 c1 = bccNoisePlaneFirst(v2);    \n    \n    \n    vec4 color = c0;\n    float f = map((color.x + color.y + color.z) * 0.333, -2.0, 2.0, 0.3, 1.0);\n    \n    f = f * 0.5 + map((c1.x + c1.y + c1.z) * 0.333, -10.0, 5.0, 0.0, 0.5);\n        \n    vec3 color0 = vec3(0.0, .1, .1);\n    vec3 color1 = vec3(0.0, .9, .9);\n    \n    //float f = (sin(v.x*20.0) + cos(v.y * 20.0) + 1.0) / 2.0;\n    //f = f * sin(v.x) * cos(v.z);\n\n    vec3 mixed = mix(color0, color1, f);\n    //vec3 mixed = colorGradient(f, color0, color1, color0, .5);    \n    \n    //mixed = mix(mixed, color.rgb/2., 0.5);\n    \n    fragColor = vec4(mixed.rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// source: https://github.com/KdotJPG/OpenSimplex2/blob/master/glsl/bccNoise4Point.glsl\n/////////////// K.jpg's Simplex-like Re-oriented 4-Point BCC Noise ///////////////\n//////////////////// Output: vec4(dF/dx, dF/dy, dF/dz, value) ////////////////////\n\n// Inspired by Stefan Gustavson's noise\nvec4 permute(vec4 t) {\n    return t * (t * 34.0 + 133.0);\n}\n\n// Gradient set is a normalized expanded rhombic dodecahedron\nvec3 grad(float hash) {\n    \n    // Random vertex of a cube, +/- 1 each\n    vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n    \n    // Random edge of the three edges connected to that vertex\n    // Also a cuboctahedral vertex\n    // And corresponds to the face of its dual, the rhombic dodecahedron\n    vec3 cuboct = cube;\n    cuboct[int(hash / 16.0)] = 0.0;\n    \n    // In a funky way, pick one of the four points on the rhombic face\n    float type = mod(floor(hash / 8.0), 2.0);\n    vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n    \n    // Expand it so that the new edges are the same length\n    // as the existing ones\n    vec3 grad = cuboct * 1.22474487139 + rhomb;\n    \n    // To make all gradients the same length, we only need to shorten the\n    // second type of vector. We also put in the whole noise scale constant.\n    // The compiler should reduce it into the existing floats. I think.\n    grad *= (1.0 - 0.042942436724648037 * type) * 32.80201376986577;\n    \n    return grad;\n}\n\n// BCC lattice split up into 2 cube lattices\nvec4 bccNoiseBase(vec3 X) {\n    \n    // First half-lattice, closest edge\n    vec3 v1 = round(X);\n    vec3 d1 = X - v1;\n    vec3 score1 = abs(d1);\n    vec3 dir1 = step(max(score1.yzx, score1.zxy), score1);\n    vec3 v2 = v1 + dir1 * sign(d1);\n    vec3 d2 = X - v2;\n    \n    // Second half-lattice, closest edge\n    vec3 X2 = X + 144.5;\n    vec3 v3 = round(X2);\n    vec3 d3 = X2 - v3;\n    vec3 score2 = abs(d3);\n    vec3 dir2 = step(max(score2.yzx, score2.zxy), score2);\n    vec3 v4 = v3 + dir2 * sign(d3);\n    vec3 d4 = X2 - v4;\n    \n    // Gradient hashes for the four points, two from each half-lattice\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);\n    \n    // Gradient extrapolations & kernel function\n    vec4 a = max(0.5 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaaa = aa * aa;\n    vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y);\n    vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n    \n    // Derivatives of the noise\n    vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations)\n        + mat4x3(g1, g2, g3, g4) * aaaa;\n    \n    // Return it all as a vec4\n    return vec4(derivative, dot(aaaa, extrapolations));\n}\n\n// Use this if you don't want Z to look different from X and Y\nvec4 bccNoiseClassic(vec3 X) {\n    \n    // Rotate around the main diagonal. Not a skew transform.\n    vec4 result = bccNoiseBase(dot(X, vec3(2.0/3.0)) - X);\n    return vec4(dot(result.xyz, vec3(2.0/3.0)) - result.xyz, result.w);\n}\n\n// Use this if you want to show X and Y in a plane, and use Z for time, etc.\nvec4 bccNoisePlaneFirst(vec3 X) {\n    \n    // Rotate so Z points down the main diagonal. Not a skew transform.\n    mat3 orthonormalMap = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626);\n    \n    vec4 result = bccNoiseBase(orthonormalMap * X);\n    return vec4(result.xyz * orthonormalMap, result.w);\n}\n\n//////////////////////////////// End noise code ////////////////////////////////","name":"Common","description":"","type":"common"}]}