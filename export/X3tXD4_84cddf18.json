{"ver":"0.1","info":{"id":"X3tXD4","date":"1719047164","viewed":45,"name":"sunrise water","username":"toasted","description":"sunrise water","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Ray Marched Water Shader with Sunset Sky for ShaderToy\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define TIME iTime * 0.3\n\n// Sun parameters\n#define SUN_POSITION normalize(vec3(0.8, 0.2, 0.3))\n#define SUN_SIZE 0.005\n#define SUN_COLOR vec3(1.0, 0.7, 0.4)\n\n// Noise functions\nfloat hash(float n) { return fract(sin(n) * 43758.5453); }\n\nfloat noise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 157.0 + 113.0 * p.z;\n    return mix(\n        mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n            mix(hash(n + 157.0), hash(n + 158.0), f.x), f.y),\n        mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n            mix(hash(n + 270.0), hash(n + 271.0), f.x), f.y), f.z);\n}\n\nfloat fbm(vec3 p) {\n    float f = 0.0;\n    float amplitude = 0.5;\n    float frequency = 1.0;\n    for (int i = 0; i < 5; i++) {\n        f += amplitude * noise(frequency * p);\n        amplitude *= 0.5;\n        frequency *= 2.0;\n    }\n    return f;\n}\n\n// Water height function\nfloat waterHeight(vec2 p) {\n    float height = 0.0;\n    height += fbm(vec3(p * 0.1, TIME * 0.5)) * 0.5;\n    height += fbm(vec3(p * 0.2, TIME * 0.7)) * 0.25;\n    height += fbm(vec3(p * 0.4, TIME * 0.9)) * 0.125;\n    return height;\n}\n\n// Signed Distance Function for water surface\nfloat sdWater(vec3 p) {\n    float h = waterHeight(p.xz);\n    return p.y - h;\n}\n\n// Ray marching function\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = sdWater(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    return dO;\n}\n\n// Normal calculation\nvec3 getNormal(vec3 p) {\n    float d = sdWater(p);\n    vec2 e = vec2(0.01, 0);\n    vec3 n = d - vec3(\n        sdWater(p - e.xyy),\n        sdWater(p - e.yxy),\n        sdWater(p - e.yyx)\n    );\n    return normalize(n);\n}\n\n// Sunset sky color function\nvec3 getSkyColor(vec3 rd) {\n    // Horizon colors\n    vec3 horizon = vec3(0.9, 0.6, 0.4);\n    vec3 zenith = vec3(0.3, 0.5, 0.7);\n    \n    // Blend horizon and zenith based on view direction\n    float t = pow(1.0 - max(rd.y, 0.0), 4.0);\n    vec3 skyColor = mix(zenith, horizon, t);\n    \n    // Add sun\n    float sunIntensity = max(0.0, dot(rd, SUN_POSITION));\n    vec3 sunColor = SUN_COLOR * pow(sunIntensity, 1000.0);\n    sunColor += SUN_COLOR * pow(sunIntensity, 100.0) * 0.3;\n    \n    // Add subtle clouds\n    vec2 cloudUV = rd.xz / (rd.y + 0.1);\n    float clouds = fbm(vec3(cloudUV * 2.0, TIME * 0.1)) * 0.5 + 0.5;\n    clouds = smoothstep(0.4, 0.6, clouds);\n    \n    // Combine sky, sun, and clouds\n    return skyColor + sunColor + vec3(0.1) * clouds;\n}\n\n// Main image function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 3, -3);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    vec3 col = vec3(0.1, 0.2, 0.3);  // Darker base water color for sunset\n    \n    if(d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        vec3 lightDir = SUN_POSITION;\n        \n        // Diffuse lighting\n        float diff = dot(n, lightDir);\n        diff = diff * 0.5 + 0.5;  // Adjust for softer lighting\n        col = mix(col, SUN_COLOR, diff * 0.3);\n        \n        // Specular highlight\n        vec3 reflectDir = reflect(-lightDir, n);\n        float spec = pow(max(dot(rd, reflectDir), 0.0), 32.0);\n        col += SUN_COLOR * spec * 0.5;\n        \n        // Fresnel effect\n        float fresnel = pow(1.0 - max(dot(n, -rd), 0.0), 5.0);\n        vec3 skyCol = getSkyColor(reflect(rd, n));\n        col = mix(col, skyCol, fresnel * 0.8);\n        \n        // Fake caustics\n        float caustic = fbm(vec3(p.xz * 0.5, TIME * 2.0));\n        col += SUN_COLOR * caustic * (1.0 - fresnel) * 0.2;\n    } else {\n        // Render sky if ray doesn't hit water\n        col = getSkyColor(rd);\n    }\n    \n    // Apply simple atmosphere effect\n    col = mix(col, getSkyColor(rd), 1.0 - exp(-0.005 * d));\n    \n    // Enhance colors for sunset look\n    col = pow(col, vec3(0.8)); // Increase contrast\n    col *= 1.2; // Boost overall brightness\n    \n    // Gamma correction\n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}