{"ver":"0.1","info":{"id":"lfBXWd","date":"1706988809","viewed":96,"name":"Smooth Life Convolution","username":"afmika","description":"Simple shader implementing Rafler's paper","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["convolution","gameoflife","cellularautomata","smoothlife","smoothlife"],"hasliked":0,"parentid":"MffXWl","parentname":"Smooth Life Naive Convolution"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 zoom(vec2 uv) {\n    float zoom = 0.5 + 0.5 * sin(iTime / 10.);\n    vec2 scale = vec2(0.5);\n    return (uv - scale) * max(0.2, zoom) + scale;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = zoom(uv);\n    fragColor = texture(iChannel0, uv);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float randBW(vec2 co) {\n\n    return (fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453) > 0.5) ? 1. : 0.;\n}\n\n\n#define NEW_COL iChannel0\n#define SELF iChannel1\n#define TEST_INIT iChannel2\n\nbool cooldown() {\n    int frame = 100;\n    return iFrame % 10 == 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color = vec4(0.);\n    if (iFrame > 4) { // small delay\n        int fcount = 1;\n        bool retexture = 0 == iFrame % fcount;\n        if (retexture) {\n            color = texture(NEW_COL, uv);\n        } else {\n            // do nothing\n            color = texture(SELF, uv);\n        }\n    } else {\n       // init\n       // custom image\n       // color = texture(TEST_INIT, uv);\n       // color = vec4(length(fwidth(step(0.5, texture(TEST_INIT, uv)))));\n       // noise\n       color = vec4(1.) * randBW(fragCoord);\n    }\n    fragColor = color;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define STORAGE_BUFF iChannel0\n\n// Conway's Game Of Life derivation for 1px\n// const float Rout = 1.,/*kernel*/rho = 0.5, omega = 0.15,/*delta*/mu = 0.15, sigma = 0.017, /*time*/ dt = 0.1;\n\n// Smooth life\nconst float Rout = 4.,/*kernel*/rho = 0.5, omega = 0.15,/*delta*/mu = 0.14, sigma = 0.014, /*time*/ dt = 0.1;\n\n\nfloat bell(float x, float c, float w) {\n    return exp(-(x-c)*(x-c)/(2.*w*w));\n}\n\nfloat kernel(float x) {\n    // Plot2d := kernel(x) + kernel(x + rho)\n    return bell(x, rho, omega);\n}\n\nfloat delta(float x) {\n    return 2. * bell(x, mu, sigma) - 1.;\n}\n\nfloat f(vec2 coord) {\n    vec4 col = texture(STORAGE_BUFF, coord / iResolution.xy);\n    return (col.r + col.g + col.b) / 3.;\n}\n\nfloat growth(vec2 p) {\n    // convolve\n    float ds = 0., total = 0.;\n    for (int dx = -int(Rout); dx <= int(Rout); dx += 1) {\n        for (int dy = -int(Rout); dy <= int(Rout); dy += 1) {\n            vec2 u = vec2(dx, dy);\n            float r = length(u) / Rout;\n            float ku = kernel(r);\n            ds += ku * f(p + u);\n            total += ku;\n        }\n    }\n    ds = ds / total;\n    // df(p)/dt\n    return delta(ds);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float next = clamp(\n        f(fragCoord) + growth(fragCoord) * dt,\n        0.,\n        1.\n    );\n    // float next = f(fragCoord);\n    fragColor = vec4(next, next, next, fragColor.a);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}