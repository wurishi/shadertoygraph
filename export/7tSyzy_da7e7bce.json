{"ver":"0.1","info":{"id":"7tSyzy","date":"1649965033","viewed":92,"name":"MirrorExp","username":"Uffe55","description":"Mirror box through second box","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mirror","copy","rot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI2 = 6.28318\n\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nfloat sdBox(vec3 p, vec3 s) \n{\n\n   float angle;\n   angle = iTime; \n   float d1,d2,d3;\n  vec3 p1,p2,p3;\n   p1 = p ;\n   //p1.x+=2.0;\n   p1.xz *= Rot(angle*0.3);\n   p1.yz *= Rot(angle*0.5);\n   p1.xy *= Rot(-angle);\n \n   p2 = p1;\n   p3 = p1;\n   \n   p1= abs(p1)-s;\n  \n   d1=length(max(p1, 0.))+min(max(p1.x, max(p1.y, p1.z)), 0.);\n \n   \n   p2.y += 1.50;\n   p2.z += 2.5;\n   p2.x += 2.0;\n   p2.yz *= Rot(iTime*0.5);\n   p2.xz *= Rot(iTime*0.25);  \n   p2.xy *= Rot(iTime);\n \n   p2= abs(p2)-s;\n   d2 = length(max(p2, 0.))+min(max(p2.x, max(p2.y, p2.z)), 0.);\n    \n    \n    p3.y += -1.50;\n    p3.z += 2.5;\n   p3.x += 2.0;\n   p3.yz *=Rot(-iTime*0.5);\n   p3.xz *= Rot(iTime*0.25);  \n   p3.xy *= Rot(-iTime);\n \n   p3= abs(p3)-s;\n   d3 = length(max(p3, 0.))+min(max(p3.x, max(p3.y, p3.z)), 0.);\n \n    return min(d3, min(d1,d2));\n}\t\n\nfloat GetDist(vec3 p) {\n\n    float d = sdBox(p, vec3(.4,.07,1.2));\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        d = normalize( c + uv.x*r + uv.y*u);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0.0, 3.0, -14.0);\n    ro.yz *= Rot(-m.y*2.9+1.2);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.5);\n    vec3 col = vec3(0.); \n    //fragColor =texture(iChannel2,uv);  \n    col=vec3(.25,.25,.45);      //texture(iChannel1,rd  ).rgb;\n    \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n  \n        float dif = dot(n, normalize(vec3(-3,4,1)))*.5+.5;\n      //abs(n)*dif;//\n        col = vec3(dif);\n        col = pow(col, vec3(.44545));\n   }\n   \n    fragColor = vec4(col,1.0);\n    \n    \n   \n}","name":"Image","description":"","type":"image"}]}