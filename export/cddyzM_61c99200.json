{"ver":"0.1","info":{"id":"cddyzM","date":"1694859317","viewed":26,"name":"suttree","username":"suttree","description":"Before the gatekeepers decide we can't have fun anymore. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["prototype"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 0.7, 0.4);\n    vec3 d = vec3(0.00, 0.15, 0.20);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 uv0 = uv;\n    \n    uv *= 3.; // zoom out\n    \n    vec2 gv = fract(uv)-.5; // create grid vector and offset origin to center\n    vec2 id = floor(uv); // an id for each box in the grid\n    \n    vec2 gv0 = gv;\n    \n    vec3 col = palette(length(gv) - iTime*.25);\n    gv *= .3;\n\n    // use gv rather than uv to reference each box in the grid\n    float d = length(gv);\n    float m = .02/d;\n    col += m;\n    \n    float rays = max(0., 1.-abs(gv.x*gv.y*1000.));\n    col += rays;\n    \n    uv *= Rot(3.1475/4.);\n    rays = max(0., 1.-abs(gv.x*gv.y*1000.));\n    col += rays*.3; // dimmer \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}