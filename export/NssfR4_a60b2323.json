{"ver":"0.1","info":{"id":"NssfR4","date":"1644556803","viewed":114,"name":"NoiseDistorted circleSDF","username":"mulletdulla","description":"a circle SDF distoted with animating noise","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noisesdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GLSLIFY 1\n#define GLSLIFY 1\nvec2 hash(vec2 p) // replace this by something better\n\n{\n    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\n\nfloat noise(in vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n    vec2  i = floor(p + (p.x + p.y) * K1);\n    vec2  a = p - i + (i.x + i.y) * K2;\n    float m = step(a.y, a.x);\n    vec2  o = vec2(m, 1.0 - m);\n    vec2  b = a - o + K2;\n    vec2  c = a - 1.0 + 2.0 * K2;\n    vec3  h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n    vec3  n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n    return dot(n, vec3(70.0));\n}\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c)\n{\n    float j = 4096.0 * sin(dot(c, vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0 * j);\n    j *= .125;\n    r.x = fract(512.0 * j);\n    j *= .125;\n    r.y = fract(512.0 * j);\n    return r - 0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 = 0.3333333;\nconst float G3 = 0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p)\n{\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n    \n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0 * G3;\n    vec3 x3 = x - 1.0 + 3.0 * G3;\n    \n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n    \n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n    \n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n    \n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0));\n}\n\nfloat simplexNoise3d(vec3 uvz)\n{\n    // NOISE\n    float f = simplex3d(uvz);\n    f = 0.5 * f + 0.5;\n    // f = (f + 1.) * .5;\n    f = smoothstep(0., 1., f);\n\n    return f;\n}\n\nfloat simplexNoise3d(vec2 uv, float freq, float z)\n{\n    // NOISE\n    vec3 uvz = vec3(uv * freq, z);\n\n    return simplexNoise3d(uvz);\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85, -0.14, -0.93, 0.34, 0.92, 0.01, 0.4);\nconst mat3 rot2 = mat3(-0.55, -0.39, 0.74, 0.33, -0.91, -0.24, 0.77, 0.12, 0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52, -0.47, -0.08, -0.72, -0.68, -0.7, -0.45, 0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m)\n{\n    return 0.5333333 * simplex3d(m * rot1)\n    + 0.2666667 * simplex3d(2.0 * m * rot2)\n    + 0.1333333 * simplex3d(4.0 * m * rot3)\n    + 0.0666667 * simplex3d(8.0 * m);\n}\n#define GLSLIFY 1\nfloat vec2Length(vec2 value)\n{\n    return sqrt(dot(value, value));\n}\n\nfloat SDF_2D_Circle(float radius, float fade, vec2 pos, vec2 coord)\n{\n    vec2 vecToCentre = coord - pos;\n    float dist = vec2Length(vecToCentre);\n    float min = radius - fade;\n    float max = radius + fade;\n    float circle = smoothstep(min, max, dist);\n\n    return circle;\n}\n\nfloat SDF_2D_Line(vec2 p, vec2 a, vec2 b)\n{\n    vec2 da = p - a;\n    vec2 db = p - b;\n\n    return 0.0;\n}\n#define GLSLIFY 1\nvec3 cubeGrid[27] = vec3[27]\n(\n    vec3(-1, -1, -1),\n    vec3(0, -1, -1),\n    vec3(1, -1, -1),\n    vec3(-1, 0, -1),\n    vec3(0, 0, -1),\n    vec3(1, 0, -1),\n    vec3(-1, 1, -1),\n    vec3(0, 1, -1),\n    vec3(1, 1, -1),\n    vec3(-1, -1, 0),\n    vec3(0, -1, 0),\n    vec3(1, -1, 0),\n    vec3(-1, 0, 0),\n    vec3(0, 0, 0),\n    vec3(1, 0, 0),\n    vec3(-1, 1, 0),\n    vec3(0, 1, 0),\n    vec3(1, 1, 0),\n    vec3(-1, -1, 1),\n    vec3(0, -1, 1),\n    vec3(1, -1, 1),\n    vec3(-1, 0, 1),\n    vec3(0, 0, 1),\n    vec3(1, 0, 1),\n    vec3(-1, 1, 1),\n    vec3(0, 1, 1),\n    vec3(1, 1, 1)\n);\n\nstruct Disc\n{\n    vec3 p;\n    float s;\n};\n\nstruct Ray\n{\n    vec3 o;\n    vec3 d;\n    vec3 invD;\n    int sign[3];\n};\n\nstruct Sphere\n{\n    bool hit;\n    vec3 pos;\n    vec3 albedo;\n    float radius;\n    float specularity;\n};\n\nstruct Box\n{\n    bool hit;\n    vec3 pos;\n    vec3 albedo;\n    vec3 scale;\n    vec3 rotation;\n    vec3 hitPos;\n    vec3 normal;\n    float specularity;\n};\n\nstruct Light\n{\n    vec3 pos;\n    vec3 col;\n    float attenuation;\n    float intensity;\n};\n\nvoid InitializeScreenSpace(vec2 fragCoord, inout vec2 uv)\n{\n    uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n}\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p)\n{\n    vec3 rop = (p - ro);\n    return length(cross(rop, rd)) / length(rd);\n}\n\nfloat DrawDisc(Disc d, Ray r)\n{\n    float radius = 1. - DistLine(r.o, r.d, d.p) / d.s;\n    return smoothstep(0.0, .05, radius);\n}\n\nvec3 LightTrace(vec3 normal, vec3 intersection, Light light)\n{\n    Ray r;\n    r.o = intersection;\n    r.d = normalize(light.pos - r.o); //\n\n    float nDotL = dot(normal, r.d);\n    vec3 lambert = nDotL * light.col;\n\n    return vec3(lambert);\n}\n\nbool SphereInterection(Ray r, Sphere s, inout vec3 hit, inout vec3 normal)\n{\n    float t = dot(s.pos - r.o, r.d);\n    if (t < 0.)  return false; // make sure we are not using casts in the opposite direction\n\n    vec3 p = r.o + r.d * t;\n\n    float y = length(s.pos - p);\n    if (y < s.radius)\n    {\n        float x = sqrt(s.radius * s.radius - y * y);\n        float t1 = t - x;\n        float t2 = t + x;\n\n        hit = r.o + r.d * t1;\n        normal = normalize(hit - s.pos);\n\n        return true;\n    }\n}\n\nvoid InitializeSphere(inout Sphere sphere)\n{\n\n}\n#define GLSLIFY 1\nconst float M_PI = 3.14159265358979323846264338327950288;\nconst float M_PI_2 = 6.28318530718;\n\nfloat mod01(float value)\n{\n    return mod(value, 1.0);\n}\n\nfloat loopTime(float speed)\n{\n    return mod01(iTime * speed);\n}\n\nfloat loopTime(float speed, float duration)\n{\n    return mod(iTime * speed, duration);\n}\n\nfloat sinTime(float speed)\n{\n    return sin(iTime * speed);\n}\n\nfloat cosTime(float speed)\n{\n    return cos(iTime * speed);\n}\n\nfloat easeOutCubic(float value)\n{\n    return 1.0 - pow(1.0 - value, 3.0);\n}\n\nfloat timeSpeed = .75;\nfloat timeDuration = 6.0;\nfloat circleRadius = 0.23;\nfloat circleFade = .2;\nfloat noiseFreq = 6.;\nvec2 circlePos = vec2(0.0);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Pixel color\n    vec3 col = vec3(1.);\n\n    vec2 uv;\n    InitializeScreenSpace(fragCoord, uv);\n    \n    // time\n    float noiseSpeed = iTime * 1.;\n    \n    // noise\n    float noise = simplexNoise3d(uv, noiseFreq, noiseSpeed);\n\n    //circle\n    float circle_xPos = circlePos.x + sinTime(timeSpeed) * 0.25;\n    vec2 animatedCirclePos = vec2(circle_xPos, circlePos.y);\n    \n    float circle = SDF_2D_Circle(circleRadius, circleFade * noise, circlePos, uv);\n\n    // i only want noise on the edges...\n    // lets work this out next!\n\n    noise -= circle;\n    noise = clamp(noise, 0., 1.);\n    // final color\n    col = clamp(vec3(noise), 0., 1.);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}