{"ver":"0.1","info":{"id":"ctGGWt","date":"1684831410","viewed":97,"name":"Rounded Box SDF extended","username":"sasa42","description":"Original:\nhttps://www.shadertoy.com/view/Nlc3zf\nDistance function for a rounded box (where the size of the box is not affected by the corner radius) extended with trans and shear for the box.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","rectangle","distance","box","rect","rounded","primitive","shear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Variables with initial values\nvec2 trans = vec2(0.1, 0.1);\nvec2 halfSize = vec2(0.7, 0.4);\nfloat cornerRadius = 0.00;\nvec2 shear = vec2(0.0,0.25);\n\n// Box function that takes in a position, half size, corner radius, and shear values\nfloat box(vec2 position, vec2 halfSize, float cornerRadius, vec2 shear) \n{\n    // Applies the shear transformation to the position\n    position.xy = mat2(1.0, shear.x, shear.y, 1.0) * (position.xy - trans);\n\n    // Calculates the distance from the position to the edges of the box\n    position.xy = abs(position.xy) - halfSize + vec2(cornerRadius);\n\n    return length(max(position, 0.0)) + min(max(position.x, position.y), 0.0) - cornerRadius;\n}\n\n// Main function that sets color based on distance from box edges\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    // Calculates position space based on screen coordinates\n    vec3 position = vec3((2.0 * fragCoord - iResolution.xy) / iResolution.y, 0.0);\n\n    // Calculates distance from position to box edges with the shear transformation applied\n    float d = box(position.xy, halfSize, cornerRadius, shear);\n\n    // Applies colorization based on distance\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7); // base color\n    color *= 1.0 - exp(-4.0 * abs(d)); // gradient\n    color *= 0.8 + 0.2 * cos(120.0 * d); // ripples\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.003) * iResolution.y));\n\n    // If the mouse is clicked, applies a new color based on distance from mouse position\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        // Calculates distance from mouse position to box edges with the shear transformation applied\n        float d = box(mousePosition, halfSize, cornerRadius, shear);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position.xy - mousePosition) - abs(d)) * iResolution.y - 1.0));\n}\n\n    // Sets the final color of the pixel\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}