{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"/**\n * Created by Kamil Kolaczynski (revers) - 2014\n\n * Modified version of shader \"abstarct\" ( https://www.shadertoy.com/view/4sSGDd ) by avix.\n */\n#define NEAR 0.0\n#define FAR 50.0\n#define MAX_STEPS 64\n\n#define PI 3.14159265359\n#define EPS 0.001\n\n// Hash by iq\nfloat hash(vec2 p) {\n\tfloat h = 1.0 + dot(p, vec2(127.1, 311.7));\n\treturn fract(sin(h) * 43758.5453123);\n}\n\nfloat rbox(vec3 p, vec3 s, float r) {\n\treturn length(max(abs(p) - s + vec3(r), 0.0)) - r;\n}\n\nvec2 rot(vec2 k, float t) {\n\tfloat ct = cos(t);\n\tfloat st = sin(t);\n\treturn vec2(ct * k.x - st * k.y, st * k.x + ct * k.y);\n}\n\nvoid oprep2(inout vec2 p, float q, float s, float k) {\n\tfloat r = 1.0 / q;\n\tfloat ofs = s;\n\tfloat angle = atan(p.x, p.y);\n\tfloat a = mod(angle, 2.0 * PI * r) - PI * r;\n\tp.xy = vec2(sin(a), cos(a)) * length(p.xy) - ofs;\n\tp.x += ofs;\n}\n\nfloat map(vec3 p) {\n\tp.y -= 1.0;\n\tp.xy = rot(p.xy, p.z * 0.15);\n\tp.z += iTime;\n\tp.xy = mod(p.xy, 6.0) - 0.5 * 6.0;\n\tp.xy = rot(p.xy, -floor(p.z / 0.75) * 0.35);\n\tp.z = mod(p.z, 0.75) - 0.5 * 0.75;\n\toprep2(p.xy, 6.0, 0.45, iTime);\n\n\treturn rbox(p, vec3(0.1, 0.025, 0.25), 0.05);\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat h = 0.0001;\n\n\treturn normalize(\n\t\t\tvec3(map(p + vec3(h, 0, 0)) - map(p - vec3(h, 0, 0)),\n\t\t\t\t\tmap(p + vec3(0, h, 0)) - map(p - vec3(0, h, 0)),\n\t\t\t\t\tmap(p + vec3(0, 0, h)) - map(p - vec3(0, 0, h))));\n}\n\nfloat saw(float x, float d, float s, float shift) {\n\tfloat xp = PI * (x * d + iTime * 0.5 + shift);\n\n\tfloat as = asin(s);\n\tfloat train = 0.5 * sign(sin(xp - as) - s) + 0.5;\n\n\tfloat range = (PI - 2.0 * as);\n\txp = mod(xp, 2.0 * PI);\n\tfloat y = mod(-(xp - 2.0 * as), range) / range;\n\ty *= train;\n\n\treturn y;\n}\n\nvec3 getShading(vec3 p, vec3 normal, vec3 lightPos) {\n\tvec3 lightDirection = normalize(lightPos - p);\n\tfloat lightIntensity = clamp(dot(normal, lightDirection), 0.0, 1.0);\n\n\tvec2 id = floor((p.xy + 3.0) / 6.0);\n\tfloat fid = hash(id);\n\tfloat ve = hash(id);\n\n\tvec3 col = vec3(0.0, 1.0, 0.0);\n\tcol *= 4.0 * saw(p.z, 0.092, 0.77, fid * 2.5);\n\n\tvec3 amb = vec3(0.15, 0.2, 0.32);\n\tvec3 tex = vec3(0.8098039, 0.8607843, 1.0);\n\n\treturn col * tex * lightIntensity + amb * (1.0 - lightIntensity);\n}\n\nvoid raymarch(vec3 ro, vec3 rd, out int i, out float t) {\n\tt = 0.0;\n\n\tfor (int j = 0; j < MAX_STEPS; ++j) {\n\t\tvec3 p = ro + rd * t;\n\t\tfloat h = map(p);\n\t\ti = j;\n\n\t\tif (h < EPS || t > FAR) {\n\t\t\tbreak;\n\t\t}\n\t\tt += h * 0.7;\n\t}\n}\n\nfloat computeSun(vec3 ro, vec3 rd, float t, float lp) {\n\tvec3 lpos = vec3(0.0, 0.0, 54.0);\n\tro -= lpos;\n\tfloat m = dot(rd, -ro);\n\tfloat d = length(ro - vec3(0.0, 0.0, 0.7) + m * rd);\n\n\tfloat a = -m;\n\tfloat b = t - m;\n\tfloat aa = atan(a / d);\n\tfloat ba = atan(b / d);\n\tfloat to = (ba - aa) / d;\n\n\treturn to * 0.15 * lp;\n}\n\nvec3 computeColor(vec3 ro, vec3 rd) {\n\tint i;\n\tfloat t;\n\traymarch(ro, rd, i, t);\n\n\tfloat lp = sin(iTime - 1.0) + 1.3;\n\tvec3 color = vec3(0.0, 1.0, 0.0);\n\n\tif (i < MAX_STEPS && t >= NEAR && t <= FAR) {\n\t\tvec3 p = ro + rd * t;\n\t\tvec3 normal = getNormal(p);\n\n\t\tfloat z = 1.0 - (NEAR + t) / (FAR - NEAR);\n\n\t\tcolor = getShading(p, normal, vec3(0.0));\n\t\tcolor *= lp;\n\n\t\tfloat zSqrd = z * z;\n\t\tcolor = mix(vec3(0.0), color, zSqrd * (3.0 - 2.0 * z)); // Fog\n\n\t\tcolor += computeSun(ro, rd, t, lp);\n\t\treturn pow(color, vec3(0.8));\n\t}\n\treturn color * computeSun(ro, rd, t, lp);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 coord = 2.0 * q - 1.0;\n\tcoord.x *= iResolution.x / iResolution.y;\n\tcoord *= 0.84;\n\n\tvec3 dir = vec3(0.0, 0.0, 1.0);\n\tvec3 up = vec3(0.0, 1.0, 0.0);\n\n\tvec3 right = normalize(cross(dir, up));\n\n\tvec3 ro = vec3(0.0, 0.0, 8.74);\n\tvec3 rd = normalize(dir * 2.0 + coord.x * right + coord.y * up);\n\tvec3 col = computeColor(ro, rd);\n\n\tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xs2SWd","date":"1417264962","viewed":9766,"name":"abstract_mod","username":"revers","description":"Playing a little bit with shader [url=https://www.shadertoy.com/view/4sSGDd]\"abstract\"[/url] by avix","likes":75,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarch"],"hasliked":0,"parentid":"","parentname":""}}