{"ver":"0.1","info":{"id":"XlXXzs","date":"1438814232","viewed":1672,"name":"Mobius Hearts","username":"XMunkki","description":"Base model for a physical 3D printed object for my 8th wedding anniversary gift.\n\nhttp://xmunkki.org/wiki/doku.php?id=projects:mobiushearts","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["distancefields","3dprinting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//\n// See the finished object and more information at:\n//    http://xmunkki.org/wiki/doku.php?id=projects:mobiushearts\n//\n// Based on Inigo Quilez raymarching tutorial at https://www.shadertoy.com/view/Xds3zN\n\n#define PI 3.14159265\n\nfloat sdPlane(vec3 p, float h)\n{\n\treturn p.y - h;\n}\n\nfloat sdCylinderY(vec3 p, vec2 h)\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCylinderZ(vec3 p, vec2 h)\n{\n  vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(d1, -d2);\n}\n\nfloat opU(float d1, float d2)\n{\n    return min(d1, d2);\n}\n\nfloat sminPoly( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat opBlend(float d1, float d2)\n{\n    return sminPoly(d1, d2, 0.05);\n}\n\n// With extra information\nvec2 opU2( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\n//----------------------------------------------------------------------\n// Transforms on position to affect the model\n\nvec3 posTranslate(vec3 p, vec3 offset)\n{\n    return p - offset;\n}\n\nvec3 posAxisAngle(vec3 p, vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    angle = -angle; // Inverse rotation for distance fields\n    \n    float c = cos(angle);\n    float s = sin(angle);\n    \n    return\n        c * p +\n        s * cross(axis, p) +\n        ((1.0 - c) * dot(axis, p)) * axis;\n}\n\n//----------------------------------------------------------------------\n\nfloat sdCircle(vec3 p, float radius, float thickness, float width)\n{\n    float t_half = thickness * 0.5;\n\n    float res = sdCylinderZ(p, vec2(radius + t_half, width * 0.5));\n    res = opS(res, sdCylinderZ(p, vec2(radius - t_half, width)));\n    return res;\n}\n\nfloat sdCircleRound(vec3 p, float radius, float thickness, float width)\n{\n    float t_half = thickness * 0.5;\n\n    // Get the direction and center point for the circle border (z = 0)\n    vec2 border_dir = normalize(p.xy);\n\tvec2 border_center = border_dir * radius;\n    \n    // Get the position of the projected 2D coordinate\n    vec2 proj_pos = vec2(length(p.xy - border_center), p.z);\n    \n    // Calculate the rounded box distance\n    float roundness = 0.02;\n    vec2 box_size = vec2(t_half, width * 0.5);\n    box_size = box_size.yx;\n    return length(max(abs(proj_pos) - box_size, 0.0)) - roundness;\n}\n\nfloat sdCircleTopTwist(vec3 p, float radius, float thickness, float width, bool twist_orient_dir)\n{\n    // Do a half twist at the top\n    if (p.y > 0.0)\n    {\n        vec3 twist_dir = normalize(vec3(p.x, p.y, 0.0));\n        vec3 twist_center = twist_dir * radius;\n        \n        float amt_dir = dot(twist_dir, p - twist_center);\n        float amt_z = p.z;\n\n        // Map the angle range to a half twist\n        float angle = atan(p.x, p.y);\n        float angle_range = 0.5;\n        angle_range = clamp((angle + angle_range) / (angle_range * 2.0), 0.0, 1.0);\n        angle_range = smoothstep(0.0, 1.0, angle_range);\n        angle = mix(0.0, (twist_orient_dir ? PI : -PI), angle_range);\n        \n        // Rotate the position along the twist position on the ring\n        float as = sin(angle);\n        float ac = cos(angle);\n        \n        float amt_a = ac * amt_dir - as * amt_z;\n        float amt_b = ac * amt_z + as * amt_dir;\n        \n        vec3 new_p = twist_center +\n            twist_dir * amt_a +\n            vec3(0.0, 0.0, amt_b);\n        \n        // If still above, keep the rotation\n        if (new_p.y > 0.0)\n            p = new_p;\n        \n        //p.y -= abs(p.x) * 1.5;\n    }\n    \n    float res = sdCircleRound(p, radius, thickness, width);\n    return res;\n}\n\nfloat sdHeartOrigin(vec3 p, bool twist_dir)\n{\n    // Do a heart shape\n    p.y -= pow(abs(p.x), 1.3) * 1.3;\n    \n    return sdCircleTopTwist(p, 0.5, 0.1, 0.15, twist_dir);\n}\n\nfloat sdHeart(vec3 p, bool twist_dir)\n{\n    p = posTranslate(p, vec3(0.0, 0.6, 0.0));\n    p = posAxisAngle(p, vec3(1.0, 0.0, 0.0), -0.35); // Tilt (major)\n    p = posAxisAngle(p, vec3(0.0, 0.0, 1.0), 0.15); // Tilt (side)\n    p = posTranslate(p, vec3(-0.15, 0.0, 0.04));\n    float res = sdHeartOrigin(p, twist_dir);\n    return res;\n}\n\nfloat sdHearts(vec3 p)\n{\n    // Mirror by x axis\n    vec3 p2 = vec3(-p.x, p.y, -p.z);\n    \n    return opU(sdHeart(p, false), sdHeart(p2, true));\n}\n\nfloat sdPlatform(vec3 p)\n{\n    float res = sdCylinderY(p, vec2(0.6, 0.1));\n    res -= 0.07; // Soft edges\n    \n    return res;\n}\n\nfloat sdObject(vec3 p)\n{\n    float res = sdPlatform(p);\n    res = opBlend(res, sdHearts(p));\n    res = opS(res, sdPlane(p, 0.0)); // Cut out anything that goes through the platform\n    return res;\n}\n\n//----------------------------------------------------------------------\n\nvec2 map(in vec3 pos)\n{\n    vec2 res = vec2(sdPlane(pos, 0.0), 1.0);\n\n    //res = opU2(res, vec2(sdCylinderY(pos - vec3(0,0.6,0), vec2(0.5, 0.5)), 2.0));\n    //res = opU2(res, vec2(sdCylinderZ(pos - vec3(0,0.6,0), vec2(0.5, 0.5)), 2.0));\n    //res = opU2(res, vec2(sdCircleRound(pos - vec3(0,0.6,0), 0.5, 0.1, 0.1), 128.0));\n    //res = opU2(res, vec2(sdHeartOrigin(pos - vec3(0,0.6,0), false), 128.0));\n    res = opU2(res, vec2(sdObject(pos), 128.0));\n    \n    // More accuracy (substepping)\n    res.x *= 0.5;\n    \n    return res;\n}\n\nvec2 castRay(in vec3 ro, in vec3 rd)\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<200; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( abs(res.x)<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow(in vec3 ro, in vec3 rd, in float mint, in float tmax)\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{ \n    vec3 col = vec3(0.8, 0.9, 1.0);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5+3.2*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x) );\n    ro *= 0.7;\n\tvec3 ta = vec3(0.0, 0.8, 0.0); //vec3( -0.5, -0.4, 0.5 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.5) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}