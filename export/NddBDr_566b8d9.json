{"ver":"0.1","info":{"id":"NddBDr","date":"1656354914","viewed":107,"name":"Pinocchio","username":"vladimir_azarov_onu","description":"pinocchio","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["figures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define d2(x) ((x)*(x))\n\nconst float eps = 6e-5;\n\nstruct Circle {\n    vec2 center;\n    float radius;\n    float wh;\n    uvec3 color;\n};\n\nstruct Triangle {\n    vec2 p1, p2, p3;\n    uvec3 color;\n};\n\nstruct Rect {\n    vec2 lp;\n    float w, h;\n    uvec3 color;\n};\n\nRect ra[] = Rect[](\n    Rect(vec2(0.314, 0.4), 0.025, 0.3, uvec3(203, 175, 106))\n);\n\nCircle ca[] = Circle[](\n    Circle(vec2(0.3, 0.5), 0.08, 1.0, uvec3(211, 198, 120)), /* Head */\n    Circle(vec2(0.314, 0.44), 0.03, 1.0, uvec3(207, 144, 112)),\n    \n    Circle(vec2(0.302, 0.9), 0.03, 1.0, uvec3(163, 27, 33)), /* Hat */\n    \n    Circle(vec2(0.343, 0.53), 0.02, 1.0, uvec3(0)), /* Eye */\n    Circle(vec2(0.3, -0.1), 0.2, 2.0, uvec3(162, 28, 32)), /* Body */\n    Circle(vec2(0.37, 0.16), 0.015, 2.0, uvec3(255)), /* buttons */\n    Circle(vec2(0.385, 0.1), 0.015, 2.0, uvec3(255)),\n    Circle(vec2(0.393, 0.03), 0.015, 2.0, uvec3(255)),\n    \n    Circle(vec2(0.33, 0.36), 0.1, 1.0, uvec3(255)) \n);\n\n\nTriangle ta[] = Triangle[](\n    Triangle(vec2(0.36, 0.48), vec2(0.33, 0.52), vec2(0.64, 0.50), uvec3(211, 179, 118)), /* Nose */\n    Triangle(vec2(0.235, 0.6), vec2(0.37, 0.6), vec2(0.302, 0.9), uvec3(182, 31, 38)), /* Hat */\n    Triangle(vec2(0.302, 0.9), vec2(0.25, 0.6), vec2(0.27, 0.6), uvec3(212, 31, 38)),\n    Triangle(vec2(0.364, 0.415), vec2(0.369, 0.419), vec2(0.35, 0.44), uvec3(0, 0, 0)) /* Mouse */\n);\n\n    bool isin_circle(vec2 p, Circle c)\n    {\n        float cof = iResolution.y / iResolution.x;\n         return d2((p.x - c.center.x)*c.wh) + d2((p.y - c.center.y)* cof) < d2(c.radius);\n    }\n\n    bool isin_circf(vec2 p, Circle c)\n    {\n        float cof = iResolution.y / iResolution.x;\n         return abs(d2((p.x - c.center.x)*c.wh)\n                 + d2((p.y - c.center.y)* cof)- d2(c.radius)) < eps;\n    }\n\n            float higher(vec2 p, vec2 lp1, vec2 lp2)\n            {\n                float xc = (p.x - lp1.x) / (lp2.x - lp1.x);\n                float yc = (p.y - lp1.y) / (lp2.y - lp1.y);\n                 return xc - yc;\n            }\n\n        bool are_on_same_side(vec2 p1, vec2 p2, vec2 lp1, vec2 lp2)\n        {\n            return higher(p1, lp1, lp2) * higher(p2, lp1, lp2) > 0.0;\n        }\n\n    bool isin_triangle(vec2 p, Triangle t)\n    {\n        return are_on_same_side(p, t.p1, t.p2, t.p3) && are_on_same_side(p, t.p2, t.p1, t.p3) &&\n                are_on_same_side(p, t.p3, t.p1, t.p2);\n    }\n    \n    bool isin_rect(vec2 p, Rect r)\n    {\n        float w2 = r.w / 2.0;\n        float h2 = r.h / 2.0;\n         return abs(p.x - r.lp.x + w2) < w2 && abs(p.y - r.lp.y + h2) < h2;\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(vec3(uvec3(239, 225, 190))/255.0, 1.0);\n    int i;\n    \n     if (isin_triangle(uv, ta[0]))\n       fragColor = vec4(vec3(ta[0].color)/255.0, 1.0);\n     \n      if (isin_rect(uv, ra[0]))\n        fragColor = vec4(vec3(ca[i].color)/255.0, 1.0);\n       for (i = 0; i < 3; ++i) {\n         if (isin_circle(uv, ca[i]))\n           fragColor = vec4(vec3(ca[i].color)/255.0, 1.0);\n       }\n    \n        for (i = 0; i < 3; ++i) {\n          if (isin_triangle(uv, ta[i+1]))\n            fragColor = vec4(vec3(ta[i+1].color)/255.0, 1.0);\n        }\n    \n         if (isin_circf(uv, ca[3]) && higher(uv, vec2(0.0, 0.5), vec2(0.625, 0.54)) > 0.0)\n           fragColor = vec4(vec3(ca[3].color)/255.0, 1.0);\n\n          if (isin_circle(uv, ca[2]))\n            fragColor = vec4(vec3(ca[2].color)/255.0, 1.0);\n            \n           if (abs(uv.y - 0.6) < 0.01 && (uv.x >= 0.235 && uv.x <= 0.37))\n             fragColor = vec4(vec3(uvec3(163, 27, 33)) / 255.0, 1.0);\n            if (isin_circle(uv, ca[4])) {\n              fragColor = vec4(vec3(ca[4].color)/255.0, 1.0);\n               \n             for (i = 5; i <= 8; ++i) {\n               if (isin_circle(uv, ca[i]))\n                 fragColor = vec4(vec3(ca[i].color)/255.0, 1.0);\n               }\n             }\n               \n            \n}","name":"Image","description":"","type":"image"}]}