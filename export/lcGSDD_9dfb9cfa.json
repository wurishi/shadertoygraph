{"ver":"0.1","info":{"id":"lcGSDD","date":"1715176578","viewed":38,"name":"Psychedelic Waffle","username":"dereckd","description":"explorations into simple shadeers ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["color","gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (0 to 1 range)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Center coordinates (-1 to 1 range)\n    vec2 p = uv * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y; // Maintain aspect ratio\n\n    float scrollSpeed = 1.0;         // Speed of wave movement over time\n    float waveFrequency = 5.0;       // Frequency of wave pattern (higher = denser)\n    float colorWaveMultiplier = 3.0; // Multiplier for color wave variation\n    float colorOffsetMultiplier = 3.0; // Multiplier for additional color offset\n\n    // Calculate the wave pattern using the sine and cosine functions\n    float wavePattern = sin(waveFrequency * p.x - iTime * scrollSpeed) * \n                        cos(waveFrequency * p.y + iTime * scrollSpeed);\n\n    // Generate a color gradient based on the wave pattern\n    vec3 col = vec3(\n        0.5 + 0.5 * sin(iTime + wavePattern * colorWaveMultiplier),\n        0.5 + 0.5 * cos(iTime + wavePattern * colorWaveMultiplier),\n        0.5 + 0.5 * sin(iTime * 0.5 + wavePattern * colorOffsetMultiplier)\n    );\n\n    // Output the final pixel color\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}