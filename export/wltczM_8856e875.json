{"ver":"0.1","info":{"id":"wltczM","date":"1608734903","viewed":223,"name":"Buggy Waves","username":"darkeclipz","description":"after spending an hour to get the height right for the bars with subdividing the space (line 29), i give up. gonna look at it later to see how to fix it","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 1.\n#define R iResolution.xy\n\nmat2 rot(float a) {\n\tfloat c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 opRepLim(in vec3 p, in float c, in vec3 l)\n{\n    vec3 q = p-c*clamp(round(p/c),-l,l);\n    return q;\n}\n\nvec2 map( in vec3 pos, float time )  \n{\n    // Outer box\n    float id = 0.;    \n    float t = iTime;\n    \n\n    vec3 rpos = opRepLim(pos + vec3(0, 0.5, 0), 0.025, vec3(16.0, 0.05, 16.0));\n    float rep = 36.;\n    vec2 xy = floor(pos.xz * rep) / rep; // incorrect but i give up\n    float h = 0.03*sin(16.*sqrt(dot(xy,xy))+fract(t)*3.1415*2.);\n    \n    float box = sdBox(rpos, vec3(0.005, 0.1+h, 0.005));\n\n   \n    // Floor\n    float floorPlane = pos.y + 0.5;\n    float d = min(box, floorPlane);\n    if(floorPlane < box) {\n    \tid = 1.;    \n    }\n\n    return vec2(d, id);\n}\n\nvec3 calcNormal( in vec3 pos, float t ) \n{\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize( vec3(map(pos+e.xyy,t).x-map(pos-e.xyy,t).x,\n                           map(pos+e.yxy,t).x-map(pos-e.yxy,t).x,\n                           map(pos+e.yyx,t).x-map(pos-e.yyx,t).x ) );\n}\n\nfloat castShadow( in vec3 ro, vec3 rd, float time )\n{\n    float res = 1.0;\n    float t = 0.01;\n    for( int i=0; i< 100; i++ )\n    {\n        vec3 pos = ro + t*rd;\n        float h = map( pos, time ).x;\n        res = min( res, 16.0*h/t );\n        if ( res<0.0001 ) break;\n        t += h;\n        if( t > 10.0 ) break;\n    }\n\n    return clamp(res,0.0,1.0);\n} \n\nvec3 castRay( in vec3 ro, vec3 rd, float time )\n{\n    float m = -1.0;\n    float t = 0.01;\n    int i=0;\n    for( i=0; i<60; i++ )\n    {\n        float precis = 0.0001 * t;\n        vec3 pos = ro + t*rd;\n\n        vec2 h = map( pos, time );\n        m = h.y;\n        if( h.x< precis )\n            break;\n        t += h.x;\n        if( t>20.0 )\n            break;\n    } \n    if( t>20.0 ) m=-1.0;\n    return vec3(t, m, 1. - float(i)/60.);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    float time = iTime/4.;\n\n    vec3 col = vec3(0);\n    vec3 res = vec3(0);\n    \n    for(float aax=0.; aax < AA; aax++)\n    for(float aay=0.; aay < AA; aay++)\n    {\n        vec2 p = (2.*(U + vec2(aax, aay) / AA)-R)/R.y;\n        \n        vec3 ta = vec3(0,-0.5,0);\n        vec3 ro = vec3(0, 0.3 + (-sin(2.+time) * .5 + .5) * 0.2, -1.);\n        ro.xz *= rot(cos(2.*3.1415*time/2.)*0.4 + 3.*3.1415/4.);\n        \n        vec3 ww = normalize( ta-ro );\n        vec3 uu = normalize( cross(ww, vec3(0,1,0)) );\n        vec3 vv = normalize( cross(uu,ww) );\n\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n \n        vec3 col = vec3(0.0);\n\n        vec3 tm = castRay(ro, rd, time); \n\n        if( tm.x < 20. )\n        {\n            float t = tm.x;\n            float id = tm.y;\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos, time);\n            \n            vec3 mate = vec3(0.6); \n            \n            if(id < 0.5) { // box\n            \tmate = vec3(191, 222, 245)/255.;     \n               \n            }\n            else if(id < 1.5) { // floor\n            \tmate = vec3(67, 122, 161) / 255.;   \n                float s = 8.;\n                float w = 0.025;\n                \n                if(fract(pos.x*s) < w) {\n                \tmate *= 0.9;\n                }\n                \n                if(fract(pos.z*s) < w) {\n                \tmate *= 0.9;    \n                }\n            }\n\n            vec3  light1 = vec3( 0, 0.2, 1 );\n            vec3  light2 = vec3( 1, 3, 1 );\n\n            float key = clamp( dot( light1, nor ), 0.0, 1.0 );\n            float bac = clamp( 0.2 + 0.8*dot( light2, nor ), 0.0, 1.0 );\n            float amb = (0.7+0.3*nor.y);\n            float shadow = clamp(castShadow(pos + nor*0.05, light1 - pos, time), 0., 1.);\n            \n            vec3 brdf  = 1.0*vec3(0.40,0.40,0.40)*amb*shadow;\n            brdf += 1.0*vec3(255, 248, 230)/255.*key*tm.z*shadow;\n            brdf += 1.0*vec3(230, 248, 255)/255.*bac*tm.z;\n\n            col = mate * brdf * exp(-0.6*t);\n        }\n\n        res += clamp(col, 0.0, 1.0);\n    }\n\n    col = pow( res/(AA*AA), vec3(0.4545) );\n    \n    O = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}