{"ver":"0.1","info":{"id":"Ws3fzS","date":"1605440145","viewed":127,"name":"Please check your receiver!!!","username":"piootrek","description":"Please check your receiver!!! Glitched tv test signal.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["glitchedtvtestsignalcolorsgridcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader under CC BY 3.0 license\n// Created by piootrek / Piotr Ruszkowski\n\nfloat hash21(vec2 coord)\n{\n \treturn fract(sin(coord.x * 1.152 * cos(coord.y) * 4125.125) * 32.1254124523 + cos( iTime * 235.235 + coord.y * 1266.23462347));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n   \tfloat glitch_envelope = step(cos(iTime * 3.50 + sin(iTime * 0.24)), 0.3) - cos(iTime * 0.02) + sin(iTime * 0.25 + 3.14/3.); \n\n\tuv.x += step(glitch_envelope, 0.8) * sin(iTime) * 0.04;\n    uv.y += step(glitch_envelope + sin(iTime*0.004), 0.73) * ( 0.003 * cos(uv.x * 24.4221442 + iTime * 0.3) + sin(uv.x * 10. + iTime * 1000.4214) * 0.02);\n    // noise\n    vec3 noise = vec3(hash21(uv));\n    \n    // circle compose\n    float circle_shape = step(distance(uv, vec2(0.0)), 0.95);\n    vec3 stripes = step(distance(uv.x, -0.8), 0.2) * vec3(1.,0.,0.) + \n        \t\t   step(distance(uv.x, -0.4), 0.2) * vec3(0.,1.,0.) +\n                   step(distance(uv.x, 0.0), 0.2) * vec3(0.,1.,1.) + \n        \t\t   step(distance(uv.x, 0.4), 0.2) * vec3(1., 1., 0.) +\n    \t\t\t   step(distance(uv.x, 0.8), 0.2) * vec3(1., 0., 1.);\n    float grad_axis = uv.x + 0.5;\n\tvec3 gradient = vec3(cos(grad_axis * 3.), sin(grad_axis * 3.), -cos(grad_axis * 3.));\n    \n    vec3 ends = vec3(1.0, 1.0, 0.0) * (1. - step(distance(uv.y, 0.0), 0.7));\n    vec3 bw_stripes = vec3(sin(uv.x * 20.) > 0.0 ? vec3(0.75) : vec3(0.)) * step(distance(uv.y, 0.55), 0.15);\n    vec3 color_bar = stripes * step(distance(uv.y, 0.25), 0.15);\n    vec3 grad_bar = gradient * step(distance(uv.y, -0.25), 0.15);\n    vec3 bw_grad = vec3((uv.x + 0.75) * 0.60) * step(distance(uv.y, -0.55), 0.15);\n    vec3 stripe_bar = vec3(1.) * step(distance(fract(sin(uv.x * 1.2) * 20.), 0.0), 0.1) * step(distance(uv.y, 0.), 0.1);\n    vec3 test_circle = circle_shape * (color_bar + bw_stripes + bw_grad + grad_bar + ends + stripe_bar + step(distance(uv.y, 0.0), 0.005));\n    \n    // grid\n\tvec3 grid = step(distance(fract(uv.x * 10.), 0.), 0.05) * vec3(1.) + step(distance(fract(uv.y * 10.), 0.), 0.05) * vec3(1.);\n    \n    vec3 test_signal = vec3((1.0 - circle_shape) * grid + test_circle);\n\tfragColor = vec4(mix(noise, test_signal, glitch_envelope), 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}