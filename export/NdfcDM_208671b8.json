{"ver":"0.1","info":{"id":"NdfcDM","date":"1642145633","viewed":272,"name":"Vintage Sound Visualisation","username":"SadTShaders","description":"It actually does not visualize any audio track. It uses combined sine waves to visualise imaginary beat.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["music","sin","audio","old","vintage","gird","soundvisualisation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader is inspired by one I did at work. We needed some audio visualisation decoration.\n// Because of some technical obstacles, there was no time to code frequency sampling system,\n// so I came up with this shader. It fakes sound visualisation, by simply adding some sinewaves together.\n// I was surprised how well it fit music in game.\n\n// Whole shader is branchless.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //I prefer y flipped for this shader, so its same as in Unreal Engine\n    uv.y = 1. - uv.y;\n    \n    //cell size here\n    vec2 uvModulo = mod(uv, vec2(.04, .05)); \n    vec2 griddedUV = uv - uvModulo;\n    \n    // 2 sine waves combined into vec2\n    vec2 heightOfBar = vec2(iTime* 5.0) / vec2(-2.5, 5.);\n    heightOfBar += vec2(5., 2.) * vec2(griddedUV.r * 5.);\n    heightOfBar = sin(heightOfBar);\n    //\n    \n    //central gradient creation\n    float centralGradient = griddedUV.r * (1. - griddedUV.r) * 1.8;\n    //\n    \n    float wavesWithGradient = heightOfBar.g * centralGradient;\n    \n    float bothWaysWave = wavesWithGradient + heightOfBar.r * griddedUV.r * 0.3 + 0.4;\n    \n    //displacement over beat\n    float displacementOverBeat = sin(iTime) + sin(7. * iTime) + 1.8;\n    displacementOverBeat /= 4.;\n    displacementOverBeat = 1. - displacementOverBeat;\n    //\n    \n    //patern and grid masks\n    vec2 gridMask = vec2(griddedUV.g + .01, min(uvModulo.r, uvModulo.g));\n    vec2 patternMask = vec2(bothWaysWave + displacementOverBeat, 0.01);\n    \n    vec2 masksCombined = gridMask - patternMask;\n    //\n    \n    //getting rid of midtones, I want just bit mask\n    masksCombined *= 999999.0; \n    masksCombined = clamp(masksCombined, 0., 1.);\n    //\n    \n    //coloring\n    vec3 bottomColor = vec3(0.035601, 1., 0.141263);\n    vec3 topColor = vec3(0.520996, 0.01033, 0.028426);\n    \n    vec3 color = mix(topColor, bottomColor, griddedUV.g);\n    //\n\n    // Output to screen\n    fragColor = vec4(color * masksCombined.g * masksCombined.r, 1.);\n}","name":"Image","description":"","type":"image"}]}