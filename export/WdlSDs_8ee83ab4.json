{"ver":"0.1","info":{"id":"WdlSDs","date":"1552646283","viewed":107,"name":"Diffuse Sphere Intersection","username":"PhiWei","description":"A simple ray intersection with a diffuse sphere.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sphere","diffuse","rayintersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n*   Intersection with a sphere centered at origin\n**/\nfloat intersectWithSphere(in vec3 ro , in vec3 wd){\n    // Sphere centered at (0,0,0) radius\n    float R = 1.0;\n\t\n    // b²- 4*a*c : a is 1 since direction is normalized\n    float b = 2.0 * dot(wd, ro);\n    float c = dot(ro.xyz, ro)- R*R;\n\n    float delta = b*b - 4.0*c;\n\n\tif(delta > 0.0)\n        return (-b + sqrt(delta)) * 0.5;\n    else if(delta == 0.0)\n        return -b * 0.5;\n    else\n        return -1.0; // \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightColor = vec3(1.0,1.0,1.0);\n    float ambientStrength = 0.1;\n    vec3 ambient = ambientStrength * lightColor;\n\n    vec3 albedo = vec3(0.7,0.5,0.0);\n    //pixel coordinates from 0 to 1\n\tfloat aspectRatio = iResolution.x/iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Ray origin\n    vec4 ro = vec4(0.0, 0.0, 2.0, 1.0);\n    // Ray direction going inside screen\n    vec3 wd = normalize(vec3((-1.0 + 2.0 * uv) * vec2(aspectRatio, 1.0) , -1)); \n\n    // get distance to first intersection\n    float t = intersectWithSphere(ro.xyz,wd);\n    // normalize distance\n    \n    //point light source\n    vec3 pls = vec3(-5.0*cos(iTime),5.0*sin(iTime),-5.0*sin(iTime));\n\n    vec3 color;\n\n    // Output to screen a lambertian diffuse material simulation Incident Light Energy ∗ cos(theta)\n    if(t > 0.0){\n        vec3 its = ro.xyz + wd * t;\n        // calculate normal at intersection\n\n        float cosTheta = dot(normalize(its),normalize(pls-its));\n        vec3 diffuse = lightColor * max(0.0,cosTheta);\n\n        color = (diffuse + ambient)*albedo;\n    \n    }else{\n        color = vec3(0.2);\n    }\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}