{"ver":"0.1","info":{"id":"M3j3Wc","date":"1709001465","viewed":252,"name":"God Rays Text Effect","username":"Handolf","description":"A simple God Rays Image Effect. Change the light position with the mouse.","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["2d","text","lighting","effect","godrays","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LIGHT_SOURCE_TEXTURE iChannel0\n#define GOD_RAYS_TEXTURE iChannel1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //normalized\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //output\n    fragColor = texture(GOD_RAYS_TEXTURE, uv);\n    fragColor += texture(LIGHT_SOURCE_TEXTURE, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/****************\n*\n*Light source\n*\n****************/\n\n#define CHARSET_TEXTURE iChannel0\n\nvec3 drawChar(vec2 uv, int char)\n{\n    //16x16 characters\n    vec2 uvText = (uv + vec2(char % 16, 15 - char / 16))/16.;\n    \n    vec3 col = (uv.x >= 0. && uv.x <= 1. && uv.y >= 0. && uv.y <= 1.)? vec3(texture(CHARSET_TEXTURE, uvText).r) : vec3(0.0);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRaito = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.y;\n    \n    //centralized uv\n    uv -= vec2(0.5 - (1.-aspectRaito) * 0.5, 0.5);\n    \n    \n    vec3 col = vec3(0.0);\n    \n    \n    float textSize = 0.2;\n    const int stringLength = 9;\n    int string[stringLength];\n    string[0] = 83;\n    string[1] = 104;\n    string[2] = 97;\n    string[3] = 100;\n    string[4] = 101;\n    string[5] = 114;\n    string[6] = 116;\n    string[7] = 111;\n    string[8] = 121;\n    \n    //wirite text\n    for(int i = 0; i < stringLength; i++)\n    {\n        vec2 uvChar = uv * 1./textSize;//scale text\n        uvChar += vec2(0.75 + 0.5 * float(stringLength-1)/2., 0.5); //centralize text\n        uvChar.x -= 0.5 * float(i);\n        col += drawChar(uvChar, string[i]);\n    }\n    \n   \n    //time varying pixel color\n    col *= 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        \n        \n    //output\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/**************\n*\n* Blur Pass\n*\n***************/\n\n#define LIGHT_SOURCE_TEXTURE iChannel0\n\n//from: https://www.shadertoy.com/view/Xltfzj\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 3.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 8.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    vec4 Color = texture(iChannel0, uv);\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor += texture( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i);\t\t\n        }\n    }\n    \n    // Output to screen\n    Color /= Quality * Directions - 15.0;\n    fragColor =  Color;\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/****************\n*\n*God Rays\n*\n****************/\n\n//uniforms\n#define DECAY     0.94\n#define DENSITY   0.82\n#define WEIGHT    0.5\n#define EXPOSURE  0.3\n#define SAMPLES_COUNT   64\n\n#define LIGHT_SOURCE_TEXTURE iChannel0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //normalized\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col;\n    \n    vec2 ligthPos = (iMouse.xy == vec2(0.))? vec2(0.5) : iMouse.xy/iResolution.xy;\n    vec2 delta = uv - ligthPos;\n    delta *= 1.0 /  float(SAMPLES_COUNT) * DENSITY;\n    \n    float illuminationDecay = 1.0;    \n    \n    for(int i = 0; i < SAMPLES_COUNT; i++)\n    {\n        uv -= delta;\n\t\tvec4 samp = texture(LIGHT_SOURCE_TEXTURE , uv)*0.4;\n\t\tsamp *= illuminationDecay * WEIGHT;\n\t\tcol += samp.rgb;\n\t\tilluminationDecay *= DECAY;\n    }\n    \n    col *= EXPOSURE;\n    \n    //output\n    fragColor = vec4(col,1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}