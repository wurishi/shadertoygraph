{"ver":"0.1","info":{"id":"3dj3WR","date":"1548607573","viewed":64,"name":"Learning Ray tracing","username":"TarunChand","description":"I am a beginner trying to make a raytracer. Any advice will be highly appreciated. Thank you.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray{\n\tvec3 origin;\n    vec3 direction;\n};\n      \nstruct Camera{\n\tvec3 position;\n    vec3 forwardVector;\n    vec3 upVector;\n    vec3 rightVector;\n};\n      \nstruct Plane{\n\tvec3 normal;\n    float distanceFromOrigin;\n    vec3 colour;\n};\n    \nstruct Sphere{\n\tvec3 center;\n    float radius;\n    vec3 colour;\n};\n\nbool IntersectsPlane(Plane p, Ray r, out float t){\n\tfloat denominator = dot(r.direction, p.normal);\n    if(denominator != float(0)){\n    \tfloat potentialT = (dot(((p.normal*p.distanceFromOrigin) - r.origin),p.normal))/denominator;\n        if(potentialT > float(0)){\n        \tt = potentialT;\n            return true;\n        }\n    }\n    return false;\n    \n}\n\nbool IntersectsSphere(Sphere s, Ray ray, out float t){\n    vec3 l = ray.direction;\n    vec3 o = ray.origin;\n    vec3 c = s.center;\n    float r = s.radius;\n    \n    float discriminant = ((float(2) * dot(l, (o - c))) * (float(2) * dot(l, (o - c)))) - (float(4) * length(l)*length(l) * (length(o - c))*(length(o - c)) - (r*r));\n    if(discriminant <float(0)){\n        t = float(-1);\n    \treturn false;\n    }    \n    else{\n        float potentialT;\n    \tt = ((-float(2) * dot(l, (o-c))) - discriminant)/(float(2)*length(l)*length(l));\n        return true;\n    }\n}\n\n//==============================================================================    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0, 0, 0);\n    //--------------------------------------------------------------------------\n\tuv.x -= 0.5;\n    uv.y -= 0.5;\n    \n    float xAmount = uv.x * tan(0.785)*float(2);\n    float yAmount = uv.y * tan(0.785)*float(2);\n    \n    //initialize plane:\n    Plane plane1;\n    plane1.normal = vec3(0, 1, 0);\n    normalize(plane1.normal);\n    plane1.distanceFromOrigin = float(1);\n    plane1.colour = vec3(0.3, 0.3, 0.3);\n    \n    //initialize sphere:\n    Sphere sphere1;\n    sphere1.center = vec3(0, 1, 0);\n    sphere1.radius = float(1);\n    sphere1.colour = vec3(1, 0, 0);\n    \n    //initialize camera:\n    Camera cam;\n    cam.position = vec3(0, 2, -2);\n    cam.forwardVector = vec3(0, 0, 1);\n    cam.upVector = vec3(0, 1, 0);\n    cam.rightVector = cross(cam.forwardVector, cam.upVector);\n    \n    //initialize ray:\n    Ray camRay;\n    camRay.origin = cam.position;\n    camRay.direction = cam.forwardVector + (cam.upVector * yAmount) + (cam.rightVector * xAmount);\n    \n    float distanceOfNearestObject = 1000000.0;\n    float distanceOfPlane;\n    float distanceOfSphere;\n    \n    col = vec3(0.8, 0.8, 0.8);\n    \n    if(IntersectsSphere(sphere1, camRay, distanceOfSphere)){\n        if(distanceOfSphere < distanceOfNearestObject){\n        \tdistanceOfNearestObject = distanceOfSphere;\n            col = sphere1.colour;\n        }\n    }\n    \n    if(IntersectsPlane(plane1, camRay, distanceOfPlane)){\n        if(distanceOfPlane < distanceOfNearestObject){\n        \tdistanceOfNearestObject = distanceOfPlane;\n            col = plane1.colour;\n        }\n    }\n    //--------------------------------------------------------------------------\n    fragColor = vec4(col,1.0);\n}\n//==============================================================================    \n","name":"Image","description":"","type":"image"}]}