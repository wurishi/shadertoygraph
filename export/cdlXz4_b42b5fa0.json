{"ver":"0.1","info":{"id":"cdlXz4","date":"1668631337","viewed":237,"name":"Webcam: Movement - halo","username":"stephan","description":"Move your body and see it light up","likes":3,"published":1,"flags":34,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = 1.0 - uv.x;\n    \n    vec4 cam_color = texture(iChannel1, uv);\n    vec4 buffer_color = texture(iChannel0, uv);\n    \n    fragColor = cam_color + cam_color * buffer_color.a; //cam_color * (1.0 - buffer_color.a) + buffer_color * buffer_color.a;\n    fragColor.x = fragColor.x * (1.0 + buffer_color.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float get_diff(vec4 color1, vec4 color2){\n    return (abs(color1.x-color2.x) + abs(color1.y-color2.y) + abs(color1.z-color2.z)) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 cam_color = texture(iChannel0, uv);\n    vec4 own_buffer_a = texture(iChannel1, uv);\n    \n    fragColor = vec4(cam_color.x, cam_color.y, cam_color.z, get_diff(cam_color, own_buffer_a));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 get_max_color(vec4 color1, vec4 color2){\n    return vec4(max(color1.x, color2.x), max(color1.y, color2.y), max(color1.z, color2.z), max(color1.a, color2.a));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 buffer_a = texture(iChannel0, uv);\n    vec4 own_buffer_b = texture(iChannel1, uv);\n    float diff_a = buffer_a.a;\n    \n    if(diff_a > 0.2){\n        float start_light = 0.8;\n        fragColor = vec4(start_light,start_light,start_light,1.0);\n    }else{\n    \n        float _min_x = -3.0;\n        float _max_x = 3.0;\n        float _min_y = -3.0;\n        float _max_y = 3.0;\n\n        vec4 max_neighbor_color = vec4(0.0,0.0,0.0,0.0);\n        for(float x = _min_x; x <= _max_x; x++)\n        for(float y = _min_y; y <= _max_y; y++)\n        {\n            vec2 point = vec2(fragCoord.x + x, fragCoord.y + y);\n            vec2 point_uv = point/iResolution.xy;\n            vec4 point_buffer_color = texture(iChannel1, point_uv);\n            \n            max_neighbor_color += point_buffer_color;\n            // max_neighbor_color = get_max_color(max_neighbor_color, point_buffer_color);\n        }\n        \n        max_neighbor_color /= ((_max_x - _min_x + 1.0) * (_max_y - _min_y + 1.0));\n\n        fragColor = max_neighbor_color * 0.92;// get_heat_color(webcam_color, 0.5);\n    \n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}