{"ver":"0.1","info":{"id":"3ddXzH","date":"1571452243","viewed":329,"name":"share","username":"Aman","description":"purple painting, draw with mouse to interact\nfluid: all credit to Wyatt Flander's Me And My Neighborhood's fluid sim: wyattflanders.com/MeAndMyNeighborhood.pdf","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["interactive","the","purple","mirage","meandmyneighborhood"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat sdf(vec3 p) { \n    vec2 scale =vec2(4.9, 2.80) * 1.99; \n    vec2 fp = clamp((p.xy + scale/2.0) / scale, 0.0, 1.0);\n    \n    vec4 fluid = texture(iChannel0, fp);\n    fluid.w = clamp(fluid.w, -0.8, 0.8);\n    float d = sdBox(p + vec3(0.0, 0.0, 0.0), vec3(5, 2.9, 1.0));\n    float inner = sdBox(p + vec3(0, 0.0, 0.9), vec3(4.9, 2.8, 0.2));\n//    d += clamp(fluid.w * 0.4, 0.0, 1.0);\n  //  d = max(d, sdBox(p + vec3(0.0, 4.0, -10.0), vec3(4.9)));\n     if(fp.x < 0.001 || fp.x > 0.999 || fp.y < 0.001 || fp.y > 0.999) {\n        fluid.w = 0.0;\n     }\n    return max(d, -inner) - (fluid.w) * 0.4;\n}\n\n\nvec3 calcNormal(vec3 p ) // for function f(p)\n{\n    const float h = 0.0001; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sdf( p + k.xyy*h ) + \n                      k.yyx*sdf( p + k.yyx*h ) + \n                      k.yxy*sdf( p + k.yxy*h ) + \n                      k.xxx*sdf( p + k.xxx*h ) );\n}\n\n\nbool march(vec3 ro, vec3 rd, out vec3 hitPos, out float minDist) {\n    float over = 0.9;\n    minDist = 0.0;\n    for(int i = 0; i < 50; i++) {\n        float d = sdf(ro) * over;\n        ro += d * rd;\n        minDist += d;\n        if (d < 0.001) { hitPos = ro; return true; }\n        over *= 1.0;\n    }\n    return false;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = sdf(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 texcoord )\n{\n    vec4 fluid = texture(iChannel0, texcoord/iResolution.xy);\n    \n    vec3 col = fluid.xyz;\n    vec2 uv = 2.0 * (texcoord/iResolution.xy) - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 ro = vec3(0.0, 0.0, -4.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    //rd = normalize(rd - vec3(0.0, 0.3, 0.0));\n    vec3 hitPos;\n    float minDist;\n    if(march(ro, rd, hitPos, minDist)) {\n       //col = fluid.www;\n       vec3 nor = calcNormal(hitPos);\n       vec3 lightPos = vec3(10, 4, -4.0 );\n        vec3 surfPos = hitPos + nor * 0.01;\n        vec3 norcol = nor * 0.5 + 0.5;\n        norcol.g *= 0.00; norcol.b *= 2.0;\n       vec3 light = clamp(dot(nor, (lightPos - surfPos)),0.0, 1.0) * norcol.rbr;\n       float shadow = softshadow(surfPos, normalize(lightPos - surfPos), 0.0, 10.0, 8.0) * 1.0;\n      //light *= clamp(shadow + 0.3, 0.0, 1.0);\n       light = mix(norcol.rbr, norcol.bbb, 1.0-shadow);\n   \n      \n       // col = light + 0.1 * col;\n        col = light ;\n        \n      \n\n        \n    }\n    \n    fragColor.rgb = mix(col, fluid.rgb, 0.2);\n    fragColor.a = 1.0;\n //fragColor.xy = gl_FragCoord.xy / iResolution.xy;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n//\n// Fluid sim from wyattflanders.com/MeAndMyNeighborhood.pdf\n//\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n\n#define LOOKUP(COORD) texture(iChannel0,(COORD)/iResolution.xy)\n\nvec4 Field (vec2 position) {\n    // Rule 1 : All My Energy transates with my ordered Energy\n    vec2 velocityGuess = LOOKUP (position).xy;\n    vec2 positionGuess = position - velocityGuess;\n    return LOOKUP (positionGuess);\n}\n\n\nvoid mainImage( out vec4 Energy, in vec2 Me )\n{\n    Energy  =  Field(Me);\n    // Neighborhood :\n    vec4 pX  =  Field(Me + vec2(1,0));\n    vec4 pY  =  Field(Me + vec2(0,1));\n    vec4 nX  =  Field(Me - vec2(1,0));\n    vec4 nY  =  Field(Me - vec2(0,1));\n    \n    // Rule 2 : Disordered Energy diffuses completely :\n    Energy.b = (pX.b + pY.b + nX.b + nY.b)/4.0;\n    \n    // Rule 3 : Order in the disordered Energy creates Order :\n    vec2 Force;\n    Force.x = nX.b - pX.b;\n    Force.y = nY.b - pY.b;\n    Energy.xy += Force/4.0;\n    \n    // Rule 4 : Disorder in the ordered Energy creates Disorder :\n    Energy.b += (nX.x - pX.x + nY.y - pY.y)/4.;\n    \n    // Gravity effect :\n    Energy.y -= Energy.w/300.0;\n    \n    // Mass concervation :\n    Energy.w += (nX.x*nX.w-pX.x*pX.w+nY.y*nY.w-pY.y*pY.w)/4.;\n    \n    //Boundary conditions :\n    if(Me.x<1.||Me.y<1.||iResolution.x-Me.x<1.||iResolution.y-Me.y<1.)\n    {\n        //Energy.w += length(Energy.xy);\n        Energy.xy *= 0.;\n    }\n    \n    // Mouse input  :  \n    vec4 m = iMouse;\n    if (iMouse.z > 0. && length(Me-m.xy) < 10.) {\n        Energy.w += 0.05;\n    }\n    //Energy.xy = gl_FragCoord.xy/iResolution.xy;\n   //Energy *= 0.0;\n}","name":"Buffer A","description":"","type":"buffer"}]}