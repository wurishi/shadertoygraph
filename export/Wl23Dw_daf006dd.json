{"ver":"0.1","info":{"id":"Wl23Dw","date":"1559793421","viewed":319,"name":"Simplex Erosion","username":"10000volts","description":"References: https://thebookofshaders.com/13/, \nhttps://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["simplexnoise","erode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = texture(iChannel1,fragCoord.xy / iResolution.xy);\n    float a = texture(iChannel0,fragCoord.xy / iResolution.xy).x;\n    fragColor = vec4(color * (1. - a));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float color1;\n    \n    float t = mod(iTime, 4.0);\n    if(t < 2.0){\n    \tcolor1 = clamp(pow(texture(iChannel0, fragCoord.xy / iResolution.xy).x, 16.0), \n                       0.01, 0.05);\n    }else if(t > 2.0){\n    \tcolor1 = -clamp(pow(texture(iChannel0, fragCoord.xy / iResolution.xy).x, 16.0), \n                       0.01, 0.05);\n    }\n    \n    float color2 = texture(iChannel1, fragCoord.xy / iResolution.xy).x;\n    \n    fragColor = vec4(clamp(vec3(color1 + color2), 0., 1.), 1.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n// simplex noise, copy from https://thebookofshaders.com/13/\nfloat snoise(vec2 v) {\n\n    const vec4 C = vec4(0.211324865405187,\n                        0.366025403784439,\n                        -0.577350269189626,\n                        0.024390243902439);\n\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n#define OCTAVES 10\nfloat fbm (in vec2 st) {\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    \n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * abs(snoise(st));\n        \n        st *= 3.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 st = fragCoord.xy * 1.5 / iResolution.x;\n    st += iTime * 0.1;\n    vec2 q = vec2(0.);\n    q.x = fbm(st);\n    q.y = fbm(st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm(st + 1.0 * q + vec2(-0.490,0.980)+ .450 * iTime);\n    r.y = fbm(st + 1.0 * q + vec2(0.450,0.300)+ .15 * iTime);\n\n    float f = fbm(st + r);\n\n    fragColor = vec4(vec3(f*f*f + 1.4 * f), 1.);\n}","name":"Buf B","description":"","type":"buffer"}]}