{"ver":"0.1","info":{"id":"4ljXRm","date":"1442514832","viewed":183,"name":"Box Slug","username":"cabbibo","description":"Can it run at 60 fps full screen ?!?!?","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","raytrace","refract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n// Branch Code stolen from : https://www.shadertoy.com/view/ltlSRl\n\nconst float MAX_TRACE_DISTANCE = 5.0;             // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 20;\nconst float PI = 3.14159;\n\nmat4 paletteVal;\n\nmat4 rotateX(float angle){\n    \n\t//angle = -angle/180.0*3.1415926536;\n    float c = cos(angle);\n    float s = sin(angle);\n\treturn mat4(1.0, 0.0, 0.0, 0.0, 0.0, c, -s, 0.0, 0.0, s, c, 0.0, 0.0, 0.0, 0.0, 1.0);\n    \n}\n\nmat4 rotateY(float angle){\n    \n\t//angle = -angle/180.0*3.1415926536;\n    float c = cos(angle);\n    float s = sin(angle);\n\treturn mat4(c, 0.0, s, 0.0, 0.0, 1.0, 0.0, 0.0, -s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0);\n    \n}\n\nmat4 rotateZ(float angle){\n    \n\t//angle = -angle/180.0*3.1415926536;\n    float c = cos(angle);\n    float s = sin(angle);\n\treturn mat4(c, -s, 0.0, 0.0, s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n    \n}\nmat4 translate(vec3 t){\n    \n\treturn mat4(1.0, 0.0, 0.0, -t.x, 0.0, 1.0, 0.0, -t.y, 0.0, 0.0, 1.0, -t.z, 0.0, 0.0, 0.0, 1.0);\n    \n}\n\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdSphere( vec3 p, float r )\n{\n  return length( p ) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\n\nvec2 smoothU( vec2 d1, vec2 d2, float k)\n{\n    float a = d1.x;\n    float b = d2.x;\n    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return vec2( mix(b, a, h) - k*h*(1.0-h), mix(d2.y, d1.y, pow(h, 2.0)));\n}\n\nvec2 opU( vec2 d1, vec2 d2 ){\n return d1.x < d2.x ? d1 : d2;   \n}\n\n\n\n\nconst int numSteps =3;\n//-------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n    \n    float branchSize = .3;\n    float reductionFactor = .5 +  .03 * sin( iTime * 1.73 );\n    float trunkSize = .2 +  .01 * sin( iTime * 3.27 );\n    float bs = branchSize;\n    float rot = 40. + 20. * sin( iTime * .4 );\n    \n    //pos += vec3( 0. , branchSize , 0. );\n\n   \n    vec4 p = vec4( pos , 1. );\n    mat4 m;\n    \n   \t//vec2 res = vec2( (abs(sin( pos.x * pos.y * pos.z  * 10.)) * 1.9 ) + length( pos ) - 1., 0.0 );\n  \n    vec2 res = vec2( 10000. ,1.);\n    \n    vec3 t = vec3( sin( iTime * .1 ) ,sin( iTime * .4 ) ,sin( iTime * .27 ) );\n    for( int i = 0; i <numSteps; i ++ ){\n        bs *= reductionFactor;\n        \n        float id =  float(i)/float(numSteps);\n\n\n        m = translate( abs(t) * bs * 4.) * rotateY(sin( iTime * .13 ) * PI * ( id + .3)  ) * rotateX(sin( iTime * .37 ) *PI * ( id + .3) ) * rotateZ(sin( iTime * .073 ) * PI* ( id + .3) );    \n        p.x = abs(p.x); // - bs / 2.;\n        p.z = abs(p.z); // - bs / 2.; \n        p.y = abs(p.y); // - bs / 2.;  \n\n        p = p * m; \n\n        //res = smoothU( res , vec2( sdCappedCylinder( p.xyz , vec2( trunkSize * bs , bs )),1.) , .1);\n        float smoothA = .2 - .1 * id; //float(i)/float(numSteps);\n        \n        float radius =  bs * ( 1. + .4 * sin( iTime * float( i )/ 10.));\n       // res = smoothU( res , vec2( sdSphere( p.xyz ,  radius ),id) ,smoothA );\n        \n        res = smoothU( res , vec2( sdBox( p.xyz , vec3( radius  ) ),id) ,smoothA );\n\n        //res = opU( res , vec2( sdSphere( p.xyz , trunkSize * bs * 10. ),1. ));\n\n\n\n\n    }\n\n   \treturn res;\n    \n}\n\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    float an = 0.3 + 3.0*mouse.x;\n   \tfloat an2 = 0.3 + 3.0*mouse.y;\n\n\tcamPos = vec3(3.5*sin(an),3. * cos( an2),3.5*cos(an));\n    camTar = vec3(0. ,0.0,0.0);\n}\n\n\n\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.01, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n  float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.612*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.5;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n     \n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 doPalette( in float val , in mat4 pType ){\n  return palette( val ,  pType[0].xyz , pType[1].xyz , pType[2].xyz , pType[3].xyz );\n}\n\n\nvec3 backgroundCol( vec3 rd ){\n    \n \n    return rd * .5 + .5;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   \n    paletteVal = mat4( .5 , .5 , .5 , 0. \n                 , .5 , .5 , .5 , 0.\n                 , 2. , 1. , 0. , 0.\n                 , .5 , .2 , .25 , 0.\n                 );\n\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    vec2 res = calcIntersection( ro , rd  );\n    \n    vec3 col = vec3( 0. ); \n    \n        // If we have hit something lets get real!\n    if( res.y > -.5 ){\n   \n        vec3 pos = ro + rd * res.x;\n        vec3 nor = calcNormal( pos );\n        //float AO = calcAO( pos , nor );\n        \n        vec3 refr = refract( rd , nor , 1. / 1.4 );\n        vec3 refl = reflect( vec3( 0. , 3. , 0. ) , nor );\n        refl = normalize( refl );\n        \n        vec3 refrCol = texture( iChannel0, refr ).xyz;\n        vec3 reflCol = texture( iChannel0, refl ).xyz;\n        \n        float reflectVal = pow( max( 0. , dot( refl , rd ) ), 20. );\n\n       \n        float face = pow( (1. -  max(0. , dot( nor , rd ))) , 4. );\n        \n        vec3 palCol = doPalette( res.y / ( 1.4 + sin(iTime * .2)) , paletteVal );\n        vec3 refCol = doPalette( reflectVal , paletteVal ) * reflectVal;\n        \n        \n        vec3 fakeRefr  = texture( iChannel1 , normalize(refr.xy) ).xyz;\n             fakeRefr += texture( iChannel1 , normalize(refr.yz) ).xyz;\n             fakeRefr += texture( iChannel1 , normalize(refr.xz) ).xyz;\n\n       \t\t fakeRefr /= 3.;\n        \n        \n        fakeRefr = doPalette( dot(refr , rd ) , paletteVal ) * dot(refr , rd );\n        \n\n        \n        //vec3 aoCol =  doPalette( AO , paletteVal ) * pow((1. - AO), 5. );\n\n        \n       \tcol=   refCol +  palCol *refrCol; //refCol +  (palCol  * refrCol);//refrCol * doPalette( res.y / ( 1.4 + sin(iTime * .2)) , paletteVal ); //(refrCol * .6 + reflCol * .8 ) * AO;// * vec3( AO * AO * AO ) * vec3(1.- pow(  dot(nor , rd), 2.) ); // AO * ( nor * .5 + .5);\n\t\n        //col *= pow( (5. - res.x)/5., 2.) * 4.;\n        //col *=;\n        //col = vec3( reflectVal );\n    }else{\n      col = vec3( 0. );//texture( iChannel0, rd ).xyz;\n    }\n    \n    // apply gamma correction\n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4( col , 1. );\n    \n}","name":"","description":"","type":"image"}]}