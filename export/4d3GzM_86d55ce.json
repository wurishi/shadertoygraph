{"ver":"0.1","info":{"id":"4d3GzM","date":"1448557598","viewed":465,"name":"Infinite Zooming Map","username":"Xor","description":"Here is a zooming map shader I made.","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["noise","lighting","zoom","perlin","map","xor","land"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define QUALITY 10.0\n#define SCALE 0.5\n#define ZOOM 1.0\n\nfloat r(vec2 n)\n{\n    return fract(cos(dot(fract(n/142.0),vec2(36.26,73.12)))*354.63);\n}\nfloat noise(vec2 n)\n{\n    vec2 fn = floor(n);\n    vec2 sn = smoothstep(vec2(0),vec2(1),fract(n));\n    \n    float h1 = mix(r(fn),r(fn+vec2(1,0)),sn.x);\n    float h2 = mix(r(fn+vec2(0,1)),r(fn+vec2(1)),sn.x);\n    return mix(h1,h2,sn.y);\n}\nfloat fractal(vec3 n)\n{\t\n    float total = 0.5;\n    for(float i = 0.0;i<QUALITY;i++)\n    {\n        total = mix(noise(n.xy/exp2(i-fract(n.z))+i+floor(n.z)),\n                    total,pow((i-fract(n.z))/(QUALITY-1.0),2.0));\n    }\n \treturn total;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 n = vec3((fragCoord.xy-iResolution.xy*0.5)/SCALE,-iTime*ZOOM);\n    float p1 = fractal(n);\n    float p2 = fractal(n+vec3(0.5,1.0,0.0)*8.0*SCALE);\n    \n    float terrain = smoothstep(0.5,0.6,p1);\n    \n    vec3 col = mix(vec3(0.1,0.3,0.4),vec3(0.4,0.5,0.3),terrain);\n\tfragColor = vec4(col+vec3(p2-p1),1.0);\n}","name":"","description":"","type":"image"}]}