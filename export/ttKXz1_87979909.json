{"ver":"0.1","info":{"id":"ttKXz1","date":"1582236078","viewed":1241,"name":"Dithered Temporal Reprojection","username":"piyushslayer","description":"A simple demo of dithered temporal reprojection, something I found very useful for optimizing volumetric clouds. It's flexible enough to word with any N x N bayer matrix (See top of Buffer A).","likes":7,"published":3,"flags":32,"usePreview":1,"tags":["dithering","reprojection","bayer","temporal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n\tA simple demo of dithered temporal reprojection, something I found very\n\tuseful for optimizing volumetric clouds. It's flexible enough to word with\n\tany N x N bayer matrix (See top of Buffer A).\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;    \n    \n    vec3 col = vec3(0.);\n    \n    col += textureLod(iChannel0, uv, 0.).rgb;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BAYER_LIMIT 16\n#define BAYER_LIMIT_H 4\n\nconst int bayerFilter[BAYER_LIMIT] = int[]\n(\n\t 0,  8,  2, 10,\n\t12,  4, 14,  6,\n\t 3, 11,  1,  9,\n\t15,  7, 13,  5\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord / iResolution.xy;    \n    \n    vec3 col = vec3(0.);\n    \n    ivec2 iFragCoord = ivec2(fragCoord * .5);\n    \n    int index = int(iTime * 1.5) % BAYER_LIMIT;\n    \n    int iCoord = (iFragCoord.x + BAYER_LIMIT_H * iFragCoord.y) % BAYER_LIMIT;\n    \n    if (iCoord == bayerFilter[index])\n        col += textureLod(iChannel1, uv, 0.).rgb;\n    else if (index > 0)\n        col += textureLod(iChannel0, uv, 0.).rgb;\n    \n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}