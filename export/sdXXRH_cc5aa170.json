{"ver":"0.1","info":{"id":"sdXXRH","date":"1618256530","viewed":71,"name":"Post-Processed blurring","username":"FrancisL","description":"Nice","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from https://www.shadertoy.com/view/XdfGDH\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // from https://www.shadertoy.com/view/XdfGDH\n    const int mSize = 11;\n    const int kSize = (mSize-1)/2;\n    float kernel[mSize];\n    vec3 final_color = vec3(0.0);\n\n    //create the 1-D kernel\n    float sigma = 20.0;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    //get the normalization factor (as the gaussian has been clamped)\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n    \n    //read out the texels\n    for (int i=-kSize; i <= kSize; ++i) {\n        for (int j=-kSize; j <= kSize; ++j) {\n            final_color += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 unblurredColor = texture(iChannel0, uv);\n\n    fragColor = vec4(mix(unblurredColor.rgb, final_color/(Z*Z), unblurredColor.a), 1.0);\n    \n    float vignette = smoothstep(1.75, 0.0, length((2.0 * uv) - vec2(1.0)));\n    fragColor = mix(vec4(0.0, 0.0, 0.1, 1.0), fragColor, vignette);\n    \n    //fragColor = vec4(unblurredColor.a, unblurredColor.a, unblurredColor.a, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float FOVY = 3.141569 * 0.25;\nconst float TO_RADIANS = 3.1415 / 180.0;\nconst vec3 LIGHT_POS = vec3(0., 6., -3.);\nconst float FOCAL_RANGE = 16.0;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\n#define BACK_WALL plane(pos, vec4(0.0, 0.0, -1.0, 5.0))\n#define BACK_WALL_ID 1\n\n#define LEFT_WALL plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define LEFT_WALL_ID 2\n\n#define RIGHT_WALL plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_ID 3\n\n#define CEILING_WALL plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define CEILING_WALL_ID 4\n\n#define FLOOR plane(pos, vec4(0.0, 1.0, 0.0, 2.5))\n#define FLOOR_ID 5\n\n#define LEFT_BOX box(rotateY(pos + vec3(1.7, 1.3, -2), 25. * TO_RADIANS), vec3(1, 1, 1))\n#define LEFT_BOX_ID 6\n\n#define RIGHT_BOX box(rotateY(pos + vec3(-1.3, 1, -0.75), -25. * TO_RADIANS), vec3(1, 2, 1))\n#define RIGHT_BOX_ID 7\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n} \n\nvoid fetchObject(vec3 pos, out float t, out int obj)\n{\n    t = BACK_WALL;\n    obj = BACK_WALL_ID;\n    \n    float t2 = LEFT_WALL;\n    if(t2 < t)\n    {\n        t = t2;\n        obj = LEFT_WALL_ID;\n    }\n    t2 = RIGHT_WALL;\n    if(t2 < t)\n    {\n        t = t2;\n        obj = RIGHT_WALL_ID;\n    }\n    t2 = CEILING_WALL;\n    if(t2 < t)\n    {\n        t = t2;\n        obj = CEILING_WALL_ID;\n    }\n    t2 = FLOOR;\n    if(t2 < t)\n    {\n        t = t2;\n        obj = FLOOR_ID;\n    }\n    t2 = LEFT_BOX;\n    if(t2 < t)\n    {\n        t = t2;\n        obj = LEFT_BOX_ID;\n    }\n    t2 = RIGHT_BOX;\n    if(t2 < t)\n    {\n        t = t2;\n        obj = RIGHT_BOX_ID;\n    }\n}\n\nfloat fetchObject(vec3 pos)\n{\n    float t = BACK_WALL;\n    return min(min(min(min(min(min(t, LEFT_WALL), RIGHT_WALL), \n                CEILING_WALL), FLOOR), LEFT_BOX), RIGHT_BOX);\n}\n\nvec3 getNormal(vec3 pos)\n{\n    return normalize(vec3( fetchObject(pos + vec3(0.001, 0.0, 0.0)) - fetchObject(pos - vec3(0.001, 0.0, 0.0)),\n                            fetchObject(pos + vec3(0.0, 0.001, 0.0)) - fetchObject(pos - vec3(0.0, 0.001, 0.0)),\n                            fetchObject(pos + vec3(0.0, 0.0, 0.001)) - fetchObject(pos - vec3(0.0, 0.0, 0.001))));\n}\n\nvec3 lambertian(int hitObj, vec3 p, vec3 n, vec3 lightDir)\n{\n    float cosine = dot(-lightDir, n);\n    switch(hitObj){\n        case LEFT_BOX_ID:\n        return vec3(1., 1., 1.) * cosine;\n        break;\n        case RIGHT_BOX_ID:\n        return vec3(1., 1., 1.) * cosine;\n        break;\n        case BACK_WALL_ID:\n        return vec3(1., 1., 1.) * cosine;\n        break;\n        case LEFT_WALL_ID:\n        return vec3(0., 1., 0.) * cosine;\n        break;\n        case RIGHT_WALL_ID:\n        return vec3(1., 0., 0.) * cosine;\n        break;\n        case CEILING_WALL_ID:\n        return vec3(1., 1., 1.) * cosine;\n        break;\n        case FLOOR_ID:\n        return vec3(1., 1., 1.) * cosine;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n    }\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int objectID)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        fetchObject(pos, m, objectID);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.;\n    objectID = -1;\n}\n\n\nIntersection sdf(vec3 dir, vec3 eye)\n{\n    float t;\n    int objectID;\n    march(eye, dir, t, objectID);\n    vec3 intersection = eye + t * dir;\n    vec3 normal = getNormal(intersection);\n    vec3 lightDir = normalize(intersection - LIGHT_POS);\n    vec3 color = lambertian(objectID, intersection, normal, lightDir);\n    return Intersection(t, color, intersection, objectID);\n}\n\n\nvec3 shootRay(vec3 eye, vec3 ref, vec2 ndc)\n{\n    vec3 eye2Ref  = ref - eye;\n    float n = length(eye2Ref);\n    \n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    vec3 right  = normalize(cross(eye2Ref, worldUp));\n    \n    vec3 U = normalize(cross(right, eye2Ref));\n    vec3 V = U * n * tan(FOVY * 0.5);\n    \n    float aspect = iResolution.x / iResolution.y;\n    vec3 H = right * n * tan(FOVY * 0.5) * aspect;\n  \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy) * 2. - vec2(1.0, 1.0);\n    vec3 eye = vec3(0, 2, -13);\n    vec3 ref = vec3(0, 2, 0);\n    vec3 forward = normalize(ref - eye);\n    vec3 lookAt = shootRay(eye, ref, uv);\n    Intersection it = sdf(lookAt, eye);\n    \n    float distAlongCamZ  = abs(dot(forward, it.p - eye));\n    float FOCAL_LENGTH = 20.0 + 10.0 * sin(iTime);\n    float blur = pow(min(1.0, abs(distAlongCamZ - FOCAL_LENGTH) / FOCAL_RANGE), 0.5);\n    fragColor = vec4(it.color, blur);\n}","name":"Buffer A","description":"","type":"buffer"}]}