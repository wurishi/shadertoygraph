{"ver":"0.1","info":{"id":"ms23Wm","date":"1667744324","viewed":131,"name":"RayMarching - SDF - Learn","username":"kanayuki","description":"learn RayMarching SDF practice","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","sdf","spheresdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereSDF(in vec3 p)\n{\n    return length(p)-1.0;\n}\n\nfloat sdf(vec3 p){return sphereSDF(p);}\n\nfloat RayMarching(in vec3 source, in vec3 direction)\n{\n    float distance=0.0;\n    for (int i=0; i<100; i++)\n    {\n        vec3 end = source+direction*distance;\n        float len = sdf(end);\n        if (len<0.001 || distance>10.0) break;\n        distance += len;     \n    }\n    return distance;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = sdf(p);\n    vec2 e = vec2(0.001,0.0);\n    float pdx = sdf(p+e.xyy)-d;\n    float pdy = sdf(p+e.yxy)-d;\n    float pdz = sdf(p+e.yyx)-d;\n    return normalize(vec3(pdx,pdy,pdz));\n}\n\nmat2 RotateMatrix(float theta)\n{\n    return mat2(cos(theta),-sin(theta),\n                sin(theta),cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.75);\n    \n    vec3 source = vec3(0,0,3);\n    vec3 direction = normalize(vec3(uv,0.5)-source);\n       \n    float d = RayMarching(source, direction);\n    \n    col = vec3(d/15.0);\n    if (d < 10.0)\n    {\n        vec3 p = source + direction*d;\n        vec3 n = GetNormal(p);\n        vec3 light = vec3(3,1,3);\n        light.xz *= RotateMatrix(iTime*5.0);\n        float diffuse = dot(n, normalize(light-p));\n        \n        // Time varying pixel color\n        col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        col = col * (diffuse*0.5+0.5);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}