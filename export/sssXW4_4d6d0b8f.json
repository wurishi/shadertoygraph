{"ver":"0.1","info":{"id":"sssXW4","date":"1618692484","viewed":50,"name":"Raytracer Y","username":"igormarkov00","description":"Y shader","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cgmsutask2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define time iTime\n#define mouse iMouse\n#define resolution iResolution\n\n#define saturate(oo) clamp(oo, 0.0, 1.0)\n\n#define MarchSteps 4\n\n#define ExpPosition vec3(0.0)\n#define Radius 2.0\n#define Background vec3(0.1, 0.0, 0.0)\n\n#define NoiseSteps 1\n#define NoiseAmplitude 0.06\n#define NoiseFrequency 4.0\n#define Animation vec3(0.0, -3.0, 0.5)\n\n#define Color1 vec3(1.0, 1.0, 1.0)\n#define Color2 vec3(1.0, 0.8, 0.2)\n#define Color3 vec3(1.0, 0.03, 0.0)\n#define Color4 vec3(0.05, 0.02, 0.0)\n\nstruct Triangle {\n    vec3 p0;\n    vec3 p1;\n    vec3 p2;\n};\n\n// help functions\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\n\nvec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise(vec3 v)\n{\n\tconst vec2  C = vec2(1.0/6.0, 1.0/3.0);\n\tconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n \n\t// First corner\n\tvec3 i  = floor(v + dot(v, C.yyy));\n\tvec3 x0 = v - i + dot(i, C.xxx);\n \n\t// Other corners\n\tvec3 g = step(x0.yzx, x0.xyz);\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min(g.xyz, l.zxy);\n\tvec3 i2 = max(g.xyz, l.zxy);\n\tvec3 x1 = x0 - i1 + C.xxx;\n\tvec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n\tvec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n \n\t// Permutations\n\ti = mod289(i);\n\tvec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n \n\t// Gradients: 7x7 points over a square, mapped onto an octahedron.\n\t// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n\tfloat n_ = 0.142857142857; // 1.0/7.0\n\tvec3  ns = n_ * D.wyz - D.xzx;\n\tvec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n \n\tvec4 x_ = floor(j * ns.z);\n\tvec4 y_ = floor(j - 7.0 * x_);    // mod(j,N)\n \n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n \n\tvec4 h = 1.0 - abs(x) - abs(y);\n\tvec4 b0 = vec4(x.xy, y.xy);\n\tvec4 b1 = vec4(x.zw, y.zw);\n \n\tvec4 s0 = floor(b0) * 2.0 + 1.0;\n\tvec4 s1 = floor(b1) * 2.0 + 1.0;\n\tvec4 sh = -step(h, vec4(0.0));\n \n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n \n\tvec3 p0 = vec3(a0.xy, h.x);\n\tvec3 p1 = vec3(a0.zw, h.y);\n\tvec3 p2 = vec3(a1.xy, h.z);\n\tvec3 p3 = vec3(a1.zw, h.w);\n \n\t//Normalise gradients\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n \n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\tvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n\tm = m * m;\n \n\treturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat Turbulence(vec3 position, float minFreq, float maxFreq, float qWidth)\n{\n\tfloat value = 0.0;\n\tfloat cutoff = clamp(0.5/qWidth, 0.0, maxFreq);\n\tfloat fade;\n\tfloat fOut = minFreq;\n \n\tfor(int i=NoiseSteps ; i>=0 ; i--)\n\t{\n\t\tif(fOut >= 0.5 * cutoff) break;\n\t\tfOut *= 2.0;\n\t\tvalue += abs(snoise(position * fOut))/fOut;\n\t}\n\tfade = clamp(2.0 * (cutoff-fOut)/cutoff, 0.0, 1.0);\n\treturn 1.0 - value - fade * abs(snoise(position * fOut)) / fOut;\n}\n\nfloat SphereDist(vec3 position)\n{\n\treturn length(position - ExpPosition) - Radius;\n}\n \nvec3 Shade(float distance)\n{\n\tfloat c1 = saturate(distance*5.0 + 0.5);\n\tfloat c2 = saturate(distance*5.0);\n\tfloat c3 = saturate(distance*3.4 - 0.5);\n\n\tvec3 a = mix(Color1,Color2, c1);\n\tvec3 b = mix(a,     Color3, c2);\n\treturn \t mix(b,     Color4, c3);\n}\n\n// Draws the scene\nfloat RenderScene(vec3 position, out float distance)\n{\n\tfloat noise = Turbulence(position * NoiseFrequency + Animation*time*0.4, 0.1, 1.5, 0.03) * NoiseAmplitude;\n\tnoise = saturate(abs(noise));\n\tdistance = SphereDist(position) - noise;\n\treturn noise;\n}\n\n// Basic ray marching method.\nvec3 March(vec3 rayOrigin, vec3 rayStep)\n{\n\tvec3 position = rayOrigin;\n\tfloat distance;\n\tfloat displacement;\n\tfor(int step = MarchSteps; step >=0  ; --step)\n\t{\n\t\tdisplacement = RenderScene(position, distance);\n\t\tif(distance < 0.05) break;\n\t\tposition += rayStep * distance;\n\t}\n\treturn mix(Shade(displacement), Background, float(distance >= 0.5));\n}\n\n// check sphrer hit\nbool IntersectSphere(vec3 ro, vec3 rd, vec3 pos, float radius, out vec3 intersectPoint)\n{\n\tvec3 relDistance = (ro - pos);\n\tfloat b = dot(relDistance, rd);\n\tfloat c = dot(relDistance, relDistance) - radius*radius;\n\tfloat d = b*b - c;\n\tintersectPoint = ro + rd*(-b - sqrt(d));\n\treturn d >= 0.0;\n}\n\nvec3 fireball(vec2 p)\n{\n\tfloat rotx = mouse.y * 0.01;\n\tfloat roty = mouse.x * 0.01;\n\tfloat zoom = 10.0;\n\n\t// camera\n\tvec3 ro = zoom * normalize(vec3(cos(roty), cos(rotx), sin(roty)));\n\tvec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);\n\tvec3 uu = normalize(cross( vec3(0.0, 1.0, 0.0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rd = normalize(p.x*uu + p.y*vv + 1.5*ww);\n\n\tvec3 col = Background;\n\tvec3 origin;\n\t\n\tif(IntersectSphere(ro, rd, ExpPosition, Radius + NoiseAmplitude*6.0, origin))\n\t{\n\t\tcol = March(origin, rd);\n\t}\n\treturn col;\n}\n\n//--------------------------------------------------------------------\n// Shader: burn\n// Yuldashev Mahmud Effect took from shaderToy mahmud9935@gmail.com\n// original:  http://glslsandbox.com/e#26733.0\n//--------------------------------------------------------------------\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\tvec3 f = fract(uv); \n\tf = f*f*(3.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t              uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nvec3 burn (vec2 p) \n{\n\tfloat color1 = 4.0 - (3.*length(2.5*p));\n    \n\tvec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);\n\tfor(int i = 1; i <= 3; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor1 += 0.5*(1.5 / power) * snoise(coord + vec3(0.,.05, .01), power*16.);\n\t}\n\tcolor1 *= 0.6;\n\treturn vec3( color1, pow(max(color1,0.),2.)*0.4, pow(max(color1,0.),3.)*0.15);\n}\n\n\nvec3 drawFire(vec2 p) {\n  vec3 color1 = fireball(p);\n  vec3 color2 = burn(p);\n  return mix(color1, color2, 0.7);\n}\n\n\nconst float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(2, 1.5, -7);\n// const vec3 CAMERA_POS = vec3(0, 13.2, -6);\n\nconst vec3 LIGHT1_POS = vec3(-3.5, 1, -1);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(2, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1, 0.2);\nvec3 randDir;\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceFireball(vec3 pos, vec3 dir, float r, out vec3 normal){\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - (r+randDir.x*1.0) * (r+randDir.x*1.0);\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-0.9 - pos.y) / dir.y;\n    if (t <= 0.) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 2.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -0.9) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -0.9) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nvec3 GetNormalByThreePoints(vec3 a, vec3 b, vec3 c) {\n    return vec3((b.y - a.y) * (c.z - a.z) - (b.z - a.z) * (c.y - a.y),\n                 (b.z - a.z) * (c.x - a.x) - (b.x - a.x) * (c.z - a.z),\n                 (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x));\n}\n\nbool IsRayParallelToPlane(vec3 p0, vec3 p1, vec3 p2, vec3 origin, vec3 direction) {\n    vec3 normal = GetNormalByThreePoints(p0, p1, p2);\n    float d1 = dot(origin, normal);\n    float d2 = dot(origin + direction, normal);\n    return d1 == d2;\n}\n\n/* float traceTriangle(vec3 origin, vec3 dir, vec3 p0, vec3 p1, vec3 p2, out vec3 normal) {\n    normal = GetNormalByThreePoints(p0, p1, p2);\n    if (IsRayParallelToPlane(p0, p1, p2, origin, dir)) {\n            return INF;\n        }\n        vec3 e1 = p1 - p0;\n        vec3 e2 = p2 - p0;\n\n        vec3 pvec = cross(dir, e2);\n        float det = dot(e1, pvec);\n\n        float inv_det = 1. / det;\n        vec3 tvec = origin - p0;\n        float u = dot(tvec, pvec) * inv_det;\n        if (u < 0. || u > 1.) {\n            return INF;\n        }\n\n        vec3 qvec = cross(tvec, e1);\n        float v = dot(dir, qvec) * inv_det;\n        if (v < 0. || u + v > 1.) {\n            return INF;\n        }\n        float dist = dot(e2, qvec) * inv_det;\n\n        if (dist < 0.) {\n            return INF;\n        }\n        return dist;\n} */\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 x0, vec3 x1, vec3 x2, out vec3 normal)\n{\n    const float EPSILON = 0.0000001;\n    vec3 edge1, edge2, h, s, q;\n    float a,f,u,v;\n    edge1 = x1 - x0;\n    edge2 = x2 - x0;\n    h = cross(dir, edge2);\n    a = dot(edge1, h);\n    if (a > -EPSILON && a < EPSILON) {\n        return INF;    // This ray is parallel to this triangle.\n    }\n    f = 1.0/a;\n    s = pos - x0;\n    u = dot(f * s, h);\n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    q = cross(s, edge1);\n    v = dot(f * dir, q);\n    if (v < 0.0 || u + v > 1.0) {\n        return INF;\n    }\n    // At this stage we can compute t to find out where the intersection point is on the line.\n    float t = dot(f * edge2, q);\n    if (t > EPSILON) // ray intersection\n    {\n        // outIntersectionPoint = pos + dir * t;\n        normal = normalize(cross(edge1, edge2));\n        return t;\n    }\n    else // This means that there is a line intersection but not a ray intersection.\n        return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target, Triangle triangles[12]) {\n    // return false;\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n   \n    for (int i = 0; i < 12; ++i) {\n        vec3 triangleNorm;\n        float triangleT = traceTriangle(pos, dir, triangles[i].p0, triangles[i].p1, triangles[i].p2, triangleNorm);\n        if (triangleT < dist) {\n            return true;\n        }\n    }\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal, Triangle triangles[12]) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS, triangles) ? 0.0 : 20.0 / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS, triangles) ? 0.0 : 10.0 / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int triangles_count = 12;\n    const float y_shift = 0.1;\n\n    const vec3 p00 = vec3(-1, -1. + y_shift, -1);\n    const vec3 p01 = vec3(1, -1. + y_shift, -1);\n    const vec3 p02 = vec3(1, 1. + y_shift, -1);\n    Triangle t0;\n    t0.p0 = p00;\n    t0.p1 = p01;\n    t0.p2 = p02;\n    \n    const vec3 p10 = vec3(-1, -1. + y_shift, 1);\n    const vec3 p11 = vec3(1, 1. + y_shift, 1);\n    const vec3 p12 = vec3(1, -1. + y_shift, 1);\n    Triangle t1;\n    t1.p0 = p10;\n    t1.p1 = p11;\n    t1.p2 = p12;\n    \n    const vec3 p20 = vec3(-1, -1. + y_shift, -1);\n    const vec3 p21 = vec3(1, 1. + y_shift, -1);\n    const vec3 p22 = vec3(-1, 1. + y_shift, -1);\n    Triangle t2;\n    t2.p0 = p20;\n    t2.p1 = p21;\n    t2.p2 = p22;\n    \n    const vec3 p30 = vec3(-1, -1. + y_shift, 1);\n    const vec3 p31 = vec3(-1, 1. + y_shift, 1);\n    const vec3 p32 = vec3(1, 1. + y_shift, 1);\n    Triangle t3;\n    t3.p0 = p30;\n    t3.p1 = p31;\n    t3.p2 = p32;\n    \n    const vec3 p40 = vec3(1, -1. + y_shift, -1);\n    const vec3 p41 = vec3(-1, -1. + y_shift, -1);\n    const vec3 p42 = vec3(1, -1. + y_shift, 1);\n    Triangle t4;\n    t4.p0 = p40;\n    t4.p1 = p41;\n    t4.p2 = p42;\n    \n    const vec3 p50 = vec3(-1, -1. + y_shift, -1);\n    const vec3 p51 = vec3(-1, -1. + y_shift, 1);\n    const vec3 p52 = vec3(1, -1. + y_shift, 1);\n    Triangle t5;\n    t5.p0 = p50;\n    t5.p1 = p51;\n    t5.p2 = p52;\n    \n    const vec3 p60 = vec3(1, 1. + y_shift, -1);\n    const vec3 p61 = vec3(1, 1. + y_shift, 1);\n    const vec3 p62 = vec3(-1, 1. + y_shift, -1);\n    Triangle t6;\n    t6.p0 = p60;\n    t6.p1 = p61;\n    t6.p2 = p62;\n    \n    const vec3 p70 = vec3(-1, 1. + y_shift, -1);\n    const vec3 p71 = vec3(1, 1. + y_shift, 1);\n    const vec3 p72 = vec3(-1, 1. + y_shift, 1);\n    Triangle t7;\n    t7.p0 = p70;\n    t7.p1 = p71;\n    t7.p2 = p72;\n    \n    const vec3 p80 = vec3(1, 1. + y_shift, 1);\n    const vec3 p81 = vec3(1, 1. + y_shift, -1);\n    const vec3 p82 = vec3(1, -1. + y_shift, -1);\n    Triangle t8;\n    t8.p0 = p80;\n    t8.p1 = p81;\n    t8.p2 = p82;\n    \n    const vec3 p90 = vec3(1, 1. + y_shift, 1);\n    const vec3 p91 = vec3(1, -1. + y_shift, -1);\n    const vec3 p92 = vec3(1, -1. + y_shift, 1);\n    Triangle t9;\n    t9.p0 = p90;\n    t9.p1 = p91;\n    t9.p2 = p92;\n    \n    const vec3 p100 = vec3(-1, -1. + y_shift, -1);\n    const vec3 p101 = vec3(-1, 1. + y_shift, -1);\n    const vec3 p102 = vec3(-1, 1. + y_shift, 1);\n    Triangle t10;\n    t10.p0 = p100;\n    t10.p1 = p101;\n    t10.p2 = p102;\n    \n    const vec3 p110 = vec3(-1, -1. + y_shift, -1);\n    const vec3 p111 = vec3(-1, 1. + y_shift, 1);\n    const vec3 p112 = vec3(-1, -1. + y_shift, 1);\n    Triangle t11;\n    t11.p0 = p110;\n    t11.p1 = p111;\n    t11.p2 = p112;\n    \n    Triangle triangles[] = Triangle[](t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11);\n    \n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 fireNorm;\n        float sph2T = traceFireball(curPos, curDir, 0.25, fireNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = fireNorm;\n            vec3 worldPos = t * curDir + curPos;\n            color = drawFire(uv);\n            materialType = EMISSION;\n           \n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        for (int i = 0; i < triangles_count; ++i) {\n            vec3 triangleNorm;\n            float triangleT = traceTriangle(curPos, curDir, triangles[i].p0, triangles[i].p1, triangles[i].p2, triangleNorm);\n            if (triangleT < t) {\n                // materialType = EMISSION;\n                vec3 worldPos = t * curDir + curPos;\n                // color = texture(iChannel3, worldPos.xz * worldPos.y).rgb;\n                t = triangleT;\n                normal = triangleNorm;\n                if (randVals.x < GLASS_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= vec3(0.5, 0.5, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = AIR_N;\n                    } else {\n                        nEnter = GLASS_N;\n                    }\n                }\n            }\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal, triangles);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}