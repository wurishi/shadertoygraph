{"ver":"0.1","info":{"id":"wdGcDm","date":"1602982168","viewed":378,"name":"mouse react","username":"mds2","description":"let the mouse drag some reaction diffusion stuff","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["mouse","cellular","reaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ERODE 1\n#define CHAOS_FILL 0 // set to 1 for more interesting fill patterns.  Looks very nice with color_to_val_3\n\nconst float diffuse_weight = 0.25; // higher means less diffusion.  set greater than 0 and less than 1\nconst float react_weight = 0.15; // reaction speed : don't exceed 0.25.  higher is faster reaction\n\n// in the function \"greatest\" there are two calls to \"color_to_val_4\"\n// change those to \"color_to_val_1\", \"color_to_val_2\" etc to get different effects\n\nvec2 to_uv(in vec2 in_pixels, in vec2 offset) {\n    return mod(in_pixels + offset, iResolution.xy) / iResolution.xy;\n\t// return 0.1 + mod(vec2(0.8) + in_pixels / iResolution.xy, vec2(0.9));\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    \n    vec4 color = texture(iChannel1, to_uv(p, vec2(0.0)));\n    \n    // color.rg = mod(10.0 * to_uv(p), vec2(1.0));\n    color.b = 1.0 - 0.5 * color.r - 0.5 * color.g;\n    \n    \n   \n    \n    color = diffuse_weight * texture(iChannel0, to_uv(p, vec2(0.0)));\n    \n    float w = 0.25 * (1.0 - diffuse_weight);\n    color = color +  w * texture(iChannel0, to_uv(p, vec2(1.1, 0.0)));\n    color = color +  w * texture(iChannel0, to_uv(p, vec2(0.0, 1.1)));\n    color = color +  w * texture(iChannel0, to_uv(p, vec2(-1.1, 0.0)));\n    color = color +  w * texture(iChannel0, to_uv(p, vec2(0.0, -1.1)));\n    \n#if ERODE\n    color.a = 1.0;\n#endif\n    \n\n    color = color / color.a;\n    \n    color.rgb = color.rgb + react_weight * (1.0 * color.rgb * color.gbr - color.rgb * color.brg);//  + 0.005;\n    \n    float delta = 1.5 - dot(color.rgb, vec3(1.0));\n\n    color += 0.005 * delta;\n    \n    float mouseNess = smoothstep(10.0, 0.0, length(p - iMouse.xy));\n    color.rgb = mix(color.rgb, vec3(0.0, 0.0, 1.0), mouseNess);\n \n    fragColor = vec4(color.rgb,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}