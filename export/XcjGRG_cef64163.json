{"ver":"0.1","info":{"id":"XcjGRG","date":"1704354740","viewed":107,"name":"starlight","username":"nayk","description":"cosmos, light, galaxy,universe","likes":2,"published":1,"flags":1,"usePreview":1,"tags":["light","light","galaxy","cosmos","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn, /* original https://www.shadertoy.com/view/lsyXDK https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR and other*/\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat random(float co)\n{\n    return fract(sin(co*12.989) * 43758.545);\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(30,53,71))*.5+.5)\n\nvec3 deform( in vec2 p, in float t )\n{\n    t *= 2.0;\n    \n    p += 0.5*sin( t*vec2(1.1,1.3)+vec2(0.0,0.5) );\n\n\tfloat a = atan( p.y, p.x );\n    float r = length( p );\n    \n    float s = r * (1.0+0.5*cos(t*1.7));\n\n    vec2 uv = 0.1*t + 0.05*p.yx + 0.05*vec2( cos(t+a*2.0),  \n                                             sin(t+a*2.0))/s;\n\n    return texture( iChannel0, 0.5*uv ).xyz;\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=rot2(iTime*0.05);// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nfloat noise( vec2 co ){\n    return fract( sin( dot( co.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n\n vec4 O = fragColor;\n vec2 C = fragCoord;\n  O=vec4(0);\n    vec3 n,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n   for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        n=g*d;\n       vec3 col = deform( n.xy, iTime );\n        n.z+=-iTime*1.0;\n       float c23 = random(10.*n.y);\n        a=30.;\n        n=mod(n-a,a*2.)-a;\n        s=4.;\n        for(int i=0;i++<8;){\n            n=.3-abs(n);\n            \n            n.x<n.z?n=n.zyx:n;\n            n.z<n.y?n=n.xzy:n;\n            n.y<n.x?n=n.zyx:n;\n            \n            s*=e=1.4+sin(iTime*.234)*.01;\n            n=abs(n)*e-\n                vec3(\n                    8.+cos(iTime*c23+2.1*cos(iTime*.205))*c23,\n                    101.+cos(iTime*.25)*5.,\n                    3.+cos(iTime*.25)\n                 )*col ;\n         }\n         g+=e=length(n.yz)/(s);\n        \n    }\n\t float u_brightness = 0.7;\n    float u_blobiness = 0.9;\n    float u_particles = 140.0;\n    float u_limit = 70.0;\n    float u_energy = 1.0 * 2.75;\n\n    vec2 position = ( fragCoord.xy / iResolution.x );\n    float t = iTime * u_energy;\n    \n    float a = 0.0;\n    float b = 0.0;\n    float c = 0.0;\n\n\n//    vec2 pos, center = vec2( 0.0, 0.0 * (iResolution.y / iResolution.x) );\n\n//    center=vec2(0.15* (iResolution.y / iResolution.x),0.15* (iResolution.y / iResolution.x));\n\n    vec2 pos;\n//    vec2 center = iResolution.xy * 0.0;\n\n    vec2 center = vec2( 0.5, 0.5 * (iResolution.y / iResolution.x) );\n\n    float na, nb, nc, nd, d2;\n    float limit = u_particles / u_limit;\n    float step = 1.0 / u_particles;\n    float n2 = 0.0;\n    \n    for ( float i = 0.0; i <= 1.0; i += 0.025 ) {\n\n        if ( i <= limit ) {\n\n            vec2 np = vec2(n2, 1-1);\n            \n            na = noise( np * 1.1 );\n            nb = noise( np * 2.8 );\n            nc = noise( np * 2.7 );\n            nd = noise( np * 3.2 );\n\n            pos = center;\n            pos.x += sin(t*na) * cos(t*nb) * tan(t*na*0.15) * 0.3;\n            pos.y += tan(t*nc) * sin(t*nd) * 0.1;\n            \n            d2 = pow( 1.6*na / length( pos - position ), u_blobiness );\n            \n            if ( i < limit * 0.3333 ) a += d2;\n            else if ( i < limit * 0.5 ) b += d2;\n            else c += d2;\n\n\n            n2 += step;\n        }\n    }\n\n    vec3 col = vec3(a*c,b*c,a*b) * 0.0002 * u_brightness;\n   \n    \n\tvec3 from=vec3(1.,.5,0.5)+O.xyz*col;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n  \n\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=O;\n    fragColor+=vec4(col,1.);\n      fragColor*= vec4(cheap_star(uv,anim) * vec3(0.55,0.5,0.555), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}