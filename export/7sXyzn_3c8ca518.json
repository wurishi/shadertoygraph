{"ver":"0.1","info":{"id":"7sXyzn","date":"1641577899","viewed":71,"name":"Fractal cube","username":"Proger","description":"â˜º","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot( in float a ) {\n\tfloat c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\t\n}\n\nfloat crossDist( in vec3 p ) {\n    vec3 absp = abs(p);\n    // get the distance to the closest axis\n    float maxyz = max(absp.y, absp.z);\n    float maxxz = max(absp.x, absp.z);\n    float maxxy = max(absp.x, absp.y);\n    float cr = 1.0 - (step(maxyz, absp.x)*maxyz+step(maxxz, absp.y)*maxxz+step(maxxy, absp.z)*maxxy);\n    // cube\n    float cu = max(maxxy, absp.z) - 3.0;\n    // remove the cross from the cube\n    return max(cr, cu);\n}\nfloat fractal( in vec3 p ) {\n    float scale = 1.0;\n    float dist = 0.0;\n    for (int i = 0 ; i < 5 ; i++) {\n        dist = max(dist, crossDist(p)*scale);\n        p = fract((p-1.0)*0.5) * 6.0 - 3.0;\n        scale /= 3.0;\n    }\n    return dist;\n}\nvec3 cube = vec3(0, 0, 0);\nfloat sdf_cube(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdf_sphere(vec3 p, vec4 sp){\n    return length(p - sp.xyz) - sp.w;\n}\nfloat GetDist(vec3 p){\n    float box = fractal(p - cube);\n    return box;\n}\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.0;\n    for(int i = 0; i < 70; i++){\n        vec3 p = ro + dO * rd;\n        float ds = GetDist(p);\n        dO += ds;\n        if(ds < 0.003) return dO;\n        if(dO > 19.) return 0.;\n    }\n    return 0.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0, 0, -13);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    vec2 mouse=(iMouse.xy / iResolution.xy) * 0.5;\n\tif (iMouse.z < 1.0) mouse = vec2(0.0);\n\t\n\tmat2 rotxz = rot(sin(iTime*0.3-0.5)*0.8+mouse.x*5.0+2.5);\n\tmat2 rotxy = rot(cos(iTime*0.3-0.5)*0.8+mouse.y*5.0);\n\t\n\tro.xy *= rotxy;\n\tro.xz *= rotxz;\n\trd.xy  *= rotxy;\n\trd.xz  *= rotxz;\n    \n    float d = RayMarch(ro, rd);\n    vec3 color = vec3(1. - (d/20.));\n    if(d != 0.)fragColor = vec4(color,1);\n    else fragColor = vec4(0);\n}","name":"Image","description":"","type":"image"}]}