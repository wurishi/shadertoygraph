{"ver":"0.1","info":{"id":"MlBGDt","date":"1434113543","viewed":464,"name":"distance field fur test pint","username":"public_int_i","description":"attempt at fur, uses iqs distance derivative","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["distance","fur","field"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//by Ethan Alexander Shulman known as public_int_i 10100101010\n//This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\n//http://creativecommons.org/licenses/by-nc-sa/4.0/\n\n#define FOV_SCALE .6\n#define VIEW_DIST 5000.\n#define HAIR_PRECISION .4\n#define HAIR_DER_EPSILON .001\n#define HAIR_CUTOFF -15.\n#define HAIR_CUTOFF_FADE .2\n#define HAIR_OPACITY .5\n#define HAIR_NOISE_INTENSITY .4\n#define HAIR_COLOR_MULT .1\nconst vec3 hairColor = vec3(1.,.8,.3);\n\nconst vec2 wallSize = vec2(2.);\nvec3 lightDir = normalize(vec3(10.,30.,10.));\n\n//distance multiplier\n#define pm db *= 1.+(min(0.,db)*10000000.)\n//plane clip\n#define cp(p,s) db *= 1.+length(max(abs(p)-s,0.))*10000000.\n//plane clip position\n#define cc(p,d,c) ba = (p+d*db)-c\n//distance compare\n#define dc lt = float(db<d); lt1 = 1.-lt; d = d*lt1+db*lt\n//normal compare\n#define ns(n) nrm = lt1*nrm+lt*n\nfloat trace(in vec3 rp, in vec3 rd, inout vec3 nrm) {\n    vec2 ba;\n    float lt,lt1;\n    float d;\n    float nb = -2.-rp.y;//floor\n    float db = nb/rd.y;\n    pm;\n    d = db;\n    nrm = vec3(0.,sign(nb),0.);\n    \n    return d;\n}\n\nfloat hair_df(in vec3 rp) {\n    vec3 p = rp*vec3(2.,1.,2.);\n    p.x += cos(rp.z*.47412);\n    p.z += cos(rp.x*.6432);\n    \n    p.xz += vec2(cos(floor(rp.z*.5)),\n                 cos(floor(rp.x*.5)))*rp.y*.4;\n    \n    return max(0.,(cos(p.x*1.4)+cos(p.z*1.6))*p.y*.5-1.5);\n}\nfloat hair_der(in vec3 rp) {\n    return max(0.,(hair_df(rp+lightDir*HAIR_DER_EPSILON)-hair_df(rp))/HAIR_DER_EPSILON);\n}\n\nfloat hash(in vec3 p) {\n    return cos(p.x*56525.2175+p.y*23234.34857+p.z*23457.34546)*.5+.5;\n}\n\nvec4 scene(inout vec3 rp, inout vec3 rd) {\n    vec4 c;\n    vec3 nrm;\n    \n \tfloat d = trace(rp,rd,nrm);\n    if (d < VIEW_DIST) {\n        rp += d*rd;\n            \n        float r;\n        float b = 0.,cc = 0.;\n        for (int i = 0; i < 32; i++) {\n            d = hair_df(rp);\n            r = max(0.,(hair_df(rp+lightDir*HAIR_DER_EPSILON)-d)/HAIR_DER_EPSILON);\n            \n            b += (d*.4+(d*r*.6))*min(1.,(abs(HAIR_CUTOFF-max(HAIR_CUTOFF,rp.y))*HAIR_CUTOFF_FADE));\n            cc += d*HAIR_OPACITY;\n            \n            if (cc > .99) break;\n            rp += (HAIR_PRECISION + HAIR_PRECISION*HAIR_NOISE_INTENSITY*hash(floor(rp*10.)))*rd;\n        }\n        c = pow(max(0.,1.-b*HAIR_COLOR_MULT),2.)*vec4(hairColor,1.);\n    } else {\n\t\tc = texture(iChannel0,rd);\n    }\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(.5);\n    uv.y *= iResolution.y/iResolution.x;\n    \n    float mX = iMouse.x/iResolution.x*6.3;\n    vec3 rp = vec3(sin(mX)*15.,(iMouse.y/iResolution.y-.1)*20.,cos(mX)*15.);\n    if (iMouse.w < 1.) rp = vec3(sin(iTime*.1)*15.,5.,cos(iTime*.1)*12.);\n    vec3 rd = normalize(-rp);\n    vec3 rr = cross(vec3(0.,1.,0.),rd);\n    rr = rd = normalize(rd*FOV_SCALE + uv.x*rr + uv.y*cross(rd,rr));\n    rp.y += 4.;\n    \n    fragColor = scene(rp,rd);\n}","name":"","description":"","type":"image"}]}