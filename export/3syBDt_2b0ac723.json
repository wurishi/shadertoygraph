{"ver":"0.1","info":{"id":"3syBDt","date":"1608193231","viewed":167,"name":"Cloud Shading","username":"Hjk","description":"fork from https://www.shadertoy.com/view/WdXGRj#","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["cloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// noise\n// Volume raycasting by XT95\n// https://www.shadertoy.com/view/lss3zr\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.12500*noise( p ); p = m*p*2.01;\n    f += 0.06250*noise( p );\n    return f;\n}\n\nfloat numericalMieFit(float costh)\n{\n    //return 3.0 / (16.0 * 3.14159265359) * (1.0 + costh * costh) + 0.255;\n    // This function was optimized to minimize (delta*delta)/reference in order to capture\n    // the low intensity behavior.\n    float bestParams[10];\n    bestParams[0]=9.805233e-06;\n    bestParams[1]=-6.500000e+01;\n    bestParams[2]=-5.500000e+01;\n    bestParams[3]=8.194068e-01;\n    bestParams[4]=1.388198e-01;\n    bestParams[5]=-8.370334e+01;\n    bestParams[6]=7.810083e+00;\n    bestParams[7]=2.054747e-03;\n    bestParams[8]=2.600563e-02;\n    bestParams[9]=-4.552125e-12;\n    \n    float p1 = costh + bestParams[3];\n    vec4 expValues = exp(vec4(bestParams[1] *costh+bestParams[2], bestParams[5] *p1*p1, bestParams[6] *costh, bestParams[9] *costh));\n    vec4 expValWeight= vec4(bestParams[0], bestParams[4], bestParams[7], bestParams[8]);\n    return dot(expValues, expValWeight) * 0.25;\n}\nfloat numericalMieFitMultiScatter() {\n\t// This is the acossiated multi scatter term used to simulate multi scatter effect.\n\treturn 0.1026;\n}\n\nfloat Roberts1(int n) {\n    const float g = 1.6180339887498948482;\n    const float a = 1.0 / g;\n    return  fract(0.5 + a * float(n));\n}\n\nvec2 Roberts2(int n) {\n    const float g = 1.32471795724474602596;\n    const vec2 a = vec2(1.0 / g, 1.0 / (g * g));\n    return fract(0.5 + a * vec2(n));\n}\n\nvec3 UniformSampleSphere(const vec2 e) {\n    float Phi = 2. * 3.14159265359 * e.x;\n    float CosTheta = 1. - 2. * e.y;\n    float SinTheta = sqrt(1. - CosTheta * CosTheta);\n\n    vec3 H;\n    H.x = SinTheta * cos(Phi);\n    H.y = SinTheta * sin(Phi);\n    H.z = CosTheta;\n\n    return H;\n}\n\n\n\n/////////////////////////////////////\n\nfloat stepUp(float t, float len, float smo)\n{\n  float tt = mod(t += smo, len);\n  float stp = floor(t / len) - 1.0;\n  return smoothstep(0.0, smo, tt) + stp;\n}\n\n// iq's smin\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\nfloat map( in vec3 p )\n{\n    vec3 q = p - vec3(0.0,0.5,1.0)*iTime;\n    float f = fbm(q);\n    float s1 = 1.0 - length(p * vec3(0.5, 1.0, 0.5)) + f * 2.2;\n    float s2 = 1.0 - length(p * vec3(0.1, 1.0, 0.2)) + f * 2.5;\n    float torus = 1. - sdTorus(p * 2.0, vec2(6.0, 0.005)) + f * 3.5;\n    float s3 = 1.0 - smin(smin(\n                           length(p * 1.0 - vec3(cos(iTime * 3.0) * 6.0, sin(iTime * 2.0) * 5.0, 0.0)),\n                           length(p * 2.0 - vec3(0.0, sin(iTime) * 4.0, cos(iTime * 2.0) * 3.0)), 4.0),\n                           length(p * 3.0 - vec3(cos(iTime * 2.0) * 3.0, 0.0, sin(iTime * 3.3) * 7.0)), 4.0) + f * 2.5;\n    \n    float t = mod(stepUp(iTime, 4.0, 1.0), 4.0);\n    \n    float d = mix(s1, s2, clamp(t, 0.0, 1.0));\n    d = mix(d, torus, clamp(t - 1.0, 0.0, 1.0));\n    d = mix(d, s3, clamp(t - 2.0, 0.0, 1.0));\n    d = mix(d, s1, clamp(t - 3.0, 0.0, 1.0));\n    \n    return max(0.0, clamp((d - 0.01) * 2., 0., 1.) * 16.);\n}\n\nfloat jitter;\n\n#define MAX_STEPS 256\n#define SHADOW_STEPS 64\n#define VOLUME_LENGTH 30.\n#define SHADOW_LENGTH 2.\n\n\n\nvec4 cloudMarch(vec3 p, vec3 ray)\n{\n    float density = 0.;\n\n    float stepLength = VOLUME_LENGTH / float(MAX_STEPS);\n    vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 bilight = normalize(cross(light, vec3(0.,1.,0.)));\n    vec3 talight = cross(bilight, light);\n    float phase = numericalMieFit(dot(ray, light));\n    float multiScatterPhase = phase +  numericalMieFitMultiScatter();\n    float dotSV = 1. - (dot(ray, light) + 1.) / 2.;\n\n    vec4 sum = vec4(0., 0., 0., 1.);\n\n    vec3 pos = p + ray * jitter * stepLength;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        if (sum.a < 0.01) {\n            break;\n        }\n        float d = map(pos);\n    \n        if( d > 0.001)\n        {\n            float shadow = 0.;        \n            int shadowStep = int(mix(float(SHADOW_STEPS / 4), float(SHADOW_STEPS), sum.a));\n            float shadowStepLength = SHADOW_LENGTH / float(shadowStep);\n            vec3 lpos = pos + light * jitter * shadowStepLength;\n            for (int s = 0; s < shadowStep; s++)\n            {\n                lpos += light * shadowStepLength;\n                float len = float(s) * shadowStepLength * 1.;\n                vec2 rnd = fract(Roberts2(s) + jitter);\n                vec3 offset = (sin(rnd.x) * bilight + cos(rnd.x) * talight) * rnd.y;\n                float lsample = map(lpos + len * offset);\n                shadow += lsample;\n            }\n    \n            density = d * stepLength;\n            density = 1. - exp(-density);\n            shadow = (1. - exp(-shadow * shadowStepLength * 2.) * dotSV) * exp(-shadow * shadowStepLength * 0.1);\n            float msPhase = multiScatterPhase;\n            vec3 s = shadow * msPhase * vec3(1.1, .9, .9) * 10.;\n            sum.rgb += vec3(s * density) * sum.a;\n\n            vec3 ambOffset = fract(Roberts1(i) + jitter) * UniformSampleSphere(fract(Roberts2(i) + jitter)) * 2.;\n            \n            sum.rgb += 0.4 * density * sum.a * mix(vec3(.4, .7, 1.3), vec3(.7, .7, 1.), clamp((pos.y + 2.) / 3., 0., 1.));\n            sum.a *= 1. - density;\n        }\n        \n        \n        pos += ray * stepLength;\n    }\n    \n    sum.rgb *= 2.;\n    return sum;\n}\n\nmat3 camera(vec3 ro, vec3 ta, float cr )\n{\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 aces_tonemap(vec3 color){  \n    mat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n    );\n    mat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n    );\n    vec3 v = m1 * color;    \n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    jitter = hash(p.x + p.y * 57.0 + iTime);\n    float rot = iTime * .333 + ((iMouse.x / iResolution.x) - 0.5) * 16.;\n    vec3 ro = vec3(cos(rot) * 10.0, ((iMouse.y / iResolution.y) - 0.5) * -25., sin(rot) * 10.0);\n    vec3 ta = vec3(0.0, 1., 0.0);\n    mat3 c = camera(ro, ta, 0.0);\n    vec3 ray = c * normalize(vec3(p, 1.75));\n    vec4 col = cloudMarch(ro, ray);\n    float sundot = clamp(dot(ray,normalize(vec3(1.0, 1.0, 1.0))),0.0,1.0);\n    vec3 result = col.rgb + (mix(vec3(0.3, 0.6, 1.0), vec3(0.05, 0.35, 1.0), p.y + 0.75) + 0.8*vec3(1.0,0.7,0.3)*pow(sundot, 4.0)) * col.a;\n        \n    result = aces_tonemap(result);\n    \n    fragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}