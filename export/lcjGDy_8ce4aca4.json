{"ver":"0.1","info":{"id":"lcjGDy","date":"1704602604","viewed":19,"name":"Sin Based Noise","username":"outercloudstudio","description":"This shader uses a sin based noise, designed to mimic perlin noise to smoothly interpolate over random colors.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float normalizedSin(float x) {\n    return sin(x) / 2.0 + 0.5;\n}\n\nfloat noise(float x, int detail) {\n    float value = x;\n    \n    for(int i = 1; i < detail; i++)\n    {\n        value = sin(value * (float(i) + 1.0) + x);\n    }\n    \n    return value / 2.0 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(+uv.xyx+vec3(0,2,4));\n    \n    float r = noise(iTime / 100.0, 6);\n    float g = noise(iTime / 100.0 + 1.0, 6);\n    float b = noise(iTime / 100.0 + 2.0, 6);\n    \n    // Output to screen\n    fragColor = vec4(r, g, b, 1.0);\n}","name":"Image","description":"","type":"image"}]}