{"ver":"0.1","info":{"id":"4f3BWS","date":"1733410298","viewed":18,"name":"rotate colorful disk","username":"zhizi","description":"rotate colorful disk.Demonstrate HSB and polar coordinates","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["polarcoordinates","hsb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265857;\n\nvec3 hsb2rgb(vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\nfloat circle(vec2 uv,vec2 center,float r){\n    float dist = distance(uv,center);\n    return step(dist,r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 将像素坐标映射到[-1, 1]范围\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n\n    float radius = length(uv)*1.5;       // 距离中心的半径\n    float speed = 2.0; //转动速度\n    float angle = atan(uv.x, uv.y)+iTime*speed;  // 计算角度（弧度）\n    \n    // 将角度转换为 [0, 1] 的色相\n    float hue = mod(angle / (2.0 * 3.14159) + 0.5, 1.0);\n    float saturation = radius <= 1.0 ? radius : 0.0; // 超出圆形区域设为 0\n    float brightness = 1.0; // 固定亮度\n    \n    vec3 color = hsb2rgb(vec3(hue, saturation, brightness));\n    \n    \n    //内部圆圈半径\n    float inner_r = 0.2;\n    float innercircle = circle(uv,vec2(0.),inner_r);\n\t vec3 col2 = vec3(innercircle);\n\n    // Time varying pixel color\n    vec3 col = (1.0-color-col2);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}