{"ver":"0.1","info":{"id":"4fScR1","date":"1721998705","viewed":148,"name":"fft web lattice","username":"zemi","description":"fft","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FAR 2.\n\n\n//adapt from Shane‘s Perplex Web Lattice\nint id = 0; \n\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n    n = max((abs(n) - .2), .001);\n    n /= (n.x + n.y + n.z );\n    p = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    return p*p;\n}\n\nfloat n3D(vec3 p){\n    const vec3 s = vec3(7, 157, 113);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); \n}\n\nvec2 hash22(vec2 p) { \n    float n = sin(dot(p, vec2(41, 289)));\n    p = fract(vec2(262144, 32768)*n); \n    return sin( p*6.2831853 + iTime )*.45 + .5; \n}\n\nfloat Voronoi(in vec2 p){\n    vec2 g = floor(p), o; p -= g;\n    vec3 d = vec3(1);\n    for(int y = -1; y <= 1; y++){\n        for(int x = -1; x <= 1; x++){\n            o = vec2(x, y);\n            o += hash22(g + o) - p;\n            d.z = dot(o, o); \n            d.y = max(d.x, min(d.y, d.z));\n            d.x = min(d.x, d.z); \n        }\n    }\n    return max(d.y/1.2 - d.x*1., 0.)/1.2;\n}\n\nfloat heightMap(vec3 p){\n    id =0;\n    float c = Voronoi(p.xy*4.);\n    if (c<.07) {c = smoothstep(0.7, 1., 1.-c)*.2; id = 1; }\n    return c;\n}\n\nfloat m(vec3 p){\n    float h = heightMap(p);\n    return 1. - p.z - h*.1;\n}\n\nvec3 nr(vec3 p, inout float edge) { \n    vec2 e = vec2(.005, 0);\n    float d1 = m(p + e.xyy), d2 = m(p - e.xyy);\n    float d3 = m(p + e.yxy), d4 = m(p - e.yxy);\n    float d5 = m(p + e.yyx), d6 = m(p - e.yyx);\n    float d = m(p)*2.;\n    edge = abs(d1 + d2 - d) + abs(d3 + d4 - d) + abs(d5 + d6 - d);\n    edge = smoothstep(0., 1., sqrt(edge/e.x*2.));\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\nvec3 eMap(vec3 rd, vec3 sn){\n    vec3 sRd = rd; \n    rd.xy -= iTime*.25;\n    rd *= 3.;\n    float c = n3D(rd)*.57 + n3D(rd*2.)*.28 + n3D(rd*4.)*.15;\n    c = smoothstep(0.5, 1., c);\n    vec3 col = vec3(min(c*1.5, 1.), pow(c, 2.5), pow(c, 12.)).zyx;\n    return mix(col, col.yzx, sRd*.25+.25); \n}\n\nvec2 fftTransform(vec2 p, float time, float offset, float amplitude) {\n    float frequency = 0.0;\n    float angle = 0.0;\n    for (int i = 0; i < 10; i++) {\n        float phase = float(i) / 10.0;\n        float sample1 = texture(iChannel1, vec2(0.01 + phase * 0.5, 0.25)).x;\n        float weight = 1.0 + 0.4 * sample1 * sample1;\n        vec2 q;\n        q.x = sin(time * 0.015 + 0.67 * sample1 * (1.0 + amplitude) + offset + float(i) * 121.45) * 0.5 + 0.5;\n        q.y = cos(time * 0.016 + 0.63 * sample1 * (1.0 + amplitude) + offset + float(i) * 134.76) * 0.5 + 0.5;\n        vec2 d = p - q;\n        float distance = 1.0 / (0.01 + dot(d, d));\n        frequency += weight * 0.1 * distance;\n        angle += 0.5 + 0.5 * sin(2.0 * atan(d.y, d.x));\n    }\n    return vec2(frequency, angle);\n}\n\nvoid mainImage(out vec4 c, vec2 u){\n    vec3 r = normalize(vec3(u - iResolution.xy*.5, iResolution.y)), \n         o = vec3(0), l = o + vec3(0, 0, -1);\n    vec2 a = sin(vec2(1.570796, 0) + iTime/8.);\n    r.xy = mat2(a, -a.y, a.x) * r.xy;\n    float d, t = 0.;\n    for(int i=0; i<32;i++){\n        d = m(o + r*t);\n        if(abs(d)<0.001 || t>FAR) break;\n        t += d*.7;\n    }\n    t = min(t, FAR);\n    c = vec4(0);\n    float edge = 0.;\n    if(t<FAR){\n        vec3 p = o + r*t, n = nr(p, edge);\n        l -= p; \n        d = max(length(l), 0.001); \n        l /= d;\n        float hm = heightMap(p);\n        vec3 tx = tex3D(iChannel0, (p*2. + hm*.2), n);\n        c.xyz = vec3(1.)*(hm*.8 + .2);\n        c.xyz *= vec3(1.5)*tx;\n        c.x = dot(c.xyz, vec3(.299, .587, .114));\n        if (id==0) c.xyz *= vec3(min(c.x*1.5, 1.), pow(c.x, 5.), pow(c.x, 24.))*2.;\n        else c.xyz *= .1;\n        float df = max(dot(l, n), 0.);\n        float sp = pow(max(dot(reflect(-l, n), -r), 0.), 32.);\n        if(id == 1) sp *= sp;\n        c.xyz = c.xyz*(df + .75) + vec3(1, .97, .92)*sp + vec3(.5, .7, 1)*pow(sp, 32.);\n        vec3 em = eMap(reflect(r, n), n);\n        if(id == 1) em *= .5;\n        c.xyz += em;\n        c.xyz *= 1. - edge*.8;\n        c.xyz *= 1./(1. + d*d*.125);\n    }\n    // 应用FFT变换\n    vec2 fft = fftTransform(u / iResolution.xy, iTime, 0.0, 1.0);\n    c.rgb *= fft.x;\n    c = vec4(sqrt(clamp(c.xyz, 0., 1.)), 1.);\n}\n","name":"Image","description":"","type":"image"}]}