{"ver":"0.1","info":{"id":"MXffzS","date":"1728783110","viewed":60,"name":"Project 1 - spheres","username":"gabby934","description":"project 1 for VIZA 654","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi=3.14;\n    float gamma = pi;\n\n    //reads in image\n    vec2 p = fragCoord/iResolution.xy;\n    vec3 col = texture( iChannel0, p ).xyz;\n\n    //Mouse \n    // Normalize mouse height to [0, 1]\n    float mouseH = iMouse.y / iResolution.y;\n    gamma = mouseH * 2.0;\n    \n    float mouseW = iMouse.x/ iResolution.x;\n    \n\n    //Vector to Raster\n    vec4 color = texture(iChannel0, p);\n    // Apply gamma correction\n    color.rgb = pow(color.rgb, vec3(1.0 / gamma));\n\n     // Color grading\n    vec3 grade = vec3(mouseW, 1, 0.5); \n    color.rgb *= grade; // Multiply the color by the grading\n\n    \n    //outputs to screen\n    //fragColor = vec4( col, 1.0 );\n    fragColor = color;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float pi=3.14;\n    vec3 col = 0.8* vec3(1.0,0.9,0.0) + 0.2*cos(iTime+uv.yxx+vec3(0,3,4));\n    float PeriodT=20.00;    \n    \n    float func0,func1,func2,func, func3;\n    //float theta=0.125*iMouse.x*iTime; //Temporal Aliasing mouse control\n    //float theta=5.0*iTime;  //Changing with time\n    float theta=30.0;\n    float alpha=0.50;    \n    \n    vec2 p0 = vec2(iMouse.x,iMouse.y);\n    vec2 p1 = vec2(250.0,150.0);  \n    vec2 p2 = vec2(500.0,200.0);\n    vec2 p3 = vec2(250.0,150.0);\n   \n    vec2 dir0 = vec2(cos(pi*theta/180.0), sin(pi*theta/180.));\n    float r0=80.00; //radius\n    float r1=75.00; //radius\n    float r2=25.0;\n    float r3=50.0;\n   \n    //func0 =dot((fragCoord-p0), dir0); //half-plane\n    func0 =sqrt(dot((fragCoord-p0),(fragCoord-p0)))-r0; //circle\n    func1 =sqrt(dot((fragCoord-p1),(fragCoord-p1)))-r1; //circle\n    \n    func2 =sqrt(dot((fragCoord-p2),(fragCoord-p2)))-r2;\n    func3 =sqrt(dot((fragCoord-p3),(fragCoord-p3)))-r3;\n    vec3 col0 = vec3(0.85,0.85,0.0);\n    vec3 col1 = vec3(0.1,0.9,0.1);\n    vec3 col2 = vec3(0.1,0.1,0.9);\n    vec3 col3 = vec3(0.9,0.1,0.1);\n    vec3 col4 = vec3(0.1,0.1,0.1);\n\n    func=func0;  if(func<0.0) col = col/2.0;\n    if(func> func1) {func=func1; col =  col/1.5; if(func<0.0) col = col/2.0;}\n    if(func> func2) {func=func2; col =  col/2.0; if(func<0.0) col = col/2.0;}\n    if(func> func3) {func=func3; col =  col3; if(func<0.0) col = col/2.0;}\n      \n    if(func<=0.0) {col =  vec3(0.125,0.125,0.125);}\n    \n    func=func0;\n   \n    func=1.0/(1.0+alpha)*(func0-func1+sqrt(func0*func0+func1*func1+2.0*alpha*func0*func1));  //Rvachev Set Difference\n  \n    if(func<=0.0) {col =  vec3(0.9,0.3,0.1);}\n    //func =sin(2.0*pi*func/ PeriodT);\n    if(func<=0.0) {col =  vec3(1.0,0.0,1.0);}\n    \n  \n    \n    fragColor = vec4(col,1.0);      // Output to screen\n    }","name":"Buffer A","description":"","type":"buffer"}]}