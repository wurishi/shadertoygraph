{"ver":"0.1","info":{"id":"4fKSzK","date":"1715463331","viewed":54,"name":"Random Rectangle Tiling by 1d CA","username":"jt","description":"Generate a random rectangle tiling by a one-dimensional cellular automaton.\nEach tile can contain none, a left / edge, a right \\ edge, or a crossing X.\nIf two edges meet, only one continues (randomly).\nAn edge can sprout an orthogonal edge randomly..","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["random","rectangle","1d","cellular","tiling","sweep","automaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// IMAGE (look at BUFFER A for the relevant source code)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iMouse.z > 0.0)\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    else\n        fragColor = vec4(all(lessThan(texelFetch(iChannel0, ivec2(fragCoord), 0).xy, vec2(0.5))));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// BUFFER A\n\n// https://www.shadertoy.com/view/4fKSzK Random Rectangle Tiling by 1d CA, 2024 by jt\n\n// Generate a random rectangle tiling by a one-dimensional cellular automaton.\n// Each tile can contain none, a left / edge, a right \\ edge, or a crossing X.\n// If two edges meet, only one continues (randomly).\n// An edge can sprout an orthogonal edge randomly.\n// (Only the upper left and upper right cells are sampled)\n\n// NOTE: The probabilities of sprouting could be varied,\n//       also crossings (both edges continue) could be allowed.\n\n// Click to show edge types.\n\n// Previous approach: https://www.shadertoy.com/view/dttBRM particle random rectangle tiling\n\n// tags: random, rectangle, 1d, cellular, tiling, sweep, automaton\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17u;\n    x *= 0xed5ad4bbu;\n    x ^= x >> 11u;\n    x *= 0xac4c1b51u;\n    x ^= x >> 15u;\n    x *= 0x31848babu;\n    x ^= x >> 14u;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n\nuint uhash(uvec2 v)\n{\n    return HASH(v.x + HASH(v.y));\n}\n\nbool bhash(uvec2 v)\n{\n    return (uhash(v) & 1u) != 0u;\n}\n\nbool bhash(ivec2 v)\n{\n    return bhash(uvec2(v));\n}\n\nbvec2 tile(ivec2 p)\n{\n    return greaterThanEqual(texelFetch(iChannel0, p, 0).xy, vec2(0.5));\n}\n\n#define RES_EXP 3\n//#define RES_EXP 4\n\nbvec2 random_rectangle_tiling(ivec2 p) // https://www.shadertoy.com/view/4fKSzK Random Rectangle Tiling by 1d CA, by jt\n{\n    if(p.x * 2 == int(iResolution.x) && p.y == int(iResolution.y) - 1) // seed\n        return bvec2(true);\n\n    bool node = (p.y & ((1<<RES_EXP)-1)) == 1;\n\n    bool left = tile(p + ivec2(-1, +1)).x;\n    bool right = tile(p + ivec2(+1, +1)).y;\n\n    bvec2 d = bvec2(false);\n\n    if(left && right) // edges meet\n    {\n        if(bhash(p)) // continue one edge in random direction\n            d.x = true;\n        else\n            d.y = true;\n    }\n    else\n    {\n        if(left)\n        {\n            d.x = true; // continue edge\n            if(node && bhash(p)) d.y = true; // orthogonal sprout\n        }\n        if(right)\n        {\n            d.y = true; // continue edge\n            if(node && bhash(p)) d.x = true; // orthogonal sprout\n        }\n    }\n\n    return d;\n}\n/*\n// somewhat compactified\nbvec2 random_rectangle_tiling(ivec2 p) // https://www.shadertoy.com/view/4fKSzK Random Rectangle Tiling by 1d CA, by jt\n{\n    if(p.x * 2 == int(iResolution.x) && p.y == int(iResolution.y) - 1) // seed\n        return bvec2(1);\n\n    bool node = (p.y & ((1<<RES_EXP)-1)) == 1;\n\n    bool left = tile(p + ivec2(-1, +1)).x;\n    bool right = tile(p + ivec2(+1, +1)).y;\n\n    return left ? right ? bhash(p) ? bvec2(1,0) : bvec2(0,1) // continue one edge in random direction\n          : bvec2(1, node && bhash(p)) // continue edge & orthogonal sprout\n          : right ? bvec2(node && bhash(p), 1) // continue edge & orthogonal sprout\n          : bvec2(0);\n}\n*/\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if(iFrame < 1)\n    {\n        fragColor = vec4(0); // initialize\n    }\n    else\n    {\n        ivec2 p = ivec2(fragCoord);\n        vec2 f = vec2(random_rectangle_tiling(p));\n\n        fragColor = vec4(f,0,1);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}