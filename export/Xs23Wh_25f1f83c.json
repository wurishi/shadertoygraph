{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat red = (iMouse.x >= fragCoord.x) ? 1.0 : 0.0;\n\tfloat green = (iMouse.y >= fragCoord.y) ? 1.0 :0.0;\n\t\n\tvec3 color = vec3(red,green,0.0);\n\tfloat alpha = 1.0;\n\t\n\tfragColor = vec4(color,alpha);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xs23Wh","date":"1387170309","viewed":501,"name":"Mouse Coordinates","username":"rgbk","description":"CLICK & DRAG\n\nThis demonstrates how a fragment shader works. If you've never seen GLSL before, understanding this shader might be a good first step to understanding parallel processing. Each pixel asks itself where the mouse is and chooses a color.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mouse"],"hasliked":0,"parentid":"","parentname":""}}