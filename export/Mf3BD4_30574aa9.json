{"ver":"0.1","info":{"id":"Mf3BD4","date":"1733099071","viewed":99,"name":"HW2 GRAPHICS","username":"fxsbt","description":"Ball with shadows in a room.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 8.0;\nconst float PRECISION = 1e-3;\nconst float LH = -2.0 - PRECISION;\nconst float RH = 2.0 + PRECISION;\nconst float LD = -2.0 - PRECISION;\nconst float RD = 6.0 + PRECISION;\nconst float LV = -1.0 - PRECISION;\nconst float RV = 3.0 + PRECISION;\nconst float RAD = 1.0;\nconst vec3 SPHERE_CENTER = vec3(0.0, 1.0, -1.0);\n\n\nfloat shadowAmount(vec3 lightPos, vec3 surfPos) {\n    vec3 lightDir = surfPos - lightPos;\n    vec3 radDir = SPHERE_CENTER - lightPos;\n    float angleCos = dot(normalize(lightDir), normalize(radDir));\n    float doubleAngleCos = 2.0 * pow(angleCos, 2.0) - 1.0;\n    float len = sqrt(pow((SPHERE_CENTER.x - lightPos.x), 2.0) + pow((SPHERE_CENTER.y - lightPos.y), 2.0) + pow((SPHERE_CENTER.z - lightPos.z), 2.0));\n    float difference = (2.0 * pow(len, 2.0) - 2.0 * pow(len, 2.0) * doubleAngleCos) / 2.0;\n    if (difference < RAD) {\n        if (angleCos < 0.0) {\n            return 1.5;\n        }\n        return 0.3;\n    }\n    return 1.0;\n}\n\nbool isInRoom(vec3 pos) {\n    return pos.x > LH && pos.x < RH && pos.z > LD && pos.z < RD && pos.y > LV && pos.y < RV;\n}\n\nvec4 rayPlaneIntersection(float plane, vec3 ro, vec3 rd, vec3 lightPos, vec3 N, vec3 col, float xdiv) {\n    if (plane > 0.0) {\n        vec3 pos = ro + rd * plane;\n        if (isInRoom(pos)) {\n            float shadow = shadowAmount(lightPos, pos);\n            vec3 L = normalize(lightPos - pos);\n            float diffuse = max(0.0, dot(N, L));\n            \n            if (xdiv == 1.0) {\n                return vec4(col * diffuse * shadow, 1.0);\n            }\n            \n            vec3 planePoint = vec3(0., 0., 0.);\n            vec3 tangent = normalize(cross(N, vec3(0.0, 1.0, 0.0))); \n            vec3 bitangent = cross(N, tangent); \n            vec3 projectedPos = pos - planePoint;\n            vec2 uv = vec2(dot(projectedPos, tangent), dot(projectedPos, bitangent));\n            uv.y /= 5.9;\n            uv.x /= xdiv;\n            uv += 0.5;\n            uv = clamp(uv, vec2(0.0), vec2(1.0));\n          \n            vec4 heightMap = texture(iChannel2, uv);\n            \n            return vec4(heightMap.rgb * diffuse * shadow, 1.0);\n        }\n    }\n    return vec4(0.0);\n}\n\nfloat sdSphere(vec3 p) {\n  return length(p - SPHERE_CENTER) - RAD;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdSphere(p);\n    depth += d;\n    if (d < PRECISION || depth > end) break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * PRECISION;\n    return normalize(\n      e.xyy * sdSphere(p + e.xyy) +\n      e.yyx * sdSphere(p + e.yyx) +\n      e.yxy * sdSphere(p + e.yxy) +\n      e.xxx * sdSphere(p + e.xxx));\n}\n\nvec3 tex3D(sampler2D tex, vec3 p, vec3 n)\n{\n    vec3 blending = abs(n);\n    blending = normalize(max(blending, PRECISION));\n    float b = (blending.x + blending.y + blending.z);\n    blending /= b;\n    \n    vec4 xaxis = texture(tex, p.yz);\n    vec4 yaxis = texture(tex, p.xz);\n    vec4 zaxis = texture(tex, p.xy);\n    \n    return (xaxis * blending.x + yaxis * blending.y + zaxis * blending.z).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    float yaw = (mouse.x * 2.0 - 1.0) * 3.14159;\n    float pitch = (mouse.y - 0.5) * 3.14159;\n\n    // Camera rotation\n    vec3 forward = vec3(cos(yaw) * cos(pitch), sin(pitch), sin(yaw) * cos(pitch));\n    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n    vec3 up = normalize(cross(forward, right));\n\n    // Ray origin\n    vec3 ro = vec3(0.0, 1.5, 3.0);\n\n    // Ray direction\n    vec3 rd = normalize(forward + (uv.x - 0.5) * right * (iResolution.x/iResolution.y) + (uv.y - 0.5) * up);\n\n    // Light position\n    vec3 lightPos = vec3(1.5, 1.8, 0.8);\n    \n    // Distance to sphere\n    float d = rayMarch(ro, rd, MIN_DIST, MAX_DIST);\n    \n    vec3 col = vec3(0);\n    if (d > MAX_DIST) {\n        col = vec3(0.0, 0.0, 0.0);\n    } else {\n        vec3 p = ro + rd * d;\n        vec3 normal = calcNormal(p);\n        vec3 lightDirection = normalize(lightPos - p);\n        float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n        col = dif * tex3D(iChannel1, p, normal);\n    }\n\n    if (col != vec3(0.0, 0.0, 0.0)) {\n        fragColor = vec4(col, 1.0);\n        return;\n    }\n    // add geometry texture\n\n    \n    // Floor\n    fragColor = rayPlaneIntersection(-ro.y / rd.y, ro, rd, lightPos, vec3(0.0, 1.0, 0.0), vec3(0.5, 0.3, 0.1), 1.0);\n    if (fragColor.a > 0.0) return;\n/*\n    // Ceiling\n    fragColor = rayPlaneIntersection((3.0 - ro.y) / rd.y, ro, rd, lightPos, vec3(0.0, -1.0, 0.0), vec3(0.8, 0.8, 0.8));\n    if (fragColor.a > 0.0) return; */\n\n    // Wall 1 (Green)\n    fragColor = rayPlaneIntersection((-2.0 - ro.x) / rd.x, ro, rd, lightPos, vec3(1.0, 0.0, 0.0), vec3(0.2, 0.5, 0.2), 12.0);\n    if (fragColor.a > 0.0) return;\n    \n    // Wall 2 (Blue)\n    fragColor = rayPlaneIntersection((2.0 - ro.x) / rd.x, ro, rd, lightPos, vec3(-1.0, 0.0, 0.0), vec3(0.2, 0.2, 0.5), 12.0);\n    if (fragColor.a > 0.0) return;\n\n    // Wall 3 (Red)\n    fragColor = rayPlaneIntersection((-2.0 - ro.z) / rd.z, ro, rd, lightPos, vec3(0.0, 0.0, 1.0), vec3(0.5, 0.2, 0.2), 4.0);\n    if (fragColor.a > 0.0) return;\n    \n    // Wall 3 (Yellow)\n    fragColor = rayPlaneIntersection((6.0 - ro.z) / rd.z, ro, rd, lightPos, vec3(0.0, 0.0, -1.0), vec3(0.5, 0.5, 0.2), 4.0);\n    if (fragColor.a > 0.0) return;\n\n    fragColor = texture(iChannel0, rd);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash( float x )\n{\n    return fract( sin( x ) * 43758.5453 );\n}\n\nfloat noise( vec2 uv )  // Thanks Inigo Quilez\n{\n    vec3 x = vec3( uv.xy, 0.0 );\n    \n    vec3 p = floor( x );\n    vec3 f = fract( x );\n    \n    f = f*f*(3.0 - 2.0*f);\n    \n    float offset = 57.0;\n    \n    float n = dot( p, vec3(1.0, offset, offset*2.0) );\n    \n    return mix(\tmix(\tmix( hash( n + 0.0 ), \t\thash( n + 1.0 ), f.x ),\n        \t\t\t\tmix( hash( n + offset), \thash( n + offset+1.0), f.x ), f.y ),\n\t\t\t\tmix(\tmix( hash( n + offset*2.0), hash( n + offset*2.0+1.0), f.x),\n                    \tmix( hash( n + offset*3.0), hash( n + offset*3.0+1.0), f.x), f.y), f.z);\n}\n\nfloat snoise( vec2 uv )\n{\n    return noise( uv ) * 2.0 - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  float height = snoise(uv * 75.0); // Пример с шумом\n  vec4 picture = texture(iChannel0, uv * 10.);\n  fragColor = vec4(picture.rgb * (1.-height), 1.0); // Красный канал - высота\n}","name":"Buffer A","description":"","type":"buffer"}]}