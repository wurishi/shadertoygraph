{"ver":"0.1","info":{"id":"DdXXzM","date":"1668613501","viewed":94,"name":"Estimating improper integrals","username":"Envy24","description":"Green - f(x)\nRed - numerical improper integral of f(x).\nBlue - correct value of improper integral of f(x).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["numerical","integral","integration","quadrature","definite","kronrod","improper"],"hasliked":0,"parentid":"cssXR4","parentname":"Gauss-Kronrod Quadrature"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define ORIGIN                    ( vec2(12.0, 0.0) )\n#define GSCALE                    ( 10.0 )\n#define UNIT                      ( 3.0*GSCALE / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define PI                          3.1415926535897932\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_func(vec2 NDC, float f, float dfdx)\n{\n    float df   = NDC.y - f;\n    return SMAA(abs(df) / sqrt(1.0 + dfdx * dfdx));\n}\n\n/* Source: https://en.wikipedia.org/wiki/Numerical_integration */\n/* Example of integral from minus infinity to plus infinity. */\n#define func(x)          ( 1./(1.+(x)*(x)) )\n#define deriv(x)         ( cos(x) )\nfloat improper_integral_f_minf_t_inf(float count)\n{\n    float dt = 2. / (count - 1.);\n\n    float I = 0.;\n    for (float i = 1., j = count - 1.; i < j; i += 1.)\n    {\n        float t = -1. + i * dt,\n              a = (1. - t * t),\n              b = (1. + t * t) / (a * a);\n\n        I += func(t / a) * b;\n    }\n\n    return I * dt;\n}\n/* Example of integral from a to plus infinity. *\n#define func(x)          ( 1./pow(1.+(x), 3./2.) )\n#define deriv(x)         ( -3./(2.*pow(x+1., 5./2.)) )\nfloat improper_integral_f_a_t_inf(float a, float count)\n{\n    float dt = 1. / (count - 1.);\n\n    float I = 0.;\n    for (float i = 0., j = count - 1.; i < j; i += 1.)\n    {\n        float t = i * dt,\n              b = a + t / (1. - t);\n\n        I += func(b) / ((1. - t) * (1. - t));\n    }\n\n    return I * dt;\n}\n/* Example of integral from minus infinity to a. *\n#define func(x)          ( x*exp(x) )\n#define deriv(x)         ( ((x)+1.)*exp(x) )\nfloat improper_integral_f_minf_t_a(float a, float count)\n{\n    float dt = 1. / (count - 1.);\n\n    float I = 0.;\n    for (float i = 1., j = count - 1.; i < j; i += 1.)\n    {\n        float t = i * dt,\n              b = a - (1. - t) / t;\n\n        I += func(b) / (t*t);\n    }\n\n    return I * dt;\n}\n/**/\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - R.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse)\n{\n    vec2 M = MOUSE_OFFSET * (mouse == true ? 1. : 0.);\n    return ((2. * (SC - M) - R.xy) / R.y) * scale - origin;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, GSCALE, -ORIGIN, true);\n    \n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n         color.rb -= draw_func(NDC, func(NDC.x), deriv(NDC.x));\n         \n    float a = 0.,  b = NDC.x, y = 0., yn = 0., dx = 0.1;\n         \n    float xs[16];\n    float ws[16];\n    //                      current                 min and max orders.\n    float order = clamp(1. + floor(mod(iTime, 8.)), 1.,     15.);\n    \n    /*Answer is PI*/\n    y = improper_integral_f_minf_t_inf(floor(b+3.));\n    color.rg -= horizontal_line(NDC, PI);\n    /*Answer is 2.*\n    y = improper_integral_f_a_t_inf(0., floor(b+2.));\n    color.rg -= horizontal_line(NDC, 2.);\n    /*Answer is -1.*\n    y = improper_integral_f_minf_t_a(0., floor(b+2.));\n    color.rg -= horizontal_line(NDC, -1.);\n    /**/\n\n    color.gb -= draw_func(NDC, y, 0.);   \n    \n    /* Cells */\n    NDC = fract(NDC); \n    color -= vertical_line(NDC, 0.)*.1;  color -= horizontal_line(NDC, 0.)*.1; // comment this line if you not use mod\n    color -= vertical_line(NDC, -1.)*.1; color -= horizontal_line(NDC, -1.)*.1;         \n    color -= vertical_line(NDC, 1.)*.1;  color -= horizontal_line(NDC, 1.)*.1;\n    /* */ \n   \n        \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return length(C - NDC)-R;\n}\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0));\n}","name":"Common","description":"","type":"common"}]}