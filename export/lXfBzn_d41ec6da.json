{"ver":"0.1","info":{"id":"lXfBzn","date":"1727934245","viewed":31,"name":"Fractal Octogons","username":"slydev","description":"Just jamming with effects","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// signed distance to a regular octogon\n// Copyright Â© 2018 Inigo Quilez\nfloat sdOctogon( in vec2 p, in float r )\n{\n  // pi/8: cos, sin, tan.\n  const vec3 k = vec3(-0.9238795325,   // sqrt(2+sqrt(2))/2 \n                       0.3826834323,   // sqrt(2-sqrt(2))/2\n                       0.4142135623 ); // sqrt(2)-1 \n                       \n  // reflections\n  p = abs(p);\n  p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n  p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n  // Polygon side.\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\n//Pallete gradient function\nvec3 palette( in float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Setup centred screen space\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv; //Keep origional UV\n\n    \n    vec3 col = vec3(1.0);\n    vec3 finalColor = vec3(0.0);\n    \n    //Build color palette\n    col = palette((fragCoord.x/iResolution.x*0.2) + iTime*0.1, vec3(0.948, 0.500, 0.448), vec3(0.779, 0.242, 0.610), vec3(0.948, 1.058, 1.168), vec3(0.000, 0.333, 0.528));\n    \n\n    //Make the octogon\n    float oct = 0.0;\n    \n    for(float i = 0.0; i < 3.0; i++){  \n        uv = fract(uv*2.0) - 0.5; //Divide up canvas but keep it in the centre\n    \n        oct = sdOctogon( uv, 18.0 + sin(iTime*i)/20.0);\n        oct = sin(oct*6.0)/15.0;\n\n        oct = abs(oct);\n        oct = 0.01 / oct;\n\n        finalColor += col * oct;\n    }\n\n        \n\tfragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}