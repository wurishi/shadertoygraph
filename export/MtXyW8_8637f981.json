{"ver":"0.1","info":{"id":"MtXyW8","date":"1504844836","viewed":288,"name":"Volumetric Lighting+Green Screen","username":"2LiveBrew","description":"Warning: This is the work of a complete noob! It's meant to document my progress with GLSL. It's definitely not suited for educational purposes.\n\nCLICK ON JEAN CLAUDE!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["greenscreen","volumetriclighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Click on Jean Claude!\n// Light source follows your mouse.\n\n#define MaxThreshold 0.55\n#define MinThreshold 0.5\n\n\nvec3 green = vec3(0.,1.,0.);\n\nvec4 getChromaKeyedTexture(sampler2D tex, vec2 uv) {\n    vec3 texRGB = texture(tex, uv).rgb;\n    vec3 diff = texRGB - green;\n    return vec4(texRGB, smoothstep(0.4, 0.65, dot(diff, diff)));        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.yy;\n    \n    \n    vec2 uScreenSize = iResolution.xy;\n    float uTime = iTime;\n    vec4 uMouse = iMouse;\n    \n    \n    \n\tvec2 sampler2DUVFix = vec2(uScreenSize.y/uScreenSize.x, 1.);\n    vec4 color = texture(iChannel1, uv * sampler2DUVFix);\n\tfragColor = color;\n    \n    \n    \n    //vec2 uv = gl_FragCoord.xy / uScreenSize.yy;\n\tuv.x -= uScreenSize.x / uScreenSize.y / 2. - 1.;\n\t//fragColor = vec4(uv, 0.5 + 0.5*sin(uTime), 1.0);\n\tfloat distanceAccuracy = 1.;//uSlider.x;\n\t//int distancesAccuracy = int(uSlider.y);\n\t\n\tvec2 origin = uMouse.xy / uScreenSize.yy;\n\torigin.x -= uScreenSize.x / uScreenSize.y / 2. - 1.;\n\t//origin.y += 0.33;\n\t\n\tfloat pixels = distanceAccuracy / uScreenSize.y;\n\t\n\tfloat maxDistance = 1.0;\n\tvec2 originDelta = uv - origin;\n\tfloat distanceFromOrigin = length(originDelta);\n\tfloat estimatedCoverage = 0.;\n\t\n\tint distanceCounter = 0;\n\t\n\tvec4 assetColor = getChromaKeyedTexture(iChannel0, uv * sampler2DUVFix);\n\t//vec4 assetColor = getChromaKeyedTexture(uTex2D, uv);\n    \n\tfragColor = mix(fragColor, assetColor, assetColor.a);\n\t\n\tfloat lastAlpha = getChromaKeyedTexture(iChannel0, origin * sampler2DUVFix).a;\n\t//float lastAlpha = texture2D(uTex2D, origin).a;\n    \n\t//vec4 light = vec4(1.,1.,1.,0.);\n\tvec4 light = mix(vec4(1.,1.,1.,0.), vec4(1.,1.,1.,1.),\n\t\tsmoothstep( 0., 1.,\n\t\t\tmax(0., (maxDistance - distanceFromOrigin) * (1. - lastAlpha) / maxDistance)\n\t\t)\n\t);\n\t\n\tfor(float i = 0.; i < maxDistance; i += pixels) {\n\t\tvec4 texCol = getChromaKeyedTexture(iChannel0, sampler2DUVFix * (originDelta * i + origin));// * i / distanceFromOrigin + origin);\n\t\t//vec4 texCol = texture2D(uTex2D, originDelta * i / distanceFromOrigin + origin);\n        \n\t\tif(texCol.a < lastAlpha) {\n\t\t\tlight = mix(light, vec4(1.), max(0.,\n\t\t\t\tsmoothstep(0., 1.,\n\t\t\t\t\t(maxDistance - distanceFromOrigin) * i * (lastAlpha - texCol.a) / distanceFromOrigin) / 2.\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\t//else if(textCol.a > lastAlpha) {\n\t\t//}\n\t\tlastAlpha = texCol.a;\n\t}\n\t\n\tfragColor = mix(fragColor, light, light.a);\n}","name":"Image","description":"","type":"image"}]}