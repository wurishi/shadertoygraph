{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// ShaderToy simulation: 3D wire-like standing wave with EM scaling (x^2 and x^3)\n#define PI 3.14159265359\n\n// Function to create wire-like standing wave with x^2 scaling for electric field\nfloat electricField(vec2 uv, vec2 center, float time) {\n    vec2 pos = uv - center;\n    float angle = atan(pos.y, pos.x);  // Polar angle\n    float radius = length(pos);        // Distance from center\n    \n    // Electric field: Radial waves with compressed frequency\n    float wave = sin(50.0 * angle) * cos(20.0 * radius - time * 2.0);\n    return wave / pow(radius + 1.0, 2.0); // Corrected x^2 scaling effect\n}\n\n// Function to create magnetic field with x^3 scaling\nfloat magneticField(vec2 uv, vec2 center, float time) {\n    vec2 pos = uv - center;\n    float angle = atan(pos.y, pos.x);  // Polar angle\n    float radius = length(pos);        // Distance from center\n    \n    // Magnetic field: Circular waves with denser ripples\n    float wave = cos(30.0 * angle + time) * sin(15.0 * radius - time * 3.0);\n    return wave / pow(radius + 1.0, 3.0); // Corrected x^3 scaling effect\n}\n\n// Function to add subtle left-right floating motion\nfloat floatingMotion(vec2 uv, float time) {\n    return sin(uv.y * 10.0 + time * 2.0) * cos(uv.x * 8.0 + time * 1.5) * 0.05;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize pixel coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Add secondary left-right floating motion to UV coordinates\n    float motion = floatingMotion(uv, iTime);\n    uv.x += motion;\n    uv.y += motion;\n\n    // Define center at (0.0, 0.0)\n    vec2 center = vec2(0.0, 0.0);\n\n    // Time animation\n    float time = iTime;\n\n    // Electric field with x^2 scaling\n    float eField = electricField(uv, center, time);\n\n    // Magnetic field with x^3 scaling\n    float mField = magneticField(uv, center, time);\n\n    // Combine effects with scaling and adjusted blending\n    float combined = 0.7 * eField + 0.3 * mField;\n\n    // Adjusted color scheme for clarity\n    vec3 color = vec3(0.1, 0.6, 0.9) * abs(eField) + vec3(0.9, 0.5, 0.2) * abs(mField);\n    color = clamp(color, 0.0, 1.0);\n\n    // Add sharper light falloff for clarity\n    float falloff = 1.0 / (1.0 + pow(length(uv) * 3.0, 2.0));\n    color *= falloff;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4cyBDc","date":"1734506861","viewed":83,"name":"I like these colors 3","username":"adras","description":"I like these colors 3","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["colors"],"hasliked":0,"parentid":"","parentname":""}}