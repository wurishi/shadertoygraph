{"ver":"0.1","info":{"id":"wsGGWR","date":"1569974673","viewed":671,"name":"Abstract lines","username":"mat44","description":"Based off a blender tutorial: https://www.youtube.com/watch?v=lCjAzZbGsNM","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float blurSize = 1.0/256.0;\n\nvec3 getCol(vec2 pos) {\n    return pow(texture(iChannel0, pos).rgb, vec3(5.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = texture(iChannel0, uv).rgb;\n    //color = getCol(uv);\n    \n    // an attempt to do bloom\n    \n    vec3 sum = vec3(0);\n    \n    sum += getCol(vec2(uv.x - 4.0*blurSize, uv.y)) * 0.05;\n    sum += getCol(vec2(uv.x - 3.0*blurSize, uv.y)) * 0.09;\n    sum += getCol(vec2(uv.x - 2.0*blurSize, uv.y)) * 0.12;\n    sum += getCol(vec2(uv.x - 1.0*blurSize, uv.y)) * 0.15;\n    sum += getCol(vec2(uv.x               , uv.y)) * 0.16;\n    sum += getCol(vec2(uv.x + 1.0*blurSize, uv.y)) * 0.15;\n    sum += getCol(vec2(uv.x + 2.0*blurSize, uv.y)) * 0.12;\n    sum += getCol(vec2(uv.x + 3.0*blurSize, uv.y)) * 0.09;\n    sum += getCol(vec2(uv.x + 4.0*blurSize, uv.y)) * 0.05;\n\n    sum += getCol(vec2(uv.x, uv.y - 4.0*blurSize)) * 0.05;\n    sum += getCol(vec2(uv.x, uv.y - 3.0*blurSize)) * 0.09;\n    sum += getCol(vec2(uv.x, uv.y - 2.0*blurSize)) * 0.12;\n    sum += getCol(vec2(uv.x, uv.y - 1.0*blurSize)) * 0.15;\n    sum += getCol(vec2(uv.x,                uv.y)) * 0.16;\n    sum += getCol(vec2(uv.x, uv.y + 1.0*blurSize)) * 0.15;\n    sum += getCol(vec2(uv.x, uv.y + 2.0*blurSize)) * 0.12;\n    sum += getCol(vec2(uv.x, uv.y + 3.0*blurSize)) * 0.09;\n    sum += getCol(vec2(uv.x, uv.y + 4.0*blurSize)) * 0.05;\n    \n    //float brightness = (color.r + color.g + color.b)/3.0;\n\n\tfragColor = vec4(color + sum,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat rand(float n){\n    return fract(cos(n*89.42)*343.42);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define barWidth 0.02\n#define barRepeat 0.3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float origX = uv.x;\n    float val = noise(uv*0.3+iTime*0.05+0.1)*0.6;\n    uv.y += val;\n    uv.x += rand(floor(uv.y / barWidth));\n    // different speed for each line\n    float speed = 0.15 + rand(floor(uv.y / barWidth)*barWidth)*0.1;\n    // speed = 0.15;\n    uv.x = mod(uv.x-iTime*speed, barRepeat)/barRepeat;\n    \n    vec3 col = mix(vec3(0.4, 0.4, 1.0), vec3(0.4, 1.0, 0.4), origX)*uv.x;\n    //col = vec3(val*0.5);\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}