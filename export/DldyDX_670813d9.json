{"ver":"0.1","info":{"id":"DldyDX","date":"1700567987","viewed":72,"name":"Dynamic Geometric Color Flow","username":"wwwww","description":"wwww","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lmage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    float time = iTime * 0.2;\n\n    for (float i = 0.0; i < 4.0; i++) {\n        \n        if (iTime > 5.0) {\n            uv = uv + vec2(sin(uv.y * time), cos(uv.x * time));\n        } else {\n            uv = fract(uv * 1.5) - 0.5;\n        }\n\n        float d = length(uv) * exp(-length(uv0));\n\n       \n        vec3 col = palette(length(uv0) + i * .4 + iTime * .4);\n        vec3 newCol = vec3(sin(time), cos(time), sin(time) * cos(time));\n        col = mix(col, newCol, 0.5); \n        d = sin(d * 8. + iTime) / 8.;\n        d = abs(d);\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}