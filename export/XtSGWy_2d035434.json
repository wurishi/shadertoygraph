{"ver":"0.1","info":{"id":"XtSGWy","date":"1431699342","viewed":600,"name":"3d Sound Visualizer","username":"tholzer","description":"My 1st project of a 3d sound visualizer...\nUse mouse to move the camera.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","sound","raymarcher","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//---------------------------------------------------------\n// Shader:   3d visualizer.glsl                      5/2015\n//           a try to visualize sound data in 3d...    \n//---------------------------------------------------------\n\n//---------------------------------------------------------\n#define ANIMATE true\n#define ROTATE true\n#define flag true\n\nfloat time = 0.0;\nfloat aTime = 0.0;\nfloat sinTime = 0.0;\nvec2 uv;\nvec2 mouse;\n//---------------------------------------------------------\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x + sa * p.z, p.y, -sa * p.x + ca * p.z);\n}\n\n//---------------------------------------------------------\nfloat length6( vec2 p )  // (x^6+y^6)^(1/6)\n{\n  p = p*p*p; \n  p = p*p;\n  return pow( p.x + p.y, 1.0/6.0 );\n}\n//---------------------------------------------------------\n//  primitives\n//---------------------------------------------------------\nfloat sdPlane( vec3 p )\n{\n  return p.y;\n}\n\nfloat sdWaveSphere(vec3 p, float radius, float waves, float waveSize) \n{\n  // deformation of radius\n  float d = waveSize*(radius*radius-(p.y*p.y));\n  radius += d * cos(atan(p.x,p.z) * float(waves));\n  return 0.5 * (length(p) - radius);\n}\n\n// h.xy = base rectangle size,  h.z = height\nfloat sdCylinder6( vec3 p, vec3 h )\n{\n  return max( length6(p.xz) - h.x, abs(p.y) - h.z );\n}\n\n//---------------------------------------------------------\n// distance operations\n//---------------------------------------------------------\n// Union: d1 + d2\nvec2 opU( vec2 d1, vec2 d2 )\n{\n  return (d1.x < d2.x) ? d1 : d2;\n}\n\n//---------------------------------------------------------\nvec2 map( in vec3 pos )\n{\n  vec2 res = vec2( sdPlane( pos), 1.0 );\n  float color = 50.0+ 40.0 * cos(0.2 * time);\n  \n  // get frequency and sound wave data \n  float soundFFT  = texture( iChannel0, vec2(0.5, 0.25) ).x; \n  float soundWave = texture( iChannel0, vec2(0.0, 0.95) ).y;\n  float fftHeight  = 0.02 + soundFFT;\n  float waveHeight = 0.02 + soundWave;\n    \n  vec3  r1 = rotateY (pos - vec3( 1.0, 0.0,  1.0), aTime*-0.5);\n  res = opU( res, vec2( sdCylinder6( r1, vec3(0.1, 0.05, fftHeight) ), color + 44.) );\n    \n        r1 = rotateY (pos - vec3(-1.0, 0.0, -1.0), aTime*-0.5);\n  res = opU( res, vec2( sdCylinder6( r1, vec3(0.1, 0.05, fftHeight) ), color + 44.) );\n\n        r1 = rotateY (pos - vec3(-1.0, 0.0,  1.0), aTime*0.5);\n  res = opU( res, vec2( sdCylinder6( r1, vec3(0.1, 0.05, waveHeight) ), color + 88.) );\n\n        r1 = rotateY (pos - vec3( 1.0, 0.0, -1.0), aTime*0.5);\n  res = opU( res, vec2( sdCylinder6( r1, vec3(0.1, 0.05, waveHeight) ), color + 88.) );\n    \n  res = opU( res, vec2( sdWaveSphere  ( pos - vec3(0.0, 0.1, 0.1), 0.8, 12., (soundFFT-0.4)*0.6), color ) );\n  return res;\n}\n//----------------------------------------------------------------------\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n  float tmin = 0.8;\n  float tmax = 8.0;\n\n  float precis = 0.0001;\n  float t = tmin;\n  float m = -1.0;\n  for ( int i=0; i<50; i++ )\n  {\n    vec2 res = map( ro+rd*t );\n    if ( (res.x < precis) || (t > tmax) ) break;\n    t += res.x;\n    m = res.y;\n  }\n  if ( t>tmax ) m=-1.0;\n  return vec2( t, m );\n}\n\n//----------------------------------------------------------------------\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n  float res = 1.0;\n  float t = mint;\n  for ( int i=0; i<14; i++ )\n  {\n    float h = -0.01+map( ro + rd*t ).x;\n    res = min( res, 8.0*h/t );\n    t += clamp( h, 0.02, 0.10 );\n    if ( h<0.001 || t>tmax ) break;\n  }\n  return clamp( res, 0.0, 1.0 );\n}\n\n//----------------------------------------------------------------------\nvec3 calcNormal( in vec3 pos )\n{\n  const vec3 eps = vec3( 0.0001, 0.0, 0.0 );\n  vec3 nor = vec3(\n    map(pos+eps.xyy).x - map(pos-eps.xyy).x, \n    map(pos+eps.yxy).x - map(pos-eps.yxy).x, \n    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n  return normalize(nor);\n}\n\n//----------------------------------------------------------------------\n// http://en.wikipedia.org/wiki/Ambient_occlusion\n// http://joomla.renderwiki.com/joomla/index.php?option=com_content&view=article&id=140&Itemid=157\nfloat calcAO( in vec3 pos, in vec3 nor )  // get ambient occlusion\n{\n  float occ = 0.0;\n  float sca = 1.0;\n  for ( int i=0; i<5; i++ )\n  {\n    float hr = 0.01 + 0.12*float(i) / 4.0;\n    vec3 aopos =  nor * hr + pos;\n    float dd = map(aopos).x;\n    occ += -(dd-hr)*sca;\n    sca *= 0.95;\n  }\n  return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n//----------------------------------------------------------------------\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n  aTime = ANIMATE ? time : 0.0;\n  sinTime = sin(aTime);\n  vec3 col = vec3(0.8, 0.9, 1.0);\n  vec2 res = castRay(ro, rd);\n  float t = res.x;\n  float m = res.y;\n  if ( m > -0.5 )\n  {\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 ref = reflect( rd, nor );\n\n    // material        \n    col = 0.45 + 0.3*sin( vec3(0.05, 0.08, 0.10)*(m-1.0) );\n\n    if ( m<1.5 )\n    {\n      float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n      col = 0.4 + 0.1*f*vec3(1.0);\n    }\n\n    // lighting        \n    float occ = calcAO( pos, nor );\n    vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n    float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float bac = clamp( dot( nor, normalize(vec3(-lig.x, 0.0, -lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y, 0.0, 1.0);\n    float dom = smoothstep( -0.1, 0.1, ref.y );\n    float fre = pow( clamp(1.0+dot(nor, rd), 0.0, 1.0), 2.0 );\n    float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0);\n\n    dif *= softshadow( pos, lig, 0.02, 2.5 );\n    dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n    vec3 brdf = vec3(0.0);\n    brdf += 1.20*dif*vec3(1.00, 0.90, 0.60);\n    brdf += 1.20*spe*vec3(1.00, 0.90, 0.60)*dif;\n    brdf += 0.30*amb*vec3(0.50, 0.70, 1.00)*occ;\n    brdf += 0.40*dom*vec3(0.50, 0.70, 1.00)*occ;\n    brdf += 0.30*bac*vec3(0.25, 0.25, 0.25)*occ;\n    brdf += 0.40*fre*vec3(1.00, 1.00, 1.00)*occ;\n    brdf += 0.02;\n    col = col*brdf;\n    col = mix( col, vec3(0.8, 0.9, 1.0), 1.0-exp( -0.005*t*t ) );\n  }\n  return vec3( clamp(col, 0.0, 1.0) ); \n}\n//----------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  time = iTime;\n  mouse = iMouse.xy / iResolution.xy;\n  uv = 2.0*(gl_FragCoord.xy / iResolution.xy) - 1.0;\n  uv.x *= iResolution.x / iResolution.y;\n\n  // camera  \n  float angle = ROTATE ? 0.02*time : 0.0;\n  float rx = 0.5 + 3.0*cos(angle + 6.0*mouse.x);\n  float rz = 0.5 + 3.0*sin(angle + 6.0*mouse.x);\n  vec3 ro = vec3( rx, 1.0 + 5.0*mouse.y, rz );\n  vec3 ta = vec3( 0.0, 0.5, 0.0 );\n\n  // camera tx\n  vec3 cw = normalize( ta - ro );\n  vec3 cp = vec3( 0.0, 1.0, 0.0 );\n  vec3 cu = normalize( cross(cw, cp) );\n  vec3 cv = normalize( cross(cu, cw) );\n  vec3 rd = normalize( uv.x*cu + uv.y*cv + 3.0*cw );\n\n  // pixel color\n  vec3 col = render( ro, rd );\n  col = pow( col, vec3(0.4545) );\n  fragColor=vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}