{"ver":"0.1","info":{"id":"4fySR3","date":"1715528588","viewed":75,"name":"Scrolling with variable speed","username":"peremoya2000","description":"Using the integral of the speed function to create a texture scroll that speeds up and down without discontinuities or artifacts.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["scroll","integral","texturescrolling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //What many people would normally do here is uv.x += iTime * speed, \n    //but that does not work with a fluctuating speed.\n    //Instead we define the function that defines our speed over time such as: sin(x)*.5+.5\n    //and then we calculate its indefinite integral which is .5*x-.5*cos(x) (consider C to be 0)\n    uv.x += .5*iTime-.5*cos(iTime);\n\n    //Sample texture & output to screen\n    fragColor = vec4(texture(iChannel0, uv));\n}","name":"Image","description":"","type":"image"}]}