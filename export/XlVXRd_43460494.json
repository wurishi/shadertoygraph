{"ver":"0.1","info":{"id":"XlVXRd","date":"1485461931","viewed":155,"name":"Reveal/Blur/Sharpen","username":"KyleNetherland","description":"For homework. Used ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur","greenscreen","reveal","sharpe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float radius = 0.1;\n\nvec2 center;\nfloat centerOffset = 0.1;\n\nvec3 white = vec3(1.0,1.0,1.0);\nvec3 green = vec3(0.0,1.0,0.0);\nvec3 red = vec3(1.0,0.0,0.0);\nvec3 blue = vec3(0.0,0.0,1.0);\nvec3 black = vec3(0.0,0.0,0.0);\nvec3 cyan = vec3(0.0,1.0,1.0);\nvec3 yellow = vec3(1.0,1.0,0.0);\n\n//following code provided by Nikos Papadopoulos, 4rknova and modified by Sajid and I \n\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n//added changes here\nvec3 sample(const int x, const int y, in vec2 fragCoord, in int channel)\n{\n if(channel ==0)\n { \n     vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n \t uv = (uv + vec2(x, y)) / iChannelResolution[0].xy ;\n     return texture(iChannel0, uv).xyz;\n }\n if(channel ==1)\n {\n     vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[1].xy;\n \t uv = (uv + vec2(x, y)) / iChannelResolution[1].xy ;\n     return texture(iChannel1, uv).xyz;\n }\n if(channel ==2)\n {\n     vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[2].xy;\n \t uv = (uv + vec2(x, y)) / iChannelResolution[2].xy ;\n     return texture(iChannel2, uv).xyz;\n }\n}\nvec3 filter(in vec2 fragCoord, mat3 kernel, in int channel)\n{\n vec3 sum = sample(-1, -1, fragCoord,channel) * kernel[0][0]\n + sample(-1, 0, fragCoord,channel) * kernel[0][1]\n + sample(-1, 1, fragCoord,channel) * kernel[0][2]\n + sample( 0, -1, fragCoord,channel) * kernel[1][0]\n + sample( 0, 0, fragCoord,channel) * kernel[1][1]\n + sample( 0, 1, fragCoord,channel) * kernel[1][2]\n + sample( 1, -1, fragCoord,channel) * kernel[2][0]\n + sample( 1, 0, fragCoord,channel) * kernel[2][1]\n + sample( 1, 1, fragCoord,channel) * kernel[2][2];\n \n return sum;\n}\n\n//following code by me\nbool inSquare(vec2 pixel, vec2 center, float radius)\n{\n    if(length(pixel.y - center.y) <= radius && length(pixel.x - center.x) <= radius)\n\t\treturn true;\n    else\n        return false;\n}\n\nbool inCircle(vec2 pixel, vec2 center)\n{\n    if(length(pixel - center) <= radius)\n\t\treturn true;\n    else\n        return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec2 fc = fragCoord.xy;\n    vec2 uv = fc / iResolution.xy;\n\n    //Correct for aspect ratio\n    uv.y *= iResolution.y / iResolution.x;\n\n    vec4 Layer1 = texture(iChannel0,uv);\n    vec4 Layer2;\n    vec4 Layer3;\n    \n    Layer2 = vec4(filter(fc, sharpen,1),1);\n    \n    float threshold = 0.63;\n    if(Layer2.g > threshold)\n    {\n        if(Layer2.r < 0.1)\n        {\n            vec3 cf = filter(fc, sharpen,0);\n\n            Layer2 = vec4(cf, 1);\n        }\n    }\n    center = iMouse.xy/iResolution.xx; //.xx idea from Ryan Moss\n    if(inCircle(uv,center))\n        Layer3 = vec4(black,0.0);\n    else\n        Layer3 = vec4(filter(fc,blur,2),1.0);\n  \n    // Blend the two\n    vec4 Composite = mix(Layer1, Layer2, Layer2.a);\n    Composite = mix(Composite, Layer3, Layer3.a);\n    fragColor = Composite;\n \n}\n\n","name":"Image","description":"","type":"image"}]}