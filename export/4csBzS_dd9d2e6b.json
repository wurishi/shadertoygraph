{"ver":"0.1","info":{"id":"4csBzS","date":"1723925714","viewed":72,"name":"Simple Ambient Occlusion 002","username":"opezdl","description":"simple Ambient Occlusion","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["ao"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float AO = texture(iChannel0, uv).r / float(iFrame);\n    AO = 1.0 - clamp(AO, 0.0, 0.95);\n    fragColor = vec4(AO,AO,AO, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float GetDepth(vec2 fragCoord)\n{\n    return texture(iChannel0, fragCoord/iChannelResolution[0].xy).r * Boost;\n}\n\nvec3 GetNormal(vec2 fragCoord)\n{\n    float ang1 = (1.0 / 12.0) * 6.2831853;\n    float ang2 = (5.0 / 12.0) * 6.2831853;\n    float ang3 = (9.0 / 12.0) * 6.2831853;\n    \n    vec3 v1 = vec3(fragCoord + vec2(sin(ang1), cos(ang1)) * 0.5, 0);\n    vec3 v2 = vec3(fragCoord + vec2(sin(ang2), cos(ang2)) * 0.5, 0);\n    vec3 v3 = vec3(fragCoord + vec2(sin(ang3), cos(ang3)) * 0.5, 0);\n    \n    v1.z = GetDepth(v1.xy);\n    v2.z = GetDepth(v2.xy);\n    v3.z = GetDepth(v3.xy);\n    \n    vec3 norm = normalize(cross(v1 - v2, v3 - v2));\n    \n    return norm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //if(iFrame>80){ discard; }\n    fragColor.rgb = 0.5 * GetNormal(fragCoord) + 0.5;\n    fragColor.a = GetDepth(fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define Boost 100.\n#define AO_SAMPLES 4\n#define AO_RADIUS 16.       \n#define AO_FADE_DISTANCE 1.0\n#define AO_INTENCITY 1.5\n#define PI2 2.0 * 3.14159265359","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //if(iFrame>80){ discard; }\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = vec3(0.0);\n    vec4 texData = texture(iChannel0, uv);\n    vec3 normal = texData.xyz * 2.0 - 1.0;\n    float height = texData.w / Boost;\n    float ao = 0.0;\n    int samples = AO_SAMPLES;\n    float radius = AO_RADIUS / min(iResolution.x, iResolution.y);\n    vec2 noiseUV = mod(fragCoord.xy + vec2(iFrame, 0.0), iChannelResolution[1].xy) / iChannelResolution[1].xy;\n    float noiseValue = texture(iChannel1, noiseUV).r / 1.;\n    for (int i = 0; i < samples; i++) \n    {\n        float angle = PI2 * (float(i) / float(samples) + noiseValue);\n        vec2 offset = (radius + 1.0/min(iResolution.x, iResolution.y)) * vec2(cos(angle), sin(angle)) * (float(i) + 1.)/(float(samples) + 1.);\n        float sampleHeight = texture(iChannel0, uv + offset).w / Boost;\n        float range = sampleHeight - height;\n        float weight = 1.0 / (1.0 + AO_FADE_DISTANCE * length(vec3(offset, range)));\n        ao += max(0.0, AO_INTENCITY * dot(normal,  normalize(vec3(offset, range))) * weight);\n    }\n    ao /= float(samples);\n    ao += texture(iChannel2, fragCoord/iChannelResolution[2].xy).r;\n    fragColor = vec4(ao,ao,ao,1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}