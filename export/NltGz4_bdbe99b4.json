{"ver":"0.1","info":{"id":"NltGz4","date":"1635793875","viewed":48,"name":"The Smiley Shader","username":"guyemura","description":"smile:)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["smile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pi, the ratio of a circle's circumference to its diameter.\nconst float M_PI = 3.14159265358979323846264338327950288;\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat opSub( float d1, float d2 ) { return max(-d1,d2); }\n\n// c is the sin/cos of the angle. r is the radius\nfloat sdPie( in vec2 p, in vec2 c, in float r )\n{\n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p - c*clamp(dot(p,c),0.0,r) );\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // Dividing by iResolution.y scales the coordinates\n    // normalized pixel coordinates\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float L = length(m);\n    \n    float d = sdCircle(p, length(m));\n    float dEye = sdCircle(p - vec2(.4, .4) * L, 0.2 * L);\n    float dEye2 = sdCircle(p - vec2(-.4, .4) * L, 0.2 * L);\n    d = opSub(dEye, d);\n    d = opSub(dEye2, d);\n    float dMouth = sdPie(vec2(p.x, -p.y),vec2(sin(M_PI / 2.0),cos(M_PI / 2.0)), 0.65 * L);\n    d = opSub(dMouth, d);\n    \n    d *= -1.0;\n    \n    // coloring\n    //\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.4,0.7,0.85);\n    //vec3 col = (d<0.0) ? vec3(0.5) : vec3(1.0);\n    //col *= 1.0 - exp(-7.0*abs(d));\n\t//col *= 0.9 + 0.1*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    \n    fragColor = vec4(col,10.0);\n    \n}","name":"Image","description":"","type":"image"}]}