{"ver":"0.1","info":{"id":"XX33zX","date":"1716801768","viewed":130,"name":"Raymarching Tutorial Final","username":"omansounds","description":"Kishimisu's raymarching tutorial on youtube. I have changed a couple of things.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Box sdf function\nfloat sdBox ( vec3 p, vec3 b ) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n//Octahedron\nfloat sdOctahedron( vec3 p, float s) {\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat map(vec3 p) {\n    p.z += iTime * 0.4;                     // Move effect\n    \n    // Space Repetition\n    p.xy = (fract(p.xy) - 0.5);             // Spacing by 1\n    p.z = mod(p.z, .25) - 0.125;            // Spacing by .25\n    \n    float box = sdOctahedron(p, .15);       // SDF\n   \n    return box;\n}\n\n// Coloring\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0\t);\n    vec3 d = vec3(0.00, 0.10, 0.20);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// 2D Rotation\nmat2 rot2D(float angle) { \n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    // Initialization\n    vec3 ro = vec3(0, 0, -3);             // Ray origin\n    vec3 rd = normalize(vec3(uv, 1));     // Ray direction\n    vec3 col = vec3(0);\n    \n    float t = 0.;                         // Total distance travelled\n    \n    // Default circular motion if mouse is not clicked\n    m = vec2(cos(iTime * 0.2), sin(iTime * 0.2));\n       \n    // Raymarching\n    int i;\n    for (i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;             // Posiiton along the ray\n        \n        p.xy *= rot2D(t * 0.2 * m.x);      // Rotate ray around z-axis\n        \n        p.y += sin(t * (m.y + 1.) * 0.5) * 0.35;                 // Wiggle\n        \n        float d = map(p);                 // Current distance to the scene\n        \n        t += d;                           // March the rays\n        \n        col = vec3(i) / 80.;\n        \n        if (d < .001 || t > 100.) break;  // Early Stop\n\n    }\n    \n    // Coloring\n    col = palette(t * 0.04 + float(i) * 0.005);         // Lower the float value to see further away\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}