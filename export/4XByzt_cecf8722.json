{"ver":"0.1","info":{"id":"4XByzt","date":"1727550435","viewed":59,"name":"paint storm","username":"pb","description":"3d proj of 4d ","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","4d"],"hasliked":0,"parentid":"X3VXzG","parentname":"mandelbox4d"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//formula for creating colors;\n#define H(h)  (  cos(  h + vec3(1,2,5)   )*.6 + .5 )\n\n#define H2(h)  (  cos(  h + vec3(1,2,0)   )*.7 + .2 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c)\n\n#define R iResolution\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, .7*R.y, R.y))*200.;\n    \n    float sc,dotp,totdist=0., tt=iTime/3., t=0.;\n    \n    for (float i=0.; i<80.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n            \n        p.xyz += vec3(0,-1.7,-1.);\n        \n        p.xz *= rot( tt/2. + abs(sin(tt/3.)));\n           \n        p.yzw = p.xyz;\n        \n        sc = 1.; \n        \n        p.zw *= rot(1.);\n        \n        vec4 w = p;\n        \n        for (float j=0.; j<7.; j++) {\n          \n            p = abs(p)*.6;\n       \n            dotp = max(1./dot(w,w),.001);\n            sc *= dotp; \n            \n            p = p * dotp - .39; \n            \n            w = .8*log(1.+log(1.+log(1.+p)*p)*p) - vec4(.2,.1,.2,.35);\n                    \n        }\n         \n        float dist = abs( max(length(p.zw),length(p.xy))-.1)/sc ;  //funky distance estimate\n        float stepsize = dist/30. ;     \n        totdist += stepsize;                  //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        c +=\n             .02 * H2(  atan( p.w, p.z )) * exp(-totdist*1e2) \n           + .02 * H(M(sc)) *  exp(-i*i*stepsize*stepsize*1e4);\n           \n        rd.yz *= rot( atan(c.z, c.y) / 200. );\n  \n    }\n    \n    c = 1. - exp(-c*c);\n    O = ( vec4(c,0) );\n               \n}","name":"Buffer A","description":"","type":"buffer"}]}