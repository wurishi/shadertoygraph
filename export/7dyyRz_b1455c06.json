{"ver":"0.1","info":{"id":"7dyyRz","date":"1654301561","viewed":326,"name":"Pixel Blobs","username":"SnoopethDuckDuck","description":"Simple and fun","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["pixelart"],"hasliked":0,"parentid":"Ns3yWj","parentname":"PSG2 Fork"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cell(p) texelFetch(iChannel0, ivec2(p), 0 )\n\nvec3 pal(float t) {\n    vec3 d = 0.35 * vec3(0,1,2)/3.;\n    return 0.5 + 0.5 * cos(6.28319 * (0.5 * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0. * iResolution.xy) / iResolution.y;\n    \n    // Zoom + distort\n    float zm = 0.7 - 0.5 * min(1., tanh(iTime * iTime));\n    //zm += 0.3 - 0.3 * tanh(24. - length(uv) * 50.);\n    \n    // Pixel + cells etc.  \n    vec2 px = zm * fragCoord + (1.-zm) * 0.5 * iResolution.xy;\n        \n    vec4 c = cell(px),\n         b = cell(px - vec2(0,1)),\n         t = cell(px + vec2(0,1)),\n         l = cell(px - vec2(1,0)),\n         r = cell(px + vec2(1,0)), \n         sum = b + t + l + r;\n      \n    // Lighten right side\n    float cn = 0.06 * smoothstep(-0.2, 0.2, uv.x); \n    \n    // Shade from bottom to top\n    float fl = clamp(uv.y, -0.125, 0.125);\n    \n    // Background\n    vec3 col = pal(0.05 * (uv.x + 5. * uv.y) + 0.2 * cn - 0.7);\n    \n    // Exterior outline\n    if (c.r == 0. && (sum.r == 1. || sum.r == 2.))\n        col = pal(fl + cn - 0.4);  \n    // Interior\n    else if (sum.r == 4.) \n        col = pal(fl + cn - 0.52 - 0.18 * c.g);    \n\n    fragColor.rgb = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.14159\n\n// From iq\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    // Centre coords\n    f -= floor(0.5 * iResolution.xy);\n    \n    // Speed of time\n    float spd = 0.125;\n\n    // Number of blobs\n    float n = 5.;\n    \n    // Distance from blobs\n    float d = 1e5;\n    \n    for (float i = 0.; i < n; i++) {\n        // Offset each blob\n        float io = 2. * pi * i / n;\n        \n        // Time\n        float t = spd * iTime + 2. * pi * cos(0.5 * spd * iTime + io);\n        \n        // Motion of blobs (idk how this works)\n        float c = 1. + 0.5 * cos(4. * t + io);\n        d = smin(d, c * length(f - 30. * (c-0.5) * vec2(cos(t+io), sin(t+io))), 10.);  \n     }\n     \n     // Harsh shape\n     float r = step(d, 5.);\n     \n     // Soft shape (going inwards)\n     float s = smoothstep(0., 5., -d + 5.);\n     \n     col = vec4(r, s, 0, 0);\n}","name":"Buffer A","description":"","type":"buffer"}]}