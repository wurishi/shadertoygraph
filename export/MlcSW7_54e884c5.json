{"ver":"0.1","info":{"id":"MlcSW7","date":"1479897667","viewed":176,"name":"Time Square","username":"tabman","description":"An attempt to visualize time object. Technically it could be some complex pattern interpreted as sound. Traversing through such object from different angles would give different sounds, while the object itself would remain static.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","time","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//time flow rules\n#define T1 iTime+20.\n#define T2 iTime*2.\n#define T3 iTime\n\n//Bouncing balls function. Based on:\n//https://www.shadertoy.com/view/4ds3zX\nfloat b(vec2 u,vec2 s,vec2 v,float r){   \n   vec2 l = iResolution.xy-r*2.;\n   vec2 p = r+l-abs(mod(s+iTime*v,l*2.)-l);\n   return pow(r/(1.+distance(p,u)),1.);\n}\n\n//Noise function from:\n//https://www.shadertoy.com/view/ltB3zD\n#define r(s) fract(sin(dot(s, vec2(12.9898, 78.233)))*43758.5453)\n\nvoid mainImage( out vec4 o, in vec2 u ){\n    o -= o;\n\t\n    vec2 iR = iResolution.xy,   //fragment coordinates resolution\n         tR = vec2(5.,5.),      //time coordinates resolution\n         \n         //map time to coordinate plane\n         t1 = mod(vec2(T1,T1/tR.x),tR),\n    \t t2 = mod(vec2(T2,T2/tR.x),tR),\n    \t t3 = mod(vec2(T3,T3/tR.x),tR);\n \n    //noramlize:[0,tR]->[0,1]\n    t1 /= tR;t2 /= tR;t3 /= tR;\n    \n    //initialize ball colors\n    vec4 c1 = texture(iChannel0,t1),\n         c2 = texture(iChannel0,t2),\n         c3 = texture(iChannel0,t3);\n \n    if (u.x<iR.x*.5){\n        //initialize balls\n\t\to += b(u,vec2(iR.x/8.,.0),vec2(.0,100.),9.)*c1;\n        o += b(u,vec2(iR.x/4.,.0),vec2(.0,100.),9.)*c2;\n        o += b(u,vec2(iR.x*3./8.,.0),vec2(.0,100.),9.)*c3;\n        \n        o += r(u)*.01; //dithering\n    } else {\n        //display color texture info\n        u /= iR;\n        u.x = u.x*2.-1.;\n        o += texture(iChannel0,u);\n\n\t\t//display time traces\n        o = max(-floor(length(t1-u)-.01)*vec4(1.,0.,0.,1.),o);\n        o = max(-floor(length(t2-u)-.01)*vec4(0.,1.,0.,1.),o);\n        o = max(-floor(length(t3-u)-.01)*vec4(0.,0.,1.,1.),o);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Time based color texture\n\nfloat rect( vec2 p, vec2 b ){\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\n\nvoid mainImage( out vec4 o, in vec2 u ){\n    o = vec4(u/iResolution.xy,.5,1.);\n    o *= -floor(rect(u/iResolution.xy-.5,vec2(.25,.25)));\n}","name":"Buf A","description":"","type":"buffer"}]}