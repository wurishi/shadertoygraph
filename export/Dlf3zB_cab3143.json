{"ver":"0.1","info":{"id":"Dlf3zB","date":"1671983435","viewed":117,"name":"Saturno","username":"Nyon0k","description":"Trabalho 5 - Computação Gráfica 22.2 - Cristian Diamantaras","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["planeta","saturno"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a){\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34, 233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s){\n    p = abs(p)-s;\n    \n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat dTorus(vec3 p, vec2 r) {\n    float x = length(p.xz) - r.x;\n    \n    return length(vec2(x, p.y)) - r.y;\n}\n\nfloat GetDist(vec3 p){\n    float d = sdBox(p, vec3(1));\n    \n    //float s = sin(iTime);\n    vec3 tp = p - vec3(0, 0, 0);\n    //tp.y -= s;\n    \n    float td1  = dTorus (tp, vec2(1.7, 0.1));\n    float td2  = dTorus (tp, vec2(2.2, 0.1));\n    float td3  = dTorus (tp, vec2(3.1, 0.1));\n    float td4  = dTorus (tp, vec2(3.5, 0.1));\n    float td5  = dTorus (tp, vec2(5, 0.1));\n        \n    d = length(p)-1.5;\n    d = min(d, td1);\n    d = min(d, td2);\n    d = min(d, td3);\n    d = min(d, td4);\n    d = min(d, td5);\n    \n    //d += sin(p.y*10. + iTime)*.10;\n    return d;\n}\n\nvec3 Transform(vec3 p){\n    p.xy *= Rot(iTime*.005);\n    p.xz *= Rot(iTime*.05);\n    \n    return p;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = Transform(ro + rd*dO);\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST){\n            break;\n        }\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n        \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z){\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    //vec3 obj = p - (0, 0, 0);\n    //OBJ.xz +=  vec2(sin(iTime / V ) *R1, -cos(iTime / V) * R2);\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(-6, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST){\n        vec3 p = Transform(ro + rd * d);\n        vec3 n = GetNormal(p);\n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col += dif*dif;\n        \n        vec3 colXZ = texture(iChannel0, p.xz*.5+.5).rgb;\n        vec3 colYZ = texture(iChannel0, p.yz*.5+.5).rgb;\n        vec3 colXY = texture(iChannel0, p.xy*.5+.5).rgb;\n        \n        n = abs(n);\n        \n        n *= pow(n, vec3(20));\n        n /= n.x + n.y + n.z;\n        \n        col = colYZ*n.x + colXZ*n.y + colXY*n.z;\n        //col = n;\n        \n        \n        uv = vec2(atan(p.x, p.z)/6.2832, 3.*p.y/3.)+.5;\n        \n        uv.x = fract(uv.x + iTime*.02);\n        vec4 cats = texture(iChannel1, uv);\n        \n        cats.a *= smoothstep(1., .5, abs(p.y)*7.);\n        col = mix(col, cats.rgb, cats.a);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}