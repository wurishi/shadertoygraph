{"ver":"0.1","info":{"id":"XfdyRM","date":"1731008872","viewed":33,"name":"smug jack o cat","username":"mcorteza","description":"i like my pumpkins spooky bruh\nlooks more like an orange than a pumpkin lol\n\nfirst shader please have mercy","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["spooky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat sdCircle (vec2 p, float r) // pls just copy paste code from libraries\n{\n    return length(p) - r;\n}\n// you dont gotta do 18k lines lol\nfloat sdQuadraticCircle( in vec2 p )\n{\n    p = abs(p); if( p.y>p.x ) p=p.yx;\n\n    float a = p.x-p.y;\n    float b = p.x+p.y;\n    float c = (2.0*b-1.0)/3.0;\n    float h = a*a + c*c*c;\n    float t;\n    if( h>=0.0 )\n    {   \n        h = sqrt(h);\n        t = sign(h-a)*pow(abs(h-a),1.0/3.0) - pow(h+a,1.0/3.0);\n    }\n    else\n    {   \n        float z = sqrt(-c);\n        float v = acos(a/(c*z))/3.0;\n        t = -z*(cos(v)+sin(v)*1.732050808);\n    }\n    t *= 0.5;\n    vec2 w = vec2(-t,t) + 0.75 - t*t - p;\n    return length(w) * sign( a*a*0.5+b-1.5 );\n}\n\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\nfloat sdRing( in vec2 p, in vec2 n, in float r, float th )\n{\n    p.x = abs(p.x);\n   \n    p = mat2x2(n.x,n.y,-n.y,n.x)*p;\n\n    return max( abs(length(p)-r)-th*0.5,\n                length(vec2(p.x,max(0.0,abs(r-p.y)-th*0.5)))*sign(p.x) );\n}\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\nfloat sdOrientedVesica( vec2 p, vec2 a, vec2 b, float w )\n{\n    float r = 0.5*length(b-a);\n    float d = 0.5*(r*r-w*w)/w;\n    vec2 v = (b-a)/r;\n    vec2 c = (b+a)*0.5;\n    vec2 q = 0.5*abs(mat2(v.y,v.x,-v.x,v.y)*(p-c));\n    vec3 h = (r*q.x<d*(q.y-r)) ? vec3(0.0,r,0.0) : vec3(-d,0.0,d+w);\n    return length( q-h.xy) - h.z;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    // Time varying pixel color\n    vec3 col = 0.2*(0.5 + 0.5*cos(iTime+p.xyx+vec3(10, 0,0)));\n    \n    if(length(p) < 0.5) col = vec3(5);\n    \n    \n    // body:\n    vec2 r = 1.5*(2.*fragCoord - iResolution.xy)/iResolution.y;\n    float sdfBody = sdQuadraticCircle(r); // pumpkin shape\n    float regPumpkin = 1.-smoothstep(0.,0.04,sdfBody); // 1 inside pumpkin\n    vec3 colPumpkin = vec3(0.8, 0.5, 0.01); // pumpkin color\n    col = mix(col, colPumpkin, regPumpkin);\n    \n    // eyes:\n    vec2 v1 = vec2(0.0, 0.3);\n    vec2 v2 = vec2(0.0,0.1);\n    vec2 pp = 1. - p * 3.5;\n    vec2 reversepp = vec2(1.,-0.60) + p * 3.5;\n    float EyeR = sdOrientedBox(pp, v1, v2, 1.);\n    float EyeL = sdOrientedBox(reversepp, v1, v2, 1.);\n    float sdfEye = min(EyeR,EyeL);\n    \n    float regEye = 1.-smoothstep(0.,0.1,sdfEye);\n    vec3 colEye = vec3(0.,0.,0.);\n    col = mix(col, colEye, regEye);\n        \n    // mouth:\n    vec2 u = vec2(2.,2.);\n    vec2 w = vec2(2.3,0.0);\n    vec2 newp = w - p * 15.;\n    vec2 newerp = -w - p * 15.;\n    \n    \n    float three = sdRing(newp, u, 10., 2.);\n    float three2 = sdRing(newerp, u, 10., 2.);\n    float sdfRing = min(three, three2);\n    \n    float regM = 1.-smoothstep(0.,0.9,sdfRing);\n    vec3 colM = vec3(0.,0.,0.);\n    col = mix(col,colM,regM);\n       \n    // silly ears\n    vec2 q;\n    float angle = PI * 0.2;\n    q.x =   cos(angle)*p.x + sin(angle)*p.y;\n\tq.y = - sin(angle)*p.x + cos(angle)*p.y;\n    vec2 earTrans = vec2(0.01, -0.78);\n    vec2 earTrans2 = vec2(-0.02, -0.78);\n    \n    vec2 qt;\n    \n    float angel = -(PI * 0.2);\n    qt.x =   cos(angel)*p.x + sin(angel)*p.y;\n\tqt.y = - sin(angel)*p.x + cos(angel)*p.y;\n    \n    \n    float ear1 = sdEquilateralTriangle(q + earTrans, 0.3);\n    \n    float ear2 = sdEquilateralTriangle(qt + earTrans2, 0.3);\n    \n    float sdfEar = min(ear1, ear2);\n    float regEar = 1.-smoothstep(0.,0.03,sdfEar);\n    vec3 colEar = vec3(0.7, 0.4, 0.009);\n    col = mix(col, colEar, regEar);\n        \n    // stamen\n    vec2 a = vec2(2.,31.);\n    vec2 b = vec2 (20.,15.);\n    vec2 stemtrans = vec2(17., -17.);\n    \n    float stem = sdOrientedVesica(stemtrans + p * 50., a, b, 5.);\n    float regstem = 1.-smoothstep(0.,1.9,stem);\n    vec3 colstem = vec3(0.,0.5,0.);\n    col = mix(col,colstem,regstem);\n\n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}