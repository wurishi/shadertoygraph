{"ver":"0.1","info":{"id":"MX2Szy","date":"1710770585","viewed":155,"name":"Spilled RM VFX","username":"Eboman","description":"Mouse x, y = FX parameter control (mostly y)\nPress key 1 to 0 on keyboard = FX parameter on/off\nPress key Q to U on keyboard = FX parameter on/off\nFX parameter descriptions in top shader comment","likes":13,"published":1,"flags":48,"usePreview":0,"tags":["fluid","vfx","smoke","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*\n\nCONTROLS_________________:\n\nMouse x = FX amount\nMouse y = FX parameter control\nPress key 1 to 0 on keyboard = FX parameter on/off\nPress key Q to U on keyboard = FX parameter on/off\n\nFX parameters:\n1 = Mask zoom out\n2 = Mask rotate y\n3 = Mask rotate x\n4 = Mask twirl\n5 = Mask scale on/off \n6 = Mask z-scale\n7 = Spill detail\n8 = Spill vertical motion on/off\n9 = Spill horizontal motion on/off\n0 = Spill circular motion on/off\n\nQ = Spill speed\nW = Spill size\nE = Spill move x\nR = Spill move y\nT = Spill shape\nY = Spill more speed\nU = More/less feedback\n\n\nCREDITS__________________:\n\nBased on the spilled shader by flockaroo \nhttps://www.shadertoy.com/view/MsGSRd\n\nRemixed into a video effect by:\nwww.eboman.com\n\n*/\n\nfloat kp(int k){\n    float kp = texelFetch( iChannel1, ivec2(k,2), 0 ).x;\n    return kp;\n}\n\nvec3 ifcrcl(vec3 fcolif, vec2 uvif, vec2 m, vec3 ifcolor, vec2 ifpos, int k, float korm){   \n    fcolif = mix( fcolif, ifcolor, \n        (1.-smoothstep(.3,.31,length(uvif-ifpos)*15.))*kp(k)*max(m.y,korm));\n    fcolif = mix( fcolif, ifcolor*kp(k)+.5-kp(k)/2., \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-ifpos)*15.-0.3))));\n    return fcolif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tvec3 col = texture(iChannel0,uv).rgb;\n\n    vec2 m = vec2(iMouse.x/iResolution.x, pow(iMouse.y/iResolution.y, 0.5));\n\n    vec3 fcolif = col;\n    vec2 uvif = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uvif -= 0.5; \n    uvif /= vec2(iResolution.y / iResolution.x, 1);\n    \n    // Interface Mouse.x\n    fcolif = mix( fcolif, vec3(0.,1.,1.), \n        (1.-smoothstep(.3,.31,length(uvif-vec2(-.84,.45))*15.))*(1.-m.x) );\n    fcolif = mix( fcolif, vec3(0.,1.,1.), \n        (1.-smoothstep(0.,.06,abs(length(uvif-vec2(-.84,.45))*15.-.3))));\n        \n    // Interface Mouse.y        \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.38), 49, 0.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.31), 50, 0.);\n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.24), 51, 0.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.17), 52, 0.);\n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.10), 53, 0.); \n   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.03), 54, 1.);\n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,-.04), 55, 0.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,-.11), 56, 0.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,-.18), 57, 0.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,-.25), 48, 1.);\n    \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.77,.38), 81, 0.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.77,.31), 87, 0.);  \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.77,.24), 69, 0.);\n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.77,.17), 82, 0.);\n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.77,.10), 84, 0.);\n    \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.77,.03), 89, 0.);\n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.77,-.04), 85, 0.);\n    \n    // Final output \n    fragColor = vec4(fcolif,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n/*\n\nCONTROLS_________________:\n\nMouse x = FX amount\nMouse y = FX parameter control\nPress key 1 to 0 on keyboard = FX parameter on/off\nPress key Q to U on keyboard = FX parameter on/off\n\nFX parameters:\n1 = Mask zoom out\n2 = Mask rotate y\n3 = Mask rotate x\n4 = Mask twirl\n5 = Mask scale on/off \n6 = Mask z-scale\n7 = Spill detail\n8 = Spill vertical motion on/off\n9 = Spill horizontal motion on/off\n0 = Spill circular motion on/off\n\nQ = Spill speed\nW = Spill size\nE = Spill move x\nR = Spill move y\nT = Spill shape\nY = Spill more speed\nU = More/less feedback\n\n\nCREDITS__________________:\n\nBased on the spilled shader by flockaroo \nhttps://www.shadertoy.com/view/MsGSRd\n\nRemixed into a video effect by:\nwww.eboman.com\n\n*/\n\n#define uMacro0  (1.-(iMouse.x/iResolution.x))\n#define uMacro1      (iMouse.y/iResolution.y) *       kp(49) + (0.5  *(1.-kp(49))) \n#define uMacro2      (iMouse.y/iResolution.y) *       kp(50) + (0.5  *(1.-kp(50)))\n#define uMacro3      (iMouse.y/iResolution.y) *       kp(51) + (0.5  *(1.-kp(51)))\n#define uMacro4      (iMouse.y/iResolution.y) *       kp(52) + (0.   *(1.-kp(52)))\n#define uMacro5      (iMouse.y/iResolution.y) *       kp(53) + (0.   *(1.-kp(53)))\n#define uMacro6     ((iMouse.y/iResolution.y) *       kp(54) + (0.   *(1.-kp(54))))\n#define uMseven     ((iMouse.y/iResolution.y) *       kp(55) + (0.5  *(1.-kp(55))))\n#define uMeight      (iMouse.y/iResolution.y) *       kp(56) + (1.   *(1.-kp(56)))\n#define uMnine       (iMouse.y/iResolution.y) *       kp(57) + (1.   *(1.-kp(57)))\n#define uMten        (iMouse.y/iResolution.y) *       kp(48) + (0.   *(1.-kp(48)))\n#define uMeleven     (iMouse.y/iResolution.y) *       kp(81) + (0.5  *(1.-kp(81)))\n#define uMtwelve     (iMouse.y/iResolution.y) *100. * kp(87) + (0.01 *(1.-kp(87)))\n#define uMthirteen   (iMouse.y/iResolution.y) *       kp(69) + (0.   *(1.-kp(69)))\n#define uMfourteen   (iMouse.y/iResolution.y) *       kp(82) + (0.   *(1.-kp(82)))\n#define uMfifteen    (iMouse.y/iResolution.y) *       kp(84) + (0.   *(1.-kp(84)))\n#define uMsixteen   ((iMouse.y/iResolution.y) *       kp(89) + (0.334*(1.-kp(89))))\n#define uMseventeen ((iMouse.y/iResolution.y) *       kp(85) + (0.6  *(1.-kp(85))))\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI 3.141592\n\n#define RotNum 5  // meer detail, meer GPU \n#define Res  iChannelResolution[0]\n#define Res1 iChannelResolution[1]\n#define keyTex iChannel3\n#define KEY_I texture(keyTex,vec2((105.5-32.0)/256.0,(0.5+0.0)/3.0)).x\n\nfloat kp(int k){\n    float kp = texelFetch( iChannel3, ivec2(k,2), 0 ).x;\n    return kp;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat GetDist(vec3 p, vec2 uv) {\n    float d = sdBox(p, vec3(1.,1.,uMacro6*uMacro0)*max(1.-1.25*uMacro5, 0.));\n    \n    return d;\n}\n\nvec3 Transform(vec3 p) {\n     p.xz *= Rot(PI*(sin(iTime/8.)*2.)*(uMacro2*uMacro0));\n     p.yz *= Rot(PI*(sin(iTime/5.)*2.)*(uMacro3*uMacro0));\n     p.xz *= Rot(p.y*(uMacro4*uMacro0)*5.+sin(iTime/5.)); \n     return p;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, vec2 uv) {\n\tfloat dO=0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = Transform(ro + rd*dO);\n        float dS = GetDist(p, uv);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p, vec2 uv) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p, uv) - \n        vec3(GetDist(p-e.xyy, uv), \n             GetDist(p-e.yxy, uv),\n             GetDist(p-e.yyx, uv));\n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nconst float ang = 2.0*3.1415926535/float(RotNum);\nmat2 m = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\nmat2 mh = mat2(cos(ang*0.5),sin(ang*0.5),-sin(ang*0.5),cos(ang*0.5));\n\nvec4 randS(vec2 uv){\n    return texture(iChannel1,uv*Res.xy/Res1.xy)-vec4(0.5);\n}\n\nfloat getRot(vec2 pos, vec2 b){\n    vec2 p = b*(1.-(0.5*kp(48)))*(2.*uMeleven);\n    float rot=0.0;\n    for(int i=0;i<RotNum;i++){\n        rot+=dot(texture(iChannel0,fract((pos+p)*(2.*uMseven) /Res.xy)).xy-vec2(0.5), p.yx * (mix(vec2(1.-kp(56),1.-kp(57)), vec2(sin(iTime)*4.,cos(iTime)*4.), kp(48)))); // laatste stukje is direction\n        p = m * p * (3.*uMsixteen) + (3.*uMfifteen);\n    }\n    return rot/float(RotNum)/dot(b,b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv *= vec2(iResolution.y / iResolution.x, 1);\n    \n    float mx = iMouse.x/iResolution.x;\n    float my = pow(iMouse.y/iResolution.y, 0.5);\n    \n    vec3 col = vec3(0);\n    vec3 p2 = vec3(0);\n    vec3 ro = vec3(0, 0, -2)*1.+(uMacro1)*4.; \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    float d = RayMarch(ro, rd, uv);    \n    if(d<MAX_DIST) {\n    \tp2 = Transform(ro + rd * d+1.);\n    \tvec3 n = GetNormal(p2, uv);\n        vec3 colXZ = texture(iChannel2, p2.xz*.5+.5).rgb;\n        vec3 colYZ = texture(iChannel2, p2.yz*.5+.5).rgb;\n        vec3 colXY = texture(iChannel2, p2.xy*.5+.5).rgb;\n        n = abs(n); \n        col = colYZ*n.x + colXZ*n.y + colXY*n.z;  \n    }\n    \n    vec2 pos = fragCoord.xy;\n    float rnd = randS(vec2(float(iFrame)/Res.x,0.5/Res1.y)).x;\n    \n    vec2 b = vec2(cos(ang*uMtwelve*rnd)*uMtwelve,sin(ang*uMtwelve*rnd)*uMtwelve);\n    vec2 v=vec2(2.*uMthirteen,2.*uMfourteen); \n    float bbMax=0.7*Res.y;\n    bbMax*=bbMax;\n    for(int l=0;l<20;l++){  \n        if ( dot(b,b) > bbMax ) break;\n        vec2 p = b;\n        for(int i=0;i<RotNum;i++){\n            v+=p.yx*getRot(pos+p,b);\n            p = m*p;\n        }       \n        b*=2.0;\n    }\n    \n    vec3 pxl = texture(iChannel2,fragCoord.xy/Res.xy).rgb;\n\n   float mpxl = min(abs(p2.x), 1.);\n    \n    vec4 fcol = mix(texture(iChannel0,fract((pos+v*vec2(-1,1)*2.0)/Res.xy)), texture(iChannel2,fragCoord.xy/Res.xy), mpxl);\n    \n    fcol = mix(fcol*0.995, fcol*1.003, abs(sin(iTime)));\n    \n    fcol*= 1.+((uMseventeen/100.)-.006);\n    \n    fragColor = fcol;\n\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tfragColor = texture(iChannel0,uv);\n    \n\n}","name":"Buffer B","description":"","type":"buffer"}]}