{"ver":"0.1","info":{"id":"MslyWr","date":"1487789537","viewed":960,"name":"JPEGged","username":"benzrf","description":"Makes everything JPEGgy and awful!\n\nThe logic is pretty na√Øve and based on my mostly-conceptual understanding of JPEG and its DCT. Also, I wrote a shader for the first time a few days ago. So those are my excuses if I've made any blatant code mistakes.","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["jpeg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BS 8\n\nconst float PI = radians(180.0);\nconst float BSf = float(BS);\n\nfloat basis1D(int k, int i) {\n    return k == 0 ? sqrt(1. / BSf) :\n      sqrt(2. / BSf) * cos(float((2 * i + 1) * k) * PI / (2. * BSf));\n}\n\nfloat basis2D(ivec2 jk, ivec2 xy) {\n    return basis1D(jk.x, xy.x) * basis1D(jk.y, xy.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n\n    ivec2 coords = ivec2(fragCoord),\n          inBlock = coords % BS,\n          block = coords - inBlock;\n\n    for (ivec2 xy = ivec2(0); xy.x < BS; xy.x++) {\n        for (xy.y = 0; xy.y < BS; xy.y++) {\n            fragColor += texelFetch(iChannel0, block + xy, 0) * basis2D(xy, inBlock);\n        }\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BS 8\n\nconst float PI = radians(180.0);\nconst float BSf = float(BS);\n\nfloat basis1D(int k, int i) {\n    return k == 0 ? sqrt(1. / BSf) :\n      sqrt(2. / BSf) * cos(float((2 * i + 1) * k) * PI / (2. * BSf));\n}\n\nfloat basis2D(ivec2 jk, ivec2 xy) {\n    return basis1D(jk.x, xy.x) * basis1D(jk.y, xy.y);\n}\n\nconst float quality = length(vec2(2));\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    if (fragCoord.x > iChannelResolution[0].x || fragCoord.y > iChannelResolution[0].y) return;\n    ivec2 coords = ivec2(fragCoord),\n          inBlock = coords % BS,\n          block = coords - inBlock;\n    if (length(vec2(inBlock)) > quality) return;\n    for (ivec2 xy = ivec2(0); xy.x < BS; xy.x++) {\n        for (xy.y = 0; xy.y < BS; xy.y++) {\n            fragColor += texelFetch(iChannel0, block + xy, 0) * basis2D(inBlock, xy);\n        }\n    }\n}\n","name":"Buf A","description":"","type":"buffer"}]}