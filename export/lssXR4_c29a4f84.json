{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// mi-ku / altair\n\n#define STEPS_1 15\n#define STEPS_2 50\n\nfloat pyramid( vec3 pos, float modd, float zshift, float sp )\n{\n\treturn min(\n\t\t( 1.0 - abs( mod( pos.x, modd ) - 1.0 ) ), ( 1.0 - abs( mod( pos.z * 1.0 + zshift, modd ) - 1.0 ) ) ) *\n\t\t( 1.0 + sp * 4.0 );\n\n}\n\nvec3 mapGround( vec3 pos, float sp )\n{\n\tpos *= 0.35;\n\tfloat pm = 0.6;\n\tfloat modd = 2.0;\n\n\tfloat zshift = -iTime * 4.0;\n\tfloat h = pyramid( pos, modd, zshift, sp );\n\tfloat dm = max( 0.0, 1.0 - max( 0.0, length( pos ) * 0.03 ) );\n\tdm *= max( 0.0, 1.0 - abs( pos.x ) * .2 );\n\n\treturn vec3( pos.x,\n\t\t\t\t//( sin( pos.x * pm ) + sin( pos.z * pm + iTime * 10.0 ) ) * (0.5+sp*2.0) - 10.0,\n\t\t\t\th * dm * 1.5 - 10.,\n\t\t\t\tpos.z );\n}\n\nfloat rmg( vec3 ro, vec3 rd, float sp )\n{\n\tfloat t = 0.0;\n\tfor( int i = 0; i < STEPS_2; i++ )\n\t{\n\t\tvec3 pt = ro + rd * t;\n\t\tfloat h = abs( pt.y - mapGround( pt, sp ).y );\n\t\tif ( h < 0.1 )\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tt += 0.3 * h;\n\t}\n\treturn t;\n}\n\nfloat rmss( vec3 pos, vec3 spos, float sp )\n{\n\treturn length( pos - spos ) - 5.0 - pyramid( pos.xzy, 2.0, 0.0, sp ) * sp -sp * 4.0;\n}\n\nfloat rms( vec3 ro, vec3 rd, vec3 spos, float sp )\n{\n\tvec3 pt = ro;\n\tfloat t = 0.0;\n\tfor( int i = 0; i < STEPS_1; i++ )\n\t{\n\t\tpt += rd * rmss( pt, spos, sp ) * 0.9;\n\t}\n\treturn length( pt - ro );\n}\n\nvec3 shadeSphere( vec3 eye, vec3 pt, vec3 norm, vec3 light, float mult )\n{\n\tvec3 r = normalize( reflect( light, norm ) );\n\tvec3 eyeDir = normalize( pt - eye );\n\tfloat diffuse = max( 0.0, dot( mult * r, eyeDir ) + 1.0 ) * 0.5;\n\tfloat spec = max( 0.0, dot( norm, eyeDir ) );\n\treturn\n\t\tvec3( 1.0, 0.1, 0.01 )\n\t\t//vec3( 1.0, 1.0, 1.0 )\n\t\t* ( diffuse + spec );\n}\n\nvec3 shadeBG( vec2 uv, float sp )\n{\n\tvec3 color = vec3( 0.7, 0.2, 0.1 );\n\tfloat h = pyramid( vec3( uv.x * 10.0, 0.0, 0.0 + 1.2 - sp ), 2.0, 0.0, 0.0 );\n\th = max( 0.7, min( 1.0, 1.0 - ( uv.y - h * 0.1 ) * 50.0 ) );\n\treturn color * h;\n}\n\nvec3 colorize( vec2 uv )\n{\n\tvec3 ro = vec3( 0.0, 0.0, 0.0 );\n\tvec3 rd = vec3( uv.x, uv.y, 1.0 );\n\trd = normalize( rd );\n\n\tvec3 spos = vec3( 0.0, sin( iTime * 2.0 ) * 5.0 + 10.0, 50.0 + cos( iTime * 2.0 ) * 10.0 );\n\tfloat sp = texture( iChannel0, vec2( 0.0, 0.0 ) ).r;\n\n\tfloat t = rmg( ro, rd, sp );\n\tfloat ts = rms( ro, rd, spos, sp );\n\tvec3 light = vec3( 0.0, 1.0, 0.0 );\n\n\tvec3 color;\n\tif ( t < ts && uv.y < 0.0 )\n\t{\n\t\tvec3 pt = ro + rd * t;\n\n\t\tfloat eps = 0.1;\n\t\tvec3 norm = vec3( mapGround( pt + vec3( eps, 0.0, 0.0 ), sp ).y - mapGround( pt, sp ).y,\n\t\t\t\t\t\t  0.3,\n\t\t\t\t\t\t  mapGround( pt + vec3( 0.0, 0.0, eps ), sp ).y - mapGround( pt, sp ).y );\n\t\t    norm += vec3( mapGround( pt + vec3( eps * 2.0, 0.0, 0.0 ), sp ).y - mapGround( pt +  vec3( eps, 0.0, 0.0 ), sp ).y,\n\t\t\t\t\t\t  0.3,\n\t\t\t\t\t\t  mapGround( pt + vec3( 0.0, 0.0, eps ), sp ).y - mapGround( pt + vec3( 0.0, 0.0, eps * 0.5 ), sp ).y );\n\t\t    norm += vec3( mapGround( pt + vec3( eps * 2.0, 0.0, 0.0 ), sp ).y - mapGround( pt +  vec3( eps, 0.0, 0.0 ), sp ).y,\n\t\t\t\t\t\t  0.3,\n\t\t\t\t\t\t  mapGround( pt + vec3( 0.0, 0.0, eps * 2.0 ), sp ).y - mapGround( pt + vec3( 0.0, 0.0, eps ), sp ).y );\n\t\tnorm = normalize( norm );\n\t\t\n\t\tvec3 rd2 = normalize( -reflect( pt - ro, norm ) );\n\t\tfloat ts2 = rms( pt, rd2, spos, sp );\n\t\tvec3 npt = pt + rd2 * ts2;\n\t\t//if ( ts2 > 10.0 )\n\t\t{\n\t\t\tnorm = normalize( npt - spos ) * 0.01;\n\t\t}\n\t\tcolor = shadeSphere( pt, npt, norm, light, -1.0 );\n\t}\n\telse\n\t{\n\t\tif ( ts < 100.0 )\n\t\t{\n\t\t\tvec3 pt = ro + rd * ts;\n\t\t\tvec3 norm = normalize( pt - spos );\n\n\t\t\tcolor = shadeSphere( ro, pt, norm, light, 1.0 );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcolor = shadeBG( uv, sp );\n\t\t}\n\t}\n\n\treturn color;\n}\n\nvec3 noiseGrain( vec2 uv )\n{\n\treturn vec3(\n\t\ttexture( iChannel1, uv * 5.0 + vec2( iTime * 10.678, iTime * 10.317 ) ).r\n\t) * 0.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= vec2( 0.5, 0.5 );\n\tfloat dist = ( 0.6 - length( uv ) * 0.7) * 15.0;\n\tvec3 color = colorize( uv ) * dist - noiseGrain( uv );\n\n\tfragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lssXR4","date":"1397923621","viewed":228,"name":"Abstract Sun","username":"mi_ku","description":"Just an simple idea that came to my mind after seeing Mathew Divito stuff","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}