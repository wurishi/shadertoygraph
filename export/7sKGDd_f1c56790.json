{"ver":"0.1","info":{"id":"7sKGDd","date":"1632771240","viewed":51,"name":"AA sinusoid","username":"rafastv","description":"anti-aliasing on a sinusoid.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["circle","antialiasing","aa","sinusoid","ssaa","jsaa","jaggies"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float seed = 1.0;\n\nfloat random()\n{\n    seed += 1.0;\n    float angle = 1000007.+17.*seed;\n    return fract((cos(angle)+1.)*.5 + (sin(angle)+1.)*.75);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 bg_color = vec3(0.00,0.75,0.95)*(1.0-pow((sin(float(iTime))+1.)/2.,2.));\n    vec3 fg_color = vec3(0.10,0.35,0.00); \n    vec3 color;\n    vec2 uv;\n    float total, count_fg, weight_fg, factor, clock;\n    \n    clock = (sin(float(iTime))+1.)/2.;\n    /* stars: no AA */\n    uv = fragCoord/iResolution.y * 5.;\n    for (float n=1.; n<=10.; n+=1.)\n    {\n        vec2 center = vec2(random()*4.*iResolution.x/iResolution.y + .5, random() + 4.);\n        if (length(uv-center) <= .5)\n            bg_color = bg_color + pow(clock,3.)*texture(iChannel0, fract(uv-center+vec2(0.5))).rgb;\n    }\n    /* sun: SSAA x16 */\n    factor = 16.;\n    uv = fragCoord/iResolution.y - .5*vec2(iResolution.x/iResolution.y, 1.);\n    vec2 center = vec2(0.75,0.5) - vec2(0.,clock);\n    if (length(uv-center) < 0.1)\n    {\n        vec3 sg_color = vec3(0.95,0.95,0.);\n        \n        \n        total = 0.0;\n        count_fg = 0.0;\n        for (float a=-1.;a<=1.;a+=2./factor)\n            for (float b=-1.;b<=1.;b+=2./factor)\n            {\n                uv = (fragCoord + vec2(a,b))/iResolution.y - .5*vec2(iResolution.x/iResolution.y, 1.);\n                total += 1.;\n                if (length(uv-center) < 0.1)\n                    count_fg += 1.;\n            }\n        weight_fg = count_fg/total;\n        bg_color = weight_fg * sg_color + (1.0 - weight_fg) * bg_color;\n    }\n   \n    /* mountains: jittered SSAA x4 */    \n    factor = 4.;\n    total = 0.0;\n    count_fg = 0.0;\n    for (float a=-1.0+0.8/factor;a<=1.-0.8/factor;a+=0.8/factor)\n        for (float b=-1.+0.8/factor;b<=1.-0.8/factor;b+=0.8/factor)\n        {\n            uv = (fragCoord + vec2(a,b) + 0.8/factor*vec2(random(),random()))/iResolution.y - .5*vec2(iResolution.x/iResolution.y, 1.);\n            total += 1.;\n            float limit = .25*sin(20.*uv.x + 5.*iTime);\n            if (uv.y <= limit)\n                count_fg += 1.;\n        }\n    \n    weight_fg = count_fg/total;\n    color = weight_fg * fg_color + (1.0 - weight_fg) * bg_color;\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}\n\n\n/* Copyright (c) 2021 Rafael S. T. Vieira\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights  \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y - .5*vec2(iResolution.x/iResolution.y, 1.);\n    float brightness = 0.2;\n    vec3 color = vec3(smoothstep(brightness,1.0-brightness,min(pow(1./abs(uv.x*uv.y),1e-1)-1.25,1.)));\n    color = 2.0*smoothstep(0.01,1.0,0.5-length(uv))*color;\n    fragColor = vec4(color,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}