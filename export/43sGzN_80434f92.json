{"ver":"0.1","info":{"id":"43sGzN","date":"1707213154","viewed":63,"name":"color spheres glitch repeating","username":"akr51","description":"Attempt at ray tracing and got silly and started mapping the color values to Spherical coordinates. It needs randomness.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["spherical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 Spherical(vec3 cartesian)\n{\n    \n    \n    float r = length(cartesian);\n    float theta = atan(cartesian.y, cartesian.x);\n    float phi = acos(cartesian.z / r);\n    \n    return vec3(r, theta, phi);\n\n}\n\n\n// Function to convert spherical coordinates to Cartesian coordinates\nvec3 fromSpherical(vec3 sphericalCoords) {\n    float x = sphericalCoords.x * sin(sphericalCoords.z) * cos(sphericalCoords.y);\n    float y = sphericalCoords.x * sin(sphericalCoords.z) * sin(sphericalCoords.y);\n    float z = sphericalCoords.x * cos(sphericalCoords.z);\n    return vec3(x, y, z);\n}\n\n\nfloat Sphere(vec3 rayorigi, vec3 raydir, vec3 center, float radius)\n{\n\n\n    vec3 oc = rayorigi - center;\n    float a = dot(raydir, raydir);\n    float b = 2.0 * dot(oc, raydir);\n    float c = dot(oc, oc) - radius * radius;\n    float discriminant = b * b - 4.0 * a * c;\n    \n    if (discriminant < 0.0)\n    {\n    \n        \n        return -1.0;\n    \n    }\n    \n    float f = (-b - sqrt(discriminant)) / (2.0 * a);    \n    return sin(f * 11.0);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n   \n\n    vec2 pv = vec2(cos(iTime), sin(iTime));\n    \n    vec3 rayorigi = vec3(0.0, 0.0, -0.5);\n    vec3 raydir = vec3(uv, sin(iTime));\n    \n    vec3 color = vec3(0.0);\n    \n    for (float i = -1.0; i <= 1.0; i += 0.1)\n    {\n    \n        vec3 roriginmutate = vec3(cos(i * 3.0 * pv.x), sin(i * 2.0 * pv.y), 0.0) * 0.2;\n        vec3 goriginmutate = vec3(0.0, cos(i * 2.2), sin(i * 1.1 * pv.y)) * 0.3;\n        vec3 boriginmutate = vec3(cos(i * 0.45 * pv.x), pv.x, sin(i * 2.3 * pv.y)) * 0.3;\n\n        vec3 rdirmutate = vec3(sin(i), cos(i), tan(i));\n        vec3 gdirmutate = vec3(cos(i), tan(i), sin(i));\n        vec3 bdirmutate = vec3(tan(i), sin(i), cos(i));\n\n        color.r = pow(0.4 / Sphere(rayorigi + roriginmutate, raydir + rdirmutate, vec3(0.0, 0.0, sin(iTime + i) * 0.4)  + 0.1  * vec3(cos(iTime * 0.5 + i), sin(iTime + i), 0.0), 0.5), 3.0);\n        color.g = pow(0.4 / Sphere(rayorigi + goriginmutate, raydir + gdirmutate, vec3(0.0, 0.0, sin(iTime + i * 1.5) * 0.41) + 0.14 * vec3(cos(iTime + i), 0.0, cos(iTime + i)), 0.6), 4.0);\n        color.b = pow(0.4 / Sphere(rayorigi + boriginmutate, raydir + bdirmutate, vec3(0.0, 0.0, sin(iTime + i * 2.4) * 0.41) + 0.14 * vec3(0.0, cos(iTime + i), cos(iTime + i)), 0.7), 4.0);\n    \n    \n    }\n    \n    color = Spherical(color);\n    \n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}