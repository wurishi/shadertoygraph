{"ver":"0.1","info":{"id":"WldSRj","date":"1581347643","viewed":1313,"name":"This should be allowed!","username":"ttg","description":"Compilation success of Common tab is useless, but its failure prompts Shadertoy to block the shader on startup and prevent saving.\n\nOtherwise this is useful for routines in Common to use a function with a per-buffer implementation.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["shadertoy","bug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 someFunction_impl (vec2 uv) {\n    return vec3(.5+.5*sin(uv.y*24.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = myFunction(uv);\n    if (uv.x<.5) col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*                                #if __LINE__<15\n                                #define _SHADERTOY_TAB_COMMON\n                                #endif\n*/\n\n// Hey, look, there _IS_ a way to detect Common tab\n#ifndef HW_PERFORMANCE\n#define _SHADERTOY_TAB_COMMON\n#endif\n\nvec3 someFunction (vec2 uv);\n\nvec3 myFunction (vec2 uv)\n{\n    // Do something non-trivial...\n    return someFunction(uv);\n}\n\nvec3 someFunction_impl (vec2 uv);\nvec3 someFunction (vec2 uv) {\n    return someFunction_impl(uv);\n}\n\n// In Shadertoy, no way (without #ifdef HW_PERFORMANCE or #if __LINE__ hack)\n// to make compilation of Common tab satisfied.\n\n#ifdef _SHADERTOY_TAB_COMMON\nvec3 someFunction_impl (vec2 uv) { return vec3(0.); }\n#endif\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 someFunction_impl (vec2 uv) {\n    return vec3(.5+.5*sin(uv.y*36.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = myFunction(uv);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}