{"ver":"0.1","info":{"id":"4l3yWn","date":"1532103677","viewed":375,"name":"Photo Booth Filters","username":"Veggiebob","description":"Trying to duplicate some of Apple's photobooth filters. Mouseable. You can go change the filter in the code if you want.","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["mouse","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate2D (vec2 p, float angle){\n    float a = atan(p.y, p.x)+angle;\n    float m = length(p);\n    return vec2(cos(a)*m, sin(a)*m);\n}\nfloat bright (vec3 c){\n    return dot(vec3(1.), c)/3.;\n}\n//  Function from IÃ±igo Quiles \n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0, \n                     0.0, \n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n//position filters\nvec2 filter0 (vec2 i, vec2 f){//none\n    return i;\n}\nvec2 filter1 (vec2 i, vec2 f){//squeeze\n    vec2 away = normalize(i-f);\n    float d = length(i-f)*0.005;\n    return (i-f)*0.7+f+away*pow(d, 0.4);\n}\nvec2 filter2 (vec2 i, vec2 f){//twirl\n    float aspect = iResolution.x/iResolution.y;\n    i.x*=aspect;\n    f.x*=aspect;\n    float d = length(i-f);\n    vec2 xy = rotate2D(i-f, 100.*d*pow(0.35, d*20.))+f;\n    xy.x/=aspect;\n    return xy;\n}\nvec2 filter3 (vec2 i, vec2 f){//mirror\n    return vec2(f.x+abs(i.x-f.x), i.y);\n}\nvec2 filter4 (vec2 i, vec2 f){//stretch\n    i-=f;\n    i*=sqrt(abs(i*0.7));\n    i+=f;\n    return i;\n}\nvec2 filter5 (vec2 i, vec2 f){//light tunnel\n    i.x*=iResolution.x/iResolution.y;\n    f.x*=iResolution.x/iResolution.y;\n    vec2 n = normalize(i-f);\n    float m = min(length(i-f), 0.3);\n    vec2 nn = n*m+f;\n    nn.x/=iResolution.x/iResolution.y;\n    return nn;\n}\nvec2 filter6 (vec2 i, vec2 f){//a really bad kaleidoscope\n    i-=f;\n    float sc = 0.5;\n    float a = 0.8;\n    i = rotate2D(i, a);\n    i = mod(i, sc);\n    i = rotate2D(i, 9.0);\n    i = mod(i, sc);\n    return i+f;\n}\n\n//color filters\nvec3 color_filter0 (vec3 c){//none\n    return c;\n}\nvec3 color_filter1 (vec3 c){//inverted brightness\n    return vec3(1.-bright(c));\n}\nvec3 color_filter2 (vec3 c){//hsb rainbow aka \"thermal camera\"\n    float b = bright(c);\n    vec3 nc = vec3(b, 1., 1.);\n    nc = hsb2rgb(nc);\n    return nc;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = 1.-uv.x;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse.x = 1.-mouse.x;\n    \n    vec2 nw = filter2(uv, mouse);//Change filter here //////////////////\n    vec3 col = texture(iChannel0, nw).rgb;\n\tcol = color_filter1(col);//change color filter here /////////////\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}