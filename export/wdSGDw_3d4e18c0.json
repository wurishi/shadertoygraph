{"ver":"0.1","info":{"id":"wdSGDw","date":"1548987701","viewed":524,"name":"Halftone Experiment","username":"kzone272","description":"Inspired by Into the Spider-Verse","likes":6,"published":1,"flags":2,"usePreview":0,"tags":["dots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float roundNearest(float f, float size)\n{\n\treturn round(f / size) * size;\n}\n\n// slope = f'(x) at x = 0;\nfloat sigmoid(float f, float slope) {\n    return tanh(slope * f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    mat2 t;\n    // Transform to isometric:\n    //t[0] = vec2(1, 0);\n    //t[1] = vec2(0.5, 0.866);\n    // Rotate 22.5 degrees\n    t[0] = vec2(0.924, 0.323); // cos, sin\n    t[1] = vec2(-0.323, 0.924); // -sin, cos\n    float scale = (uv.x + 1.) / 2. + (uv.y + 1.) / 3.;\n    //float scale = length(uv.xy - vec2(-1, 1)) + 1.;\n    //float scale = 1.;\n    //t *= scale;\n    mat2 tInv = inverse(t);\n    vec2 pIso = tInv * fragCoord.xy;\n    \n    float size = 7.;\n    float stopX = roundNearest(pIso.x, size);\n    float stopY = roundNearest(pIso.y, size);\n    \n    vec2 nearestIso = vec2(stopX, stopY);\n    \n    float real = length(texture(iChannel0, t * nearestIso / iResolution.xy).rgb) / sqrt(3.);\n    //float real = length(texture(iChannel0, uv.xy).rgb) / sqrt(3.);\n    \n    vec3 hue = 0.5 + 0.5 * cos(iTime+uv.xyx + vec3(0, 2, 4));\n    //hue = vec3(1);\n    \n    vec3 col;\n    \n    float light = 1.;\n    float dark = real;\n    \n    float d = abs(distance(t * nearestIso, t * pIso));\n \tfloat pivot = d - (1. - real) * size / 1.7;\n    float alpha = sigmoid(pivot, 2.); // sigmoid for AA\n    \n    float lum = alpha * light + (1. - alpha) * dark;\n    //lum = real;\n    col = lum * hue;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}