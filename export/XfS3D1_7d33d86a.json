{"ver":"0.1","info":{"id":"XfS3D1","date":"1704140335","viewed":92,"name":"mountain horizon (sunset)","username":"MonterMan","description":"a mountain?","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["montain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"mountain horizon\" by MonterMan. https://shadertoy.com/view/Xfj3WR\n// 2024-01-01 20:10:48\n\n#define T_MAX 50.0\n#define SHADOW_T_MAX 10.0\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 hash22b(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return 2.0 * fract((p3.xx+p3.yz)*p3.zy) - 1.0;\n}\n\nmat2 rot2d(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        c, -s,\n        s, c);\n}\n\nfloat noise(vec2 p)\n{\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    \n    float a = dot(hash22b(ip+vec2(0,0)), fp-vec2(0,0));\n    float b = dot(hash22b(ip+vec2(1,0)), fp-vec2(1,0));\n    float c = dot(hash22b(ip+vec2(0,1)), fp-vec2(0,1));\n    float d = dot(hash22b(ip+vec2(1,1)), fp-vec2(1,1));\n    \n    vec2 t = smoothstep(vec2(0), vec2(1), fp);\n    float res =mix(mix(a, b, t.x),\n                   mix(c, d, t.x),\n                   t.y);\n    return 0.5 + 0.5 * res;\n}\n\nfloat snoise(vec2 p)\n{\n    return 2.0 * noise(p) - 1.0;\n}\n\nfloat fbm(vec2 p)\n{\n    float res = 0.0;\n    float amp = 0.5;\n    float freq = 1.0;\n    for (int i = 0; i < 10; ++i)\n    {\n        res += amp * noise(freq*p);\n        //p *= rot2d(0.37);\n        amp /= 2.0;\n        freq *= 2.0;\n    }\n    return res;\n}\n\nfloat map(vec3 p)\n{\n    float ground = p.y - 1.4*fbm(p.xz);\n    return 0.75*ground;\n}\n\nvec3 calc_normal( in vec3 p ) // for function f(p)\n{\n    const float h = 0.0001;      // replace by an appropriate value\n    #define ZERO (min(iFrame,0)) // non-constant zero\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*h);\n    }\n    return normalize(n);\n}\n\nfloat calc_shadow(vec3 p, vec3 l, float k)\n{\n    float res = 1.0;\n    \n    float t = 0.0;\n    for (int i = 0; i < 256 && t < SHADOW_T_MAX; ++i)\n    {\n        float dist = map(p + t * l);\n        if (dist < 0.0001)\n        {\n            return 0.0;\n        }\n        res = min(res, k*dist/t);\n        t += dist;\n    }\n    \n    return res;\n}\n\nvec3 sunDir = normalize(vec3(0.2, 0.1, 1.0));\nvec3 skyCol = 1.0*vec3(0.25, 0.2, 0.5);\nvec3 sunCol = 1.5*vec3(0.9,0.5,0.2);\nvec3 lowCol = 0.5*vec3(0.8, 0.05, 0.05);\n    \nvec3 calcSkyCol(vec3 rd)\n{\n    vec3 col = vec3(0);\n    \n    // sky\n    {\n        float h = max(0.0, rd.y);\n        float sh = h-0.23*(1.0/(0.8+2.0*pow(rd.x-sunDir.x, 2.0)));\n        col = mix(sunCol, skyCol, 1.0-exp(-3.0*sh)); // blend of orange glow and purple sky\n        col = mix(lowCol, col, 1.0-exp(-10.0*h)); // tint red underneath\n    }\n    \n    // sun\n    {\n        float sunT = max(0.0, dot(rd, sunDir));\n        sunT = smoothstep(0.999, 1.0, sunT);\n        col = mix(col, vec3(1.0,1.0,0.7), sunT);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.1, 0.8, -1);\n    vec3 at = vec3(0, 0.6, 0);\n    vec3 cam_z = normalize(at - ro);\n    vec3 cam_x = normalize(cross(vec3(0,1,0), cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + 1.3 * cam_z);\n    \n    float t = 0.0;\n    bool hit = false;\n    for (int i = 0; i < 256 && t < T_MAX; ++i)\n    {\n        vec3 p = ro + t * rd;\n        float dist = map(p);\n        if (abs(dist) < 0.001)\n        {\n            hit = true;\n            break;\n        }\n        t += dist;\n    }\n    \n    float sunAmount = max(0.0, dot(rd, sunDir));\n\n    vec3 col = vec3(0);\n    if (hit)\n    {\n        vec3 p = ro + t * rd;\n        vec3 n = calc_normal(p);\n        vec3 shadow = pow(vec3(calc_shadow(p+0.003*n, sunDir, 16.0)), vec3(1.0, 1.25, 1.5));\n        \n        vec3 albedo = vec3(0.37, 0.3, 0.23);\n        col += max(0.0, dot(n, sunDir)) * sunCol * albedo * shadow;\n        col += 0.05*max(0.0, -n.y) * sunCol * albedo;\n        col += 0.1 * max(0.0, dot(n, vec3(0,1,0))) * albedo * skyCol;\n        \n        vec3 fog_col = mix(calcSkyCol(rd), sunCol, pow(sunAmount, 8.0));\n        \n        //float fogAmount = 1.0-exp(-0.2*t);\n        // https://iquilezles.org/articles/fog/\n        float a = 0.05;\n        float b = 0.3;\n        float fogAmount = (a/b) * exp(-ro.y*b) * (1.0 - exp(-t*rd.y*b))/rd.y;\n        col = mix(col, fog_col, clamp(fogAmount, 0.0, 1.0));\n    }\n    else\n    {\n        col = calcSkyCol(rd);\n        //col = mix(sky_col, sun_col, pow(sunAmount, 16.0));\n    }\n\n    // Output to screen\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}