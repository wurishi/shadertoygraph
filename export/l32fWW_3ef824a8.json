{"ver":"0.1","info":{"id":"l32fWW","date":"1729492828","viewed":95,"name":"@musix/field/arrow","username":"MusixNotMusic","description":"texture arrow","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["texturearrow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.0)\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\nfloat gridSize = 16.0;\n\nvec2 rotate(vec2 p, vec2 c, float radian) {\n    mat2 rot = mat2(\n        cos(radian), -sin(radian), \n        sin(radian), cos(radian)\n    );\n    return rot * (p - c) + c;\n}\n\n\nfloat arrow(vec2 fragCoord, float rad) {\n    float arrowStyle = gridSize * 0.25;    \n    float lineStyle = gridSize * 0.15;\n\n    \n    vec2 base = (floor(fragCoord / gridSize)) * gridSize;\n    vec2 bottom = base + vec2(gridSize * 0.5, lineStyle);\n    vec2 up = base + vec2(gridSize * 0.5, gridSize - lineStyle);\n    \n    vec2 center = base + vec2(gridSize) * 0.5;\n    \n    bottom = rotate(bottom, center, rad);    \n    up = rotate(up, center, rad);\n\n    \n    float t1 = sdOrientedBox(fragCoord, bottom, up, lineStyle);    \n    \n    // float t2 = sdTriangleIsosceles(rotate(fragCoord - bottom, base, 1.0), vec2(arrowStyle * 0.75, arrowStyle));\n    vec2 p1 = base + vec2(gridSize * 0.5, gridSize);    \n    vec2 p2 = p1 + vec2(-arrowStyle, -arrowStyle * 1.5);\n    vec2 p3 = p1 + vec2(arrowStyle, -arrowStyle * 1.5);\n    \n    p1 = rotate(p1, center, rad);    \n    p2 = rotate(p2, center, rad);\n    p3 = rotate(p3, center, rad);\n\n\n    float t2 = sdTriangle(fragCoord, p1, p2, p3);\n    \n    return  min(t1, t2);\n}\n\nfloat radian2(vec2 uv) {\n    float rad = acos(dot(uv, vec2(1.0, 0.0)) / length(uv));\n    return uv.x > 0.0 ? rad : 2.0 * PI - rad;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec4 col = vec4(0.0, 0.0, 0.0, 0.1);\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec2 base = floor(fragCoord / gridSize) * gridSize;\n    vec2 center = base + vec2(gridSize) * 0.5;\n    \n    vec4 field = texture(iChannel0, center / iResolution.xy);\n    \n    float rad = radian2(field.xy - 0.5);\n\n    // float t = arrow(fragCoord, atan((field.y - 0.5)/(field.x - 0.5)));\n    float t = arrow(fragCoord, rad);    \n\n\n    //if (t < 0.0) col = normalize(vec4(0.5 - t));        \n    if (t < 0.0) col = field;    \n\n    \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}