{"ver":"0.1","info":{"id":"Wd3BWX","date":"1606084282","viewed":105,"name":"checkerboard animation 9","username":"DjinnKahn","description":"for https://isohedral.ca/swirled-series/","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat sqr( float x ) { return x * x; }\n\nfloat easeInOutQuad( float x ) \n{\n    x = clamp( x, 0., 1. );\n\treturn x < 0.5 ? 2. * x * x : 1. - sqr(-2. * x + 2.) / 2.;\n}\n\nvec2 rot( vec2 p, float angle )\n{\n    return vec2( p.x * cos(angle) + p.y * sin(angle), p.x * -sin(angle) + p.y * cos(angle) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(.2,.2,.2,1.0);\n    vec2 uv = (fragCoord - iResolution.xy*.5) / iResolution.y;\n    if ( uv.x < -.5 || uv.x >= .5 )\n        return;\n    \n    uv += vec2( .0001 ); // without this, lines aren't perfectly straight at iTime==0, not sure why\n    \n    fragColor = vec4(.0,.0,.0,1.0);\n    \n    \n    bool on = false;\n\n    float t = fract( iTime/2. );        \n    uv.x += easeInOutQuad( t ) / 8.;\n    \n    t = t * 3.;\n    t -= length(uv) * .3;\n    \n    for ( int axis = 0; axis < 2; axis++ )\n    {\n        for ( int i = -5; i <= 5; i++)\n        {\n            float a = t+float(-abs(i))*.3;\n            vec2 p = rot( vec2( float(i) / 8., 0. ), easeInOutQuad(a)*PI/2. );\n            vec2 v = rot( vec2( 1., 0. ), easeInOutQuad(a)*PI/2. );\n            if ( dot( uv - p, v ) >= 0. )\n                on = !on;\n        }\n        uv = rot( uv, PI/2. );\n    }\n    \n    \n    \n        \n    fragColor = vec4(vec3(on?1.:0.),1.0);\n}","name":"Image","description":"","type":"image"}]}