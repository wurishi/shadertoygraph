{"ver":"0.1","info":{"id":"WlXSDH","date":"1564946651","viewed":341,"name":"Graffiti Illusion","username":"nr4","description":"Graffiti scene from the 64k intro \"Gross Gloss\" by Team210 at Solskogen 2k19.","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["demoscene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Gross Gloss by Team210 - 64k intro by Team210 at Solskogen 2k19\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float fsaa = 144.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float bound = sqrt(fsaa)-1.;\n   \tfor(float i = -.5*bound; i<=.5*bound; i+=1.)\n        for(float j=-.5*bound; j<=.5*bound; j+=1.)\n        {\n     \t\tcol += texture(iChannel0, fragCoord/iResolution.xy+vec2(i,j)*mix(3.,20.,2.*abs(fragCoord.y/iResolution.y-.5))*exp(-abs(1.e-2*length(fragCoord.xy)/iResolution.y-.5))/max(bound, 1.)/iResolution.xy).xyz;\n        }\n    col /= fsaa;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* Gross Gloss by Team210 - 64k intro by Team210 at Solskogen 2k19\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n// Global constants\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1.0, 0.0, -1.0);\nfloat a = 1.0;\n\nfloat nbeats;\nfloat iScale;\n\nvoid rand(in vec2 x, out float n)\n{\n    x += 400.;\n    n = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n}\n\nvoid lfnoise(in vec2 t, out float n)\n{\n    vec2 i = floor(t);\n    t = fract(t);\n    t = smoothstep(c.yy, c.xx, t);\n    vec2 v1, v2;\n    rand(i, v1.x);\n    rand(i+c.xy, v1.y);\n    rand(i+c.yx, v2.x);\n    rand(i+c.xx, v2.y);\n    v1 = c.zz+2.*mix(v1, v2, t.y);\n    n = mix(v1.x, v1.y, t.x);\n}\n\nvoid dlinesegment(in vec2 x, in vec2 p1, in vec2 p2, out float d)\n{\n    vec2 da = p2-p1;\n    d = length(x-mix(p1, p2, clamp(dot(x-p1, da)/dot(da,da),0.,1.)));\n}\n\n//distance to spline with parameter t\nfloat dist2(vec2 p0,vec2 p1,vec2 p2,vec2 x,float t)\n{\n    t = clamp(t, 0., 1.);\n    return length(x-pow(1.-t,2.)*p0-2.*(1.-t)*t*p1-t*t*p2);\n}\n\n//minimum dist3ance to spline\nvoid dspline2(in vec2 x, in vec2 p0, in vec2 p1, in vec2 p2, out float ds)\n{\n    //coefficients for 0 = t^3 + a * t^2 + b * t + c\n    vec2 E = x-p0, F = p2-2.*p1+p0, G = p1-p0;\n    vec3 ai = vec3(3.*dot(G,F), 2.*dot(G,G)-dot(E,F), -dot(E,G))/dot(F,F);\n\n\t//discriminant and helpers\n    float tau = ai.x/3., p = ai.y-tau*ai.x, q = - tau*(tau*tau+p)+ai.z, dis = q*q/4.+p*p*p/27.;\n    \n    //triple real root\n    if(dis > 0.) \n    {\n        vec2 ki = -.5*q*c.xx+sqrt(dis)*c.xz, ui = sign(ki)*pow(abs(ki), c.xx/3.);\n        ds = dist2(p0,p1,p2,x,ui.x+ui.y-tau);\n        return;\n    }\n    \n    //three dist3inct real roots\n    float fac = sqrt(-4./3.*p), arg = acos(-.5*q*sqrt(-27./p/p/p))/3.;\n    vec3 t = c.zxz*fac*cos(arg*c.xxx+c*pi/3.)-tau;\n    ds = min(\n        dist2(p0,p1,p2,x, t.x),\n        min(\n            dist2(p0,p1,p2,x,t.y),\n            dist2(p0,p1,p2,x,t.z)\n        )\n    );\n}\n\n// Stroke\nvoid stroke(in float d0, in float s, out float d)\n{\n    d = abs(d0)-s;\n}\n\n// Extrusion\nvoid zextrude(in float z, in float d2d, in float h, out float d)\n{\n    vec2 w = vec2(-d2d, abs(z)-0.5*h);\n    d = length(max(w,0.0));\n}\n\nfloat sm(float d)\n{\n    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);\n}\n\n// iq's smooth minimum\nvoid smoothmin(in float a, in float b, in float k, out float dst)\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    dst = min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nfloat ind;\nvoid graf(in vec2 x, in vec2 size, in float w, out float dst)\n{\n    x.x += .3*iTime;\n    x.y -= .1;\n    \n    vec2 y = vec2(mod(x.x, size.x)-.5*size.x, x.y);\n    ind = (y.x-x.x)/size.x;\n    vec3 r,\n        d;\n    \n    size.x -= 2.*w; \n    \n    rand(vec2(ind,0.), r.x);\n    rand(vec2(ind,1337.), r.y);\n    rand(vec2(ind,2337.), r.z);\n    \n    vec2 pc = vec2(.5*size.x*(-1.+2.*r.y), 0.);\n    \n    // x component of r selects first actor\n    if(r.x < .5) // Lin\n    {\n        vec2 p1 = vec2(.5*size.x*(-1.+4.*r.x),-.5*size.y),\n            p2 = pc;\n        dlinesegment(y, p1, p2, dst);\n    }\n    else // Quad\n    {\n        vec2 p1 = vec2(.5*size.x*(-1.+4.*(r.x-.5)),-.5*size.y),\n            p2 = vec2(.5*size.x*(-1.+2.*r.y), -.5*size.y),\n            p3 = pc;\n        dspline2(y, p1, p2, p3, dst);\n    }\n    \n    // z component of r selects second actor\n    if(r.z < .5) // Lin\n    {\n        vec2 p1 = vec2(.5*size.x*(-1.+4.*r.z),.5*size.y),\n            p2 = pc;\n        dlinesegment(y, p1, p2, d.x);\n    }\n    else // Quad\n    {\n        vec2 p1 = vec2(.5*size.x*(-1.+4.*(r.z-.5)),.5*size.y),\n            p2 = vec2(.5*size.x*(-1.+2.*r.y), .5*size.y),\n            p3 = pc;\n        dspline2(y, p1, p2, p3, d.x);\n    }\n    \n    dst = min(dst, d.x);\n    \n    // Generate displacement\n    lfnoise(12.*x, d.y);\n    lfnoise(22.*x, d.z);\n    d.y += .3*d.z;\n    d.y = floor(.2+d.y);\n    \n    stroke(dst, w+.08*d.y, dst);\n}\n\nvoid add(in vec2 sda, in vec2 sdb, out vec2 sdf)\n{\n    sdf = mix(sda, sdb, step(sdb.x, sda.x));\n}\n\nvoid scene(in vec3 x, out vec2 sdf)\n{\n    float n;\n    lfnoise(5.*x.xy+iTime*c.xy, n);\n    x.z += .03*n;\n    \n    float d = 1., da;\n    for(float i=0.; i<2.; i+=1.)\n    {\n    \tgraf(x.xy-1337.333*i*c.xy, vec2(.4,.6), .05, da);\n        float rr;\n        rand(i*c.xx*1.e2,rr); \n        zextrude(x.z, -d+.5*abs(x.z), .07+.06*rr, d);\n        stroke(d,mix(.02,.04,iScale), d);\n        smoothmin(d, da, .2, d);\n    }\n    sdf = vec2(d, 2.);\n    \n    add(sdf, vec2(x.z+.05,1.), sdf);\n}     \n\nvoid normal(in vec3 x, out vec3 n, in float dx)\n{\n    vec2 s, na;\n    \n    scene(x,s);\n    scene(x+dx*c.xyy, na);\n    n.x = na.x;\n    scene(x+dx*c.yxy, na);\n    n.y = na.x;\n    scene(x+dx*c.yyx, na);\n    n.z = na.x;\n    n = normalize(n-s.x);\n}\n\nvoid colorize(in vec2 x, out vec3 col)\n{\n    x.x += .3*iTime;\n    x.y -= .05;\n    \n    col = .5*c.xxx;\n    \n    float s = .1;\n    vec2 dd = mod(x, s)-.5*s;\n    stroke(dd.x, .005, dd.x);\n    stroke(dd.y, .005, dd.y);\n    col = mix(col, c.xxx, sm(min(dd.x, dd.y)));\n    \n    float d = 1., da;\n    for(float i=0.; i<2.; i+=1.)\n    {\n    \tgraf(x.xy-1337.333*i*c.xy-.3*iTime*c.xy, vec2(.4,.6), .05, da);\n        float rr;\n        rand(i*c.xx*1.e2,rr); \n        stroke(da,.18, da);\n        smoothmin(d, da, .2, d);\n    }\n    vec3 c1 = vec3(.78,.61*abs(2.*x.y),.15);\n    \n    col = mix(col, c1, sm(d));\n    \n    if(d != 1.)\n    {\n        stroke(d-.03, .03, d);\n        col = mix(col, c.yyy, sm(d));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    a = iResolution.x/iResolution.y;\n    nbeats = mod(iTime, 60./29.);\n    iScale = nbeats-30./29.;\n    iScale = smoothstep(-5./29., 0., iScale)*(1.-smoothstep(0., 15./29., iScale));\n    \n    vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0), \n        s;\n    vec3 col = c.yyy, \n        o = c.yzx,\n        r = c.xyy, \n        u = normalize(c.yxx),\n        t = c.yyy, \n        dir,\n        n,\n        x;\n    int N = 150,\n        i;\n    t = uv.x * r + uv.y * u;\n    dir = normalize(t-o);\n\n    float d = -(o.z-.08)/dir.z;\n    \n    for(i = 0; i<N; ++i)\n    {\n     \tx = o + d * dir;\n        scene(x,s);\n        if(s.x < 1.e-4)break;\n        if(x.z<-.1)\n        {\n            col = .2*c.xxx;\n            i = N;\n            break;\n        }\n        d += min(s.x,5.e-3);\n        //d += s.x;\n    }\n    \n    if(i < N)\n    {\n        normal(x,n, 5.e-3);\n        \n        if(s.y == 1.)\n        {\n            vec3 l = normalize(x+.5*c.yzx);\n            colorize(x.xy, col);\n            col = .1*col\n                + 1.*col * abs(dot(l,n))\n                + 1.5 * col *  pow(abs(dot(reflect(x-l,n),dir)),3.);\n            \n        }\n        else if(s.y == 2.)\n        {\n            vec3 l = normalize(x+c.xzx);\n            float r;\n            lfnoise(x.xy, r);\n            col = vec3(0.99,0.43,0.15);\n            \n            vec3 c2 = vec3(0.44,0.07,0.66);\n            \n            col = mix(col,c2,sin(2.*iScale*r*x));\n            col = .1*col\n                + .8*col * abs(dot(l,n))\n                + 6.5*col * pow(abs(dot(reflect(x-l,n),dir)),3.);\n        }\n    }\n    \n    col *= col;\n    col = mix(col, c.yyy, clamp((d-2.-(o.z-.2)/dir.z)/4.,0.,1.));\n    \n    col = mix(c.yyy, col, smoothstep(0., 1., iTime));\n    \n    fragColor = vec4(clamp(col,0.,1.),1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}