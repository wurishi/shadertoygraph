{"ver":"0.1","info":{"id":"NdlyRj","date":"1642368880","viewed":200,"name":"Integrating Bounded Parabola","username":"Yusef28","description":"Checking to see if it's right by taking the derivative is left as an exercise for the viewer.\nArea is in the corner, I need to use a better char generator\nmouse moves right line","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["math","derivative","parabola","integration","calculus"],"hasliked":0,"parentid":"7tKSzt","parentname":"Parabola with Focal Point"},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 numToCoord(float a){\n    return vec2( mod(a,16.), 15.-floor(a/16.) );\n}\n\nvec3 C(vec2 uv, vec2 start, inout float moveX,float num){\n    moveX -= STEP_SIZE/2.;\n    if(uv.x < start.x           || \n       uv.x > start.x+STEP_SIZE || \n       uv.y < start.y           || \n       uv.y > start.y+STEP_SIZE){\n       \n       return vec3(0.);\n    }\n    \n    uv -= start; uv /= STEP_SIZE; uv *= LETTER_SIZE;\n    uv += vec2(LETTER_SIZE*numToCoord(num));\n    return textureGrad(iChannel1,uv,dFdx(uv),dFdy(uv)).rrr;\n}\n\n//takes a float and prints the first 4 digits\nvoid generateDigits(vec2 uv, vec2 start, float moveX, \n                     float theNumber, float theSign, inout vec3 col){\n    \n    float s = 1.;\n    float count = 0.;\n    \n    float FN = fract(theNumber)*100.;\n    float ones = floor(mod(FN,10.));\n    //after decimal\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + ones);\n    float tens = floor(FN/10.);\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + tens);\n    //decimal point\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER -2.);\n    FN = floor(theNumber);\n    //before decimal\n    while(FN >= 1.){\n        float n = floor(mod(FN,10.));\n        col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + n);\n        FN /= 10.;\n    }\n    \n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER -3. -2.*step(0.,theSign));\n    \n}\n\nfloat parabolaX(vec2 vx, vec2 p, vec2 uv, float fp){\n    float y = (pow(uv.x-vx.x,2.) / 4.* fp) - vx.y;\n    return 1.0-smoothstep(0.02,0.15,abs(y-uv.y)/fwidth(y-uv.y)/20.);\n}\n/*\nfloat parabolaY(vec2 vx, vec2 p, vec2 uv, float fp){\n    float x = (pow(uv.y-vx.y,2.) / 4.* fp) - vx.x;\n    return 1.0-smoothstep(0.02,0.15,abs(x-uv.x)/fwidth(x-uv.x)/20.);\n}\n*/\n\nbool checkBounds(float left, float right, float top, float bottom, vec2 uv){\n    return uv.x >= left && uv.x < right && uv.y >= bottom && uv.y < top;\n}\n\nfloat getIntegral(float x, float va, float vb, float vc, float bottom){\n    //for function of form a - pow(x,b) / c\n    //minus a function of the form y = bottom\n    //example:\n    //function_1 is 2.-(x^2)/4.;\n    //function_2 is y = bottom;\n    //set up init equation da = integral|atob: (f_of_x - bottom)\n    //collect like terms (-2. - (x^2.)/4.) and then..\n    //intgrate (-2. - 1./4. * x^2) * dx\n    //          -2. * dx - 1./4. * x^2 * dx\n    //       a|atob =  -2.*x + c1 - 1./4. * (x^3)/3. + c2 | atob\n    // then after simplifying, plug in that(b) - that(a)\n    \n    // va-pow(x,vb)/vc;\n    // va-x^vb/vc - bottom -> (va-bottom)*x - 1./(vc*(vb+1.)) * pow(x,vb+1.) + k\n    return (va-bottom)*x - 1./(vc*(vb+1.)) * pow(x,vb+1.); \n    \n}\n\nfloat getArea(float va, float vb, float vc, float bottom,\n              float leftBound, float rightBound){\n                  \n      float A = getIntegral(leftBound, va, vb, vc, bottom);\n      float B = getIntegral(rightBound, va, vb, vc, bottom);\n      \n      return B - A;\n}\n              \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5,0.5)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec3 col = grid(uv,texture(iChannel0,uv).x);\n    float scale = 8.;\n    uv *= scale;\n    float t = iTime;\n    float leftBound = -2.+sin(t*1.1);\n    float rightBound = 2.5+cos(t)*0.5;\n    float lowerBound = sin(t*0.8)-1.;\n    float va = 2.;\n    float vb = 2.;\n    float vc = 4.;\n    if( iMouse.z > 0.5 ){\n        rightBound = (scale*(iMouse.x/iResolution.y))-scale*0.9;\n        }\n    float area = getArea(va,vb,vc,lowerBound,leftBound,rightBound);\n    \n    float f_of_x = va-pow(uv.x,vb)/vc;\n    \n    \n    \n    \n    \n    col = mix(col,vec3(0.2,0.4,0.6),float(checkBounds(leftBound,rightBound,f_of_x,lowerBound,uv)));\n    \n    \n    float func = 1.0-smoothstep(0.02,0.15,abs(f_of_x-uv.y)/fwidth(f_of_x-uv.y)/20.);\n    float parabola = parabolaX(vec2(0.0), vec2(1.), uv, func);\n    col = mix(col, vec3(1.,.2,0.5), func);\n    //vec2 focalPoint = vec2(0.,fp);\n    \n    \n    //intersection point 2\n    /*float f = 1.-smoothstep(0.02,0.04,abs(length(uv-focalPoint)-0.15));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    f = 1.-smoothstep(0.03,0.08,length(uv-focalPoint)-0.015);\n    col = mix(col, vec3(1.,0.7,0.), f);\n    */\n   // uv = fragCoord/iResolution.xy;\n    float moveX = 0.;\n    //float level = fp/8.+0.47;\n    //col += texture(iChannel1,uv).xxx;\n    generateDigits(fragCoord/iResolution.xy, vec2(0.,0.), 0.93, abs(area), sign(area), col);\n    float f = smoothstep(0.03,0.0,abs(leftBound-uv.x));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    \n    f = smoothstep(0.03,0.0,abs(rightBound-uv.x));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    \n    f = smoothstep(0.03,0.0,abs(lowerBound-uv.y));\n    col = mix(col, vec3(.0,0.7,0.1), f);\n    \n    fragColor = vec4(col*vig(fragCoord/iResolution.xy),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define LETTER_SIZE 1./16.\n#define STEP_SIZE 1./15.\n#define FIRST_LETTER 64.\n#define FIRST_NUMBER 48.\n\n#define _a 1.\n#define _b 2.\n#define _c 3.\n#define _d 4.\n#define _e 5.\n#define _f 6.\n#define _g 7.\n#define _h 8.\n#define _i 9.\n#define _j 10.\n#define _k 11.\n#define _l 12.\n\n#define _m 13.\n#define _n 14.\n#define _o 15.\n#define _p 16.\n#define _q 17.\n#define _r 18.\n#define _s 19.\n#define _t 20.\n#define _u 21.\n#define _v 22.\n#define _w 23.\n#define _x 24.\n#define _y 25.\n#define _z 26.\n      ////////////////////////////////////////////\n      //                                       //\n////////      BACKGROUND GRID DESIGN         //\n      //                                   //\n      /////////////////////////////////////\n      \nvec3 grid(vec2 uv, float tex)\n{\n    uv*=8.;\n    //graph background\n    vec3 col = vec3(0.1);\n    \n    //center highlights\n    col = mix(col,vec3(0.16),1.0-length(uv/8.));\n    \n    //dust \n    float specks = fract(sin(dot(uv,vec2(123.,16.)))*433413.);\n    \n    //nice soft texture \n    col = mix(col,vec3(0.25),pow(tex,2.));\n    \n    //small grid lines\n    vec2 lines = fract(uv*5.);\n    lines = smoothstep(0.45,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.24),lines.x);\n    col = mix(col,vec3(0.24),lines.y);\n    \n    //larger grid lines\n    lines = fract(uv);\n    lines = smoothstep(0.47,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.5),lines.x);\n    col = mix(col,vec3(0.5),lines.y);\n    \n    //axis lines\n    lines = smoothstep(0.0,0.02,abs(uv));\n    col = mix(col,vec3(0.6),1.0-lines.x);\n    col = mix(col,vec3(0.6),1.-lines.y);\n    col = mix(col,vec3(0.1),step(0.1,specks)*0.2);\n    return col;\n}\n\nfloat vig(vec2 uv){\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    return pow(vig, 0.15);\n}","name":"Common","description":"","type":"common"}]}