{"ver":"0.1","info":{"id":"DtKGz3","date":"1684359187","viewed":32,"name":"Task_2_algoritms_CD","username":"pylankina_Ann","description":"Task_2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["task2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 3; \nvec3 colAr[n] = vec3[n](vec3(1.0, 0.6666, 0.8), vec3(0.7, 0.0, 0.45), vec3(0.5, 0.8, 0.022)); \nvec3 BGcol = vec3(1.0, 1.0, 1.0); \n\n\nfloat creating_c(vec2 v, float r, vec2 u) {\n  float t1 = v.x - u.x;\n  float t2 = v.y - u.y;  \n  float l = length(vec2(t1, t2)) - r; //calculate the length of the vector\n  return l;\n}\n\nfloat creat_square(vec2 f, vec2 h) { //creating a square\n  float x = f.x - h.x;\n  float y = f.y - h.y;\n  float d = max(abs(x), abs(y)) -0.21;\n  return d;\n }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = fragCoord/iResolution.x; \n  uv-=0.3;   \n  vec2 j = vec2(0.614*cos(0.7*iTime)+0.3, 0.0); //setting the speed\n  vec3 col=BGcol;\n  float res1=creating_c(uv,0.04, j);   \n  if (res1>0.0)\n      col = colAr[1];\n  vec2 fh=fragCoord/iResolution.xy;\n  fh-=0.3;\n  vec2 offset = vec2(0.1, 0.0);\n  float square = creat_square(fh, offset);\n  if (square<0.0)\n      col=colAr[2];\n  vec2 EL=fragCoord/iResolution.xy;\n  EL-=0.6;\n  vec2 n=vec2(0.08*sin(iTime)-.07*cos(iTime));\n  float res2=creating_c(EL, 0.2, n);\n  if (res2<0.0)\n      col=colAr[0];\n  fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}