{"ver":"0.1","info":{"id":"tlKcRc","date":"1611527811","viewed":124,"name":"fractal 3D","username":"regis","description":"mandelbulb","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","raymarch","mandelbulb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nmat3 RotX(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(1., .0, .0, .0, c, -s, .0, s, c);\n\n}\n\nmat3 RotY(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, .0, s, .0, 1., .0, -s, .0, c);\n\n}\n\nmat3 RotZ(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, -s, .0, s, c, .0, .0, .0, 1.);\n\n}\n\nvec2 map2(vec3 p, out vec4 resColor){\n\n    vec2 d = vec2(0.0);\n    \n    //float pl = p.y;\n   \n   vec3 w = p;\n   \n    float m = dot(w,w);\n\n    vec4 trap = vec4(abs(w),m);\n\tfloat dz = 1.0;\n    \n    \n\tfor( int i=0; i<4; i++ )\n    {\n\n        dz = 8.0*pow(sqrt(m),7.0)*dz + 1.0;\n\t\t//dz = 8.0*pow(m,3.5)*dz + 1.0;\n        \n        float r = length(w);\n        float b = 8.0*acos( w.y/r);\n        float a = 8.0*atan( w.x, w.z );\n        w = p + pow(r,8.0) * vec3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );\n       \n  \n        trap = min( trap, vec4(abs(w),m) );\n\n        m = dot(w,w);\n\t\tif( m > 256.0 )\n            break;\n    }\n\n    resColor = vec4(m,trap.yzw);\n\n    d.x = 0.25*log(m)*sqrt(m)/dz;\n    d.y = 1.0;\n    \n    \n    return d;\n\n}\n\nvec2 map(vec3 p){\n\n    vec2 d = vec2(0.0);\n    \n    \n   \n   vec3 w = p;\n  \n    float m = dot(w,w);\n\n    vec4 trap = vec4(abs(w),m);\n\tfloat dz = 1.0;\n    \n    \n\tfor( int i=0; i<4; i++ )\n    {\n\n        dz = 8.0*pow(sqrt(m),7.0)*dz + 1.0;\n\t\t//dz = 8.0*pow(m,3.5)*dz + 1.0;\n        \n        float r = length(w);\n        float b = 8.0*acos( w.y/r);\n        float a = 8.0*atan( w.x, w.z );\n        w = p + pow(r,8.0) * vec3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );\n\n        \n        trap = min( trap, vec4(abs(w),m) );\n\n        m = dot(w,w);\n\t\tif( m > 256.0 )\n            break;\n    }\n\n    //resColor = vec4(m,trap.yzw);\n\n    d.x = 0.25*log(m)*sqrt(m)/dz;\n    d.y = 1.0;\n   \n    \n    return d;\n\n}\n\nvec3 RM(vec3 ro, vec3 rd, float _d){\n    vec3 d = vec3(_d, 0.0, 0.0);\n    for(int i = 0;i < 200;i++){\n        d.yz = map(ro + d.x * rd).xy;\n        \n        if((d.y) <(0.005))\n            break;\n            \n        d.x += d.y;\n        \n        if(d.x > 1000.0)break;\n    \n    }\n    if(d.x > 1000.0)d.x = -1.0;\n    \n    return d;\n    \n}\n\nvec3 calcNormal( in vec3 pos, in float t, in float px )\n{\n    vec4 tmp;\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.25*px;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvec3 getLight(vec3 p, vec3 ro, vec3 rd, vec3 lightpos, out vec3 n){\n    vec2 e = vec2(0.01, 0.0);\n    vec2 nd = map(p);\n\n    n = nd.x - vec3(map(p - e.xyy).x ,\n                        map(p- e.yxy).x ,\n                        map(p- e.yyx).x );\n\n    n = normalize(n);\n    \n    const float fle = 1.5;\n\n    float px = 2.0/(iResolution.y*fle);\n   // n = calcNormal(p, 0.0, px);\n\n    //vec3 lightpos = vec3(0.0, 20.0, -20.0);\n    vec3 l = normalize(lightpos-p);\n    \n    float occ = calcAO(p, n); \n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    dif += occ;\n\n    /*vec3 sh = RM(p+n*0.01, l);\n    p = ro + rd * sh.x;\n\n    if((sh.x > 0.0) && (length(lightpos-p) > sh.x)){\n\n       dif = dif * 0.2;\n    }*/\n    \n    return vec3(dif);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y/iResolution.x, 1.0);\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n       \n    vec3 p;\n    vec3 ro = vec3(-2.0, -0.5, -7.0); \n    vec3 lookat = vec3((iMouse.x/iResolution.x)*10.0, (iMouse.y/iResolution.y)*30.0, 30.0);\n    //vec3 rd = normalize(vec3(0.0, 1.0, 0.0));\n    vec3 lightpos = vec3(0.0, 50.0, -5.0);\n        \n    vec3 dirc = vec3(0.0, 2.0, 0.0);\n        \n    float an = (iMouse.x/iResolution.x)*10.0;\n    float anx = (iMouse.y/iResolution.y)*10.0;\n    ro -= dirc;\n    lookat -= dirc;\n    ro *= RotZ(anx);\n    lookat *= RotZ(anx);\n    ro *= RotX(anx);\n    lookat *= RotX(anx);\n    ro *= RotY(an);\n    lookat *= RotY(an);\n    ro += dirc;\n    lookat += dirc;\n    \n    lightpos -= dirc;\n    lightpos *= RotZ(anx);\n    lightpos *= RotX(anx);\n    lightpos *= RotY(an);\n    lightpos += dirc;\n    \n    \n    float zoom = abs(fract(iTime/10.0)-0.5)*10.0+2.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n    \n    float dan ;\n    if(anx >2.80)dan=4.0;\n    else dan = 5.0;\n    vec3 d = RM(ro, rd, dan);\n    \n    vec4 rc;\n    if(d.x > 0.0){\n        p = ro + d.x * rd;\n        \n    vec2  sp = (2.0*p.xy-iResolution.xy) / iResolution.y;\n    vec2 m2 = map2(p, rc);\n    vec3 n;\n    vec3 dif = getLight(p, ro, rd, lightpos, n);\n    \n    const vec3 light1 = vec3(  0.577, 0.577, -0.577 );\n     vec3 hal = normalize( (light1)-rd);\n     float spe1 = pow( clamp(dot(n,hal),0.0,1.0), 32.0 )*dif.x*(0.04+0.96*pow(clamp(1.0-dot(hal,lightpos),0.0,1.0),5.0));\n       \n      col = vec3(0.01);\n       //col = dif * vec3(1.0, 0.5, 1.0);//rc.rgb;\n\t\tcol = mix( col, vec3(0.10,0.20,0.50), clamp(rc.y,0.0,1.0) );\n\t \tcol = mix( col, vec3(0.02,0.10,0.50), clamp(rc.z*rc.z,0.0,1.0) );\n        col = mix( col, vec3(0.50,0.10,0.02), clamp(pow(rc.w,6.0),0.0,1.0) );\n       // col *= 0.5;\n        vec3 lin = vec3(0.0); \n\t\t     lin += 7.0*vec3(1.50,1.10,0.70)*dif.x;\n        col *= lin;\n      //col = dif * rc.rgb;//vec3(1.0, 0.5, 0.5);\n      col += spe1*15.0;\n       col = sqrt(col);\n       col *= 1.0 - 0.05*length(sp);\n\n    }                 \n                        \n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}