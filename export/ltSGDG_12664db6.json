{"ver":"0.1","info":{"id":"ltSGDG","date":"1509316755","viewed":570,"name":"Art by Numbers III","username":"mhnewman","description":"Inspired by the works of Jackson Pollock","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["procedural","art","pollock","jackson"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const float duration = 5.0;\nconst float KenBurnsEffect = 1.0;\n\nfloat hash1(float p) {\n    vec3 p3 = fract(p * vec3(5.3983, 5.4427, 6.9371));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash1(vec2 p2, float p) {\n    vec3 p3 = fract(vec3(5.3983 * p2.x, 5.4427 * p2.y, 6.9371 * p));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash2(float p) {\n    vec3 p3 = fract(p * vec3(5.3983, 5.4427, 6.9371));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat noise1(vec2 p2, float p) {\n    vec2 i = floor(p2);\n    vec2 f = fract(p2);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n    return 1.0 - 2.0 * mix(mix(hash1(i + vec2(0.0, 0.0), p), \n                               hash1(i + vec2(1.0, 0.0), p), u.x),\n                           mix(hash1(i + vec2(0.0, 1.0), p), \n                               hash1(i + vec2(1.0, 1.0), p), u.x), u.y);\n}\n\nconst mat2 m = mat2(1.616, 1.212, -1.212, 1.616);\n\nfloat fbm1(vec2 p2, float p) {\n    float f = noise1(p2, p); p2 = m * p2;\n    f += 0.5 * noise1(p2, p); p2 = m * p2;\n    f += 0.25 * noise1(p2, p); p2 = m * p2;\n    f += 0.125 * noise1(p2, p); p2 = m * p2;\n    f += 0.0625 * noise1(p2, p); p2 = m * p2;\n    f += 0.03125  * noise1(p2, p);\n    return f / 1.96875 ;\n}\n\n#define range(min, max) mix(min, max, hash1(imageID + (hash += 0.1)))\n#define hsv(hue, sat, val) (val) * (vec3(1.0 - (sat)) + (sat) * (0.5 + 0.5 * cos(6.2831853 * (vec3(hue) + vec3(0.0, 0.33, 0.67)))))\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float imageID = floor(iTime / duration);\n    float t = mod(iTime / duration, 1.0);\n    \n    float hash = 0.0;\n    int iter = int(range(5.0, 15.0));\n    float scale = range(2.5, 5.0);\n    float hueBase = range(0.0, 1.0);\n    float huePitch = range(0.1, 0.4);\n    float sat = range(0.4, 0.8);\n    float val = range(0.4, 0.9);\n    float backgroundSat = range(0.2, 0.4);\n    float backgroundVal = range(0.4, 0.8);\n    \n    vec3 a = hsv(hueBase, sat, val);\n    vec3 b = hsv(hueBase + huePitch, sat, val);\n    vec3 c = hsv(hueBase - huePitch, sat, val);\n    \n\tvec2 pos = fragCoord.xy / iResolution.y;\n    pos += 0.2 * KenBurnsEffect * t * (hash2(imageID) - vec2(0.5));\n    pos *= 1.0 + KenBurnsEffect * (t - 0.5) * range(-0.2, 0.2);\n    \n    pos *= scale;\n    vec3 color = hsv(hueBase, backgroundSat, backgroundVal);\n    for (int i = 0; i < iter; ++i) {\n        float id = imageID + 0.05 * float(i);\n        color = mix(color, a, smoothstep(0.02, 0.01, abs(fbm1(pos, id + 0.00))));\n        color = mix(color, b, smoothstep(0.02, 0.01, abs(fbm1(pos, id + 0.01))));\n        color = mix(color, c, smoothstep(0.02, 0.01, abs(fbm1(pos, id + 0.02))));\n        color = mix(color, vec3(1.0), smoothstep(0.02, 0.01, abs(fbm1(pos, id + 0.03))));\n        color = mix(color, vec3(0.0), smoothstep(0.02, 0.01, abs(fbm1(pos, id + 0.04))));\n    }\n   \n    color *= smoothstep(0.0, 0.05, t) * smoothstep(1.0, 0.95, t);\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}