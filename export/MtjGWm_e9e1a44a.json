{"ver":"0.1","info":{"id":"MtjGWm","date":"1429699334","viewed":494,"name":"post: brightness functions","username":"hornet","description":"Test of various functions for increasing brightness.\nLeft-to-right: softmin, third degree polynomial, exponential.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["post","color","brightness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash32n(vec2 n)\n{\n    return fract( sin(dot(n.xy, vec2(12.9898, 78.233)))* vec3(43758.5453, 28001.8384, 50849.4141 ) );\n}\n\nvec3 remap( float a, float b, vec3 v ) {\n    //return (v-a) / (b-a);\n\treturn clamp( (v-vec3(a)) / vec3(b-a), 0.0, 1.0 );\n}\n\n/*\nvec3 gamma_pow( vec3 x, float n )\n{\n    return x; //pow( x, vec3(n) );\n    //return pow( x, vec3(1.0 - 0.65 * n) );\n    \n    //http://www.fmwconcepts.com/imagemagick/kneemap/index.php\n    //return x / (-2.0*n*(x-1.0)+1.0);\n\n}\n*/\n\nvec3 gamma_deg2( vec3 x, float n )\n{\n    //n = 1.0;\n    float x0 = 0.5 - 0.125*n;\n    float y0 = 0.5 + 0.125*n;\n\n    float b = (y0 - x0*x0) / (x0-x0*x0);\n\tfloat a = 1.0 - b;\n\n    return clamp( a*x*x + b*x, 0.0, 1.0 );    \n}\n\nvec3 gamma_deg3( vec3 x, float n )\n{\n    //n = 1.0;\n    float x0 = 0.5 - 0.125*n;\n    float y0 = 0.5 + 0.125*n;\n    \n    float x02 = x0*x0;\n    float x03 = x02*x0;\n    \n    float c = 1.0 + 0.75 * n; //note: slope at 0,0\n    //float c = 1.0;\n    float b = (y0 - x03 + c*x03 - c*x0) / (x02 - x03);\n\tfloat a = 1.0 - b - c;\n\n    vec3 x2 = x*x;\n    vec3 x3 = x2*x;\n    \n    return clamp( a*x3 + b*x2 + c*x, 0.0, 1.0 );\n}\n\nvec3 gamma_deg3_grad( vec3 x, float n )\n{\n\t//n = 1.0;\n\n\tfloat g0 = 1.0+2.2*pow(n, 2.0);\n    float g1 = 1.0-pow(n,0.5);\n    \n    float c = g0;\n    float b = 3.0 - 2.0*g0 - g1;\n\tfloat a = 1.0 - b - c;\n\t\n    vec3 ret = clamp( a*x*x*x + b*x*x + c*x, 0.0, 1.0 );\n    \n    //foot\n    //float p0 = 10.0;\n    //float p1 = 1.0 + 0.25 * n;\n    //ret *= 1.0 - exp(-p0 * pow( x, vec3(p1) ) );\n    \n    return ret;\n}\n\nvec3 gamma_cutoff( vec3 x, float n )\n{\n    return remap( 0.0, 1.0-n, x );\n}\n\nvec3 gamma_exp( vec3 x, float n )\n{\n    //n = 1.0;\n    float c1 = 1.75;\n    float c2 = 2.0; //s-curve, [1.0;2.0]\n    float c3 = 2.0; //TODO: calc so 1 maps to 1\n    vec3 fe = 1.0 - exp( -c1 * pow( abs(c3*x), vec3(c2) ) );\n\t\n    return clamp( mix( x, fe, n ), 0.0, 1.0 );\n}\n\n\nvec3 remap_noclamp( float a, float b, vec3 v ) {\n\treturn (v-vec3(a,a,a)) / (b-a);\n}\n\n//note: smooth minium, soft-min, https://www.shadertoy.com/view/ltf3W2\nfloat SAbs(float x, float k)\n{\n    return sqrt(x * x + k);\n}\n\nfloat SRamp1(float x, float k)\n{\n    return 0.5 * (x - SAbs(x, k));\n}\n\nfloat SMin1(float a, float b, float k)\n{\n    return a + SRamp1(b - a, k);\n}\n\n//note: smax = -smin(-a, -b, k )\nvec3 SMin1(vec3 a, vec3 b, float k)\n{\n    return vec3( SMin1( a.r, b.r, k ),\n\t\t\t     SMin1( a.g, b.g, k ),\n\t\t\t     SMin1( a.b, b.b, k ) );\n}\n\n\nvec3 gamma_softmin( vec3 x, float t )\n{\n    //note: black-cutoff, white-cutoff, power, soft-clipping\n    vec4 parms = mix( vec4( 0.0, 1.0, 0.0, 0.0 ),\n                      vec4( 0.0, 0.25, 0.25, 1.0 ), t );\n    float blacklift = mix( 0.0, 0.05, t );\n        \n\tx = max( x, parms.xxx ); //note: clamp below min\n\tx = remap_noclamp( parms.x, parms.y, x );\n\n\tfloat pexp = 1.0 / (1.0 - 0.5*parms.z); //TODO: input pexp\n\tx = pow( x, vec3(pexp, pexp, pexp) );\n\n\tx = x * (1.0-blacklift) + blacklift;\n\n\tfloat pmin = 0.2 * parms.w;\n\tx = SMin1( x, vec3(1.0, 1.0, 1.0), pmin ); //upper\n\n\treturn x;\n}\n\n\n\nvec3 gamma( vec3 x, float t, int idx )\n{\n    if ( idx == 0 )\n        return gamma_softmin( x, t ); //return gamma_pow( x, t ); //return gamma_cutoff( vec3(x), t ).x;\n    else if ( idx == 1 )\n        return gamma_deg3_grad(x,t); // return gamma_deg2(vec3(x),t).x;\n    else\n        return gamma_exp(x, t );\n}\n\nfloat f( float x, float t, int idx )\n{\n\treturn gamma( vec3(x), t, idx ).x;\n}\n\nfloat calcCurve( vec2 uv, float t, int idx )\n{\n    float threshold = 17.0 / iResolution.y;\n    float x = uv.x;\n    float fx = f( x, t, idx );\n    float dist = abs( uv.y - fx );\n    return max( 0.0, 10.0*( threshold - dist ) );\n}\n\nvec3 lin2srgb( vec3 c )\n{\n    return pow( c, vec3(1.0/2.2) );\n}\nvec3 srgb2lin( vec3 c )\n{\n    return pow( c, vec3(2.2) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 1.0-uv.y;\n    \n    //vec3 col = texture( iChannel0, uv).rgb;\n    vec3 col = texture( iChannel0, uv + vec2( 0.05 * iTime, 0.0 ), -10.0 ).rgb;\n    col = srgb2lin( col );\n    //col *= 0.25;\n\n    float t = 0.5 + 0.5 * sin( iTime );\n    //t = 1.0;\n    \n    if ( iMouse.z > 0.5 )\n        t = iMouse.x / iResolution.x;\n\n    if ( uv.y > 0.9 )\n    {\n    \tcol = srgb2lin( vec3( fract( uv.x * 3.0 ) ) );\n    }\n\n    if ( uv.x < 1.0/3.0 )\n        col = gamma(col, t, 0 );\n    else if ( uv.x < 2.0/3.0 )\n\t\tcol = gamma(col, t, 1 );\n    else\n        col = gamma(col, t, 2 );\n\n    \n    if ( uv.y < 0.9 && uv.y > 0.8 )\n    {\n        vec2 guv;\n        guv.x = fract( 3.0 * uv.x );\n        guv.y = 1.0-(uv.y-0.81) / 0.09;\n\n        vec3 curvecol;\n        if ( uv.x < 1.0/3.0 )\n\t\t\tcurvecol = vec3( calcCurve( guv, t, 0 ) );\n        else if ( uv.x < 2.0/3.0 )\n            curvecol = vec3( calcCurve( guv, t, 1 ) );\n        else\n            curvecol = vec3( calcCurve( guv, t, 2 ) );\n            \n        col = mix( vec3(0.1, 0.1, 0.1), vec3(1,1,1), curvecol );\n    }\n\n    \n    vec4 outcol = vec4( lin2srgb(col), 1.0 );\n    vec3 rnd = hash32n( uv + fract(iTime) ) + hash32n( uv + 0.1337 + fract(iTime) ) - 0.5;\n    outcol.rgb += rnd / 255.0;\n    \n\tfragColor = outcol;\n}\n","name":"Image","description":"","type":"image"}]}