{"ver":"0.1","info":{"id":"l3fBR7","date":"1728160699","viewed":31,"name":"Whoah chatgpt","username":"divalence999","description":"Just a simple raymarcher","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chatgpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    // Sphere SDF (Signed Distance Function)\n    float sphereSDF(vec3 p, float radius) {\n        return length(p) - radius;\n    }\n\n    // Phong Shading Function\n    vec3 phongShading(vec3 p, vec3 n, vec3 lightPos, vec3 viewPos) {\n        vec3 lightDir = normalize(lightPos - p);\n        vec3 viewDir = normalize(viewPos - p);\n        vec3 reflectDir = reflect(-lightDir, n);\n\n        // Ambient component\n        vec3 ambient = vec3(0.1);\n\n        // Diffuse component\n        float diff = max(dot(n, lightDir), 0.0);\n        vec3 diffuse = vec3(0.8) * diff;\n\n        // Specular component\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);\n        vec3 specular = vec3(1.0) * spec;\n\n        return ambient + diffuse + specular;\n    }\n\n// Phong Shading Raymarcher\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    // Camera position and ray direction\n    vec3 ro = vec3(0.0, 0.0, 3.0); // Ray origin (camera position)\n    vec3 rd = normalize(vec3(uv, -1.0)); // Ray direction\n\n    // Raymarching parameters\n    float t = 0.0; // Distance traveled along the ray\n    float maxDist = 100.0; // Maximum distance to trace\n    float minDist = 0.001; // Minimum distance threshold\n\n\n\n    // Raymarching loop\n    for(int i = 0; i < 100; i++) {\n        vec3 pos = ro + t * rd;\n        float d = sphereSDF(pos, 1.0);\n        if (d < minDist) break;\n        t += d;\n        if (t > maxDist) break;\n    }\n\n    // Calculate the normal using the gradient approximation\n    vec3 pos = ro + t * rd;\n    vec3 normal = normalize(vec3(\n        sphereSDF(pos + vec3(minDist, 0.0, 0.0), 1.0) - sphereSDF(pos - vec3(minDist, 0.0, 0.0), 1.0),\n        sphereSDF(pos + vec3(0.0, minDist, 0.0), 1.0) - sphereSDF(pos - vec3(0.0, minDist, 0.0), 1.0),\n        sphereSDF(pos + vec3(0.0, 0.0, minDist), 1.0) - sphereSDF(pos - vec3(0.0, 0.0, minDist), 1.0)\n    ));\n\n    // Single light position and view position\n    vec3 lightPos = vec3(5.0, 5.0, 3.0);\n    vec3 viewPos = ro;\n\n    // Calculate Phong shading color\n    vec3 color = phongShading(pos, normal, lightPos, viewPos);\n\n    // Output color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}