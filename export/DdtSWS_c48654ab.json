{"ver":"0.1","info":{"id":"DdtSWS","date":"1718928302","viewed":43,"name":"Glowball","username":"Mojomajor","description":"glowball","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["glow","ball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define resolution iResolution\n\n#define myTime (iTime+1600.)\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n\n    float n = dot(i, vec2(1.0, 57.0));\n    return mix(mix(rand(n + vec2(0.0, 0.0)), rand(n + vec2(1.0, 0.0)), f.x),\n               mix(rand(n + vec2(0.0, 1.0)), rand(n + vec2(1.0, 1.0)), f.x), f.y);\n}\n\n\nfloat fbm(vec2 p)\n{\nfloat zto=sin(myTime*0.001)*0.5*0.5;\n    float value = 23.0/zto;\n    float amplitude = .786;\n    float frequency = 1.0*zto;\n\n    for (int i = 0; i < 5; i++)\n    {\n        value += amplitude * noise(p * frequency);\n        p *= 2.0;\n        amplitude *= 0.5;\n    }\n\n    return value;\n}\n\nvec4 sphere(float r, float g, float b, vec2 fragCoord)\n{\n    float jitter = rand(vec2(myTime)) * 0.04;\n    jitter=0.;\n    float size = cos(myTime*3. + jitter) / 2.0 * sin(myTime + jitter) * 40.0 + 200.0 * min(iResolution.x, iResolution.y) / 600.0;\n    vec2 pos = vec2(resolution.x / 2.0, resolution.y / 2.0);\n    \n    \n    float dist = length(fragCoord.xy - pos);\n    float intensity = pow(size / dist, 3.2);\n    \n    // Calculate angle and radius for flare effects\n    vec2 dir = normalize(fragCoord.xy - pos);\n    float angle = atan(dir.y, dir.x);\n    \n    // Introduce noise for more organic flares\n    //float noiseFactor = noise(dir * 2.0 + iTime);\n    //noiseFactor=0.;\n    // Introduce fBm for more organic flares\n    float noiseFactor = fbm(dir * 100.2 + myTime);\n    float flare = abs(sin(angle * 12.0 + myTime * 5.0 + noiseFactor) * 1.1);\n    \n    // Apply flare effect based on distance from the sphere's edge\n    float flareDist = (abs(dist - size) / size)*0.123;\n    flare *= smoothstep(0.0, 0.2, flareDist) * smoothstep(0.5, 0.3, flareDist);\n    // comic\n    // flare *= smoothstep(0.0, 0.2/fbm(fragCoord), flareDist) * smoothstep(0.5, 0.3, flareDist);\n\n    \n    vec4 flareColor = vec4(1.0, 0.8, 0.5, 1.0) * flare;\n    \n    return vec4(r, g, b, 1.0) * intensity + flareColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4 color = sphere(1.0, 0.5, 0.25, fragCoord);\n    fragColor = vec4(color.rgb, 1.0) * color.a;\n}\n\n","name":"Image","description":"","type":"image"}]}