{"ver":"0.1","info":{"id":"7tffRr","date":"1650461282","viewed":44,"name":"Simple Edge Detect","username":"LoganOracio","description":"A very simple edge detector, probably many improvements I don't know about. Feel free to tell me","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["edge","detect","laplacian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 normal = fast_gaussian_blur(iChannel0,uv,iResolution.xy,vec2(0.0,1.0),smoothness).xy;\n    float gradient;\n    if(normal != vec2(0.0))\n    {\n        gradient = length(normal);\n        normal = normalize(normal);\n    }\n    else\n    {\n        gradient = 0.0;\n        normal = vec2(0.0,0.0);\n    }\n    gradient = smoothstep(0.0,threshold/smoothness,gradient);\n    \n    fragColor = vec4(gradient);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 normal = nor(iChannel0,uv,iResolution.xy);\n\n    fragColor = vec4(normal,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define smoothness 1.0\n#define threshold .2\n\nconst float PI = 3.141592653589793238462;\nconst float inv_sqrt_2pi = 0.3989422804014327;\n\nfloat gaussianf(float sigma, float dist)\n{\n    float a = dist / sigma;\n    return (inv_sqrt_2pi / sigma ) * exp( -0.5 * a * a );\n}\n\nvec4 fast_gaussian_blur(sampler2D image, vec2 uv,vec2 resolution, vec2 direction, float blur)\n{\n    vec4 color = vec4(0.0);\n    float coef = gaussianf(blur,0.0);\n    color += texture(image, uv) * coef;\n    float kernel_s = blur * 4.0;\n    //removed precomputing weights by onehade\n    float prev = gaussianf(blur, 0.0);\n    for (float i = 0.0; i < kernel_s; i++) {\n        float w1 = prev; \n        float w2 = gaussianf(blur, i + 1.0);\n        prev = w2; //storing redudant weight for next loop\n        float c = w1 + w2;\n        vec2 off1 = vec2((i * w1 + (i + 1.0) * w2) / c) * direction / resolution;\n        color += texture(image, uv + off1 ) * c;\n        color += texture(image, uv - off1 ) * c;\n        coef += c + c;\n    }\n\n    return color/coef;\n}\nfloat luma(vec4 color) {\n  return clamp(dot(color.rgb, vec3(0.299, 0.587, 0.114)),0.0,1.0);\n}\n\nvec2 height_to_normal(float luma)\n{\n    return -vec2( dFdx(luma),dFdy(luma));\n}\n\nvec2 nor(sampler2D buf, vec2 uv, vec2 res)\n{  \n    vec2 offset = vec2(1.0) / res;\n    vec2 c = height_to_normal(luma(texture(buf,uv)));\n    c += height_to_normal(luma(texture(buf,uv+vec2(1.0,0.0)*offset)));\n    c += height_to_normal(luma(texture(buf,uv+vec2(-1.0,0.0)*offset)));\n    c += height_to_normal(luma(texture(buf,uv+vec2(0.0,1.0)*offset)));\n    c += height_to_normal(luma(texture(buf,uv+vec2(0.0,-1.0)*offset)));\n    return c/5.0;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = fast_gaussian_blur(iChannel0,uv,iResolution.xy,vec2(1.0,0.0),smoothness);\n}","name":"Buffer B","description":"","type":"buffer"}]}