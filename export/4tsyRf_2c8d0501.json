{"ver":"0.1","info":{"id":"4tsyRf","date":"1505775908","viewed":92,"name":"Circles with Layers","username":"matt_aquino0802","description":"a shader that creates 3 circles that overlap each other using layers","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","circles","layers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// circles\nvec2 redCircle = vec2(0.45, 0.25);\nvec2 greenCircle = vec2(0.5, 0.25);\nvec2 blueCircle = vec2(0.55, 0.25);\n\nfloat radius = 0.1;\n\n// colors\nvec3 Red = vec3(1.0, 0.0, 0.0);\nvec3 Green = vec3(0.0, 1.0, 0.0);\nvec3 Blue = vec3(0.0, 0.0, 1.0);\n\nfloat frequency = 1.0;\nfloat amplitude = 0.5;\n\n// creates a transparent layer\nvec4 Transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n \tvec2 uv = fragCoord.xy / iResolution.xy;\n \n \tfloat aspectRatio = iResolution.y / iResolution.x;\n    \n    uv.y *= aspectRatio;\n    \n    // animates the green circle to move up and down, while keeping the circle visible\n    greenCircle.y = (abs(sin(iTime * frequency) + 1.0) / 2.0) * amplitude;\n    \n    vec4 Layer1 = vec4(1.0, 1.0, 1.0, 1.0);\n\tvec4 Layer2;\n\tvec4 Layer3;\n\tvec4 Layer4;\n    \n    \n    // draws red circle layer\n    if (length(redCircle - uv) < radius)\n        Layer2 = vec4(Red, 1.0);\n    else\n        Layer2 = Transparent;\n    \n    // draws green circle layer\n    if (length(greenCircle - uv) < radius)\n        Layer3 = vec4(Green, 1.0);\n    else\n        Layer3 = Transparent;\n    \n    // draws blue circle layer\n    if (length(blueCircle - uv) < radius)\n        Layer4 = vec4(Blue, 1.0);\n    else\n       \tLayer4 = Transparent;\n    \n    // blends layers over each other\n    vec4 Composite = mix(Layer1, Layer2, Layer2.a);\n    Composite = mix(Composite, Layer3, Layer3.a);\n    Composite = mix(Composite, Layer4, Layer4.a);\n    \n    fragColor = Composite;\n\n}\n\n","name":"Image","description":"","type":"image"}]}