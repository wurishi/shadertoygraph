{"ver":"0.1","info":{"id":"dlByzD","date":"1691711808","viewed":85,"name":"Watercolor Webcam Filter","username":"ascomycody","description":"A filter using Difference of Gaussians with a 7x7 kernel. Very messy code and lots of artifacts :)","likes":0,"published":3,"flags":34,"usePreview":0,"tags":["matrix","gaussian","7x7"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 d = vec2(dx, dy);\n    \n    \n    vec3 gk0 = Apply7x7Filter(uv, d, ic0, gk7x7, gk7x7_d);\n    vec3 gk1 = vec3(1.) - texture(ic1, uv).gbb;\n    vec3 gk2 = texture(ic2, uv).rgb;\n    vec3 gk3 = texture(ic3, uv).rgb;\n    \n    //vec3 col = mix(gk1, gk0, .5) - (gk3 * .75) - (gk2) - (vec3(1.) - smoothstep(0., 0.01, gk0)); \n    \n    vec3 col = vec3(pow(mix(gk1, gk0, 0.25).r, BRIGHT), pow(mix(gk1, gk0, 0.1).g, BRIGHT), pow(mix(gk1, gk0, 0.1).b, BRIGHT));\n    \n    fragColor = vec4( (col * 3.), 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//----------Constants---------------------------------\n\n#define TAU .1\n#define RHO 2.5\n#define BRIGHT 1.5\n\n#define COLOR_STEPS 2.\n#define COLOR_STEPS_R 1. / COLOR_STEPS\n\n#define CONTRAST_THRESHOLD .25\n#define CONTRAST_RANGE .1\n\n\n#define ic0 iChannel0\n#define ic1 iChannel1\n#define ic2 iChannel2\n#define ic3 iChannel3\n\n#define sampleDist 1.\n\n#define dx sampleDist / iResolution.x\n#define dy sampleDist / iResolution.y\n\n#define gk3x3_d 1./16.\n\n#define gk5x5_d 1./273.\n\n#define gk7x7_d 1./1003.\n\n//-------Structs-------------------------------------\n\nstruct mtx7 { mat4 bl; mat3 tl; mat3 br; mat4 tr;};\n\n//--------Kernels-------------------------------------\n\n#define IDENTITY mat3(0.,0.,0.,0.,1.,0.,0.,0.,0.)\n\n#define EDGE mat3(-1.,-1.,-1.,-1.,8.,-1.,-1.,-1.,-1.);\n\n#define XSOBEL mat3(1.,0.,-1.,2.,0.,-2.,-1.,0.,1.)\n#define YSOBEL mat3(1.,2.,1.,0.,0.,0.,-1.,-2.,-1.)\n\n#define SHARPEN mat3(0.,-1.,0.,-1.,5.,-1.,0.,-1.,0.)\n\n#define G3X3  mat3(1., 2., 1., 2., 4., 2., 1., 2., 1.)\n\nmtx7 gk3x3 = mtx7(mat4(0., 0., 0., 0.,\n                       0., 0., 0., 0.,\n                       0., 0., 1., 2.,\n                       0., 0., 2., 4.),\n                  mat3(0., 0., 0.,\n                       0., 0., 0.,\n                       1., 0., 0.),\n                  mat3(0., 0., 1.,\n                       0., 0., 0.,\n                       0., 0., 0.),\n                  mat4(4., 2., 0., 0.,\n                       2., 1., 0., 0.,\n                       0., 0., 0., 0.,\n                       0., 0., 0., 0.));\n\nmtx7 gk5x5 = mtx7(mat4(0., 0.,  0.,  0.,\n                       0., 1.,  4.,  7.,\n                       0., 4., 16., 26.,\n                       0., 7., 26., 41.),\n                  mat3( 0., 0., 0.,\n                        4., 1., 0.,\n                       16., 4., 0.),\n                  mat3(0., 4., 16.,\n                       0., 1.,  4.,\n                       0., 0.,  0.),\n                  mat4(41., 26., 7., 0.,\n                       26., 16., 4., 0.,\n                        7.,  4., 1., 0.,\n                        0.,  0., 0., 0.));\n\nmtx7 gk7x7 = mtx7(mat4(0.,  0.,  1.,   2.,\n                       0.,  3., 13.,  22.,\n                       1., 13., 59.,  97.,\n                       2., 22., 97., 159.),\n                  mat3( 1.,  0., 0.,\n                       13.,  3., 0.,\n                       59., 13., 1.),\n                  mat3(1., 13., 59.,\n                       0.,  3., 13.,\n                       0.,  0.,  1.),\n                  mat4(159., 97., 22., 2.,\n                        97., 59., 13., 1.,\n                        22., 13.,  3., 0.,\n                         2.,  1.,  0., 0.));\n                         \n//-------Matrix Functions---------------------------------------------------------\n                       \nfloat gkVal(in mtx7 w, in float u, in int x, in int y)\n{\n    float z = (x<=3) ? (y<=3) ? w.bl[x][y] : (x<=2) ? w.tl[x][int(mod(float(y),4.))] : w.tr[int(mod(float(x),3.))][int(mod(float(y+1),4.))] : (y<=2) ? w.br[int(mod(float(x),4.))][y] : w.tr[x-3][y-3];\n    \n    return ( z * u );\n}\n\n//---------Kernel Functions-------------------------------------------------------\n\nvec3 Apply3x3Kernel(in mat3 r, in mat3 b, in mat3 g, in mat3 m, in float n)\n{   \n    vec3 x;\n    \n    for( int j = 0; j < 3; j++){\n    for( int i = 0; i < 3; i++){\n    \n        float a = m[i][j];\n        \n        x.r += r[i][j] * a;\n        x.g += b[i][j] * a;\n        x.b += g[i][j] * a;\n    }   \n    }\n    \n    return vec3(x.r, x.g, x.b) * n;\n}\n\nvec3 Apply7x7Kernel(in mat3 r, in mat3 b, in mat3 g, in mtx7 m, in float n)\n{   \n    vec3 x;\n    \n    for( int j = 0; j < 7; j++){\n    for( int i = 0; i < 7; i++){\n    \n        float a = gkVal(m, n, i, j);\n        \n        x.r += r[i][j] * a;\n        x.g += b[i][j] * a;\n        x.b += g[i][j] * a;\n    }   \n    }\n    \n    return vec3(x.r, x.g, x.b);\n}\n\n//---Filter Functions---------------------------------------------------------------------------\n\nvec3 Apply3x3Filter(in vec2 p, in vec2 d, in sampler2D x, in mat3 m, in float n)\n{    \n\n    mat3 r;\n    mat3 g;\n    mat3 b;\n    \n    for( int j = -1; j <= 1; j++ ){\n    for( int i = -1; i <= 1; i++ ){\n    \n            ivec2 o = ivec2(i, j);\n            vec2 pos = p + (vec2(o) * d * .5);\n        \n            r[i + 1][j + 1] = texture(x, pos).r;\n            g[i + 1][j + 1] = texture(x, pos).g;\n            b[i + 1][j + 1] = texture(x, pos).b;\n    }\n    }\n    \n    return Apply3x3Kernel(r, g, b, m, n);\n}\n\nvec3 Apply7x7Filter(in vec2 p, in vec2 d, in sampler2D x, in mtx7 m, in float n)\n{    \n\n    mat3 r;\n    mat3 g;\n    mat3 b;\n    \n    for( int j = -3; j <= 3; j++ ){\n    for( int i = -3; i <= 3; i++ ){\n    \n            ivec2 o = ivec2(i, j);\n            vec2 pos = p + (vec2(o) * d * .5);\n        \n            r[i + 3][j + 3] = texture(x, pos).r;\n            g[i + 3][j + 3] = texture(x, pos).g;\n            b[i + 3][j + 3] = texture(x, pos).b;\n    }\n    }\n    \n    return Apply7x7Kernel(r, g, b, m, n);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 d = vec2(dx, dy);\n    \n    //vec3 gk0 = texture(iChannel0, uv).rgb;\n    vec3 gk1 = Apply7x7Filter(uv, d, ic0, gk7x7, gk7x7_d);\n    //vec3 gk2 = Apply7x7Filter(uv, d, ic0, gk5x5, gk5x5_d);\n    //vec3 gk3 = Apply7x7Filter(uv, d, ic0, gk3x3, gk3x3_d);\n    vec3 gk2 = Apply3x3Filter(uv, d, ic0, G3X3, gk3x3_d);\n    \n    \n    vec3 col = smoothstep(CONTRAST_THRESHOLD, CONTRAST_THRESHOLD + CONTRAST_RANGE, (((1. + TAU) * gk2) - (TAU * gk1)));\n    \n    vec3 col1 = vec3(round(col.r * COLOR_STEPS) * COLOR_STEPS_R, round(col.g * COLOR_STEPS) * COLOR_STEPS_R, round(col.b * COLOR_STEPS) * COLOR_STEPS_R);\n    \n    //fragColor = vec4(col.bbb + col1.rgg, 1.0 );\n    fragColor = vec4(col1.ggg, 1.0 );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 d = vec2(dx, dy);\n    \n    vec3 gk0 = Apply3x3Filter(uv, d, ic0, G3X3, gk3x3_d);\n    vec3 gk1 = Apply3x3Filter(uv, d, ic0, G3X3, gk3x3_d);\n    \n    vec3 col = vec3(1.) - RHO * (gk1.rrr - vec3(1., gk0.gb));\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 d = vec2(dx, dy);\n    \n\n    vec3 gx = Apply3x3Filter(uv, d, ic0, XSOBEL, 1.);\n    vec3 gy = Apply3x3Filter(uv, d, ic0, YSOBEL, 1.);\n    \n    vec3 ge = gx * gx;\n    vec3 gf = gx * gy;\n    vec3 gg = gy * gy;\n    \n    vec3 evp = ((ge + gg) + sqrt((ge-gg)*(ge-gg) + 4. * (gf*gf))) * .5;\n    vec3 evn = ((ge + gg) - sqrt((ge-gg)*(ge-gg) + 4. * (gf*gf))) * .5;\n    \n    vec3 tx = evp - ge;\n    vec3 ty = -gf;\n    \n    vec3 col = vec3(pow((gx.r * 1.) + (gy.r * 1.), 2.)); \n    \n    fragColor = vec4( vec3(smoothstep(0.05, 0.1, col.r)), 1.0 );\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 d = vec2(dx, dy);\n    \n    \n    //vec3 gk0 = texture(ic0, uv).rgb;\n    vec3 gk1 = Apply7x7Filter(uv, d, ic0, gk7x7, gk7x7_d);\n    \n    vec3 col = vec3(pow(gk1.r, .9)); \n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer D","description":"","type":"buffer"}]}