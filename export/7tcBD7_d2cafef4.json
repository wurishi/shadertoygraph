{"ver":"0.1","info":{"id":"7tcBD7","date":"1663204075","viewed":101,"name":"Fork Flower puz sona1111 620","username":"sona1111","description":"crazy flower thing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n \nconst float PI = 3.14159;\n\nfloat atan2(in float y, in float x)\n{\n    bool s = (abs(x) > abs(y));\n    return mix(PI/2.0 - atan(x,y), atan(y,x), s);\n}\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n    \n    //float angle = atan2(uv.x, uv.y);\n    //float radMod = sin(angle) + 1.0;\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    \n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float bradius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y) + PI;\n    \n    float radius;\n    \n    int demo_idx = 1;  // 0 to make flower puzzle one, anything else for puzzle two\n    \n    if (demo_idx == 0){\n        \n    \n        float amplitude_ratio = 0.3;\n        float num_petals = 24.0;\n\n        // fade the amplitude ratio between zero and some max\n        // we want to remain briefly at the max, and stay mostly at zero\n        // for this we choose to use bias with a low value\n\n        amplitude_ratio = bias(abs(sin(iTime/2.0)), 0.02) * amplitude_ratio;\n\n        /*\n        if(a > PI){\n            radius = bradius * 0.5;\n        }else{\n            radius = bradius * 1.5;\n        }\n        */\n        radius = bradius + (bradius * cos(a * num_petals)) * amplitude_ratio;\n        //float radius = mix(bradius*0.5, bradius*1.5, cos(a * 6.0));\n    }else{\n        float amplitude_ratio = 0.7;\n        float num_petals = 5.0;\n        \n        // the grow and shrink for flower puzzle two looks like a slightly elevated gain\n        amplitude_ratio = gain(abs(sin(iTime/2.0)), 0.7) * amplitude_ratio;\n        \n        float r = cos((a * num_petals) + iTime * 0.4);\n        if(r < 0.5){\n            radius = bradius + amplitude_ratio*(bradius * gain(cos(a * num_petals * iTime + (iTime*0.2)), 0.4)) ;\n        }else{\n            radius = bradius + amplitude_ratio*(bradius * cos((a * num_petals + iTime) + PI/1.5)) ;\n        }\n        \n        // I started trying to make flower 2 but I found this effect which was just so cool \n        // that I decided to keep it lol\n        \n    }\n    \n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n\tvec4 layer2 = circle(uv, center, radius, red);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nfloat gain(float t, float g) {\n    if(t < 0.5){\n        return bias(1.0-g, 2.0*t) / 2.0;\n    }else{\n        return 1.0 - bias(1.0-g, 2.0 - 2.0*t) / 2.0;\n    }\n    \n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}