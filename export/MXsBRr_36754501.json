{"ver":"0.1","info":{"id":"MXsBRr","date":"1729586403","viewed":53,"name":"Newtons Cradle RM","username":"DarthDayan","description":"rm","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["rm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.01\n#define REF_DIST 0.02\nvec3 light = vec3(0);\nfloat a = 0.;\nfloat b = 0.;\nfloat c = 0.;\nfloat d = 0.;\nfloat e = 0.;\nvec4 whi = vec4(1.,1.,1.,.7);\nvec4 bla = vec4(.1,.1,.1,.5);\nvec4 gra = vec4(.3,.3,.3,.3);\nvec4 red = vec4(1.,0.,0.,0.);\nvec4 ora = vec4(1.,.5,0.,0.);\nvec4 yel = vec4(1.,1.,0.,0.);\nvec4 gre = vec4(0.,1.,0.,0.);\nvec4 cya = vec4(0.,1.,1.,0.);\nvec4 blu = vec4(0.,0.,1.,0.);\nvec4 pur = vec4(.5,0.,1.,0.);\nvec4 mag = vec4(1.,0.,1.,0.);\n\nconst int BASE = 1;\nconst int BARS = 2;\nconst int BALL = 3;\n\nmat3 matrot(vec3 xyz) {\n    mat3 rx = mat3(vec3(1,0,0),vec3(0,-sin(xyz.x),cos(xyz.x)),vec3(0,cos(xyz.x),sin(xyz.x)));\n    mat3 ry = mat3(vec3(cos(xyz.y),0,sin(xyz.y)),vec3(0,1,0),vec3(-sin(xyz.y),0,cos(xyz.y)));\n    mat3 rz = mat3(vec3(cos(xyz.z),sin(xyz.z),0),vec3(-sin(xyz.z),cos(xyz.z),0),vec3(0,0,1));\n    return rx * ry * rz;\n        }\nfloat smin( float a, float b, float k )\n{\n    k *= log(2.0);\n    float x = b-a;\n    return a + x/(1.0-exp2(x/k));\n}\nvec4 sdSphere(vec3 pos, vec3 cent, float r,vec3 col) {\n    return vec4(length(pos-cent) - r,col);\n        }\nvec4 sdCube (vec3 pos,vec3 cent, vec3 size,vec3 col) {\n    vec3 p = (abs(pos-cent) - size);\n    return vec4(length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.),col);\n        }\nvec4 sdSquare (vec2 pos,vec2 cent, vec2 size,vec3 col) {\n    vec2 p = abs(pos-cent) - size;\n    return vec4(length(max(p,0.))+min(max(p.x,p.y),0.),col);\n        }\nvec4 sdRoCube (vec3 pos,vec3 cent, vec3 size,float ron,vec3 col) {\n    float d = length(max(abs((pos-cent))-size,0.));\n    return vec4(d-ron,col);\n        }\nvec4 sdTorus (vec3 pos,vec3 cent, vec2 r,vec3 col) {\n    vec3 pc = pos - cent;\n    vec3 rotpc = pc;\n    float x = length(rotpc.xz) - r.x;\n    return vec4(length(vec2(x,rotpc.y))-r.y,col);\n        }\nvec4 sdCapsule(vec3 pos,vec3 a, vec3 b, float r,vec3 col) {\n    vec3 ab = b - a;\n    vec3 ap = pos - a;\n    \n    float t = clamp(dot(ab,ap) / dot(ab,ab),0.,1.);\n    vec3 c = a + t * ab;\n    \n    return vec4(length(pos-c) - r,col);\n        }\nvec4 sdBall(vec3 pos, vec3 cent,float theta,vec3 col) {\n    pos -= cent;\n    pos += vec3(cos(theta-1.57),sin(theta+1.57)-1.,0);\n    mat3 rot = matrot(vec3(1.57,0.,theta+3.14));\n    pos = pos * rot;\n    \n    pos += cent;\n    vec4 sph = sdSphere(pos,cent, 0.15,whi.xyz);\n    vec4 ring = sdTorus(pos.xzy,cent+vec3(0,-0.5,0.65),vec2(.05,0.01),whi.xyz);\n    vec4 str = sdCapsule(vec3(pos.xy,abs(pos.z)),cent + vec3(0,0.15,0),cent + vec3(0,1.,0.4),0.01,whi.xyz);\n    \n    \n    float d = min(sph.x,ring.x);\n    d = min(d,str.x);\n    return vec4(d,col);\n        }\nvec4 Distance (vec3 pos) {\n    vec4 dBase = sdRoCube(pos.xzy,vec3(0,0,0),vec3(1,0.5,0.1),0.1,gra.xyz);\n    vec4 dSqua = sdSquare(pos.xy,vec2(0,.7),vec2(0.8,0.7),whi.xyz);\n    vec4 dBar = vec4(length(vec2(dSqua.x-0.15,abs(pos.z)-0.4))-0.04,whi.xyz);\n    float dStand = min(dBase.x,dBar.x);\n    dStand = max(dStand,-pos.y);\n    \n    vec4 b1 = sdBall(pos,vec3(-0.6,0.5,0),a,bla.xyz);\n    vec4 b2 = sdBall(pos,vec3(-0.3,0.5,0),b,bla.xyz);\n    vec4 b3 = sdBall(pos,vec3(0.00,0.5,0),c,bla.xyz);\n    vec4 b4 = sdBall(pos,vec3(0.30,0.5,0),d,bla.xyz);\n    vec4 b5 = sdBall(pos,vec3(0.60,0.5,0),e,bla.xyz);\n    \n    float balls = min(b1.x,min(b2.x,min(b3.x,min(b4.x,b5.x))));\n    \n    float dist = min(balls,dStand);\n    vec3 mat = vec3(0);\n    \n    if (min(balls,dStand) == b1.x) mat = b1.yzw;\n    if (min(balls,dStand) == b2.x) mat = b2.yzw;\n    if (min(balls,dStand) == b3.x) mat = b3.yzw;\n    if (min(balls,dStand) == b4.x) mat = b4.yzw;\n    if (min(balls,dStand) == b5.x) mat = b5.yzw;\n    if (min(balls,dStand) == dBase.x) mat = dBase.yzw;\n    if (min(balls,dStand) == dBar.x) mat = dBar.yzw;\n    return vec4(dist,mat);\n        }\nvec4 RayMarch (vec3 ro, vec3 rd) {\n    float dO = 0.;\n    vec3 p = ro;\n    vec4 po = Distance(p);\n    vec3 col = vec3(0);\n    for (int i = 0; i < MAX_STEPS; i++) {\n        p = ro + rd * dO;\n        po = Distance(p);\n        float dS = po.x;\n        dO += dS;\n        if (dO > MAX_DIST) break;\n        if (dS < MIN_DIST) break;\n            }\n    if (po.x < MIN_DIST) col = po.yzw;\n    return vec4(dO,col);\n    }\nbool RayMarchEx (vec3 ro, vec3 rd) {\n    float dO = 0.;\n    vec3 p = ro;\n    vec4 po = Distance(p);\n    vec3 col = vec3(0);\n    for (int i = 0; i < MAX_STEPS; i++) {\n        p = ro + rd * dO;\n        po = Distance(p);\n        float dS = po.x;\n        dO += dS;\n        if (dO > MAX_DIST) break;\n        if (dS < MIN_DIST) break;\n            }\n    if (dO > MAX_DIST) return true;\n    if (dO <= MAX_DIST) return false;\n    }\nvec3 Normal(vec3 pos) {\n    vec4 p = Distance(pos);\n    float d = p.x;\n    vec2 e = vec2 (0,0.01);\n    vec4 yxx = Distance(pos-e.yxx);\n    vec4 xyx = Distance(pos-e.xyx);\n    vec4 xxy = Distance(pos-e.xxy);\n    vec3 n = d - vec3(yxx.x,xyx.x,xxy.x);\n    return normalize(n);\n        }\nvec3 Lighting (vec3 pos, vec3 lc) {\n    vec3 l = normalize(light - pos);\n    vec3 n = Normal(pos);\n    vec4 d = RayMarch(pos + MIN_DIST * n * 2.,l);\n    float dif = clamp(dot(l,n),0.,1.);\n\n    if (d.x < length(pos-l)) dif *= (d.x/length(pos-l)) * .1;\n    if (RayMarchEx(pos + MIN_DIST * n * 2.,l)) return dif * lc;\n        }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n    float focal = 1.;\n    vec3 vr = vec3(1.57,iTime/20.,3.14);\n    mat3 rt = matrot(vr);\n    vec3 ro = -3. * vec3(cos(iTime/20.+1.57),-0.2,sin(iTime/20.+1.57));\n    vec3 rd = normalize(vec3(uv,focal));\n    rd *= rt;\n    vec3 r2d = rd;\n    light = ro;\n    a = max(sin(2.*iTime),0.);\n    e = min(sin(2.*iTime),0.);\n    vec3 p = vec3(0);\n    vec3 n = vec3(0);\n    vec3 r = vec3(0);\n    float dif = 0.;\n    vec4 d = RayMarch(ro,rd);\n    \n    if (d.x < MAX_DIST) {\n        p = ro + rd * d.x;\n        n = Normal(p);\n        r = reflect(rd,n);\n        dif = length(Lighting(p,vec3(1)))/sqrt(3.);\n            }\n    vec4 ref = vec4(0);\n    ref = RayMarch(p,r);\n    col = vec3(dif);\n    col *= d.yzw;\n    vec4 re = RayMarch(p + Normal(p) * 0.01,reflect(rd,Normal(p)));\n    p += reflect(rd,n) * re.y;\n    if (RayMarchEx(ro,r2d)) col = vec3(0);\n    if(d.yzw == whi.xyz) col = col * (1.-whi.w) + re.yzw*whi.w;\n    if(d.yzw == bla.xyz) col = col * (1.-bla.w) + re.yzw*bla.w;\n    if(d.yzw == gra.xyz) col = col * (1.-gra.w) + re.yzw*gra.w;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}