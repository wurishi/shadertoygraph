{"ver":"0.1","info":{"id":"wddfR8","date":"1604383607","viewed":153,"name":"MCC Logo","username":"Dominexis","description":"Rotating logo for the Minecraft Commands Discord server. https://discord.gg/QAFXFtZ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","minecraft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int between2( in vec2 lower, in vec2 test, in vec2 upper ){\n    \n    if( lessThanEqual(lower, test) == bvec2(1) ){\n        if( lessThanEqual(test, upper) == bvec2(1) ){\n        \treturn 1;\n        }\n    }\n    return 0;\n}\nint between3( in vec3 lower, in vec3 test, in vec3 upper ){\n    \n    if( lessThanEqual(lower, test) == bvec3(1) ){\n        if( lessThanEqual(test, upper) == bvec3(1) ){\n        \treturn 1;\n        }\n    }\n    return 0;\n}\n\nfloat sphere( in vec3 sphere_pos, in float radius, in vec3 pos, in vec3 ray ){ \n    \n    // Initialize values\n    \n    float a = dot(ray, ray);\n    float b = 2.0*dot(pos-sphere_pos, ray);\n    float c = dot(pos, pos) + dot(sphere_pos, sphere_pos) - 2.0*dot(pos, sphere_pos) - radius*radius;\n    \n    \n    \n    // Compute distance\n    \n    float dist = -10000.0;\n    if( b*b - 4.0*a*c >= 0.0 )\n    {\n    \tfloat dist_1 = ( -b + sqrt(b*b - 4.0*a*c) )*0.5/a;\n        float dist_2 = ( -b - sqrt(b*b - 4.0*a*c) )*0.5/a;\n        dist = max(dist_1, dist_2);\n    }\n    \n    return dist;\n}\nfloat cylinder( in vec3 cylinder_pos, in float radius, in float height, in mat3 transform, in vec3 pos, in vec3 ray ){\n\n    // Initialize values\n    \n    pos = inverse(transform)*(pos-cylinder_pos);\n    ray = inverse(transform)*ray;\n    \n    float a = dot(ray.xy, ray.xy);\n    float b = 2.0*dot(pos.xy, ray.xy);\n    float c = dot(pos.xy, pos.xy) - 2.0*dot(pos.xy, vec2(0.0, 0.0)) - radius*radius;\n    \n    \n    \n    // Compute distance\n    \n    float dist = -10000.0;\n    if( b*b - 4.0*a*c >= 0.0 )\n    {\n    \tfloat dist_1 = ( -b + sqrt(b*b - 4.0*a*c) )*0.5/a;\n        float dist_2 = ( -b - sqrt(b*b - 4.0*a*c) )*0.5/a;\n        dist = max(dist_1, dist_2);\n    }\n    \n    if( 0.0 > pos.z+ray.z*dist ) dist = -10000.0;\n    if( pos.z+ray.z*dist > height ) dist = -10000.0;\n    \n    return dist;\n}\nfloat box( in vec3 box_pos, in vec3 box_size, in vec3 pos, in vec3 ray ){\n    \n    // Compute box bounds\n    \n    box_size += box_pos;\n    vec3 box_1 = vec3( min(box_pos.x, box_size.x), min(box_pos.y, box_size.y), min(box_pos.z, box_size.z) );\n    vec3 box_2 = vec3( max(box_pos.x, box_size.x), max(box_pos.y, box_size.y), max(box_pos.z, box_size.z) );\n    \n    \n    \n\t// Get possible distances\n    \n    vec3 dist_1 = vec3( -10000.0 );\n    vec3 dist_2 = vec3( -10000.0 );\n    \n    if( abs(ray.x) > 0.0 ){\n    \tdist_1.x = (box_1.x - pos.x)/ray.x;\n        dist_2.x = (box_2.x - pos.x)/ray.x;\n    }\n    if( abs(ray.y) > 0.0 ){\n    \tdist_1.y = (box_1.y - pos.y)/ray.y;\n        dist_2.y = (box_2.y - pos.y)/ray.y;\n    }\n    if( abs(ray.z) > 0.0 ){\n    \tdist_1.z = (box_1.z - pos.z)/ray.z;\n        dist_2.z = (box_2.z - pos.z)/ray.z;\n    }\n    \n    \n    \n    // Evaluate each position\n    \n    vec3 pos_1 = pos + ray*dist_1.x;\n    vec3 pos_2 = pos + ray*dist_1.y;\n    vec3 pos_3 = pos + ray*dist_1.z;\n    vec3 pos_4 = pos + ray*dist_2.x;\n    vec3 pos_5 = pos + ray*dist_2.y;\n    vec3 pos_6 = pos + ray*dist_2.z;\n    \n    if( between2(box_1.yz, pos_1.yz, box_2.yz) == 0 ) dist_1.x = -10000.0;\n    if( between2(box_1.xz, pos_2.xz, box_2.xz) == 0 ) dist_1.y = -10000.0;\n    if( between2(box_1.xy, pos_3.xy, box_2.xy) == 0 ) dist_1.z = -10000.0;\n    if( between2(box_1.yz, pos_4.yz, box_2.yz) == 0 ) dist_2.x = -10000.0;\n    if( between2(box_1.xz, pos_5.xz, box_2.xz) == 0 ) dist_2.y = -10000.0;\n    if( between2(box_1.xy, pos_6.xy, box_2.xy) == 0 ) dist_2.z = -10000.0;\n    \n    \n    \n    // Return max distance\n    \n    return max(dist_1.x,\n           max(dist_1.y,\n           max(dist_1.z,\n           max(dist_2.x,\n           max(dist_2.y,\n               dist_2.z)))));\n}\n\n\n\nvec3 render( in vec2 fragCoord, in vec2 uv ){\n    \n\t// Define camera matrix\n    \n    vec2 angle = vec2( -iTime*3.14159265*0.4, 0.0 );\n    mat3 camera = mat3( cos(angle.x)*cos(angle.y), -sin(angle.x), -cos(angle.x)*sin(angle.y),\n                        sin(angle.x)*cos(angle.y),  cos(angle.x), -sin(angle.x)*sin(angle.y),\n                                     sin(angle.y),           0.0,               cos(angle.y) );\n    camera = inverse(camera);\n    \n    \n    \n    // Compute ray parameters\n    \n    vec3 pos = camera*vec3(0.0, uv);\n    //vec3 focal = camera*vec3( 750.0/max(abs(sin(0.5*angle.x)), 0.0001), 0.0, 0.0 );\n    vec3 focal = camera*vec3( 750.0, 0.0, 0.0 );\n    //vec3 ray = camera*vec3(1.0, 0.0, 0.0);\n    vec3 ray = normalize(focal-pos);\n    \n    \n    \n    // Get distance to objects\n    \n    float dist = max( sphere( vec3(0.0, 50.0, 126.0), 14.0, pos, ray ),\n                 max( box( vec3(-88.0, -88.0, -140.0), vec3( 176.0,  176.0, 176.0), pos, ray ),\n\t\t\t\t \n                 max( box( vec3(-92.0, -92.0, -144.0), vec3(   8.0,    8.0, 184.0), pos, ray ),\n                 max( box( vec3( 92.0, -92.0, -144.0), vec3(  -8.0,    8.0, 184.0), pos, ray ),\n                 max( box( vec3(-92.0,  92.0, -144.0), vec3(   8.0,   -8.0, 184.0), pos, ray ),\n                 max( box( vec3( 92.0,  92.0, -144.0), vec3(  -8.0,   -8.0, 184.0), pos, ray ),\n\t\t\t\t \n\t\t\t\t max( box( vec3(-92.0, -92.0, -144.0), vec3( 184.0,    8.0,   8.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0, -92.0, -144.0), vec3(   8.0,  184.0,   8.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0,  92.0, -144.0), vec3(-184.0,   -8.0,   8.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0,  92.0, -144.0), vec3(  -8.0, -184.0,   8.0), pos, ray ),\n\t\t\t\t \n\t\t\t\t max( box( vec3(-92.0, -92.0,   32.0), vec3( 184.0,    8.0,   8.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0, -92.0,   32.0), vec3(   8.0,  184.0,   8.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0,  92.0,   32.0), vec3(-184.0,   -8.0,   8.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0,  92.0,   32.0), vec3(  -8.0, -184.0,   8.0), pos, ray ),\n\t\t\t\t \n\t\t\t\t max( box( vec3(-92.0, -52.0, -104.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0, -12.0, -104.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0,  28.0, -104.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0, -52.0,  -64.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0, -12.0,  -64.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0,  28.0,  -64.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0, -52.0,  -24.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0, -12.0,  -24.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-92.0,  28.0,  -24.0), vec3(   8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t \n\t\t\t\t max( box( vec3( 92.0, -52.0, -104.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0, -12.0, -104.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0,  28.0, -104.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0, -52.0,  -64.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0, -12.0,  -64.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0,  28.0,  -64.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0, -52.0,  -24.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0, -12.0,  -24.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 92.0,  28.0,  -24.0), vec3(  -8.0,   24.0,  24.0), pos, ray ),\n\t\t\t\t \n\t\t\t\t max( box( vec3(-52.0, -92.0, -104.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-12.0, -92.0, -104.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 28.0, -92.0, -104.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-52.0, -92.0,  -64.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-12.0, -92.0,  -64.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 28.0, -92.0,  -64.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-52.0, -92.0,  -24.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-12.0, -92.0,  -24.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 28.0, -92.0,  -24.0), vec3(  24.0,    8.0,  24.0), pos, ray ),\n\t\t\t\t \n\t\t\t\t max( box( vec3(-52.0,  92.0, -104.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-12.0,  92.0, -104.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 28.0,  92.0, -104.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-52.0,  92.0,  -64.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-12.0,  92.0,  -64.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 28.0,  92.0,  -64.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-52.0,  92.0,  -24.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3(-12.0,  92.0,  -24.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t max( box( vec3( 28.0,  92.0,  -24.0), vec3(  24.0,   -8.0,  24.0), pos, ray ),\n\t\t\t\t \n\t\t\t\t max( box( vec3(-24.0,  68.0,   16.0), vec3(  48.0,   48.0,  48.0), pos, ray ),\n\t\t\t\t max( box( vec3(-24.0, -68.0,   16.0), vec3(  48.0,  -48.0,  48.0), pos, ray ),\n                 \n                 max( cylinder( vec3(0.0, 0.0, 32.0), 4.0, 62.0, mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), pos, ray ),\n                 max( cylinder( vec3(0.0, -1.961, 90.559), 4.0, 62.0, mat3(1.0, 0.0, 0.0, 0.0, 0.5634, -0.8261, 0.0, 0.8261, 0.5634), pos, ray ),\n\t\t\t\t \n\t\t\t\t -10000.0\n\t\t\t\t ))))))))))))))))))))))))))))))))))))))))))))))))))))));\n    \n    vec3 point = pos + dist*ray;\n    \n    \n    \n    // Assign color\n    \n    vec3 col = vec3(0.0, 0.675, 0.929);\n    if( dist >= -1000.0 ) col = vec3(1.0);\n    if( between3(vec3(-88.001, -88.001, -140.001), point, vec3(88.001, 88.001, 36.001)) == 1 ) col = vec3(0.0, 0.675, 0.929);\n    \n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){    \n    \n    // Get location on screen\n    \n    vec2 uv = fragCoord - iResolution.xy/2.0;\n    \n    \n    \n    // Assign color\n    \n    vec3 col = vec3(0.0, 0.0, 0.0);\n    if( max(abs(uv.x), abs(uv.y)) <= 200.0 ) col = render(fragCoord, uv);\n\n    \n    \n    // Print color to screen\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}