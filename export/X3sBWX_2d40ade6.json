{"ver":"0.1","info":{"id":"X3sBWX","date":"1728996918","viewed":34,"name":"harmonicssss","username":"veeluminati","description":"yeah","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0; // Centering\n\n    // Time with variation across the UV space for more dynamic flow\n    float time = iTime * 0.3 + (uv.x + uv.y) * 0.2;  \n    \n    // Move away from sharp polar coordinates, use Cartesian plane\n    float x = uv.x;\n    float y = uv.y;\n    \n    // Base frequency for the sine waves\n    float baseFrequency = 2.0;  // Adjusted for smoother flow\n\n    // Harmonics based on x and y coordinates (more fluid, wave-like)\n    float harmonic1 = sin(x * baseFrequency + time) * sin(y * baseFrequency + time);\n    float harmonic2 = sin(x * baseFrequency * 2.0 + time * 0.7) * sin(y * baseFrequency * 2.0 + time * 0.7);\n    float harmonic3 = sin(x * baseFrequency * 3.0 + time * 0.5) * sin(y * baseFrequency * 3.0 + time * 0.5);\n\n    // Combine the harmonics into a smooth interference pattern\n    float waveEffect = harmonic1 + harmonic2 * 0.7 + harmonic3 * 0.5;\n    \n    // Increase contrast in the wave effect\n    float brightness = smoothstep(-0.5, 0.5, waveEffect);  // Control contrast\n\n    // Create muted pastel colors using the waveEffect to influence the color palette\n    vec3 pastelColor = vec3(0.4 + 0.3 * sin(1.0 * waveEffect + 0.2),  // Soft Reddish\n                            0.4 + 0.3 * sin(1.2 * waveEffect + 0.5),  // Soft Greenish\n                            0.6 + 0.2 * sin(1.5 * waveEffect + 0.8)); // Soft Bluish\n\n    // Darken the gradient background for higher contrast\n    vec3 backgroundColor = mix(vec3(0.05, 0.08, 0.1), vec3(0.1, 0.1, 0.2), uv.y * 0.5 + 0.5);\n\n    // Subtle noise overlay for texture\n    float noise = fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    \n    // Reduce glow effect for the bright areas\n    float glow = smoothstep(0.9, 1.0, brightness);  // Lower the glow intensity\n    vec3 glowColor = pastelColor * vec3(0.9) * glow;  // Subtle glow only\n\n    // Final color blending (reduce glow intensity and cap brightness)\n    vec3 finalColor = mix(backgroundColor, pastelColor, brightness);\n    finalColor += 0.01 * noise;  // Subtle noise\n    finalColor += glowColor * 0.05;  // Further reduce glow influence\n    \n    // --- ADD MULTIPLE ORBITS WITH HIGHER VISIBILITY ---\n    // Orbit 1\n    vec2 center1 = vec2(0.0, 0.0);  // Center at screen center\n    float radius1 = 0.3 + 0.05 * sin(iTime * 1.5);  // Radius changes over time\n    vec2 orbitPos1 = vec2(cos(iTime), sin(iTime)) * radius1;\n    float distToOrbit1 = length(uv - orbitPos1);\n    float orbitGlow1 = smoothstep(0.02, 0.05, 0.05 - distToOrbit1);  // Moderate orbit glow\n    vec3 orbitColor1 = vec3(1.0, 0.2, 0.3) * orbitGlow1;  // Red for Orbit 1\n\n    // Orbit 2 (further from center)\n    vec2 center2 = vec2(0.0, 0.0);\n    float radius2 = 0.5 + 0.07 * sin(iTime * 1.0);  // Larger, slower orbit\n    vec2 orbitPos2 = vec2(cos(iTime * 0.8), sin(iTime * 0.8)) * radius2;\n    float distToOrbit2 = length(uv - orbitPos2);\n    float orbitGlow2 = smoothstep(0.02, 0.05, 0.05 - distToOrbit2);  // Moderate orbit glow\n    vec3 orbitColor2 = vec3(0.2, 0.8, 1.0) * orbitGlow2;  // Blue for Orbit 2\n\n    // Orbit 3 (faster, smaller)\n    vec2 center3 = vec2(0.0, 0.0);\n    float radius3 = 0.2 + 0.03 * sin(iTime * 2.0);  // Small, fast orbit\n    vec2 orbitPos3 = vec2(cos(iTime * 2.0), sin(iTime * 2.0)) * radius3;\n    float distToOrbit3 = length(uv - orbitPos3);\n    float orbitGlow3 = smoothstep(0.02, 0.05, 0.05 - distToOrbit3);  // Moderate orbit glow\n    vec3 orbitColor3 = vec3(0.6, 1.0, 0.4) * orbitGlow3;  // Green for Orbit 3\n\n    // Combine orbit colors with final color\n    finalColor += orbitColor1 + orbitColor2 + orbitColor3;\n\n    // Cap the final color to avoid oversaturation\n    finalColor = clamp(finalColor, 0.0, 1.0);  // Cap the brightness at 1.0\n\n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}