{"ver":"0.1","info":{"id":"l3SXzw","date":"1710370555","viewed":155,"name":"Ripples in water","username":"Dev1ati0n","description":"Modified version of an older shader of mine that used Euler's wave equation. This version now includes damping and a background that is distorted by refraction.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["ripples","refraction","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float depthMultiplier = 2.0;\nfloat baseDepth = 100.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = texelFetch(iChannel0,ivec2(fragCoord),0).r;\n    float b = texelFetch(iChannel0,ivec2(fragCoord)+ivec2(1,0),0).r;\n    float c = texelFetch(iChannel0,ivec2(fragCoord)+ivec2(0,1),0).r;\n    vec3 nrm = normalize(cross( vec3(1,0,depthMultiplier*(b-a)),vec3(0,1,depthMultiplier*(c-a)) ));\n    vec3 ref = refract(vec3(0,0,-1),nrm,1.33);\n    fragColor = texture(iChannel2,(fragCoord+ref.xy*baseDepth)/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Speed of simulation. Higher values are faster, but less accurate and more buggy. \nfloat timescale = 0.5;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// The derivative (rate of change) of the wave amplitude\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel = 1./iResolution.xy;\n    vec2 uv = fragCoord*pixel;\n    // Fetch values of neighboring pixels\n    float values[5];\n    values[0] = texture(iChannel1,uv).r;\n    values[1] = texture(iChannel1,uv+vec2(0.0, 1.0)*pixel).r;\n    values[2] = texture(iChannel1,uv+vec2(0.0,-1.0)*pixel).r;\n    values[3] = texture(iChannel1,uv+vec2(1.0, 0.0)*pixel).r;\n    values[4] = texture(iChannel1,uv+vec2(-1.0,0.0)*pixel).r;\n    // Wave Equation: d²u/dt²=c²(d²u/dx²+d²u/dy²)\n    float deriv = values[1]+values[2]+values[3]+values[4]-4.*values[0]; // Calculates d²u/dx²+d²u/dy²\n    fragColor = vec4(texture(iChannel0,uv).r+timescale*deriv); // Add c²(d²u/dx²+d²u/dy²) to the previous value\n    fragColor *= 0.999; // Damping\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(timescale*texture(iChannel0,uv)+texture(iChannel1,uv)); // Add the derivative to the previous value\n    // Add disturbance\n    if(iFrame == 0) fragColor += 3.*texture(iChannel3,uv*0.05).r;\n    if(iMouse.z>0.){\n        vec2 diff = fragCoord-iMouse.xy;\n        diff /= iResolution.y;\n        fragColor += exp(-8000.*dot(diff,diff));\n    }\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}