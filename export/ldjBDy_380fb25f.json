{"ver":"0.1","info":{"id":"ldjBDy","date":"1502161327","viewed":86,"name":"36.0244","username":"etrepum","description":"fig logo, antialiased using a distance field method","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["antialiasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\n// https://iquilezles.org/articles/distfunctions\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\nfloat opS( float d1, float d2 )\n{\n    return max(-d1, d2);\n}\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat udCircle( vec3 p, vec3 c, float r )\n{\n    return length(p - c) - r;\n}\n\nfloat udFigLogo( vec2 uv2, vec2 c2, float dt )\n{\n    float rSmall = 0.044;\n    float rMed = 0.17;\n    float rBig = 0.40;\n\tfloat tBig = 0.25;\n    float z = 0.0;\n    vec3 c = vec3(c2, z);\n    vec3 uv = vec3(uv2, z);\n    float ud = udTriangle(\n        uv,\n        vec3(c.x, 1.0, z),\n        c + rBig * vec3(cos(M_PI * (0.5 - tBig)), sin(M_PI * (0.5 - tBig)), z),\n        c + rBig * vec3(cos(M_PI * (0.5 + tBig)), sin(M_PI * (0.5 + tBig)), z)\n    );\n    ud = opU(ud, udCircle(uv, c, rBig));\n    ud = opS(udCircle(uv, c, rSmall), ud);\n    for (float i = 0.0; i < 6.0; i += 1.0)\n    {\n        float theta = dt + (0.25 + i / 6.0) * 2.0 * M_PI;\n        ud = opS(udCircle(uv, c + rMed * vec3(cos(theta), sin(theta), z), rSmall), ud);\n    }\n    return ud;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float h = min(iResolution.x, iResolution.y);\n    float w = 0.8 * h;\n    vec4 bg = vec4(1.0);\n    vec4 fg = vec4(132.0/255.0, 80.0/255.0, 224.0/255.0, 1.0);\n    vec2 c = 0.5 * vec2(iResolution.x, w);\n    float t = iTime;\n    float ud = udFigLogo( fragCoord / h, c / h, sin(t * 0.015) * sin(t * 0.1) * M_PI );\n    float blur = 6.0 * (1.0 / h) * (1.0 + sin(t));\n\tfragColor = mix(\n        fg,\n        bg,\n        smoothstep(0.0, blur, ud)\n    );\n}","name":"Image","description":"","type":"image"}]}