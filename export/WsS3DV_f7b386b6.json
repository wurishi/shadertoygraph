{"ver":"0.1","info":{"id":"WsS3DV","date":"1549977454","viewed":414,"name":"sdRhombus by my logic","username":"yashgugale","description":"Understanding sdRhombus using sdLine and sdBox","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sdrhombus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdRhombus(in vec2 p, in vec2 b)\n{\n    \n    vec2 s = vec2(0.0, b.y);\t// Point on the Y-axis\n    vec2 t = vec2(b.x, 0.0);\t// Point on the X-axis\n    vec2 ps = abs(p) - s;\t\t// Vector ps for projection on ts \n    vec2 ts = t-s;\t\t\t\t// Vector ts\n    float h = clamp(dot(ps, ts)/dot(ts, ts), 0.0, 1.0);\t// Project ps on ts, take the ratio of the projection and clamp it\n    vec2 l = ts * h;\t\t\t// Vector l by taking ratio of ts\n    vec2 x = s + l;\t\t\t\t// Point x on the edge of the rhombus obtained by adding vector l to the point on the Y-axis\n    vec2 d = abs(p) - x;\t\t// Compute the distance (same as sdBox)\n    return length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\t// Compute the distance (same as sdBox)\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 b = vec2(0.3, 0.3);\n    vec2 boxPos = uv;\n    \n    // Move rhombus to the center:\n    boxPos.x -= 0.5;\n    boxPos.y -= 0.5;\n    \n    // Calcualte the distance\"\n    float dist = sdRhombus(boxPos, b);\n    \n    // Default color:\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n\t// Draw filled rhombus with red color:\n    if(dist < 0.005)\n        col = vec3(1.0, 0.0, 0.0);\n    else\n        col = vec3(1.0, 1.0, 0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}