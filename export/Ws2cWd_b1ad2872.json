{"ver":"0.1","info":{"id":"Ws2cWd","date":"1587524795","viewed":60,"name":"cis561 hw09 Noise ","username":"sireesha98","description":"Noise and UV","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//NOISE \n\n//Center Sphere - Worley3D \n//Center Cube - Perlin3D \n//Floor - Worley 3D\n//Revolving Sphere- UV mapped to iChannel 1(Buffer A) - FBM with 4 octaves \n//Back Wall- Tile mapped UVs to iChannel 0(Buffer B) - Worley Voronoi 2D\n//All are animated using iTime \n//Perlin uses cosine Color Palette \n//(Color palette Didn't go well with worley - Can add it if you like in Compute Material) \n\n///---------------///\n/// All Constants ///\n///---------------///\n\nconst float FOVY = 3.141569 * 0.25;\nconst int RAY_STEPS = 256;\n\n\n//Set Color palatte :\n//https://iquilezles.org/articles/palettes\n\nconst vec3 a = vec3(0.8, 0.5, 0.4);\nconst vec3 b = vec3(0.5, 0.5, 0.5);\nconst vec3 c = vec3(1.0, 1.0, 1.0);\nconst vec3 d = vec3(0.00, 0.33, 0.67);\n\nvec3 colorPalette(float t) \n{\n    return a + b * cos(6.28 * (t * c + d));\n}\n\n///------------///\n/// Structures ///\n///------------///\n\nstruct Intersection {\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // Assign every object in our scene a unique ID int\n};\n    \n///--------------------///\n/// Rotation Functions ///\n///--------------------///\n\nvec3 rotateX(in vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(p.x, c * p.y - s * p.z, s * p.y + c * p.z);\n}\n\nvec3 rotateY(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n\nvec3 rotateZ(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);\n}\n\n///--------------------///\n/// Local Space Matrix ///\n///--------------------///\n    \n// Returns the inverse trasnformation matrix for the given t,r and s components \n// Returns the inverse trasnformation matrix for the given t,r and s components \nmat4 inverseTransform(vec3 scale, vec3 rDeg, vec3 trans) {\n    \n    // convert from degrees to radians\n    vec3 rotate = vec3(radians(rDeg.x), radians(rDeg.y), radians(rDeg.z));\n    \n    mat4 r_x;\n    r_x[0] = vec4(1., 0., 0., 0.);\n    r_x[1] = vec4(0., cos(rotate.x), sin(rotate.x), 0.);\n    r_x[2] = vec4(0., -sin(rotate.x), cos(rotate.x), 0.);\n    r_x[3] = vec4(0., 0., 0., 1.);\n                                    \n                                    \n    mat4 r_y;\n    r_y[0] = vec4(cos(rotate.y), 0., -sin(rotate.y), 0.);\n    r_y[1] = vec4(0., 1, 0., 0.);\n    r_y[2] = vec4(sin(rotate.y), 0., cos(rotate.y), 0.);\n    r_y[3] = vec4(0., 0., 0., 1.);\n\n    mat4 r_z;\n    r_z[0] = vec4(cos(rotate.z), sin(rotate.z), 0., 0.);\n    r_z[1] = vec4(-sin(rotate.z), cos(rotate.z), 0., 0.);\n    r_z[2] = vec4(0., 0., 1., 0.);\n    r_z[3] = vec4(0., 0., 0., 1.);\n\n    mat4 r = r_x * r_y * r_z;\n    \n    // creating worldTransform matrix\n    mat4 t;\n    t[0] = vec4(1., 0., 0., 0.);\n    t[1] = vec4(0., 1., 0., 0.);\n    t[2] = vec4(0., 0., 1., 0.);\n    t[3] = vec4(trans.x, trans.y, trans.z, 1.);\n    \n    mat4 s;\n    s[0] = vec4(scale.x, 0., 0., 0.);\n    s[1] = vec4(0., scale.y, 0., 0.);\n    s[2] = vec4(0., 0., scale.z, 0.);\n    s[3] = vec4(0., 0., 0., 1.);\n\n    mat4 worldTrans = t * r * s;\n    \n    return inverse(worldTrans);\n}\n\n\n\n///-----------------///\n/// Noise Functions /// \n///-----------------///\n\n\n//https://www.shadertoy.com/view/MdGSzt - Perlin\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+9.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (5.0 - 1.0 * pf);\n    \n    return mix(\n        \t\tsmoothstep(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\nfloat random1( vec3 p ) {\n    return fract(sin((dot(p, vec3(127.1,\n                                  311.7,\n                                  191.999)))) *         \n                 43758.5453);\n}\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\n\n\nfloat WorleyNoise3D(vec3 p) {\n    // Tile the space\n    vec3 pointInt = floor(p);\n    vec3 pointFract = fract(p);\n\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    for(int z = -1; z <= 1; z++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            for(int x = -1; x <= 1; x++)\n            {\n                vec3 neighbor = vec3(float(x), float(y), float(z));\n\n                // Random point inside current neighboring cell\n                vec3 point = random3(pointInt + neighbor) * sin(0.5 * iTime);\n\n                // Animate the point\n                point = 0.5 + 0.5 * sin(iTime * 0.0 + 10.2831 * point); // 0 to 1 range\n\n                // Compute the distance b/t the point and the fragment\n                // Store the min dist thus far\n                vec3 diff = neighbor + point - pointFract;\n                float dist = length(diff);\n                minDist = min(minDist, dist);\n            }\n        }\n    }\n    return colorPalette(minDist).x * (1. - minDist);\n}\n\n\n///---------------------///\n/// Coordinate Systems  ///\n///---------------------///\n\nvoid CoordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {\n    if (abs(v1.x) > abs(v1.y))\n            v2 = vec3(-v1.z, 0.0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);\n        else\n            v2 = vec3(0.0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);\n        v3 = cross(v1, v2);\n}\n\nvec3 WorleyTangentSpaceNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( WorleyNoise3D(pos + epsilon.yxx) - WorleyNoise3D(pos - epsilon.yxx),\n                            WorleyNoise3D(pos + epsilon.xyx) - WorleyNoise3D(pos - epsilon.xyx),\n                            WorleyNoise3D(pos + epsilon.xxy) - WorleyNoise3D(pos - epsilon.xxy)));\n\n}\n\nmat3 TangentToWorld(vec3 nor) {\n\tvec3 tangent, bitangent;\n    CoordinateSystem(nor, tangent, bitangent);\n    return mat3(tangent, bitangent, nor);\n}\n\n///----------///\n/// ALL SDFs ///\n///----------///\n\n// SDF of a sphere\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\n#define TWO_PI 2.*3.14159\n#define PI 3.14159\nvec3 sphereCol(vec3 p, float r, vec3 c, vec2 coords) {    \n    // posn is the normalized vector from P to the sphere center\n    // which in this example is at (0, 0, 0).\n    vec3 posn = normalize(p - c);\n    float u = 0.5 + atan(posn.z, posn.x) / (2.*3.1415);\n    float v = 0.5 - asin(posn.y) / 3.1415;\n    \n    // trick from Fabrice to avoid the discontinuity at Greenwich.\n    vec2 uv = vec2(u,v), \n         df = fwidth(uv);\n   \tif(df.x > 0.5) df.x = 0.;\n    vec3 tex = textureLod(iChannel1, uv, log2(max(df.x, df.y)*1024.)).xyz;\n    return tex;\n    \n}\n\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nvec3 planeColor(vec2 uv, vec3 pos, vec3 plane) \n{\n    mat4 invTrans = inverseTransform(vec3(1.), vec3(0.), plane);\n    vec3 localPos = (invTrans * vec4(pos,1.)).rgb;\n    float u = fract(localPos.x);\n    float v = fract(localPos.y);\n    vec4 tex = texture(iChannel0, vec2(u,v));\n    return tex.rgb;\n    \n}\n\n//SDF of a Cube - done\nfloat cube(vec3 p, vec3 s, vec3 r, vec3 t) \n{\n    //Local space of the cube \n    mat4 inverseTrans = inverseTransform(s, r, t);\n    vec4 tempP = inverseTrans * vec4(p, 1.f);\n    p = vec3(tempP.x, tempP.y, tempP.z);\n    \n    p = rotateY(p, sin(iTime * 0.5));\n    \n    vec3 q = abs(p) - vec3(0.5, 0.5, 0.5);\n  \treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n///----------------------------------///\n/// Scene SDFs, their IDs and Colors ///\n///----------------------------------///\n\n\n#define SPHERE_1_SDF sphere(pos, 1.0, rotateY(vec3(-5., 0., 0.), 0.3 * iTime))\n#define SPHERE_2_SDF sphere(pos, 1.5, vec3(0., 1.1, 0.))\n#define SPHERE_1_ID 1\n#define SPHERE_2_ID 2\n#define SPHERE_COL sphereCol(p, 2.0, vec3(0., 0., 0.), uv)\n\n#define PLANE_1_SDF  plane(pos, vec4(0., 0., -1., 5.))\n#define PLANE_1_ID 3\n#define PLANE_1_COL planeColor(uv, p, vec3(0., 0., -5.))\n#define PLANE_2_SDF plane(pos,  vec4(0., 1., 0., 2.5))\n#define PLANE_2_ID 4\n\n#define CUBE_SDF cube(pos, vec3(1 ,1.5 ,1.), vec3(0.), vec3(0., -1., -3.))\n#define CUBE_ID 5\n#define CUBE_COL vec3(0.82, 0.70, 0.01)\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = SPHERE_1_SDF;\n    obj = SPHERE_1_ID;\n    \n    float t2;\n    if((t2 = SPHERE_2_SDF) < t) {\n        t = t2;\n        obj = SPHERE_2_ID;\n    }\n    if((t2 = PLANE_1_SDF) < t) {\n        t = t2;\n        obj = PLANE_1_ID;\n    }\n    if((t2 = PLANE_2_SDF) < t) {\n        t = t2;\n        obj = PLANE_2_ID;\n    }\n     if((t2 = CUBE_SDF) < t) {\n        t = t2;\n        obj = CUBE_ID;\n    }\n}\n\n\nfloat sceneMap3D(vec3 pos) {\n    float t = SPHERE_1_SDF;   \n    float t2;\n    if((t2 = SPHERE_2_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = PLANE_1_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = PLANE_2_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = CUBE_SDF) < t) {\n        t = t2;\n    }\n    \n    return t;\n}\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj) {\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n\nvec3 computeMaterial(vec2 uv, int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view) {\n    //vec3 worley_normal = WorleyTangentSpaceNormal(p);\n    //worley_normal = TangentToWorld(n) * worley_normal;\n    float lambert = max(0.0, dot(view, n));\n    switch(hitObj) {\n        case SPHERE_1_ID:\n        return SPHERE_COL * lambert ;\n        break;\n        case SPHERE_2_ID:\n        return vec3(1., 0.25 , 0.15) * lambert * (0.7 + WorleyNoise3D(p));\n        break;\n        case PLANE_1_ID:\n        uv = ( uv / 2. + vec2(1.0, 1.0)) ;\n        return PLANE_1_COL;\n        break;\n        case PLANE_2_ID:\n        return vec3(0.15, 0.75 , 0.82) * lambert * (0.9 + WorleyNoise3D(p));\n        break;\n        case CUBE_ID:\n        return  lambert * 0.7 * colorPalette(perlin_noise(p));\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec2 uv) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    \n    vec3 surfaceColor = computeMaterial(uv, hitObj, isect, nor, vec3(0., 0., 0.), normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\n\n// Returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc) {\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0,1,0)));\n    vec3 U = normalize(cross(R, F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // Convert to range [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(0,0,-10);  //rotateY(vec3(0, 0, -10), iTime);\n    vec3 ref = vec3(0, 0, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye, uv);\n\n    \n    //fragColor = texture(iChannel1, uv);\n    fragColor = vec4(isect.color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//BUF A \n//Inspired by IQ \n///FBM 4 - TO BE MAPPED TO THE SPHERE \n\n///-----------------///\n/// Noise Functions /// \n///-----------------///\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float a = textureLod(iChannel0,(p+vec2(0.5,0.5))/256.0,0.0).x;\n\tfloat b = textureLod(iChannel0,(p+vec2(1.5,0.5))/256.0,0.0).x;\n\tfloat c = textureLod(iChannel0,(p+vec2(0.5,1.5))/256.0,0.0).x;\n\tfloat d = textureLod(iChannel0,(p+vec2(1.5,1.5))/256.0,0.0).x;\n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\n}\n\nconst mat2 mtx = mat2( 1.80,  01.60, -0.60,  1.50 );\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*(-1.0+2.0*noise( p )); p = mtx*p*2.02;\n    f += 0.2500*(-1.0+2.0*noise( p )); p = mtx*p*2.03;\n    f += 0.1250*(-1.0+2.0*noise( p )); p = mtx*p*2.01;\n    f += 0.0625*(-1.0+2.0*noise( p ));\n\n    return f/0.9375;\n}\n\n\nvec2 fbm4_2( vec2 p )\n{\n    return vec2( fbm4(p+vec2(1.0)), fbm4(p+vec2(2.2)) );\n}\n\n///-----------MAIN--------------///\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n\tp*=4.;\n\t\n    float rz = fbm4_2(p).x;\n\tp /= exp(mod(iTime*10.,3.14159));\n\t\n\t//final color\n\tvec3 col = 0.5 * vec3(.2,0.1,0.4)/rz;\n\tcol=pow(abs(col),vec3(.99));\n\tfragColor = vec4(col,1.);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//BUF B\n///2D WORLEY to be mapped to the plane \n\n///-----------------///\n/// Noise Functions /// \n///-----------------///\n\n//Inigo Quilez's Noise function \n\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\n// return distance, and cell id\nvec2 worley2D( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n\t    vec2  r = g - f + (0.5+0.5*sin(iTime+2.2831*o));\n\t\tfloat d = dot( r, r );\n        if(d < m.x)\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/max(iResolution.x,iResolution.y);\n    \n    vec2 c = worley2D( (1.0+6.0*sin(0.3*iTime))*p );\n\n    vec3 col = 0.5 + 0.5*cos( c.y*9.2831 + vec3(0.14,0.77,0.67) );\t\n    col *= clamp(1.0 - 0.4*c.x*c.x,0.0,1.0);\n\t\n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer B","description":"","type":"buffer"}]}