{"ver":"0.1","info":{"id":"mssBDX","date":"1689246604","viewed":67,"name":"Pentagon Portal","username":"ttphb","description":"A simple SDF pentagon animation.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","portal","pentagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\n\nfloat sdCircle( in vec2 p, in float r)\n{\n    return length(p) - r;\n}\n\nvec3 palette(float t) \n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.3, 0.1, 0.4);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 finalColor = vec3(0.0);\n\n    float d = sdPentagon(uv, 0.5) * exp(-length(uv));\n\n    vec3 col = palette(d + iTime);\n\n    d = sin(d * 8. + iTime * 2.0)/30.;\n    d = abs(d);\n\n    d = 0.01 / d;\n        \n    //d = pow(d, 1.2);\n\n    float mask = step(0.0, uv.x);\n    float antimask = abs(mask - 1.0);\n    \n    finalColor += col * d;\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}