{"ver":"0.1","info":{"id":"dldBD8","date":"1701733215","viewed":11,"name":"100816723 - Rotation Matrix","username":"St0ven_","description":"A simple rotation matrix shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["matrix","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotationMatrix(float angle){\n    angle *= 3.1415 / 180.0;\n    \n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = (uv - 0.5) * 2.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    mat2 rotMat = rotationMatrix(5. * iTime);\n    \n    uv *= rotMat;\n    \n    // Time varying pixel color\n    float isSquare = float(uv.x > -0.5 && uv.x < 0.5) + float(uv.y > -0.5 && uv.y < 0.5);\n    \n    vec3 col = vec3(isSquare, 0., 0.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}