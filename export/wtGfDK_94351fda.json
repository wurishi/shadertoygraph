{"ver":"0.1","info":{"id":"wtGfDK","date":"1615057180","viewed":203,"name":"Old melomaniac","username":"Tesselator","description":"mind blowing music","likes":3,"published":1,"flags":34,"usePreview":0,"tags":["music","gradient","camera","dance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sum = 0.0;\n    for(float x = -num_steps; x <= num_steps; x++)\n        for(float y = -num_steps; y <= num_steps; y++)\n        {\n            vec2 dr = vec2(x * step_size, y * step_size);\n            vec2 uv = (fragCoord + dr) / iResolution.xy;\n            vec3 offset = texture(iChannel1, uv).xyz;\n            vec2 delta = num_steps * step_size * offset.xy;\n            vec2 uv2 = (fragCoord - delta) / iResolution.xy;\n            sum += texture(iChannel0, uv2).x;\n        }\n    sum /= num_steps*num_steps * brightness;\n#ifdef colorImage\n    vec2 uv = (fragCoord) / iResolution.xy;\n    vec3 color = texture(iChannel2, uv).xyz * sum;\n#else\n    vec3 color = vec3(sum, sum, sum);\n#endif\n    fragColor = vec4(color, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float gray(vec3 color)\n{\n    return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 drx = vec2(3.0, 0.0);\n    vec2 dry = vec2(0.0, 3.0);\n\n    vec2 uvx = (fragCoord + drx) / iResolution.xy;\n    vec2 uvy = (fragCoord + dry) / iResolution.xy;\n\n    float cur = gray(texture(iChannel0, uv).xyz);\n    float dx = gray(texture(iChannel0, uvx).xyz);\n    float dy = gray(texture(iChannel0, uvy).xyz);\n    \n    float r = pow (abs(dx - cur), 0.6) + pow(abs(dy - cur), 0.6);\n\n    \n    fragColor = vec4(r, r, r, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec2 drx = vec2(2.0, 0.0);\n    vec2 dry = vec2(0.0, 2.0);\n\n    vec2 uvx = (fragCoord + drx) / iResolution.xy;\n    vec2 uvy = (fragCoord + dry) / iResolution.xy;\n\n    float cur = texture(iChannel0, uv).x;\n    float dx = texture(iChannel0, uvx).x;\n    float dy = texture(iChannel0, uvy).x;\n    vec2 offset = vec2(dx - cur, dy - cur);\n\n#ifdef noise2d\n    float noise = texture(iChannel1, uv).x;\n#else\n    float noise = texture(iChannel1, vec2(uv.x, 0.25)).x;\n#endif\n    offset = noise * normalize(offset);\n\n    fragColor = vec4(offset.x, offset.y, abs(noise), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//#define noise2d\n//#define colorImage\n\n#define num_steps 2.0\n#define step_size 15.0\n\n#define brightness 2.0","name":"Common","description":"","type":"common"}]}