{"ver":"0.1","info":{"id":"wl2XW3","date":"1675080972","viewed":53,"name":"Psychedelic Cogs","username":"Peetu","description":"Some 2D generated Cogs from my 2020 Assembly demo","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cogs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159;\n\nfloat rand(float r) {\n    return fract(cos(fract(sin(r * 1035.2134)) * 31.15132));\n}\n\nmat2 rot(float a) {\n\tfloat ca = cos(a);\n    float sa = sin(a);\n    return mat2(ca,sa,-sa,ca);\n}\n\nfloat circle(vec2 p, float r) {\n\treturn length(p) - r;\n}\n\nvec3 cog(vec2 p, float t) {\n    \n    p = rot(t) * p;\n    vec2 rp = vec2(atan(p.x, p.y) + PI, length(p) * 10.);\n    \n    //teeth circle\n    \n    float r = 0.22 + max(-0.015, min(0.015, cos(rp.x * 10.) * 0.02));\n\tfloat tc = circle(p, r);\n    \n    //inner circles\n    float ic = 9.;\n    for(float i = 0.; i < 5.; i+=1.) {\n    \tic = min(\n            ic,\n            circle(rp - vec2(PI/5.+PI/5.*2.*i,1.2), .4)\n        );\n    }\n    \n    //center circle\n    float cc = circle(p, 0.02);\n    \n    if(tc < 0. && ic > 0. && cc > 0.) {\n        return vec3(1.);\n    }\n    \n    return vec3(0.);\n}\n\nvec3 bgCogs(vec2 uv, float timeOS, float t) {\n    uv*=2.;\n    float s = 0.5;\n    vec2 ouv = uv;\n    uv = mod(uv, vec2(0.5)) - s*.5;\n    if(abs(mod(floor(ouv.x / s), 2.) - mod(floor(ouv.y / s), 2.)) < 0.5) {\n    \ttimeOS += PI / 2.;   \n    }\n    float brightness = sin(t * .3 + timeOS) * .01;\n    if(cog(uv, t).r > .5) {\n    \treturn vec3(brightness + 0.01);   \n    }\n    return vec3(0.01);\n}\n\nvec3 shakeCogs(vec2 uv, float t) {\n    vec3 col = vec3(0.);\n    uv.x+=0.5;\n    uv.x -= .8;\n    for(float i = 0.; i < 5.; i+=1.) {\n        uv.x*=-1.;\n        uv /= t * .2;\n        uv.x += i * .1;\n        float os = rand(floor(t * 21.)) * .03 - .01;\n\n        col.r += cog(uv, t).r * .33;\n        uv.x+=os;\n        col.g += cog(uv, t).g * .33;\n        uv.x+=os;\n        col.b += cog(uv, t).b * .33;\n        \n        col /= t * .15;\n    }\n    \n    return col;\n}\n\nvec3 lightCogs(vec2 uv, float st, float t ) { //st = start time\n    \n    vec3 col = vec3(0.);\n    vec3 hue = vec3(.5, .5, .1);\n    for(float i = 0.; i < 7.; i++) {\n        uv.x -= t * .02 * i;\n        uv.x += i * .3;\n        uv *= -1.;\n        uv /= (t - 10.)*.2;\n        col += cog(uv, t) * min(1., max(0., t - st - i)) * hue;\n        col -= cog(uv, t) * min(1., max(0., t - st - 10. - i)) * hue;\n        \n        hue.rgb = hue.gbr;\n    }\n    return col;\n}\n\nvec3 cogs(vec2 uv, float t) {\n    vec3 col = vec3(0.);\n    \n    col += mix(vec3(0.), bgCogs(uv, 0., t), min(1., t));\n    \n    col += mix(vec3(0.), bgCogs(uv + vec2(0.125), PI / 4., t), min(1., t));\n    \n    //psychedelic color cogs\n    if(t < 15.){\n    \tcol += shakeCogs(uv, t);\n    }\n    //light cogs\n    float t0 = 10.;\n    if(t > t0) {\n    \tcol += lightCogs(uv, t0, t);   \n    }\n    \n    if(t > 19.7) {\n    \treturn vec3(1.);   \n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv -= vec2(.9, .5);\n    \n    float t = mod(iTime, 21.);\n\n    // Time varying pixel color\n    vec3 col = cogs(uv, t);\n    \n    if(t > 20.) {\n        col = vec3(smoothstep(1., 0., t - 20.)); \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}