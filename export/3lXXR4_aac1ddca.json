{"ver":"0.1","info":{"id":"3lXXR4","date":"1562164048","viewed":121,"name":"font test 1","username":"bernie_freidin","description":"my version of the text render utility, much easier to use (for me)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on https://www.shadertoy.com/view/MtyXDV\n\n#define FONT_ROWS 20 // determines font size\n#define FONT_SPACE 0.5\n\n#define _BACKSPACE          font_current_textpos.x -= FONT_SPACE;\n#define _SPACE              font_current_textpos.x += FONT_SPACE;\n#define _SPACE_n(n)         font_current_textpos.x += FONT_SPACE*float(n);\n#define _NOTESYMBOL         DrawChar(10);\n#define _STARSYMBOL         DrawChar(28);\n#define _SMILEYSYMBOL       DrawChar(29);\n#define _EXCLAMATION        DrawChar(33);\n#define _DOUBLEQUOTE        DrawChar(34);\n#define _HASH               DrawChar(35);\n#define _DOLLARSIGN         DrawChar(36);\n#define _PERCENTSIGN        DrawChar(37);\n#define _AMPERSAND          DrawChar(38);\n#define _SINGLEQUOTE        DrawChar(39);\n#define _OPENPARENTHESIS    DrawChar(40);\n#define _CLOSEPARENTHESIS   DrawChar(41);\n#define _ASTERISK           DrawChar(42);\n#define _PLUSSIGN           DrawChar(43);\n#define _COMMA              DrawChar(44);\n#define _MINUSSIGN          DrawChar(45);\n#define _PERIOD             DrawChar(46);\n#define _FORWARDSLASH       DrawChar(47);\n\n#define _COLON              DrawChar(58);\n#define _SEMICOLON          DrawChar(59);\n#define _LESSTHANSIGN       DrawChar(60);\n#define _EQUALSIGN          DrawChar(61);\n#define _GREATERTHANSIGN    DrawChar(62);\n#define _QUESTIONMARK       DrawChar(63);\n#define _ATSIGN             DrawChar(64);\n\n#define _OPENSQUAREBRACKET  DrawChar(91);\n#define _BACKSLASH          DrawChar(92);\n#define _CLOSESQUAREBRACKET DrawChar(93);\n#define _CARET              DrawChar(94);\n#define _UNDERSCORE         DrawChar(95);\n#define _GRAVE              DrawChar(96);\n\n#define _OPENCURLYBRACKET   DrawChar(123);\n#define _VERTICALBAR        DrawChar(124);\n#define _CLOSECURLYBRACKET  DrawChar(125);\n#define _TILDE              DrawChar(126);\n\n#define _PARENTHESIS(text) _OPENPARENTHESIS text _CLOSEPARENTHESIS\n#define _SQUAREBRACKET(text) _OPENSQUAREBRACKET text _CLOSESQUAREBRACKET\n#define _CURLYBRACKET(text) _OPENCURLYBRACKET text _CLOSECURLYBRACKET\n\n#ifndef KEY_0\n#define KEY_0 48\n#endif\n\n#define DrawDigit(x) DrawChar(KEY_0 + int(x));\n#define _0 DrawDigit(0);\n#define _1 DrawDigit(1);\n#define _2 DrawDigit(2);\n#define _3 DrawDigit(3);\n#define _4 DrawDigit(4);\n#define _5 DrawDigit(5);\n#define _6 DrawDigit(6);\n#define _7 DrawDigit(7);\n#define _8 DrawDigit(8);\n#define _9 DrawDigit(9);\n\n#define _A DrawChar(65);\n#define _B DrawChar(66);\n#define _C DrawChar(67);\n#define _D DrawChar(68);\n#define _E DrawChar(69);\n#define _F DrawChar(70);\n#define _G DrawChar(71);\n#define _H DrawChar(72);\n#define _I DrawChar(73);\n#define _J DrawChar(74);\n#define _K DrawChar(75);\n#define _L DrawChar(76);\n#define _M DrawChar(77);\n#define _N DrawChar(78);\n#define _O DrawChar(79);\n#define _P DrawChar(80);\n#define _Q DrawChar(81);\n#define _R DrawChar(82);\n#define _S DrawChar(83);\n#define _T DrawChar(84);\n#define _U DrawChar(85);\n#define _V DrawChar(86);\n#define _W DrawChar(87);\n#define _X DrawChar(88);\n#define _Y DrawChar(89);\n#define _Z DrawChar(90);\n\n#define _a DrawChar(97);\n#define _b DrawChar(98);\n#define _c DrawChar(99);\n#define _d DrawChar(100);\n#define _e DrawChar(101);\n#define _f DrawChar(102);\n#define _g DrawChar(103);\n#define _h DrawChar(104);\n#define _i DrawChar(105);\n#define _j DrawChar(106);\n#define _k DrawChar(107);\n#define _l DrawChar(108);\n#define _m DrawChar(109);\n#define _n DrawChar(110);\n#define _o DrawChar(111);\n#define _p DrawChar(112);\n#define _q DrawChar(113);\n#define _r DrawChar(114);\n#define _s DrawChar(115);\n#define _t DrawChar(116);\n#define _u DrawChar(117);\n#define _v DrawChar(118);\n#define _w DrawChar(119);\n#define _x DrawChar(120);\n#define _y DrawChar(121);\n#define _z DrawChar(122);\n\nvec2 font_current_textpos = vec2(0);\nvec2 font_uv = vec2(0); // fragCoord\nvec4 font_current_color = vec4(1);\nvec2 font_deferred_uv = vec2(-1);\nvec4 font_deferred_color = vec4(0);\nfloat font_overdraw = 0.0; // debugging\n\nvoid FontSetPositionf(float col, float row)\n{\n\tfont_current_textpos = -float(FONT_ROWS)*font_uv;\n\tfont_current_textpos.x += col*FONT_SPACE - 0.15;\n\tfont_current_textpos.y -= row - float(FONT_ROWS) + 1.0;\n}\n\nvoid FontSetPosition(int col, int row)\n{\n\tFontSetPositionf(float(col), float(row));\n}\n\nvoid FontSetColor(vec4 color)\n{\n\tfont_current_color = color;\n}\n\nvoid FontInit(vec2 uv)\n{\n\tfont_uv = uv;\n\tFontSetPosition(0, 0);\n}\n\nvoid FontRender(sampler2D fontSampler, inout vec3 background)\n{\n\tvec4 fc = font_deferred_color;\n\tif (fc.a > 0.0) {\n\t\tfc.a *= texture(fontSampler, font_deferred_uv).r;\n\t\tbackground = mix(background, fc.rgb, fc.a);\n\t\tfont_deferred_color = vec4(0);\n\t}\n\tbackground += vec3(font_overdraw*0.2);\n\tfont_overdraw = 0.0;\n}\n\nvoid DrawChar(int ch)\n{\n\tconst vec2 inset = vec2(0.265, 0.05);\n\tvec2 tp = -font_current_textpos;\n\t_SPACE\n\tif (all(greaterThan(vec4(tp, vec2(1) - inset.xy), vec4(inset.xy, tp)))) {\n\t\tfont_deferred_uv = 0.0625*(tp + vec2(ch - (ch/16)*16, 15 - ch/16));\n\t\tfont_deferred_color = font_current_color;\n\t\t//font_overdraw += 1.0;\n\t}\n}\n\nvoid DrawUIntFillZeros(uint x, uint digits)\n{\n\tuint d = 1U;\n\tbool fill_zeros = (digits != 0U);\n\tif (digits == 0U) {\n\t\twhile (d <= x) {\n\t\t\td *= 10U;\n\t\t\tdigits++;\n\t\t}\n\t}\n\tif (fill_zeros) {\n\t\tfor (uint i = 0U; i < digits; i++)\n\t\t\tDrawDigit(0U);\n\t} else\n\t\t_SPACE_n(digits)\n\tfloat x0 = font_current_textpos.x;\n\t_BACKSPACE\n\twhile (x != 0U) {\n\t\tDrawDigit(x%10U);\n\t\t_BACKSPACE\n\t\t_BACKSPACE\n\t\tx /= 10U;\n\t}\n\tfont_current_textpos.x = x0;\n}\n\nvoid DrawUInt(uint x)\n{\n\tif (x == 0U) { DrawDigit(0U); return; }\n\tDrawUIntFillZeros(x, 0U);\n}\n\nvoid DrawInt(int x)\n{\n\tif (x == 0) { DrawDigit(0U); return; }\n\tif (x < 0) { _MINUSSIGN x = -x; }\n\tDrawUIntFillZeros(uint(x), 0U);\n}\n\nvoid DrawFloatDigits(float x, uint digits)\n{\n\tif (x < 0.0) { _MINUSSIGN x = -x; }\n\tfloat d = pow(10.0, float(digits));\n\tx += 0.5/d;\n\tDrawUInt(uint(x));\n\t_PERIOD\n\tDrawUIntFillZeros(uint(fract(x)*d), digits);\n}\n\nvoid DrawFloat(float x)\n{\n\tconst uint defaultDigits = 3U;\n\tDrawFloatDigits(x, defaultDigits);\n}\n\nvoid DrawBool(bool x)\n{\n\tif (x) { _T _R _U _E }\n\telse { _F _A _L _S _E }\n}\n\nvoid DrawIntVec2(ivec2 v) { _OPENPARENTHESIS DrawInt(v.x); _COMMA DrawInt(v.y); _CLOSEPARENTHESIS }\nvoid DrawIntVec3(ivec3 v) { _OPENPARENTHESIS DrawInt(v.x); _COMMA DrawInt(v.y); _COMMA DrawInt(v.z); _CLOSEPARENTHESIS }\nvoid DrawIntVec4(ivec4 v) { _OPENPARENTHESIS DrawInt(v.x); _COMMA DrawInt(v.y); _COMMA DrawInt(v.z); _COMMA DrawInt(v.w); _CLOSEPARENTHESIS }\n\nvoid DrawUIntVec2(uvec2 v) { _OPENPARENTHESIS DrawUInt(v.x); _COMMA DrawUInt(v.y); _CLOSEPARENTHESIS }\nvoid DrawUIntVec3(uvec3 v) { _OPENPARENTHESIS DrawUInt(v.x); _COMMA DrawUInt(v.y); _COMMA DrawUInt(v.z); _CLOSEPARENTHESIS }\nvoid DrawUIntVec4(uvec4 v) { _OPENPARENTHESIS DrawUInt(v.x); _COMMA DrawUInt(v.y); _COMMA DrawUInt(v.z); _COMMA DrawUInt(v.w); _CLOSEPARENTHESIS }\n\nvoid DrawFloatVec2(vec2 v) { _OPENPARENTHESIS DrawFloat(v.x); _COMMA DrawFloat(v.y); _CLOSEPARENTHESIS }\nvoid DrawFloatVec3(vec3 v) { _OPENPARENTHESIS DrawFloat(v.x); _COMMA DrawFloat(v.y); _COMMA DrawFloat(v.z); _CLOSEPARENTHESIS }\nvoid DrawFloatVec4(vec4 v) { _OPENPARENTHESIS DrawFloat(v.x); _COMMA DrawFloat(v.y); _COMMA DrawFloat(v.z); _COMMA DrawFloat(v.w); _CLOSEPARENTHESIS }\n\n// examples\nvoid DrawABC()\n{\n\t_A _B _C\n}\n\nvoid DrawABC_0123()\n{\n\tDrawABC(); _SPACE _0 _1 _2 _3\n}\n\nvoid DrawHelloWorld()\n{\n\t_H _e _l _l _o _SPACE _W _o _r _l _d _STARSYMBOL\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv = fragCoord/iResolution.xy;\n\n\t// Time varying pixel color\n\tvec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n\tfragColor = vec4(col,1);\n\n\tFontInit(fragCoord/iResolution.y);\n\n\tfor (int shadow = 1; shadow >= 0; shadow--) {\n\t\tvec4 color = bool(shadow) ? vec4(0,0,0,0.5) : vec4(1);\n\t\tfloat off = bool(shadow) ? 0.1 : 0.0;\n\n\t\tFontSetPositionf(off, off);\n\t\tFontSetColor(color);\n\t\tDrawABC_0123();\n\n\t\tFontSetPositionf(off, 1.0 + off);\n\t\tFontSetColor(color);\n\t\tDrawABC();\n\n\t\tfloat mx = 2000.0*iMouse.x/iResolution.x;\n\t\tfloat my = -1.0 + 2.0*iMouse.y/iResolution.y;\n\t\t_SPACE _x _EQUALSIGN DrawFloatDigits(mx, 5U);\n\t\t_SPACE _y _EQUALSIGN DrawFloat(my);\n\t\t_SPACE _y _PARENTHESIS(_r _o _u _n _d) _EQUALSIGN DrawFloatDigits(my, 1U);\n\n\t\tFontRender(iChannel0, fragColor.rgb);\n\t}\n\n\tFontSetPosition(1, 2);\n\tFontSetColor(vec4(0.5,1,0.5,1));\n\tDrawABC();\n\n\tFontSetPosition(0,FONT_ROWS - 1);\n\tDrawHelloWorld();\n\n\tFontRender(iChannel0, fragColor.rgb);\n}","name":"Image","description":"","type":"image"}]}