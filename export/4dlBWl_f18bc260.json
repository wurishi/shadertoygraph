{"ver":"0.1","info":{"id":"4dlBWl","date":"1498809706","viewed":994,"name":"Sobel operator","username":"Zabidon","description":"This is a yet another Sobel operator implementation.","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["sobel","edgedetection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: Do What The F**k You Want To But It's Not My Fault Public License v1 (WTFNMFPL-1.0)\n// Created by Osipov Kirill --- zabidon, KirillD503\n\n#define THRESHOLD 0.2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    mat3 sobel[2];\n    sobel[0] = mat3(\n        -1,-2,-1,\n         0, 0, 0,\n         1, 2, 1\n    );\n    sobel[1] = mat3(\n        -1, 0, 1,\n        -2, 0, 2,\n        -1, 0, 1\n    );\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 value = vec2(0);\n\n    for (int mat_id = 0; mat_id < 2; mat_id++) {\n        for (int i = 0; i < 3; i++){\n            for (int j = 0; j < 3; j++){\n              vec2 offset = vec2(i - 1, j - 1) / iResolution.xy;\n              float kernel = sobel[mat_id][i][j];\n              vec4 color = texture(iChannel0, uv + offset);\n              float luma = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n\n              value[mat_id] += luma * kernel;\n            }\n        }\n    }\n    \n    fragColor = step(THRESHOLD, length(value)) * vec4(vec3(length(value)), 1.0);\n\n    // mix+step is faster than if-else\n    //fragColor = mix(\n    //    vec4(vec3(length(value)), 1.0), \n    //    vec4(0), \n    //    step(length(value), THRESHOLD));\n\n}","name":"Image","description":"","type":"image"}]}