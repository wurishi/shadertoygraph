{"ver":"0.1","info":{"id":"mtVGDd","date":"1684918419","viewed":24,"name":"Basic patterns 3 - atan","username":"rafaelbeckel","description":"Some of the basic patterns I've got from Char Stiles:\nhttps://www.youtube.com/watch?v=0kcbWQg99TA\n\nBasic Patterns 1 - sin & mod: https://www.shadertoy.com/view/dtVGDt\nBasic patterns 2 - Polar Coords: https://www.shadertoy.com/view/mtVGDt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["atan","basics"],"hasliked":0,"parentid":"mtVGDt","parentname":"Basic patterns 2 - Polar Coords"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Check Basic Patterns 1: https://www.shadertoy.com/view/dtVGDt\n    vec2 normCoord = fragCoord/iResolution.xy;\n    vec2 uv = -1. + 2. * normCoord;\n    float time = iTime/2.;\n    \n    // Check Basic patterns 2: https://www.shadertoy.com/view/mtVGDt\n    uv.x *= iResolution.x/iResolution.y;\n    float radius = length(uv);\n    float rings = sin(time - radius * 5.);\n    \n    // the red channel is mapped to the \n    // rings created in the last shader.\n    float r = rings;\n    \n    // green is mapped to the raw atan function.\n    // The atan() function in GLSL is actually atan2.\n    // It flips over one of sides so it creates this\n    // circular gradient with only one discontinuity.\n    float g = atan(uv.x, uv.y);\n    \n    // You can use this shader by @etale_cohomology\n    // to compare the outcomes of atan functions:\n    // https://www.shadertoy.com/view/4dSBDh\n    \n    // We can create a radar-like effect by injecting\n    // the atan function into the sin function and \n    // adding or subtracting time to make it spin.\n    float b = sin(atan(uv.x,uv.y) + time);\n\n    // Output color to screen\n    fragColor = vec4(r, g, b, 1.);\n}","name":"Image","description":"","type":"image"}]}