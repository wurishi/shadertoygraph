{"ver":"0.1","info":{"id":"wlXyz7","date":"1591670265","viewed":121,"name":"Particle Movement Test","username":"zhilichen","description":"Particle Movement Test","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 cam_origin;\nmat3 cam_rotation;\nvec2 frag_coord;\nfloat time=0.0;\n\nvec3 rotateX(float a, vec3 v)\n{\n\treturn vec3(v.x, cos(a) * v.y + sin(a) * v.z, cos(a) * v.z - sin(a) * v.y);\n}\n\nvec3 rotateY(float a, vec3 v)\n{\n\treturn vec3(cos(a) * v.x + sin(a) * v.z, v.y, cos(a) * v.z - sin(a) * v.x);\n}\n\n\nfloat orbIntensity(vec3 p)\n{\n\tif(length(p) < 4.0)\n\t\treturn 1.0;\n\t\n\treturn smoothstep(0.25, 1.0, cos(p.x * 10.0) * sin(p.y * 5.0) * cos(p.z * 7.0)) * 0.2 *\n\t\t\t\tstep(length(p), 17.0);\n}\n\nvec3 project(vec3 p)\n{\n\t// transpose the rotation matrix. unfortunately tranpose() is not available.\n\tmat3 cam_rotation_t = mat3(vec3(cam_rotation[0].x, cam_rotation[1].x, cam_rotation[2].x),\n\t\t\t\t\t\t\t   vec3(cam_rotation[0].y, cam_rotation[1].y, cam_rotation[2].y),\n\t\t\t\t\t\t\t   vec3(cam_rotation[0].z, cam_rotation[1].z, cam_rotation[2].z));\n\t\n\t// transform into viewspace\n\tp = cam_rotation_t * (p - cam_origin);\n\t\n\t// project\n\treturn vec3(p.xy / p.z, p.z);\n}\n\nfloat orb(float rad, vec3 coord)\n{\n\treturn 1.0 - smoothstep(0.5, 0.55, distance(coord.xy, frag_coord) / rad);\n}\n\nfloat orbShadow(float rad, vec3 coord)\n{\n\treturn 1.0 - smoothstep(0.4, 1.1, distance(coord.xy, frag_coord) / rad) *\n\t\tmix(1.0,0.99,orb(rad,coord));\n}\n\nvec3 traverseUniformGrid(vec3 ro, vec3 rd)\n{\n\tvec3 increment = vec3(1.0) / rd;\n\tvec3 intersection = ((floor(ro) + round(rd * 0.5 + vec3(0.5))) - ro) * increment;\n\n\tincrement = abs(increment);\n\tro += rd * 1e-3;\n\t\n\tvec4 accum = vec4(0.0,0.0,0.0,1.0);\n\t\n\t// traverse the uniform grid\n\tfor(int i = 0; i < 40; i += 1)\n\t{\n\t\tvec3 rp = floor(ro + rd * min(intersection.x, min(intersection.y, intersection.z)));\n\t\t\n\t\tfloat orb_intensity = orbIntensity(rp);\n\n\t\tif(orb_intensity > 1e-3)\n\t\t{\n\t\t\t// get the screenspace position of the cell's centerpoint\t\t\t\t\t\t\t\t\t\t   \n\t\t\tvec3 coord = project(rp + vec3(0.5));\n\t\t\t\n\t\t\tif(coord.z > 1.0)\n\t\t\t{\n\t\t\t\t// calculate the initial radius\n\t\t\t\tfloat rad = 0.55 / coord.z;// * (1.0 - smoothstep(0.0, 50.0, length(rp)));\n\t\t\t\t\n\t\t\t\t// adjust the radius\n\t\t\t\trad *= 1.0 + 0.5 * sin(rp.x + time * 1.0) * cos(rp.y + time * 2.0) * cos(rp.z);\n\t\t\t\t\n\t\t\t\tfloat dist = distance(rp + vec3(0.5), ro);\n\t\t\t\t\n\t\t\t\tfloat c = smoothstep(1.0, 2.5, dist);\n\t\t\t\tfloat a = orb(rad, coord) * c;\n\t\t\t\tfloat b = orbShadow(rad, coord) * c;\n\t\t\t\t\n\t\t\t\taccum.rgb += accum.a * a * 1.5 *\n\t\t\t\t\tmix(vec3(1.0), vec3(0.4, 1.0, 0.5) * 0.5, 0.5 + 0.5 * cos(rp.x)) * exp(-dist * dist * 0.008);\n\n\t\t\t\taccum.a *= 1.0 - b;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// step to the next ray-cell intersection\n\t\tintersection += increment * step(intersection.xyz, intersection.yxy) *\n\t\t\t\t\t\t\t\t\tstep(intersection.xyz, intersection.zzx);\n\t}\n\t\n\t// background colour\n\taccum.rgb += accum.a * vec3(0.02);\n\n\treturn accum.rgb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// get the normalised device coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfrag_coord = uv * 2.0 - vec2(1.0);\n\tfrag_coord.x *= iResolution.x / iResolution.y;\n\n\t// defined the time interval for this frame\n\tfloat time0=iTime,time1=time0+0.04;\n\t\n\tfloat jitter=texture(iChannel0,uv*iResolution.xy/256.0).r;\n\t\n\tfragColor.rgb = vec3(0.0);\n\t\t\n\tfor(int n=0;n<4;n+=1)\n\t{\n\t\ttime=mix(time0,time1,(float(n)+jitter)/4.0)*0.7;\n\t\t\n\t\tcam_origin = rotateX(time * 0.3,\n\t\t\t\t\t\t\t rotateY(time * 0.5, vec3(0.0, 0.0, -10.0)));\n\t\t\n\t\t// calculate the rotation matrix\n\t\tvec3 cam_w = normalize(vec3(cos(time) * 10.0, 0.0, 0.0) - cam_origin);\n\t\tvec3 cam_u = normalize(cross(cam_w, vec3(0.0, 1.0, 0.0)));\n\t\tvec3 cam_v = normalize(cross(cam_u, cam_w));\n\t\t\n\t\tcam_rotation = mat3(cam_u, cam_v, cam_w);\n\t\t\n\t\tvec3 ro = cam_origin,rd = cam_rotation * vec3(frag_coord, 1.0);\n\t\n\t\t// render the particles\n\t\tfragColor.rgb += traverseUniformGrid(ro, rd);\n\t}\n\t\n\t// good old vignet\n\tfragColor.rgb *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n\n\tfragColor.rgb = sqrt(fragColor.rgb / 4.0 * 0.8);\n}\n","name":"Image","description":"","type":"image"}]}