{"ver":"0.1","info":{"id":"lf33Rn","date":"1711292435","viewed":124,"name":"TraceMoveTest","username":"Numbfish","description":"trace move test","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["test","trace","move"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat Circle(vec2 uv, vec2 o, float r) {\n    return smoothstep(0.0, 1.5 / iResolution.y, r - length(o - uv));\n}\n\nfloat Line(vec2 uv, vec2 a, vec2 b, float w) {\n    vec2 c = b - a;\n    float k = min(c.y / c.x, 1e11);\n    return smoothstep(0.0, 1.5 / iResolution.y, w - abs(k * (uv.x - a.x) - uv.y + a.y) / sqrt(k * k + 1.0));\n}\n\nfloat LineSegment(vec2 uv, vec2 a, vec2 b, float w) {\n    return Line(uv, a, b, w) * smoothstep(-0.25 / iResolution.y, 0.0, dot(uv - a, b - a)) * smoothstep(-0.25 / iResolution.y, 0.0, dot(uv - b, a - b));\n}\n\nvec2 Rotate(vec2 uv, float a) {\n    return mat2(cos(a), sin(a), -sin(a), cos(a)) * uv;\n}\n\nfloat Arrow(vec2 uv, vec2 o, vec2 s, float w, float a) {\n    vec2 lu = o + Rotate(vec2(-s.x, s.y * 0.5), a);\n    vec2 ld = o - Rotate(vec2(s.x, s.y * 0.5), a);\n    vec2 l = o - Rotate(vec2(s.x * 0.5, 0.0), a);\n    vec2 ll = o - Rotate(vec2(s.x * 1.5, 0.0), a);\n    return\n        LineSegment(uv, lu, o, w) +\n        LineSegment(uv, ld, o, w) +\n        LineSegment(uv, lu, l, w) +\n        LineSegment(uv, ld, l, w) +\n        LineSegment(uv, ll, l, w * 1.0);\n}\n\nfloat CosLine(vec2 a, vec2 b, float t) {\n    return 0.5 * (a.y - b.y) * (cos(PI * t) - 1.0) + a.y;\n}\n\nfloat CosLineAngle(vec2 a, vec2 b, float t) {\n    return atan(0.5 * PI * (b.y - a.y) / (b.x - a.x) * sin(PI * t));\n}\n\nfloat CosLineSegment(vec2 uv, vec2 a, vec2 b, float w) {\n    float v = 0.5 * (a.y - b.y) * (cos(PI * (uv.x - a.x) / (b.x - a.x)) - 1.0) + a.y - uv.y;\n    return smoothstep(1.5 + w, w, abs(v) / fwidth(v)) * step(a.x, uv.x) * step(uv.x, b.x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    const int n = 6;\n    const float fn = float(n);\n    vec2 p[n] = vec2[n](\n        vec2(-0.6, -0.3),\n        vec2(-0.2, 0.1),\n        vec2(0.0, -0.1),\n        vec2(0.2, 0.2),\n        vec2(0.4, -0.2),\n        vec2(0.6, 0.0)\n    );\n    vec3 c[n] = vec3[n](\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, 1.0, 0.0),\n        vec3(0.0, 0.0, 1.0),\n        vec3(1.0, 1.0, 0.0),\n        vec3(1.0, 0.0, 1.0),\n        vec3(0.0, 1.0, 1.0)\n    );\n    vec3 col = vec3(0.0);\n    for (int i = 0; i < n; ++i) {\n        col += Circle(uv, p[i], 0.02) * c[i];\n    }\n    float t = iTime * 0.5;\n    t = t - floor(t / (fn - 1.0)) * (fn - 1.0);\n    float dt = t - floor(t);\n    vec2 pa = p[int(t)];\n    vec2 pb = p[min(int(t) + 1, n - 1)];\n    \n    // linear\n    for (int i = 1; i < n; ++i) {\n        col += LineSegment(uv, p[i - 1], p[i], 0.004) * vec3(0.5, 0.0, 0.0);\n    }\n    vec2 pc = pb - pa;\n    float a = atan(pc.y, pc.x);\n    col += Arrow(uv, mix(pa, pb, dt), vec2(0.08), 0.004, a) * vec3(1.0, 0.0, 0.0);\n    \n    // cos line\n    for (int i = 1; i < n; ++i) {\n        col += CosLineSegment(uv, p[i - 1], p[i], 0.5) * vec3(0.0, 0.5, 0.0);\n    }\n    col += Arrow(uv, vec2(mix(pa.x, pb.x, dt), CosLine(pa, pb, dt)), vec2(0.08), 0.004, CosLineAngle(pa, pb, dt)) * vec3(0.0, 1.0, 0.0);\n    \n    fragColor = vec4(col.xyz, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}