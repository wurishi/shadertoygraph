{"ver":"0.1","info":{"id":"DtGcDK","date":"1700738920","viewed":35,"name":"pot test wangqy","username":"wangqiuyan","description":"try to make a pan pot","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["study"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://dribbble.com/shots/20639944-3d-illustration\n\n// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\n\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat sdCone(vec3 p, vec3 a, vec3 b, float ra, float rb,float r)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) )-r;\n}\nfloat sdPanPot(vec3 p)\n{    \n    return length(vec2(length(p.xy)-0.3,p.z))-0.06;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float f)\n{\n    vec3 ab=b-a;\n    vec3 ap=p-a;\n    \n    float t=dot(ab,ap)/dot(ab,ab);\n   // t=clamp(t,0.,1.);\n    \n    vec3 c = a + t * ab;\n    \n    vec3 cp=p-c;\n    float x= length(cp)-f;\n    float y = (abs(t-0.5)-0.5)*length(ab);\n    float e=length(max(vec2(x,y),0.0));\n    return e;\n    \n}\n\nfloat GetDist(vec3 p) {\n    float d = sdBox(p, vec3(1));\n    d= sdCone(p, vec3(0.4,-0.4,0), vec3(0.4,0.0,0), 1.15, 1.25,0.06 );\n    float cone2=sdCone(p, vec3(0.4,-0.39,0), vec3(0.4,0.55,0), 1.15, 1.22,0. );\n    d=max(d,-cone2);\n    \n    float cap=sdCylinder(p,vec3(-0.8,-0.2,0),vec3(-1.8,-0.18,0),0.21);\n    //d=min(d,cap);\n    \n   \n   // d=sdPanPot(p);\n    return d;\n}\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\nvec2 map(vec3 p)\n{\n    float d= sdCone(p, vec3(0.4,-0.4,0), vec3(0.4,0.0,0), 1.15, 1.25,0.06 );\n    float cone2=sdCone(p, vec3(0.4,-0.335,0), vec3(0.4,0.111,0), 1.0, 1.2,0. );\n    //   d = opSmoothSubtraction(d,cone2, 0.25);\n   // d = opSmoothUnion(d,cone2, 0.25);\n    d=opSmoothSubtraction(cone2,d,0.25);\n   // d=opSmoothIntersection(cone2,d,0.25);\n    //d=max(d,-cone2);\n    vec2 res=vec2(d,1);\n    \n    float cap=sdCylinder(p,vec3(-0.8,-0.2,0),vec3(-1.8,-0.18,0),0.21);\n    res=opU(res,vec2(cap,2));\n    return res;\n  \n}\n\nvec3 Bg(vec3 rd)\n{\n    float k=rd.y*0.5+0.5;\n    return mix(vec3(235.,208.,163.)/255.,vec3(234.,203.,159.)/255.,k);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    vec2 res=vec2(-1);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 h = map(p);\n        float dS = h.x;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) \n        {\n            res.x=dO;\n            res.y=h.y;\n        }\n    }    \n    return res;\n}\n\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 ro, vec3 lookat, float zoom) {\n    vec3 \n        f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*zoom,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{   \n\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<24; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        float s = clamp(8.0*h/t,0.0,1.0);\n        res = min( res, s );\n        t += clamp( h, 0.01, 0.2 );\n        if( res<0.004 || t>tmax ) break;\n    }\n    res = clamp( res, 0.0, 1.0 );\n    return res*res*(3.0-2.0*res);\n}\n\n// https://iquilezles.org/articles/nvscene2008/rwwtt.pdf\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI*1.+1.);\n    ro.xz *= Rot(-m.x*TAU*2.);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n    col+=Bg(rd);\n    \n    \n    vec2 res = RayMarch(ro, rd);\n    \n    float d=res.x;\n    float mt=res.y;\n\n   // vec3 ddddd=vec3(14,16,66)/255.;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        // material        \n        vec3 colour = 0.2 + 0.2*sin( mt*2.0 + vec3(0.0,1.0,2.0) );\n        float ks = 1.0;\n        vec3 lin = vec3(0.0);\n        // lighting\n        float occ = calcAO( p, n );\n        // sun        \n        {\n            vec3  lig = normalize( vec3(1,1,-0.5) );\n            vec3  hal = normalize( lig-rd );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n          //if( dif>0.0001 )\n        \t      dif *= calcSoftshadow( p, lig, 0.02, 2.5 );\n\t\t\tfloat spe = pow( clamp( dot( n, hal ), 0.0, 1.0 ),16.0);\n                  spe *= dif;\n                 // spe *= 0.04+0.96*pow(clamp(1.0-dot(hal,lig),0.0,1.0),5.0);\n                spe *= 0.04+0.96*pow(clamp(1.0-sqrt(0.5*(1.0-dot(rd,lig))),0.0,1.0),5.0);\n            lin += colour*2.20*dif*vec3(1.30,1.00,0.70);\n            lin +=     5.00*spe*vec3(1.30,1.00,0.70)*ks;\n        }\n        // sky\n        {\n            float dif = sqrt(clamp( 0.5+0.5*n.y, 0.0, 1.0 ));\n                  dif *= occ;\n            float spe = smoothstep( -0.2, 0.2, r.y );\n                  spe *= dif;\n                  spe *= 0.04+0.96*pow(clamp(1.0+dot(n,rd),0.0,1.0), 5.0 );\n          //if( spe>0.001 )\n                  spe *= calcSoftshadow( p, r, 0.02, 2.5 );\n           lin += colour*0.60*dif*vec3(0.40,0.60,1.15);\n           lin +=     2.00*spe*vec3(0.40,0.60,1.30)*ks;\n        }\n        col = lin;\n        /*\n        float dif = dot(n,normalize(vec3(1,2,0)))*.5+.5;\n        if(mt==1.)\n        {\n             col = mix(Bg(rd),vec3(dif),0.8)*vec3(14,16,66)/255.+max(0.1,pow(dot(r,normalize(vec3(0.5,-0.5,0))),3.0))*vec3(1.0,1.0,0.8);\n        }\n        else\n        {\n             col = mix(Bg(rd),vec3(dif),-1.0)*vec3(14,16,66)/255.;\n        }\n        */\n       \n    }\n    \n    \n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}