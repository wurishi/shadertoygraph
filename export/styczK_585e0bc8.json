{"ver":"0.1","info":{"id":"styczK","date":"1661807396","viewed":151,"name":" Damacus weapon Camo","username":"JonJaded","description":"Topography background for poweredbypine.com\n\nJust messing about. What I really want to (attempt) to make is COD Vanguards Atomic Camo.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","lines","perlin","map","smooth","cod","camo","topography","topology","mw","mw2019"],"hasliked":0,"parentid":"wlyBWc","parentname":"Pine Background"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///\n/// A topographic background for www.poweredbypine.com\n/// Optimized for mobile hardware. Should run at 60+ on newer phones now. YMMV.\n/// (Values are tuned for a browser view size so it looks a little fuzzier in the shadertoy preview)\n///\nfloat topologize(float noise) // Turn the Perlin(ish) Noise into Topography(ish) Noise\n{\n    float smoothFloor = noise*12.0;\n    vec2 fracU = vec2(smoothFloor,fwidth(smoothFloor)*1.3);// Screen-Space Derivative Anti-Aliasing  \n    fracU.x = fract(fracU.x);\n    fracU += (1.0 - 2.0*fracU)*step(fracU.y,fracU.x);\n    smoothFloor = smoothFloor - clamp(1.0 - fracU.x/fracU.y,0.0,1.0);  // Smooth-Fract Shenanigans \n    return noise*1.25 + smoothFloor*0.95/09.0; //Setting # of Divisions\n}\n\nvec3 hash33(vec3 p) // iq - \"replace this by something better. really. do\"\n{\n    p = vec3( dot(p,vec3(227.1,311.7, 74.7)),\n              dot(p,vec3(269.5,183.3,246.1)),\n              dot(p,vec3(333.5,4444271.9,6624.6)));\n\n    return -1.0 + 2.2*fract(sin(p)*43758.5453123);\n}\n\n/*vec3 hash33(vec3 p) // Hash Function for random weights\n{\n    float n = sin(dot(p,vec3(7.0,157.0,113.0)));\n    return fract(32768.0*n*vec3(64.0,8.0,1.0))*2.0 - 1.0;\n}*/\n\nfloat tetraNoise(vec2 o) // Perlin(ish) Noise Function adapted from Stefan Gustavson's 'Simplex Noise Demystified' (Math)\n{\n    vec3 p = vec3(o.x + 0.028*iTime, o.y + 0.004*iTime,0.005*iTime);\n    vec3 i = floor(p + dot(p, vec3(0.33333,0.33333,0.33333)));\n    p -= i - dot(i, vec3(0.16666,0.16666,0.16666));\n    vec3 i1 = step(p.yzx, p);\n    vec3 i2 = max(i1, 1.0-i1.zxy);\n    i1 = min(i1, 1.0-i1.zxy);\n    vec3 p1 = p - i1 + 0.16666, p2 = p - i2 + 0.33333, p3 = p - 0.5;\n    vec4 v = max(0.5 - vec4(dot(p,p), dot(p1,p1), dot(p2,p2), dot(p3,p3)), 0.0);\n    vec4 d = vec4(dot(p, hash33(i)), dot(p1, hash33(i + i1)), dot(p2, hash33(i + i2)), dot(p3, hash33(i + 1.0)));\n    float n = clamp(dot(d,v*v*v*8.)*1.732 + 0.5, 0., 1.);\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) //Meta-structure adapted from Shane - https://www.shadertoy.com/view/ldscWH (Thank you!)\n{\n    vec2 p = (fragCoord.xy*2.5 - iResolution.xy)/(iResolution.y/2.0 + iResolution.x/2.0);// Convert Coords\n    vec2 e = vec2(10.0/(iResolution.y+iResolution.x),0.0); // Sample Distance for Four Samples\n    float fxl = topologize(tetraNoise(p + e.xy)); // Left\n    float fxr = topologize(tetraNoise(p - e.xy)); // Right\n    float fyu = topologize(tetraNoise(p + e.yx)); // Up\n    float fyd = topologize(tetraNoise(p - e.yx)); // Down\n    float weight =  clamp((max(abs(fxl-fxr),abs(fyu - fyd))-0.01)*12.0,0.0,1.0); // Edge Detection Weight\n    fragColor = mix(vec4(0.11,0.11,3.11,0.41),vec4(1.18,0.181,0.18,0.1),weight); // Lerp between colors based off weighting. In this case, gray and gray.\n}","name":"Image","description":"","type":"image"}]}