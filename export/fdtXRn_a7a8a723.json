{"ver":"0.1","info":{"id":"fdtXRn","date":"1632498515","viewed":235,"name":"Sine Wave Tiling","username":"fizzer","description":"A very simple tiling based on a tiling of equilateral triangles but using sine waves as the tile edges.\nInspired by [url=https://www.shadertoy.com/view/fdy3Rt]this one[/url].","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["sine","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float amplitude = .06;\nconst float triEdgeLength = .3;\nconst float triHeight = sqrt(triEdgeLength * triEdgeLength * .75);\nconst vec2 v = vec2(-.5, sqrt(.75));\nconst float pi = 3.14159265358979323;\nconst float lineWidth = .003;\n\nfloat sineDist(float x, float y, float f, float a)\n{\n    float s = sin(x * f), fa = f * a;\n    return abs(y - s * a) / sqrt((1. - s * s) * fa * fa + 1.);\n}\n\nvec2 waves(vec2 uv)\n{\n    float s = mod(floor(uv.y / triHeight - .5), 2.) * 2. - 1.;\n    float w = sin(uv.x / triEdgeLength * pi * 2.) * amplitude * s;\n    return vec2(floor(uv.y / triHeight - w / triHeight), sineDist(uv.x, mod(uv.y + triHeight / 2., triHeight) -\n            triHeight / 2., s / triEdgeLength * pi * 2., amplitude));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy / 2. - iMouse.xy) / iResolution.y * 1.2;\n\n    uv = vec2(dot(uv, vec2(v.y, v.x)), dot(uv, vec2(v.x, -v.y)));\n\n    float pixelFootprint = length(fwidth(uv)) * .3;\n\n    vec2 w0 = waves(uv);\n    vec2 w1 = waves(vec2(dot(uv, v), dot(uv, vec2(-v.y, +v.x))));\n    vec2 w2 = waves(vec2(dot(uv, vec2(-v.x, v.y)), dot(uv, vec2(-v.y, -v.x))));\n\n    float dist = min(min(w0.y, w1.y), w2.y);\n\n    float id = w0.x + w1.x * 2. + w2.x * 4.;\n    float alpha = 1. - smoothstep(-pixelFootprint, +pixelFootprint, dist - lineWidth);\n\n    vec3 col = mix((vec3(cos(id * 9.), .5, cos(id * 4.5 + 1.2)) * .45 + .55) * .95, vec3(.01), alpha);\n\n    col = mix(col, vec3(.99), smoothstep(0., pixelFootprint * 2., dist - lineWidth - .025));\n\n    fragColor = vec4(pow(col, vec3(1. / 2.2)), 1.);\n}","name":"Image","description":"","type":"image"}]}