{"ver":"0.1","info":{"id":"MtVGzR","date":"1472840728","viewed":591,"name":"bounding shape","username":"andro","description":"A 2D slice of a distance function using bounding shapes to deal with modulo and random cell contents","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["boundingshape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash( float n ) { return fract(sin(n)*753.5453123); }\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    uv *= 3.0;\n    vec2 c = floor(uv + 0.5);\n    vec2 p = fract(uv + 0.5) - 0.5;\n    float r = hash(c.x) * hash(c.y + 100.0);\n    float s;\n    if(r<0.5)\n        s = 0.0;\n    else\n       \ts = 0.25;\n    float d3 = length(p)-s;\n    vec2 q = abs(p) - 0.66;\n    float d = -max(q.x, q.y);\n    d = min(d, d3);\n    float d2 = abs(sin(d * 50.0));\n\tfragColor = vec4(sign(d) * 0.5 + d2 * 0.5);\n}","name":"Image","description":"","type":"image"}]}