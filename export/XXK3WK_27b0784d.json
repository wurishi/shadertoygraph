{"ver":"0.1","info":{"id":"XXK3WK","date":"1718247150","viewed":70,"name":"bridge to nowhere","username":"milesd","description":"not rly sure what im doing here. chatgpt gave me something decent and then i made it worse. then i made it better","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","bridge","nowhere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy code\nfloat map(vec3 p)\n{\n    float d = 1e10;\n    for(int x = -5; x <= 7; x++)\n    {\n        for(int y = -5; y <= 4; y++)\n        {\n            vec3 q = p - vec3(float(x), 0.0, float(y));\n            float h = 0.5 + 0.5 * sin(float(x + y*y) + iTime * 2.0); // height varying with time\n            vec3 b = vec3(0.45+0.2*sin(iTime), h, 0.45); // half extents of the rectangle\n            vec3 dBox = max(abs(q) - b, 0.0);\n            d = min(d, length(dBox)); // distance to the rectangle\n        }\n    }\n    return d;\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for(int i = 0; i < 100; i++)\n    {\n        vec3 p = ro + t * rd;\n        float d = map(p);\n        if(d < 0.001) return t;\n        t += d;\n        if(t > 100.0) break;\n    }\n    return -1.0;\n}\n\nvec3 getNormal(vec3 p)\n{\n    float eps = 0.021;\n    vec3 n;\n    n.x = map(p + vec3(eps, 0.0, 0.0)) - map(p - vec3(eps, 0.0, 0.0));\n    n.y = map(p + vec3(0.0, eps, 0.0)) - map(p - vec3(0.0, eps, 0.0));\n    n.z = map(p + vec3(0.0, 0.0, eps)) - map(p - vec3(0.0, 0.0, eps));\n    return normalize(n);\n}\n\nvec3 getColor(vec3 p)\n{\n    return vec3(0.3, 0.7, 1.0) * (0.5 + 0.5 * p.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3(5.0, 5.0, -5.0); // Camera position higher and farther back\n    vec3 lookAt = vec3(1.0, 1.0, 0.0);\n    vec3 rd = normalize(lookAt - ro); // Ray direction looking at 45-degree angle\n\n    // Create a rotation matrix to look at a 45-degree angle\n    float angle = radians(45.0 + 18.0*sin(iTime*0.5));\n    mat3 rot = mat3(\n        cos(angle), 0.0, sin(angle),\n        0.0, 1.0, 0.0,\n        -sin(angle), 0.0, cos(angle)\n    );\n\n    rd = rot * rd;\n    rd = normalize(rd + vec3(uv, 0.0)); // Adjust ray direction with uv\n\n    float time = iTime * 0.5;\n\n    vec3 lightDir = normalize(vec3(1.0, 1.0, -1.0));\n\n    float t = 0.0;\n    for(int i = 0; i < 100; i++)\n    {\n        vec3 p = ro + t * rd;\n        float d = map(p);\n        if(d < 0.001 || t > 100.0) break; // Limit draw distance to 100 units\n        t += d;\n    }\n\n    if(t < 100.0)\n    {\n        vec3 p = ro + t * rd;\n        vec3 normal = getNormal(p);\n        vec3 color = getColor(p);\n        float diffuse = max(dot(normal, lightDir), 0.0);\n        fragColor = vec4(color * diffuse, 1.0);\n    }\n    else\n    {\n        fragColor = vec4(0.1, 0.1, 0.2, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}