{"ver":"0.1","info":{"id":"stdcDn","date":"1659618357","viewed":109,"name":"Pseudo Contrast map to alpha","username":"kamathln","description":"Given a radius, takes the difference between maximum and minimum of all the pixels in the radius and assigns it to alpha. Builds upon the Gaussian blur example. Play with the settings.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["contrast","alpha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pseudo Contrast alpha map with Gaussian Curve sampler \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 32.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Size = 8.0; // BLUR SIZE (Radius)\n    float Quality = Size/6.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    vec4 Color = texture(iChannel0, uv);\n    vec4 outColor = texture(iChannel0, uv);\n    \n    float MaxBlue = 0.0;\n    float MaxGreen = 0.0;\n    float MaxRed = 0.0;\n    \n    float MinBlue = 255.0;\n    float MinGreen = 255.0;\n    float MinRed = 255.0;\n    \n    float alpha = 1.0;\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=0.0; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor = texture( iChannel0, uv + vec2(cos(d),sin(d))*Radius*i);\n            MinRed = min(MinRed,Color.r);\n            MinGreen = min(MinGreen, Color.g);\n            MinBlue = min(MinBlue, Color.b);\n            MaxRed = max(MaxRed, Color.r);\n            MaxGreen = max(MaxGreen, Color.g);\n            MaxBlue = max(MaxBlue, Color.b);\n        }\n    }\n    \n    // Output to screen\n    outColor = vec4(MaxRed - MinRed, MaxGreen - MinGreen, MaxBlue - MinBlue, alpha);\n    alpha = (outColor.r + outColor.g + outColor.b)/(3.0);\n    \n    fragColor =  vec4(Color.r * alpha, Color.g * alpha, Color.b* alpha, 1.0);\n // fragColor =  vec4((Color.r * alpha) + (Color2.r * (1.0 - alpha))  , (Color.g * alpha) + (Color2.g * (1.0 - alpha)), (Color.b* alpha) + (Color2.b * (1.0 - alpha)), 1.0);\n} \n","name":"Image","description":"","type":"image"}]}