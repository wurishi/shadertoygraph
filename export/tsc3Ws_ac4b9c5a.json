{"ver":"0.1","info":{"id":"tsc3Ws","date":"1569481755","viewed":115,"name":"Simplex Particles ","username":"FreddyDoll","description":"Particles moving along the gradient of a noise function. Not working very fast...\n","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["noise","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n\tfragColor += texture(iChannel1,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float cloudDensity = 1.0; \t// overall density [0,1]\nfloat noisiness = 0.35; \t// overall strength of the noise effect [0,1]\nfloat speed = 0.1;\t\t\t// controls the animation speed [0, 0.1 ish)\nfloat cloudHeight = 2.5; \t// (inverse) height of the input gradient [0,...)\n\n\n// Simplex noise below = ctrl+c, ctrl+v:\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n// Octaves\n#define OCTAVES 8\nfloat sNoiseOctaves(vec3 uv)\n{\n    float sum = 0.0;\n    float maximum = 0.0;\n    for (int i = 0; i < OCTAVES; ++i) {\n        float f = float(i+1);\n        maximum += 1.0/f;\n        sum += snoise(uv*f) / f;\n    }\n    return 0.5*sum/maximum+uv.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float q = sNoiseOctaves(vec3(uv,10.));\n\tfragColor = vec4(q,q,q, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float rand(float seed)\n{\n    return fract(sin(dot(vec2(seed,seed) ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n#define DIFF_OFFSET 0.001\nvec2 BufferADiff(vec2 uv)\n{\n    return vec2(\n        (texture(iChannel0,uv+vec2(-DIFF_OFFSET,0))-texture(iChannel0,uv+vec2(DIFF_OFFSET,0))).r/2./DIFF_OFFSET,\n         (texture(iChannel0,uv+vec2(0,-DIFF_OFFSET))-texture(iChannel0,uv+vec2(0,DIFF_OFFSET))).r/2./DIFF_OFFSET\n    );\n}\n\n\n#define PARTICLES 5\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    float rSeed = 0.;\n    \n    float q = texture(iChannel1,uv).r;\n    for(int n = 0;n<PARTICLES;n++)\n    {\n        float baseT = iTime/5.+float(n)/float(PARTICLES);\n    \tfloat t = fract(baseT);\n        vec2 pos = vec2((rand(rSeed+floor(baseT)*10.)+0.5)/1.5,rand(rSeed+2000.8+floor(baseT)*20.));\n        rSeed+=50000.;\n        vec3 p = vec3(uv, 10.);//iTime*speed);\n        for(float tPast = 0.;tPast<t;tPast+=0.01)\n        {\n\n            q += smoothstep(0.01,0.,length(uv-pos))*0.001;\n            pos += BufferADiff(pos)*0.005;\n        }\n    }\n        \n    //vec3 p = vec3(uv, t);//iTime*speed);\n    //float q = (sNoiseOctaves(p,8)+1.0)/2.0;\n\tfragColor = vec4(q,q,q, 1.0);\n}","name":"Buf B","description":"","type":"buffer"}]}