{"ver":"0.1","info":{"id":"DtSyWV","date":"1692271220","viewed":34,"name":"2D implicit equations (square)","username":"magnificaiterata","description":"Learning to plot 2D implicit equations (2D figures)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning","implicitequations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float computeSquare(vec2 pixel_coord, float side, float fuzziness)\n{\n    // ecuaci√≥n del cuadrado de lado \"side\" centrado en el origen\n    float eq = max(abs(pixel_coord.x),abs(pixel_coord.y)) - side/2.0;\n    \n    // clasificador binario de los puntos interiores y exteriores al cuadrado\n    // la frontera de ambos conjuntos define la figura del cuadrado\n    float val = smoothstep(0.0, 0.0+fuzziness, eq);\n    \n    return val;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) of view\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Origin displacement to center of view\n    uv -= 0.5;\n    \n    // Fix aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Compute square of side 0.3 normalized units in new coordinates origin\n    float side = 0.8;\n    float sq = computeSquare(uv, side, 0.01);\n    \n    // Backgound and Foreground colors\n    vec3 fg = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));// Time varying pixel color\n    vec3 bg = vec3(1.0, 1.0, 1.0); // white\n\n    // Output to screen\n    fragColor = vec4(mix(fg,bg,sq),1.0);\n}","name":"Image","description":"","type":"image"}]}