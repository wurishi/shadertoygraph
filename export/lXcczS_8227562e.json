{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"/*\nSame as the previous one but instead of using colours for positive\nand negative and linear light intensity it uses a perceptual scale\nwith 0 being middle grey so that the cosines have a more intuitive\nlook to them due to going from dark to bright instead of alternating\nbetween two colours.\n\nThis demonstrates how a Gaussian function can be created by\nadding together cosines of different frequencies when their intensity\nis proportional to the Gaussian of the cosine's frequency.\n\nEach cosine is represented visually as a band. They all add up\ntogether into one band which becomes a Gaussian function (albeit one\nthat repeats).\n*/\n\n\nfloat gaussian(float x)\n{\n\treturn exp(-x*x);\n}\n\nvec3 lsrgb(vec3 l)\t// converts a [0.0, 1.0] linear value into a [0.0, 1.0] sRGB value\n{\n\tvec3 line = l * 12.92;\n\tvec3 x = sqrt(l);\n\tvec3 curve = ((((0.455*x - 1.48)*x + 1.92137)*x - 1.373254)*x + 1.51733216)*x - 0.0404733783;\n\treturn mix(line, curve, greaterThan(l, vec3(0.0031308)));\n}\n\nvec3 Lab_L_to_linear(vec3 t)\n{\n\tconst float stn=6./29.;\n    \n    t = max(t, vec3(0.));\n\tt = (t+0.16) * (1./1.16);\n\n    vec3 seg0 = vec3(3.*stn*stn) * (t - vec3(4./29.));\n    vec3 seg1 = t*t*t;\n\treturn mix(seg0, seg1, greaterThan(t, vec3(stn)));\n}\n\nvec3 gamut_limiter(vec3 pv)\n{\n    // Find the maximum of the 3 channels\n    float vmax = max(pv.x, max(pv.y, pv.z));\n    \n    if (vmax > 1.)   // if the colour is out of gamut\n    {\n        // Luminosity of the colour's grey point\n        float L = 0.16*pv.x + 0.73*pv.y + 0.11*pv.z;\n\n\t\tif (L < 1.) // if the grey point is no brighter than white\n\t\t{\n\t\t\t// t represents the ratio on the line between the input colour\n\t\t\t// and its corresponding grey point. t is between 0 and 1,\n\t\t\t// a lower t meaning closer to the grey point and a\n\t\t\t// higher t meaning closer to the input colour\n\t\t\tfloat t = (1.-L) / (vmax-L);\n\n\t\t\t// a simple linear interpolation between the\n\t\t\t// input colour and its grey point\n            pv = mix(vec3(L), pv, t);\n\t\t}\n\t\telse    // if it's too bright regardless of saturation\n\t\t{\n\t\t\tpv = vec3(1.);\n\t\t}\n    }\n    \n    return pv;\n}\n\nfloat formula(float x, float y, float t, float iterations)\n{\n    float width = 0.18;\n    float i, v, off_y, sum = 0.;\n\n    // Loop through each frequency to add them together\n    for (i=0.; i < iterations; i += 1.)\n    {\n        // Calculate cosine with its amplitude proportional to the Gaussian of its frequency\n        v = cos(x*i) * gaussian(i*width);\n\n        // Double every non-zero frequency due to combining positive and negative frequencies\n        if (i != 0.)\n            v *= 2.;\n\n        // Make it a band\n        off_y = max(0., (i-t)*2.);\n        v *= gaussian((off_y-y)*2.9);\n\n        // Add it to sum\n        sum += v;\n    }\n\n    // Dim the sum\n    sum *= 0.1;\n\n    return sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{    \n    // Pixel to world coordinates\n    float scrscale = 8. / iResolution.y;\n    vec2 uv = (fragCoord-iResolution.xy*0.5) * scrscale;\n\n    float iterations = 14.;\n    float neg_dur = 0.7;\n    float t = mod(iTime*1.333, iterations+neg_dur) - neg_dur;\n\n    float v = formula(uv.x, uv.y+1., t, iterations);\n\n    float curve = formula(uv.x, 0., t, iterations);\n    curve = gaussian((curve - (uv.y+3.5))*70.);\n\n    // Pixel color\n    vec3 pv = vec3(0.2, 0.6, 3.) * vec3(curve);\n    pv += Lab_L_to_linear(vec3((1.+v)/2.));\n    fragColor = vec4(lsrgb(gamut_limiter(pv)), 1.);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lXcczS","date":"1735305024","viewed":91,"name":"Perceptual cos addition","username":"Michel_Rouzic","description":"See comment in the code","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["gaussian","fourier","graphingcalculator"],"hasliked":0,"parentid":"X33yWN","parentname":"Adding cosines into a Gaussian"}}