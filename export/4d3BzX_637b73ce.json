{"ver":"0.1","info":{"id":"4d3BzX","date":"1526056353","viewed":622,"name":"Circle packing 2 (loop free)","username":"akhgary","description":"I think that every loop can be removed when the variable changes inside loop are only dependent on loop counter.\n\nIts just matter of translating coordinates into loop counter. I could be wrong.\n\nThis circle packing is not as dense as possible by the way.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["spiral","circle","plot","draw","sunflower","circlepacking","loopfree","vogal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Circle packing\n// https://en.wikipedia.org/wiki/Circle_packing\n\n// Hue taken from https://www.shadertoy.com/view/4tlBWB\n\n#define tau 6.28318\n#define pi 3.14159\n#define ep 1e-2  // epsilon (fix edge cases)\n\nvec3 hue( in vec3 c )\n{\n\treturn c.z*(1.-c.y*smoothstep(2.,1.,abs(mod(c.x*6.+vec3(0,4,2),6.) -3.)));\n}\n\nfloat circle(vec2 xy, vec2 c, float r, bool fill){\n    float dist = length(xy-c)-r;\n    return 1.-smoothstep(-2./iResolution.y,3./iResolution.y,fill?dist:abs(dist));\n}\n\nvec3 circles(vec2 xy, vec2 C, float R, float r, float ph){\n    \n\tfloat t = 2.*asin(r/(R+r)); \t\t// theta for each surrounding circle\n    \n    float div = abs(tau/t)+ep;\n\tint n = int(div); \t\t\t\t\t// number of surrounding circles\n    float pad = fract(div)*t/float(n);\t// circles padding                                       \n    \n    float rt = -t/2.-pad/2.+ph;\t\t\t// plane rotation\n    mat2 rm = mat2(cos(rt),-sin(rt),sin(rt),cos(rt));\n    vec2 zw = rm*(xy-C);\t\t\t\t// rotated plane\n    \n    float i = floor((atan(zw.y,zw.x))/(t+pad));                 // i-th circle\n    vec2 c = vec2(cos(i*(t+pad)+ph),sin(i*(t+pad)+ph))*(r+R)+C; // center of surrounding circles\n\t\n    vec3 hsl = vec3(i/float(n),1.,.75); // color for each surrounding circle\n    return circle(xy,c,r,true)*hue(hsl);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n        \n    vec2 C = vec2(0); // center\n    float R = .175;\t// central circle radius\n\tfloat r = .075;\t// surrounding circle radius\n\n    col+=circle(xy, C, R, false);// draw central circle\n    \n    float n = 20.; // number of layers\n    float i = floor((min(r*2.*(n-1.)+ep,length(xy-C)-R))/(r*2.)); // i-th layer\n    \n    if(i>=0.)\n        col+=circles(xy, C, R+r*i*2., r,pi*sin(iTime)/n*i);  // draw surrounding circles\n    \n    fragColor = vec4(1.-col,1.0);\n}","name":"Image","description":"","type":"image"}]}