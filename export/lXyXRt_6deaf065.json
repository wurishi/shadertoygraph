{"ver":"0.1","info":{"id":"lXyXRt","date":"1720349394","viewed":77,"name":"3D Gabor ","username":"altunenes","description":"a nonsense shader only for fun/experimental :-D ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["gabor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\nconst int steps = 155;\nconst float dist = 100.0;\nconst float surf = 0.001;\n//sim with 2d: https://www.shadertoy.com/view/cs3BWM\nfloat fnGabor(vec3 p, float time, vec2 iMouse, vec2 iResolution) {\n    float lambda = 0.4;\n    float theta = iMouse.x / iResolution.x * PI;\n    float sigma = 0.5;\n    float gamma = 1.0;\n    float xp = p.x * cos(theta) - p.y * sin(theta);\n    float yp = p.x * sin(theta) + p.y * cos(theta);\n    float envelope = exp(-(xp*xp + gamma*gamma*yp*yp + p.z*p.z) / (2.0 * sigma * sigma));\n    float psi = time * 5.5;\n    float carrier = cos(2.0 * PI * xp / lambda + psi);\n    return envelope * carrier;\n}\n\nfloat sd(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sDF(vec3 p, float time, vec2 iMouse, vec2 iResolution) {\n    float sphere = sd(p, 1.0);\n    float gaborVal = fnGabor(p, time, iMouse, iResolution);\n    return mix(sphere, gaborVal, 0.5);\n}\n\nfloat rayray(vec3 ro, vec3 rd, float time, vec2 iMouse, vec2 iResolution) {\n    float dO = 0.0;\n    for(int i = 0; i < steps; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = sDF(p, time, iMouse, iResolution);\n        dO += dS;\n        if(dO > dist || abs(dS) < surf) break;\n    }\n    return dO;\n}\n\nvec3 norm(vec3 p, float time, vec2 iMouse, vec2 iResolution) {\n    float d = sDF(p, time, iMouse, iResolution);\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        sDF(p-e.xyy, time, iMouse, iResolution),\n        sDF(p-e.yxy, time, iMouse, iResolution),\n        sDF(p-e.yyx, time, iMouse, iResolution));\n    return normalize(n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = 1.5*(fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv, 1));\n    float t = iTime;\n    float d = rayray(ro, rd, t, iMouse.xy, iResolution.xy);\n    vec3 p = ro + rd * d;\n    if (d < dist) {\n        vec3 n = norm(p, t, iMouse.xy, iResolution.xy);\n        vec3 l = normalize(vec3(1, 1, -1));\n        float dif = dot(n, l)*.5+.5;\n        float gabor = fnGabor(p, t, iMouse.xy, iResolution.xy);\n        float elav = smoothstep(-0.2, 0.2, gabor);\n        vec3 gcol = mix(vec3(0.0), vec3(2.0), elav);\n        gcol *= dif;\n        gcol *= exp(-0.1 * d);\n        float w = 0.5;\n        float wf = 10.0;\n        vec2 wDir = normalize(vec2(cos(t), sin(t)));\n        float wDist = dot(p.xy, wDir);\n        float wave = w * sin(wf * wDist - t);\n        float envol = exp(-wDist*wDist / (2.0 * 0.5 * 0.5));\n        gcol += vec3(wave * envol);\n        \n        vec3 col = mix(vec3(0.5), gcol, 0.7);\n        fragColor = vec4(col, 1.0);\n    } else {\n        fragColor = vec4(vec3(0.5), 1.0);\n    }\n    }","name":"Image","description":"","type":"image"}]}