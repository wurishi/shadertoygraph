{"ver":"0.1","info":{"id":"tsl3DM","date":"1546557599","viewed":812,"name":"Spin Coherence","username":"wyatt","description":"I'm really excited about this fluid. The algorithm is simple, symmetrical, and accounts for the angular momentum of each cell as well as the linear momentum. ","likes":19,"published":3,"flags":32,"usePreview":0,"tags":["fluid","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvec4 P ( vec2 U ) {return texture(iChannel1,U/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\tR = iResolution.xy;\n \t vec4 me = T(U),\n        a = T(U+vec2(1,0)),\n        b = T(U-vec2(1,0)),\n        c = T(U+vec2(0,1)),\n        d = T(U-vec2(0,1));\n \tvec3 n = normalize( vec3(a.z-b.z, c.z-d.z, .1  ));\n \tvec4 p = P(U);\n \tp = p*p;\n    C = 0.1+1.3*sin(2.*(\n        p.w*vec4(1,2,3,4)+\n        p.z*vec4(3,2,1,4)+\n        p.y*vec4(2,3,1,4)+\n        p.x*vec4(3,1,2,4))\n    );\n \tC *= 0.5+0.5*texture(iChannel2,n);\n\t//C = 3.*abs(me.wwww);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Fluid\nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { // returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec4 t (vec2 U) { // access buffer\n\treturn texture(iChannel0,U/R);\n}\nvec4 T (vec2 U) {\n    // sample things where they were, not where they are\n\tU -= (dt*.5*t(U).xy);\n\tU -= (dt*.5*t(U).xy);\n    return t(U);\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n   C = T(U);\n   vec4 // neighborhood\n        n = T(U+vec2(0,1)),\n        e = T(U+vec2(1,0)),\n        s = T(U-vec2(0,1)),\n        w = T(U-vec2(1,0));\n   // xy : velocity, z : pressure, w : spin\n   C.x -= (0.25*(e.z-w.z-C.w*(n.w-s.w)));\n   C.y -= (0.25*(n.z-s.z-C.w*(e.w-w.w)));\n   C.z += dt*(0.25*((s.y-n.y+w.x-e.x)+(n.z+e.z+s.z+w.z))-C.z);\n   C.w = dt*(0.25*(s.x-n.x+w.y-e.y));\n   \n   // boundary conditions\n   if (U.y < 1. || R.y-U.y < 1.) C.xyw *= 0.;\n   if (length(U-0.5*R) < 13.) C.x += 0.1*(-0.5-C.x);\n   if (length(U-vec2(0.25)*R) < 15.) C.x = 0.1*(-0.6-C.x);\n   if (length(U-vec2(0.25,0.75)*R) < 15.) C.x = 0.1*(-0.6-C.x);\n   if (iFrame < 1||U.x < 5.) C = vec4(Flow_Rate,0,0,0);\n   if (U.x+1.>R.x) C.x = Flow_Rate;\n   vec4 mo = texture(iChannel1,vec2(0));\n   float l = ln(U,mo.xy,mo.zw);\n   if (mo.z > 0. && l < 2.) C += vec4(10.*(2.-l)*(mo.xy-mo.zw)/R.y,0,0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// colors and mouse\nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { // returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvec4 P ( vec2 U ) {return texture(iChannel1,U/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n\tif (U.x > 1.) {\n        U = U-dt*0.5*T(U).xy;\n        U = U-dt*0.5*T(U).xy;\n        C = P(U);\n\t\t\n        if (length(U-0.5*R) < 7.) C.z += 0.1*(1.-C.z);\n        if (length(U-vec2(0.25)*R) < 16.) C.y += 0.1*(1.-C.y);\n        if (length(U-vec2(0.25,0.75)*R) < 16.) C.x += 0.1*(1.-C.x);\n        if (iFrame < 1||U.x < 2.||R.x-U.x < 1.) C = vec4(0);\n    \tvec4 mo = texture(iChannel1,vec2(0));\n   \t\tfloat l = ln(U,mo.xy,mo.zw);\n   \t\tif (mo.z > 0. && l < 2.) C.w = 1.;\n    } else {\n        vec4 p = P(U);\n    \tif (iMouse.z>0.) {\n        \tif (p.z>0.) C =  vec4(iMouse.xy,p.xy);\n    \t\telse C =  vec4(iMouse.xy,iMouse.xy);\n    \t}\n    \telse C = vec4(-iResolution.xy,-iResolution.xy);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define Flow_Rate 0.2\n\n#define dt 1.","name":"Common","description":"","type":"common"}]}