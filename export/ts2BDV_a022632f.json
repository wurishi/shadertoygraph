{"ver":"0.1","info":{"id":"ts2BDV","date":"1590921293","viewed":127,"name":"Plot a function","username":"imwithye","description":"Plot macro plots a function on the screen!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["plot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/3sKSWc\n// An improved version of Egomeh's shader\n\nconst vec4 iPlot = vec4(0.0, 0.0, 18.0, 10.0);\n\nfloat DistanceToLine(vec2 p0, vec2 p1, vec2 p)\n{\n    p0 = ((p0 - iPlot.xy) + iPlot.zw) / (iPlot.zw * 2.) * iResolution.xy;\n    p1 = ((p1 - iPlot.xy) + iPlot.zw) / (iPlot.zw * 2.) * iResolution.xy;\n    p = ((p - iPlot.xy) + iPlot.zw) / (iPlot.zw * 2.) * iResolution.xy;\n    vec2 ld = p0 - p1;\n    vec2 pd = p - p1;\n    return length(pd - ld*clamp(dot(pd, ld)/dot(ld, ld), 0.0, 1.0)); \n}\n\n// Use macro to pass a function as a parameter\n#define DistanceToFunc(Func, p, dist)                                             \\\n{                                                                                 \\\n    float xDelta = iPlot.z * 2. / iResolution.x;                                  \\\n    float offset = xDelta * -2.;                                                  \\\n    float x = p.x + offset;                                                       \\\n    vec2 p0 = vec2(p.x + offset, Func);                                           \\\n    x = p.x + offset + xDelta;                                                    \\\n    vec2 p1 = vec2(p.x + offset + xDelta, Func);                                  \\\n    dist = DistanceToLine(p0, p1, p);                                             \\\n    offset = xDelta * -1.;                                                        \\\n    x = p.x + offset;                                                             \\\n    p0 = vec2(p.x + offset, Func);                                                \\\n    x = p.x + offset + xDelta;                                                    \\\n    p1 = vec2(p.x + offset + xDelta, Func);                                       \\\n    dist = min(dist, DistanceToLine(p0, p1, p));                                  \\\n    offset = xDelta * 0.;                                                         \\\n    x = p.x + offset;                                                             \\\n    p0 = vec2(p.x + offset, Func);                                                \\\n    x = p.x + offset + xDelta;                                                    \\\n    p1 = vec2(p.x + offset + xDelta, Func);                                       \\\n    dist = min(dist, DistanceToLine(p0, p1, p));                                  \\\n    offset = xDelta * 1.;                                                         \\\n    x = p.x + offset;                                                             \\\n    p0 = vec2(p.x + offset, Func);                                                \\\n    x = p.x + offset + xDelta;                                                    \\\n    p1 = vec2(p.x + offset + xDelta, Func);                                       \\\n    dist = min(dist, DistanceToLine(p0, p1, p));                                  \\\n    offset = xDelta * 2.;                                                         \\\n    x = p.x + offset;                                                             \\\n    p0 = vec2(p.x + offset, Func);                                                \\\n    x = p.x + offset + xDelta;                                                    \\\n    p1 = vec2(p.x + offset + xDelta, Func);                                       \\\n    dist = min(dist, DistanceToLine(p0, p1, p));                                  \\\n}\n\n// Use macro to pass a function as a parameter\n#define Plot(Func, fragCoord, col)                                                \\\n{                                                                                 \\\n    vec2 uv = fragCoord / iResolution.xy;                                         \\\n    vec2 range = vec2(iPlot.z * 2., iPlot.w * 2.);                                \\\n    vec2 p = uv * range - range / 2. + iPlot.xy;                                  \\\n    float dist = 0.;                                                              \\\n    DistanceToFunc(Func, p, dist);                                                \\\n    float intensity = smoothstep(0., 1., 1. - dist);                              \\\n    col *= pow(intensity, 1./2.2);                                                \\\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 f1 = vec3(1., 0., 0.);\n    Plot(sin(x), fragCoord, f1);\n    \n    vec3 f2 = vec3(0., 1., 0.);\n    Plot(cos(x), fragCoord, f2);\n    \n    vec3 f3 = vec3(0., 0., 1.);\n    Plot(tan(x), fragCoord, f3);\n    \n    vec3 f4 = vec3(0., 1., 1.);\n    Plot(x*x*x, fragCoord, f4);\n    \n    vec3 f5 = vec3(1., 0., 1.);\n    Plot(sin(3.14*x)/(3.14*x), fragCoord, f5);\n    \n    fragColor = vec4(f1+f2+f3+f4+f5, 1.0);\n}","name":"Image","description":"","type":"image"}]}