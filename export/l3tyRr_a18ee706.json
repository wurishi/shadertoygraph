{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Simple noise function\nfloat noise(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates to [0, 1]\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Maintain aspect ratio for square grid cells\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Background transition phase\n    float transitionProgress = clamp(iTime * 0.5, 0.0, 1.0); // Transition progress [0, 1]\n    vec3 startColor = vec3(0.0); // Black\n    vec3 endColor = vec3(0.08, 0.25, 0.48); // Blueprint dark blue\n\n    // Diagonal transition mask\n    float diagonal = uv.x - uv.y; // y = x line\n    float transitionMask = smoothstep(1., 0., diagonal - transitionProgress * 4.0  + 1.5);\n\n    // Interpolate background color\n    vec3 backgroundColor = mix(startColor, endColor, transitionMask);\n\n    // Phase 2: Gridlines after background transition\n    vec2 gridUV = uv * 15.0; // Scale UV to control grid density\n    float gridX = abs(fract(gridUV.x) - 0.5); // Horizontal lines\n    float gridY = abs(fract(gridUV.y) - 0.5); // Vertical lines\n    float gridThickness = 0.01; // Grid line thickness\n\n    // Combine horizontal and vertical lines\n    float grid = step(gridX, gridThickness) + step(gridY, gridThickness);\n\n    // Add noise distortion to the diagonal sweep\n    float noiseValue = noise(uv * 10.0 + iTime); // Noise based on UV and time\n    float distortedDiagonal = diagonal + noiseValue * 0.1; // Add noise to diagonal\n\n    // Reveal gridlines progressively after background transition\n    float gridSweepThreshold = iTime * 0.5 - 3.5; // Move diagonal over time\n    float gridReveal = step(distortedDiagonal, gridSweepThreshold) * transitionMask; // Only reveal after background transition\n\n    // Apply sweep to the grid\n    grid *= gridReveal;\n\n    // Create glow for the gridlines\n    float glow = smoothstep(0.02, 0.0, gridX) + smoothstep(0.02, 0.0, gridY);\n    glow *= gridReveal * 0.2; // Apply glow only to revealed lines\n\n    // Gridline color\n    vec3 gridColor = vec3(1.0, 1.0, 1.0); // White gridlines\n\n    // Final color: Combine background, gridlines, and glow\n    vec3 color = backgroundColor + gridColor * grid + glow;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"l3tyRr","date":"1734676567","viewed":89,"name":"Blueprint growing","username":"Kusou1","description":"Simple Growing blueprint","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["grid","blueprint","growing"],"hasliked":0,"parentid":"","parentname":""}}