{"ver":"0.1","info":{"id":"4sKcRK","date":"1522616890","viewed":177,"name":"Procedural brickwork mk1","username":"HughPH","description":"I wanted some bricks for a computer game that go on forever. This would form a suitable Diffuse Map, while the Alpha Channel represents Depth. Obviously you just need to offset fragCoord and you can create however many contiguous textures you need.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texture","brick","bricks","voronoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Procedural brickwork mk1\n\n// iqnoise & hash3 routine Copyright Â© 2014 Inigo Quilez under The MIT License\n// (although iqnoise substantially modified)\n\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\n\nfloat iqnoise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g );\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), 1. );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoomout = .3;\n    \n    vec2 uv = fragCoord/zoomout;\n    //uv.x += iTime * 50.;\n    \n    float distortion = (iqnoise(uv/128.));\n\n    uv += (distortion*(15.*zoomout));\n    \n    vec3 col = vec3(1.,.5,0.);\n\n    float a = (iqnoise(uv/4.)/2.)*2.;\n    \n    col *= a+(iqnoise(uv/64.)/2.);\n    \n\tfloat mx = mod(uv.x,200.);\n    float my = mod(uv.y,100.);\n    \n    if ((my < 20.) ||(mod(uv.y,200.) < 100. && mx < 20.) ||(mod(uv.y,200.) > 100. && mx > 100. && mx < 120.)){\n        a = iqnoise(uv)/2.;\n        col = vec3(.4+a);        \n    }\n    \n    fragColor = vec4(col,a);\n    //fragColor = vec4(a);\n}","name":"Image","description":"","type":"image"}]}