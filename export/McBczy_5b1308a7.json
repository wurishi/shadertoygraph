{"ver":"0.1","info":{"id":"McBczy","date":"1722514276","viewed":38,"name":"hyperboloid paraboloid connector","username":"jt","description":"Connect a hyperbola and a parabola C1-smootly (continuous position and derivative).\nGrey: parabolas and hyperbolas.\nBlack: part parabola, part hyperbola.\n(Note: because the parabola coordinates are transposed, the inverse function (square root) is used.)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["paraboloid","hyperboloid","connector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/McBczy hyperboloid paraboloid connector, 2024 by jt\n\n// Connect a hyperbola and a parabola C1-smootly\n// (continuous position and derivative).\n// Grey: parabolas and hyperbolas.\n// Black: part parabola, part hyperbola.\n// NOTE: because the parabola coordinates are transposed,\n//        the inverse function (square root) is used.\n\n// other connectors:\n// https://www.shadertoy.com/view/dsf3RB circular connector\n// https://www.shadertoy.com/view/XfjcRy hyperbola circle connector\n// https://www.shadertoy.com/view/4cSyRK parabola circle connector\n\n// tags: paraboloid, hyperboloid, connector\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define draw(q) o *= smoothstep(0.0, 0.01, abs(q))\n#define draw(q) o *= smoothstep(0.0, length(fwidth(I)), abs(q)) /* is fwidth supported on all devices? */\n\nfloat square_root(float s, float x)\n{\n    return s*sqrt(abs(x));\n}\n\nfloat square_root_derivative(float s, float x)\n{\n    return s/(2.0*sqrt(abs(x)));\n}\n\nfloat draw_square_root(float s, vec2 p)\n{\n    return (square_root(s, p.x)-p.y)/length(vec2(square_root_derivative(s, p.x),-1.0)); // divide by length of the gradient to get a constant width line\n}\n\nfloat hyperboloid(float a, float b, float x)\n{\n    return sqrt(abs(a*a+b*b*x*x));\n}\n\nfloat hyperboloid_dervative(float a, float b, float x)\n{\n    return (b*b*x)/sqrt(a*a + b*b*x*x);\n}\n\nfloat draw_hyperboloid(float a, float b, vec2 p)\n{\n    return (hyperboloid(a, b, p.x)-p.y)/length(vec2(hyperboloid_dervative(a, b, p.x),-1.0)); // divide by length of the gradient to get a constant width line\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nvoid mainImage(out vec4 o, in vec2 I) // [-1,+1]\n{\n    vec2 R = iResolution.xy;\n    I = 2.0*(I+I-R)/R.y;\n\n    I.y += 2.0;\n\n    o = vec4(1);\n\n    {\n        float a = mix(0.2, 1.0, 0.5+0.5*cos(iTime*tau/15.0));\n        float b = mix(0.2, 2.0, 0.5+0.5*sin(iTime*tau/15.0));\n        float s = sqrt(2.0*a*b);\n        //vec2 c = vec2(a/b, s*sqrt(a/b));\n        vec2 c = vec2(a/b, sqrt(2.0)*a);\n\n        {\n            draw(draw_hyperboloid(a, b, I*vec2(+1,+1)));\n            draw(draw_hyperboloid(a, b, I*vec2(+1,-1)));\n            draw(draw_square_root(s, I*vec2(+1,+1)));\n            draw(draw_square_root(s, I*vec2(+1,-1)));\n\n            draw(length(I - c*vec2(+1,+1)) - 0.02);\n            draw(length(I - c*vec2(-1,+1)) - 0.02);\n            draw(length(I - c*vec2(+1,-1)) - 0.02);\n            draw(length(I - c*vec2(-1,-1)) - 0.02);\n        }\n        \n        o = 0.5 + 0.5 * o;\n        \n        {\n            if(I.x < c.x) draw(draw_hyperboloid(a, b, I*vec2(+1,+1)));\n            else draw(draw_square_root(s, I*vec2(+1,+1)));\n        }\n    }\n    \n    o = sqrt(o); // approx gamma\n}\n","name":"Image","description":"","type":"image"}]}