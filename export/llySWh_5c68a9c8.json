{"ver":"0.1","info":{"id":"llySWh","date":"1484137313","viewed":1291,"name":"galaxy sim","username":"archee","description":"Simple galaxy simulation of 2000 stars. Gravital attraction ordo(n*n)\n","likes":15,"published":3,"flags":32,"usePreview":0,"tags":["galaxy","particle","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DIM 48\n\n// Rendering the stars as additive particles.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(0.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.y/=iResolution.x/iResolution.y;\n    \n    vec3 cpos = vec3(uv*80.0,0.0);\n    \n    for(int a=0;a<DIM*DIM;a++)\n    {\n        vec3 pos = texture(iChannel1,(vec2(mod(float(a),float(DIM)),float(a/DIM))+0.01)/iResolution.xy).xyz;\n//        float angle = 0.5; pos.x = pos.x*cos(angle)+pos.z*sin(angle);\n        float r = max(1.0-length(pos.xy-cpos.xy)/0.3,0.0)*0.5;\n        fragColor += vec4(1.0,0.7,0.4,0.0)*r;\n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DIM 48\n\n#define COUNT (DIM*DIM)\n\n// Buf A: 3D velocities\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    fragCoord = floor(fragCoord+0.01);\n    if (fragCoord.x>=float(DIM)) discard;\n    if (fragCoord.y>=float(DIM)) discard; // placing them in a rectangle is faster than a single line\n    \n    int b = int(fragCoord.y*float(DIM)+fragCoord.x); // find linear star ID\n    \n    vec3 pos = texture(iChannel1,(fragCoord+0.01)/iResolution.xy).xyz;\n    \n    vec3 vel = vec3(0.0);\n    \n    // all stars are attracted to all others, having equal mass\n    for(int a=0;a<DIM*DIM;a++)\n    {\n        vec3 opos = texture(iChannel1,(vec2(mod(float(a),float(DIM)),float(a/DIM))+0.01)/iResolution.xy).xyz;\n        float dist2 = dot(opos-pos,opos-pos);\n        if (dist2!=0.0)\n        { \n            vel += (opos-pos)/dist2*0.00002;\n        }\n    }\n    \n\n    // add it's own velocity at the end to make these 32bit float operations more accurate\n    // while adding small numbers in the loop above.\n\tvel += texture(iChannel0,(fragCoord+0.01)/iResolution.xy).xyz;\n\n    if (iFrame<=60) \n    {\n        // The stars are placed to their starting location in Buf B\n        // This will give the whole galaxy an initial rotational inertia around axis Z\n        vel = cross(pos,vec3(0.0,0.0,-0.004));\n    }\n        \n    \n    fragColor.xyz = vel;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define DIM 48\n\n#define COUNT (DIM*DIM)\n\n// Buf B contains positions. Just add velocities\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    fragCoord = floor(fragCoord+0.01);\n    if (fragCoord.x>=float(DIM)) discard;\n    if (fragCoord.y>=float(DIM)) discard;\n    \n    int b = int(fragCoord.y*float(DIM)+fragCoord.x);\n    \n    vec3 vel = texture(iChannel0,(fragCoord+0.01)/iResolution.xy).xyz;\n    vec3 pos = texture(iChannel1,(fragCoord+0.01)/iResolution.xy).xyz;\n\n    pos += vel;\n    \n    if (iFrame<60) // must wait for texture loading\n    {\n        // starting position of stars. You can play with it.\n        \n//        pos = vec3(mod(float(b),float(DIM))+sin(float(b)+1.0)*0.3,float(b/DIM)+sin(float(b)),sin(float(b)*1.4)*float(DIM)*0.5)-vec3(float(DIM)/2.0,float(DIM)/2.0,0.0);\n        pos = (texture(iChannel2,(fragCoord+0.01)/float(256.0)).xyz-0.5)*21.0;\n        pos.x += sin(pos.y/4.0)*14.0;\n    }\n    \n    fragColor.xyz = pos;\n}","name":"Buf B","description":"","type":"buffer"}]}