{"ver":"0.1","info":{"id":"WsVGzm","date":"1569926140","viewed":4272,"name":"float to RGB to float","username":"MadcoreTom","description":"converts a float to RGB in order to retain as much resolution as possible (instead of 0-255), with a method to convert it back\nUseful in depth shaders use for shadows\n\nThe top third is the value (x value from 0 to 1) encoded in rgb, next is decoded","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["function"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rgbToFloat(vec3 rgb, float scale){\n    return rgb.r +\n        (rgb.g/scale)+\n        (rgb.b/(scale*scale));\n}\n\nvec3 floatToRgb(float v, float scale) {\n    float r = v;\n    float g = mod(v*scale,1.0);\n    r-= g/scale;\n    float b = mod(v*scale*scale,1.0);\n    g-=b/scale;\n    return vec3(r,g,b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float inp = uv.x;\n    \n    float scale = 256.0;\n    \n    vec3 rgb = floatToRgb(inp,scale);\n    \n    float v = rgbToFloat(rgb,scale);\n\n    if(uv.y > 0.667)\n        // RGB encoded float\n    \tfragColor = vec4(rgb,1.0);\n   \telse if(uv.y > 0.333)\n        // decoded RGB to float\n        fragColor = vec4(v,v,v,1.0);\n    else\n        // Actual input\n        fragColor = vec4(inp,inp,inp,1.0);\n}","name":"Image","description":"","type":"image"}]}