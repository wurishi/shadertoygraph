{"ver":"0.1","info":{"id":"fdf3RX","date":"1616329586","viewed":106,"name":"2d hexagonal tiling","username":"CoolerZ","description":"Hexagonal tiling of the plane.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["hexagon","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float Y_OFF = sqrt(3.)/2.;\nconst vec3 colors[4] = vec3[4](vec3(1., 0., 0.), vec3(0., 1., 0.), vec3(0., 0., 1.), vec3(1., 0., 1.));\n\n// #define MOD(a, b) ((a)-((a)/(b))*(b))\n// #define MOD(a, b) ((a)%(b))\n#define MOD(a, b) int(mod(float(a), float(b)))\n\nint argmin(float d1, float d2, float d3) {\n    int ans = 0;\n    if (d2 < d1 || d3 < d1) {\n        ans = 1;\n        if (d3 < d2) {\n            ans = 2;\n        }\n    }\n    return ans;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n\n    uv += .4*vec2(iTime);\n    uv *= 2.;\n\n// calculate\n    int row_idx = int(floor(uv.y/Y_OFF));\n    float bot_left_y = float(row_idx)*Y_OFF;\n\n    float origin_offset = (1.5*float(row_idx));\n    int col_idx = int(floor((uv.x-origin_offset)/3.));\n    float bot_left_x = origin_offset+float(col_idx)*3.;\n\n    // hexagon center positions\n    vec2 bot_left_xy = vec2(bot_left_x, bot_left_y);\n    vec2 bot_right_xy = bot_left_xy + vec2(3., 0.);\n    vec2 top_xy = bot_left_xy + vec2(1.5, Y_OFF);\n\n    // hexagon center distances\n    float bot_left_d = distance(uv, bot_left_xy);\n    float bot_right_d = distance(uv, bot_right_xy);\n    float top_d = distance(uv, top_xy);\n\n    int closest = argmin(bot_left_d, bot_right_d, top_d);\n    if (closest == 1) {\n        col_idx += 1;\n    } else if (closest == 2) {\n        row_idx += 1;\n    }\n\n    //int idx = (row_idx % 2)*2 + (col_idx % 2);\n    int idx = MOD(row_idx, 2)*2 + MOD(col_idx, 2);\n    vec3 color = colors[idx];\n    if( idx < 0 ){\n        color = vec3(0.);\n    }\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}