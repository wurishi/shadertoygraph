{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\nconst float Epsilon = 1.e-8;\n\nfloat normalizedDistanceToCone( vec2 conePos, vec2 coneDir, float coneLength, float coneRadius, vec2 testPos )\n{\n\tvec2 displacement = testPos - conePos;\n\tfloat displacementDotDir = dot( displacement, coneDir );\n\t\n\tif( displacementDotDir < Epsilon || displacementDotDir > coneLength )\n\t{\n\t\treturn 1.0;\n\t}\n\t\n\treturn \n\t\tlength(\tdisplacementDotDir * coneDir - displacement ) \n\t\t* coneLength / ( coneRadius * displacementDotDir );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 conePos = 0.5 * iResolution.xy;\n\tfloat ratio = 1.0 - normalizedDistanceToCone( \n\t\tconePos, \n\t\tnormalize(iMouse.xy - conePos), \n\t\tiResolution.y * .4,\n\t\tiResolution.y * .15, \n\t\tfragCoord.xy );\n\t\n\tvec4 field_col = vec4(ratio, 0.0, 0.0, 1.0);\n\t\n\tfragColor = field_col;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsXSzj","date":"1403794728","viewed":483,"name":"Cone Distance Field (2D)","username":"fibre","description":"A simple implementation of a normalized distance field for a 2D cone (easily portable to 3D).\nValue is 0 on the cone axis and grows to 1 towards its curved boundary. \nDiscontinuities at the apex and the base.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","cone"],"hasliked":0,"parentid":"","parentname":""}}