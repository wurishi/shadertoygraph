{"ver":"0.1","info":{"id":"wtByDK","date":"1595382786","viewed":122,"name":"v3TriLattice8.glsl","username":"jorge2017a1","description":"///source code of ShaderSketches","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["v3trilattice8glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 uv2tri(vec2 uv)\n{\n    float sx = uv.x - uv.y / 2.0; // skewed x\n    float offs = step(fract(1.0 - uv.y), fract(sx));\n    return vec2(floor(sx) * 2.0 + offs, floor(uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float res = iResolution.y / (5.0 + sin(iTime * 0.5));\n\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / res;\n\n    vec3 p = vec3(dot(uv, vec2(1.0, 0.5)), dot(uv, vec2(-1.0, 0.5)), uv.y);\n    vec3 p1 = fract(+p);\n    vec3 p2 = fract(-p);\n\n    // distance from borders\n    float d1 = min(min(p1.x, p1.y), p1.z);\n    float d2 = min(min(p2.x, p2.y), p2.z);\n    float d = min(d1, d2);\n\n    // border line\n    float c = clamp((d - 0.04) * res, 0.0, 1.0);\n\n    // gradient inside triangles\n    float r = rand(uv2tri(uv));\n    c *= abs(0.5 - fract(d + r + iTime * 0.8)) * 2.0;\n\n    // color variation\n    float cb = sin(iTime * 4.8 + r * 32.984) * 0.5 + 0.5;\n    vec3 rgb = mix(vec3(0.75, 0.0, 0.0), vec3(1, 0.5, 0.5), cb);\n\n    fragColor = vec4(rgb * c, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}