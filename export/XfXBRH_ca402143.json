{"ver":"0.1","info":{"id":"XfXBRH","date":"1723303333","viewed":67,"name":"taylor normalize per pixel","username":"janpitokiala","description":"[url=https://www.shadertoy.com/view/MfffRr]iterative normalize per pixel[/url] but with [url=https://www.shadertoy.com/view/XcXBRH]taylor series normalization[/url]. starting value is position on screen.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["approximation","normalize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"iterative normalize per pixel\" by janpitokiala. https://shadertoy.com/view/MfffRr\n// 2024-08-10 15:19:50\n\n#define ITERATIONS 1\n#define TAYLOR_ITERATIONS 10.\nfloat invsqrt(float x) {\n  float mul = 1.;\n  float sum = 1.;\n  for(float i=1.;i<=TAYLOR_ITERATIONS;i++) {\n    mul *= -(2.*i-1.)*x/(2.*i);\n    sum += mul;\n  }\n  return sum;\n}\nvec2 normalizeStep(vec2 x) {\n    return x*invsqrt(dot(x,x)-1.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord*2./iResolution.y+vec2(-iResolution.x/iResolution.y,-1.);\n    uv *= 1.9;\n    for(int i=0;i<ITERATIONS;i++) {\n      uv=normalizeStep(uv);\n    }\n\n    // Output to screen\n    fragColor = vec4(.5*(uv+1.),0.,1.0);\n}","name":"Image","description":"","type":"image"}]}