{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*\nAn old-school RGB plasma, built from several layers of sine functions\nBasically a straight port from my highly optimished C plasma code from way back (1996) to a shader,\nwithout any shader specific optimisations. There's probably a lot of redundant stuff in here, and other\nthings that could be optimised out like doing the fadeFix without branching etc.\n\nFeel free to optimise and let me know how you get on!\n\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n-- Fragvarken\n*/\n\nfloat stab1( float angleParam )\t\t\t// input: angle in radians, output: new angle\n{\n\treturn ( (cos( mod(angleParam,6.28318) ) + 1.0) / 2.0) * 2.0 * 3.14159;\n}\n\nfloat stab2( float angleParam )\t\t\t// input: angle in radians, output: new angle [0..2*PI]\n{\n\treturn ((sin( mod(angleParam,6.28318) ) + 1.0) / 2.0) * 2.0 * 3.14159;\n}\n\nfloat fadeFix( float angleParam )\n{\n\tif( angleParam > (2.0 * 3.14159) )\n\t{\n\t\tangleParam = (2.0 * 3.14159) - (angleParam - 2.0 * 3.14159);\n\t}\n\t\n\treturn clamp( angleParam / (2.0 * 3.14159), 0.0, 1.0 );\n}\n\n\nvec2 rotate( in vec2 vector, in float angleRad)\n{\n\tfloat cs = cos(angleRad);\n\tfloat sn = sin(angleRad);\n\n    vec2 result;\n\tresult.x = vector.x * cs - vector.y * sn;\n\tresult.y = vector.x * sn + vector.y * cs;\n    \n    return result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\t// texture variables\n\tfloat redAngle = mod(iTime*0.5,6.28318);\n\tfloat greenAngle = mod(iTime*0.4,6.28318);\n\tfloat blueAngle = mod(iTime*0.3,6.28318);\n\t\n\tfloat redMult = (sin(iTime*0.2) + 1.0) / 2.0;;\n\tfloat greenMult = (sin((iTime+3.0)*0.29) + 1.0) / 2.0;;\n\tfloat blueMult = (sin((iTime+1.5)*0.4) + 1.0) / 2.0;;\n\t\n\tvec3 color;\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = rotate(uv, iTime * 0.15 + sin(uv.x*6.28318)*sin(iTime*0.3)*0.25 + sin(uv.y*6.28318)*sin(iTime*0.2)*0.25);\n\t\n\tfloat y = ((uv.y / 0.0025) / 360.0) * 3.14159;\n\tfloat x = ((uv.x / 0.0015) / 360.0) * 3.14159;\n\n\t// red\n\tfloat m_ri2 = stab1( redAngle*2.0 + y );\n\tfloat m_rj2 = stab2( stab2( redAngle + 0.0 ) + y );  \n\tfloat inner = stab2( m_ri2 + x ) + m_rj2;\t\t//[0..4*PI]\n\tcolor.r = fadeFix( inner ) * redMult;\n\n\t// green\n\tm_ri2 = stab1( greenAngle*3.0 + y );\n\tm_rj2 = stab2( stab2( greenAngle + 0.8 ) + y );  \n\tinner = stab2( m_ri2 + x ) + m_rj2;\t\t//[0..4*PI]\n\tcolor.g = fadeFix( inner ) * greenMult;\n\n\t// blue\n\tm_ri2 = stab1( blueAngle*4.0 + y );\n\tm_rj2 = stab2( stab2( blueAngle + 1.9 ) + y );  \n\tinner = stab2( m_ri2 + x ) + m_rj2;\t\t//[0..4*PI]\n\tcolor.b = fadeFix( inner ) * blueMult;\n\n\tvec3 finalcolor = color;\n\n\tfragColor = vec4( finalcolor , 1.0 );\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dj3DK","date":"1393594812","viewed":434,"name":"Classic RGB Plasma","username":"fragvarken","description":"A good old demo plasma effect, and my first submission for ShaderToy!\nNot very optimised, but it works :)\nThis is actually (derived from) the shader I use in two published apps for Android (PlasmaPro 5000 and Visualisator 5000), so enjoy!\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["demoplasmaeffect"],"hasliked":0,"parentid":"","parentname":""}}