{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*--------------------------------------------------------------------------------------\nLicense CC0 - http://creativecommons.org/publicdomain/zero/1.0/\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n----------------------------------------------------------------------------------------\n-Otavio Good\n*/\n\nvec2 Circle(float a)\n{\n    return vec2(sin(a)*0.05, cos(a)*0.05);\n}\n\n// each fractal is slightly offset and with different parameters. That gives it some\n// depth and nice color variation.\nfloat Fractal(vec2 p)\n{\n    vec2 pr = p;\n    float scale = 1.0;\n    for (int i = 0; i < 20; i++)\n    {\n        vec2 n2 = Circle(iTime);\n        float nx = n2.x*0.95;// - 0.5;\n        float ny = n2.y;\n        pr += vec2(nx, ny);\n        pr = fract(pr*0.46+0.5)*2.0 - 1.1;\n        float len = dot(pr, pr);\n        float inv = 1.1/len;\n        pr *= inv;\n        scale *= inv;\n    }\n    float b = 1.0/scale;\n    return pow(b, 0.125);\n}\nfloat Fractal2(vec2 p)\n{\n    vec2 pr = p;\n    float scale = 1.0;\n    for (int i = 0; i < 4; i++)\n    {\n        vec2 n2 = Circle(iTime);\n        float nx = n2.x;// - 0.5;\n        float ny = n2.y*0.95;//(1.0+iter*0.1); //*0.95;\n        pr += vec2(nx, ny);\n        pr = fract(pr*0.46+0.5)*2.0 - 1.1;\n        float len = dot(pr, pr);\n        float inv = 1.1/len;\n        pr *= inv;\n        scale *= inv;\n    }\n    float b = 1.0/scale;\n    return pow(b, 0.125);\n}\nfloat Fractal3(vec2 p)\n{\n    vec2 pr = p;\n    float scale = 1.0;\n    for (int i = 0; i < 60; i++)\n    {\n        vec2 n2 = Circle(iTime);\n        float nx = n2.x;// + 0.15;\n        float ny = n2.y;\n        pr += vec2(nx, ny);\n        pr = fract(pr*0.46+0.5)*2.0 - 1.1;\n        float len = dot(pr, pr);\n        float inv = 1.1/len;\n        pr *= inv;\n        scale *= inv;\n    }\n    float b = 1.0/scale;\n    return pow(b, 0.125)*1.6;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // center and scale the UV coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv*=1.1;\t// zoom\n\tuv += vec2(0.1, 0.1);\n    uv -= Circle(iTime);\n\n    float frac = Fractal(uv);\n    float frac2 = Fractal2(uv);\n    float frac3 = Fractal3(uv);\n    vec3 finalColor = vec3(1.0-frac2 + frac3*0.45, (1.0-frac2)*0.9-0.2, 0.1+frac + frac*0.3);\n    //finalColor = vec3(1.0,1.0,1.0)*frac3;\n    fragColor = vec4(pow(abs(finalColor*0.7), vec3(1.0,1.0,1.0)*1.25), 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsSSWR","date":"1410589811","viewed":441,"name":"Biomimicry","username":"otaviogood","description":"More playing with the Apollonian fractal.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fractal","apollonian"],"hasliked":0,"parentid":"","parentname":""}}