{"ver":"0.1","info":{"id":"WdKSWW","date":"1574380389","viewed":412,"name":"A Sierpi≈Ñski fractal","username":"Cewein","description":"it's just a fractal  with depth enable, next up is coloring the fractal!","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MARCHING_STEP 64.\n\n/////\n// SDF Operation function\n/////\n\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\n/////\n// Scene and primitive SDF function\n/////\n\nfloat sphereSDF(vec3 samplePoint) {\n    return length(samplePoint) - 1.0;\n}\n\n\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n#define Scale 2.\n#define iteration 10\n\nfloat DE(vec3 z)\n{\n    vec3 a1 = vec3(1,1,1);\n    vec3 a2 = vec3(-1,-1,1);\n    vec3 a3 = vec3(1,-1,-1);\n    vec3 a4 = vec3(-1,1,-1);\n    vec3 c;\n    int n = 0;\n    float dist, d;\n    while (n < iteration) {\n         c = a1; dist = length(z-a1);\n            d = length(z-a2); if (d < dist) { c = a2; dist=d; }\n         d = length(z-a3); if (d < dist) { c = a3; dist=d; }\n         d = length(z-a4); if (d < dist) { c = a4; dist=d; }\n        z = Scale*z-c*(Scale);\n        n++;\n    }\n\n    return length(z) * pow(Scale, float(-n));\n}\n\nfloat sceneSDF(vec3 samplePoint) {\n\n  \n    float res = DE(samplePoint);\n    //res += sdPlane(-0.5, vec4(0.,1.,0.,1.));\n    return res;\n   \n}\n\n\n/////\n// Ray function\n/////\n\nvec3 getCameraRayDir(vec2 uv, vec3 camPos, vec3 camTarget)\n{\n    // Calculate camera's \"orthonormal basis\", i.e. its transform matrix components\n    vec3 camForward = normalize(camTarget - camPos);\n    vec3 camRight = normalize(cross(vec3(0.0, 1.0, 0.0), camForward));\n    vec3 camUp = normalize(cross(camForward, camRight));\n     \n    float fPersp = 2.0;\n    vec3 vDir = normalize(uv.x * camRight + uv.y * camUp + camForward * fPersp);\n \n    return vDir;\n}\n\nvec3 rayDir(float fov, vec2 size, vec2 fragCoord)\n{\n    vec2 xy = fragCoord - size/2.0;\n    float z = size.y * 0.5 / tan(radians(fov)/ 2.0);\n    return normalize(vec3(xy,-z));\n}\n\nvec2 normalizeScreenCoords(vec2 screenCoord)\n{\n    vec2 result = 2.0 * (screenCoord/iResolution.xy - 0.5);\n    result.x *= iResolution.x/iResolution.y;\n    return result;\n}\n\n/////\n// Marching function\n/////\n\nfloat march(vec3 pos, vec3 direction, float start, float end, inout float i)\n{\n    float depth = start;\n    for(i = 0.; i < MARCHING_STEP; i++)\n    {\n        float dist =  sceneSDF(pos + direction * depth);\n        if(dist < 0.005f)\n        {\n            return depth;\n        }\n        depth += dist;\n        if(depth >= end)\n            return end;\n    }\n}\n\n\n/////\n// Main function\n/////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 at = vec3(0, 0, 0);\n    vec2 uv = normalizeScreenCoords(fragCoord);\n    vec3 pos = vec3(cos(iTime/10.),0,sin(iTime/10.));\n\n    vec3 dir = getCameraRayDir(uv, pos, at);\n    \n    float i;\n    float dist = march(pos, dir, 0.f,200.f,i);\n    vec3 col = vec3(dist);\n    \n    if((dist - 200.f) > 0.001f)\n    {\n        col = vec3(0.0529, 0.0808, 0.1922);\n    }\n    else\n    {\n        col = vec3(dist*0.1); \n        col = vec3(0.75 + sin(iTime/10.), 0.515, 0.053 + cos(iTime/10.)) * float(i)/float(MARCHING_STEP);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}