{"ver":"0.1","info":{"id":"mtGSDd","date":"1686466227","viewed":91,"name":"Plasma pool","username":"Xecutor","description":"First attempt at shaders :)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["blobs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float num1, float num2) {\n    return fract(72.53 * sin((num1 + 7.0) * 315.0 + 127.0) * cos((num2+11.0) * 513.0) * 7759.0);\n}\n\nfloat rand(float num) {\n    return hash(num, 3.0);\n}\n\nvec2 randxy(float num) {\n    return vec2(hash(num,1.0), hash(num,2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 finalColor = vec3(0.0);\n    const float n = 17.0;\n    \n    for(float i=0.0;i<n;++i) {\n        vec2 c = randxy(i)*2.0-1.0;\n        float r = (1.0+rand(i))/2.0;\n        vec2 xy = c+vec2(cos(iTime*(0.5+rand(i+100.0)/2.0)+rand(i)*6.0)*r, sin(iTime*(0.5+rand(i+200.0)/2.0)+rand(i)*6.0)*r);\n        \n        float l = length(uv-xy)/exp(-length(uv-xy));\n        float v = 2.0/sqrt(l)/n;\n        vec3 clr = vec3(v,v/2.0,v/4.0);\n        \n        finalColor += clr;\n    }\n    \n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n","name":"Image","description":"","type":"image"}]}