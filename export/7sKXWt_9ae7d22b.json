{"ver":"0.1","info":{"id":"7sKXWt","date":"1635534180","viewed":141,"name":"Broccoli Fractal","username":"ShaderGuy57","description":"Inspired by wyatt's fractal:\nhttps://www.shadertoy.com/view/MdKyRw","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","color","kifs","broccoli"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Inspired by wyatt's fractal:\n//https://www.shadertoy.com/view/MdKyRw\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.00001\n\n// The SDF\nvec4 GetDist(vec3 p) {\n    float bg = p.y;\n    \n    float t = iTime * 0.4;\n    mat2 m1 = mat2(cos(t),-sin(t),sin(t),cos(t));\n    t *= sqrt(2.);\n    mat2 m2 = mat2(cos(t),-sin(t),sin(t),cos(t));\n    t /= 3.;\n    mat2 m3 = mat2(cos(t),-sin(t),sin(t),cos(t));\n    \n    float size = 0.9;\n    \n    p -= vec3(0,1,0);\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    for (int i = 0; i < 13; i++) {\n        size = size*0.66;\n        p.xz = m1*p.xz;\n        p.yz = m2*p.yz;\n        p.xy = m3*p.xy;\n        \n        col -= (p)*size;\n        p.xyz = abs(p.xyz) - size;\n    }\n    float d = min(bg, length(p)-5.8*size);\n    \n    col.r = (1.*col.x+2.)/3.;\n    col.b = (1.*col.z+0.8)/2.+0.2;\n    col.g = (.6*col.y+1.)/2. + 0.4*col.r + 0.4*col.b;\n    col *= 0.7;\n    col += 0.1;\n    \n    col = bg < length(p)-5.8*size ? vec3(1.) : col;\n    return vec4(d, col);\n}\n\n// Get the distance from camera\nvec4 RayMarch( vec3 ro, vec3 rd ) {\n    float dO = 0.;\n    vec3 col = vec3(1.);\n    \n    for( int i = 0; i < MAX_STEPS; i++ ) {\n        vec3 p = ro + rd*dO;\n        vec4 ds = GetDist(p);\n        dO += ds.x;\n        col = ds.yzw;\n        if (dO > MAX_DIST || dO < SURF_DIST) break;\n    }\n    return vec4(dO, col);\n}\n\n// Normal from SDF\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.0001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p - e.xyy).x,\n        GetDist(p - e.yxy).x,\n        GetDist(p - e.yyx).x);\n    \n    return normalize(n);\n}\n\n// Darker light if close to lightray\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float dO = 0.;\n    for( int i=0; i<MAX_STEPS; i++ )\n    {\n        float ds = GetDist(ro + rd*dO).x;\n        if( ds<SURF_DIST )\n            return 0.0;\n        res = min( res, k*ds/dO );\n        dO += ds;\n    }\n    return res;\n}\n\n// Lighting\nvec3 GetLight(vec3 p, vec3 lightPos) {\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    // Diffuse lighting\n    vec3 dif = vec3(clamp(dot(n, l), 0., 1.));\n    // Smooth shadow\n    //float d = softshadow(p + n*SURF_DIST*2.0, l, 10.);\n    //dif *= d;\n    // Hard shadow\n    vec4 d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d.x<length(lightPos-p)) dif *= 0.1*d.x*d.yzw;\n    \n    return dif;\n}\n\n// The camera\nvec3 camDir(vec3 origin, vec2 uv) {\n    vec3 up = vec3(0., 0., 1.);\n    float zoom = 1.;\n    vec3 lookat = vec3(0, 0, 0);\n    \n    vec3 f = normalize(lookat - origin);\n    vec3 r = cross(up, f);\n    vec3 u = cross(f, r);\n    vec3 c = origin + f * zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    vec3 rd = i - origin;\n    return rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.);  \n    \n    // Camera origin\n    vec3 ro = vec3(0, 8, 0);\n    float t = -iTime * 0.4;\n    mat2 m1 = mat2(cos(t),-sin(t),sin(t),cos(t));\n    // Camera direction\n    vec3 rd = camDir(ro, uv);\n\n    // Distance\n    vec4 d = RayMarch(ro, rd);\n    // Intersection point\n    vec3 p = ro + rd * d.x;\n    vec3 lightOff = vec3(4,2, -3);\n    vec3 dif = GetLight(p, ro + lightOff);\n    col = dif * d.yzw;\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}