{"ver":"0.1","info":{"id":"mlyfzd","date":"1707557571","viewed":122,"name":"LeatherNotePad","username":"vince5287","description":"test for a leather texture","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\n//----------------- Utils ----------- \n// https://iquilezles.org/ \nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) \n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise2D(vec2 p) \n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f*f*(3.0-2.0*f);\n    \n    return mix(a, b, u.x) + \n        (c - a)*u.y*(1.0-u.x) +\n        (d - b)*u.x * u.y;\n\n}\n\n#define OCTAVES 4\nfloat fbm(vec2 p, float h)\n{\n    float G = exp2(-h);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n\n    for (int i = 0; i < OCTAVES; i++)\n    {\n        t += a*noise2D(f*p);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n}\n\nfloat voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n    float res = 10.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        float o = random( n + g );\n\t    vec2  r = g - f + sin(PI*o);\n\n\t\tfloat d = 0.008*( abs(r.x) + abs(r.y) ) * dot(r,r);\n        \n        res = min(res, d);\n    }\n\n    return 1.0-sqrt(res);\n}\n\n\n//------ Main -----------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    vec3 col = vec3(1.0);\n    vec2 q = p;\n    \n    float sq = sdRoundBox(p, vec2(0.8, 0.9), vec4(0.03) );\n    float st = sdRoundBox(p - vec2(0.0, 0.5), vec2(0.8, 0.45), vec4(0.04) );\n    float pm = sdRoundBox((p + vec2(0.012, 0.16)) - 0.01*fbm(20.*p, 0.6), vec2(0.755, 0.71), vec4(0.01) );\n    float pmB = sdRoundBox((p + vec2(0.0, 0.14)), vec2(0.76, 0.725), vec4(0.01) );\n\n    // Paper BG\n    if (pm < 0.0 || pmB < 0.0)\n    {\n        col = vec3(0.96, 0.9, 0.8)- ( 0.08*fbm(2.0*p+vec2(1.), 0.65) );\n        // Top Shadow\n        if ( abs(p.y - 0.5) < 0.1)\n            col -= max( 8.0*(p.y - 0.52), 0.0);\n        \n        if (pm > 0.0 && pmB < 0.0 && p.y < 0.55)\n        {\n            col -= vec3(0.2);\n        }\n    }\n    // Leather\n    else if (sq < 0.)\n    {   \n        float dd = abs(p.y - 0.4);\n        float df = 0.0f;\n        if (p.y > 0.4) {\n         df = smoothstep(0.4, -0.3, dd) + 0.9*p.y - 0.554;\n        } \n        float dpy = p.y + df *p.y;\n        \n        vec2 q = vec2(p.x, dpy);\n        float v = voronoi(34.0 * q);\n        col = vec3(0.43, 0.535, 0.63) * v \n            - ( 0.15*fbm(2.0*p, 0.65) );\n            \n        col -= min(0.003 / (abs(p.y - 0.84)), 0.3);\n\n        vec2 gr = vec2(dFdx(v), dFdy(v));\n        vec3 lc = vec3(0.85, 0.65, 0.75);\n        vec2 lp = vec2(0.5, 1.0);\n\n        float dt = normalize(dot(-gr, lp));\n        dt = smoothstep(0.0, 0.7, dt);\n\n        col *= (0.1*dt * lc) + 1.1;\n        vec3 col1 = col;\n        \n        // Stitches\n        if (st < 0.0)\n        {\n            float sx = min(2.2+2.*sin(104.*p.x), 1.0);\n            col = vec3(0.9, 0.85, 0.82) * sx;\n            \n            p.y = p.y-0.84;\n            col -= abs(100.*p.y);\n            if (col.x < 0.05)\n            {\n                col = col1;\n            }\n        }\n    }\n    \n    // Shadow adjustments\n    if ( q.y < 0.9 && q.y > 0.595 && sq < 0.)\n    {\n        float pos = q.y - 0.75;\n        col -= 0.5*abs(10.*(pos*pos));\n    }\n    if ( q.y < 0.595 && q.y > 0.57 && sq < 0. && pm > 0.0 && pmB > 0.0)\n    {\n        float pos = q.y - 0.58;\n        col -= 0.25;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}