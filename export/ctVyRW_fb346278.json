{"ver":"0.1","info":{"id":"ctVyRW","date":"1699987907","viewed":46,"name":"intro-shader","username":"hir0","description":"learned from kishimisu tutorial","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // vec2 uv =  gl_FragCoord.xy / u_resolution * 2.0 - 1.0;\n    // uv.x *= u_resolution.x / u_resolution.y;\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec2 uv0 = uv;\n\n    vec3 finalColor = vec3(0.0);\n\n    // uv *= 2.0;\n    // uv = fract(uv);\n    // uv -= 0.5;\n\n    for(float i = 0.0; i < 4.0; i++) {\n        \n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        // vec3 col = vec3(1.0, 2.0, 3.0);\n        // vec3 col = palette(d + u_time);\n        vec3 col = palette(length(uv0) + iTime);\n\n        // d -= 0.5;\n        d = sin(d * 8. + i/.8 + iTime/.8 ) / 8.;\n        d = abs(d);\n\n        //step() takes a threshold and a value where the value is > thres than returns 1 otherwise 0\n        // d = step(0.02, d);\n\n        //smoothStep() takes two values and eases out the inbetween the thresholds value\n        // d = smoothstep(0.0, 0.1, d);\n\n        // d = 0.01 / d;\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    \n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n\nvec3 palette( float t ) {\n\n    //[[0.500 0.500 0.500] [0.528 0.248 0.500] [1.000 0.168 1.000] [0.000 0.333 0.667]]\n\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.528, 0.248, 0.5);\n    vec3 c = vec3(1.0, 0.168, 1.0);\n    vec3 d = vec3(0.0, 0.333, 0.667);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}","name":"Image","description":"","type":"image"}]}