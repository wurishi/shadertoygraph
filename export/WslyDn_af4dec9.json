{"ver":"0.1","info":{"id":"WslyDn","date":"1584555444","viewed":138,"name":"Mirrored Columns â€“ centered","username":"marlus","description":"thanks @vamoss","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["grid","video","mirror","columns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool FLIP = false;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x -= 0.5;\n\t\n    // num columns\n    float cols = 16. + 8. * cos(iTime);\n    \n    //how much the slices merge\n    float intensity = (1. - iMouse.x / iResolution.x) * 2.;\n    if(FLIP) intensity *= -1.;\n\t\n   \t// steps\n\tfloat qx = fract(uv.x*cols)/cols;\n    \n    // texture calculation\n    float fx = 0.5 + uv.x - qx * intensity;\n    \n    fragColor = texture(iChannel0, vec2(fx,uv.y));\n}","name":"Image","description":"","type":"image"}]}