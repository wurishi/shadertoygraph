{"ver":"0.1","info":{"id":"ts33W2","date":"1569295361","viewed":109,"name":"Stream of life","username":"ende76","description":"Mesmerizing view of squishy cells","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 normalizedUv(vec2 f, vec3 r) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = f/r.xy;\n    \n    // Origin centered in viewport\n    uv -= .5;\n    \n    // Same scale in x/y dimensions\n    float a = r.x/r.y;\n    uv *= a > 1. ? vec2(a, 1.) : vec2(1., 1./a);\n    return uv;\n}\n\nvec2 N22(vec2 p) {\n\tvec3 n = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    n += dot(n, n+34.45);\n    return fract(vec2(n.x*n.y, n.y*n.z));\n}\n\nfloat N21(vec2 p) {\n    p += fract(vec2(1003.123,32003.987));\n    p = N22(p);\n    return fract(p.x * p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = normalizedUv(fragCoord, iResolution);\n    \n    // shorthand to access time\n    float t = iTime;\n    \n    // number of cells in grid\n    float gridSize = 5.;\n \tuv *= gridSize;\n    \n    uv.x += gridSize*sin(.031*t);\n    uv.y += gridSize*cos(.037*t);\n\n    // [0., 1.] coord relative to grid cell\n \tvec2 gv = fract(uv)-.5;\n    \n    // unique id for grid cell (i.e. id is the same value for every pixel in the same cell\n    vec2 id = floor(uv);\n    \n    vec2 n = N22(id);\n    \n    float minDist = 2.;\n    float minDist1 = minDist;\n    vec2 minId = vec2(0., 0.);\n    vec2 minId1 = minId;\n\n    for (float y = -2.; y < 3.; y++) {\n        for (float x = -2.; x < 3.; x++) {\n            vec2 offset = vec2(x, y);\n            vec2 otherId = floor(uv + offset);\n            vec2 otherN = N22(otherId);\n            vec2 otherP = offset + sin(otherN * (t + 6.283)) * .5;\n            \n            float d = length(gv - otherP);\n            if (d < minDist) {\n                minDist1 = minDist;\n                minDist = d;\n                minId1 = minId;\n                minId = otherId;\n            } else if (d < minDist1) {\n                minDist1 = d;\n                minId1 = otherId;\n            }\n        }\n    }\n\n    vec3 col = vec3(0);\n    col.r = (1. - minDist / 1.414);\n\n    col *= .5 * col;\n    col.r += .12;\n    col.r = sqrt(col.r);\n    \n    col += clamp(pow(1. - minDist1 - minDist, 4.), 0., .75);\n        \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}