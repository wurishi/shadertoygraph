{"ver":"0.1","info":{"id":"MX2fRc","date":"1729799722","viewed":144,"name":"E-Field Lines","username":"connorslade","description":"Renders the field lines of an electric field with point charges in real time. Click and hold to move the middle particle and modify the particles, charge, and solutions constants in the shader code to customize the simulation.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int solutions = 5;\nfloat radius = 20.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 size = iResolution.xy;\n    \n    int charge[] = int[](1, -2, -2);\n    vec2 particles[] = vec2[](iMouse.xy,\n                              size * vec2(.3, .5),\n                              size * vec2(.7, .5));\n\n    if (iMouse.xy == vec2(0.0)) {\n        float scale = size.x * 0.08;\n        particles[0] = vec2(size.x * 0.5 + sin(iTime) * scale,\n                            size.y * 0.5 + cos(iTime) * scale);\n    }\n    \n    float net = 0.0;\n    for (int i = 0; i < particles.length(); i++) {\n        int charge = charge[i];\n        vec2 delta = fragCoord - particles[i];\n        \n        net += float(charge) * atan(delta.y, delta.x);              \n        \n        if (length(delta) < radius) {\n            if (charge > 0) fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n            else if (charge < 0) fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n            return;\n        }\n    }\n    \n    float a = sin(net * float(solutions));  \n    float value = abs(a / fwidth(a));\n    fragColor = vec4(2.0 - value);\n}\n ","name":"Image","description":"","type":"image"}]}