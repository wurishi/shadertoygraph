{"ver":"0.1","info":{"id":"ttlSDn","date":"1562605423","viewed":121,"name":"Rotating snakes (A. Kitaoka)","username":"DrCosinus","description":"Tribute to [url=http://www.ritsumei.ac.jp/~akitaoka/index-e.html]A. Kitaoka[/url]\nBetter in fullscreen\nCircular snakes appear to rotate 'spontaneously'.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["opticalillusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float tau = 6.283185307179586476925286766559;\nconst vec3 white_color =  vec3(1.0);\nconst vec3 blue_color =   vec3(0.0,0.4,1.0);\nconst vec3 yellow_color = vec3(0.82,0.82,0.0);\nconst vec3 black_color =  vec3(0.0);\nconst int circles_per_ring = 20;\n\nfloat disc(vec2 uv, vec2 center, float radius)\n{\n\tvec2 delta = (uv-center)/radius;\n    float sqDistance = dot(delta, delta);\n    return smoothstep(1.00, 0.98, (sqDistance));\n}\n\n// http://www.ritsumei.ac.jp/~akitaoka/index-e.html\n\nvec2 compute_center(in vec2 center, in float big_radius, float curv_absciss)\n{\n    float angle = tau * curv_absciss / float(circles_per_ring);\n    return center + big_radius * vec2( cos(angle), sin(angle) );    \n}\n\nvoid petal(\n    inout vec3 fragColor,\n    in vec2 uv,\n    in vec2 center,\n    in float big_radius,\n    in float small_radius,\n\tin float curv_absciss,\n\tin float scale)\n{\n    float whole_mask;\n    {\n        vec2 mask_center = compute_center(center, big_radius, curv_absciss);\n        whole_mask = disc ( uv, mask_center, small_radius );\n        fragColor = mix(fragColor, black_color, whole_mask);\n    }   \n    {\n        vec2 color_center = compute_center(center, big_radius, curv_absciss+0.53*scale);\n        float color_mask = disc ( uv, color_center, small_radius );\n        fragColor = mix(fragColor, blue_color, color_mask * whole_mask);\n    }\n    {\n        vec2 color_center = compute_center(center, big_radius, curv_absciss-0.53*scale);\n        float color_mask = disc ( uv, color_center, small_radius );\n        fragColor = mix(fragColor, yellow_color, color_mask * whole_mask);\n    }    \n}\n\nvoid ring(\n    inout vec3 fragColor,\n    in vec2 uv,\n    in vec2 center,\n    in float big_radius,\n\tin float offset,\n\tin float scale)\n{\n\tfloat small_radius = 3.1415 * big_radius / float(circles_per_ring) * 0.92;\n    for (int i = 0; i < circles_per_ring; ++i)\n    {\n        petal( fragColor, uv, center, big_radius, small_radius, float(i)+offset, scale);\n    }\n}\n\nvoid snake(\n    inout vec3 col,\n    in vec2 uv,\n    in vec2 center,\n\tin float scale)\n{\n    float bb = disc( uv, center, 0.5 );\n    if (bb>0.)\n    {\n        col = mix( white_color, vec3(0), disc( uv, center, 0.05 ) );\n        float r = 0.45;\n        float offset = 0.;\n        for(int i=0; i < 13; i++)\n        {\n            ring( col, uv, center, r, offset, scale );\n            offset = 0.5 - offset;\n            r /= 1.29786; // magic value depending on disc count \n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.yy;\n\n    vec3 col = white_color;\n    \n    uv *= 3.0;\n    for(int i=0;i<4;++i)\n    {\n        for(int j=0;j<3;++j)\n        {\n\t\t    snake( col, uv, vec2(-1.5+float(i),-1.0+float(j)), mod(float(i+j),2.)*2.0 - 1.0);\n            \n        }\n    }\n    for(int i=0;i<3;++i)\n    {\n        for(int j=0;j<2;++j)\n        {\n\t\t    snake( col, uv, vec2(-1.0+float(i),-0.5+float(j)), mod(float(i+j),2.)*2.0 - 1.0);\n            \n        }\n    }    \n \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}