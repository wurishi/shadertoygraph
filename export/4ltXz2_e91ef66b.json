{"ver":"0.1","info":{"id":"4ltXz2","date":"1480658007","viewed":325,"name":"Integer Noise Test","username":"lherm","description":"Playing with raymarching and noise on an plane","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Structure based on https://www.shadertoy.com/view/Xt2XDt by Cabbibo\n\n#define MIRROR\n\nconst int S = 32; // steps\nconst float D = 100.; // max distance\nconst float P = 0.001; // intersection precision\n\n// iq noise\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\n//-------------------\n// Camera\n//-------------------\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\nfloat sdPlane(in vec3 p, in vec4 n)\n{\n    return dot(p, n.xyz) + n.w;\n}\n\n\n//-------------------\n// Modelling\n//-------------------\n\nvec2 map(in vec3 p)\n{\n    vec3 ip = floor(p * 1.5);\n    vec3 np = vec3(noise(ip), noise(ip), noise(ip));\n    float s = sdPlane(vec3(p), vec4(0., 1., noise(np + iTime), 1.));\n    vec2 res = vec2(s, 1.);\n    return res;\n}\n\nvec2 trace(in vec3 ro, in vec3 rd)\n{\n    float h = P*2.;\n    float t = 0.;\n    float id = -1.;\n    float res = -1.;\n    \n    for (int i = 0; i < S; i++)\n    {\n        if (h<P || t>D) break;\n        vec3 r = ro + rd*t;\n        h = map(r).x;\n        t += h;\n        id = map(r).y;\n    }\n    \n    if (t < D) res = t;\n    if (t > D) id = -1.;\n    \n    return vec2(res, id);\n}\n\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render(in vec2 res, in vec3 ro, in vec3 rd)\n{\n    vec3 color = vec3(0.);\n    vec3 lightPos = vec3( 1. , 4. , 3. );\n    \n    if (res.y > -.5)\n    {\n        vec3 p = ro + rd*res.x;\n        vec3 norm = calcNormal(p);      \n        vec3 lightDir = normalize(lightPos - p);\n        float match = max( 0. , dot( lightDir , norm ));\n        float occ = calcAO(p, norm);\n        \n        if (res.y == 1.)\n        {\n            color = vec3(1.) * match * occ * (1.0-calcAO(p, rd));\n        }\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    \n    #ifdef MIRROR\n    uv = -abs(uv);\n    #endif\n    \n    vec3 ro = vec3(0., 0., 4.);\n    vec3 ta = vec3(0., 0., 0.);\n    \n    // Camera Matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0. );  // 0.0 is the camera roll\n    \n    // Create view ray\n\tvec3 rd = normalize( camMat * vec3(uv.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = trace(ro, rd);\n    \n    vec3 color = render(res, ro, rd);\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}