{"ver":"0.1","info":{"id":"3ltcD2","date":"1609949584","viewed":79,"name":"Lava bubbles (QTA)","username":"Dubko","description":"Generated using QTA - try it on your own! - https://github.com/Romop5/QuantitizeThemAll","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","functionquantizing","qta"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://romop5.github.io//QuantitizeThemAll/index.html?data=eyJwcm9ncmFtIjoiY29zKG1vZChtb2QobW9kKHQsMi44OSkrc2luKHQpK21vZChjb3MoeCtjb3MoY29zKDkuMDMpKSttb2QoNS45NywxNy40MSkrc2luKHQreCkpLDguNjMpLDExLjU1KSt5LDIuNjcpKSIsInRyYW5zZm9ybWF0aW9uVHlwZSI6ImNpcmNsZSIsInN0YXJ0Q29sb3IiOiIjMDAwMDAwIiwiZW5kQ29sb3IiOiIjZmYzMzAwIiwib2Zmc2V0WCI6IjAiLCJvZmZzZXRZIjoiMCIsInpvb20iOiI1IiwiZm9jYWwiOiIxIiwiaGFzQ29sb3JUaHJlc2hvbGQiOmZhbHNlLCJjb2xvclRocmVzaG9sZCI6IjAuNSJ9\n\n/*\n * Generated while using QuantizeThemAll\n * Try it yourself: https://romop5.github.io/QuantitizeThemAll/\n * You can also use https://github.com/danilw/shadertoy-to-video-with-FBO to render this shader.\n */\n   vec2 linear(vec2 uv)\n   {\n        return uv; \n   }\n\n   vec2 circle(vec2 uv)\n   {\n        vec2 nuv = normalize(uv);\n        float dist = 1.0/length(uv);\n        return nuv*dist;\n   }\n   vec2 polar(vec2 uv)\n   {\n        return vec2(atan(uv.x,uv.y),sqrt(uv.x*uv.x+ uv.y*uv.y));  \n   }\n   vec2 spherical(vec2 uv)\n   {\n        vec2 direction = uv;\n        float len = length(uv);\n        return vec2(exp(len))*direction;\n   }\n   vec2 fisheye(vec2 uv)\n   {\n        float f = 1.0000;\n        // Calculate angle from plane's UV\n        vec2 angles = atan(uv, vec2(1.0));\n        //return angles*f;\n        return vec2(2.0)*sin(angles*vec2(0.5))*vec2(f);\n   }\n\n   float inv(float x)\n   {\n    return 1.0/x;\n   }\n\n\n\n   void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n       vec2 uv = fragCoord/iResolution.xy;\n       uv *= 2.0;\n       uv += -1.0;\n       float t = iTime*1.0000;\n       vec2 resultingUv = circle(vec2(uv.x, uv.y)*vec2(5.0000));\n       float x = resultingUv.x + 0.0000;\n       float y = resultingUv.y + 0.0000;\n       float program = cos(mod(mod(mod(t,2.89)+sin(t)+mod(cos(x+cos(cos(9.03))+mod(5.97,17.41)+sin(t+x)),8.63),11.55)+y,2.67));\n       float parameter = clamp(program, 0.0,1.0);\n\n       vec3 colorStart = vec3(0,0,0)/255.0;\n       vec3 colorEnd = vec3(255,51,0)/255.0;\n       vec3 resultColor = mix(colorStart, colorEnd, parameter);\n\n       bool hasColorThreshold = false;\n       if(hasColorThreshold)\n       {\n          resultColor = (parameter > 0.5000)?colorStart:colorEnd;  \n       }\n       fragColor = vec4(resultColor, 1.0);\n   }\n   ","name":"Image","description":"","type":"image"}]}