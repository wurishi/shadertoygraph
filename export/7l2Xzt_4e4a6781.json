{"ver":"0.1","info":{"id":"7l2Xzt","date":"1628429038","viewed":121,"name":"Box (Max Norm Distance)","username":"TheTurk","description":"Maximum norm distance function for a box.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","distancefield","sdf","distance","box","primitive","linfinity","maximumnorm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float box(vec3 position, vec3 halfSize) {\n    position = abs(position) - halfSize;\n    return max(max(position.x, position.y), position.z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    float z = (fract((iTime * 0.2) + 0.5) * 2.0 - 1.0) * 0.7;\n    \n    vec3 halfSize = vec3(0.5);\n    float d = box(vec3(position, z), halfSize);\n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0, 0.9, 1.0) + sign(d) * vec3(-0.3, 0.4, 0.3); // base color\n    color *= 1.0 - exp(-4.0 * abs(d)); // gradient\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d); // ripples\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.002) * iResolution.y)); // outline\n    fragColor = vec4(color, 1.0);\n} ","name":"Image","description":"","type":"image"}]}