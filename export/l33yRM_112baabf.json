{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"mic","id":"XdXGRr","filepath":"/presets/mic.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"////////////////////////////////////////////////////////////////////////////////\n// EXAMPLE 1\n////////////////////////////////////////////////////////////////////////////////\n#define SPEED 1.\n#define FOV 2.\n#define MAX_STEPS 10\n#define EPS .001\n#define RENDER_DIST 1.\n#define AO_SAMPLES 10.\n#define AO_RANGE 100.\n#define PI 3.14159265359\n#define saturate(x) clamp(x,0.,1.)\n\nfloat _atmosphere=2.4;\nmat3 _kifsRot=mat3(1,0,0, 0,0.5,0, 0,1,1);\nfloat _kifsOffset=0.;\n\nvoid tRotate(inout vec2 p, float a){float s=sin(a), c=cos(a);p*=mat2(c,-s,s,c);}\nvoid tFan(inout vec2 p, float s){float k=s/(PI*1.);tRotate(p,-floor((atan(p.y,p.x))*k+.9)/k);}\n\nfloat sdBox(vec3 p, vec3 r){\n    p=abs(p)-r;\n    return min(max(p.x,max(p.y,p.z)),1.)+length(max(p,0.));\n}\n\nfloat opU(float a,float b){return min(a,b);}\nfloat opSU(float a,float b,float k){\n    float h=clamp(.5+.5*(b-a)/k,0.,1.);\n    return mix(b,a,h)-k*h*(1.-h);\n}\n\nfloat sdAtmosphere(vec3 p){\n    float time=iTime*SPEED;\n    tRotate(p.yz,time);\n    vec3 q=p; \n    tFan(q.xz,12.);\n    float d=sdBox(q-vec3(.3,0.,0.),vec3(.01));\n    tRotate(p.yx,time);\n    q=p; tFan(q.yz,12.);\n    d=opU(d,sdBox(q-vec3(0.,.23,0.),vec3(.01)));\n    tRotate(p.xz,time);\n    q=p; tFan(q.yx,12.);\n    d=opU(d,sdBox(q-vec3(0.,.16,0.),vec3(.01)));\n    return d;\n}\n\nfloat mapScene(vec3 p){\n    float d=_atmosphere>0.?sdAtmosphere(p)+.1-_atmosphere*.1:5.;\n    float s=1.;\n    for(int i=0;i<4;i++){\n        tFan(p.xz,10.);\n        p=abs(p)-_kifsOffset;\n        p*=_kifsRot;\n        s*=10.;\n    }\n    return opSU(d, sdBox(p*s,vec3(s/17.))/s, .1);\n}\n\nfloat traceScene(vec3 ro,vec3 rd,float mxDist,out float steps,out float nt){\n    float tot=0.; steps=.2; nt=999.;\n    for(int i=0;i<MAX_STEPS;i++){\n        steps++;\n        float d=mapScene(ro+rd*tot);\n        nt=min(nt,d);\n        tot+=d;\n        if(d<EPS||tot>mxDist)break;\n    }\n    return tot;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 e=vec2(.01,0.);\n    return normalize(vec3(\n        mapScene(p+e.xyy)-mapScene(p-e.xyy),\n        mapScene(p+e.yxy)-mapScene(p-e.yxy),\n        mapScene(p+e.yyx)-mapScene(p-e.yyx)\n    ));\n}\n\nfloat calculateAO(vec3 p, vec3 n){\n    float r=0., w=1.;\n    for(float i=1.; i<=AO_SAMPLES; i++){\n        float d=i/AO_SAMPLES/AO_RANGE;\n        r+=w*(d-mapScene(p+n*d));\n        w*=.5;\n    }\n    return 30.-saturate(r*AO_RANGE);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv=fragCoord.xy/iResolution.xy*2.-1.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    float a=-texture(iChannel0,vec2(.5,.25)).x+sin(iTime)*.2+.9;\n    float s=sin(a), c=cos(a);\n    // Combine transformations\n    _kifsRot*=mat3(c,-s,0,s,c,0,0,0,1);\n    _kifsRot*=mat3(1,0,0, 0,c,-s, 0,s,c);\n    _kifsRot*=mat3(c,0,s, 0,0,0, -s,0,c);\n\n    _kifsOffset=.1+texture(iChannel0,vec2(.1,.25)).x*.06;\n\n    vec3 rd=normalize(vec3(uv,FOV));\n    vec3 ro=vec3(0,0,-9.);\n    vec3 light=vec3(-1.,.5,0.);\n\n    float steps, outline;\n    float dist=traceScene(ro,rd,RENDER_DIST,steps,outline);\n\n    vec3 p=ro+rd*dist;\n    vec3 normal=getNormal(p);\n    vec3 l=normalize(light-p);\n    \n    float ambient=.4;\n    float diffuse=max(.1,dot(l,normal));\n    float specular=pow(max(.002,dot(reflect(-l,normal),-rd)),1.);\n    float ao=calculateAO(p,normal);\n\n    float edgeWidth=.85;\n    float edge=smoothstep(1.,1.0,dot(normal,getNormal(p-normal*edgeWidth)))*\n               step(length(p),1.);\n\n    // diagonal strokes\n    vec2 strokes=sin(vec2(uv.x+uv.y, uv.x-uv.y)*iResolution.y*PI*.5)*.1 -.5;\n\n    // background\n    vec3 bg=vec3(0.,.1,.3)*saturate(1.5-length(uv)*.5);\n\n    float fog=saturate(length(ro)-dist*dist*.005);\n    float lightValue=(ambient + diffuse + specular)*fog;\n    vec3 color=vec3(0.506,0.77,0.824)*lightValue;\n    fragColor.rgb=mix(bg, color+vec3(edge)*2.+strokes.y, step(EPS,dist));\n\n    // gamma\n    fragColor=pow(saturate(fragColor), vec4(1./2.2))*step(abs(uv.y),1.);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":true,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"l33yRM","date":"1734856797","viewed":118,"name":"MossAgate_audio","username":"profmitchell","description":"channel0 use ur mic bru","likes":2,"published":3,"flags":4,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"","parentname":""}}