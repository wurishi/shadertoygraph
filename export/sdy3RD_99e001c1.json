{"ver":"0.1","info":{"id":"sdy3RD","date":"1676264323","viewed":81,"name":"2D subtle pink animation - Fast","username":"nbardy","description":"Pink Noise for masking","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ####### 2D Fractal Brownian Motion Noise #######\n// Made by Jacob Bingham (Zi7ar21) on August 1st, 2021 (Original from May 14th, 2020)\n\n// If you found this anywhere except Shadertoy, the orignal (and possibly updated version) can be found at:\n// https://www.shadertoy.com/view/3dSBRh\n\n// http://www.mimirgames.com/articles/programming/digits-of-pi-needed-for-floating-point-numbers/\n#define pi 3.141592653589793\n\n// Rotate a vec2\nvec2 rotate(vec2 vec, float rot)\n{\n    float s = sin(rot), c = cos(rot);\n    return vec2(vec.x*c-vec.y*s, vec.x*s+vec.y*c);\n}\n\n// Hash13 Hash without Sine: https://www.shadertoy.com/view/4djSRW\nfloat hash(vec2 p, float t)\n{\n    vec3 p3 = vec3(p, t);\n    p3  = fract(p3*0.1031);\n    p3 += dot(p3, p3.zyx+31.32);\n    return fract((p3.x+p3.y)*p3.z);\n}\n\n// Value Noise\n/*\nfloat noise(vec2 p, float t)\n{\n    vec2 f = smoothstep(0.0, 1.0, fract(p));\n    p = floor(p);\n    float t0 = hash(vec2(0.0, 0.0)+p, t);\n    float t1 = hash(vec2(1.0, 0.0)+p, t);\n    float t2 = hash(vec2(0.0, 1.0)+p, t);\n    float t3 = hash(vec2(1.0, 1.0)+p, t);\n    return mix(mix(t0, t1, f.x), mix(t2, t3, f.x), f.y);\n}\n*/\n\n// manu210404's Improved Version\nfloat noise(vec2 p, float t)\n{\n    vec4 b = vec4(floor(p), ceil(p));\n    vec2 f = smoothstep(0.0, 1.0, fract(p));\n    return mix(mix(hash(b.xy, t), hash(b.zy, t), f.x), mix(hash(b.xw, t), hash(b.zw, t), f.x), f.y);\n}\n\n// Number of FBM Octaves\n#define num_octaves 4\n\n// Fractal Brownian Motion Noise\nfloat fbm(vec2 pos)\n{\n    float value = 0.0;\n    float scale = 1.0;\n    float atten = 0.5;\n    float t = 0.0;\n    for(int i = 0; i < num_octaves; i++)\n    {\n        t += atten;\n        value += noise(pos*scale, float(i))*atten;\n        scale *= 2.0;\n        atten *= 0.5;\n        pos = rotate(pos, 0.125*pi);\n    }\n    return value/t;\n}\n\n// Traditional Uniform Identifiers\n#define resolution iResolution\n\n// Render and Output the Frame\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{ \n    // Screen UV Coordinates\n    vec2 uv = 2.0*(gl_FragCoord.xy-0.5*resolution.xy)/max(resolution.x, resolution.y); \n    \n    // Circle Mask\n    float mask = length(1.0- uv/2.0);\n    vec4 image = texture(iChannel0, uv/2.0 + 0.5);\n\n    // Render the Frame\n    float f = fbm(16.0*uv);\n    f = fbm(vec2(2.0*uv.x+f + iTime*0.2,2.0*uv.y+f + iTime*0.2));\n    //f = fbm(vec2(16.0*uv+f));\n    //f = fbm(vec2(16.0*uv+f));\n    //f = fbm(vec2(16.0*uv.x+f + iTime*0.6,16.0*uv.y+f + iTime*0.6));\n    //f = fbm(vec2(32.0*uv+f - iTime*(1.2/8.0)));\n    //f = fbm(vec2(64.0*uv+f - iTime*0.05));\n\n    //vec2 shift = vec2(sin(uv.x * iTime),sin(uv.x * iTime)\n    //f = fbm(10.0*(uv.xy + shift)+ 7.0);\n    vec3 color = vec3(f * 1.2);\n    vec3 pink = vec3(1.,0., 0.9);\n    float a = 1.2334;\n    float shift = 0.6;\n    vec3 baseColor = pink;\n    float minA = 0.4;\n    float maxA = 0.6;\n    \n    int colorI = 4;\n        \n    // Dark Purple\n    if(colorI == 1) {\n       a = 1.123;\n       shift = 0.4;\n       baseColor = pink;\n    }\n    \n    // White Pink\n    if(colorI == 2) {\n       a = 0.613;\n       shift = 0.9;\n       baseColor = pink;\n    }\n    \n    // Bright White\n    if(colorI == 3) {\n       a = 1.223;\n       shift = -0.1;\n       baseColor = vec3(0.9);\n       minA = 0.25;\n       maxA - 0.31;\n    }\n    \n    // Grey Selection\n    if(colorI == 4) {\n       a = 1.2234;\n       shift = 0.5;\n       minA = 0.1;\n       maxA = 0.5;\n    }\n    \n    color = baseColor + ((shift - color) * a);\n    \n\n    //maskValue = vec4(color, ( minAlpha + (maxAlpha - minAlpha)) * (mask));\n    float blend = ( minA + (maxA - minA)) * (mask);\n    vec3 maskValue = vec3(color * blend + (1.0 - blend) * image.xyz);\n    \n    \n    // Output the Rendeed Frame\n    fragColor = vec4(vec3(maskValue), 1.0);\n    // fragColor = vec4(vec3(mask),1.0);\n    \n}","name":"Image","description":"","type":"image"}]}