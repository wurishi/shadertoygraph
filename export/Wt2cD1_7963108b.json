{"ver":"0.1","info":{"id":"Wt2cD1","date":"1594260226","viewed":116,"name":"Phasor Wave","username":"treize","description":"yokuwakarann","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float M_PI =3.14159265358979323846;\n   \nvec2 phasor(vec2 x, float f, float b, float o, float phi)\n{\n    float a = exp(-M_PI * (b * b) * ((x.x * x.x) + (x.y * x.y)));\n    float s = sin (2.0* M_PI * f  * (x.x*cos(o) + x.y*sin(o))+phi);\n    float c = cos (2.0* M_PI * f  * (x.x*cos(o) + x.y*sin(o))+phi);\n    return vec2(a*c,a*s);\n}\nfloat uni_0_1(int xx) \n{\n    int N = 15487469;\n    xx *= 3039177861;\n    xx %=  N;\n    return  float(xx) / float(N);\n}\nfloat uni(int xx,float min, float max)\n{\n    float uni_0_1_= uni_0_1(xx);\n    return min + (uni_0_1_* (max - min));\n}\nint morton(int x, int y)\n{\n  int z = 0;\n  for (int i = 0 ; i < 32* 4 ; i++) \n  {\n    z |= ((x & (1 << i)) << i) | ((y & (1 << i)) << (i + 1));\n  }\n  return z;\n}\nvec2 cell(ivec2 ij, vec2 uv,float _kr,int x_, float f, float b, float o)\n{\n\tint s= morton(ij.x,ij.y) + 333;\n\ts = s==0? 1: s +2;\n\tx_=s;\n\tint impulse  =0;\n\tint nImpulse = 16;\n\tfloat  cellsz = 2.0 * _kr;\n\tvec2 noise = vec2(0.0);\n\twhile (impulse <= nImpulse)\n\t{\n\t\tvec2 impulse_centre = vec2(uni_0_1(x_),uni_0_1(x_));\n\t\tvec2 d = (uv - impulse_centre) *cellsz;\n\t\tfloat rp = uni(x_,0.0,2.0*M_PI);\n\t\tnoise += phasor(d, f, b ,o,rp );\n\t\timpulse++;\n\t}\n\treturn noise;\n}\nvec2 eval_noise(vec2 uv,float kr, float f, float b, float o)\n{   \n    int x_;\n\tfloat cellsz = 2.0 *kr;\n\tvec2 _ij = uv / cellsz;\n\tivec2  ij = ivec2(_ij);\n\tvec2  fij = _ij - vec2(ij);\n\tvec2 noise = vec2(0.0);\n\tfor (int j = -2; j <= 2; j++)\n\t{\n\t\tfor (int i = -2; i <= 2; i++)\n\t\t{\n\t\t\tivec2 nij = ivec2(i, j);\n\t\t\tnoise += cell(ij + nij , fij - vec2(nij),kr,x_,f,b,o );\n\t\t}\n\t}\n    return noise;\n}\nvoid PhasorNoise(vec2 uv,float f_,float o_,float b_,out float a,out float b,out float c,out float d)\n{\n    vec2 dir = vec2(cos(o_),sin(o_));\n    float kr = sqrt(-log(0.05) / M_PI) / b_;\n    vec2 phasorNoise = eval_noise(uv,kr,f_,b_,o_);\n    float phi = atan(phasorNoise.y,phasorNoise.x);\n    a=phi;\n    b=sin(phi)*0.3 +0.5;\n    c=length(phasorNoise);\n    d=mod(phi/(2.0*M_PI)-f_*dot(uv,dir),1.0);\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float oo = iMouse.x/iResolution.x * 2.0*M_PI;\n  \tvec2 dir = vec2(cos(oo),sin(oo));\n \tvec2 p = fragCoord/iResolution.xy;\n   \tp=p*2.0-1.0;\n\tp.x *= iResolution.x / iResolution.y;\n    p*=1.4;\n    vec3 col;\n    float f = 12.0;\n    float o = 1.7;\n    float b = 6.0;\n    vec4 out_color;\n    PhasorNoise(p,f,o,b,out_color.x,out_color.y,out_color.z,out_color.w);\n    col=hsv2rgb(vec3(out_color.z/(2.0*M_PI)-f*dot(p,dir), 0.8, 0.8));\n\tfragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}