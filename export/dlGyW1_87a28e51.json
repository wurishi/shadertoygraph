{"ver":"0.1","info":{"id":"dlGyW1","date":"1700168177","viewed":90,"name":"random rectangle tiling","username":"jt","description":"Random Rectangle Tiling, inspired by [url=https://www.numberphile.com/videos/squares-and-tilings]Numberphile: Squares and Tilings[/url].\nUnfortunately slow: O(n^2) due to nested loops.\nClick to quantize to grid.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["random","rectangle","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dlGyW1 random rectangle tiling, 2023 by jt\n\n// Random rectangle tiling inspired by https://www.numberphile.com/videos/squares-and-tilings.\n\n// Method:\n// Draw n random horizontal lines with horizontal endpoint coordinates in [0,1]\n// and random vertical coordinate in [0,1].\n// From each endpoint draw an orthogonal line up and down\n// until the nearest horizontal line is hit.\n// Runtime is O(n^2) two nested loops.\n// Could be improved by sorting the horizontal lines by vertical offsets\n// but that approach would require state.\n// Click to quantize.\n\n// Question: Could enumerating all integer compositions (non-unique partitions)\n//           be used to enumerate all integer random rectangle tilings?\n// BUT looks like this method is NOT unique:\n//     *---*    *-*-*    *-*-*\n//     | | | == | | | == | | | different configurations result in same tilings!\n//     *-*-*    *---*    *-*-*\n// so enumeration based on this method would not be unique!\n\n// tags: random, rectangle, tiling\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nvec2 hash21(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash31(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nstruct separator\n{\n    float x[2];\n    float y;\n};\n\nseparator get_separator(uint n, uint i)\n{\n    //vec3 h = hash31(float(i)+123.123);\n    vec3 h = 0.5 + 0.5 * cos(2.0 * pi * (hash31(float(n-i)) + hash31(float(i))*iTime*0.02));\n    //vec3 h = fract(2.0*hash31(float(i))-1.0 + (2.0*hash31(float(n-i))-1.0)*iTime*0.02);\n    //h = mix(vec3(0.05), vec3(0.95), h);\n    if(iMouse.z > 0.0) h = round(h * float(n))/float(n); // quantize\n    float start = min(h.x, h.y);\n    float end = max(h.x, h.y);\n    float offset = h.z;\n    return separator(float[2](start, end), offset);\n}\n\nseparator connect(uint n, uint i, float x, float y)\n{\n    float y0 = 0.0;\n    float y1 = 1.0;\n    for(uint j = 0u; j < n; j++)\n    {\n        if(i != j)\n        {\n            separator r = get_separator(n, j);\n            if(x > r.x[0] && x < r.x[1])\n            {\n                if(r.y >= y && r.y <= y1) y1 = r.y;\n                if(r.y <= y && r.y >= y0) y0 = r.y;\n            }\n        }\n    }\n    \n    return separator(float[2](y0, y1), x);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) // based on https://iquilezles.org/articles/distfunctions2d/\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n//#define draw_line(I, a, b, c) { o = max(o, vec4(c,0) * (1.0 - smoothstep(0.0, 0.005, line(I, a, b)))); }\n#define draw_line(I, a, b, c) { o = max(o, vec4(c,0) * smoothstep(1.5/iResolution.y, 0., line(I, a, b))); } // suggested by Fabrice\n\nvoid mainImage(out vec4 o, in vec2 I) // [0..1]\n{\n    vec2 R = iResolution.xy;\n    I = 0.5 + (I - R / 2.) / R.y;\n    I = mix(vec2(-0.1), vec2(1.1), I);\n    o = vec4(0);\n    if(all(lessThan(abs(I - 0.5), vec2(0.5))))\n        o.xyz += 0.1;\n    {\n        const uint n = 15u;\n        for(uint i = 0u; i < n; i++)\n        {\n            separator s = get_separator(n, i);\n            draw_line(I, vec2(s.x[0],s.y), vec2(s.x[1],s.y),  vec3(1,0.2,0.2))\n            for(uint k = 0u; k < 2u; k++)\n            {\n                separator r = connect(n, i, s.x[k], s.y);\n                draw_line(I, vec2(r.y,r.x[0]), vec2(r.y,r.x[1]), vec3(0.0,0.5,1))\n            }\n        }\n        if(true) // outer box\n        {\n            draw_line(I, vec2(0, 0), vec2(1, 0), vec3(1,0.2,0.2))\n            draw_line(I, vec2(0, 1), vec2(1, 1), vec3(1,0.2,0.2))\n            draw_line(I, vec2(0, 0), vec2(0, 1), vec3(0.0,0.5,1))\n            draw_line(I, vec2(1, 0), vec2(1, 1), vec3(0.0,0.5,1))\n        }\n        //o = 1.0 - o;\n    }\n}\n","name":"Image","description":"","type":"image"}]}