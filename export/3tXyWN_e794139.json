{"ver":"0.1","info":{"id":"3tXyWN","date":"1592100235","viewed":92,"name":"sound test (fujisan)","username":"darkfox","description":"fujisan.\nMt. FUJI is beautiful! (and bonus track... DO RE MI FA SO RA FA MI RE DO ~)","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["sound","fujisan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fujisan.\n// reference:https://www.youtube.com/watch?v=MpbClCjC6Vs\n\n#define BROWN vec3(0.66, 0.40, 0.27)\n#define pi 3.14159\n\n// for noise.\nconst vec2 u_10 = vec2(1.0, 0.0);\nconst vec2 u_01 = vec2(0.0, 1.0);\nconst vec2 u_11 = vec2(1.0, 1.0);\nconst vec3 r_vec_30 = vec3(127.1, 311.7, 251.9);\nconst vec3 r_vec_31 = vec3(269.5, 183.3, 314.3);\nconst vec3 r_vec_32 = vec3(419.2, 371.9, 218.4);\nconst vec3 u_100 = vec3(1.0, 0.0, 0.0);\nconst vec3 u_010 = vec3(0.0, 1.0, 0.0);\nconst vec3 u_001 = vec3(0.0, 0.0, 1.0);\nconst vec3 u_110 = vec3(1.0, 1.0, 0.0);\nconst vec3 u_101 = vec3(1.0, 0.0, 1.0);\nconst vec3 u_011 = vec3(0.0, 1.0, 1.0);\nconst vec3 u_111 = vec3(1.0, 1.0, 1.0);\nconst float r_coeff = 43758.5453123;\nconst int octaves = 6;\n\n// 3D random vector.(-1.0～1.0)\nvec3 random3(vec3 st){\n  vec3 v;\n  v.x = sin(dot(st, r_vec_30)) * r_coeff;\n  v.y = sin(dot(st, r_vec_31)) * r_coeff;\n  v.z = sin(dot(st, r_vec_32)) * r_coeff;\n  return -1.0 + 2.0 * fract(v); // normalize to -1.0～1.0\n}\n// simplex noise.\nfloat snoise3(vec3 st){\n  vec3 p = st + (st.x + st.y + st.z) / 3.0;\n  vec3 f = fract(p);\n  vec3 i = floor(p);\n  vec3 g0, g1, g2, g3;\n  vec4 wt;\n  g0 = i;\n  g3 = i + u_111;\n  if(f.x >= f.y && f.x >= f.z){\n    g1 = i + u_100;\n    g2 = i + (f.y >= f.z ? u_110 : u_101);\n    wt = (f.y >= f.z ? vec4(1.0 - f.x, f.x - f.y, f.y - f.z, f.z) : vec4(1.0 - f.x, f.x - f.z, f.z - f.y, f.y));\n  }else if(f.y >= f.x && f.y >= f.z){\n    g1 = i + u_010;\n    g2 = i + (f.x >= f.z ? u_110 : u_011);\n    wt = (f.x >= f.z ? vec4(1.0 - f.y, f.y - f.x, f.x - f.z, f.z) : vec4(1.0 - f.y, f.y - f.z, f.z - f.x, f.x));\n  }else{\n    g1 = i + u_001;\n    g2 = i + (f.x >= f.y ? u_101 : u_011);\n    wt = (f.x >= f.y ? vec4(1.0 - f.z, f.z - f.x, f.x - f.y, f.y) : vec4(1.0 - f.z, f.z - f.y, f.y - f.x, f.x));\n  }\n  float value = 0.0;\n  wt = wt * wt * wt * (wt * (wt * 6.0 - 15.0) + 10.0);\n  value += wt.x * dot(p - g0, random3(g0));\n  value += wt.y * dot(p - g1, random3(g1));\n  value += wt.z * dot(p - g2, random3(g2));\n  value += wt.w * dot(p - g3, random3(g3));\n  return value;\n}\n// fbm.\nfloat fbm(vec3 st){\n  float value = 0.0;\n  float amplitude = 0.5;\n  for(int i = 0; i < octaves; i++){\n    value += amplitude * snoise3(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n  }\n  return value;\n}\n\n// hsb to rgb.\nvec3 getRGB(float h, float s, float b){\n  vec3 c = vec3(h, s, b);\n  vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n  rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n// background.\nvec3 getBG(in vec2 p){\n    vec3 sky = getRGB(0.55, sqrt(p.y * (2.0 - p.y)), 1.0);\n    float n = 0.5 + 0.5 * fbm(vec3(vec2(p.x, p.y * 2.0) + vec2(iTime * 0.1, 0.0), iTime * 0.1));\n    vec3 cloud = vec3(1.0);\n    vec3 preBG = sky + (cloud - sky) * smoothstep(0.44, 0.56, n);\n    return preBG;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float minL = min(iResolution.x, iResolution.y);\n    vec2 p = (fragCoord.xy * vec2(2.0, 1.0) - vec2(iResolution.x, 0.0)) / minL;\n\n    vec3 bg = getBG(p);\n    vec3 col;\n    col = bg;\n    if(p.y < 0.8 && p.x * p.x * p.y < 0.2){ col = BROWN * p.y * 2.0; }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TAU 6.2831\n\nconst float _RA = 220.0;\nconst float _RASP = 233.082;\nconst float _SI = 246.942;\nconst float DO = 261.626;\nconst float DOSP = 277.183;\nconst float RE = 293.665;\nconst float RESP = 311.127;\nconst float MI = 329.628;\nconst float FA = 349.228;\nconst float FASP = 369.994;\nconst float SO = 391.995;\nconst float SOSP = 415.305;\nconst float RA = 440.0;\nconst float RASP = 466.164;\nconst float SI = 493.883;\nconst float DO_ = 523.251;\n\n// pianolike sound.\nfloat piano(float x){\n    float wv = 0.5 * sin(TAU * x);\n    wv += 0.25 * sin(TAU * 2.0 * x);\n    wv += 0.125 * sin(TAU * 3.0 * x);\n    wv += 0.0625 * sin(TAU * 4.0 * x);\n    wv += 0.03125 * sin(TAU * 5.0 * x);\n    return wv;\n}\n\nfloat squ(float x){\n    x = fract(x);\n    return step(0.5, x) * 2.0 - 1.0;\n}\n\nvec2 squWave(float time, float freq, float m){\n  return vec2(squ(freq * time)) * exp(-m * time);\n}\n\nvec2 pianoWave(float time, float freq, float m){\n  return vec2(piano(freq * time)) * exp(-m * time);\n}\n\nvec2 sound(float t, float freq, float span){\n    return squWave(t, freq, 1.6 / span);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    const int note_count = 89;\n    const float BPM = 120.0;\n    float unit = 60.0 / BPM;\n    \n    float term[note_count] = float[note_count](1.5, 2.0, 3.0, 4.0,\n                          5.0, 5.5, 6.0, 8.0,\n                          9.5, 10.0, 11.0, 11.5, 12.0, 16.0,\n                          17.5, 18.0, 19.0, 20.0, 21.5, 22.0, 23.0, 24.0,\n                          25.5, 26.0, 26.5, 27.0, 27.5, 28.0, 32.0,\n                          33.5, 34.0, 35.0, 36.0, 36.5, 37.0, 37.5, 38.0, 40.0,\n                          41.5, 42.0, 43.0, 44.0, 48.0,\n                          50.0, 51.0, 52.0, 53.5, 54.0, 55.0, 56.0,\n                          57.0, 58.0, 59.5, 60.0, 64.0,\n                          64.5, 65.0, 65.5, 66.0, 67.0, 67.5, 68.0,\n                          69.0, 70.0, 72.0,\n                          72.75, 73.0, 73.5, 74.0, 74.5, 75.0, 76.0,\n                          76.75, 77.0, 77.5, 78.0, 78.5, 79.0, 80.0,\n                          80.5, 81.0, 81.5, 82.0, 83.0, 83.5, 84.0,\n                          85.0, 86.0, 88.0);\n\n    float sus[note_count] = float[note_count](1.0, 0.5, 1.0, 1.0,\n                          1.0, 0.5, 0.5, 1.5,\n                          1.5, 0.5, 1.0, 0.5, 0.5, 3.0,\n                          1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0,\n                          1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 3.0,\n                          1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.5, 1.0,\n                          1.0, 0.5, 1.0, 1.0, 3.0,\n                          1.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0,\n                          1.0, 1.0, 1.0, 0.5, 3.0,\n                          0.5, 0.5, 0.5, 0.5, 1.0, 0.5, 0.5,\n                          1.0, 1.0, 1.0,\n                          0.5, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5,\n                          0.5, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5,\n                          0.5, 0.5, 0.5, 0.5, 1.0, 0.5, 0.5,\n                          1.0, 1.0, 1.0);\n\n    float freq[note_count] = float[note_count](SO, SO, RA, SO,\n                          MI, DO, RE, MI,\n                          RE, SO, SO, FA, MI, RE,\n                          SO, SO, MI, DO, RA ,SI, DO_, RA,\n                          SO, RA, SO, FA, MI, RE, DO,\n                          RE, RE, RE, RE, DO, RE, MI, FA, SO,\n                          RA, SI, DO_, RA, SO,\n                          DO_, RA, FA, MI, MI, RA, SO,\n                          FA, MI, RE, DO, DO,\n                          DO, RE, MI, FA, SO, RA, FA,\n                          MI, RE, DO,\n                          SO, FA, MI, SO, FA, MI, RE,\n                          SO, FA, MI, SO, FA, MI, RE,\n                          DO, RE, MI, FA, SO, RA, FA,\n                          MI, RE, DO);\n    \n    float prevTerm = 0.0;\n    for(int i = 0; i < note_count; i++){\n        if(time < term[i] * unit){\n            return sound(time - prevTerm, freq[i], sus[i] * unit);\n        }\n        prevTerm = term[i] * unit;\n    }\n    return vec2(0.0);\n}","name":"Sound","description":"","type":"sound"}]}