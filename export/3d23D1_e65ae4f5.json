{"ver":"0.1","info":{"id":"3d23D1","date":"1548761520","viewed":241,"name":"voronoi distance field vis","username":"memo","description":"exploring pyramid illusion / Vasarely's 'nested squares'\n\nmouseclick left / right of image to invert\n\nhttps://twitter.com/kcimc/status/1089979094505271296\nhttps://michaelbach.de/ot/lum-pyramid/index.html\nhttps://journals.sagepub.com/doi/10.1068/p5383","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","illusion","perception"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n//\n// mouseclick left / right of image to invert\n//\n// exploring pyramid illusion / Vasarely's 'nested squares'\n// https://twitter.com/kcimc/status/1089979094505271296\n// https://michaelbach.de/ot/lum-pyramid/index.html\n// https://journals.sagepub.com/doi/10.1068/p5383\n//\n// based on IQ's https://www.shadertoy.com/view/ldl3W8\n\n\n#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\treturn textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n\t\n    // procedural white noise\t\n\t//return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 10.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xx;\n\n    vec3 c = voronoi( 8.0*p );\n\n\t// isolines\n    vec3 col = vec3(c.x*1.3+0.2);//c.x*(0.5 + 0.5*sin(64.0*c.x))*vec3(1.0);\n    if (iMouse.x > iResolution.x/2.0) col = vec3(1.0) - col;\n    // borders\t\n    //col = mix( vec3(1.0,0.6,0.0), col, smoothstep( 0.04, 0.07, c.x ) );\n    // feature points\n\t//float dd = length( c.yz );\n\t//col = mix( vec3(1.0,0.6,0.1), col, smoothstep( 0.0, 0.08, dd) );\n\t//col += vec3(1.0,0.6,0.1)*(1.0-smoothstep( 0.0, 0.04, dd));\n\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}