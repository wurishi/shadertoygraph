{"ver":"0.1","info":{"id":"3ljGRV","date":"1560275182","viewed":112,"name":"D&D 006 - Bubbles","username":"Ryp","description":"Uurgh, had to do that one in a hurry.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["quick","dirty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float saturate(float v)\n{\n    return clamp(v, 0.0, 1.0);\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n  \tvec3 d = abs(p) - b;\n  \treturn length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sphereSDF(vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nconst int MAX_MARCHING_STEPS = 200;\nconst float EPSILON = 0.005f;\n\nfloat sceneSDF(vec3 p)\n{\n    float d = 10000.0;\n    for (int i = 0; i < 16; i++)\n    {\n\t\tvec3 rand = texelFetch(iChannel0, ivec3(i), 0).xyz;\n\n        vec3 scale = mix(vec3(0.1), vec3(0.6), rand);\n        vec3 offset = mix(vec3(-2.0), vec3(2.0), rand);\n        float speed = mix(1.0, 8.0, rand.x + rand.y);\n        \n        float speed1D = mod(speed * iTime, 20.0) - 10.0;\n        vec3 movement = vec3(speed1D, speed1D, 0.0);\n        \n        vec3 position = p + offset + movement;\n        d = min(d, sphereSDF(position / scale.x) * scale.x);\n    }\n    \n    return d;\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nconst float pi = 3.14159265358;\n\nfloat deg2rad(float angleDeg)\n{\n \treturn (angleDeg * pi) / 180.f;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 positionUV = fragCoord / iResolution.xy;\n    vec2 positionNDC = 2.0 * positionUV - 1.0;\n    positionNDC.y = -positionNDC.y;\n    \n    // Camera setup\n    float cameraHFovAngle = deg2rad(55.f);\n    float cameraNear = 0.1f;\n    float cameraFar = 200.0f;\n    vec3 eyePositionWS = vec3(3.5f, 1.5f + sin(iTime * 0.2), 6.5f);\n\n    // Viewport calculations\n    float aspectRatioInv = iResolution.y / iResolution.x;\n    \n    float horizontalFov = cameraNear * tan(cameraHFovAngle * 0.5f);\n \tfloat verticalFov = horizontalFov * aspectRatioInv;\n    vec2 cameraViewportExtent = vec2(horizontalFov, verticalFov);\n    \n    vec3 viewRayDirectionWS = vec3(positionNDC * cameraViewportExtent, cameraNear);\n    \n    viewRayDirectionWS = (viewMatrix(eyePositionWS, vec3(0.5, 0.5, 0.5 + cos(iTime * 0.5) * 0.5), vec3(0.0, 0.0, 1.0)) * vec4(viewRayDirectionWS, 0.0)).xyz;        \n    viewRayDirectionWS = normalize(-viewRayDirectionWS);\n    \n    float rayDepth = shortestDistanceToSurface(eyePositionWS, viewRayDirectionWS, cameraNear, cameraFar);\n\n    vec3 p = eyePositionWS + rayDepth * viewRayDirectionWS;\n    \n    vec3 light1PosWS = vec3(2.0, 4.0, 6.0);\n    vec3 light1Ambient = vec3(.1, .2, .1);\n    vec3 light1Color = vec3(0.9, 0.7, 0.2);\n    vec3 normalWS = estimateNormal(p);\n    vec3 L1 = normalize(light1PosWS - p);\n    vec3 V = normalize(eyePositionWS - p);\n    vec3 R1 = normalize(reflect(-L1, normalWS));\n\n    vec3 light2PosWS = vec3(4.0, -6.0, 2.0);\n    vec3 light2Color = vec3(1.0, 0.1, 0.0) * 0.4;\n    vec3 L2 = normalize(light2PosWS - p);\n    vec3 R2 = normalize(reflect(-L2, normalWS));\n    \n    float dotL1N = saturate(dot(L1, normalWS));\n    float dotL2N = saturate(dot(L2, normalWS));\n    float dotR1V = saturate(dot(R1, V));\n    float dotR2V = saturate(dot(R2, V));\n    float dotNV = saturate(abs(dot(normalWS, V)));\n        \n    // Output some color\n    vec3 color = vec3(0.0);\n    \n    float tangentHighlightPeriod = 0.15;\n    float tangentHighlightDist = abs(mod(rayDepth + tangentHighlightPeriod * 0.5 + iTime * 4.0 * tangentHighlightPeriod, tangentHighlightPeriod) - tangentHighlightPeriod * 0.5);\n    vec3 tangentHighlightContribution = vec3(1.3, 0.2, 1.0) * (1.0/tangentHighlightDist*0.01);\n    \n   \tfloat gloss = 0.15 / (EPSILON + dotNV);\n    \n    if (rayDepth > cameraFar - EPSILON)\n    {\n        // Didn't hit anything\n        color = vec3(0.0);\n    }\n    else\n    {\n    \tcolor = light1Color * max(EPSILON, dotL1N) + light1Ambient;\n        color *= max(EPSILON, dotR1V);\n        color += vec3(0.9, 0.7, 0.2) * gloss;\n        color += tangentHighlightContribution;\n        \n        color += light2Color * max(EPSILON, dotL2N) * max(EPSILON, dotR2V);\n    }\n    \n    // Distance fog\n    vec3 fogColor = vec3(0.9, 0.2, 0.9);\n    color = mix(fogColor, color, 1.0 / (1.0 + rayDepth * 0.1));\n    \n    // Output color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}