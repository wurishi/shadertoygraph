{"ver":"0.1","info":{"id":"4csyWr","date":"1721024834","viewed":42,"name":"normal map toon shading","username":"ODtian","description":"null","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["normalmap"],"hasliked":0,"parentid":"M3VSDd","parentname":"[ARTS1308] Normal Map"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Gradient and FBM noise from iq https://www.shadertoy.com/view/XdXGW8\n//\n\nvec2 grad( ivec2 z )\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                              gr;\n}\n\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0) + iTime*0.25;\n\t\n\tfloat f = 0.0;\n\t\n    // left: noise\n    float interval = mod(iTime, 20.);\n\tif( interval <= 10. )\n\t{\n\t\tf = noise( 32.0*uv );\n\t}\n    // right: fractal noise (4 octaves)\n    else\t\n\t{\n\t\tuv *= 8.0;\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tf  = 0.5000*noise( uv ); uv = m*uv;\n\t\tf += 0.2500*noise( uv ); uv = m*uv;\n\t\tf += 0.1250*noise( uv ); uv = m*uv;\n\t\tf += 0.0625*noise( uv ); uv = m*uv;\n\t}\n\tf = 0.5 + 0.5*f;\n    //f = 0.;\n\t    \n    float depth = (interval < 10.)? 5. : 50.;\n    vec3 normal = normalize(vec3(-dFdx(f), -dFdy(f), 1./depth));\n    vec3 reflpoint = vec3( p * vec2(iResolution.x/iResolution.y,1.0) + iTime*0.25, 0.);\n    vec3 raysource = vec3((0.5 + 0.2*vec2(cos(iTime), sin(iTime))) * vec2(iResolution.x/iResolution.y,1.0) + iTime*0.25, .5);\n    vec3 raydir = normalize(reflpoint - raysource);\n    \n    float c = smoothstep(0.5, 0.51, dot(normal, -raydir)) / 3.1415926 + 0.1;\n    \n    vec3 viewpoint = vec3(0.5 * vec2(iResolution.x/iResolution.y,1.0) + iTime*0.25, 10.);\n    \n    vec3 viewdir = normalize(reflpoint - viewpoint);\n\t\n    vec3 dark = vec3(0.3, 0.2, 0.3), bright = vec3(0.4, 0.9, 0.8), high = vec3(0.78, 0.9, 0.99);\n\tvec3 col = mix(dark, bright, c);\n    \n    col += high * smoothstep(0.5, 0.51, pow(max(0.0, dot(normalize(normal - raydir), -viewdir)), 64.0));\n    //col = pow(col, vec3(0.4545));\n    fragColor = vec4(col, 1.0 );    \n}","name":"Image","description":"","type":"image"}]}