{"ver":"0.1","info":{"id":"wdKGzw","date":"1569936273","viewed":103,"name":"Mandelbrot with Antialiasing","username":"HAL9000","description":"Simple mandelbrot shader with basic antialias","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SAMPLES 2 //samples are quadratic!\n#define max_iter 512\n\nfloat lerp (float a, float b, float fac)\n{\n    return a * (1. - fac) + b * fac;\n}\n\n\nfloat brot_iter(vec2 uv)\n{\n    vec2 n = vec2(uv);\n    for(int i = 1; i < min(int(iTime*30.),512); i++){\n        n = vec2(n.x * n.x - n.y * n.y, 2. * n.x * n.y)+uv;\n        if(dot(n,n) >= 4.){\n            return float(i);\n\t    }\n    }\n    return 0.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cntr = vec2(-0.50052, 0.52);\n    float yside = mix(.00005, 2., pow(2., (cos(iTime/3.) - 1.) * 20.));\n    float xside = yside * float(iResolution.x) / iResolution.y;\n    vec2 topl = cntr - vec2(xside, yside) / 2.;\n\tvec2 botr = cntr + vec2(xside, yside) / 2.;\n   \tfloat col = 0.;\n    float half_samples = float(SAMPLES) / 2.;\n    float spacing = 1./float(SAMPLES);\n    for (int i = 0; i < SAMPLES; i++){\n        for (int j = 0; j < SAMPLES; j++){\n        \tvec2 uv = (fragCoord + vec2(i, j) * spacing)/iResolution.xy;\n    \t\tuv =  mix(topl, botr, uv);\n            col += float(brot_iter(uv));\n            //col += pow(float(brot_iter(uv)) / float(max_iter), 0.1);\n        }\n    }\n    col /= float(SAMPLES*SAMPLES) * float(max_iter);\n    col = pow(col, 0.5);\n    // Output to screen\n    fragColor = vec4(col, col, pow(1000., col) - 1.,1.0);\n}","name":"Image","description":"","type":"image"}]}