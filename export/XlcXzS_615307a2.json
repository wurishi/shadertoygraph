{"ver":"0.1","info":{"id":"XlcXzS","date":"1486703683","viewed":276,"name":"Perlin Noise Implementation","username":"sea","description":"I'm trying to implement the original Perlin noise for learning purposes, then maybe moving on to other noise functions. I used this as reference: https://en.wikipedia.org/wiki/Perlin_noise.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash (vec2 p)\n{\n    p = vec2(dot(p, vec2(189.0, 75.0)), dot(p, vec2(122.0, 220.0)));\n    return fract(sin(p) * 4328395.432885) * 2.0 - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 25.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float x0 = floor(uv.x); // Left of unit square.\n   \tfloat x1 = x0 + 1.0; // Right of unit square.\n    \n    float y0 = floor(uv.y); // Bottom of unit square.\n    float y1 = y0 + 1.0; // Top of unity square.\n    \n    vec2 bl = vec2(x0, y0); // Bottom left of unit square.\n    vec2 tr = vec2(x1, y1); // Top right of unit square.\n    \n    // Pseudo random vectors for each corner of the unit square.\n    vec2 gbl = hash(bl);\n    vec2 gtl = hash(vec2(bl.x, tr.y));\n    vec2 gtr = hash(tr);\n    vec2 gbr = hash(vec2(tr.x, bl.y));\n    \n    // Calculate distance vectors from percentage point inside \n    // vector to corner points.\n    vec2 dbl = uv - bl;\n    vec2 dtl = uv - vec2(bl.x, tr.y);\n    vec2 dtr = uv - tr;\n    vec2 dbr = uv - vec2(tr.x, bl.y);\n    \n    // Calculate dot product between distance corner vectors and \n    // pseudo random vectors for each corner of the unit square.\n    float d1 = dot(gbl, dbl);\n    float d2 = dot(gbr, dbr);\n    float d3 = dot(gtl, dtl);\n    float d4 = dot(gtr, dtr);\n    \n    // Calculate percentage point inside unit square.\n    uv = mod(uv, 1.0);\n    uv = uv * uv * (3.0 - 2.0 * uv);\n    \n    float x2 = mix(d1, d2, uv.x);\n    float x3 = mix(d3, d4, uv.x);\n    \n    float e = mix(x2, x3, uv.y) * 0.5 + 0.5;\n    vec3 color = vec3(e);\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}