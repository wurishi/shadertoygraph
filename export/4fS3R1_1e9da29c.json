{"ver":"0.1","info":{"id":"4fS3R1","date":"1712201176","viewed":56,"name":"squares_","username":"mkundera","description":"squares","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.14159;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspectratio = iResolution.y/iResolution.x;\n    \n    uv *= vec2(1.0, aspectratio);\n    \n    vec2 orig = vec2(0.5, 0.5*aspectratio);\n    \n    // to move the cube around, can move the origin according to time\n    // For instance, can uncomment this line\n    orig = vec2(0.5+ 0.5*sin(iTime*85./155.), aspectratio*(0.5 + 0.5*cos(3.*iTime)));\n    \n  \n\n    // a square \n    \n    float sq_0 = smoothstep(0.01,0.006,length(uv.x - orig.x))*smoothstep(0.01, 0.006, length(uv.y - orig.y));\n    float sq_mask = 0. ;\n    // TODO: use a sdf for square contours\n    \n    // n squares\n    \n    for (float n = 0.; n < 155.; n += 1.){\n        vec2 orig_n = vec2(0.5+0.5*sin(n/155.*iTime), aspectratio*(0.5 + 0.5*cos(3.*iTime*n/85.)));\n        \n        sq_mask += smoothstep(0.01,0.006,length(uv.x - orig_n.x))*smoothstep(0.01, 0.006, length(uv.y - orig_n.y));\n    }\n    vec3 col = vec3(1.0)*sq_mask;\n    col -= vec3(0.3,0.7,0.0)*sq_0;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}