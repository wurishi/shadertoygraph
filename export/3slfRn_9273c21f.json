{"ver":"0.1","info":{"id":"3slfRn","date":"1587605963","viewed":63,"name":"simple physics","username":"ma77os","description":"simple physics buffer test","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["physics","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2020 André Mattos\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Instructions: click and drag to throw the ball\n\nfloat circle(vec2 uv, vec2 pos, float r){\n    float d = length(pos - uv);\n    return smoothstep(r, r-d*0.05, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float ratio = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv -= 0.5;\n    \n    uv.x *= ratio;\n\n    vec2 p = texture(iChannel0, uv).xy;\n    \n    float s = circle(uv, p, ballRadius);\n    vec3 col = vec3(s);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    // output iChannel0 buffer\n    //fragColor = vec4(texture(iChannel0, fragCoord/iResolution.xy).rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// POSITION\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n    bounds.b *= ratio;\n    \n    \n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse.x *= ratio;\n    \n    \n    vec2 uv = fragCoord;\n    vec2 pos = texture(iChannel0, uv).rg;\n    vec2 vel = texture(iChannel1, uv).rg;\n    \n    vec2 prevPos = pos;\n    \n    if(iMouse.z > 0.)\n    {\n        pos = mouse;\n    }\n   \telse\n    {\n        // check bounds\n        if(pos.x < bounds.r)\n        {\n            pos.x = bounds.r;\n        }\n        if(pos.x > bounds.b)\n        {\n            pos.x = bounds.b;\n        }\n        \n        if(pos.y < bounds.g)\n        {\n            pos.y = bounds.g;\n        }\n        if(pos.y > bounds.a)\n        {\n            pos.y = bounds.a;\n        }\n        \n    \tpos += vel;\n    }\n    \n    \n\n    // Output to screen\n    fragColor = vec4(pos,prevPos);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// VELOCITY\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n    bounds.b *= ratio;\n    \n    \n    vec2 uv = fragCoord;    \n    vec2 pos = texture(iChannel0, uv).rg;\n    vec2 prevPos = texture(iChannel0, uv).ba;\n    vec2 vel = texture(iChannel1, uv).rg;\n    \n    \n    if(iMouse.z > 0.){\n        vel = pos-prevPos;\n    }\n    else\n    {\n        vel += gravity;\n        vel *= friction;\n        \n        if(pos.x < bounds.r || pos.x > bounds.b)\n            vel.x *= bounce;\n        \n        if(pos.y < bounds.g || pos.y > bounds.a)\n            vel.y *= bounce;\n    }\n    \n    \n\n    // Output to screen\n    fragColor = vec4(vel,0.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// vars\nvec2 gravity = vec2(0., -0.001);\nfloat friction = 0.99;\nfloat bounce = -0.9;\n\nfloat ballRadius = 0.1;\nvec4 bounds = vec4(0.1, 0.1, 1.0-0.1, 1.0-0.1);\n\n\n\n// functions\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}","name":"Common","description":"","type":"common"}]}