{"ver":"0.1","info":{"id":"tssBzl","date":"1588893052","viewed":54,"name":"CMPM163 LAB6","username":"Amir_Alaj","description":"Lab 6 is where we learn how to use ShaderToy and display moving cirlces with it.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shaders","graphics","lab6"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 ro, vec3 rd, vec3 p) {\n    // the distance from the point p to the ray line in 3D space\n    return length(cross(p - ro, rd))/length(rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //set origin to middle of screen\n    uv -= .5;\n    \n    //sets u axis so that the right aspect ratio is in terms of uv\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    // set the ray origin (camera position) 2 units toward the screen\n    vec3 ro = vec3(0., 0., -2.);\n    \n\t// set the ray direction, subtract ro to get intersection point\n\tvec3 rd = vec3(uv.x, uv.y, 0.) - ro;\n    \n    // per frame static variable\n    float t = iTime;\n    \n    // set point with formula to move in a circle along the xz plane\n    vec3 p = vec3(sin(t), 0, 2. + cos(t));\n    \n    // call the function that calculates distance\n    float d = DistLine(ro, rd, p);\n    \n    //performs smooth Hermite interpolation between 0 and 1\n    d = smoothstep(.1, .09, d);\n    \n    // Output to screen\n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}