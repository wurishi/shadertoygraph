{"ver":"0.1","info":{"id":"7tBXR1","date":"1627055603","viewed":222,"name":"Dual Filtered Blur (like Kawase)","username":"gfarlie","description":"An efficient blur for use on mobile platforms leveraging asymmetric weighted hardware texture sampling in several downscale & upscaling steps for very wide radius blur.\n\nAs per \"Bandwidth-Efficient Rendering\" by Marius Bjorge @ Siggraph 2015","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["blur","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy /2. +.25;\n    vec2 res = iChannelResolution[0].xy;\n\t\n    float i = SAMPLE_OFFSET;\n    i = i * sin(iTime * 0.5 + vec3(0, 0, 0)).x; // make this animated\n    \n    vec3 img = texture( iChannel1, uv*2.-.5).rgb;\n      \n    vec3 col = texture( iChannel0, uv + vec2( i, i ) / res ).rgb / 6.0;\n  \n    col += texture( iChannel0, uv + vec2( i, -i ) / res ).rgb / 6.0;\n    col += texture( iChannel0, uv + vec2( -i, i ) / res ).rgb / 6.0;\n    col += texture( iChannel0, uv + vec2( -i, -i ) / res ).rgb / 6.0;\n    \n    col += texture( iChannel0, uv + vec2( 0    , i*2.0 ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( i*2. , 0     ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( -i*2., 0     ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( 0    , -i*2. ) / res ).rgb / 12.0;\n    \n    vec3 fin = img + (col * INTENSITY);\n\n    fragColor = vec4(fin, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy *4. -1.5;\n    vec2 res = iChannelResolution[0].xy;\n\t\n    float i = SAMPLE_OFFSET;\n    i = i * sin(iTime * 0.5 + vec3(0, 0, 0)).x; // make this animated\n    \n     vec3 col = texture( iChannel0, uv).rgb / 2.0;\n    col += texture( iChannel0, uv + vec2( i, i ) / res ).rgb / 8.0;\n    col += texture( iChannel0, uv + vec2( i, -i ) / res ).rgb / 8.0;\n    col += texture( iChannel0, uv + vec2( -i, i ) / res ).rgb / 8.0;\n    col += texture( iChannel0, uv + vec2( -i, -i ) / res ).rgb / 8.0;\n      \n    //This uses iChannel1 as a brightness mask  \n    /*\n    vec3 col = texture( iChannel0, uv).rgb * texture( iChannel1, uv).r / 2.0;\n    col += texture( iChannel0, uv + vec2( i, i ) / res ).rgb * texture( iChannel1, uv + vec2( i, i ) / res ).r / 8.0;\n    col += texture( iChannel0, uv + vec2( i, -i ) / res ).rgb * texture( iChannel1, uv + vec2( i, -i ) / res ).r / 8.0;\n    col += texture( iChannel0, uv + vec2( -i, i ) / res ).rgb * texture( iChannel1, uv + vec2( -i, i ) / res ).r / 8.0;\n    col += texture( iChannel0, uv + vec2( -i, -i ) / res ).rgb * texture( iChannel1, uv + vec2( -i, -i ) / res ).r / 8.0;\n    */\n\n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy *2. -.5;\n    vec2 res = iChannelResolution[0].xy;\n\t\n    float i = SAMPLE_OFFSET;\n    i = i * sin(iTime * 0.5 + vec3(0, 0, 0)).x; // make this animated\n    \n    vec3 col = texture( iChannel0, uv).rgb / 2.0;\n    col += texture( iChannel0, uv + vec2( i, i ) / res ).rgb / 8.0;\n    col += texture( iChannel0, uv + vec2( i, -i ) / res ).rgb / 8.0;\n    col += texture( iChannel0, uv + vec2( -i, i ) / res ).rgb / 8.0;\n    col += texture( iChannel0, uv + vec2( -i, -i ) / res ).rgb / 8.0;\n    \n\n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy /2. +.25;\n    vec2 res = iChannelResolution[0].xy;\n\t\n    float i = SAMPLE_OFFSET;\n    i = i * sin(iTime * 0.5 + vec3(0, 0, 0)).x; // make this animated\n    \n    vec3 col = texture( iChannel0, uv + vec2( i, i ) / res ).rgb / 6.0;\n    col += texture( iChannel0, uv + vec2( i, -i ) / res ).rgb / 6.0;\n    col += texture( iChannel0, uv + vec2( -i, i ) / res ).rgb / 6.0;\n    col += texture( iChannel0, uv + vec2( -i, -i ) / res ).rgb / 6.0;\n    \n    col += texture( iChannel0, uv + vec2( 0    , i*2.0 ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( i*2. , 0     ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( -i*2., 0     ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( 0    , -i*2. ) / res ).rgb / 12.0;\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy /2. +.25;\n    vec2 res = iChannelResolution[0].xy;\n\t\n    float i = SAMPLE_OFFSET;\n    i = i * sin(iTime * 0.5 + vec3(0, 0, 0)).x; // make this animated\n    \n    vec3 col = texture( iChannel0, uv + vec2( i, i ) / res ).rgb / 6.0;\n    col += texture( iChannel0, uv + vec2( i, -i ) / res ).rgb / 6.0;\n    col += texture( iChannel0, uv + vec2( -i, i ) / res ).rgb / 6.0;\n    col += texture( iChannel0, uv + vec2( -i, -i ) / res ).rgb / 6.0;\n    \n    col += texture( iChannel0, uv + vec2( 0    , i*2.0 ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( i*2. , 0     ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( -i*2., 0     ) / res ).rgb / 12.0;\n    col += texture( iChannel0, uv + vec2( 0    , -i*2. ) / res ).rgb / 12.0;\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SAMPLE_OFFSET 5.\n\n#define INTENSITY 1.","name":"Common","description":"","type":"common"}]}