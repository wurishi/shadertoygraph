{"ver":"0.1","info":{"id":"WstfWn","date":"1604829328","viewed":148,"name":"Floor Raycast","username":"Omega","description":"Projecting a floor texture via raycasting and lighting it with ambient light and a bright point light.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raylightpoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\n#define LIGHT_AMB vec3(0.02, 0.02, 0.05)\n\nraycastHit raycastPlaneXZ(vec3 ro, vec3 rd) {\n    if (sign(ro.y) == sign(rd.y)) {\n    \treturn raycastHit(vec3(0.), 0.);\n    }\n    float d = ro.y / abs(rd.y);\n    return raycastHit(vec3(ro.x + rd.x * d, 0., ro.z + rd.z * d), 1.);\n}\n\nvec3 texturePlaneXZ(vec3 pos) {\n\treturn texture(iChannel0, pos.xz).rgb;\n}\n\nconst vec3 camera = vec3(0., 1., 0.);\n\n\n pointLight pointLight1= pointLight(vec3(2., .5, 2.), vec3(2.));\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Transform uv to y = -1..+1\n    vec2 uv = (fragCoord/iResolution.y) * 2.;\n    uv -= iResolution.xy/iResolution.y;\n\t\n    // Calculate raydirection\n    vec3 rd = normalize(vec3(uv, 1.));\n    rd = pitch(rd, iMouse.y * 0.01);\n    rd = yaw(rd, iMouse.x * 0.01);\n    \n    // Raycast\n    raycastHit hit = raycastPlaneXZ(camera, rd);\n    vec3 tex = texturePlaneXZ(hit.pos);\n    \n    pointLight1.pos = vec3(cos(iTime) * 2., .5, sin(iTime) * 2.);\n    vec3 colPL1 = pointLight1.col / distance(hit.pos, pointLight1.pos);\n    \n    vec3 col = (tex * (colPL1 + LIGHT_AMB) * hit.mask) +\n               (LIGHT_AMB * (1.-hit.mask));\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct pointLight {\n\tvec3 pos;\n    vec3 col;\n};\n\nstruct raycastHit {\n    vec3 pos;\n    float mask;\n};\n\nvec3 pitch(vec3 p, float a)\n{\n    vec3 pitched = vec3(p.x, p.y * cos(a) - p.z * sin(a), p.y * sin(a) + p.z * cos(a));\n    return pitched;\n}\n\nvec3 yaw(vec3 p, float a)\n{\n    vec3 yawed = vec3(p.x * cos(a) - p.z * sin(a), p.y, p.x * sin(a) + p.z * cos(a));\n    return yawed;\n}\n\nvec3 roll(vec3 p, float a)\n{\n    vec3 rolled = vec3(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a), p.z);\n    return rolled;\n}","name":"Common","description":"","type":"common"}]}