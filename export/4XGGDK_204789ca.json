{"ver":"0.1","info":{"id":"4XGGDK","date":"1718204326","viewed":141,"name":"Apple ripple","username":"Rahiche","description":"Apple ripple effect from wwdc24 demo:\nCreating visual effects with SwiftUI\n\nhttps://developer.apple.com/documentation/swiftui/creating-visual-effects-with-swiftui","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["water","ripple","apple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis shader is ported from the original Apple shader presented at WWDC 2024.\nFor more details, see the session here: https://developer.apple.com/videos/play/wwdc2024/10151/\nCredit to Apple for the original implementation.\n*/\n\n\nconst float amplitude = 0.1; // Default amplitude of the ripple\nconst float frequency = 10.0; // Default frequency of the ripple\nconst float decay = 2.0; // Default decay rate of the ripple\nconst float speed = 1.0; // Default speed of the ripple\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize the coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Get the cursor position and normalize it\n    vec2 origin = iMouse.xy / iResolution.xy;\n\n    // Calculate the distance from the origin\n    float distance = length(uv - origin);\n    // Calculate the delay based on the distance\n    float delay = distance / speed;\n\n    // Adjust the time for the delay and clamp to 0\n    float time = iTime - delay;\n    time = max(0.0, time);\n\n    // Calculate the ripple amount\n    float rippleAmount = amplitude * sin(frequency * time) * exp(-decay * time);\n\n    // Calculate the normalized direction vector\n    vec2 n = normalize(uv - origin);\n\n    // Calculate the new position by adding the ripple effect\n    vec2 newPosition = uv + rippleAmount * n;\n\n    // Sample the texture at the new position\n    vec3 color = texture(iChannel0, newPosition).rgb;\n\n    // Lighten or darken the color based on the ripple amount\n    color += 0.3 * (rippleAmount / amplitude);\n\n    // Set the fragment color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}