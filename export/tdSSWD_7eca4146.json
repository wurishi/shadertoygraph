{"ver":"0.1","info":{"id":"tdSSWD","date":"1553785220","viewed":167,"name":"trippy voronoi","username":"nexor","description":"voronoi","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 ones = vec4(1.0);\n\nfloat sum(vec4 a)\n{\n\treturn dot(a,ones);   \n}\nfloat sum(vec3 a)\n{\t\n    return dot(a,ones.xxx);\n}\nfloat sum(vec2 a)\n{\n    return dot(a,ones.xx);\n}\n\nint floor_to_int(float x)\n{\n    return int(floor(x));\n}\n\nint quick_floor(float x)\n{\n    return int(x) - 1 + int(step(0.,x));\n}\n\nfloat integer_noise(int n)\n{\n    int nn;\n    n = (n + 1013) & 0x7fffffff;\n    n = (n >> 13) ^ n;\n    nn = (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n    return 0.5 * (float(nn) / 1073741824.0);\n}\n\nuint hash(uint kx, uint ky, uint kz)\n{\n#define rot(x, k) (((x) << (k)) | ((x) >> (32 - (k))))\n#define final(a, b, c) \\\n{ \\\n    c ^= b; c -= rot(b, 14); \\\n    a ^= c; a -= rot(c, 11); \\\n    b ^= a; b -= rot(a, 25); \\\n    c ^= b; c -= rot(b, 16); \\\n    a ^= c; a -= rot(c, 4);  \\\n    b ^= a; b -= rot(a, 14); \\\n    c ^= b; c -= rot(b, 24); \\\n}\n    // now hash the data!\n    uint a, b, c, len = 3u;\n    a = b = c = 0xdeadbeefu + (len << 2u) + 13u;\n\n    c += kz;\n    b += ky;\n    a += kx;\n    final (a, b, c);\n\n    return c;\n#undef rot\n#undef final\n}\n\nuint hash(int kx, int ky, int kz)\n{\n    return hash(uint(kx), uint(ky), uint(kz));\n}\n\nfloat bits_to_01(uint bits)\n{\n    return (float(bits) / 4294967295.0);\n}\n\nfloat cellnoise(vec3 p)\n{\n    int ix = quick_floor(p.x);\n    int iy = quick_floor(p.y);\n    int iz = quick_floor(p.z);\n\n    return bits_to_01(hash(ix,iy,iz));\n}\n\nvec3 cellnoise_color(vec3 p)\n{\n    float r = cellnoise(p.xyz);\n    float g = cellnoise(p.yxz);\n    float b = cellnoise(p.yzx);\n\n    return vec3(r, g, b);\n}\n\nvoid node_tex_voronoi(vec3 co, float scale, float exponent, float coloring, float metric, float feature, out vec4 color, out float fac)\n{\n    vec3 p = co * scale;\n    int xx, yy, zz, xi, yi, zi;\n    float da[4];\n    vec3 pa[4];\n\n    xi = floor_to_int(p[0]);\n    yi = floor_to_int(p[1]);\n    zi = floor_to_int(p[2]);\n\n    da[0] = 1e+10;\n    da[1] = 1e+10;\n    da[2] = 1e+10;\n    da[3] = 1e+10;\n\n    for (xx = xi - 2; xx <= xi + 2; xx++) {\n        for (yy = yi - 2; yy <= yi + 2; yy++) {\n            for (zz = zi - 2; zz <= zi + 2; zz++) {\n                vec3 ip = vec3(xx, yy, zz);\n                vec3 vp = cellnoise_color(ip);\n                vec3 pd = p - (vp + ip);\n\n                float d = 0.0;\n                if (metric == 0.0) { /* SHD_VORONOI_DISTANCE 0 */\n                    d = dot(pd, pd);\n                }\n                else if (metric == 1.0) { /* SHD_VORONOI_MANHATTAN 1 */\n                    d = sum(abs(pd));\n                }\n                else if (metric == 2.0) { /* SHD_VORONOI_CHEBYCHEV 2 */\n                    d = max(abs(pd[0]), max(abs(pd[1]), abs(pd[2])));\n                }\n                else if (metric == 3.0) { /* SHD_VORONOI_MINKOWSKI 3 */\n                    d = pow(sum(pow(abs(pd), vec3(exponent))), 1.0/exponent);\n                }\n\n                vp += ip;\n                if (d < da[0]) {\n                    da[3] = da[2];\n                    da[2] = da[1];\n                    da[1] = da[0];\n                    da[0] = d;\n                    pa[3] = pa[2];\n                    pa[2] = pa[1];\n                    pa[1] = pa[0];\n                    pa[0] = vp;\n                }\n                else if (d < da[1]) {\n                    da[3] = da[2];\n                    da[2] = da[1];\n                    da[1] = d;\n\n                    pa[3] = pa[2];\n                    pa[2] = pa[1];\n                    pa[1] = vp;\n                }\n                else if (d < da[2]) {\n                    da[3] = da[2];\n                    da[2] = d;\n\n                    pa[3] = pa[2];\n                    pa[2] = vp;\n                }\n                else if (d < da[3]) {\n                    da[3] = d;\n                    pa[3] = vp;\n                }\n            }\n        }\n    }\n    /* Color output */\n    vec3 col = vec3(fac, fac, fac);\n    if (feature == 0.0) { /* F1 */\n        col = pa[0];\n        fac = abs(da[0]);\n    }\n    else if (feature == 1.0) { /* F2 */\n        col = pa[1];\n        fac = abs(da[1]);\n    }\n    else if (feature == 2.0) { /* F3 */\n        col = pa[2];\n        fac = abs(da[2]);\n    }\n    else if (feature == 3.0) { /* F4 */\n        col = pa[3];\n        fac = abs(da[3]);\n    }\n    else if (feature == 4.0) { /* F2F1 */\n        col = abs(pa[1] - pa[0]);\n        fac = abs(da[1] - da[0]);\n    }\n\n    if (coloring == 0.0) {\n        color = vec4(fac, fac, fac, 1.0);\n    }\n    else {\n        color = vec4(cellnoise_color(col), 1.0);\n    }\n}\n\nconst float scale = 0.005;\nconst float exponent = 0.5;\nconst float coloring = 1.;\nconst float metric = 0.;\nconst float feature = 1.;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 p = vec3(fragCoord.xy,iTime*50.);\n    vec4 color;\n    float fac;\n    node_tex_voronoi(p,  scale,  exponent,  coloring,  metric,  feature, color, fac);\n    fragColor = color * (1.-sin(fac*150.));\n}","name":"Image","description":"","type":"image"}]}