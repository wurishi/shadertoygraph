{"ver":"0.1","info":{"id":"3lGyD1","date":"1610966516","viewed":94,"name":"elisha464 - voroni with edges","username":"elisha464","description":"voronoi","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise21(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec2 noise22(vec2 p) {\n    return fract(vec2(noise21(p), noise21(p+232.245)));\n}\n\nvec3 noise23(vec2 p) {\n    return fract(vec3(noise21(p), noise21(p+232.245), noise21(p+345.768)));\n}\n\nvec3 voronoi(vec2 p) {\n    vec2 id = floor(p);\n    float d = 10.0;\n    vec2 closestPoint = id + noise22(id);\n    float dToEdge = 10.0;\n    \n    // find colsest point\n    for (float i=-1.0; i<=1.0; i++) {\n        for (float j=-1.0; j<=1.0; j++) {\n            vec2 currCellId = id + vec2(i, j);\n            vec2 currPoint = (currCellId + noise22(currCellId));\n            float currDistance = length(p - currPoint);\n            if (currDistance < d) {\n                closestPoint = currPoint;\n                d = currDistance;\n            }\n        }\n    }\n    \n    // find distance to edge\n    float distanceToEdge = 10.0;\n    for (float i=-1.0; i<=1.0; i++) {\n        for (float j=-1.0; j<=1.0; j++) {\n            vec2 currCellId = id + vec2(i, j);\n            vec2 currPoint = (currCellId + noise22(currCellId));\n            \n            if (length(closestPoint - currPoint) < 0.001) continue;\n            \n            vec2 currPointDir = currPoint - closestPoint;\n            vec2 midPoint = (currPoint + closestPoint)*0.5;\n            \n            distanceToEdge = min(dot(midPoint - p, normalize(currPointDir)), distanceToEdge);\n            \n            //vec2 midPoint = id\n        }\n    }\n    float edgeWidth = 0.07;\n    float edgeSmooth = 0.02;\n    return smoothstep(edgeWidth-edgeSmooth, edgeWidth, distanceToEdge) * noise23(closestPoint);\n    //return vec3(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    p *= 10.0;\n    p += iTime;\n\n    vec3 col = vec3(0.0);\n    col += voronoi(p);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}