{"ver":"0.1","info":{"id":"mltyzl","date":"1699566962","viewed":45,"name":"Dolphin_Smiley","username":"dolphin","description":"A smiley face\nreference: https://www.youtube.com/watch?v=ZlNnrpM0TRg&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=6","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n#define sat(x) clamp(x, 0., 1.)\n\n\nvec4 rgb256(float r, float g, float b){\n    return vec4(r/256., g/256., b/256., 1.);\n}\n\n\nfloat remap01(float a, float b, float t){\n    return sat((t-a)/(b-a));\n}\n\nfloat remap(float a, float b, float c, float d, float t){\n    return sat(((t-a)/(b-a)) * (t-c) + c);\n}\n\n\n// rect: remap right, down, left, up not exactly true\nvec2 remap_uv(vec2 uv, vec4 rect){\n    return (uv-rect.xy)/(rect.zw-rect.xy);\n}\n\nvec4 Eye(vec2 uv){\n    uv -= .5; // since remapping uv, need re-normalized\n    float len = length(uv);\n    \n    \n    vec4 c_black = vec4(0., 0., 0., 1.);\n    vec4 c_white = vec4(1., 1., 1., 1.);\n    vec4 c_iris = rgb256(149., 216., 245.);\n    vec4 c_eyeinner = rgb256(88., 181., 255.);\n    vec4 c_eyeoutline = rgb256(125., 66., 0.);\n    \n    // draw eye base color\n    vec4 c_eye = mix(c_white, c_iris, S(.25, .5, len));\n    \n   \n    // draw inner eye\n    float eyeinner_mask = S(.27, .25, len);\n    float eyeinner_shade = remap01(.25, .2, len);\n    c_eyeinner.rgb *= eyeinner_shade;\n    c_eye.rgb = mix(c_eye.rgb, c_eyeinner.rgb, eyeinner_mask);\n    \n    // draw the pupil\n    c_eye.rgb = mix(c_eye.rgb, c_black.rgb, S(.16, .14, len));\n\n    // draw the eye light\n    float len1 = length(uv - vec2(-.13, .11));\n    float eyelight1_mask = S(.1, .08, len1);\n    c_eye.rgb = mix(c_eye.rgb, c_white.rgb, eyelight1_mask);\n    \n    float len2 = length(uv - vec2(.13, -.11));\n    float eyelight2_mask = S(.08, .06, len2);\n    c_eye.rgb = mix(c_eye.rgb, c_white.rgb, eyelight2_mask);\n    \n    \n    // draw the eye outline\n    float eyeoutline_mask = S(.45, .46, len);\n    c_eye.rgb = mix(c_eye.rgb, c_eyeoutline.rgb, eyeoutline_mask);\n    \n    // draw the upper eyelash\n    float eyelash_mask = S(.42, .45, len) * S(-.3, .28, uv.y);\n    c_eye.rgb = mix(c_eye.rgb, c_black.rgb, eyelash_mask);\n    \n   \n    c_eye.a = S(.5, .48, len);\n    \n    return c_eye;\n\n}\n\nvec4 Mouse(vec2 uv){\n    float t = iTime * 3.;\n    uv -= .5;\n    uv.y -= uv.x*uv.x*-3.*sin(t);\n    \n    float len = length(uv);\n    \n    vec4 c_mouse = rgb256(79., 25., 2.);\n    vec4 c_inner = rgb256(113., 10., 0.);\n    vec4 c_outline = rgb256(192., 94., 0.);\n    \n    // draw the inner mouse\n    c_mouse.rgb = mix(c_mouse.rgb, c_inner.rgb, S(-.4, .4,uv.y));\n    \n    \n    // draw the mouse outline\n    float outline_mask = S(.24, .26, len);\n    c_mouse.rgb = mix(c_mouse.rgb, c_outline.rgb, outline_mask);\n    \n    c_mouse.a = S(.3, .28, len);\n    \n    \n    \n    \n    return c_mouse;\n\n}\n\n\nvec4 Head(vec2 uv){\n    \n    float len = length(uv);\n    \n    // define the color\n    vec4 c_face = rgb256(255., 173., 0.);\n    vec4 c_outline = rgb256(193., 107., 0.);\n    vec4 c_highlight = rgb256(255., 229., 153.);\n    vec4 c_cheeks = rgb256(238., 124., 0.);\n    \n    c_face.a = S(.5, .49, len);\n    \n    // draw a gradual shading of the face\n    // face_shade is actually an animation curve that mimic a good shading effect\n    float face_shade = 1. - remap01(.35, .5, len)*remap01(.35, .5, len)*.5;\n    c_face.rgb *= face_shade;\n    \n    // add the outline color to the face\n    c_face.rgb = mix(c_face.rgb, c_outline.rgb, S(.47, .48, len));\n    \n    // add the highlight color to the face\n    float hightlight_mask = S(.4, .395, len);\n    hightlight_mask *= remap(.4, .0, 1., .0, uv.y); // only maintain the upper color\n    c_face.rgb = mix(c_face.rgb, c_highlight.rgb, hightlight_mask);\n    \n    // add the cheeks to the face\n    float len1 = length(uv-vec2(-.25, -.15)); // move the position of the uv\n    float cheek1_mask = S(.25, .01, len1);\n    float len2 = length(uv-vec2(.25, -.15));\n    float cheek2_mask = S(.25, .01, len2);\n    float cheek_mask = cheek1_mask + cheek2_mask;\n    c_face.rgb = mix(c_face.rgb, c_cheeks.rgb, cheek_mask);\n    \n    return c_face;\n}\n\n\n\nvec4 Smiley(vec2 uv){\n\n    vec4 c = vec4(0.);\n    vec4 head = Head(uv);\n    \n    vec4 eye1 = Eye(remap_uv(uv, vec4(.04, -.13, .37, .22)));\n    vec4 eye2 = Eye(remap_uv(uv, vec4(-.37, -.13, -.04, .22)));\n    \n    vec4 mouse = Mouse(remap_uv(uv, vec4(-.3, -.35, .3, -.15)));\n    \n    // mix(a, b, t)\n    // mix two value a and b (float, vec) based on the t range from [0, 1]\n    // if t=0 return a, if t=1 return b\n    // this is used to blend different colors together\n    c = mix(c, head, head.a);\n    c = mix(c, eye1, eye1.a);\n    c = mix(c, eye2, eye2.a);\n    c = mix(c, mouse, mouse.a);\n    \n    return c;\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n  \n    fragColor = Smiley(uv);\n}","name":"Image","description":"","type":"image"}]}