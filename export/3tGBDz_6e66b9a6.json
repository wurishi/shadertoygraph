{"ver":"0.1","info":{"id":"3tGBDz","date":"1614153111","viewed":377,"name":"one more cubemap access","username":"FabriceNeyret2","description":"( why is CubeMap face mapping so painful ? )\n\nFor instance, can be used as 6 buffers 1024x1024 ( power of 2 is nice, & const whatever screen resolution )\nT(U,n) mimic access to  buffer n = 0..5.  MIPmap can be used as well\n( attention: half-floats only )","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["cubemapa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define hue(v)  ( .6 + .6 * cos( (v)  + vec4(0,23,21,0)  ) ) // https://www.shadertoy.com/view/ll2cDc\n \nvoid mainImage( out vec4 O, vec2 u )\n{ \n    vec2 R = iResolution.xy,\n         U = vec2(3,2)*u/R,                      // tileId\n         F = fract(U);                           // tileCoord\n         \n    int n = int(U.x) + 3*int(U.y);               // cubeMap faceId\n    O = T(F,n);                                  // return E: cubemap 3coord\n    O = O.z * hue ( F.y>.5 ? O.x : O.y );        // face: top:    O.x = init n  \n                                                 //       bottom: O.y = test reconstructed n\n                                                 //               O.z = ground texture\n    if ( min(F.x,F.y) < .01 ) O-=O;              // borders\n    if (U.x<.05) O = hue( floor(6.*(.5*U.y)) );  // color scheme\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":" void mainCubemap( out vec4 O, vec2 U, vec3 o, vec3 D )\n{\n    vec3 A = abs(D);\n    int n = A.x > A.y ? A.x > A.z ? 0 : 2 : A.y > A.z ? 1 : 2; // faceID\n    if (D[n]<0.) n += 3;\n    \n    O = texture(iChannel0,D);                                  // restore global state\n    \n    if (iFrame<1) { O = vec4(n,0,0,0); return; }               // init\n    \n    O.y = T(U/1024.,n).x;                                      // access to face n\n                                                               // test rebuild E = D\n    \n    O.z = texture(iChannel1, U/1024. ).r;                      // texture, to check orientation\n}\n\n","name":"Cube A","description":"","type":"cubemap"},{"inputs":[],"outputs":[],"code":"vec3 E;\n#define T(U,n) ( E = vec3( 2.*fract(U) -1., 1 )                                 \\\n                   * vec3( n==0||n==5 ?-1:1 , n!=1 ?-1:1 , n>2 ?-1:1 ),         \\\n                 E = (n)%3 != 2 ? E.yzx : E.xzy,                                \\\n                 texture( iChannel0, vec3( E[(n+1)%3], E[(n)%3], E[(n+2)%3] ) ) \\\n               )\n\n","name":"Common","description":"","type":"common"}]}