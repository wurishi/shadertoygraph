{"ver":"0.1","info":{"id":"wl3SDf","date":"1581842881","viewed":65,"name":"parametric polar Plotter","username":"hazenn","description":"dqzdqzvedqsdv","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["polarcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float PI = 3.1415926535897932384626433;\nconst int steps = 20;\n\nfloat f(float a,float t){\n    return 0.45*cos(0.01*sin(0.2*t)*PI*a+0.1*t);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    float r = length(uv);\n    // theta in ]-pi,pi[\n    float theta0 = 2. * atan(uv.y / (uv.x + r));\n    \n    float min_d= 10000.;\n    \n    float theta = theta0;\n    for (int i = 0; i < steps; i++){\n        min_d = min(min_d, abs(r - f(theta,iTime)));\n            \n            \n    \ttheta += 2.*PI;\n    }\n    theta = theta0;\n    for (int i = 0; i < steps; i++){\n        min_d = min(min_d, abs(r - f(theta,iTime)));\n            \n            \n    \ttheta -= 2.*PI;\n    }\n    col += smoothstep(0.002,0.0025,min_d);\n\t\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}