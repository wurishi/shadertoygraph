{"ver":"0.1","info":{"id":"wlfyz7","date":"1591671813","viewed":201,"name":"Traling in 2 passes","username":"toeyn","description":"Draw trailing","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["trail","2passes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 toGamma(vec3 rcolor){\n  return pow(abs(rcolor), vec3(1.0/2.2));\n}\n\nvec3 saturation(vec3 c, float t) {\n    return mix(vec3(dot(c,vec3(0.2126,0.7152,0.0722))),c,t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // read buffer\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    // add colors. Comment this block for B/W version\n    vec3 red = vec3(1.0, 0.353, 0.208);\n\tvec3 blu = vec3(0.086, 0.29, 0.8);\n    col = vec3(col.x)*red;\n    col += blu*(1.0 -col.x);\n\n    // Color correction\n    col = toGamma(col);\n    col = saturation(col, 0.7);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash(float n) { return fract(sin(n) * 1e4); }\nfloat fnoise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\nfloat circle(vec2 uv, float rad, vec2 pos){\n\n    return 1.0-smoothstep(distance(pos, uv),0.1, 0.095);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = fragCoord.xy / iResolution.xy;\n\t vec2 p = vec2(\n        sin(iTime * 2.0) * 0.5, \n        cos(iTime * 6.0) * 0.5\n    );\n\t\n    \n\tvec4 old = texture(iChannel1, st);    \n\told*= 0.96;\n\n    vec2 uv =  (2. * fragCoord.xy - iResolution.xy ) / iResolution.y;\n    vec4 new = vec4(vec3(circle(uv, 0.2, p)), 1.0);\n \n    fragColor = new+old;\n}","name":"Buffer A","description":"","type":"buffer"}]}