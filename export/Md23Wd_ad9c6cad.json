{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//Based on https://www.shadertoy.com/view/4ds3zn by IQ \n\n#define igt  iTime\n\nvec4 ot=vec4(1.);\nfloat g=1.15;\n\nconst int MaxIter = 15;\n\nfloat zoom=4.;\nvec3 dim=vec3(1.5, .2 ,1.3);//vec3(.5, .5+.4*cos(igt*.2),1.);\n\n\n\n//from Tree in grass by alleycatsphinx : https://www.shadertoy.com/view/Xd2GDy \nvec3 foldY(vec3 P, float c)\n{\n\tfloat r = length(P.xz);\n\tfloat a = atan(P.z, P.x);\n\n\ta = mod(a, 2.0 * c) - c; \n\n\tP.x = r * cos(a);\n\tP.z = r * sin(a);\n\n\treturn P;\n}\n\n\n\nvec2 rot(vec2 p, float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\n\treturn vec2(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nfloat map(vec3 p)\n{ \n    p.y+=.3*sin(p.x+igt*.5)*cos(p.y);\n\tp.xz=mod(10.+p.xz,20.)-10.;\n\tif(length(p.xz)>1.5)    \n\t\tif(p.y<0.){\n\t\t\tp.xz=mod(2.+p.xz,4.)-2.;\n\t\t\tp.y+=11.5;}\n\t\n\tfloat l= length(p*dim)-1.;\n    float dr = 1.0;\n    ot = vec4(1.);\n\t\t\t\t\n\tfor(int i=0;i<MaxIter;i++) {\n\n\t\tif(i-(i/3)*5==0)\n\t\t\tp = foldY(p, 1.047);\n\t\tp.yz = abs(p.yz);\t\n\t\tp.xz= rot(p.xz,1.9);\n\t\tp.xy= rot(p.xy,-.43);\n        p =  p * g -vec3(1.2,1.4,0.);\n\n\t\t\n\t\tdr *= g;\n\t\tot=min(ot,vec4(abs(p),dot(p,p)));\n        l = min (l ,(length(p*dim)-1.) / dr);\n\t}\n\t\t\t\n    return l;    \n}\n\n\nfloat trace( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 60.;\n\tfloat precis = 0.001;\n      \n    float h=precis*2.0;\n    float t = 0.0;\n    for( int i=0; i<150; i++ )\n    {\n\tif( t>maxd ||  h<precis*(.1+t)) continue;//break;//        \n        \n        t += h;\n\t\th = map( ro+rd*t );\n    }\n\n   \tif( t>maxd ) t=-1.0;\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3  eps = vec3(.0001,0.0,0.0);\n\tvec3 nor;\n\tnor.x = map(pos+eps.xyy) - map(pos-eps.xyy);\n\tnor.y = map(pos+eps.yxy) - map(pos-eps.yxy);\n\tnor.z = map(pos+eps.yyx) - map(pos-eps.yyx);\n\treturn normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n        p.x *= iResolution.x/iResolution.y;\n\t\n\tvec2 m = vec2(-0.5)*6.28;\n\tif( iMouse.z>0.0 )m = (iMouse.xy/iResolution.xy-.5)*6.28;\n\tm+=.5*vec2(cos(0.15*igt),cos(0.09*igt))+.3;      \n\t\n    // camera\n\n\tzoom = (3.8+sin(.2*igt))/2.2;\n\tvec3 ta = vec3(0.,4.1,0.);\n\tvec3 ro =ta  -zoom*10.*vec3( cos(m.x)*cos(m.y), sin(m.y), sin(m.x)*cos(m.y));\n\t\n\t\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.,1.,0.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = normalize(cross(cu,cw));\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n\n    // trace\n\n   \n\t\n\tvec3 col = vec3(0.8,0.8,1.);\n\tfloat t = trace( ro, rd );\n\tif( t>0.0 )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = calcNormal( pos );\n\t\t\n\t\t// lighting\n        vec3  light1 = vec3(  0.577, 0.577, -0.577 );\n        vec3  light2 = vec3( -0.707, -0.707,0.0  );\n\t\tfloat key = clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tfloat bac = clamp( 0.2 + 0.8*dot( light2, nor ), 0.0, 1.0 );\n\t\tfloat amb = (0.7+0.3*nor.y);\n\t\tfloat ao = pow( clamp(ot.w*6.0,0.2,1.0), 1.2 );\t\t\n                vec3 brdf = vec3(ao)*(.4*amb+key+.2*bac);\n\n        // material\t\t\t\t\n\t\tvec3 rgb =ot.rgb*vec3(.8,.7,.3);//1.-sqrt(3.*ot.brg);\n\t\t\n\t\t// color\n\t\tcol = mix(vec3(0.8,0.8,1.),rgb*brdf,exp(-0.04*t));\n\n\t}\n\n\tfragColor=vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Md23Wd","date":"1395790668","viewed":299,"name":"Orchard","username":"guil","description":"test","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal","tree","kifs"],"hasliked":0,"parentid":"","parentname":""}}