{"ver":"0.1","info":{"id":"7scXW8","date":"1633017714","viewed":70,"name":"Lesson-0124","username":"xlat","description":"Lesson-0124","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fragmentshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///----------------------------------------------------------------------------|\n/// XLAT\n/// www.cyberforum.ru\n///----------------------------------------------------------------------------:\n/// (... written on the knee, no optimizations or obfuscations ...)\n///----------------------------------------------------------------------------:\n\n///------------------------|\n/// Config.                |\n///------------------------:\nconst float RADIUS   =  0.47;\nconst float NSEC     =  8.0;\n///------------------------.\n\nconst vec4  RED      = vec4(0.6, 0. , 0. , 1.);\nconst vec4  BGROUND  = vec4(0.0, 0.0, 0.2, 1.);\n\nconst float PIx2     = 6.2831853;\n\nfloat distance_x2(vec2 p1, vec2 p2)\n{   vec2   dp = p1 - p2;\n    return dp.x * dp.x + dp.y * dp.y;\n}\n\nbool isCircle(vec2 p, float radius)\n{   float d = distance_x2(p, vec2(0., 0.));\n    float r = radius * radius;\n    if( d < r && d > r * 0.8 ) return true ;\n                               return false;\n}\n\nfloat Speed ;\n\nvec2 rot(vec2 p, float a)\n{   return vec2( p.x * cos(a) - p.y * sin(a),\n                 p.x * sin(a) + p.y * cos(a) );\n}\n\nfloat getAngle(vec2 pos)\n{   vec2 p = normalize(pos);\n    \n    if(p.y > 0.0) return        acos(p.x);\n    else          return PIx2 - acos(p.x);\n}\n\nvec4 colorSectors(vec2 pos)\n{\n    pos = rot(pos - 0.5, iTime);\n\n    if(RADIUS * RADIUS < pos.x * pos.x + pos.y * pos.y) return BGROUND;\n\n    float asector = PIx2 / NSEC  ;\n    float a       = getAngle(pos);\n\n    for(float i = asector, j = 0.; i < PIx2; i += asector, j += 1.)\n    {\n        if(a < i)\n        {   \n            if(mod(j, 2.) == 0.) return vec4(1.-i, j/8., 0.7, 1.);\n            else                 return vec4(j/8., 0.7, 1.-i, 1.);\n        }\n    }\n\n    return RED;\n}\n\n///----------------------------------------------------------------------------|\n/// Run.\n///----------------------------------------------------------------------------:\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv   = fragCoord/iResolution.xy;\n\n    fragColor = colorSectors(uv);\n}\n","name":"Image","description":"","type":"image"}]}