{"ver":"0.1","info":{"id":"wlVXzW","date":"1582321290","viewed":296,"name":"Turbulent Chaos","username":"Randomi","description":"12 lines of code, 12 cups of coffee","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["distortion","turbulence","flow","assembly","chaostheory","assemblywinter","fasteffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Gotta go fast af\n    float time2k = iTime*2.0-5.0;\n    \n    //Normalize to the middle of the screen, -0.5 -> 0.5\n    vec2 uv = fragCoord/iResolution.xy-vec2(0.5);\n    \n    //Norm so that the primary distortions are round. Large effect on the shape of distortions\n    float norm = dot(uv,uv)*0.05-0.4; \n    \n    /*The amount of times the distortion patterns are calculated, higher detail = more detail(Wow!). \n\t>25 gives quickly a headache, the amount of detail could be compared to a fractal: the more detail\n    you compute for the swirlies, the deeper you could zoom to have a clear pattern. Also, time-variance \n    gives an interesting effect, for example 17 + int(round(x.*sin/cos(time2k))) */\n    int detail = 17;\n\n    /*Where the \"magic\" happens. A time varying vector, from which sin & cos components are subtracted or added\n    This creates the swirly effect they have with some math-fuckery\n    Varying these parameters changes the distortion completely*/\n    vec3 magic = sin(time2k*1.5*norm*vec3(0.2,0.29,0.33));\n    for(int i = 0; i < detail; i++){\n        //Playing around with these parameters has the biggest impact on the created distortions and their formation\n        //Especially changing the vector components changes to flow of waves\n     \tmagic += sin(magic.yzx-uv.yxy*norm*float(i)*float(i)-0.1);\n        magic += cos(magic.yxz-uv.xyx*norm*float(i)*float(i)+0.1);\n    }    \n    //Take the x-component of the vector. Other components also give interesting patterns, and they also have some weird symmetries\n    float value = magic.x*0.45;\n    \n    //Mainly for adding contrast\n    value -= smoothstep(0.5,0.5,norm*0.4)*1.2-0.6;\n    \n    //Choose the colors, time-based variance also adds an interesting effect here\n    fragColor = vec4(vec3(0.0,value/4.5,value/2.0),1.0);   \n}","name":"Image","description":"","type":"image"}]}