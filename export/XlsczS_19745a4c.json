{"ver":"0.1","info":{"id":"XlsczS","date":"1505301280","viewed":506,"name":"N-gon signed distance field","username":"etale_cohomology","description":"Fork of https://www.shadertoy.com/view/MlcXDB\n\nA signed distance field for a regular n-gon on the plane.... I think","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","antialias","distance","field","geometry","ngon","signed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of https://www.shadertoy.com/view/MlcXDB\n\n#define NGON_NSIDES_MIN 3.\n#define NGON_NSIDES_MAX 16.\n\n#define time (.25 * iTime)\n\n#define PI  3.14159\n#define XI  (.5 * PI)\n#define TAU (2. * PI)\n\n// SDF stolen from https://www.shadertoy.com/view/MlcXDB\nfloat sdf_ngon(vec2 uv, float radius, float nsides){\n  float angle = atan(uv.y, uv.x) + XI;\n  float split = TAU / nsides;\n  return length(uv) * cos(split * floor(.5 + angle / split) - angle) - radius;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv =  (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec2  ngon_uv = uv - .25 * vec2(2. * cos(iTime), sin(2. * iTime));  // Displace!\n          ngon_uv *= mat2(cos(time), sin(time), -sin(time), cos(time));  // Rotate!\n    float ngon_radius = .5;\n    float ngon_nsides = NGON_NSIDES_MIN + floor(mod(iTime, NGON_NSIDES_MAX - NGON_NSIDES_MIN + 1.));\n    float ngon_antialias = 5. / iResolution.y;\n    float ngon = smoothstep(ngon_antialias, .0, sdf_ngon(ngon_uv, ngon_radius, ngon_nsides));\n\n    fragColor.rgb = vec3(ngon);\n}\n","name":"Image","description":"","type":"image"}]}