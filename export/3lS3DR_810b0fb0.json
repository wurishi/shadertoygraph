{"ver":"0.1","info":{"id":"3lS3DR","date":"1558992282","viewed":290,"name":"OpenSpace","username":"Stef","description":"My first shader. Originally coded on Bonzomatic.\n","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["openspace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define resolution iResolution\n#define texNoise iChannel0\n#define texChecker iChannel2\n#define texTex1 iChannel1\n#define texTex3 iChannel3\n\nmat2 rot(float a) \n{\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\nfloat sdBox(vec3 p,vec3 s)\n{\n  vec3 ap=abs(p)-s;\n  return length(max(vec3(0.0),ap)) + min (0.0, max(0.0, max(ap.x,max(ap.y,ap.z))));\n}\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\nfloat sdTaperedCapsule( vec3 p, float r1, float r2, float h ) \n{ \n  vec2 q = vec2( length(p.xz), p.y ); \n  float b = (r1-r2)/h; float a = sqrt(1.0-b*b); float k = dot(q,vec2(-b,a)); \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n  return dot(q, vec2(a,b) ) - r1;\n}\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n     vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot(k2,k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot(ca,ca),dot(cb,cb)) );\n}\nfloat rnd(float t) \n{\n  return fract(sin(t*745.565)*7842.654);\n}\n\n#define matDef 0.0\n#define matEcran -1.0 // custom material id must be <0 (tricks for initialize default obj mat  from distance with vec4(dist))\n#define matTable -2.0\n#define matLight -3.0\n#define matBlack -4.0\n#define matSol   -5.0\n#define matPaper -6.0\n\nvec4 minObj(vec4 obj1, vec4 obj2) { return obj1.x<=obj2.x ? obj1 : obj2; }\nvec4 minObj(vec4 obj1, float dist2) { return obj1.x<=dist2 ? obj1 : vec4(dist2); }\nvec4 sminObj(vec4 obj1, vec4 obj2, float k ) { float h = clamp( 0.5 + 0.5*(obj2.x-obj1.x)/k, 0.0, 1.0 ); return vec4(mix( obj2.x, obj1.x, h ) - k*h*(1.0-h), minObj(obj1,obj2).yzw); }\nvec4 sminObj(vec4 obj1, float dist2, float k ) { float h = clamp( 0.5 + 0.5*(dist2-obj1.x)/k, 0.0, 1.0 ); return vec4(mix( dist2, obj1.x, h ) - k*h*(1.0-h), minObj(obj1,dist2).yzw); }\n\nbool checkBoundingSphere(inout vec4 obj, vec3 p, float h, bool show)\n{\n  if(show) { obj=minObj(obj,sdSphere(p,h));return true; }\n  return sdSphere(p,h)<obj.x;\n}\nbool checkBoundingBox(inout vec4 obj, vec3 p, vec3 s, bool show)\n{\n  if(show) { obj=minObj(obj,sdBox(p,s));return true; }\n  return sdBox(p,s)<obj.x;\n}\n\nvec4 objTable(vec3 p)\n{\n  vec3 p2 = p;\n  p2.x = abs(p2.x);\n  p2.z = abs(p2.z);\n  vec4 obj= vec4(sdBox(p2-vec3(2,-.8,1),vec3(.06,.8,.06)));     // les pattes de la table\n  obj = minObj(obj, vec4(sdBox(p-vec3(0,-1.6,0),vec3(2.2,.05,1.2)), matTable,p.x,p.z)); // le plateau\n  return obj;\n}\n\nvec4 objPlaystation(vec3 p)\n{\n  float t=sdBox(p,vec3(0.5,.2,0.35)); // le plateau\n  return vec4(t);\n}\n\nvec4 objEcran(vec3 p, float h)\n{\n  vec3 center=vec3(0,.7+h,0);\n  vec3 size=vec3(0.75,.5,0.05);\n  vec4 obj=vec4(sdBox(p,vec3(0.4,.02,0.2))); // le plateau\n  obj = minObj(obj, vec4(sdBox(p+vec3(0,.4,0.1),vec3(0.1,.4,0.02)))); // le pied\n  obj = minObj(obj, vec4(sdBox(p+center,size),p.z>0.05?matEcran:matDef,(p+center).x/size.x,(p+center).y/size.y)); // le cadre\n  return obj;\n}\n\nvec4 objOrdi(vec3 p)\n{\n  float t = abs(sdBox(p+vec3(0,.6,0.1),vec3(0.25,.6,0.7))); // la tour\n  return vec4(t);\n}\n\nvec4 objChaisepied(vec3 p)\n{\n  vec3 p2=p;\n  p2.xy*=rot(-.3);\n  vec4 obj = vec4(sdBox(p2+vec3(.26,.43,0),vec3(0.36,.03,.03))); // une barre de pied\n  p2=p+vec3(0.7,0.1,0);\n  p2.yz=p2.yz*rot(3.14/2.0);\n  p2.xy*=rot(p.x);\n  obj = minObj(obj, vec4(sdRoundedCylinder(p2,.05,.04,.02),matBlack,0,0));\n  return obj;\n}\n    \nvec4 objChaisecoude(vec3 p)\n{\n  float t = sdBox(p+vec3(0,.15,0),vec3(0.02,.15,.05)); // barre verticale\n  t = min(t, sdBox(p+vec3(0,.3,.1),vec3(0.07,.01,.18))); // accoudoir\n  return vec4(t);\n}\n\nvec4 objChaise(vec3 p)\n{\n  vec4 obj = vec4(sdVerticalCapsule(p+vec3(0,.9,0),.65,.05)); // la barre verticale\n  vec3 p2=p;  \n  for(int i=0;i<5;++i)\n  {\n    obj = minObj(obj,objChaisepied(p2)); // les pieds\n    p2.xz*=rot(3.14/2.5);\n  }\n\n//  p2.xz*=rot(time);\n  \n  obj = minObj(obj, sdRoundedCylinder(p2+vec3(0,1,0),.25,.03,.02));\n  obj = minObj(obj, sdBox(p2+vec3(0,.9,0),vec3(.57,.02,.05)));\n  obj = minObj(obj, objChaisecoude(p2+vec3(-.55,.9,0)));\n  obj = minObj(obj, objChaisecoude(p2+vec3(.55,.9,0)));\n\n  p2=p2+vec3(0,1.5,-.5);\n  p2.yz=p2.zy;\n  obj = minObj(obj, sdRoundedCylinder(p2,.25,.03,.02));\n\n  return obj;\n}\n\nvec4 objLampe(vec3 p)\n{\n  vec4 obj = vec4(sdSphere( p*vec3(1,1.5,1), .1),matLight,0,0);\n  p.y+=.1;\n  obj = minObj(obj, vec4(sdCappedCone( p, .1, .1, .15 ),matBlack,0,0));\n  p.y+=.1;\n  p.xy *= rot(1.0);\n  p.y-=.1;\n  obj = minObj(obj, vec4(sdVerticalCapsule(p,.6,.03),matBlack,(p.y*2.0-.5),0.0));\n  p.x+=.2;\n  p.y-=.45;\n  p.xy *= rot(-1.0);\n  p.y-=.3;\n  obj = sminObj(obj, sdVerticalCapsule(p,.6,.03), .1);\n  p.y-=.8;\n  obj = sminObj(obj, vec4(sdSphere(p,.15)), .1);\n  return obj;\n}\n\nvec4 objKeyboard(vec3 p)\n{\n  float t=sdBox(p,vec3(0.65,.05,0.35)); // le contour\n  p.z-=.02;\n  //float f=max(0.0,texture(texTex1, p.xz*vec2(1.98,.58)).z-.6)+.6;\n\tfloat f=max(0.0,max(fract(p.x*15.0),fract(p.z*15.0))-.5);\n  t = min(t,  sdBox(p,vec3(0.58,.02,0.26))-f*.09); // les touches\n  return vec4(t);\n}\n\nvec4 objBureau(vec3 p)\n{\n  vec3 p2=p;\n  p2.xz *= rot(0.5);\n  vec3 p3=p;\n  p3.xz *= rot(-0.5);\n  \n  vec4 obj = objTable(p);\n  obj = minObj(obj,objOrdi(p+vec3(-1.6,0,-.3)));\n  if(checkBoundingBox(obj,p+vec3(0,2.4,0),vec3(2.2,.8,1.2), false))\n  {\n    obj = minObj(obj,objPlaystation(p3+vec3(1.1,1.8,1)));\n    obj = minObj(obj,objEcran(p3+vec3(1.1,2.04,1),-.1));\n    obj = minObj(obj,objEcran(p2+vec3(-1.1,1.68,1),.27));\n    obj = minObj(obj,objEcran(p+vec3(0,1.68,.7),.27));\n    obj = minObj(obj,objKeyboard(p+vec3(0,1.68,-.7)));\n  }\n  if(checkBoundingSphere(obj,p-vec3(0,-.9,2.1),1.2, false))\n  {\n    obj = minObj(obj,objChaise(p+vec3(0,0,-2)));\n  }\n  return obj;\n}  \n\nvec4 objBureaux(vec3 p)\n{\n  vec3 p2=p;\n  p2.xz = abs(p2.xz)-vec2(2.21,1.21);\n  return objBureau(p2);\n}\n\nvec4 objPlafond(vec3 p)\n{\n  return vec4(20.0+p.y,matDef,0.0,0.0);\n}\n\nvec4 objPaper(vec3 p, float ry, float h)\n{\n  float width=.25;\n  float height=.35;\n  p.xz*=rot(-ry);\n  return vec4(sdBox(p+vec3(0,h*.5,0),vec3(width,h,height)),matPaper,p.x/width,p.z/height);\n}\n\nvec4 objStylo(vec3 p, float ry)\n{\n  float width=.01;\n  float height=.35;\n  p.xy*=rot(1.57);\n  p.xz*=rot(-ry);\n  return vec4(sdVerticalCapsule(p,height,width),matDef,0,0);\n}\n\nvec4 objHumanLeg(vec3 p2, float hipsx, float hipsy, float kneex, float anklex)\n{\n  float hips_knee_len = .9;\n  float hips_radius = .25;\n  float knee_radius = .15;\n  float knee_ankle_len = .9;\n  float ankle_radius = .1;\n  float foot_radius = .08;\n  float ankle_foot_len = .35;\n  p2.xz *= rot(hipsy);\n  p2.yz *= rot(hipsx); // hips.x\n  vec4 obj = vec4(sdTaperedCapsule(p2,hips_radius,knee_radius,hips_knee_len));\n  p2.y-=hips_knee_len;\n  p2.yz *= rot(kneex); // knee.x\n  obj = sminObj(obj,sdTaperedCapsule(p2,knee_radius,ankle_radius,knee_ankle_len), .1);\n  p2.y-=knee_ankle_len;\n  p2.yz *= rot(1.5+anklex); // ankle.x\n  obj = minObj(obj,sdTaperedCapsule((p2-vec3(0,-.03,0)),ankle_radius*1.2,foot_radius,ankle_foot_len));\n  return obj;\n}\n\nvec4 objHumanArm(vec3 p2, float shoulderx, float shouldery, float shoulderz, float elbowx, float wristx)\n{\n  float shoulder_elbow_len = .55;\n  float shoulder_radius = .15;\n  float elbow_radius = .1;\n  float elbow_wrist_len = .55;\n  float wrist_radius = .07;\n  float hand_radius = .08;\n  float wrist_hand_len = .2;\n  p2.xz *= rot(shouldery);\n  p2.xy *= rot(shoulderz);\n  p2.yz *= rot(shoulderx);\n  vec4 obj = vec4(sdTaperedCapsule(p2,shoulder_radius,elbow_radius,shoulder_elbow_len));\n  p2.y-=shoulder_elbow_len;\n  p2.yz *= rot(elbowx);\n  obj = sminObj(obj,sdTaperedCapsule(p2,elbow_radius,wrist_radius,elbow_wrist_len),.1);\n  p2.y-=elbow_wrist_len;\n  p2.yz *= rot(wristx);\n  obj = minObj(obj,sdTaperedCapsule(p2*vec3(.95,1,1.4),wrist_radius,hand_radius,wrist_hand_len));\n  return obj;\n}\n\nvec4 objHumanTorso(inout vec3 p2, float hipsx, float spinex)\n{\n  float hips_spine_len = .1;\n  float hips_radius = .45;\n  float spine_radius = .4;\n  float neck_radius = .45;\n  float spine_neck_len = .1;\n  p2.yz *= rot(3.14+hipsx); // hips.x\n  p2.y -=.15;\n  vec4 obj = vec4(sdTaperedCapsule(p2*vec3(1,1,1.4),hips_radius,spine_radius,hips_spine_len)); \n  p2.y-=hips_spine_len;\n  p2.y -=.15;\n  p2.yz *= rot(spinex); // knee.x\n  p2.y -=.15;\n  obj = sminObj(obj,sdTaperedCapsule(p2*vec3(1,1,1.3),spine_radius,neck_radius,spine_neck_len),.1);\n  p2.y-=spine_neck_len*2.2;\n  return obj;\n}\n\nvec4 objHumanHead(vec3 p2, float headx, float heady)\n{\n  p2.yz *= rot(headx); // knee.x\n  p2.xz *= rot(heady); // knee.x\n  p2.y -=.15;\n  vec4 obj = vec4(sdSphere(p2*vec3(1.2,1,1),.25)); \n  p2.y -=.15;\n  obj = minObj(obj, vec4(sdRoundedCylinder(p2,.122,.07,.07))); \n  obj = sminObj(obj, vec4(sdRoundedCylinder(p2+vec3(0,.07,-.2),.1,.01,.005)),.1); \n  return obj;\n}\n\nvec4 objHuman(vec3 p)\n{\n  float hips_width = .25;\n  float shoulder_width = .4;\n  vec4 obj = objHumanLeg(p-vec3( hips_width,-1.6,0.0),1.35,-.3,-1.5,.0);\n  obj = sminObj(obj,objHumanLeg(p-vec3(-hips_width,-1.6,0.0),1.4,.3,-1.5,.2+sin(iTime*10.0)*.1),0.1);\n  vec3 p2 = p-vec3(0.0,-1.7,0.0);\n  obj = sminObj(obj,objHumanTorso(p2,0.0,-.2),.1);\n  obj = sminObj(obj,objHumanHead(p2-vec3(0.0,.4,-.05),sin(iTime*10.0)*.1,sin(iTime*1.154)*.5),.1);\n  p2.yz *= rot(3.14);\n  obj = sminObj(obj,objHumanArm(p2-vec3(-shoulder_width,0.0,0.0),1.2,sin(iTime*.12)*cos(iTime*1.1)*.2,.4,.55,sin(round(iTime)*10.0)*.1),.1);\n  obj = sminObj(obj,objHumanArm(p2-vec3( shoulder_width,0.0,0.0),.9,sin(iTime*1.25)*cos(iTime*1.445)*.2,-.4,1.1,sin(iTime*10.0)*.1),.1);\n  return obj;\n}\n\nvec3 lp = vec3(.6,-2.65,1.8);\n\nvec4 map(vec3 p)\n{\n  //return minObj(vec4(-p.y,matDef,0,0),objHuman(p));\n  \n  vec3 size = vec3(13,1,10);\n  vec3 rp = (fract(p/size-.5)-0.5)*size;\n  rp.y = p.y;\n \n  \n  vec4 obj = objBureaux(rp);\n//obj = minObj(obj,objPlafond(p));\n  obj = minObj(obj,vec4(-p.y,matSol,p.x,p.z));  // sol\n\n  if(checkBoundingBox(obj,p+vec3(-2.2,2.3,-1.65),vec3(2.3,.7,.8),false))\n  {\n    obj = minObj(obj,objLampe(p-lp));\n    obj = minObj(obj,objPaper(p-vec3(.6,-1.7,2),.2,.1));\n    obj = minObj(obj,objPaper(p-vec3(.6,-1.9,2),.4,.1));\n    obj = minObj(obj,objPaper(p-vec3(4.0,-1.7,2),-1.4,.1));\n    obj = minObj(obj,objPaper(p-vec3(3.9,-1.9,1.9),-1.6,.1));\n    obj = minObj(obj,objPaper(p-vec3(1.5,-1.7,1.25),-1.1,.05));\n    obj = minObj(obj,objStylo(p-vec3(.7,-2.1,2.0),0.0));\n  }\n  \n  p-=size*.5;\n  p.xz *=rot(3.14);\n  p.x-=4.25;\n  p.y+=.1;\n  p.z-=1.65;\n  \n  if(checkBoundingSphere(obj,p-vec3(0,-1.9,.4),1.6,false))\n    obj = minObj(obj,objHuman(p));\n\n  return obj;\n}\n\nvec3 plas( vec2 v, float time )\n{\n  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n  return vec3( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25);\n}\n\nvec3 colScreenLeft(vec2 uv)\n{\n  vec2 m;\n  m.x = atan(uv.x / uv.y) / 3.14;\n  m.y = 1.0 / length(uv) * .2;\n  float d = m.y;\n  m.x += sin( time ) * 0.1;\n  m.y += time * 0.25;\n  vec3 t = plas( m * 3.14, time ) / d;\n  t = clamp( t, 0.0, 1.0 );\n  return t;\n}\n\nvec3 colScreenCenter(vec2 uv)\n{\n  vec2 uvchar = round(vec2(0,round(time*.5))+uv*30.0)/30.0;\n  \n  float noisey = texture(texNoise, uvchar.yy).r;\n  float noisex1 = texture(texNoise, uvchar.xy).r;\n  bool lineon = (fract(uv.y*30.0)>.4);\n  float linewidth = rnd(noisey)-1.0;\n  \n  vec3 col=vec3(0,.1,0); \n  if(lineon && uv.x<linewidth && uv.x>-.9 && abs(uv.y)<.9) col+=vec3(0,noisex1,0);\n  return col;\n}\n\nvec3 colScreenRight(vec2 uv)\n{\n  uv.xy*=1.0+sin(time)*.5;\n  uv.x+=time*2.+sin(time*.123);\n  uv.y+=sin(uv.x*8.0*.05+time);\n \n  vec3 col=vec3(.5)+sin(vec3(uv.x+uv.y)*vec3(.319,.257,.187))*.5;\n  return texture(texChecker, uv).r*col; // + col*(abs(uv.y)>texture(texFFT,(uv.x+1)*.5).r?1.:0.);\n}\n\nfloat colAmbientOcclusion(vec3 p, vec3 n, float dist)\n{\n  return clamp(map(p+n*dist).x/dist,0.0,1.0);\n}\nfloat colSoftShadow(vec3 p, vec3 d, float mint, float maxt, float k)\n{\n  float shad=1.0;\n  float t=.5;\n  for(float t=mint;t<maxt;)\n  {\n    float d=map(p+d*t).x;\n    if(abs(d)<.001) return 0.0;\n    shad = min(shad,k*d/t);\n    t += d;\n  }\n  return shad;\n}\n\nvoid cam(inout vec3 p)\n{\n  p.yz *= rot(sin(time*.1)*.1+.5);\n  p.xz *= rot(time*.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from 0 to 1)\n   vec2 xy = fragCoord.xy / iResolution.xy;\n\tvec2 uv = (-1. + 2.0 * xy) * vec2(iResolution.x/iResolution.y,1.0);\n \n\n  vec3 s=vec3(-2,0,-8.0+sin(3.14+time-.5));\n  vec3 r=normalize(vec3(-uv,2));\n  \n  cam(s);\n  cam(r);\n  \n  vec3 p=s;\n  vec4 obj;\n  for(int i=0;i<100; ++i)\n  {\n    obj=map(p);\n    if(obj.x<0.001) break;\n    p+=obj.x*r;\n  }\n  \n  vec3 l=normalize(lp-p);\n  //l = normalize(vec3(sin(time*1.2)*2,-2,4+sin(time)*2));\n  \n  vec2 off=vec2(0.01,0);\n  vec3 n=normalize(map(p).x-vec3(map(p-off.xyy).x, map(p-off.yxy).x, map(p-off.yyx).x));\n  float shad = 1.0;//\n\n  vec3 lproj=p-lp;\n  lproj.y=0.0;\n  shad = 1.0/length(lproj)-1.0; // * \n  //shad = colSoftShadow(p+n*.01,l,.1,5,10);\n\n  float ao = colAmbientOcclusion(p,n,max(.4,length(lproj)/10.0))*(sin(time*.2)*.3+.7)*.6+.6;\n  vec3 col=vec3(min(1.0,ao+shad));\n\n  if(obj.y==matEcran)\n  {\n    bool original = p.x>0.0 && p.x<5.0 && p.z>0.0 && p.z<5.0;\n    if(original)\n    {\n         if(p.x<1.45) col=colScreenLeft(obj.zw);\n    else if(p.x<2.96) col=colScreenCenter(obj.zw);\n    else              col=colScreenRight(obj.zw);\n    }\n    else             col*=vec3(.2,.2,.2);\n  }\n  else if(obj.y==matTable)    col *= pow(texture(texTex3,obj.zw*vec2(1.0,2.0)).r,0.2)*vec3(1,1,.95);\n  else if(obj.y==matLight)    col  = vec3(1,1,.5);\n  else if(obj.y==matBlack)    col *= vec3(obj.z);\n  else if(obj.y==matSol)      col *= texture(texNoise,obj.zw*vec2(1.0)).r;\n  else if(obj.y==matPaper)    col *= mix(texture(texNoise,p.yy).r*.6+.4, 1., abs(n.y));\n  else                        col *= (dot(n,l)*.5+.5);\n \n  fragColor = vec4(col,1);\n}\n","name":"Image","description":"","type":"image"}]}