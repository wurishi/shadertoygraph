{"ver":"0.1","info":{"id":"Mf3BR7","date":"1732832114","viewed":48,"name":"Spiral World ","username":"kukovisuals","description":"Fractal, julia set","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simplified Julia set rendering\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat calculateJuliaSetWave(vec2 point, out float waveEffect, float iTime) {\n    vec2 c = vec2(-0.770, 0.114); // Julia set constant\n    vec2 z = point * 0.08;              // Initial value\n    const float escapeRadiusSquared = 256.0;\n    float iterationCount = 0.0;\n    waveEffect = 1.0;            // Initialize wave effect\n\n    for (int i = 0; i < 512; i++) {\n        // Julia set iteration\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\n        if (dot(z, z) > escapeRadiusSquared) break;\n        iterationCount += 1.0;\n\n        // Introduce a wave-like distortion based on the `z` position\n        float waveFactor = sin(5.0 * (z.x + z.y) * iTime * 0.009) \n                         * cos(3.0 * (z.x - z.y) + iTime * 0.04);\n        waveEffect = min(waveEffect, abs(waveFactor));\n    }\n\n    // Apply exponential scaling for smoother visual transitions\n    waveEffect = 1.0 - exp(-250.0 * waveEffect);\n\n    // If the iteration count reaches the max, return zero (indicating no escape)\n    if (iterationCount >= 511.0) return 0.0;\n\n    // Smooth iteration count for better coloring\n    float smoothIterationCount = iterationCount - log2(log2(dot(z, z))) + 4.0;\n\n    return smoothIterationCount;\n}\n\nvec3 hsb2rgb(vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x * 7.0 + vec3(0.0, 1.0, 2.0), 7.0) - 3.0) - 1.0, 0.0, 1.0);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 normalizedCoord = fragCoord / iResolution.y;\n    \n    float waveEffect;\n    float juliaValue = calculateJuliaSetWave(normalizedCoord, waveEffect, iTime);\n\n    // Dynamic color based on wave effect\n    float hue = mod(waveEffect + iTime * 0.01, 1.0);\n    float saturation = smoothstep(0.9, 0.1, waveEffect);\n    float brightness = 0.5 + 0.5 * sin(iTime + waveEffect * 10.0);\n\n    vec3 baseColor = hsb2rgb(vec3(hue, saturation, brightness));\n\n    // Use wave effect for edge visibility\n    vec3 edgeColor = mix(vec3(0.000,0.000,0.000), vec3(1.0, 1.0, 1.0), smoothstep(0.2, 0.1, waveEffect));\n\n    vec3 color = baseColor * (1.0 - waveEffect) + edgeColor * waveEffect;\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}