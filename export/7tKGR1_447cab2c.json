{"ver":"0.1","info":{"id":"7tKGR1","date":"1637190332","viewed":512,"name":"Infinity Circles","username":"Txoka","description":"Just infinity circles","likes":24,"published":3,"flags":0,"usePreview":0,"tags":["fractal","circles","inversion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\nfloat dot2(vec2 x){return dot(x,x);}\n\n\n//Shane's version here\nvoid mainImage( out vec4 O, in vec2 C ){\n    // Screen coordinates.\n    vec2 uv=(2.*C - R.xy)/R.y;\n\n    // Smoothing factor.\n    float w=3./R.y/dot2(uv);\n\n    // Inversion of coordinates.\n    uv/=dot2(uv);\n\n    // Borders.\n    float k=min(abs(uv.x+1.),abs(uv.x+4.));\n    // Repeat circles inside the borders.\n    if(uv.x<-1.&&uv.x>-4.)k=min(k,abs(dot2(fract(uv)-.5)-.25));\n   \n    // Isolines.\n    k=smoothstep(1.,0.,k/w);\n    \n    // Screen presentation. No gamma correction.\n    O=vec4(vec3(k),1);\n}\n\n//Original version here\n/*\nvoid mainImage( out vec4 O, in vec2 C ){\n    float p=3./R.y;\n    vec2 uv=(C*2.-R.xy)/R.y;\n    float w=dot2(uv);\n    \n    uv=uv.yx*vec2(1,-1);\n    uv/=dot(uv,uv);\n    \n    vec3 col=vec3(0);\n    \n    col+=smoothstep(1.,0.,abs(uv.y-1.)*w/p);\n    col+=smoothstep(1.,0.,abs(uv.y-4.)*w/p);\n    if(uv.y>=1.&&uv.y<4.){\n        float k=dot2(fract(uv)*2.-1.)-1.;\n        col+=smoothstep(1.,0.,0.25*abs(k)*w/p);\n    }\n    O = vec4(col,1.0);\n}*/","name":"Image","description":"","type":"image"}]}