{"ver":"0.1","info":{"id":"wsySDK","date":"1575054100","viewed":120,"name":"Wall clock (mostly binary)","username":"laralex","description":"2nd shader ever. I don't know how to render digits yet.\nLowest digit is on the right of the row.\nMonths are non binary, e.g. 11th lit square from the right is the 11th month)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","binary","clock","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float MAX_BULBS = 12.0;\nconst int YEAR_BULBS = 12;\nconst int MONTH_BULBS = 12;\nconst int DAY_BULBS = 6;\nconst int HOUR_BULBS = 6;\nconst int MIN_BULBS = 6;\nconst int SEC_BULBS = 6;\n\nfloat rect(in vec2 coord, in vec2 cornerBL, in vec2 cornerTR) {\n    vec2 checks = step(cornerBL, coord) * step(coord, cornerTR);\n\treturn checks.x * checks.y;   \n}\n\nfloat circle(in vec2 coord, in vec2 center, in float radius) {\n    float sqrRadius = radius * radius;\n    vec2 diff = coord - center;\n    vec2 sqrCoord = diff * diff; \n    return 1.0 - smoothstep(sqrRadius*0.9, sqrRadius, sqrCoord.x + sqrCoord.y); \n}\n\nvec3 bulbsBinRow(in vec2 uv, in int data, in int bulbs, in float bulbSquareSize, in vec2 cornerTR, in float spacing) {\n\tvec3 col = vec3(0.0);\n    vec2 offset = vec2(bulbSquareSize + spacing, 0.0);\n    vec2 bulbSize = vec2(bulbSquareSize);\n    for(int i = 0; i < bulbs; ++i) {\n        // squares\n    \t//col += (0.5 + 0.5*float(data % 2)) * vec3(rect(uv, cornerTR - bulbSize, cornerTR));\n        \n        // circles\n        col += (0.5 + 0.5*float(data % 2)) * vec3(circle(uv, cornerTR - bulbSize.x / 2.0, bulbSize.x / 2.0));\n        data /= 2;\n        cornerTR -= offset;\n    }\n    return col;\n}\n        \nvec3 bulbsUniqueRow(in vec2 uv, in int data, in int bulbs, in float bulbSquareSize, in vec2 cornerTR, in float spacing) {\n\tvec3 col = vec3(0.0);\n    vec2 offset = vec2(bulbSquareSize + spacing, 0.0);\n    vec2 bulbSize = vec2(bulbSquareSize);\n    for(int i = 0; i < bulbs; ++i) {\n    \t// squares\n        //col += (0.5 + 0.5*float(data == i)) * vec3(rect(uv, cornerTR - bulbSize, cornerTR));\n        \n        // circles\n        col += (0.5 + 0.5*float(data == i)) * vec3(circle(uv, cornerTR - bulbSize.x / 2.0, bulbSize.x / 2.0));\n        cornerTR -= offset;\n    }\n    return col;\n}\n  \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates \n    vec2 uv = 2.0*(fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\tvec2 uvSpan = iResolution.xy/iResolution.y;\n    float uvWidth = 2.0 * uvSpan.x;\n    float bulbSize = uvWidth / (MAX_BULBS * 1.1 + 0.1);\n    float bulbSpacing = (uvWidth - MAX_BULBS * bulbSize) / (MAX_BULBS + 1.0); \n    float bigBulbSize = (bulbSize * 2.0) + bulbSpacing;\n    float interLineSpacing = bulbSpacing*1.5;\n    \n\tvec3 col = vec3(0.0);\n    vec2 currentCornerTR = uvSpan - vec2(bulbSpacing);\n\tcol += bulbsBinRow(uv.xy, int(iDate.x), YEAR_BULBS, bulbSize, currentCornerTR, bulbSpacing);\n    currentCornerTR.y -= interLineSpacing + bulbSize;\n    col += bulbsUniqueRow(uv.xy, int(iDate.y), MONTH_BULBS, bulbSize, currentCornerTR, bulbSpacing);\n    currentCornerTR.y -= interLineSpacing + bulbSize;\n    col += bulbsBinRow(uv.xy, int(iDate.z), DAY_BULBS, bulbSize, currentCornerTR, bulbSpacing);\n    currentCornerTR.y -= interLineSpacing * 4.0 + bulbSize;\n    col += bulbsBinRow(uv.xy, int(iDate.w) / (60*60), HOUR_BULBS, bulbSize, currentCornerTR, bulbSpacing);\n    currentCornerTR.y -= interLineSpacing + bulbSize;\n    col += bulbsBinRow(uv.xy, (int(iDate.w) % (60*60)) / 60, MIN_BULBS, bulbSize, currentCornerTR, bulbSpacing);\n    currentCornerTR.y -= interLineSpacing + bulbSize;\n    col += bulbsBinRow(uv.xy, (int(iDate.w) % 60), SEC_BULBS, bulbSize, currentCornerTR, bulbSpacing);\n    currentCornerTR.y -= interLineSpacing + bulbSize;\n    \n    // morning time is bright, evening is dark\n    //col = (1 - col) - iDate.w / (24.0 * 60.0 * 60.0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}