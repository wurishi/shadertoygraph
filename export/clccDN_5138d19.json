{"ver":"0.1","info":{"id":"clccDN","date":"1699195567","viewed":47,"name":"Ray-Square Intersect","username":"FatalSleep","description":"Blue = Center, Aqua = RayOrigin, Red = Square Intersect, Yellow = Screen/Texture Intersect, Green is Center to Square Intersect, Purple = Mouse.\n\nCredits go to: https://www.shadertoy.com/user/gelami & https://github.com/GelamiSalami","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["intersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CREDIT: https://gamedev.stackexchange.com/a/207796/42657\nvec2 rayVsAABB(vec2 position, vec2 direct, vec2 sqmin, vec2 sqmax) {\n    vec2 limit;\n    limit.x = direct.x > 0.0 ? sqmax.x : sqmin.x;\n    limit.y = direct.y > 0.0 ? sqmax.y : sqmin.y;\n    \n    vec2 fromLimit = limit - position;\n    vec2 timeToLimit = fromLimit / direct;\n    float t = min(timeToLimit.x, timeToLimit.y);\n    return position + t * direct;\n}\n\nvec2 rayVsTexSpace(vec2 position, vec2 direct, vec2 size) {\n    vec2 limit = size * step(vec2(0.0), direct);\n    vec2 fromLimit = (limit - position);\n    vec2 timeToLimit = fromLimit / direct;\n    return position + min(timeToLimit.x, timeToLimit.y) * direct;\n}\n\nfloat sdBox( in vec2 p, in vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 center = iResolution.xy * 0.5;\n    vec2 mouse = iMouse.xy;\n    vec2 xy1 = iResolution.xx * 0.40;\n    vec2 xy2 = iResolution.xx * 0.70;\n    float sqrlen = xy2.x - xy1.x;\n    \n    vec2 unaligned = vec2(iResolution.x * 0.60, iResolution.y * 0.35);\n    ///////////////////////////////////////////////////////////////////////////\n    vec2 offset = mouse;\n    vec2 difference = offset - center;\n    vec2 intersect = center + ((difference / max(abs(difference.x), abs(difference.y))) * sqrlen * 0.5);\n    /*\n        CREDITS:\n            https://github.com/GelamiSalami\n            https://www.shadertoy.com/user/iq\n    */\n    /* ALTERNATIVE METHOD:\n    vec2 rayDir = normalize(offset - unaligned);\n    vec2 invRayDir = 1.0 / rayDir;\n    vec2 planeOffset = abs(invRayDir) * sqrlen * 0.5;\n    vec2 planeHit = (unaligned - center) * invRayDir;\n    vec2 farHit = -planeHit + planeOffset;\n    float t = min(farHit.x, farHit.y);\n    farHit = unaligned + (rayDir * t);\n    */\n    vec2 farHit1 = rayVsAABB(unaligned, normalize(offset - unaligned), center-(sqrlen*0.5), center+(sqrlen*0.5));\n    vec2 farHit2 = rayVsTexSpace(unaligned, normalize(offset - unaligned), iResolution.xy);\n    ///////////////////////////////////////////////////////////////////////////\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    if (abs(sdBox(fragCoord-center, vec2(sqrlen*0.5))) <= 1.0) col = vec3(1.0,1.0,1.0);\n    if (distance(fragCoord, offset) < 16.0) col = vec3(1.0, 0.0, 1.0);\n    if (distance(fragCoord, intersect) < 16.0) col = vec3(0.0, 1.0, 0.0);\n    if (distance(fragCoord, farHit1) < 16.0) col = vec3(1.0, 0.0, 0.0);\n    if (distance(fragCoord, farHit2) < 16.0) col = vec3(1.0, 1.0, 0.0);\n    if (distance(fragCoord, center) < 16.0) col = vec3(0.0, 0.0, 1.0);\n    if (distance(fragCoord, unaligned) < 16.0) col = vec3(0.0, 1.0, 1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}