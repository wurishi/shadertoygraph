{"ver":"0.1","info":{"id":"tdfBzN","date":"1587773504","viewed":63,"name":"PP-dof","username":"jw461","description":"depth of field","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["hw9"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    \n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    fragColor = vec4(col.rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float FOVY = 19.5;\nconst int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\nconst float radCon = 3.14159 / 180.0;\nconst float FOCAL_LENGTH = 20.0;\nconst float FOCAL_RANGE = 10.0;\n\n#define LIGHT_POS vec3(0.0, 7.45, 0.0)\n#define GI 0\n\nstruct Intersection {\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // Assign every object in our scene a unique ID int\n};\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvec3 rotateX(vec3 p, float amt) {\n    return vec3(p.x, cos(amt) * p.y - sin(amt) * p.z, sin(p.y) + cos(p.z));\n}\n\n// SDF of box\nfloat box(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// SDF of plane\nfloat plane(vec3 p, vec4 n)\n{\n  return dot(p,n.xyz) + n.w;\n}\n\n//not sure why x axis is inverted for these\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define LEFT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.5))\n//not sure why y axis is inverted for these\n#define TALL_BOX_SDF box(rotateY(pos + vec3(-2, 0, -3), -27.5 * radCon), vec3(1.5, 3.0, 1.5))\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(2, 1, 0.75), 17.5 * radCon), vec3(1.5, 1.5, 1.5))\n\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define CEILING 3\n#define FLOOR 4\n#define TALL_BOX 5\n#define SMALL_BOX 6\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n\tt = BACK_WALL_SDF;\n    obj = BACK_WALL;\n    \n    float t2;\n    if((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n        obj = LEFT_WALL;\n    }\n    if((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n        obj = RIGHT_WALL;\n    }\n    if((t2 = CEILING_SDF) < t) {\n        t = t2;\n        obj = CEILING;\n    }\n    if((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj = FLOOR;\n    }\n    if((t2 = TALL_BOX_SDF) < t) {\n        t = t2;\n        obj = TALL_BOX;\n    }\n    if((t2 = SMALL_BOX_SDF) < t) {\n        t = t2;\n        obj = SMALL_BOX;\n    }\n}\n\n\nfloat sceneMap3D(vec3 pos) {\n    float t = BACK_WALL_SDF;\n    t = min(t, FLOOR_SDF);\n    t = min(t, LEFT_WALL_SDF);\n    t = min(t, RIGHT_WALL_SDF);\n    t = min(t, CEILING_SDF);\n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SMALL_BOX_SDF);\n    \n    return t;\n}\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj) {\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nconst vec3 a = vec3(0.5, 0.5, 0.5);\nconst vec3 b = vec3(0.5, 0.5, 0.5);\nconst vec3 c = vec3(2.0, 1.0, 1.0);\nconst vec3 d = vec3(0.5, 0.2, 0.25);\n\nvec3 colorPalette(float t) {\n    return a + b * cos(6.28 * (t * c + d));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view) {\n    float lambert = max(0.0, dot(lightVec, n)) + 0.2;\n    switch(hitObj) {\n\t\tcase BACK_WALL:\n        case CEILING:\n        case FLOOR:\n        case TALL_BOX:\n        case SMALL_BOX:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case LEFT_WALL:\n        return vec3(0.63, 0.065, 0.05) * lambert;\n        break;\n        case RIGHT_WALL:\n        return vec3(0.14, 0.45, 0.091) * lambert;\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(LIGHT_POS - isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\n\n// Returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc) {\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0,1,0)));\n    vec3 U = normalize(cross(R, F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // Convert to range [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(0,5.5,-30);\n    eye.z = eye.z * clamp(sin(iTime), 0.5, 1.0);\n    vec3 ref = vec3(0,2.5, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye);\n    \n    vec3 dist = (isect.p - eye);\n    \n    vec3 look = normalize(ref - eye);\n    \n    float distAlongCamZ = dot(look, dist);\n    \n    float dofZ = abs(distAlongCamZ - FOCAL_LENGTH) / FOCAL_RANGE;\n    \n    fragColor = vec4(isect.color * step(0.0, isect.t), dofZ);\n}","name":"Buffer A","description":"","type":"buffer"}]}