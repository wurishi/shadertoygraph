{"ver":"0.1","info":{"id":"M3f3W2","date":"1708018281","viewed":87,"name":"Shader 1: Factory Repair","username":"JoeyBamboozles","description":"Game Engines Assignment 1 Part 1\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["gameengines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalization\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n\n    // Number of gears\n    const int numGears = 10;\n\n    // Gear framework\n    int gearTeeth = 6;\n    float gearRadius = 0.1;\n    float gearThickness = 0.02; \n    \n\n    // Initialize color\n    vec3 color = vec3(0.2);\n\n    // Loop through each gear \n    for (int i = 0; i < numGears; ++i) {\n        \n        // Rotation Speed\n        float angle = iTime * (1.0 + mod(float(i), 3.0)) * mix(-1.0, 1.0, fract(float(i) * 0.11));\n\n        // Gear Postitions\n        vec2 position;\n        if (i == 0) {\n            position = vec2(-0.78, 0.7); // Gear 1\n        } else if (i == 1) {\n            position = vec2(-0.1, 0.0); // Gear 2\n        } else if (i == 2) {\n            position = vec2(-0.7, 0.2); // Gear 3\n        } else if (i == 3) {\n            position = vec2(0.8, -0.6); // Gear 4\n        } else if (i == 4) {\n            position = vec2(1.1, 1.0); // Gear 5\n        } else if (i == 5) {\n            position = vec2(0.17, -0.53); // Gear 6\n        } else if (i == 6) {\n            position = vec2(-0.2, 0.6); // Gear 7\n        } else if (i == 7) {\n            position = vec2(0.4, 1.1); // Gear 8\n        } else if (i == 8) {\n            position = vec2(0.55, 0.2); // Gear 9\n        } else if (i == 9) {\n            position = vec2(-0.6, -0.5); // Gear 10\n        }\n\n        // Use of rotation matrix\n        vec2 rotatedCoord = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * (uv - position);\n\n        //Stores the distance from a certain point to the edge of the gear.\n        float distanceToEdge = abs(length(rotatedCoord) - gearRadius);\n\n        // Gear teeth creation\n        float tooth = cos(float(gearTeeth) * atan(rotatedCoord.x, rotatedCoord.y));\n        distanceToEdge = mix(distanceToEdge, abs(distanceToEdge - gearThickness), step(0.0, tooth));\n\n        // Gear creation\n        float gear = smoothstep(gearRadius, gearRadius + gearThickness, distanceToEdge);\n        color += vec3(0.5) * (1.0 - gear);\n\n        // Update gear Framework for next gear\n        gearRadius += 0.01;\n        gearThickness += 0.001;\n    }\n\n    // Final color \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}