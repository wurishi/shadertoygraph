{"ver":"0.1","info":{"id":"wdlfRr","date":"1587630583","viewed":189,"name":"Optical illusion/dithering","username":"bikemule","description":"Accidentally rotating the wrong part of a sine wave gave this cool effect. Gets better with time. Try different rotations and multipliers for sin","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["effect","dither","illusion","opticalillusion","bw","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nImplemented from scratch using math from \"Computer Graphics with OpenGL 3rd Ed.\"\n*/\n\n#define PI 3.1415926535897932384626433832795028841971693993751058209\n\nmat3 make2DRotation(in vec3 uv, in float angle) {\n    // Probably remembering this function too well from Iniqo Quilez or someplace else...\n    \n    // Matrix math is implemented from p. 239 \n    return mat3(vec3(cos(angle), sin(angle), 0.),\n                vec3(-sin(angle), cos(angle), 0.),\n                vec3(0., 0., 1.));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.y *=2.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 uvR = make2DRotation(vec3(uv, 1.), PI/(iTime*iTime)) * vec3(uv, 1.);\n    \n    vec3 col = vec3(1.,1.,1.);\n    vec3 bgcol = vec3(0.,0.,0.);\n    \n    if(uvR.y < sin(uvR.x*PI*iTime))\n        col = bgcol;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}