{"ver":"0.1","info":{"id":"Xft3Wf","date":"1712223400","viewed":82,"name":"Sphere Distorting","username":"AKHC","description":"a","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat map(in vec3 p)\n{\n    float disp = sin(5. * p.x * sin(iTime)) * sin(5. * p.y * sin(iTime + 1.)) * sin(5.0 * p.z * cos(iTime)) * 0.25;\n    return sdSphere(p, 1.) + disp;\n}\n\n//https://michaelwalczyk.com/blog-ray-marching.html\nvec3 calcNormal(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = map(p + small_step.xyy) - map(p - small_step.xyy);\n    float gradient_y = map(p + small_step.yxy) - map(p - small_step.yxy);\n    float gradient_z = map(p + small_step.yyx) - map(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\n\nmat2 rot2D(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n\n\n\n\nvec3 raymarch(vec3 ro, vec3 rd)\n{\n\n\n    float t = 0.;\n\n    //Raymarching\n    //current position along ray\n    for(float i = 0.; i < 200.; i++)\n    {\n        vec3 p = ro + rd * t;   //marches ray: ray origin + the direction\n        float d = map(p);   //get distance to closest point from p\n        t += d; //assigns distance travelled to total distance\n        \n        \n        if(d < 0.001f) //minimum hit distance\n        {\n            vec3 normal = calcNormal(p);\n            return normal * 0.5 + 0.5;\n        \n            break;   //stop if ray gets too close to object\n        }\n        \n        if(t > 1000.)  //stop if ray goes too far\n        {\n            break;\n        }\n    }\n    \n    return vec3(0.);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float angle = sin(iTime) * 0.2;\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    vec4 col;\n    \n    \n    vec3 ro = vec3(0, 0, -3);\n    float fov = 0.5;\n    vec3 rd = normalize(vec3(uv * fov, 1)); \n    float t = 0.;\n\n\n    //vertical cam rotation\n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n\n    //horizontal cam rotation\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n\n\n\n    vec3 rayFinal = raymarch(ro, rd);\n\n    \n    col = vec4(rayFinal, 1.0);\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    fragColor = col;\n    \n        fragColor = sqrt(fragColor); // \"transfer function\"\n    \n}","name":"Image","description":"","type":"image"}]}