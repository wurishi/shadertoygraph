{"ver":"0.1","info":{"id":"WtX3R4","date":"1555696944","viewed":148,"name":"2D mastersun marquee","username":"zproxy","description":"https://www.shadertoy.com/view/wd2SDt","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","loading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float N21(vec2 p) {\n\tp = fract(p * vec2(233.34, 851.73));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\n\nfloat inRect(vec2 pos, vec2 topLeft, vec2 rightBottom) {\n\treturn step(topLeft.x, pos.x) * step(rightBottom.y, pos.y) * step(-rightBottom.x, -pos.x) * step(-topLeft.y, -pos.y);\n}\n\nfloat inBetween(float x, float a, float b) {\n    return step(a, x) * step(-b, -x);\n}\n\nfloat boxLayer(float depth, vec2 uv, float size, float pos, float iTime) {\n\n    const float fullDepth = 4.0;\n    \n    float boxHalfSize = size * 0.5;\n\n    vec2 boxCenter = vec2(fullDepth * pos, (1.0 - boxHalfSize) * sin((iTime + 1.0) * 10.0 * (0.3 + 0.7 * N21(vec2(depth, size))) ));\n    \n    return inRect(uv, boxCenter + vec2(-boxHalfSize, boxHalfSize), boxCenter + vec2(boxHalfSize, -boxHalfSize))\n    * inRect(uv, vec2(0.0, 1.0), vec2(3.99, -1.0));\n}\n\nvoid mainImage0( out vec4 fragColor, in vec2 fragCoord,\n               vec3 baseColor,\n                 vec3 activeColor,\n                float iTime\n               )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 inv_resolution = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * inv_resolution.xy;\n\n\tfloat sWidth = iResolution.x * inv_resolution.y;\n    const float barWidthRatio = 0.8;\n    float inv_barWidth = 1.0 / (barWidthRatio * sWidth);\n    float barHeight = 0.06;\n    float twice_inv_barHeight = 2.0 / barHeight;\n    uv.x = uv.x * sWidth;\n\n    mat3 T_bar2s = mat3(\n        vec3(inv_barWidth, 0.0, 0.0),\n        vec3(0.0, inv_barWidth, 0.0),\n        vec3((1.0 - sWidth * inv_barWidth) * 0.5, -0.5 * inv_barWidth, 1.0)\n    );\n\n    vec2 uv_bar = (T_bar2s * vec3(uv.xy, 1.0)).xy;\n    float isInBaseRect = inRect(uv_bar, vec2(0.0, 0.5 * barHeight), vec2(1.0, -0.5 * barHeight));\n    float isInActiveRect = inRect(uv_bar, vec2(0.0, 0.5 * barHeight), vec2(fract(iTime * 0.1), -0.5 * barHeight)); \n//    vec3 baseColor = vec3(0.12941, 0.13725, 0.17647);\n    \n    //vec3 baseColor = mix(vec3(0.2, 0.35294, 0.91373), vec3(0.43529, 0.43529, 0.96078), uv_bar.x);\n  \n    //vec3 activeColor = mix(vec3(0.2, 0.35294, 0.91373), vec3(0.43529, 0.43529, 0.96078), uv_bar.x);\n  \n   // vec3 baseColor = vec3(0.43529, 0.43529, 0.96078);\n    //vec3 activeColor = vec3(0.12941, 0.13725, 0.17647);\n  \n    \n    \n    vec3 color = vec3(0.0, 0.0, 0.0);\n    color = mix(color, baseColor, isInBaseRect);\n    color = mix(color, activeColor, isInActiveRect);\n\n    mat3 T_top2bar = mat3(\n        vec3(twice_inv_barHeight, 0.0, 0.0),\n        vec3(0.0, twice_inv_barHeight, 0.0),\n        vec3(-twice_inv_barHeight * fract(iTime * 0.1), 0.0, 1.0)\n    );\n\n    vec2 topCord = (T_top2bar * vec3(uv_bar, 1.0)).xy;\n    \n    float sizes[8];\n\n    sizes[0] =  0.64443028954883467;\n    sizes[1] =  0.5305055282034009;\n    sizes[2] =  0.563223756594665;\n    sizes[3] =  0.7904855321774765;\n    sizes[4] =  0.58575556655444496;\n    sizes[5] =  0.3690261013697286;\n    sizes[6] =  0.40226518516562614;\n    sizes[7] =  0.935630139708542;\n\n    float inBoxes = 0.0;\n\n    // for (float j = 0.0; j < 1.0; j+=0.125) {\n    // \t// float depth = fract(i + iTime * 0.6);\n    // \tfloat depth = j;\n    //     float pos = fract(j + iTime * 0.6);\n    //     inBoxes += boxLayer(depth, topCord, sizes[int(j * 8.0)], pos);\n    // }\n\n//    float ftime = iTime * 0.6;\n    float ftime = iTime * 0.6;\n    \n    //iTime *= 0.01;\n    \n    inBoxes += boxLayer(0.0, topCord, sizes[0], fract(0.0 + ftime), iTime);\n    inBoxes += boxLayer(0.125, topCord, sizes[1], fract(0.125 + ftime), iTime);\n    inBoxes += boxLayer(0.25, topCord, sizes[2], fract(0.25 + ftime), iTime);\n    inBoxes += boxLayer(0.375, topCord, sizes[3], fract(0.375 + ftime), iTime);\n    inBoxes += boxLayer(0.5, topCord, sizes[4], fract(0.5 + ftime), iTime);\n    inBoxes += boxLayer(0.625, topCord, sizes[5], fract(0.625 + ftime), iTime);\n    inBoxes += boxLayer(0.75, topCord, sizes[6], fract(0.75 + ftime), iTime);\n    inBoxes += boxLayer(0.875, topCord, sizes[7], fract(0.875 + ftime), iTime);\n\n    color = mix(color, activeColor, clamp(inBoxes, 0.0, 1.0) * inBetween(uv_bar.x, 0.0, 1.0) );\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 baseColor = vec3(0.43529, 0.43529, 0.96078);\n    vec3 activeColor = vec3(0.12941, 0.13725, 0.17647);\n\n    \n    float swapTime = mod(iTime * 0.5 , 20.0);\n\n    float iiiTime = mod(iTime * 0.5, 10.0);\n    //float iiiTime = iTime % 10.0;\n    \n    vec4 fragColor0;\n    mainImage0(fragColor0, fragCoord, baseColor, activeColor, iiiTime + 00.);\n    \n    vec4 fragColor1;\n    mainImage0(fragColor1, fragCoord, activeColor, baseColor, iiiTime + 00.);\n\n//    if (fragCoord.y < iResolution.y/2.0)\n        \n    if (swapTime >= 10.0)\n    {\n//    \tfragColor = min(fragColor0, fragColor1);\n        \n        fragColor = fragColor0 ;\n    }\n    else\n        fragColor = fragColor1;\n    \n//    fragColor.b = max(fragColor0.b, fragColor1.b);\n\n//        fragColor.b = min(fragColor0.b, fragColor1.b);\n\n}","name":"Image","description":"","type":"image"}]}