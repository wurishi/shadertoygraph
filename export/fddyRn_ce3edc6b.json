{"ver":"0.1","info":{"id":"fddyRn","date":"1652960567","viewed":107,"name":"Circle Intersection Pattern","username":"QuantumShader","description":"followed a \"The Art Of Code\" tutorial","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on tutorial https://www.youtube.com/watch?v=cQXAbndD5CQ\n\n// Radius range of circles (0 <= r <= 1.5)\n#define MIN_RAD 0.2\n#define MAX_RAD 1.5\n\n// comment out for black and white\n#define COLOR\n\nfloat Xor(float a, float b)\n{\n    return a*(1.-b) + b*(1.-a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n\n\n    vec3 col = vec3(0);\n    \n    // roate & scale uv\n    float a = 0.1 * iTime;\n    float s = sin(a);\n    float c = cos(a);\n    uv *= mat2(c, -s, s, c);\n    uv *= 15.;\n    \n \n    \n    // grid uv. Give each box an id\n    vec2 gv = fract(uv+0.5) - 0.5;\n    vec2 id = floor(uv+0.5);\n    \n    // draw circle in each gridbox\n    // m will accumulate brightness of all circles overlapping current pixel\n    // m essentially keeps track of if the number of circle overlaps is even or odd\n    float m = 0.;\n    float t = iTime * 2.;\n\n    \n    // need to evaluate all 8 circles around the current one so that\n    // they can interact\n    for(float y=-1.; y<=1.; y++)\n    {\n        for(float x=-1.; x<=1.; x++)\n        {\n            // vec that points from current cell to neighbour cell\n            vec2 offs = vec2(x, y);\n            \n            // get d for each cell and add to m\n            float d = length(gv - offs);\n            // get distance of each box to screen center (uv center)\n            float dist = length(id + offs)*.3;\n            \n            // radius\n            float r = mix(MIN_RAD, MAX_RAD, sin(dist - t)*.5 + .5);\n            \n            // check if circle overlaps are even or odd\n            m = Xor(m, smoothstep(r, r*.95, d));\n        }\n    }\n    //col.rg = gv;\n    \n    #ifdef COLOR\n    col += 0.5 + 0.5*vec3(cos(m + iTime), sin(m + iTime), sin(m + iTime));\n    #else\n    col += m;\n    #endif\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}