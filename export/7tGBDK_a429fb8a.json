{"ver":"0.1","info":{"id":"7tGBDK","date":"1665235620","viewed":313,"name":"infinite grid","username":"kakaxizhhgjh","description":"inifinite grid shader, idea from `https://ruby0x1.github.io/machinery_blog_archive/post/borderland-between-rendering-and-editor-part-1/index.html`","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float minCellSize = 0.01;\nfloat minCellPixelWidth = 2.0;\nfloat lineWidth = 4.0;\nvec3 thinColor = vec3(0.5, 0.5, 0.5);\nvec3 thickColor = vec3(0.0, 0.0, 0.0);\n\nfloat max2(vec2 v) {\n  return max(v.x, v.y);\n}\n\nfloat log10(float x) {\n  return log(x) / log(10.0);\n}\n\n\nvec4 grid(vec2 uv) {\n  vec2 dudv = vec2(\n    length(vec2(dFdx(uv.x), dFdy(uv.x))),\n    length(vec2(dFdx(uv.y), dFdy(uv.y)))\n  );\n\n  float lod = max(0.0, log10((max2(dudv) * minCellPixelWidth) / minCellSize) + 1.0);\n  float fade = fract(lod);\n\n  float lod0 = minCellSize * pow(10.0, floor(lod));\n  float lod1 = lod0 * 10.0;\n  float lod2 = lod1 * 10.0;\n\n  float lod0a = max2(vec2(1.0) - abs(clamp(mod(uv, lod0) / dudv / lineWidth, 0.0, 1.0) * 2.0 - vec2(1.0)));\n  float lod1a = max2(vec2(1.0) - abs(clamp(mod(uv, lod1) / dudv / lineWidth, 0.0, 1.0) * 2.0 - vec2(1.0)));\n  float lod2a = max2(vec2(1.0) - abs(clamp(mod(uv, lod2) / dudv / lineWidth, 0.0, 1.0) * 2.0 - vec2(1.0)));\n\n  return vec4(\n    lod2a > 0.0 ? thickColor : lod1a > 0.0 ? mix(thickColor, thinColor, fade) : thinColor,\n    lod2a > 0.0 ? lod2a : lod1a > 0.0 ? lod1a : lod1a * (1.0 - fade)\n  );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  float scale = pow(10.0,  1.5 * sin(iTime / 10.0));\n  fragColor = grid(uv * scale);\n}","name":"Image","description":"","type":"image"}]}