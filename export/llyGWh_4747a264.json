{"ver":"0.1","info":{"id":"llyGWh","date":"1474378462","viewed":959,"name":"Dual SoundCloud Visualizer","username":"hopskotchrainbow","description":"This visualizer mixes two SoundCloud songs together.\n\nIf you find the right songs in the right combinations, you can definitely make a visualizer like this. If your songs appear out of sync, try clicking Reset (the |< button).","likes":6,"published":3,"flags":96,"usePreview":0,"tags":["tunnel","checkerboard","shader","3dimensional"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis tunnel shader was simplified to be specially usable for raycasting.\n*/\n\n\nvec2 tunnelize(vec2 uv, float size) {\t// This is your tunnel map.\n    float xmod = atan(uv.x,uv.y)/radians(360.0);\n    float ymod = size/length(uv)+iTime*1.2;\n    return vec2(xmod, ymod);\n}\nvec3 TunLayer1(vec2 uvT) {\t// Define your own vec3 RGB color map.\n    vec3 color = vec3(0.4,0.1,0.1);\n    if ((fract(uvT.x*7.0) >= 0.5) != (fract(uvT.y*7.0) >= 0.5)) {\n        color = vec3(0.7,0.4,0.2);\n    }\n    vec4 tex = texture(iChannel0, vec2(fract(uvT.x),fract(uvT.y)));\n    if (uvT.y >= 18.95) {\n        color = tex.rgb;\n        if (fract(uvT.x*15.0) >= 0.8 || fract(uvT.y*15.0) >= 0.8) {\n            color = vec3(1.0);\n        }\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t// Default code used to get UV value\n    vec2 uvh = uv*2.0-1.0;\t\t\t\t\t\t// Get the relative UV\n    vec2 uvk = tunnelize(uvh, 0.3);\t\t\t\t// Set second parameter for tunnel radius\n    vec3 color = TunLayer1(uvk);\t\t\t\t// Set the color based on the coordinates\n    vec4 tex = texture(iChannel0, uv);\t\t// See Buf A\n    color = mix(color, tex.rgb, smoothstep(0.0,0.65,1.0-sqrt(length(uvh))));\n    // The above creates the fog effect for Buf A. The colors are then sent to the fragment shader.\n\tfragColor = vec4(color.r,color.g,color.b,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdj3zD","filepath":"https://soundcloud.com/sayonara-maxwell/sayonara-maxwell-undertale-megalovania-dual-remix","previewfilepath":"https://soundcloud.com/sayonara-maxwell/sayonara-maxwell-undertale-megalovania-dual-remix","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sj3zD","filepath":"https://soundcloud.com/hwowl/undertale-megalovania-dubstep-remix","previewfilepath":"https://soundcloud.com/hwowl/undertale-megalovania-dubstep-remix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Mixed two SoundCloud songs together to make something unique.\nvec2 mAud(float x, float y) {\n    // This function will take 2 parameters separately.\n    vec4 point1 = texture(iChannel0, vec2(x, 0.75));\n    vec4 point2 = texture(iChannel1, vec2(y, 0.75));\n    return vec2(point1.r,point2.r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 uv2 = mAud(uv.x,uv.y);\n    fragColor = vec4(uv2,abs(uv2.x-uv2.y),1.0);\n    if (iTime <= 8.05) {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    } else {\n        float g = iTime-8.05;\n        float ns = smoothstep(0.0,1.0,g*12.0);\n        fragColor.rgb = 1.0-(1.0-fragColor.rgb*ns);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}