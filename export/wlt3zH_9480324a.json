{"ver":"0.1","info":{"id":"wlt3zH","date":"1575654893","viewed":61,"name":"orr.test1","username":"treemark","description":"A simple antialiasing test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n \n    //place circle in center\n    uv-=.5;\n    //compensate for xy ratio\n    uv.x *= iResolution.x/iResolution.y;\n    //distance from center.\n\tfloat d = length(uv);\n   \n    // Color of the pixel\n    vec3 c = vec3(uv.x+.5,uv.y+.5,0);\n    \n    vec3 c2= 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    vec2 n1=normalize(uv);\n    vec2 up =  vec2(0,1);\n    \n    \n    float ang = atan(n1[0],n1[1]) /3.0;\n    \n \n    \n    c2 = vec3(ang,ang,ang);\n    \n    // radius of the circle\n    float r = 0.45;\n    \n    //antialias circle edge\n    c2*= smoothstep(r,r-0.01,d);\n\n    //output fragment color\n    fragColor = vec4(c2,ang);\n}","name":"Image","description":"","type":"image"}]}