{"ver":"0.1","info":{"id":"XdVyRd","date":"1522968922","viewed":241,"name":"Cone-capsule","username":"MrShoor","description":"A small sample of conical capsule ray intersection","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool SolveSquare(float A, float B, float C, out vec2 x) {\n    float D = B*B - 4.0 * A * C;\n    if (D < 0.0) return false;\n    x.x = (-B - sqrt(D)) / (2.0 * A);\n    x.y = (-B + sqrt(D)) / (2.0 * A);\n    return true;\n}\n\nbool ConeIntersect(vec2 ConeR_ab, vec2 ConeCaps, vec3 ro, vec3 rd, out float t, out vec3 norm) {\n    t = 10000000.0;\n    float Al = ConeR_ab.x * rd.z;\n    float Bl = ConeR_ab.x * ro.z + ConeR_ab.y;\n    \n    float A = dot(rd.xy, rd.xy) - Al*Al;\n    float B = 2.0*(dot(rd.xy, ro.xy) - Al*Bl);\n    float C = dot(ro.xy, ro.xy) - Bl*Bl;\n    \n    vec2 tt;\n    if (!SolveSquare(A, B, C, tt)) return false;\n    vec2 zz = ro.zz + rd.zz*tt;\n    \n    int n = 2;\n    if ((zz.x < ConeCaps.x)||(zz.x > ConeCaps.y)) {\n        tt.x = tt.y;\n        n--;\n    }\n    if ((zz.y < ConeCaps.x)||(zz.y > ConeCaps.y)) {\n        tt.y = tt.x;\n        n--;\n    }\n    if (n==0) return false;\n    t = min(tt.x, tt.y);\n    \n    norm.xy = normalize(ro.xy + rd.xy*t);\n    norm.z = -ConeR_ab.x;\n    norm = normalize(norm);\n    \n    return true;\n}\n\nbool SphereIntersect(float SpRad, vec3 ro, vec3 rd, out float t, out vec3 norm) {\n    t = 10000000.0;\n    float A = dot(rd, rd);\n    float B = 2.0*dot(ro, rd);\n    float C = dot(ro, ro)-SpRad*SpRad;\n    vec2 tt;\n    if (!SolveSquare(A, B, C, tt)) return false;\n    t = min(tt.x, tt.y);\n    if (t < 0.0) return false;\n    norm = normalize(ro+t*rd);\n    return true;\n}\n\nbool ConeCapsuleIntersect(vec2 spZRad1, vec2 spZRad2, vec3 ro, vec3 rd, out float t, out vec3 norm) {\n    if (spZRad1.x > spZRad2.x) {\n        vec2 tmp = spZRad1;\n        spZRad1 = spZRad2;\n        spZRad2 = tmp;\n    }\n    vec2 ConeCaps;\n    float spdz = spZRad2.x - spZRad1.x;\n    float h1 = (spZRad1.y*spZRad2.y - spZRad1.y*spZRad1.y) / spdz;\n    float h2 = (spZRad2.y*spZRad2.y - spZRad1.y*spZRad2.y) / spdz;\n    ConeCaps.x = spZRad1.x - h1;\n    ConeCaps.y = spZRad2.x - h2;\n    \n    float ConeR1 = sqrt(spZRad1.y*spZRad1.y-h1*h1);\n    float ConeR2 = sqrt(spZRad2.y*spZRad2.y-h2*h2);\n    vec2 dZdR = vec2(ConeCaps.y-ConeCaps.x, ConeR2-ConeR1);\n    vec2 ConeR_ab;\n    ConeR_ab.x = dZdR.y / dZdR.x;\n    ConeR_ab.y = ConeR2 - ConeCaps.y*ConeR_ab.x;\n    \n    float sp_t;\n    vec3 sp_n;\n    \n    int n = 0;\n    if (ConeIntersect(ConeR_ab, ConeCaps, ro, rd, t, norm)) {\n        n++;\n    }\n    if (SphereIntersect(spZRad1.y, vec3(ro.xy, ro.z-spZRad1.x), rd, sp_t, sp_n)) {\n        if (sp_t < t){\n            t = sp_t;\n            norm = sp_n;\n        }\n        n++;\n    }\n    if (SphereIntersect(spZRad2.y, vec3(ro.xy, ro.z-spZRad2.x), rd, sp_t, sp_n)) {\n        if (sp_t < t){\n            t = sp_t;\n            norm = sp_n;\n        }\n        n++;\n    }\n    return (n > 0);\n}\n\nmat3 RotateTransform()\n{\n    mat3 res;\n    float t = iTime;\n    res[2] = normalize(vec3(cos(t), sin(t), cos(t)));\n    res[1] = vec3(cos(t), sin(t), 0.0);\n    res[0] = normalize(cross(res[1], res[2]));\n    res[1] = normalize(cross(res[2], res[0]));\n    return res;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec3 rd;\n    rd.xy = 2.0*fragCoord.xy/iResolution.xy - 1.0;\n    rd.x *= iResolution.x/iResolution.y;\n    rd.z = 1.0;\n    \n    vec3 ro = vec3(0.0,0.0,-10.0);\n    mat3 m = RotateTransform();\n    ro = ro * m;\n    rd = rd * m;\n    \n    rd = normalize(rd);\n    \n    vec4 Out;\n    vec3 crd, norm;\n    float t;    \n    \n    vec2 Cone_ZRad1 = vec2(-4.0, 4.0);\n    vec2 Cone_ZRad2 = vec2(4.0, 0.5);\n    if (ConeCapsuleIntersect(Cone_ZRad1, Cone_ZRad2, ro, rd, t, norm)) {\n        float dk = abs(dot(norm,rd));\n        Out = vec4(dk, dk, dk, 1.0);\n    } else {\n        Out = vec4(0.0);\n    }\n        \n    fragColor = Out;\n}","name":"Image","description":"","type":"image"}]}