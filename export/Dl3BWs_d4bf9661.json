{"ver":"0.1","info":{"id":"Dl3BWs","date":"1701705594","viewed":15,"name":"Fork Fork Fork  mippolito 562","username":"mippolito","description":"iteration with copilot","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["aifireworks"],"hasliked":0,"parentid":"cl3BWs","parentname":"Fork Fork Fork  mippolito 560"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy - 0.5f;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Gravity\n    vec2 gravity = vec2(0.0, -0.5);\n\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0); // Background color\n\n    // Loop over several bunches of particles\n    for (int j = 0; j < 10; ++j)\n    {\n        // Time since launch for this bunch, with an offset\n        float timeSinceLaunch = mod(iTime - float(j) * 0.5, 2.0);\n\n        // Initial position offset for this bunch, using a random function to introduce randomness\n        // Use floor(iTime / 2.0) to create a step function of time\n        float emissionRadius = 0.2; // Configure this to adjust the radius of emission\n        float randomAngle = 2.0 * 3.1416 * rand(vec2(float(j), floor(iTime / 5.0)));\n        vec2 positionOffset = emissionRadius * vec2(cos(randomAngle), sin(randomAngle));\n        \n        // Bunch color, based on the bunch index\n        vec4 bunchColor = vec4(rand(vec2(float(j), 0.0)), rand(vec2(float(j), 1.0)), rand(vec2(float(j), 2.0)), 1.0);\n\n        // Z plane simulation: scaling factor for size and velocity\n        float zScale = 1.0 - 0.1 * float(j);\n\n        // Loop over several particles within each bunch\n        for (int i = 0; i < 20; ++i)\n        {\n            // Calculate initial velocity based on the particle index, zScale, and a random component\n            float angle = 2.0 * 3.1416 * float(i) / 10.0;\n            vec2 velocity = zScale * vec2(cos(angle), sin(angle)) * (0.5 + rand(vec2(float(i), float(j))));\n\n            // Position based on time, velocity, gravity, and the position offset\n            vec2 position = 0.5 * gravity * pow(timeSinceLaunch, 2.0) + velocity * timeSinceLaunch + positionOffset;\n\n            // Calculate distance to the particle\n            float distanceToParticle = 5.*length(uv - position);\n\n            // Inverse square law for illumination\n            float intensity = 0.005 / (distanceToParticle * distanceToParticle + 0.01);\n\n            // Decay factor to reduce intensity over time\n            float decay = max(0.0, 1.0 - timeSinceLaunch / 2.0);\n\n            // Blend the bunch color with the background color based on the intensity and decay\n            color = mix(color, bunchColor, intensity * decay);\n        }\n    }\n\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}