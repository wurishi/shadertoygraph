{"ver":"0.1","info":{"id":"ml2GRm","date":"1673059867","viewed":75,"name":"N-Level voronoi graph","username":"Brumbler","description":"Click and drag left to right. Far left is 1st level Voronoi graph (a true Voronoi graph), showing the colors of the closest seed points. One to the right is the 2nd level Voronoi graph, showing the 2nd closest points, and so on.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nstruct ColoredPoint {\n    vec3 color;\n    vec2 pos;\n};\n\nconst int seed_count = 8;\n\nColoredPoint seeds[seed_count] = ColoredPoint[8](\n    ColoredPoint(vec3(0.4, 0.1, 0.5), vec2(0.3, 0.7)),\n    ColoredPoint(vec3(0.6, 0.1, 0.3), vec2(0.6, 0.9)),\n    ColoredPoint(vec3(0.2, 0.6, 0.7), vec2(0.6, 0.4)),\n    ColoredPoint(vec3(0.6, 0.5, 0.4), vec2(0.4, 0.8)),\n    ColoredPoint(vec3(0.3, 0.3, 0.8), vec2(0.2, 0.8)),\n    ColoredPoint(vec3(0.7, 0.9, 0.2), vec2(0.4, 0.3)),\n    ColoredPoint(vec3(0.1, 0.3, 0.1), vec2(0.7, 0.6)),\n    ColoredPoint(vec3(0.5, 0.8, 0.5), vec2(0.6, 0.2))\n);\n\nfloat distances[seed_count];\n\nColoredPoint sorted_seeds[seed_count];\n\nbool is_sorted[seed_count];\n\nfloat dist(vec2 a, vec2 b) {\n    vec2 d = a-b;\n\n    return sqrt(d.x*d.x+d.y*d.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    int section = int((iMouse.x / iResolution.x) * float(seed_count));\n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sort by distance\n    for(int i = 0; i < seed_count; i++) {\n        ColoredPoint closest;\n        float closest_dist = 420.0;\n        int closest_index;\n        for(int j = 0; j < seed_count; j++) {\n            if(is_sorted[j]) continue;\n            float current_dist = dist(seeds[j].pos, uv);\n            if(closest == ColoredPoint(vec3(0), vec2(0)) || current_dist < closest_dist) {\n                closest_dist = current_dist;\n                closest = seeds[j];\n                closest_index = j;\n            }\n        }\n\n        sorted_seeds[i] = closest;\n        is_sorted[closest_index] = true;\n        distances[i] = closest_dist;\n        \n    }\n    \n   \n    // Output to screen\n    const float point_outline_threshold = 0.01;\n    const float point_color_threshold = 0.006;\n    \n    if(distances[0] < point_outline_threshold) {\n        // draw ColoredPoint\n        if(distances[0] > point_color_threshold) {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        } else {\n            fragColor = vec4(sorted_seeds[0].color, 1.0); // show highlight of the color of the point\n        }\n    } else {\n        // draw the voronoi cells\n        fragColor = vec4(sorted_seeds[section].color, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}