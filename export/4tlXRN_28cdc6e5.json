{"ver":"0.1","info":{"id":"4tlXRN","date":"1434959996","viewed":228,"name":"My First Ugly Shader","username":"834144373","description":"...","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["uglyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//thanks inigo quilez's articles and other people's codes.\n//\"My First Ugly Shader\" by 834144373zhu/2015\n//https://www.shadertoy.com/view/4tlXRN\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define time iTime*0.1\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat theTorus(vec3 p){\n\tvec2 t = vec2(.3,0.2);\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nvec3 P2CameraSpace(in vec3 camPos,in vec3 p){\n\tvec3 dian = vec3(0,0,0);\n\tvec3 ArixY = vec3(0,1,0);\n\tvec3 z = normalize(dian - camPos);\n\tvec3 x = normalize(cross(z,ArixY));\n\tvec3 y = normalize(cross(z,x));\n\n\tvec3 theCameraSpaceP = vec3(\n\t//dot(p,x),dot(p,y),dot(p,z)\n\tp.x*x + p.y*y + p.z*z\n\t//mul(mat(x,y,z),p)\n\t//mul(p,mat(x,y,z))\n\t\t\t\t\n\t);\n\n\treturn theCameraSpaceP;\n}\n\nfloat map(in vec3 pos){\n\tpos.xyz = mod(pos.xyz,4.4)-2.2;\n\tfloat d;// = sdSphere(pos,1.);\n\t//d = opU(d,udBox(pos,vec3(0.3,1.,1.2)));\n    d = theTorus(pos);\n    d = max(d,udBox(pos,vec3(0.2,.3,.2)));\n\treturn d;\n}\n\nvec3 normal(in vec3 pos){\n\tvec2 offset = vec2(0.001,0);\n\tvec3 nDir = normalize(\n\t\tvec3(\n\t\t\tmap(pos+offset.xyy)-map(pos-offset.xyy),\n\t\t\tmap(pos+offset.yxy)-map(pos-offset.yxy),\n\t\t\tmap(pos+offset.yyx)-map(pos-offset.yyx)\n\t\t)\n\t);\n\treturn nDir;\n}\n\nfloat marching(in vec3 orgin,in vec3 p){\n\tfloat t = 1.;\n\t//int i;\n\tfor(int i=0;i<64;++i){\n\t\tvec3 sphere = orgin + t*p;\n\t\tfloat d = map(sphere);\n\t\tif(d<0.02)break;\n\t\tt += d;\n\t}\n\treturn t;\n}\n\nvec3 render(in vec3 pos,in vec3 p){\n\tfloat d = marching(pos,p);\n\tvec3 nDir = normal(pos + p*d);\n\t\n\tvec3 c = vec3(0.);\n\tif(d<85.){\n\t\tvec3 lDir = normalize(vec3(sin(time),cos(time),0.));\n\t\tfloat diff = max(0.,dot(lDir,nDir));\n\t\t\n\t\tc = nDir;//vec3(diff,diff,diff);\n\t}\n    \n    //Ugly Fog\n    c = mix(c-0.06,vec3(0.,0.,0.),d/75.);\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = ( fragCoord.xy / iResolution.xy )*2. - 1.;\n\tuv.x *= iResolution.x/iResolution.y;\n\n\tvec3 p = normalize(vec3(uv,2));\n\n\t// the Camera pos and move the Camera\n\tvec3 camPos = vec3(4.,12.,5.)+vec3(1.,8.*sin(time),8.*cos(time));\n\t// the new p direction\n\tvec3 theNewP = P2CameraSpace(camPos,p); \n\n\t//render the models and light them\n\tvec3 col = render(camPos,theNewP);\n\n\tfragColor = vec4( col, 1.0 );\n;\n}","name":"","description":"","type":"image"}]}