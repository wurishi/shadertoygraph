{"ver":"0.1","info":{"id":"ctfGz8","date":"1671231789","viewed":235,"name":"GLSL min vs branchless Min","username":"PrzemyslawZaworski","description":"Benchmark (5 seconds):\n- GLSL built-in \"min\" (blue color)\n- Branchless Min() taken from http://graphics.stanford.edu/~seander/bithacks.html (red color)\n\nIncrease or decrease LOOP, if number of FPS is over 60 or too low.\nIn my case, GLSL min is faster.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["glsl","branchless","min","integer","benchmark"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LOOPS 100000\n\nint Min (int x, int y)\n{\n\treturn (y ^ ((x ^ y) & -int(x < y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tint number = int(1e9);\n\tif (mod(iTime, 10.0) < 5.0)\n\t{\n\t\tfor (int i = 0; i < LOOPS; i++) number = min(number, i + int(fragCoord.x));\n\t\tfragColor = vec4(0.0, 0.0, int(iResolution.x / 2.) - number, 1.0);\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i < LOOPS; i++) number = Min(number, i + int(fragCoord.x));\n\t\tfragColor = vec4(int(iResolution.x / 2.) - number, 0.0, 0.0, 1.0);\n\t}\n}","name":"Image","description":"","type":"image"}]}