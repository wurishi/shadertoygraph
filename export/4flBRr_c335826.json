{"ver":"0.1","info":{"id":"4flBRr","date":"1723246153","viewed":36,"name":"Hue shift (Egg-omatic (6003 27))","username":"illegitimate_egg","description":"Dynamic hue shift, in the worst way possible","likes":2,"published":1,"flags":34,"usePreview":0,"tags":["hue","shitcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 claude = texture(iChannel0, uv);\n\n    float value = max(max(claude.r, claude.g), claude.b); // Chroma max\n    float chroma_min = min(min(claude.r, claude.g), claude.b);\n    \n    float delta = value - chroma_min;\n    float hue = 0.0;\n    \n    if (delta == 0.0) {\n        // Do nothing, proceed\n    } else if (value == claude.r) {\n        hue = 60.0 * (mod(((claude.g - claude.b)/delta), 6.0));\n    } else if (value == claude.g) {\n        hue = 60.0 * (((claude.b - claude.r)/delta) + 2.0);\n    } else if (value == claude.b) {\n        hue = 60.0 * (((claude.r - claude.g)/delta) + 4.0);\n    }\n    \n    float saturation = 0.0;\n    \n    if (value == 0.0) {\n        // Do nothing, proceed\n    } else {\n        saturation = delta/value;\n        //saturation = 1.0;\n    }\n\n    // DO COOL STUFF HERE\n    hue += (fancy_schmit.r+fancy_schmit.g)*360.0;\n    \n    hue = mod(hue, 360.0);\n    \n    float chroma = value * saturation;\n    float X = chroma * (1. - abs(mod(hue/60.0, 2.0) - 1.0));\n    float m = value - chroma;\n    \n    float r = 0.0;\n    float g = 0.0;\n    float b = 0.0;\n    \n    vec3 test = vec3(0.0, 0.0, 0.0);\n    \n    if (hue < 60.0) {\n        r = chroma;\n        g = X;\n        test = vec3(X+m, X+m, X+m);\n    } else if (hue < 120.0) {\n        r = X;\n        g = chroma;\n        //test = vec3(1.0, 0.0, 0.0);\n    } else if (hue < 180.0) {\n        g = chroma;\n        b = X;\n        //test = vec3(0.0, 1.0, 1.0);\n    } else if (hue < 240.0) {\n        g = X;\n        b = chroma;\n        //test = vec3(1.0, 1.0, 0.0);\n    } else if (hue < 300.0) {\n        r = X;\n        b = chroma;\n        //test = vec3(1.0, 0.0, 1.0);\n    } else {\n        r = chroma;\n        b = X;\n        //test = vec3(0.0, 1.0, 1.0);\n    }\n    \n    r += m;\n    g += m;\n    b += m;\n\n    // Output to screen\n    fragColor = vec4(r, g, b, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}