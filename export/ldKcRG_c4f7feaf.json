{"ver":"0.1","info":{"id":"ldKcRG","date":"1522490504","viewed":485,"name":"Unicorn Rings","username":"nightfox","description":"Playing around with rotation and custom lighting","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI 2.*acos(-1.)\n\nfloat rect(vec2 uv, vec2 bl, vec2 tr, float z) {\n \tfloat b = 0.005+.01*z*z;\n    float r = smoothstep(bl.x-b, bl.x+b, uv.x);\n    r *= smoothstep(bl.y-b, bl.y+b, uv.y);\n    r *= 1.-smoothstep(tr.x-b, tr.x+b, uv.x);\n    r *= 1.-smoothstep(tr.y-b, tr.y+b, uv.y);\n\treturn r;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv *= 2.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    int numSquares = min(500, int(2.*iTime));\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    for (int square = 0; square < numSquares; square++) {\n        float xShift = .8*sin(float(square)*TWOPI/float(numSquares));\n        float yShift = .8*cos(-iTime+float(square)*TWOPI/float(numSquares));\n        float zShift = .7+(sin(-iTime))*cos(iTime+float(square)*TWOPI/float(numSquares));\n    \tvec2 bl = vec2(-.1+xShift,-.1+yShift);\n    \tvec2 tr = vec2(.1+xShift,.1+yShift);\n        float angle = iTime;\n        vec2 sq_uv = mat2(cos(angle),-sin(angle), sin(angle), cos(angle))*uv;\n        float r = .5+.5*sin(6.*iTime+float(square)*TWOPI/float(numSquares));\n        float g = .5+.5*cos(.9*iTime+float(square)*TWOPI/float(numSquares));\n        float b = .5+.5*sin(iTime+float(square)*TWOPI/float(numSquares));\n        vec3 squareColour = vec3(r, g, b)*(1.-zShift)+1.*length(tr);\n    \tcol = mix(col, squareColour, zShift*rect(sq_uv*zShift, bl, tr, zShift));\n        xShift *= -1.5;\n        yShift *= -1.;\n        bl = vec2(-.1+xShift,-.1+yShift);\n    \ttr = vec2(.1+xShift,.1+yShift);\n        squareColour = vec3(r+g, g, b)*(1.-zShift)+1.*length(tr);\n        col = mix(col, squareColour, zShift*rect(sq_uv*zShift, bl, tr, zShift));\n        \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}