{"ver":"0.1","info":{"id":"3dscDl","date":"1585852556","viewed":135,"name":"Square + Circle contour ","username":"plosique","description":"Performs a ternary search to find the minimum distance to point from a given contour. The contour smoothly transitions from a square to a circle using a homotopic function which is just an interpolated contour.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["complex","ternarysearch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi=acos(-1.);\n\n\n//convert distance to smoothly produce line color if within a\n//certain threshold\nvec3 line(float dist){ \n    \n    return 1.0-vec3(smoothstep(0.,0.05,abs(dist)));\n}\n\n//Homotopic function that transtions from circle contour when s=0 \n//to square contour when s=1 on the 0 to pi/8 region (for variable t) \nvec2 h(float s,float t){ \n    return vec2(s+(1.-s)*cos(2.*pi*t),s*t/(pi/8.)+(1.-s)*sin(2.*pi*t));\n} \n//Ternary search for point and an s defining the current contour\n//to find the minimum distance to the contour.\n//Assuming distance to contour for a fixed point is convex within the region\n//It should be for this specific case.\nfloat ternary(float s,vec2 z){\n    //map z to within the pi/8 region\n    z=abs(z);\n    if(z.y>z.x){ \n        z=z.yx;\n    } \n    float l=0.;\n    float r=pi/8.;\n    float m1,m2;\n    vec2 contour1,contour2;\n    float mindist; \n    for(int i=0;i<30;i++){\n        m1=l+(r-l)/3.;\n        m2=r-(r-l)/3.;\n        contour1=h(s,m1);\n        contour2=h(s,m2); \n        float f1=length(z-contour1); \n        float f2=length(z-contour2);\n        if(f1<f2){ \n            r=m2;\n            mindist=f1;\n        }else{\n            l=m1; \n            mindist=f2;\n        } \n    } \n    return mindist;\n}\n        \n        \n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 z=2.*uv-vec2(iResolution.x/iResolution.y,1.);\n    z*=1.3;\n    float dist=ternary(abs(sin(pi*iTime/10.)),z); \n    vec3 col=line(dist); \n\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}