{"ver":"0.1","info":{"id":"MXlBDB","date":"1728924506","viewed":42,"name":"kaleidoscope_humble","username":"hunbleshaderfarmer","description":"A Replica ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getBackgroundColor(vec2 uv) {\n    uv += 0.5; // remap uv from <-0.5,0.5> to <0,1>\n    vec3 gradientStartColor = vec3(1., 0., 1.);\n    vec3 gradientEndColor = vec3(0., 1., 1.);\n    return mix(gradientStartColor, gradientEndColor, uv.y); // gradient goes from bottom to top\n}\n\nvec2 rotate(vec2 uv, float theta){\n    vec2 uvTilt =  mat2(cos(theta), sin(theta), -sin(theta), cos(theta)) * uv;\n    return uvTilt;\n}\n\nfloat sdfCircle(vec2 uv, float r, vec2 center) {\n  float x = uv.x - center.x;\n  float y = uv.y - center.y;\n  return length(vec2(x, y)) - r;\n}\n\nfloat curveLineLeft(vec2 uv, float thick, vec2 center,float theta){\n    vec2 cen1 = vec2(center.x+thick,center.y);\n    vec2 cen2 = vec2(center.x-thick,center.y);\n     cen1 = rotate(cen1,theta);\n    cen2 = rotate(cen2,theta);\n    float cir1 = sdfCircle(uv,1.9,cen1);\n    float cir2 = sdfCircle(uv,1.9,cen2);\n    return max(-cir1,cir2);\n}\n\nfloat curveLineRight(vec2 uv,float thick,vec2 center,float theta){\n    vec2 cen1 = vec2(center.x+thick,center.y);\n    vec2 cen2 = vec2(center.x-thick,center.y);\n    cen1 = rotate(cen1,theta);\n    cen2 = rotate(cen2,theta);\n    float cir1 = sdfCircle(uv,1.9,cen1);\n    float cir2 = sdfCircle(uv,1.9,cen2);\n    return max(cir1,-cir2);\n}\n\nfloat curve_eye_line(vec2 uv,float theta){\n    vec2 dirLeft,dirRight;\n    dirLeft.xy = vec2(1.7,0.);\n    dirRight = vec2(-1.7,0.); \n    float cir1 = curveLineRight(uv,0.01,dirRight,theta);\n    float cir2 = curveLineLeft(uv,0.01,dirLeft,theta);\n    return min(cir1,cir2);\n}\nfloat curve_eye(vec2 uv,float theta){\n    vec2 dir1 = vec2(1.7,0);\n    vec2 dir2 = vec2(-1.7,0);\n    dir1 = rotate(dir1,theta);\n    dir2 = rotate(dir2,theta);\n    float cir1 = sdfCircle(uv,1.89,dir1);\n    float cir2 = sdfCircle(uv,1.89,dir2);\n    return max(cir1,cir2);\n    \n}\n\n\nvec3 drawScene(vec2 uv) {\n  vec3 col = vec3(1,1,1);\n  //First Draw the Inner Black Circle\n  float outerCircle = sdfCircle(uv,0.95,vec2(0.,0.));\n  col = mix(vec3(0, 0, 0), col, step(0., outerCircle));\n  float eye ;\n  //Red Inner Petal\n  for(float i=0.;i<3.;i++){\n      eye = curve_eye(uv,3.14*i/3.+iTime);\n      col = mix(vec3(0.61, 0., 0.0), col, step(0., eye));\n  }\n  //Black Inner Decorative Lines\n  for(float i=0.;i<3.;i++){\n      eye = curve_eye_line(uv,3.14*i/3.-iTime);\n      col = mix(vec3(0, 0, 0), col, step(0., eye));\n\n  }\n  //Inner Black Circle\n  float innerCircle = sdfCircle(uv,0.07,vec2(0.,0.));\n  col = mix(vec3(0, 0, 0), col, step(0., innerCircle));\n  //Clear Outer Line \n  col = mix(vec3(0.61, 0, 0), col, step(0., -outerCircle));\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy; \n  uv -= 0.5; \n  uv *= 2.;\n  uv.x *= iResolution.x/iResolution.y; \n  vec3 col = drawScene(uv);\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}