{"ver":"0.1","info":{"id":"DdBXWw","date":"1670375892","viewed":225,"name":"Snowtoy","username":"fishy","description":"snow!","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n#define PI 3.14159265359\n#define START 3\n#define LAYERS 7\n\n#define iTime (iTime*0.4)\n\nfloat mRange(float ai, float aa, float bi, float ba, float x) { return (x-ai)/(aa-ai)*(ba-bi)+bi; } // Maps x between a range of ai-aa to bi-ba\nfloat mRange(vec2 a, vec2 b, float x) { return mRange(a.x, a.y, b.x, b.y, x); }\nfloat sRange(float i, float a, float x) { return x*(a-i)+i; } // Maps x between a range of 0-1 to i-a\nfloat sRange(vec2 a, float x) { return sRange(a.x, a.y, x); }\nfloat eRange(float i, float a, float x) { return (x-i)/(a-i); } // Maps x between a range of i-a to 0-1\nfloat eRange(vec2 a, float x) { return eRange(a.x, a.y, x); }\n\nfloat maxcomp(vec2 p) { return max(p.x, p.y); }\nfloat mincomp(vec2 p) { return min(p.x, p.y); }\n\nfloat atan2(vec2 p) { return atan(p.y, p.x); }\n\nfloat getSnow(vec2 p, float scale, float jitter, vec2 softness, vec2 size, vec4 lobes, vec2 rotRate, float moveFreq, vec2 moveAmp, float moveRand, vec2 opacity, float fill, float t)\n{\n    vec2 lp = fract(p*scale)-0.5;\n    vec2 cell = mod(floor(p*scale), 100.);\n    vec2 flakePos = (hash22(cell)-0.5)*jitter+sin(hash22(cell)*TAU*moveRand+t*moveFreq)*moveAmp;\n    float o = sRange(softness, hash21(cell))*0.5;\n    vec2 hm = vec2(floor(sRange(lobes.xy, hash21(cell+5.))), sRange(lobes.zw, hash21(cell+3.)));\n    float i = sRange(size, hash21(hash22(cell)))+sin(atan2(lp-flakePos)*4.0*hm.x + t*sRange(rotRate, hash21(cell+10.)))*hm.y;\n    return hash21(hash22(cell)) < fill? sRange(opacity, hash21(cell+7.))*smoothstep(i+o, i-o, length(lp-flakePos)) : 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec2 suv = fragCoord/iResolution.xy;\n    vec2 mo = (iMouse.xy-iResolution.xy*0.5)/iResolution.y;\n\n    float snow = 0.;\n    for(float i = -float(START); i < float(LAYERS-START); i++)\n    {\n        float scale = exp2(-i);\n        snow += getSnow(uv/scale-iTime*vec2(0.2, -0.3)+i*1.141, 10., 0.4, vec2(0.0, 0.01)+(9.-scale-iMouse.x/iResolution.x)*0.03, vec2(0., 0.1), vec4(1., 3., 0.001, 0.005), vec2(20., 40.), 4., vec2(0.1, 0.1),1., vec2(0.2, 0.8), exp2(-i-float(START)), iTime);\n    }\n    \n    float light = max(0., 2.-length(suv-1.))+sRange(0.1, 0.15, 1.-suv.y);\n    snow += light*0.1;\n    \n    vec3 col = dither(vec3(snow), fragCoord);\n\n    // Output to screen\n    fragColor = displayVar(col);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 displayVar(bool a) { return vec4(vec3(a), 1.0); }\n\nvec4 displayVar(float a){ return vec4(vec3(a), 1.0); }\n\nvec4 displayVar(vec2 a) { return vec4(a, 0.0, 1.0); }\n\nvec4 displayVar(vec3 a) { return vec4(a, 1.0); }\n\nvec4 displayVar(vec4 a) { return vec4(a.xyz, 1.0); }\n\nvoid join(inout float a, float b)\n{\n    a = min(a, b);\n}\n\nvoid subt(inout float a, float b)\n{\n    a = max(a, -b);\n}\n\nfloat box(vec2 p, vec2 s)\n{\n    return max((abs(p)-s).x,(abs(p)-s).y);\n}\n\nfloat digit(vec2 p, int d)\n{\n    #define join(a) join(r, a)\n    #define subt(a) subt(r, a)\n    float r = 100000000.0;\n    switch(d)\n    {\n        case(0):\n            join(box(p, vec2(0.1, 0.15)));\n            subt(box(p, vec2(0.05, 0.1)));\n            break;\n        case(1):\n            join(box(p, vec2(0.025, 0.15)));\n            break;\n        case(2):\n            join(box(p, vec2(0.1, 0.15)));\n            subt(box(p-vec2(0.15, -0.06), vec2(0.2, 0.035)));\n            subt(box(p-vec2(-0.15, 0.06), vec2(0.2, 0.035)));\n            break;\n        case(3):\n            join(box(p, vec2(0.1, 0.15)));\n            subt(box(p-vec2(-0.15, -0.06), vec2(0.2, 0.035)));\n            subt(box(p-vec2(-0.15, 0.06), vec2(0.2, 0.035)));\n            break;\n        case(4):\n            join(box(p-vec2(0.075, 0.0), vec2(0.025, 0.15)));\n            join(box(p-vec2(0.0, 0.05), vec2(0.1, 0.1)));\n            subt(box(p-vec2(0.0, 0.09), vec2(0.05, 0.085)));\n            break;\n        case(5):\n            join(box(p, vec2(0.1, 0.15)));\n            subt(box(p-vec2(0.15, 0.06), vec2(0.2, 0.035)));\n            subt(box(p-vec2(-0.15,-0.06), vec2(0.2, 0.035)));\n            break;\n        case(6):\n            p = -p;\n            join(box(p-vec2(0.075, 0.0), vec2(0.025, 0.15)));\n            join(box(p-vec2(0.0, 0.05), vec2(0.1, 0.1)));\n            subt(box(p-vec2(0.0, 0.05), vec2(0.05, 0.05)));\n            break;\n        case(7):\n            join(box(p-vec2(0.0), vec2(0.1, 0.15)));\n            subt(box(p-vec2(-0.05), vec2(0.1, 0.15)));\n            break;\n        case(8):\n            join(box(p-vec2(0.0), vec2(0.1, 0.15)));\n            subt(box(p-vec2(0.0, 0.05), vec2(0.05, 0.05)));\n            subt(box(p-vec2(0.0, -0.05), vec2(0.05, 0.05)));\n            join(box(p-vec2(0.0), vec2(0.1, 0.025)));\n            break;\n        case(9):\n            join(box(p-vec2(0.075, 0.0), vec2(0.025, 0.15)));\n            join(box(p-vec2(0.0, 0.05), vec2(0.1, 0.1)));\n            subt(box(p-vec2(0.0, 0.05), vec2(0.05, 0.05)));\n            break;\n    }\n    #undef subt\n    return r;\n}\n\nfloat getDig(float num, float d)\n{\n    float a = floor(num/pow(10., d));\n    return a - floor(a/10.)*10.;\n}\n\nfloat print(vec2 p, float num, float spacing)\n{\n    float r = 10000.0;\n    int fig = int(ceil(log2(num) / 3.32192809489)); // log base 10 of x equals log base 2 of x divided by log base 2 of 10\n    for(int i = 0; i < fig; i++)\n    {\n        int di = int(getDig(num, float(i)));\n        join(digit(p+vec2(i, 0)*spacing, di));\n    }\n    return r;\n    #undef join\n}\n\nvec3 printFR(vec2 p, float iFrameRate)\n{\n    return 1.-vec3(step(0., print((p-vec2(0.474, 0.25))*9., iFrameRate, 0.3)));\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec2 hash12(float p)\n{\n    vec3 p3 = fract(vec3(p,p,p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash21(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat shash(float x)\n{\n    return mix(hash11(floor(x)), hash11(floor(x)+1.), fract(x));\n}\n\nvec3 dither(vec3 color, vec2 coord, float steps)\n{\n    vec3 reduce = floor(color*steps)/steps;\n    vec3 error = color-reduce;\n    float noise = hash21(coord);\n    return reduce+step(vec3(noise), error*steps)/steps;\n}\n\nvec3 dither(vec3 color, vec2 coord)\n{\n    return dither(color, coord, 256.);\n}","name":"Common","description":"","type":"common"}]}