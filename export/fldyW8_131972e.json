{"ver":"0.1","info":{"id":"fldyW8","date":"1659703325","viewed":201,"name":"Quadratic Bezier (projection)","username":"mrboggieman","description":"Test to determine if a point is inside a quadratic bezier curve using projection (https://pomax.github.io/bezierinfo/)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["collision","bezier","quadratic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float EPSILON = 0.00001;\n\nfloat det2(in vec2 a, in vec2 b) {\n    return determinant(mat2(a, b));\n}\n\nvec2 lineIntersect(in vec2 a, in vec2 b, in vec2 c, in vec2 d) {\n    float t = det2(a-c, a-b) / det2(a-b, c-d);\n    return mix(c, d, clamp(t, 0.0, 1.0));\n}\n\nbool insideLine(in vec2 p, in vec2 a, in vec2 b) {\n    return det2(p-a, b-a) >= 0.0;\n}\n\nbool insideQuadraticBezier(in vec2 p, in vec2 a, in vec2 b, in vec2 c)\n{\n    //intersect the line between c and a between our point and the control point\n    vec2 d = lineIntersect(p, b, c, a);\n    \n    float f = distance(d, c) / distance(c, a);\n    \n    //we can now derive t by solving: f = ((1-t)^2) / (t^2 + (1-t)^2)\n    //detailed in https://pomax.github.io/bezierinfo/\n    float denom = (2.0*f - 1.0);\n    \n    float t;\n    \n    if (abs(denom) < EPSILON) {\n        t = 0.5;\n    } else {\n        t = (f + sqrt(-(f - 1.0)*f) - 1.0) / denom;\n    }\n    \n    vec2 pos = mix(mix(a, b, t), mix(b, c, t), t);\n    \n    return distance(p, d) < distance(pos, d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.y;\n    \n    vec2 a = vec2(0.2, 0.2);\n    vec2 b = length(iMouse.xy) > 10.0 ? iMouse.xy / iResolution.y : vec2(0.6, 0.8);\n    vec2 c = vec2(1.4, 0.3);\n    \n    //draw points\n    if (min(distance(p, a), (min(distance(p, b), distance(p, c)))) < 0.02) {\n        fragColor = vec4(1.0);\n        return;\n    }\n    \n    //point inside test\n    if (insideLine(p, a, b) && insideLine(p, b, c) && insideLine(p, c, a) && insideQuadraticBezier(p, a, b, c)) {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        return;\n    }\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}