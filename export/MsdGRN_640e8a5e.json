{"ver":"0.1","info":{"id":"MsdGRN","date":"1463341807","viewed":163,"name":"Deconstructing Worley Noise","username":"danim","description":"Trying to understand worley noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GRID_SIZE 9.\n#define ERROR 0.015\n//#define DEBUG\n#define NOISE\n#define ANIMATION_SPEED 0.001\n\nfloat noise(vec2 p)\n{\n    p += sin(iTime*ANIMATION_SPEED);\n#ifdef NOISE\n\treturn fract(sin(fract(sin(p.x) * (43.13311)) + p.y) * 31.0011);\n#else\n    return 0.;\n#endif\n}\n\n//Calculate the squared length of a vector\nfloat sqr_len(vec2 p)\n{\n    return dot(p,p);\n}\n\nfloat manhattan_dist(vec2 p)\n{\n    return abs(p.x) + abs(p.y);\n}\n\nfloat distance_function( vec2 a, vec2 b )\n{\n    return sqr_len(a - b);\n    //return manhattan_dist( a - b );\n}\n\nfloat worley(vec2 p) \n{\n    //Set our distance to infinity\n \tfloat d = 1e30;\n    //For the 9 surrounding grid points\n \tfor (int xo = -1; xo <= 1; ++xo) {\n  \t\tfor (int yo = -1; yo <= 1; ++yo) {\n            //Floor our vec2 and add an offset to create our point\n   \t\t\tvec2 tp = floor(p) + vec2(xo, yo);\n            //Calculate the minimum distance for this grid piont\n            d = min(d, distance_function(p,tp + noise(tp)));\n  \t\t}\n \t}\n \treturn d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float _step = 1.;\n    vec2 s = uv * GRID_SIZE;\n#ifdef DEBUG\n    //paint a grid for debugging\n    vec2 diff = s - floor(s);\n    _step = step( ERROR, min( diff.x, diff.y ) );\n#endif\n    s += fract( iTime * ANIMATION_SPEED );\n\tfragColor = vec4( (1.-_step)*vec3(1.0,0.,0.)  + _step*vec3(0.0,0.0,0.2+worley(s)),1.0);\n}","name":"Image","description":"","type":"image"}]}