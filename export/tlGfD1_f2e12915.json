{"ver":"0.1","info":{"id":"tlGfD1","date":"1614252824","viewed":74,"name":"bouncing box","username":"gourki","description":"bouncing box","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["bouncingbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.)\n#define dt(speed) fract(iTime*speed)\n#define looptime(speed) abs(-1.+2.*dt(speed))\n\nfloat square (vec2 uv, float size)\n{\n    uv = abs(uv);\n    return max(uv.x,uv.y)-size;\n}\n\nfloat easeOutBounce(float x) \n{\n    float n1 = 7.5625;\n    float d1 = 2.75;\n\n    if (x < 1. / d1) {\n        return n1 * x * x;\n    }\n    else if (x < 2. / d1) {\n        return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } \n    else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    }\n    else {\n        return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    \n    vec2 offset = vec2(1.,0.);\n    \n    //anim\n    vec2 bouncy_animation = vec2(-4.+10.*fract(looptime(0.1)) , sqrt(abs(sin(fract(looptime(.5))*PI *2.))))*0.5;\n    vec2 bouncy_deux = vec2(-4.+20.*fract(looptime(0.08)), 1.2-easeOutBounce(looptime(.5)));\n    //shapes\n    //fileed square\n    float s = step(0.2,square(centered_uv + offset- bouncy_animation, 0.));\n    \n    //outlined square \n    float outline_s = step(0.02, abs(square(centered_uv + offset -bouncy_deux, 0.2)));\n    \n    \n    // Final color\n    vec3 col = vec3(s * outline_s);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}