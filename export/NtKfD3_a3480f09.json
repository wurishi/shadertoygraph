{"ver":"0.1","info":{"id":"NtKfD3","date":"1665379965","viewed":109,"name":"Moda filter","username":"Envy24","description":"Kernel order can be changed in Common tab, line 7.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["filter","radixsort","moda"],"hasliked":0,"parentid":"NsccWX","parentname":"Median Filter __"},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define READ_PIXEL(SC) (TEX0(TO_TEX_COORDS(SC)))\n\nfloat average(vec4 color)\n{\n    return (color.x + color.y + color.z) * 0.3333333;\n}\n\nvoid fill_buffers(\n    inout float kernel[num_of_elements],\n    inout vec2 coords[num_of_elements],\n    in vec2 SC)\n{\n    float O = float(order);\n    int rw_offset = 0;\n    for (float r = -O; r <= O; r += 1.)\n    {\n        for (float c = -O; c <= O; c += 1.)\n        {\n            coords[rw_offset] = SC + vec2(r, c);\n            kernel[rw_offset] = average(READ_PIXEL(coords[rw_offset]));\n            \n            ++rw_offset;\n        }\n    }\n}\n\nvoid radix_sort(inout float array[num_of_elements])\n{\n    const int max_num_of_digits = 3;\n    const int base = 10;\n\n    int temp[num_of_elements];\n    int digits_array[10];\n    int power = 1;\n\n    for (int k = 0; k < max_num_of_digits; ++k)\n    {\n        for (int i = 0; i < 10; ++i) { digits_array[i] = 0; }\n    \n        for (int i = 0; i < num_of_elements; ++i)\n        {\n            int value = int(array[i]);\n            int digit = (value / power) % base;\n            ++digits_array[digit];\n            temp[i] = value;\n        }\n\n        for (int i = 0; i < 9; ++i)\n        {\n            digits_array[i + 1] += digits_array[i];\n        }\n        \n        for (int i = num_of_elements - 1; i >= 0; --i)\n        {\n            float value = float(temp[i]);\n            int digit = (temp[i] / power) % base;\n            array[--digits_array[digit]] = value;\n        }\n        \n        power *= base;\n    }\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    fill_buffers(kernel, coords, SC);\n    \n    float copy[num_of_elements];\n    for (int i = 0; i < num_of_elements; ++i) \n    { \n        kernel[i] = floor(kernel[i]*255.); // map from [0; 1] to [0; 255]\n        copy[i] = kernel[i];\n    }\n    radix_sort(copy);\n\n    float moda = 1., moda_count = 0., cur = copy[0], count = 1.;\n    for(int i = 1; i < num_of_elements; ++i) \n    { \n        // Match?\n        if (cur == copy[i]) { count += 1.; continue; }\n\n        // Update moda info.\n        if (count >= moda_count) { moda_count = count; moda = cur; }\n\n        // Reset variable.\n        cur = copy[i]; count = 1.;\n    }\n    \n    int moda_idx = 0;\n    while((moda_idx < num_of_elements) && (moda != kernel[moda_idx])) { ++moda_idx; }\n    O = READ_PIXEL(coords[moda_idx]);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R                           iResolution\n#define TO_TEX_COORDS(SC)         ( (SC) / (R.xy) )                  // in range x=[0.0; 1.0], y=[0.0; 1.0]\n#define TEX0(TC)                  ( texture(iChannel0, (TC)) )\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )  // (channel, integer coordinates, mipmap level)\n\n#define DO_NOT_CHANGE 1\nconst int order = max(DO_NOT_CHANGE, 3);\nconst int row_length = order * 2 + 1;\nconst int num_of_elements = row_length * row_length;\nfloat kernel[num_of_elements];\nvec2 coords[num_of_elements];","name":"Common","description":"","type":"common"}]}