{"ver":"0.1","info":{"id":"MtVfRR","date":"1541661696","viewed":149,"name":"Low-res default effect","username":"slack","description":"Low-res version of the default effect","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = max(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord/scale;\n    \n    float dot_size = 0.9;\n    \n    // Output to screen\n    float row = trunc(uv.y * 30.0);\n    float col = trunc(uv.x * 30.0);\n\n    // Time varying pixel color\n    vec3 color = 0.5 + 0.5*cos(iTime+0.15*vec3(col, row, col)+vec3(0,2,4));\n\n    \n    float px = fract(uv.x * 30.0);\n    float py = fract(uv.y * 30.0);\n    if (px < dot_size && py < dot_size) {\n      float distance = distance(vec2(px, py), vec2(dot_size/2.0));\n      float noise = 0.15*(random(uv)-0.5);\n      fragColor = vec4(color, 1.0) * vec4(1.0 - distance*distance + noise);\n    }\n    else\n      fragColor = vec4(0.0);\n}","name":"Image","description":"","type":"image"}]}