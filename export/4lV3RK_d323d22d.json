{"ver":"0.1","info":{"id":"4lV3RK","date":"1475535783","viewed":285,"name":"Rainbow Circles","username":"Friendship","description":"Total GLSL and programming noob here! Series of concentric circles blending though different hues at an offset time from one another.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Converts hsv to rgb - How the heck does this work? O_o\n//Taken from https://gist.github.com/kylemcdonald/f8df3bc2f8d38ca2b7cb\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Converts rgb to hsv - also have no idea how this works\n//Not needed currently but might use it if I do more with this :3\n//Taken from http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //taken from vug's GLSL tutorials - https://www.shadertoy.com/view/Md23DV\n    vec2 center = vec2( fragCoord.xy - 0.5*iResolution.xy );\n\t// [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n\tcenter = 2.0 * center.xy / iResolution.y;\n\t// [-0.5*iResolution.x, 0.5*iResolution.x] -> [-1.0, 1.0]\n    \n    \n    float timemodifier = 1.0; // adjusts the rate the colors change.\n    float time = iTime / timemodifier;\n    vec4 pixel = vec4(0.0,0.0,0.0,1.0); //background color\n    \n    //tehsauce's better circle drawing method\n    float d = length(center);\n    if (d < 2.1 ){\n    \tpixel = vec4(hsv2rgb( vec3(0.5+0.5*sin(time+floor(10.0*d)/7.0) , 1.0, 1.0) ), 1.0);\n    }\n    \n    // -----test --------\n    //Off center circles changing saturation/value\n    float d2 = length(center + 0.5);\n    if (d2 < 0.5 ){\n    \tpixel = vec4(hsv2rgb( vec3(0.5+0.5*sin(time+floor(10.0*d)/7.0) , 0.5+0.5*sin(time+floor(10.0*d)/7.0), 1.0) ), 1.0);\n       // pixel = vec4(hsv2rgb( vec3(0.5+0.5*sin(time+floor(10.0*d)/7.0) , 1.0, 1.0) ), 1.0) * pixel;\n    }\n    float d3 = length(center - 0.5);\n    if (d3 < 0.5 ){\n        pixel = vec4(hsv2rgb( vec3(0.5+0.5*sin(time+floor(10.0*d)/7.0) , 1.0 , 0.5+0.5*sin(time+floor(10.0*d)/7.0)) ), 1.0);\n        //pixel = vec4(hsv2rgb( vec3(0.5+0.5*sin(time+floor(10.0*d)/7.0) , 1.0, 1.0) ), 1.0) * pixel;\n    }\n    //Cannot figure out how to get circles in the other corners!\n    /*float d4 = length(center - 1.0);\n    if (d4 < 0.5 ){\n        //pixel = vec4(hsv2rgb( vec3(0.5+0.5*sin(time+floor(10.0*d)/7.0) , 1.0, 1.0) ), 1.0) * pixel;\n        pixel = vec4(1.0); //so I can see where I'm moving it\n    }   \n    */\n    \n    \n    \n    \n\n\tfragColor = vec4(pixel);\n}","name":"Image","description":"","type":"image"}]}