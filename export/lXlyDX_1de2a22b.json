{"ver":"0.1","info":{"id":"lXlyDX","date":"1726745825","viewed":33,"name":"noise generator","username":"ruochen","description":"noise generation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise_res = 32.0f;\nfloat noise_scale = 1.0f;\n\nfloat Hash(int n)\n{\n    return fract(sin(float(n) + 1.951) * 43752.3);\n}\n\nfloat Noise(vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(vec3(3.0) - vec3(2.0)*f);\n    float a = 57.0;\n    float b = 178.0;\n    float c = a + b;\n    float n = p.x + p.y*a + p.z*b;\n    return mix(\n            mix(\n                mix(Hash(int(n)), Hash(int(n+1.0)), f.x),\n                mix(Hash(int(n+a)), Hash(int(n+a+1.0)), f.x),\n                f.y),\n            mix(\n                mix(Hash(int(n+b)), Hash(int(n+b+1.0)), f.x),\n                mix(Hash(int(n+c)), Hash(int(n+c+1.0)), f.x),\n                f.y),\n        f.z\n    );\n}\n\nfloat cells(vec3 p, float cell_count)\n{\n    vec3 p_cell = p * cell_count;\n    float d = 1.0e10;\n    for(int xo = -1; xo < 2; ++xo)\n    {\n        for(int yo = -1; yo < 2; ++yo)\n        {\n            for(int zo = -1; zo < 2; ++zo)\n            {\n                vec3 tp = floor(p_cell) + vec3(xo, yo, zo);\n                tp = p_cell - tp - Noise(mod(tp, cell_count));\n                d = min(d, dot(tp, tp));\n            }\n        }\n    }\n\n    d = clamp(d, 0.0, 1.0);\n    return d;\n}\n\nfloat worleyNoise3D(vec3 p, float cell_count)\n{\n    return cells(p, cell_count);\n}\n\nvec4 stackable3DNoise(vec3 pixel)\n{\n\tvec3 coord = pixel/noise_res;\n    coord.x += iTime/noise_res;\n    coord.y += iTime/noise_res;\n\t// 3 octaves\n\tfloat cellCount = 2.0;\n\tfloat worleyNoise0 = (1.0f - worleyNoise3D(coord, cellCount * 1.0));\n\tfloat worleyNoise1 = (1.0f - worleyNoise3D(coord, cellCount * 2.0));\n\tfloat worleyNoise2 = (1.0f - worleyNoise3D(coord, cellCount * 4.0));\n\tfloat worleyNoise3 = (1.0f - worleyNoise3D(coord, cellCount * 8.0));\n\tfloat worleyFBM0 = worleyNoise0*0.625f + worleyNoise1*0.25f + worleyNoise2*0.125f;\n\tfloat worleyFBM1 = worleyNoise1*0.625f + worleyNoise2*0.25f + worleyNoise3*0.125f;\n\tfloat worleyFBM2 = worleyNoise2*0.75f + worleyNoise3*0.25f; \n\t// cellCount=4 -> worleyNoise4 is just noise due to sampling frequency=texel freque. So only take into account 2 frequencies for FBM\n\n\treturn vec4(worleyFBM0, worleyFBM1, worleyFBM2, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * noise_scale;\n    \n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 coord = uv.xyy;\n    coord.z = floor(fragCoord.x/34.) + 10.*floor(fragCoord.y/34.);\n    \n    // Output to screen\n    fragColor = stackable3DNoise(coord); \n    \n}","name":"Image","description":"","type":"image"}]}