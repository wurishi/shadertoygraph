{"ver":"0.1","info":{"id":"3tS3W3","date":"1561271315","viewed":182,"name":"IFS test","username":"edo_m18","description":"This is IFS test.\nI cannot understand the IFS sale factor to apply correctly.\n=> Modified that. I modified the size to normalize by sum scale.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = acos(-1.);\nconst float pi2 = pi * 2.0;\n\n#define repeat(p, span) mod(p, span) - (0.5 * span)\n\nmat3 camera(vec3 ro, vec3 ta)\n{\n    vec3 up = vec3(0, 1, 0);\n    vec3 cw = normalize(ta-ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nmat2  rot(float a)\n{\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b, vec3 offs)\n{\n    return length(max(abs(p + offs) - b, 0.0));\n}\n\nfloat map(vec3 p)\n{\n    //p.xz = repeat(p.xz, 5.0);\n    const int ITER = 3;\n    float scale = 2.0;\n    float offset = 0.65;\n    float sum = scale;\n    \n    vec3 z = p;\n    \n    float d = 1e5;\n    \n    float r = 0.5;\n    for (int i = 0; i < ITER; i++)\n    {\n        z = abs(z);\n        \n        if (z.x < z.y) z.xy = z.yx;\n        if (z.x < z.z) z.xz = z.zx;\n        if (z.y < z.z) z.yz = z.zy;\n        \n        z = z * scale;// - offset *  (scale - 1.0) * float(i);\n        z = abs(z) - offset * float(i);\n        z.xy *= rot(sin(iTime * 0.1) * pi);\n        d = min(d, sdBox(z, vec3(0.5), vec3(0.)) / sum);\n        \n        sum *= scale;\n        scale *= r;\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    float d = map(p);\n    vec3 n = d - vec3(\n        map(p - e.xyy),\n        map(p - e.yxy),\n        map(p - e.yyx));\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n\tvec3 col = vec3(0);\n    \n    float time = iTime * 0.3;\n    float dist = 5.;\n    vec3 ro = vec3(cos(time) * dist, 5, sin(time) * dist);\n    //vec3 ro = vec3(0, 5, 5);\n    vec3 ta = vec3(0);\n    vec3 ray = camera(ro, ta) * normalize(vec3(uv, 1.5));\n    vec3 p = ro;\n    \n    float d = 0.;\n    for (int i = 0; i < 64; i++)\n    {\n        d = map(p);\n        if (d < 0.01) break;\n        p += ray * d;\n    }\n    \n    if (d < 0.01)\n    {\n        const vec3 light = normalize(vec3(1));\n        vec3 n = normal(p);\n        float diff = clamp(dot(n, light), 0.5, 1.0);\n        col = vec3(diff) *(n * 0.5 + 0.5);\n    }\n    else\n    {\n        vec3 fog = vec3(0.5, 0.8, 1.5) * abs(1.0 - uv.y);\n \t   col += fog * 0.5;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}