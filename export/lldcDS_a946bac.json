{"ver":"0.1","info":{"id":"lldcDS","date":"1533937452","viewed":118,"name":"Sun and Moon over Ocean","username":"draco_nite","description":"I want to do the waves smoother but dunno how","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sun","moon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n#define sunRadius 0.09\n#define moonRadius 0.075\n#define posMult 0.808\n#define timeMult 0.5\n#define pi 3.14159265\n\nstruct gp {\n    float point;\n    vec3 col;\n};\n\nvec3 getFromGradient(float pos, gp grad[6]) {\n    // find what we're between\n    float lt0 = step(pos, grad[0].point);\n    float b01 = step(grad[0].point, pos) * step(pos, grad[1].point);\n    float b12 = step(grad[1].point, pos) * step(pos, grad[2].point);\n    float b23 = step(grad[2].point, pos) * step(pos, grad[3].point);\n    float b34 = step(grad[3].point, pos) * step(pos, grad[4].point);\n    float b45 = step(grad[4].point, pos) * step(pos, grad[5].point);\n    float gt5 = step(grad[5].point, pos);\n    \n\t// get the between values\n    float b01v = grad[1].point - grad[0].point;\n    float b12v = grad[2].point - grad[1].point;\n    float b23v = grad[3].point - grad[2].point;\n    float b34v = grad[4].point - grad[3].point;\n    float b45v = grad[5].point - grad[4].point;\n    \n    // get the between values points\n    float b01p = pos - grad[0].point;\n    float b12p = pos - grad[1].point;\n    float b23p = pos - grad[2].point;\n    float b34p = pos - grad[3].point;\n    float b45p = pos - grad[4].point;\n    \n    // scale what we're between as a %\n    float b01s = b01p / b01v;\n\tfloat b12s = b12p / b12v;\n\tfloat b23s = b23p / b23v;\n    float b34s = b34p / b34v;\n    float b45s = b45p / b45v;\n\n    // mix our colors\n    vec3 lt0c = grad[0].col * lt0;\n    vec3 b01c = mix(grad[0].col, grad[1].col, b01s) * b01;\n    vec3 b12c = mix(grad[1].col, grad[2].col, b12s) * b12;\n    vec3 b23c = mix(grad[2].col, grad[3].col, b23s) * b23;\n\tvec3 b34c = mix(grad[3].col, grad[4].col, b34s) * b34;\n    vec3 b45c = mix(grad[4].col, grad[5].col, b45s) * b45;\n    vec3 gt5c = grad[4].col * gt5;\n    \n    return lt0c + b01c + b12c + b23c + b34c + b45c + gt5c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // make our gradient\n    gp gradient[6];\n    gradient[0] = gp(0.000, vec3(0.349,0.806,1.000)); // day\n    gradient[1] = gp(0.168, vec3(1.000,0.374,0.092)); // sunset\n    gradient[2] = gp(0.211, vec3(0.147,0.110,0.310)); // night\n    gradient[3] = gp(0.786, vec3(0.147,0.110,0.310)); // night\n    gradient[4] = gp(0.925, vec3(1.000,0.635,0.325)); // sunrise\n    gradient[5] = gp(1.000, vec3(0.349,0.806,1.000)); // day\n    \n    \n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    vec2 sun = vec2(0.);\n    sun.x = (sin(iTime * timeMult) * posMult + 0.9);\n    sun.y = (cos(iTime * timeMult) * posMult);\n    \n    vec2 moon = vec2(0.);\n    moon.x = -(sin(iTime * timeMult) * posMult + -0.9);\n    moon.y = -(cos(iTime * timeMult) * posMult);\n    \n    // colors\n    vec3 skyColor = getFromGradient(mod(iTime / (2. * pi) * timeMult, 1.), gradient);\n    vec3 oceanColor = vec3(0.000,0.000,0.705);\n    vec3 sunColor = vec3(1.000,0.822,0.674);\n    vec3 moonColor = vec3(0.720,0.720,0.720);\n        \n    // get distance from sun and moon\n    float distFromSun = distance(sun, st);\n    float distFromMoon = distance(moon, st);\n    \n    // set shapes\n    float isOcean = step(sin((st.x + iTime / 2.) * 40.) / 200. * sin((iTime) * 4.) + 0.3, st.y);\n    float isSun = step(sunRadius, distFromSun);\n    float isMoon = step(moonRadius, distFromMoon);\n    float isSphere = step(1.064, isSun + isMoon);\n    \n    // and paint them\n    vec3 spheres = moonColor * (1. - isMoon) + sunColor * (1. - isSun);\n    vec3 sky = skyColor * (isSphere) + spheres;\n    vec3 color = sky * isOcean + oceanColor * (1. - isOcean);\n\n    fragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}