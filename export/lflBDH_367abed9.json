{"ver":"0.1","info":{"id":"lflBDH","date":"1723722664","viewed":22,"name":"Puple Color Eye","username":"ShaderDizzle","description":"some cicles in a circle","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 getColor(float index, float alpha) {\n    float hue = mod(index * 0.3 + iTime * 0.1, 1.0);\n    float saturation = 1.0; \n    float lightness = 0.3;\n    vec3 color = hsv2rgb(vec3(hue, saturation, lightness));\n    return color * alpha;\n}\n\nfloat circle(vec2 uv, vec2 center, float radius) {\n    return length(uv - center) - radius;\n}\n\nvoid drawCircle(inout vec3 color, vec2 uv, vec2 center, float radius, float index) {\n    float circleDist = circle(uv, center, radius);\n    if (circleDist < 0.0) {\n        float alpha = sin(iTime * 2.0) * 0.5 + 0.5;\n        color += getColor(index, alpha);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 color = vec3(0.0);\n\n    int numCircles = 30;\n    float maxRadius = 10.0;\n    for (int i = 0; i < numCircles; i++) {\n        float angle = 6.28318 * float(i) / float(numCircles); \n        vec2 center = 0.6 * vec2(cos(angle), sin(angle)); \n        float radius = maxRadius / float(numCircles); \n        drawCircle(color, uv, center, radius, float(i));\n    }\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}