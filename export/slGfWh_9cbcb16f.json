{"ver":"0.1","info":{"id":"slGfWh","date":"1664421187","viewed":136,"name":"Spectrogram (sonogram)","username":"Envy24","description":"Spectrogram with linear and logarithmic scales on [a, b].\nMouse.y controls color intensity.","likes":5,"published":1,"flags":96,"usePreview":0,"tags":["spectrum","linear","scale","logarithmic","spectrogram","pixelization","amplitudes"],"hasliked":0,"parentid":"NlyBWz","parentname":"Spectrum of amplitudes"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution \n#define TO_TEX_COORDS(SC)         ( (SC) / (R.xy) )                  // in range x=[0.0; 1.0], y=[0.0; 1.0]\n\nvoid mainImage( out vec4 O, in vec2 SC ) { O = texture(iChannel0, TO_TEX_COORDS(SC)); }","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Mt2SWR","filepath":"https://soundcloud.com/aleshaoleg/quincas-moreira-moskito","previewfilepath":"https://soundcloud.com/aleshaoleg/quincas-moreira-moskito","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R                           iResolution     \n#define TO_TEX_COORDS(SC)         ( (SC) / (R.xy) )                  // in range x=[0.0; 1.0], y=[0.0; 1.0]\n#define PIXEL_SIZE                 4.\n#define PIXELATE(SC)              ( floor( (SC) / (PIXEL_SIZE) ) * (PIXEL_SIZE) )\n#define NZMY                      ( (iMouse.y+iMouse.y-R.y) / R.y )  // in range [-1.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\n/* source: https://www.shadertoy.com/view/7ddBRr */\nvec3 palette(float t)\n{\n    vec3 colors[5] = vec3[5](\n        vec3(1), vec3(1,1,0), vec3(.8,0,0), vec3(.2,0,.8), vec3(0)\n    );\n    \n    int idx = 1;\n    switch(int(t*5.))\n    {\n    case 0: t = t * 5.0; idx = 4; break;       // t=[0; 0.2)\n    case 1:\n    case 2: t = (t-.2) * 2.5; idx = 3; break;  // t=[0.2; 0.6)\n    case 3: t = (t-.6) * 5.0; idx = 2; break;  // t=[0.6; 0.8)\n    case 4: t = (t-.8) * 5.0; break;           // t=[0.8; 1]\n    }\n       \n    return colors[idx-1]*t + colors[idx]*(1.0-t);\n}\n\nfloat cubicBezier(vec2 p0, vec2 p1, float t)\n{\n    float tt = t * t, f = 1.0 - t, ff = f * f;\n    vec2 B = vec2(0.0, 0.0), E = vec2(1.0, 1.0);\n    return (ff*f * B + 3.0 * ff * t * p0 + 3.0 * f * tt * p1 + tt*t * E).y;\n}\n\nfloat log10(float y) { return log(y) / log(10.); }\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 TC = TO_TEX_COORDS(PIXELATE(SC));                    // map [x][y] from [0; R.x][0; R.y] to [0; 1][0; 1]\n    float scroll_speed = 4.0,                                 // pixels per frame\n          mouse = LMB_IS_HOLD == true ? max(NZMY, -.8) : 0.1; // color intensity\n   \n    /* Linear [a, b] *\n    float a = 40.0,  b = 20000., max_freq = 20000.,\n          k = b - a, x = (k*TC.y+a) / max_freq,                              // map from [0;1] to [a;b]\n          amplitude = texture(iChannel0, vec2(x, 0.)).r;                     // read amplitude fo freq x\n          amplitude = cubicBezier(vec2(1., 0.), vec2(1., mouse), amplitude); // attenuation\n    O = \n        SC.x >= R.x - PIXEL_SIZE ?\n           vec4(palette(amplitude), 1.) :                                    // update last column\n           texture(iChannel1, TO_TEX_COORDS(SC + vec2(scroll_speed, 0)));    // scroll spectrum\n    /* Logarithmic [a, b] */\n    float a = 40.,      b = 20000.,   max_freq = 20000.,\n          A = log10(a), B = log10(b), k = B - A,\n          x = pow(10., k*TC.y+A) / max_freq,                                 // map from [0;1] to [a;b]\n          amplitude = texture(iChannel0, vec2(x, 0.)).r;                     // read amplitude fo freq x\n          amplitude = cubicBezier(vec2(1., 0.), vec2(1., mouse), amplitude); // attenuation\n    O = \n        SC.x >= R.x - PIXEL_SIZE ?          \n           vec4(palette(amplitude), 1.) :                                    // update last column\n           texture(iChannel1, TO_TEX_COORDS( SC + vec2(scroll_speed, 0) ));  // scroll spectrum\n    /**/\n}","name":"Buffer A","description":"","type":"buffer"}]}