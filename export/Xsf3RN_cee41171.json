{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//utility\r\nfloat remap(float value, float inputMin, float inputMax, float outputMin, float outputMax)\r\n{\r\n    return (value - inputMin) * ((outputMax - outputMin) / (inputMax - inputMin)) + outputMin;\r\n}\r\nfloat rand(vec2 n, float time)\r\n{\r\n  return 0.5 + 0.5 * \r\n     fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453 + time);\r\n}\r\n\r\nstruct Circle\r\n{\r\n\tvec2 center;\r\n\tfloat radius;\r\n};\r\n\t\r\nvec4 circle_mask_color(Circle circle, vec2 position)\r\n{\r\n\tfloat d = distance(circle.center, position);\r\n\tif(d > circle.radius)\r\n\t{\r\n\t\treturn vec4(0.0, 0.0, 0.0, 1.0);\r\n\t}\r\n\t\r\n\tfloat distanceFromCircle = circle.radius - d;\r\n\tfloat intencity = smoothstep(\r\n\t\t\t\t\t\t\t\t    0.0, 1.0, \r\n\t\t\t\t\t\t\t\t    clamp(\r\n\t\t\t\t\t\t\t\t\t    remap(distanceFromCircle, 0.0, 0.1, 0.0, 1.0),\r\n\t\t\t\t\t\t\t\t\t    0.0,\r\n\t\t\t\t\t\t\t\t\t    1.0\r\n\t\t\t\t\t\t\t\t    )\r\n\t\t\t\t\t\t\t\t);\r\n\treturn vec4(intencity, intencity, intencity, 1.0);\r\n}\r\n\r\nvec4 mask_blend(vec4 a, vec4 b)\r\n{\r\n\tvec4 one = vec4(1.0, 1.0, 1.0, 1.0);\r\n\treturn one - (one - a) * (one - b);\r\n}\r\n\r\nfloat f1(float x)\r\n{\r\n\treturn -4.0 * pow(x - 0.5, 2.0) + 1.0;\r\n}\r\n\t\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n\tvec2 uv = fragCoord.xy / iResolution.xy;\r\n\t\r\n\tfloat wide = iResolution.x / iResolution.y;\r\n\tfloat high = 1.0;\r\n\t\r\n\tvec2 position = vec2(uv.x * wide, uv.y);\r\n\t\r\n\tCircle circle_a = Circle(vec2(0.5, 0.5), 0.5);\r\n\tCircle circle_b = Circle(vec2(wide - 0.5, 0.5), 0.5);\r\n\tvec4 mask_a = circle_mask_color(circle_a, position);\r\n\tvec4 mask_b = circle_mask_color(circle_b, position);\r\n\tvec4 mask = mask_blend(mask_a, mask_b);\r\n\t\r\n\tfloat greenness = 0.4;\r\n\tvec4 coloring = vec4(1.0 - greenness, 1.0, 1.0 - greenness, 1.0);\r\n\t\r\n\tfloat noise = rand(uv * vec2(0.1, 1.0), iTime * 5.0);\r\n\tfloat noiseColor = 1.0 - (1.0 - noise) * 0.3;\r\n\tvec4 noising = vec4(noiseColor, noiseColor, noiseColor, 1.0);\r\n\t\r\n\tfloat warpLine = fract(-iTime * 0.5);\r\n\t\r\n\t/** debug\r\n\tif(abs(uv.y - warpLine) < 0.003)\r\n\t{\r\n\t\tfragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\treturn;\r\n\t}\r\n    */\r\n\t\r\n\tfloat warpLen = 0.1;\r\n\tfloat warpArg01 = remap(clamp((position.y - warpLine) - warpLen * 0.5, 0.0, warpLen), 0.0, warpLen, 0.0, 1.0);\r\n\tfloat offset = sin(warpArg01 * 10.0)  * f1(warpArg01);\r\n\t\r\n\t\r\n\tvec4 lineNoise = vec4(1.0, 1.0, 1.0, 1.0);\r\n\tif(abs(uv.y - fract(-iTime * 19.0)) < 0.0005)\r\n\t{\r\n\t\tlineNoise = vec4(0.5, 0.5, 0.5, 1.0);\r\n\t}\r\n\t\r\n\tvec4 base = texture(iChannel0, uv + vec2(offset * 0.02, 0.0));\r\n\tfragColor = base * mask * coloring * noising * lineNoise;\r\n\r\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xsf3RN","date":"1363344648","viewed":1128,"name":"Night vision device","username":"ushiostarfish","description":"Night vision device","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""}}