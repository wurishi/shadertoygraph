{"ver":"0.1","info":{"id":"MdXBDf","date":"1498469741","viewed":93,"name":"SurMetaball","username":"surma","description":"A metaball","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["metaball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_IT 256\n#define EPSILON 0.0001\n#define PI 3.1415926535\n\nvec4 sdSphere(vec3 p, float s, vec3 color) {\n  return vec4(color, length(p)-s);\n}\n\nvec4 udBox(vec3 p, vec3 b, vec3 color) {\n  return vec4(color, length(max(abs(p)-b,0.0)));\n}\n\nvec4 sdPlane(vec3 p, vec3 n, vec3 color) {\n  return vec4(color, dot(normalize(n), p));\n}\n\nmat4 genCameraMatrix(vec3 camera, vec3 up, vec3 lookAt, float fovy, float aspect) {\n  // Coordinate system\n  vec3 lookDir = normalize(lookAt - camera);\n  vec3 xDir = normalize(cross(lookDir, up));\n  vec3 yDir = normalize(cross(xDir, lookDir));\n  // Stretch vectors to size of canvas\n  xDir *= tan(fovy/360.0*PI);\n  yDir *= tan(fovy/360.0*PI)/aspect;\n\n  vec3 origin = camera + lookDir - xDir/2.0 - yDir/2.0;\n  return\n    mat4( // Translation to first pixel of canvas\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      origin, 1.0\n    ) * mat4( // Change of basis\n      vec4(xDir, 0.0),\n      vec4(yDir, 0.0),\n      vec4(-lookDir, 0.0),\n      0.0, 0.0, 0.0, 1.0\n    );\n}\n\nvec4 sdUnion(vec4 a, vec4 b) {\n  return a.w < b.w ? a : b;\n}\n\nvec3 sdRepeat(vec3 p, vec3 c) {\n  return mod(p,c)-0.5*c;\n}\n\nvec3 translate(vec3 p, vec3 t) {\n  return p - t;\n}\n\nfloat smin(float a, float b, float k) {\n    float res = exp(-k*a) + exp(-k*b);\n    return -log(res)/k;\n}\n\nvec4 smoothUnion(vec4 a, vec4 b) {\n  return vec4(a.rgb, smin(a.w, b.w, 0.8));\n}\n\nvec4 worldSDF(vec3 p) {\n  return\n    smoothUnion(\n      sdSphere(\n        translate(p, vec3(0.0, sin(iTime)*3.0+1.0, 0.0)),\n        1.0,\n        vec3(1.0, 0.0, 0.0)\n      ),\n      sdPlane(\n        translate(p, vec3(0.0, -1.0, 0.0)),\n        vec3(0.0, 1.0, 0.0),\n        vec3(1.0, 1.0, 1.0)\n      )\n    );\n}\n\nvec3 worldNormal(vec3 p) {\n  return normalize(\n    vec3(\n      worldSDF(p + vec3(EPSILON, 0.0, 0.0)).w - worldSDF(p - vec3(EPSILON, 0.0, 0.0)).w,\n      worldSDF(p + vec3(0.0, EPSILON, 0.0)).w - worldSDF(p - vec3(0.0, EPSILON, 0.0)).w,\n      worldSDF(p + vec3(0.0, 0.0, EPSILON)).w - worldSDF(p - vec3(0.0, 0.0, EPSILON)).w\n    )\n  );\n}\n\nfloat closestIntersection(vec3 ro, vec3 rd, float tstart) {\n  float t = tstart;\n  float d = 1.0;\n  int count = 0;\n  while(d > EPSILON && count < MAX_IT) {\n    d = worldSDF(ro + rd * t).w;\n    t += d;\n    count++;\n  }\n  return t + d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 camera = vec3(30.0 * sin(iTime), 15.0, 30.0 * cos(iTime));\n  //vec3 camera = vec3(0.0, 10.0, 30.0);\n  vec3 up = vec3(0.0, 1.0, 0.0);\n  vec3 lookAt = vec3(0.0, 0.0, 0.0);\n  vec3 light = vec3(12.0, 12.0, 12.0);\n  float fov = 45.0;\n  vec4 fogColor = vec4(0.5, 0.6, 0.7, 1.0);\n  float fogFactor = 0.04;\n\n\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  float aspectRatio = iResolution.x/iResolution.y;\n  mat4 cameraMatrix = genCameraMatrix(camera, up, lookAt, fov, aspectRatio);\n\n  vec3 rayDirection = normalize((cameraMatrix * vec4(uv, 0.0, 1.0)).xyz - camera);\n  float intersectionDistance = closestIntersection(camera, rayDirection, 0.0);\n  vec3 intersectionPoint = camera + rayDirection * intersectionDistance;\n  vec3 color = worldSDF(intersectionPoint).rgb;\n\n  vec3 toLight = light - intersectionPoint;\n  float shadowCasterDistance = closestIntersection(intersectionPoint, normalize(toLight), EPSILON*10.0);\n  float lightFactor = shadowCasterDistance < length(toLight) ? 0.0 : 1.0;\n  float distanceFromLight = clamp(1.0-length(toLight)/50.0, 0.0, 1.0);\n  float distanceFactor = pow(distanceFromLight, 2.0);\n  lightFactor *= distanceFactor;\n\n  float lambert = dot(worldNormal(intersectionPoint), normalize(toLight));\n\n  fragColor = vec4(color * vec3(lambert*lightFactor), 1.0);\n\n  float fogAmount = 1.0 - exp(-intersectionDistance * fogFactor);\n  fogAmount = pow(fogAmount, 10.0);\n  fragColor = mix(fragColor, fogColor, fogAmount);\n\n}\n\n","name":"Image","description":"","type":"image"}]}