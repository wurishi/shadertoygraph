{"ver":"0.1","info":{"id":"tlcBWM","date":"1620157782","viewed":73,"name":"sphere shading simple","username":"space_sheep","description":"sphere shading simple","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphereshadingsimple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.1415926535;\n\nfloat drawSphere(vec3 center, vec3 lightPos, float radius, vec2 uv)\n{\n    /*\n        C  = center of sphere\n        C2 = moved C, to account for light position\n        LP = light coord\n        A  = z coord of sphere\n        A2 = moved A, to account for light position\n        D  = used for calculating angle of reflection\n    */\n    \n    vec3 LP = lightPos;\n    \n    vec3 C = center; float r = radius;\n    vec3 C2 = LP - C;\n    vec3 A = vec3(uv.x, uv.y, -sqrt( pow(r,2.) - pow(C.x-uv.x, 2.) - pow(C.y-uv.y, 2.) ) + C.z ) ;\n    vec3 A2 = LP - A;\n    vec3 D = A2 - (dot(A2, C2-A2)/pow(length(C2-A2),2.))*(C2-A2);\n    \n    float deg = pi - pi/2. - acos( dot(A2,D) / (length(A2)*length(D)) );\n    deg = 1.0 - (deg * 2.) / (pi);\n\n    float l = sqrt( pow(length(C2), 2.) - pow(r, 2.) );\n    \n    if(length(uv-C.xy)<r)\n    {\n        if(length(A2)<l)\n        {\n            return deg+.12;\n        }\n        return .12;\n    }\n    return .0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = max(iResolution.x, iResolution.y) / min(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord/iResolution.xy;\n    if(iResolution.x > iResolution.y) uv.y /= r; else uv.x /= r;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col = vec3(.0,.0,.0);\n\n    vec3 LP = vec3(mouse.xy, .0);\n    \n    vec3 C = vec3(floor(uv.x*10.0)/10.0+.05,floor(uv.y*10.0)/10.0+.05,.5);\n    \n    fragColor.x = drawSphere(C, LP, .05, uv);\n\n}","name":"Image","description":"","type":"image"}]}