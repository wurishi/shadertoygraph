{"ver":"0.1","info":{"id":"cltXD2","date":"1690653580","viewed":56,"name":"Born Bliss ","username":"voodoovoid","description":"Learning techniques & experimenting","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["experiment","light","fun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 3D Circle Realm Psy\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.650, 0.306, 0.620);\n    vec3 b = vec3(0.349, 0.421, 0.293);\n    vec3 c = vec3(0.556, 1.447, 1.563);\n    vec3 d = vec3(3.375, 4.336, 5.894);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.y, iResolution.x);\n    vec2 c = vec2(1.0 * sin(iTime), 1.0 * cos(iTime / 9.99)); // Constant for the Julia set\n    vec2 uv0 = uv;\n\n    vec3 finalColor = vec3(0.01);\n    \n    for (float i = 0.0; i < 0.5; i++) {\n        float iter = 0.0;\n        vec2 z = uv;\n        for(int j = 0; j < 777; j++) {\n            float x = (z.x*z.x - z.y*z.y);\n            float y = (3.14*z.x*z.y);\n            z = vec2(x, y) + c;\n            if(length(z) > 1.2) break;\n            iter++;\n        }\n\n        float smoothIter = iter - log(log(length(z))) / log(3.0);\n        float d = length(uv) * exp(-length(uv0) * cos(iTime * 1.0));\n        \n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*9. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.00666 / d, 0.1);\n\n        finalColor += col * d;\n    }\n    \n    fragColor = vec4(finalColor, 0.7);\n}","name":"Image","description":"","type":"image"}]}