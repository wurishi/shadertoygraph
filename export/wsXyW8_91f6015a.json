{"ver":"0.1","info":{"id":"wsXyW8","date":"1584647865","viewed":726,"name":"Hexosphere","username":"ilyaev","description":"Sphere with hexagons","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sphere","hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 128\n#define MAX_DISTANCE 3.\n#define MIN_DISTANCE 0.001\n#define SPEED 3.\n#define SIZE 3.\n#define SPHERE_SIZE .8\n\nfloat n21(vec2 p) {\n    return fract(sin(p.x*123.453 + p.y*4567.543) * 67894.432 );\n}\n\nfloat hexDist(vec2 uv) {\n    uv = abs(uv);\n    return max(uv.x, dot(uv, normalize(vec2(1., 1.73))));\n}\n\nvec4 hexCoords(vec2 uv) {\n    vec2 r = vec2(1., 1.73);\n    vec2 h = r * .5;\n\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n\n    vec2 gv;\n\n    if (length(a) < length(b)) {\n        gv = a;\n    } else {\n        gv = b;\n    }\n\n    float x = atan(gv.x, gv.y);\n    float y = .5 - hexDist(gv);\n\n    vec2 id = uv - gv;\n\n    return vec4(x, y, id.xy);\n}\n\nvec3 getTexture(vec2 uv) {\n    vec3 col = vec3(0.);\n\n    float size = 3.;\n\n    vec2 ouv = uv;\n\n    vec2 id = floor(uv*size);\n    uv = fract(uv*size) - .5;\n\n    vec3 c = vec3(0.);\n\n    for(int x = -1 ; x <= 1 ; x++) {\n        for(int y = -1 ; y <= 1 ; y++) {\n            vec2 offset = vec2(x, y);\n            vec2 nid = id + offset;\n            float n = n21(nid);\n            if (n > .2) {\n                float n1 = fract(n*123.456);\n                float n2 = fract(n*5678.543);\n                vec3 color = vec3(n, n1, n2);\n                vec2 shift = vec2(n1 - .5, n2 - .5)*sin(iTime + n*n1 + n2);\n                c = max(c, ((0.01 + 0.02*n2)/length(uv - offset - shift)) * color);\n            }\n        }\n    }\n\n    col += c;\n\n    return col;\n}\n\nfloat getHeight(vec3 p, vec4 hex) {\n    float base = 0. + sin(hex.a/hex.b + iTime*2.)*.02;\n    base = clamp(hex.y/2., 0., base + SPHERE_SIZE/30.);\n    return base;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoords) {\n\n    vec2 uv = fragCoords.xy / iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 mouse = iMouse.xy / iResolution.xy;\n\n    vec3 col = vec3(0.);\n\n    float a = iTime;\n\n    vec3 ro = vec3(0., 0., -2.);\n    vec3 lookat = vec3(0., 0., 3.);\n    float zoom = 1.;\n\n    vec3 f = normalize(lookat - ro);\n    vec3 r = normalize(cross(vec3(0., 1., 0.), f));\n    vec3 u = cross(f, r);\n    vec3 c = ro + f * zoom;\n    vec3 i = c + uv.x * r + uv.y * u;\n\n    vec3 rd = normalize(i - ro);\n\n\n    float ds, dt = 0.;\n    vec3 p;\n    float x,y = 0.;\n    vec2 suv;\n    vec4 hex;\n\n    for(int i = 0 ; i < MAX_STEPS ; i++) {\n        p = ro + rd * ds;\n\n        x = acos(p.y/length(p));\n        y = atan(p.z, p.x) + iTime/SPEED;\n\n        suv = vec2(x, y);\n\n        hex = hexCoords(suv*SIZE);\n        float base = SPHERE_SIZE + sin(hex.a*hex.b + iTime*10.)*.0;\n\n        dt = length(p) - (base + getHeight(p, hex));\n        ds += dt * .6;\n\n        if (abs(dt) < MIN_DISTANCE || ds > MAX_DISTANCE) {\n            break;\n        }\n    }\n\n    float t = iTime*3.;\n\n    if (dt < MIN_DISTANCE) {\n        col += getTexture(suv);\n        //vec4 hex = hexCoords(suv*SIZE);\n\n        float b = smoothstep(.9, 1., sin(t + sin(t)/cos(t + sin(t*3.+t))) * .5 + .5);\n\n        vec3 gridColor = mix(vec3(0., 1., 1.), mix(vec3(1.,0.,0.), vec3(0.,1.,0.), sin(iTime)), cos(iTime/2.));\n\n        col += pow(.005/hex.y, .6) * gridColor * b;\n\n        col += vec3(n21(hex.ba + 100.))*.6;\n    } else {\n        col = getTexture(uv + vec2(iTime/(SPEED*2.), 0.));\n    }\n\n    fragColor = vec4(clamp(col, 0., 1.), 1.);\n\n}","name":"Image","description":"","type":"image"}]}