{"ver":"0.1","info":{"id":"ldjBDm","date":"1503287996","viewed":579,"name":"Keynote Hex Background","username":"mplanck","description":"Used for a keynote slide presentation background. Subtle and dark on purpose so not to make too distracting from slide content. I slowed down the animation and darkened color a bit more for final usage. Amplified here for demo.","likes":10,"published":1,"flags":0,"usePreview":1,"tags":["background","hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// inspired by and copied from iq:\n// https://www.shadertoy.com/view/Xd2GR3\n\n#define TWO_PI 6.283185\n\nvec3 iq_color_palette(vec3 a, vec3 b, vec3 c, vec3 d, float t)\n{\n    return a + b * cos(TWO_PI * (c*t + d));\n}\n\n// copied from iq\n// { 2d cell id, distance to border, distance to center )\nvec4 hexagon( vec2 p ) \n{\n\tvec2 q = vec2( p.x*2.0*0.5773503, p.y + p.x*0.5773503 );\n\t\n\tvec2 pi = floor(q);\n\tvec2 pf = fract(q);\n\n\tfloat v = mod(pi.x + pi.y, 3.0);\n\n\tfloat ca = step(1.0,v);\n\tfloat cb = step(2.0,v);\n\tvec2  ma = step(pf.xy,pf.yx);\n\t\n    // distance to borders\n\tfloat e = dot( ma, 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy) );\n\n\t// distance to center\t\n\tp = vec2( q.x + floor(0.5+p.y/1.5), 4.0*p.y/3.0 )*0.5 + 0.5;\n\tfloat f = length( (fract(p) - 0.5)*vec2(1.0,0.85) );\t\t\n\t\n\treturn vec4( pi + ca - cb*ma, e, f );\n}\n\n// copied from iq\nfloat hash1( vec2  p ) { float n = dot(p,vec2(127.1,311.7) ); return fract(sin(n)*43758.5453); }\n\n// copied from iq\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\tvec2 pos = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\t\n    float t = .8 * (1. - pow(uv.y, .5));\n    pos.y += -.5;\n\tpos *= 2. - 0.3*pos.y;\n    \n    vec4 h = vec4(0.);\n    float n = 0.;\n    vec3 col = vec3(0.);\n\n\th = hexagon(12.0*pos);\n    n = noise( vec3(0.3*h.xy+vec2(iTime*.7, 0.),0.) );\n    t += .2 * (1. - n);\n    \n\tcol = .5 * abs(sin( hash1(h.xy)*.4 + 1.6 + vec3(1.) ));\n\tcol *= smoothstep( 0.0+t, 0.1+t, h.z );\n\tcol *= 1. + 0.5*h.z*n;        \t\n    col *= 1. + .5 * iq_color_palette(vec3(0.5, 0.5, 0.5),\n                                 vec3(0.5, 0.5, 0.5),\n                                 vec3(2.0, 1.0, 0.0),\n                                 vec3(0.5, 0.2, 0.25),\n                                 iTime * .02);\n    col *= .7 + .3 * iq_color_palette(vec3(.5, .5, .5),\n                                      vec3(.5, .5, .5),\n                                      vec3(.3, 1., 1.),\n                                      vec3(0., .25, .25),                                      \n\t        uv.y-.8-iTime*.05);\n\tcol *= pow( 16.0*uv.x*(1.0-uv.x)*uv.y*(1.0-uv.y), 0.4 );\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}