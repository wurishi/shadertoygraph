{"ver":"0.1","info":{"id":"wd3BRr","date":"1604187214","viewed":106,"name":"Storm FBM","username":"henrmota","description":"Just practicing.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["storm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LACUNARITY 1.98\n#define GAIN 0.45\n#define OCTAVES 8\n\nfloat hash21(vec2 p) {\n\tfloat rnd = sin(dot(p,vec2(213., 653.)));\n\n    return fract(rnd * 1234.);\n}\n\nfloat noise(vec2 uv) {\n\tvec2 i = floor(uv);\n    vec2 f = fract(uv);\n    \n    f = f*f*(3.0 - 2.0 * f);\n    float a = hash21(i);\n    float b = hash21(i + vec2(1., 0.));\n    float c = hash21(i + vec2(0., 1.));\n    float d = hash21(i + vec2(1., 1.));\n    \n    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n}\n\nfloat fbm(vec2 uv) {\n    float value = 0.;\n    float amp = 1.;\n    float freq = 4.;\n    float divisor = 0.;\n    \n    for(int i = 0; i < OCTAVES; i++) {\n     value += noise(uv * freq) * amp;\n     divisor += amp;  \n     freq *= LACUNARITY;\n     amp *= GAIN;\n    }\n    \n    return value / divisor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    uv -= 0.5;\n\t\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float d = 0.1/length(uv);\n    col += smoothstep(0.1, 1., pow(d, 2.)) * 0.25;\n    \n    col += sin(\n        fbm(uv + fbm(uv + fbm(uv)*0.02) * 0.08 + iTime * 0.1) - 0.01/(cos(iTime)*0.5 + 0.5)\n    );\n\n\t\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}