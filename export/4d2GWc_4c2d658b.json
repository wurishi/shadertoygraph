{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"struct traceResult {\n\tfloat d;\n\tvec3 intersection;\n\tvec3 normal;\n\tvec3 color;\n};\n\t\ntraceResult trace( vec3 orig, vec3 delta ) {\n\tvec3 spherea = vec3(0, 1, 00);\n\tfloat spherea_r = 20.0;\n\tvec3 sphereb = vec3(400, 250, 1500);\n\tfloat sphereb_r = 300.0;\n\tvec3 spherec = vec3(200, -300, 1400);\n\tfloat spherec_r = 300.0;\n\t\n\tfloat plane_y = -300.0;\n\t\n\tfloat bar, foo, d=100000.0, d2;\n\tvec3 intersection, norm, color;\n\t\n\tbar = dot(delta,orig-spherea);\n\tfoo = ( bar*bar - dot(orig-spherea,orig-spherea) + spherea_r*spherea_r );\n\td2 = - bar - sqrt(foo);\n\tif( foo>0.0 && d2 > 0.01 && d2<d ) {\n\t\tintersection = orig + delta*d2;\n\t\tnorm = normalize(spherea-intersection);\n\t\td=d2;\n\t\tcolor=vec3(0.8,0.2,0.3);\n\t}\n\t\n\treturn traceResult( d, intersection, norm, color );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat st = sin(iTime);\n\tfloat ct = cos(iTime);\n\tvec3 delta = normalize( vec3(fragCoord.xy-0.5*iResolution.xy, iResolution.x*0.5) );\n\t//delta = vec3(delta.x*ct-delta.z*st,delta.y,delta.z*ct+delta.x*st);\n    vec3 orig = vec3( 20.0*st, 0.0, -60.0-10.0*ct );\n\tvec3 lighta = vec3(100, 100, 100);\n\tvec3 lightb = vec3(-100, 200, -100);\n\t\n\ttraceResult r = trace(orig, delta);\n\t\n\t\n\t//if( ! (r.d > 0.001) ) {\n\t//\tfragColor = vec4(0,0,0,0);\n\t//}\n\t//else {\n\t\tvec3 el = normalize(r.intersection-lighta);\n        lighta = normalize(lighta);\n\t\tfloat e = dot( r.normal, lighta);//el );\n\t\tfloat es = pow( dot( delta ,normalize(2.0*dot(el,r.normal)*r.normal-el) ), 100.0);\n\t\tif( e < 0.0){ e=0.0; es=0.0;} ;\n\t\t\n\t\tvec3 fl = normalize(r.intersection-lightb);\n\t\tfloat f = dot( r.normal, normalize(r.intersection-lightb) );\n\t\tfloat fs = pow( dot( delta ,normalize(2.0*dot(fl,r.normal)*r.normal-fl) ), 100.0);\n\t\tif(f < 0.0) {f=0.0; fs=0.0;};\n\t\tfragColor = vec4( sqrt(e*e+f*f*0.f)*r.color /*+ (es+fs)*vec3(1.0,1.0,1.0)*/, 1.0 );\n\t//}\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4d2GWc","date":"1394478858","viewed":313,"name":"TrivialRaytracer2","username":"Tivi","description":"Raytraced sphere, 2 light sources, diffuse lighting, tries to shade non-sphere pixels as if they were on the sphere for a halo effect.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""}}