{"ver":"0.1","info":{"id":"wll3Dl","date":"1558127361","viewed":553,"name":"truchet trip","username":"j2rgb","description":"A variation on the classic Smith truchet tile. Could be a single pass but I made it multi-pass for reasons.","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["2d","truchet","tile","smith"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Justin Shrake - @j2rgb/2019\n// Created in https://github.com/jshrake/grimoire\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Uncomment to render the base tile generated in Buffer A\n//#define DEBUG_SHOW_TILE\n\nconst float PI = 3.14159265359;\n\nmat2 rot(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, s, -s, c);\n}\n\n\n// Tile the base tile pattern generated in Buffer A\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 grid = vec2(8.0);\n  vec2 uv = grid * fragCoord / iResolution.y;\n  // Produce a random tiling by applying a 90 degree rotation to the\n  // base tile every nth cell in the x and y directions. Tune to taste!\n  uv = rot(0.5 * PI * (mod(floor(uv.x), 2.0))) * uv;\n  uv = rot(0.5 * PI * (mod(floor(uv.y), 4.0))) * uv;\n  uv = rot(0.5 * PI * (mod(floor(uv.y), 8.0))) * uv;\n  uv = rot(0.5 * PI * (mod(floor(uv.x), 16.0))) * uv;\n  fragColor.rgb = texture(iChannel0, uv).rgb;\n\n#ifdef DEBUG_SHOW_TILE\n  float pct = 0.25;\n  uv = fragCoord / iResolution.xy;\n  if (uv.x < pct && uv.y < pct) {\n    vec4 tile = texture(iChannel0, (1.0 / pct) * uv);\n    fragColor.rgb = tile.rgb;\n  }\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Justin Shrake - @j2rgb/2019\n// Created in https://github.com/jshrake/grimoire\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst float PI = 3.14159265359;\n\nfloat sdf_circle(vec2 uv, float r) { return length(uv) - r; }\n\n// Generate a variation of the cannonical Smith tile\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = 2.0 * fragCoord / iResolution.xy - 1.0;\n  float radius = 1.0;\n  float a = sdf_circle(uv - radius, radius);\n  float b = sdf_circle(uv + radius, radius);\n  float d = abs(min(a, b));\n  float stripes = 3.0;\n  float c = smoothstep(0.0, 0.75, cos(stripes * PI * d + 1.0*iTime));\n  fragColor.rgb = vec3(c);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}