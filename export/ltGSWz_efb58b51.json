{"ver":"0.1","info":{"id":"ltGSWz","date":"1483819128","viewed":248,"name":"Menger Sponge Distort-hhhzzzsss","username":"hhhzzzsss","description":"This is a simple Menger Sponge, rendered with raymarching. This is based on iq's article about iterative fractals: https://iquilezles.org/articles/menger/menger.htm","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","fractal","menger","sponge","mengersponge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define distfar 6.0\n#define iterations 5.0\n\nfloat maxcomp(vec3 p) {\n    return max(p.x,max(p.y,p.z));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = maxcomp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\nfloat sdBox2D(vec2 p, vec2 b) {\n\tvec2  di = abs(p) - b;\n    float mc = max(di.x,di.y);\n    return min(mc,length(max(di,0.0)));\n}\n\nfloat sdCross( in vec3 p )\n{\n  float da = sdBox2D(p.xy,vec2(1.0));\n  float db = sdBox2D(p.yz,vec2(1.0));\n  float dc = sdBox2D(p.zx,vec2(1.0));\n  return min(da,min(db,dc));\n}\n\nvec2 map(vec3 p) {\n    float d = sdBox(p,vec3(1.0));\n    \n    for (float i = 0.0; i < iterations; i++) {\n\n        float scale = pow(3.0,i);\n        vec3 q = mod(scale*p,2.0)-1.0;\n        q = 1.0-abs(q);\n        float c = sdCross(q*3.0)/(scale*3.0);\n        d = max(d,-c),1.0;\n        \n        p += scale/3.0;\n\t\t\n    }\n    \n    return vec2(d,1.0);\n    \n}\n\nvec3 calcnormal(vec3 p) {\n    vec2 e = vec2(0.0001, 0.0);\n    vec3 n;\n    n.x = map(p+e.xyy).x - map(p-e.xyy).x;\n    n.y = map(p+e.yxy).x - map(p-e.yxy).x;\n    n.z = map(p+e.yyx).x - map(p-e.yyx).x;\n    return  normalize(n);\n}\n\nfloat softshadow (vec3 ro, vec3 rd) {\n    float res = 1.0;\n    float t = 0.001;\n    for (float i = 0.0; i < 1000.0; i++) {\n        if (t>distfar) break;\n        vec2 h = map(ro + t*rd);\n        if (h.x < 0.0001) return 0.0;\n        res = min(res, 64.0*h.x/t);\n        t += h.x;\n    }\n    return res;\n}\n\nvec3 trace(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    for (float i = 0.0; i < 1000.0; i++) {\n        if (t > distfar) break;\n        vec2 d = map(ro + rd*t);\n        if (d.x < 0.0001) return vec3(t, d.y, i);\n        t += d.x;\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0,0.0,3.0);\n    vec3 rd = normalize(vec3(uv,-1.5));\n    \n    float theta = sin(iTime/2.0);\n    mat2 rot = mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n    ro.yz *= rot;\n    rd.yz *= rot;\n    theta = iTime/3.0;\n    rot = mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n    ro.xz *= rot;\n    rd.xz *= rot;\n    \n    vec3 t = trace(ro, rd);\n    \n    vec3 col = vec3(0.8);\n    \n    if (t.y > 0.5) {\n        \n        vec3 pos = ro + rd*t.x;\n        vec3 lig = normalize(vec3(0.6,1.0,0.8));\n        vec3 nor = calcnormal(pos);\n        float refRange = 0.2;\n        \n        float occ = 1.0/(1.0+t.z/15.0);\n        float sha = softshadow(pos, lig);\n        float dif = max(0.0, dot(nor,lig));\n        float sky = 0.5+0.5*nor.y;\n        float ind = max(0.0, dot(nor,vec3(-1.0,-0.2,-1.0)*lig));\n        float ref = max(1.0-refRange,dot(-nor,rd))-1.0+refRange;\n        \n        col = vec3(0.8,1.0,1.2)*dif*pow(vec3(sha),vec3(1.0,1.2,1.5));\n        col += vec3(0.2,0.3,0.4)*ind*occ;\n        col += vec3(0.2,0.2,0.3)*sky*occ;\n        col += pow(ref,2.0)*4.0*occ;\n        \n        col = pow(col,vec3(0.4545));\n        \n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}