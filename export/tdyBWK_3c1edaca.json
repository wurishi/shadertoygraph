{"ver":"0.1","info":{"id":"tdyBWK","date":"1607955207","viewed":248,"name":"UE4 InterleavedGradientNoise","username":"kagtag","description":"Test UE4 shader functions","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // From ue4 float InterleavedGradientNoise( float2 uv, float FrameId )   \n    \n    // high frequency dither pattern appearing almost random without banding steps\n    //note: from \"NEXT GENERATION POST PROCESSING IN CALL OF DUTY: ADVANCED WARFARE\"\n    //      http://advances.realtimerendering.com/s2014/index.html\n\n    float FrameId = sin(iTime *0.01) *4.0 +4.0;\n    uv += FrameId * (vec2(47.0, 17.0) * 0.695);\n\n    vec3 magic = vec3( 0.06711056f, 0.00583715f, 52.9829189f );\n    fragColor = vec4(fract(magic.z * fract(dot(uv, magic.xy))));\n}","name":"Image","description":"","type":"image"}]}