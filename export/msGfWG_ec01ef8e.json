{"ver":"0.1","info":{"id":"msGfWG","date":"1698584391","viewed":80,"name":"fire and ice","username":"DeltaT","description":"using a palette that i stole from somewhere else","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","fbm","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float influence(vec2 v) {\n    v *= 1.1547005; // 1/sqrt(0.75)\n    float d = clamp(1.-dot(v, v), 0., 1.);\n    return d*d*d;\n}\n\nfloat hash12(vec2 p) { // from shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 randDir(vec2 id) {\n    float a = hash12(id)*6.28319 + iTime*2.;\n    return vec2(cos(a), sin(a));\n}\n\nfloat noise(vec2 v, int seed) {\n    const mat2 skew = mat2(1., 0., 0.5, 0.8660254); // sqrt(0.75)\n    const mat2 unskew = inverse(skew);\n    \n    vec2 v1 = unskew*v;\n    vec2 grid = floor(v1);\n    float s = float(seed)*3.14159;\n    \n    float c = fract(v1).x + fract(v1).y < 1. ? 0. : 1.;\n    vec2[3] tri = vec2[3](grid+vec2(-c+1., c), grid+vec2(c, -c+1.), grid+vec2(c)); // verts on right angled triangle\n    vec2[3] rand = vec2[3](randDir(tri[0]+s), randDir(tri[1]+s), randDir(tri[2]+s));\n    vec2[3] corners = vec2[3](v-skew*tri[0], v-skew*tri[1], v-skew*tri[2]);\n    return 2.*(\n        dot(rand[0], corners[0])*influence(corners[0])\n      + dot(rand[1], corners[1])*influence(corners[1])\n      + dot(rand[2], corners[2])*influence(corners[2])\n    );\n}\n\nfloat fbm(vec2 coord, int numOctaves) {\n    float a = 1.;\n    float f = 1.;\n    float m = 1.;\n    float result = 0.;\n    \n    for (int i = 0; i < numOctaves; i++) {\n        result += noise(coord*f, i)*a;\n        a /= 2.;\n        f *= 2.;\n        m += a;\n    }\n    return result/m;\n}\n\nvec3 palette( float t ) { // from www.shadertoy.com/view/ddcfzs\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float noise = fbm(uv, 8);\n    \n    fragColor = vec4(palette(noise*2.+iTime), 1);\n}","name":"Image","description":"","type":"image"}]}