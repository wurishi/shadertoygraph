{"ver":"0.1","info":{"id":"l3scz4","date":"1725930315","viewed":89,"name":"matrix but pixels","username":"slashz0r","description":"matrix rain effect with some depth and pixels instead of pretty characters","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["matrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// public domain idc\n\n\n// constants (replace properties)\nconst vec3 rainColor = vec3(0.0, 1.0, 0.0);\nconst vec3 backgroundColor = vec3(0.0, 0.0, 0.0);\nconst float speed = 0.25;\nconst float density = 0.4;\nconst float charSize = 0.01;\nconst float brightness = 0.75;\nconst float illumination = 0.25;\nconst float depthFactor = 0.3;\nconst int layerCount = 3;\n\n// helper functions\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 layeredRain(vec2 uv, vec3 viewDir, int layer) {\n    float layerDepth = float(layer) / float(layerCount);\n    vec2 offset = viewDir.xy * layerDepth * depthFactor;\n    vec2 uv_offset = uv + offset;\n\n    float rainColumn = floor(uv_offset.x / charSize);\n    float rainSpeed = speed * (random(vec2(rainColumn, float(layer))) + 0.5);\n    float rainY = fract(uv_offset.y + iTime * rainSpeed * (1.0 - layerDepth * 0.5));\n\n    float charValue = random(vec2(rainColumn, floor(rainY / charSize) + float(layer)));\n    float char = step(1.0 - density * (1.0 - layerDepth * 0.5), charValue);\n\n    float fade = smoothstep(1.0, 0.0, rainY);\n    float finalChar = char * fade;\n\n    vec3 layerColor = mix(backgroundColor, rainColor, finalChar);\n    return layerColor * (1.0 - layerDepth * 0.5);\n}\n\n// main function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 viewDir = normalize(vec3(uv - 0.5, 1.0));\n\n    vec3 finalColor = backgroundColor;\n    \n    for (int i = 0; i < layerCount; i++) {\n        finalColor = max(finalColor, layeredRain(uv, viewDir, i));\n    }\n\n    finalColor *= brightness;\n\n    // combine albedo and emission\n    fragColor = vec4(finalColor + finalColor * illumination, 1.0);\n}","name":"Image","description":"","type":"image"}]}