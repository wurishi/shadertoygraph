{"ver":"0.1","info":{"id":"csB3Dh","date":"1667505502","viewed":82,"name":"Geometric Series Tiling Thingy","username":"jt","description":"Just playing around with [url=https://www.shadertoy.com/view/ddjGzW]Geometric Series Square Tiling SDF[/url].\n(This experiment is not exact).\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["tiling","geometric","loopless","series","telescoping"],"hasliked":0,"parentid":"ddjGzW","parentname":"Geom. Series Square Tiling SDF"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/csB3Dh Geometric Series Square Tiling Thingy by jt\n// based on https://www.shadertoy.com/view/dd2GRW Geometric Series Square Tiling\n// based on https://www.shadertoy.com/view/Ds23zD Textured Geometric Series Coords\n// based on https://www.shadertoy.com/view/fd2czy Textured Geometric Series\n// based on https://www.shadertoy.com/view/7dScRG 1/4+1/16+1/64+1/256+...\n\n// tags: tiling, geometric, loopless, series, telescoping\n\n// Just playing around (i.e. not exact) with https://www.shadertoy.com/view/ddjGzW Geometric Series Square Tiling SDF\n\n// see https://en.wikipedia.org/wiki/Geometric_series\nfloat geometric_series_square_tiling(vec2 p, float n) // should be exact euclidean\n{\n    p = abs(p);\n\n    float n1 = n - 1.0;\n    float b = n / n1;\n    vec2 s = floor(log2(p)/log2(b));\n    float m = max(s.x, s.y);\n    p = fract(p/pow(b, m)*n1);\n\n    p = 0.5-abs(p-0.5);\n    float d = min(p.x, p.y);\n    return d*pow(b, m)*b/n;\n}\n\nfloat map(vec3 p)\n{\n    float n = 2.0;\n    return\n        max // this intersection is NOT exact\n        (\n            length(p) - 1.0,\n            min\n            (\n                geometric_series_square_tiling(p.xy, n),\n                min\n                (\n                    geometric_series_square_tiling(p.yz, n),\n                    geometric_series_square_tiling(p.zx, n)\n                )\n            )\n        );\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\n// Limit iterations to make sure not to crash GPU (in case steps get very small).\n#define MAX_ITERATIONS 1000u\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    uint iteration;\n    float t;\n    for(t = t0, iteration = 0u; t < t1 && iteration < MAX_ITERATIONS; iteration++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n/*\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    uint iteration;\n    float t;\n    for(t = mint, iteration = 0u; t < maxt && iteration < MAX_ITERATIONS; iteration++)\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint iteration;\n    float t;\n    for(t = mint, iteration = 0u; t < maxt && iteration < MAX_ITERATIONS; iteration++)\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi/2.0 + pi/2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.025);\n    my = (iMouse.y > 10.0) ? my : 3.0 * pi / 4.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0,-2.5);\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    vec3 color = vec3(0);\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n        //color = n*0.5+0.5;\n\n        vec3 lightdir = normalize(vec3(1,1,1));\n        vec3 ambient = vec3(0.01);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(dst + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(dst + n * 0.01, lightdir, 0.0, lightdist, 50.0);\n        color = vec3(1);\n        color = (ambient * calcAO(dst, n) + brightness) * color;\n        //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n        //color *= brightness;\n    }\n\n    //color = mix(vec3(color), vec3(0.0), smoothstep(DIST_MAX - 2.0, DIST_MAX, dist));\n    color = sqrt(color); // approximate gamma\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}