{"ver":"0.1","info":{"id":"ssSXzt","date":"1620802618","viewed":228,"name":"等宽曲线","username":"shiyuelai","description":"等宽曲线","likes":0,"published":3,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.1415926;\n\nfloat f(float x1, float y1, float x)\n{\n   return y1 - sin(x) + (x1 - x) / cos(x);\n}\n\nfloat df(float x1, float x)\n{\n   return -cos(x) + ((x1 - x) * sin(x) - cos(x)) / (cos(x) * cos(x));\n}\n\nfloat ddf(float x1, float x)\n{\n   return sin(x) + ((x1 - x) * cos(x) - 2.0 * sin(x)) / (cos(x) * cos(x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // 黑色背景\n    fragColor = vec4(0.0);\n    \n \n    float x = uv.x * 32.0 * iResolution.x / iResolution.y;\n    float width = 0.4;\n    \n    \n    // 导数分析法\n    vec4 color = vec4(1.0, 0.5, 0.5, 1.0);\n    float y = (uv.y - 0.1667) * 16.0;\n    float h = width * 0.65 / cos(atan(cos(x)));\n    float dis = abs(sin(x) - y);\n    if(dis < h)\n    {\n       float alpha = smoothstep(h, h - 0.03, dis);\n       fragColor = mix(fragColor, color, alpha);\n    }\n    \n    \n    width = 0.7;\n    // 牛顿迭代法 画sin曲线\n    color = vec4(0.5, 1.0, 0.5, 1.0);\n    y = (uv.y - 0.5) * 16.0;\n    float xk = x;\n    for(int k = 0; k < 2; k++)\n    {\n       xk= xk - f(x, y, xk) / df(x, xk);\n    \n    }\n    float sin_x = xk;\n    float sin_y = sin(xk);\n    dis = length(vec2(x - sin_x, y - sin_y)); \n    if((1.0 - dis) > width)\n    {\n       float alpha = smoothstep(1.0 - width, 0.97 - width, dis);\n       fragColor = mix(fragColor, color, alpha);\n    }\n    \n    \n    // 切比雪夫迭代法\n    color = vec4(0.5, 0.5, 1.0, 1.0);\n    y = (uv.y - 0.8334) * 16.0;\n    xk = x;\n    for(int k = 0; k < 4; k++)\n    {\n       float ff = f(x, y, xk);\n       xk= xk - ff / df(x, xk);\n       xk = xk - ddf(x, xk) * ff * ff / (2.0 * pow(df(x, xk), 3.0)) ;\n    \n    }\n    \n    sin_x = xk;\n    sin_y = sin(xk);\n    dis = length(vec2(x - sin_x, y - sin_y)); \n    if(dis < 1.0 - width)\n    {\n       float alpha = smoothstep(1.0 - width, 0.97 - width, dis);\n       fragColor = mix(fragColor, color, alpha);\n    }\n}","name":"Image","description":"","type":"image"}]}