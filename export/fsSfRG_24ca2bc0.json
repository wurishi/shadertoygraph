{"ver":"0.1","info":{"id":"fsSfRG","date":"1646473585","viewed":259,"name":"doom melt","username":"awr","description":"quick and dirty replication of the loading melt effect from OG doom. nothing special.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["effect","doom","loading","melt","pixellation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float basicNoise(in float x) {\n  // licensed under MIT, copyright Inigo Quilez, 2019\n  // borrowed from https://www.shadertoy.com/view/3sd3Rs\n  float i = floor(x);\n  float f = fract(x);\n  float s = sign(fract(x / 2.0) - 0.5);\n  float k = fract(i * 0.1731);\n\n  // quartic polynomial\n  return s * f * (f - 1.0) * ((16.0 * k - 4.0) * f * (f - 1.0) - 1.0);\n}\n\nbool isBounded(in vec2 uv) {\n  return all(lessThanEqual(uv,    vec2(1.0, 1.0))) &&\n         all(greaterThanEqual(uv, vec2(0.0, 0.0)));\n}\n\nvec2 melt(in vec2 uv, in float delta) {\n  // pixelation pass\n  float pxWidth = 256.0;\n  float pxX     = floor(pxWidth * uv.x) / pxWidth;\n\n  // multiple passes of noise, to avoid too much uniformity\n  float noiseCore = basicNoise(pxX * 2.1)  * 2.5;\n  float noiseA    = basicNoise(pxX * 7.0)  * 0.4;\n  float noiseB    = basicNoise(pxX * 12.2) * 0.2;\n  float noiseC    = basicNoise(pxX * 35.4) * 0.4;\n  float noiseD    = basicNoise(pxX * 94.0) * 0.6;\n\n  float sum    = noiseCore * (noiseA + noiseB + noiseC + noiseD);\n  float offset = clamp(abs(sum) * delta, 0.0, 1.0) + delta;\n\n  return vec2(uv.x, uv.y + offset);\n}\n\nfloat delta(in float time) {\n  float wait         = 2.0;\n  float acceleration = 1.15;\n  return max(time - wait, 0.0) * acceleration;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv     = fragCoord / iResolution.xy;\n  vec2 melted = melt(uv, delta(iTime));\n\n  if (isBounded(melted)) {\n      fragColor = texture(iChannel0, melted);\n  } else {\n      fragColor = texture(iChannel1, uv); // layer underneath\n  }\n}","name":"Image","description":"","type":"image"}]}