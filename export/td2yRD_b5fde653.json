{"ver":"0.1","info":{"id":"td2yRD","date":"1597826468","viewed":321,"name":"Rainy night","username":"zchajax","description":"Rainy night","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["noise","rain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat rain(vec2 uv)\n{\n    float travelTime = (iTime * 0.2) + 0.1;\n\t\n    vec2 tiling = vec2(1., .01);\n    vec2 offset = vec2(travelTime * 0.5 + uv.x * 0.2, travelTime * 0.2);\n\t\n    vec2 st = uv * tiling + offset;\n    \n    float rain = 0.1;  \n    float f = noise(st * 200.5) * noise(st * 125.5);  \n   \tf = clamp(pow(abs(f), 15.0) * 1.5 * (rain * rain * 125.0), 0.0, 0.25);\n    return f;\n}\n\nfloat moon(vec2 uv)\n{\n    float moon = smoothstep(0.00, -0.01, length(uv - vec2(0.5, 0.75)) - 0.06);\n    moon *= smoothstep(-0.025, 0.01, length(uv - vec2(0.5 + 0.035, 0.75 + 0.01)) - 0.065);\n    moon = clamp(moon, 0., 1.);\n    \n    return moon;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;  \n   \n    float cloud = (1.-(fbm((uv +.2) * uv.y+.1 * iTime))) * uv.y;\n    cloud = clamp(0., 1., cloud);\n    \n   \n    float moon = moon(uv);\n  \tfloat rain = rain(uv);\n    \n    vec3 col = vec3(0.84, 0.925, 0.941) * moon * (1. - cloud * 1.2);\n    col = mix(col, vec3(0.8, 0.8, 1.), cloud);\n    col += vec3(1.0) * rain;\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float random(in vec2 uv)\n{\n    return fract(sin(dot(uv.xy, \n                         vec2(12.9898, 78.233))) * \n                 43758.5453123);\n}\n\nfloat noise(in vec2 uv)\n{\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    f = f * f * (3. - 2. * f);\n    \n    float lb = random(i + vec2(0., 0.));\n    float rb = random(i + vec2(1., 0.));\n    float lt = random(i + vec2(0., 1.));\n    float rt = random(i + vec2(1., 1.));\n    \n    return mix(mix(lb, rb, f.x), \n               mix(lt, rt, f.x), f.y);\n}\n\nfloat Circle(vec2 uv, vec2 p, float r, float blur)\n{\n    float d = length(uv - p);\n    float c = smoothstep(r + blur, r - blur, d);\n    \n    return c;\n}\n\n#define OCTAVES 8\nfloat fbm(in vec2 uv)\n{\n    float value = 0.;\n    float amplitude = .5;\n    \n    for (int i = 0; i < OCTAVES; i++)\n    {\n        value += noise(uv) * amplitude;\n        \n        amplitude *= .5;\n        \n        uv *= 2.;\n    }\n    \n    return value;\n}","name":"Common","description":"","type":"common"}]}