{"ver":"0.1","info":{"id":"3dXyDH","date":"1584631019","viewed":116,"name":"KinoVignette port","username":"ti","description":"Port of Keijiro Takahashi's natural vignetting effect for Unity.\n\nSee https://github.com/keijiro/KinoVignette","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["vignette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) clamp((x), 0.0, 1.0)\n#define saturate2(x) clamp((x), vec2(0.0), vec2(1.0))\n\n#define Kino 1\n\n#if Kino\n    /* Port of Keijiro Takahashi's natural vignetting effect for Unity\n       See https://github.com/keijiro/KinoVignette */\n\n    const float falloff = 0.5; // [0.0 , 1.0]\n\n#else\n    /* Port of Unity's Classic vignette effect from Post-Processing Stack v2\n       See https://github.com/Unity-Technologies/PostProcessing/blob/v2/Documentation~/Vignette.md */\n\n    struct Vignette {\n        vec3 color;\n        vec2 center;\n        float intensity;  // [0.0 , 1.0]\n        float smoothness; // [0.01, 1.0]\n        float roundness;  // [0.0 , 1.0]\n        bool rounded;     // true = perfectly round | false = dependent on aspect ratio\n    };\n\n    Vignette _Vignette = Vignette(vec3(0.0), vec2(0.5), 0.0, 0.2, 1.0, false);\n    vec4 _Settings(in Vignette v) {\n        return vec4(3.0 * v.intensity, 5.0 * v.smoothness,\n                    6.0 * (1.0 - v.roundness) + v.roundness,\n                    v.rounded ? 1.0 : 0.0);\n    }\n\n#endif\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n\n    vec4 color = vec4(1.0);\n\n#if Kino\n    vec2 coord = (2.0 * uv - 1.0) * aspect; // [-1, 1] vertically\n\n    float rf = length(coord) * falloff;\n    float rf2_1 = rf * rf + 1.0;\n    float e = 1.0 / (rf2_1 * rf2_1);\n\n    color.rgb *= e;\n\n#else\n    Vignette v = _Vignette; // default values\n\tv.intensity = 0.4;\n    vec4 settings = _Settings(v);\n\n    vec2 d = abs(uv - v.center) * settings.x;\n    d.x *= mix(1.0, aspect.x, settings.w);\n    d = pow(saturate2(d), settings.zz); // roundness\n\n    float vfactor = pow(saturate(1.0 - dot(d, d)), settings.y);\n    color.rgb *= mix(v.color, vec3(1.0), vfactor);\n    color.a *= mix(1.0, color.a, vfactor);\n\n#endif\n\n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}