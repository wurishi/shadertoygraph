{"ver":"0.1","info":{"id":"cdsXzf","date":"1669327761","viewed":241,"name":"GM Shaders: Environment","username":"Xor","description":"Here's a little environment mapping tutorial for my [url=https://www.getrevue.co/profile/xordev/issues/gm-shaders-mini-environments-1475397]mini tutorial series[/url].","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["example","tutorial","demo","reflections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"GM Shaders: Environment\" by @XorDev\n\n    Here's a little environment mapping tutorial for my mini tutorial series:\n    https://www.getrevue.co/profile/xordev/issues/gm-shaders-mini-environments-1475397\n    \n    This demo shows how to convert from a 3D direction to 2D texture coordinates.\n    Make sure to read the full tutorial above.\n*/\n\n#define PI 3.1415926\n\n//Convert 3D direction to 2D texture coordinates\nvec2 sphere_coordinates(vec3 dir)\n{\n    float yaw = atan(dir.y, dir.x);\n\n    float pitch = asin(clamp(dir.z, -1.0, 1.0));\n\n    return vec2(yaw/PI*0.5, pitch/PI) + 0.5;\n}\n\n//Rotation for demo\nmat2 rotate2D(float rad)\n{\n    return mat2(cos(rad),-sin(rad),sin(rad),cos(rad));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Centered screen UV coordinates\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    //Compute an example 3D ray direction vector\n    vec3 dir = normalize(vec3(.5,uv));\n    \n    //Raytrace a sphere in the center of the screen\n    float d = 0.3*0.3 - dot(uv,uv);\n    if (d>0.0) dir = reflect(dir, vec3(-sqrt(d),uv)/0.3);\n    \n    //Rotate view for demo\n    dir.xz *= rotate2D(cos(iTime*0.2));\n    dir.xy *= rotate2D(iTime*0.3);\n    \n    //Convert direction to uv coordinates\n    vec2 sphere_uv = sphere_coordinates(dir);\n    //Sample environment texture\n    fragColor = texture(iChannel0,sphere_uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    This part generates a simple cube environment map.\n    \n    I know this could be done with a cube map, but that's\n    beside the point of this tutorial.\n*/\n\n#define PI 3.1415926\n\nvec3 dir_coordinates(vec2 uv)\n{\n    float yaw = uv.x*2.0*PI-PI;\n    float pitch = uv.y*PI-PI*0.5;\n    \n    return vec3(cos(yaw)*cos(pitch), -sin(yaw)*cos(pitch), sin(pitch));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 dir = dir_coordinates(uv);\n    \n    vec3 a = abs(dir);\n    vec3 cube = dir / max(max(a.x,a.y),a.z);\n    \n    vec3 col = step(a.yzx,a)*step(a.zxy,a)*0.5+0.5;\n    col /= dot(cube,cube);\n    fragColor = vec4(col,1);\n}","name":"Buffer A","description":"","type":"buffer"}]}