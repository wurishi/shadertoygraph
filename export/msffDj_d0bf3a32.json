{"ver":"0.1","info":{"id":"msffDj","date":"1689167862","viewed":43,"name":"Very Suvi Shader #1","username":"mielikuvitus","description":"testing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["testing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t) {\n        vec3 a = vec3(0.5, 0.5, 0.5);\n        vec3 b = vec3(0.2, 0.4, 0.2);\n        vec3 c = vec3(1.0, 0.5, 0.5);\n        vec3 d = vec3(0.00, 0.25, 0.25);\n        \n        return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy  * 2.0 - 1.0;\n    // uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec2 uv0 = uv;\n    \n    vec3 finalColour = vec3(0.0);\n    \n    for (float i = 0.0; i<3.0; i++) {\n    \n        uv = fract(uv * 1.5) - 0.5;\n\n        float radiusDist = length(uv);\n\n        vec3 colour = palette(length(uv0) + iTime*.8);\n\n        radiusDist = sin(radiusDist*8. + iTime)/8.;\n        radiusDist = abs(radiusDist);\n\n        //creates inverse colour while staying between 0 and 1 coords\n        radiusDist = 0.01 / radiusDist;\n\n        // step function accepts 2 params, threshold and elementborder distance\n        // radiusDist = step(0.1, radiusDist);\n\n        // smoothstep function accepts 3 params, 2 threshold params (start and finish) and elementborder distance\n        // between threshold values it smoothly distributes the values\n        // radiusDist = smoothstep(0.0, 0.1, radiusDist);\n\n        // Time varying pixel color\n        //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n        // Output to screen (red, green, blue, alpha)\n        //fragColor = vec4(d,0.0,0.4,1.0);\n\n        finalColour += colour * radiusDist;\n    \n    }\n    \n    //apply radiant to all channels (on top of each other)\n    fragColor = vec4(finalColour,1.0);\n}","name":"Image","description":"","type":"image"}]}