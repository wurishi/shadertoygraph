{"ver":"0.1","info":{"id":"XdSBzy","date":"1500839764","viewed":256,"name":"Anamorphic bloom","username":"MarisaKirisame","description":"Adapted to 4 buffers from MariENB. It really would look better with a HDR cubemap.","likes":1,"published":1,"flags":32,"usePreview":1,"tags":["bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Anamorphic bloom shader adapted from MariENB.\n\n\tCopyright (c) 2016-2022 Marisa the Magician, UnSX Team\n\n\tPermission is hereby granted, free of charge, to any person obtaining\n\ta copy of this software and associated documentation files (the\n\t\"Software\"), to deal in the Software without restriction, including\n\twithout limitation the rights to use, copy, modify, merge, publish,\n\tdistribute, sublicense, and/or sell copies of the Software, and to\n\tpermit persons to whom the Software is furnished to do so, subject to\n\tthe following conditions:\n\n\tThe above copyright notice and this permission notice shall be\n\tincluded in all copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\tMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n\tIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n\tCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n\tTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\tSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst float bloommix[4] = float[4](0.5,0.2,0.8,1.2);\n\n// final mix\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 res = texture(iChannel0,uv)*bloommix[0];\t// base image\n    res += texture(iChannel1,uv)*bloommix[1];\t\t// bloom prepass\n    res += texture(iChannel2,uv)*bloommix[2];\t\t// normal blur pass\n    res += texture(iChannel3,uv)*bloommix[3];\t\t// anamorphic blur pass\n\tfragColor = res;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// standard 2d rotation\nvec2 rotate( in vec2 coord, in float theta )\n{\n    theta = radians(theta);\n    return coord*mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n}\n\n// base cubemap sampling\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = vec3((fragCoord.xy-iResolution.xy*0.5)/iResolution.y,1.0);\t// I have no idea how this works\n    dir.yz = rotate(dir.yz,15.0+15.0*sin(iTime));\t// bob up and down\n    dir.xz = rotate(dir.xz,iTime*15.0);\t// horizontal rotation\n    vec4 res = texture(iChannel0,dir);\n    fragColor = res;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define PI 3.141592658\nvec3 rgb2hsv( in vec3 c )\n{\n\tvec4 K = vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\n\tvec4 p = (c.g<c.b)?vec4(c.bg,K.wz):vec4(c.gb,K.xy);\n\tvec4 q = (c.r<p.x)?vec4(p.xyw,c.r):vec4(c.r,p.yzx);\n\tfloat d = q.x-min(q.w,q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z+(q.w-q.y)/(6.0*d+e)),d/(q.x+e),q.x);\n}\nvec3 hsv2rgb( in vec3 c )\n{\n\tvec4 K = vec4(1.0,2.0/3.0,1.0/3.0,3.0);\n\tvec3 p = abs(fract(c.x+K.xyz)*6.0-K.w);\n\treturn c.z*mix(vec3(K.x),clamp(p-K.x,0.0,1.0),c.y);\n}\n\nconst float bloomcap = 25.0;\t\t// value cap (not really needed for non-hdr images, to be honest)\nconst float bloombump = -0.6;\t\t// rgb shift, negative values trim shadows\nconst float bloomsaturation = 1.05;\t// saturation of bloom texture\nconst float bloompower = 1.1;\t\t// contrast ...\nconst float bloomintensity = 1.65;\t// intensity ...\n\n// bloom base texture preparation\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 res = texture(iChannel0,uv);\n    vec3 hsv = rgb2hsv(res.rgb);\n    hsv.z = min(hsv.z,bloomcap);\n    res.rgb = hsv2rgb(hsv);\n    res.rgb = max(res.rgb+bloombump,0.0);\n    hsv = rgb2hsv(res.rgb);\n    hsv.y = clamp(hsv.y*bloomsaturation,0.0,1.0);\n    hsv.z = pow(hsv.z,bloompower);\n    res.rgb = hsv2rgb(hsv)*bloomintensity;\n    fragColor = res;\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define luminance(x) dot(x,vec3(0.2126,0.7152,0.0722))\nconst float gauss16[16] = float[16]\n(\n\t0.040012, 0.039893, 0.039541, 0.038960,\n\t0.038162, 0.037159, 0.035969, 0.034612,\n\t0.033109, 0.031485, 0.029764, 0.027971,\n\t0.026131, 0.024268, 0.022405, 0.020563\n);\n\nconst vec3 blu = vec3(0.2,0.6,1.0);\t// blue shift color\nconst float bsi = 0.8;\t\t\t\t// blue shift intensity\n\n// primary gaussian blur pass (normally this would blur each axis separately in two passes, but I can only have 4 buffers)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 res = vec4(0.0);\n    vec4 base = texture(iChannel0,uv);\n    int i, j;\n    float sum = 0.0;\n    vec2 inc = 1.0/iResolution.xy;\n    vec2 pp;\n    float fact = 0.0;\n    for ( i=-15; i<=15; i++ ) for ( j=-15; j<=15; j++ )\n    {\n        pp = uv+vec2(j,i)*inc;\n        if ( (pp.x>=0.0) && (pp.x<1.0) && (pp.y>=0.0) && (pp.y<1.0) )\n            fact = gauss16[abs(j)]*gauss16[abs(i)];\n       \telse\n            fact = 0.0;\n        res += fact*texture(iChannel0,pp);\n        sum += fact;\n    }\n    res *= 1.0/sum;\n    float lm = max(0.0,luminance(res.rgb)-luminance(base.rgb))*bsi;\n    lm = lm/(1.0+lm);\n    res.rgb *= mix(vec3(1.0),blu,lm);\n    fragColor = res;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define luminance(x) dot(x,vec3(0.2126,0.7152,0.0722))\nconst float gauss80[80] = float[80]\n(\n\t0.013406, 0.013398, 0.013376, 0.013339, 0.013287, 0.013221,\n\t0.013140, 0.013046, 0.012938, 0.012816, 0.012681, 0.012534,\n\t0.012375, 0.012205, 0.012023, 0.011831, 0.011629, 0.011417,\n\t0.011198, 0.010970, 0.010735, 0.010493, 0.010245, 0.009992,\n\t0.009735, 0.009473, 0.009209, 0.008941, 0.008672, 0.008402,\n\t0.008131, 0.007860, 0.007590, 0.007321, 0.007053, 0.006788,\n\t0.006525, 0.006266, 0.006010, 0.005759, 0.005511, 0.005269,\n\t0.005031, 0.004799, 0.004573, 0.004352, 0.004138, 0.003929,\n\t0.003727, 0.003532, 0.003343, 0.003160, 0.002985, 0.002816,\n\t0.002653, 0.002497, 0.002348, 0.002205, 0.002068, 0.001938,\n\t0.001814, 0.001696, 0.001584, 0.001478, 0.001377, 0.001282,\n\t0.001192, 0.001107, 0.001027, 0.000952, 0.000881, 0.000815,\n\t0.000753, 0.000694, 0.000640, 0.000589, 0.000542, 0.000497,\n\t0.000456, 0.000418\n);\n\nconst vec3 flu = vec3(0.6,0.2,1.0);\t// blue shift color\nconst float fsi = 1.4;\t\t\t\t// blue shift intensity\nconst float fpw = 1.2;\t\t\t\t// contrast\nconst float fbl = 1.8;\t\t\t\t// intensity\n\n// secondary, more expensive anamorphic blur pass on one axis\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 res = vec4(0.0);\n    vec4 base = texture(iChannel1,uv);\n    int i;\n    float sum = 0.0;\n    float inc = 4.0/iResolution.x;\n    vec2 pp;\n    float fact = 0.0;\n    for ( i=-80; i<=80; i++ )\n    {\n        pp = uv+vec2(i,0)*inc;\n        if ( (pp.x>=0.0) && (pp.x<1.0) )\n            fact = gauss80[abs(i)];\n       \telse\n            fact = 0.0;\n        res += fact*texture(iChannel0,pp);\n        sum += fact;\n    }\n    res *= 1.0/sum;\n    float lm = max(0.0,luminance(res.rgb)-luminance(base.rgb))*fsi;\n    lm = lm/(1.0+lm);\n    res.rgb *= mix(vec3(1.0),flu,lm);\n    res.rgb = pow(max(vec3(0.0),res.rgb),vec3(fpw))*fbl;\n    fragColor = res;\n}","name":"Buffer D","description":"","type":"buffer"}]}