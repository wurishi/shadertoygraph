{"ver":"0.1","info":{"id":"Ndj3Dt","date":"1618155021","viewed":227,"name":"Render 2D light - Part 1","username":"johnao","description":"Inspired by https://github.com/miloyip/light2d.\n\nPart 1: Basic shapes and operations https://www.shadertoy.com/view/Ndj3Dt\nPart 2: Reflection https://www.shadertoy.com/view/fs23Wd\nPart 3: Refraction https://www.shadertoy.com/view/Nd2GDd","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord+.5*vec2(max(0.,iResolution.y-iResolution.x),max(0.,iResolution.x-iResolution.y)))/max(iResolution.x,iResolution.y);\n    vec4 data=texture(iChannel0,uv);\n    vec3 col=data.xyz/data.w;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// sampling directions\n#define N_DIRECTION 32\n#define fN_DIRECTION 32.0\n\n// constants\n#define PI 3.1415926535\n#define TAU 6.2831853\n#define INF 2.0\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 opUnion(vec2 a, vec2 b){\n    return a.x<b.x?a:b;\n}\n\nvec2 opIntersect(vec2 a, vec2 b){\n    return a.x<b.x?vec2(b.x,a.y):vec2(a.x,b.y);\n}\n\nvec2 opSub(vec2 a, vec2 b){\n    return a.x>-b.x?vec2(a.x,a.y):vec2(-b.x,a.y);\n}\n\nvec2 opComp(vec2 a){\n    return vec2(-a.x,a.y);\n}\n\nfloat sdfCircle(vec2 c, float r, vec2 p){\n    return length(p-c)-r;\n}\n\nfloat sdfCapsule(vec2 a, vec2 b, float r, vec2 p) {\n    vec2 ap=p-a,ab=b-a;\n    return length(ap-ab*clamp(dot(ap,ab)/dot(ab,ab),0.,1.))-r;\n}\n\nvec2 map(vec2 p){\n    vec2 res=vec2(INF,0.);\n    /*\n    res=opUnion(res,vec2(sdfCircle(vec2(.3,.5),.1,p),2.));\n    res=opUnion(res,vec2(sdfCircle(vec2(.6,.4),.05,p),0.));\n    res=opUnion(res,vec2(sdfCircle(vec2(.7,.6),.03,p),1.5));\n    */\n    /*\n    res=opSub(vec2(sdfCircle(vec2(0.4,0.5),0.2,p),1.0),\n              vec2(sdfCircle(vec2(0.6,0.5),0.2,p),0.5));\n    */\n    res=vec2(sdfCapsule(vec2(0.42,0.4),vec2(0.5,0.6),0.015,p),1.0);\n    res=opUnion(res,vec2(sdfCapsule(vec2(0.58,0.4),vec2(0.5,0.6),0.015,p),1.0));\n    \n    \n    \n    return res;\n}\n\nfloat sampling(vec2 o, vec2 d){\n    float t=0.;\n    for(int i=0;i<32;++i){\n        vec2 res=map(o);\n        if(res.x<0.0001){\n            return res.y;\n        }\n        if(t>=INF){\n            break;\n        }\n        o+=res.x*d;\n        t+=res.x;\n    }\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s=0.;\n    vec2 uv=fragCoord/iResolution.xy;\n    float n=rand(uv+iTime)*3.;\n    for(int i=0;i<N_DIRECTION;++i){\n        s+=sampling(uv,vec2(sin(n+float(i)*TAU/fN_DIRECTION),cos(n+float(i)*TAU/fN_DIRECTION)));\n    }\n    s=s/fN_DIRECTION;\n    vec4 data=texture(iChannel0,uv);\n    if(iFrame==0){\n        data=vec4(0.);\n    }\n    data+=vec4(vec3(s),1.);\n    fragColor = data;\n}","name":"Buffer A","description":"","type":"buffer"}]}