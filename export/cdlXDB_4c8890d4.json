{"ver":"0.1","info":{"id":"cdlXDB","date":"1669560093","viewed":85,"name":"Automata.LifeInColor","username":"NAME_REDACTED","description":"Cellular automata: game of life with color. Draw on the screen. Undefine INIT to start with a blank screen.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["automata","life","gameoflife","colorized"],"hasliked":0,"parentid":"7tVfWm","parentname":"Automata.Life"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec4 col = texture(iChannel0, fragCoord / iResolution.xy / CELL_SIZE);\n   // Output to screen\n   fragColor = vec4(col.r, col.g, col.b, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 result;\n    ivec2 border = ivec2(iResolution.xy / CELL_SIZE);\n    \n    #ifdef INIT\n    if (iFrame == 0)\n    {\n        //red cells\n        float a = length(iResolution.xy / CELL_SIZE * .33 - fragCoord);\n        a = a + rand(fragCoord + vec2(.243,.455));\n        if (a < 15.0 && mod(a, 3.0) < 1.0) {\n            fragColor = vec4(1.2,0,0.0,1);\n            return;\n        }\n        //green cells\n        float b = length(iResolution.xy / CELL_SIZE / vec2(2.0,1.5) - fragCoord);\n        b = b + rand(fragCoord + vec2(.246,.438));\n        if (b < 15.0 && mod(b, 3.0) < 1.0) {\n            fragColor = vec4(0.0,1.2,0.0,1);\n            return;\n        }\n        //blue cells\n        float bc = length(iResolution.xy / CELL_SIZE * vec2(.66, .33) - fragCoord);\n        bc = bc + rand(fragCoord + vec2(.765, .127));\n        if (bc < 15.0 && mod(bc, 3.0) < 1.0) {\n            fragColor = vec4(0.0,0.0,1.2,1);\n            return;\n        }        \n    }\n    #endif\n\n    ivec2 fc = ivec2(fragCoord);\n    if (fc.x > border.x || fc.y > border.y) return;\n    if (iFrame % DELAY > 0)\n    {\n        vec4 c = texelFetch(iChannel0, fc, 0);\n        fragColor = c;\n        return;\n    }\n    \n    //count neighbors and get avg color\n    int count = 0;\n    vec3 avg = vec3(0);\n    for (int y = fc.y - 1; y < fc.y + 2; y++)\n    {\n        int yy = (y + border.y) % border.y;\n        for (int x = fc.x - 1; x < fc.x + 2; x++)\n        {\n            int xx = (x + border.x) % border.x;\n            if (ivec2(xx,yy) != fc) {\n                vec4 c = texelFetch(iChannel0, ivec2(xx, yy), 0);\n                if (c.r + c.g + c.b > 0.) {\n                    avg += c.rgb;\n                    count++;\n                }\n            }\n        }\n    }\n\n    if (count == 3 || count == 7) {\n        result = texelFetch(iChannel0, fc, 0).rgb;\n        if (result.r + result.g + result.b == 0.) {\n            float hue = rgb2hsv(avg / 3.).x;\n            result = hsv2rgb( vec3(hue, 1., 1.) ); //new life\n        }\n    }\n    else if (count < 2 || count > 3)\n        result = vec3(0); //death\n    else //stay the same\n        result = texelFetch(iChannel0, fc, 0).rgb;\n        \n    if (iMouse.z > 0.0)\n    {\n        //mouse generate\n        float a = length(iMouse.xy / CELL_SIZE - fragCoord);\n        a = a + rand(fragCoord);\n        if (a < 10.0 && mod(a, 3.0) < 1.0) {\n            result = hsv2rgb( vec3( rand(vec2(floor(iTime * 2.), 0.)), \n                1, 1.) ); \n            }\n    } \n\n    fragColor = vec4(result, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define CELL_SIZE 3.0\n#define DELAY 1 //update every nth frame - increase this to slow it down\n#define INIT //draw some stuff on the first frame\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n\n//NOTES:\n//This automata uses the Game of Life B37/S23 ruleset.\n//But cells are colored. When a new cell is born, it takes\n//the average color of its 3 \"parents\". Colors are fully saturated\n//to prevent the otherwise-inevitable gray goo scenario.\n\n//When cells are created by drawing on the screen, the color is random.","name":"Common","description":"","type":"common"}]}