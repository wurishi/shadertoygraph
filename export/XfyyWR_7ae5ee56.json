{"ver":"0.1","info":{"id":"XfyyWR","date":"1731672173","viewed":30,"name":"ShaderAmp Soap Bubble Music Vis","username":"ArthurTent","description":"playing around with shaders. Killing time. hf\nExample on YT: https://www.youtube.com/watch?v=8FmvUGyTrwc\nShaderAmp version is currently available in 'dev/more-shaders' branch.\nhttps://github.com/ArthurTent/ShaderAmp/tree/dev/more-shaders/dist/shaders","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","simple","music"],"hasliked":0,"parentid":"XtVSDt","parentname":"Soap Bubble Music Visualizer #1"},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XtVSDt\n// Modified by ArthurTent\n// Created by Ruzzyr\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\nfloat snd = 0.;\nconst float PI = 3.1415926;\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        //q*= snd/10.;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\nvoid camera(vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t)\n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    //rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n    rd = normalize(vec3(fragCoord, 1.0));\n\n    ro = vec3(0.0, 0.0, -15.);\n\n    //float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));\n    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y))+sin(iTime/20.);\n    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));\n    //m.y = -m.y;\n    m.y = sin(m.y*0.5)*0.3 + 0.5;\n\n    //vec2 sm = sin(m)*sin(iTime), cm = cos(m)*(1.+sin(iTime));\n    vec2 sm = sin(m)*(1.+sin(iTime/10.)/2.), cm = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);\n    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);\n\n    t = rotY * rotX;\n\n    ro = t * ro;\n    rd = t * rd;\n\n    rd = normalize(rd);\n}\n\nmat3 rotateYmat(float ang)\n{\n    return mat3(cos(ang), 0.0, sin(ang),\n                0.0, 1.0, 0.0,\n                -sin(ang), 0.0, cos(ang));\n}\nmat3 rotateXmat(float ang)\n{\n    return mat3(1.0, -0.0, 0.0,\n                0.0, cos(ang), -sin(ang),\n                0.0, sin(ang), cos(ang));\n}\n\nmat3 rotateZmat(float ang)\n{\n    return mat3(cos(ang), -sin(ang), 0.0,\n                sin(ang), cos(ang), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nfloat map( vec3 p, vec3 origin, float s )\n{\n    vec3 offset = vec3(sin(p.x*2. + iTime*2.),cos(p.z*10. + iTime*2.),1.0)*0.1;\n\tfloat d = length(p + offset - origin)- s;\n\toffset = vec3(sin(p.x*3. + iTime*2.),cos(p.z*2. + iTime*2.),1.0)*0.2;\n    for(int i = 0; i < 3; i++)\n    {\n\n        float prism2 = length(p + offset*float(i) - origin)- s;\n        d = max(d, -prism2);\n    }\n  \treturn d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int max_freq = 100;\n    for(int i=1; i < max_freq; i++){\n        snd +=FFT(i)*float(i);\n    }\n    snd /=float(max_freq*20);\n    //vec2 cam_uv = -1.0 + 2.0 *vUv;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 cam_uv = uv;\n    \n\t//camera + rd for stars\n    vec3 ro = vec3(0.0);//rd = vec3( 0.0 );\n\tvec3 rd = normalize(vec3(cam_uv,-1.5));\n    mat3 t3 = mat3(1.0);\n\tcamera(cam_uv, ro, rd, t3);\n    //vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n\n    mat3 rotation = //mat3(1.0);\n      rotateXmat(iTime*0.4)*rotateYmat(iTime*0.5);\n    vec3 direction = normalize(vec3(uv.x,uv.y, 1.0)*rotation);\n\n\n\n\n    float t = 0.0;\n\tvec3 p;\n    vec3 finalColor;\n\n    vec3 origin = vec3(0.,0.,-4.)*rotation;\n    vec3 offset;\n    vec3 sphereOrigin = vec3(0., 0., 0.0);\n\n    vec4 sound = texture (iChannel0,vec2(uv.x/iResolution.x, 0.75));\n    float soundColor = texture (iChannel0,vec2(0.5, 0.75)).x;\n\n    vec3 color = vec3(.5 + sin(uv.x+iTime +soundColor*50.)*.4,.5 +cos(uv.y+iTime + soundColor*5.)*.5,.5);\n    for (int k = 0; k <15; k++)\n    {\n        p = origin + t*direction;\n        float d = map(p,sphereOrigin, 2.0);\n\n        {\n            vec3 directionalOffset = -normalize(p)*sound.x*normalize(vec3(uv, 1.0));\n            vec3 position = p + directionalOffset;\n            float radius = 0.1+float(k)*.5;\n            float lineThickness = 0.02 + float(k)*0.01;\n            //position.y += position.y*abs(uv.x);\n            float distanceFromCenter = length(position);\n            float condition = step( distanceFromCenter, radius)\n                - step(distanceFromCenter, radius - lineThickness);\n            finalColor += color*condition;\n        }\n\n        t += d;\n    }\n    float fog = 1.0/(1.0+t*t*0.1);\n    fragColor = vec4(finalColor+color*vec3(fog), fog);\n    rd.x+=sin(iTime/1000.)*2.;\n\tvec3 bg = stars(rd)*(1.+30.*snd);\n\tfragColor+=vec4(bg, 1.);\n\n}","name":"Image","description":"","type":"image"}]}