{"ver":"0.1","info":{"id":"ctK3Dm","date":"1684135471","viewed":45,"name":"Minimal Parabola","username":"FryeUE","description":"This is not intended to impress. It is stripped down to be poked and help figure things out. Hope it helps anyone trying to understand shaders.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["minimal","stripped"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*I am a determined idiot. I stripped this down for clarity and to help\nother determined idiots. What your looking for has ******* at start of \ncomment line. Their are really only two lines you need to understand. \nGood luck */\n\n\nfloat parabolaMake(vec2 uv, float m){\n    //float radius = .05; //swap this with the m variable for a static view. \n    float radius = m; //us this to see a little movement\n    //*******SAUCE. This is where parabolas are born.\n    float d = pow(uv.x, 2.0) + uv.y * -.1 + 2.0 * 0.;\n    //helps normalizish things.\n    return d > radius? 0.0 : 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1),\n    vec2 uv = (fragCoord -.5 * iResolution.xy)/iResolution.y;\n    //Can manipulate parabola parameter. NON ESSENTIAL. For Animation purposes only\n    float t = iTime;\n    float m = sin(t) * .1 + .05;\n\n    //*******This is the start o'sauce. Calls function above and makes parabola. Passes to green\n    //channel in col., change according to your needs.\n    vec4 col = vec4(0.,parabolaMake(uv,m), 0.,1.);\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}