{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// turn this on to enable psychedelic cryptography\n// not recommended for this one\n#define hidden 0\n#define fading 0\n\n// Rotate UV around a pivot point\nvec2 rotateUV(vec2 uv, float angle, vec2 pivot) {\n    uv -= pivot;\n    float c = cos(angle);\n    float s = sin(angle);\n    uv = mat2(c, -s, s, c) * uv;\n    uv += pivot;\n    return uv;\n}\n\n// Reflect UV across a plane defined by a normal\nvec2 reflectUV(vec2 uv, vec2 normal, vec2 pivot) {\n    uv -= pivot;\n    uv -= 2.0 * dot(uv, normal) * normal;\n    uv += pivot;\n    return uv;\n}\n\n// param basis is point around which to rotate\nvec2 mirrorUV(vec2 uv, vec2 basis, float mirrorAngle)\n{\n    // Define rotation and reflection parameters\n    float planeAngle = radians(mirrorAngle); // Mirror plane angle in degrees\n\n    vec2 planeNormal = vec2(cos(planeAngle), sin(planeAngle));\n    vec2 reflectedUV = reflectUV(uv, planeNormal, basis);\n    float side = step(0.0, dot(uv - basis, planeNormal));\n    uv = mix(uv, reflectedUV, side);\n\n    return uv;\n}\n\n// tileUV creates tiling effect\n// param mirror[XY] mirrors each odd tile\nvec2 tileUV(vec2 uv, float nTiles, bool mirrorX, bool mirrorY) {\n    vec2 tiledUV = uv*nTiles;\n    if (mirrorX && (tiledUV.x = mod(tiledUV.x, 2.)) >= 1.) tiledUV.x = 1. - fract(tiledUV.x);\n    if (mirrorY && (tiledUV.y = mod(tiledUV.y, 2.)) >= 1.) tiledUV.y = 1. - fract(tiledUV.y);\n\n    return tiledUV;\n}\n\n// basis is the center\nvec3 colorLines(vec2 uv, vec2 basis, float time, float speed, float width) {\n    vec3 col = vec3(0.);\n\n    float scroll = time * speed;\n\n    vec2 linePos = abs(uv - basis); // Adjust for the new UV space\n    float line = step(width, mod(linePos.x - scroll, width * 2.));\n\n    col = vec3(line);\n    return col;\n}\n\n#define timestep (5.0)\n\nfloat random(float x) {\n    vec2 m = iMouse.xy /iResolution.xy;\n    float t = round(iTime/timestep)/10.;\n    if (iMouse.z>0.) {\n        t = round(iMouse.x+iMouse.y*100.)/10.;\n    }\n    return (sin(x+t)+1.)/2.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 col = vec3(0.);\n    float fadeOut = clamp(mix(0.,2.,(sin(iTime/4.)+1.)/2.), 0., 1.);\n\n    float lineSpeed = 0.6;\n    float lineWidth = 0.75;\n\n    vec2 basis = vec2(0.5,0.5); // part of screen to rotate around\n    // pivot point adjusted by resolution\n    vec2 basisAdj = vec2(iResolution.x/iResolution.y, 1.) * basis;\n\n    float timeOffset = 0.01;\n    timeOffset = mix(0.025,0.1, abs(distance(basis, uv))*2.); // more color near edges\n    float time = iTime;\n    for (int i = 0; i<3; i++) {\n        float t = time + timeOffset * float(i-1);\n\n        #define ROT(ang,piv) rotUV = rotateUV(rotUV, ang, piv)\n        #define MIRROR(bas,ang) rotUV = mirrorUV(rotUV, bas, ang)\n        #define TILE(n,a,b) {rotUV = tileUV(rotUV, n, a, b); if (i==0)lineWidth *= 0.95; }\n\n        vec2 rotUV = uv;\n\n        float nTimes = 2.+round(random(-1.)*15.);\n        float r = random(-1. * 0.5);\n        float lastOne = 0.;\n        if (r < 1./3.) {\n            ROT(t+ round(r*3.*360.), basis);\n            lastOne = 0.;\n        } else if (r < 2./3.) {\n            MIRROR(basis, t+ r*(3./2.)*360.);\n            lastOne = 1.;\n        } else {\n            TILE(round(r*3.)*2.,true,true);\n            lastOne = 2.;\n        }\n\n        for (float y=0.; y < nTimes; y++) {\n            // this jumble of numbers is to jump around a sampled sin wave in a predictable manner\n            float samplePoint = y * 1.1 + sin(y/2.)/2.;\n            r = random(samplePoint);\n            float r1 = random(samplePoint+1.);\n            float r2 = random(samplePoint+2.);\n            if (lastOne==0.) {\n                if (r < 0.5) {\n                    MIRROR(basis, t*r2+ r1*360.);// if r<.5 then *2. to bring in 0-1 range\n                    lastOne = 1.;\n                } else {\n                    TILE(round(2.),true,true);\n                    lastOne = 2.;\n                }\n            } else if (lastOne==1.) {\n                if (r < 0.5) {\n                    ROT(t*r2+ round(r1*360.), basis);\n                    lastOne = 0.;\n                } else {\n                    TILE(round(2.),true,true);\n                    lastOne = 2.;\n                }\n            } else {\n                if (r < 0.5) {\n                    ROT(t*r2+ round(r1*360.), basis);\n                    lastOne = 0.;\n                } else {\n                    MIRROR(basis, t*r2+ r1*360.);// this one should be reduced\n                    lastOne = 1.;\n                }\n            }\n        }\n\n        rotUV.x *= iResolution.x/iResolution.y; // fix aspect ratio before drawing lines to avoid shearing lines\n        vec3 c = colorLines(rotUV, basisAdj, t, lineSpeed, lineWidth);\n        //vec3 c = colorLines(rotUV, basisAdj, t, lineSpeed * ((1.+sin(uv.x + iTime/20.))/2.), lineWidth);\n\n        // this does rgb shift effect\n        switch (i) {\n        case 0: col.r = c.r;\n        case 1: col.g = c.g;\n        case 2: col.b = c.b;\n        }\n    }\n\n#if fading\n    col.rgb = clamp(col.rgb,0.,1.);\n    col.rgb *= fadeOut;\n#endif\n\n    bool zeroOrOne = col != vec3(0.) && col != vec3(1.);\n    // cryptography section (not sure if this works well)\n#if hidden\n    if (zeroOrOne) {\n        col.rgb *= 2./3.;\n        col.rgb += texture(iChannel0, 1.-tileUV(uv, 2.,true,true)).rbr * (1./3.);\n    }\n#else\n#endif\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MfKBRy","date":"1734155049","viewed":58,"name":"ever shifting geometry","username":"bombblob","description":"whoa\n\nleftclick to view specific seed","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""}}