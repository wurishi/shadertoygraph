{"ver":"0.1","info":{"id":"tl2yDV","date":"1595445401","viewed":332,"name":"Retro Neon","username":"EDragon","description":"A little sandbox of mine that I went a bit ham on","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define resolution iResolution\n#define time iTime\nmat2 rot(float a){\n\treturn mat2(cos(a), sin(a), sin(-a), cos(a));\n}\nvec2 rotate(vec2 v, vec2 o, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * (v-o) + o;\n}\n\n// shamelessly yoinked from https://shadertoy.com/view/MlsfRj\n\nvec2 TransformPlane(vec2 uv, vec2 center, float XRot, float YRot) {\n    // First Rotate around Y axis\n    vec2 RayDirection =  vec2(uv.x, 0.0);\n    vec2 A1 = vec2(0.0, -1.0);\n    vec2 B1 = RayDirection - A1;\n    vec2 C1 = rotate(vec2(-1.0, 0.0), vec2(center.x, 0.0), YRot);\n    vec2 D1 = rotate(vec2( 1.0, 0.0), vec2(center.x, 0.0), YRot) - C1;\n    // calculate intersection point\n    float u = ( (C1.y + 1.0) * D1.x - C1.x * D1.y ) / (D1.x*B1.y-D1.y*B1.x);\n    // position on the plane:\n    float sx = u * B1.x;\n \tfloat sy = u * uv.y;\n    // Now Rotate around X axis\n    RayDirection = vec2(sy, .0);\n    vec2 B2 = RayDirection - A1;\n    vec2 C2 = rotate(vec2(-1.0, 0.00), vec2(center.y, 0.0), XRot);\n    vec2 D2 = rotate(vec2( 1.0, 0.0), vec2(center.y, 0.0), XRot) - C2;\n    // calculate intersection point\n    float v = ( (C2.y + 1.0) * D2.x - C2.x * D2.y ) / (D2.x*B2.y-D2.y*B2.x);\n    // final position on the plane:\n    return vec2(v * sx, v * B2.x );\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = gl_FragCoord.xy / resolution.y;\n\tvec2 uv2 = (gl_FragCoord.xy-.5*resolution.xy) / resolution.y;\n\tvec2 uv3 = uv2;\n\tvec2 uv4 = uv2;\n\tvec2 uv = gl_FragCoord.xy / vec2(resolution.x*.6, resolution.y);\n\tvec2 st = gl_FragCoord.xy / vec2(resolution.x*.6, resolution.y);\n    vec2 coord = TransformPlane(uv-vec2(.833,.0), vec2(.0,.0),-.95, -.0);\n\n\tuv.y += .5;\n\tfloat m = .8;\n\tuv.y *= 1.*pow(uv.y, (ouv.y*5.))+m;\n\tuv.y -= m;\n    //uv.x = pow(uv.x,0.6);\n\t//uv.x *= (uv.y);\n\tuv2.y *= uv.y*75.;\n\tuv2.y += time*5.;\n\tcoord *= rot(-((iMouse.x+(resolution.x*.5))-(resolution.x))/resolution.x*6.275);\n\tst.y -= .05;\n\n\n\n\tuv.y -= time*.1;\n    coord.y -= time*.2;\n\n\tuv = fract(uv*10.);\n\tcoord = fract(coord*5.);\n\n\n\n\tfloat d = mix(.0, 1., smoothstep(.15, .145, distance(uv3, vec2(.0, .25))));\n\tfloat d2 = d;\n    float d3 = mix(.0, 1., smoothstep(.4, .1, distance(uv3, vec2(.0, .25))));\n\n\n\t\n\tfloat l = smoothstep(coord.x*1.333, .0, .05);\n\tfloat r = smoothstep(coord.x*.966, 1., .95);\n\tfloat b = smoothstep(coord.y , .0, .05);\n\tfloat t = smoothstep(coord.y, 1., .95);\n\n\tvec3 col = vec3(0.);\n\n\n\tfloat al = l*r*b*t;\n\tcol = vec3(1.-al);\n\tcol *= smoothstep(st.y, 1.5, .65);\n\n\tcol *= vec3(1., .0, 1.);\n    \n\tcol *= pow(col, vec3(.24545));\t//shhh, no witnesses\n\tcol *= 5.;\n\tfloat ni = clamp(.0, .0, (sin(time+uv2.y-.5)+.5));\n\tni = pow(ni,2.);\n\tvec3 dc = vec3(.8, .4, .1);\n\tvec3 dc2 = vec3(.8, .4, .1);\n\tuv4.y *= d2*2.;\n\tdc *= 1.+smoothstep(1., .0, 1.-uv4.y)-(1.-d);\n\tdc2 *= 1.+smoothstep(1., .0, 1.-uv4.y)-(1.-d3);\n\td *= ni;\n\tif (d <= .0 && uv3.y <= .21){\n\t\td2 *= d;\n\t}\n    uv3.y += -.175*cos(uv3.x)+.175;\n    float mi = smoothstep(.0, .5, uv3.y);\n\tvec3 mist = vec3(1., .1, .8);\n\tmist *= vec3(mi);\n\tcol += vec3(dc*d2*.65+dc2*.5+mist*.5);\n\tcol *= pow(col, vec3(.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}