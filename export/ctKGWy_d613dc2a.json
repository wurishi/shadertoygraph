{"ver":"0.1","info":{"id":"ctKGWy","date":"1692966098","viewed":74,"name":"Wake/rise up: Warp effect","username":"seven_dc","description":"This is the \"Warp\" effect from Wake up / rise up demo. basically raymarched ball field with distorsion. It is not the same as the demo it has been modified from this.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","warp"],"hasliked":0,"parentid":"WlVyzm","parentname":"Basic raymarching scroller"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec4 doBallEffect(vec2 fragCoord) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // do distortion!\n    float val = max(pow(sqrt(dot(uv,uv)-.05),.5), 0.2 );   \n    uv /= val;  \n    \n    vec3 rayOrgin = vec3(0, 3.+sin(iTime)*2., mod(iTime,4.));\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = 0.;\n    vec4 sphere = vec4(2, 2, 2, 1);   \n    \n    for(int i=0; i<100; i++) {\n    \tvec3 point = rayOrgin + rayDirection * d;\n        vec3 spoint = mod(point, 4.);    \n        \n        float sphereDist = length(spoint-sphere.xyz)-sphere.w;    \n        float planeDist = point.y;\n        \n        float surfaceDistance = min(sphereDist, planeDist);\n        d += surfaceDistance;\n        if(d > 40. || surfaceDistance<.1) break;\n    }\n    \n    // color\n    vec3 col = vec3(1.-(d/20.));\n    col.r += abs(uv.y*.5);\n    col.b += abs(uv.x*.2);\n    return vec4(col.r, col.g, val ,1.0);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    fragColor = doBallEffect(fragCoord);\n}","name":"Image","description":"","type":"image"}]}