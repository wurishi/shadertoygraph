{"ver":"0.1","info":{"id":"tsKGWW","date":"1570203274","viewed":152,"name":"Inktober #4: Freeze","username":"Wraithan","description":"Playing around with worley noise\n\nWorley noise implementation from: https://github.com/Erkaman/glsl-worley/blob/2669c330c144489805e27649f4bc266fab2713da/worley2D.glsl\n\nPerlin noise implementation from: https://github.com/stegu/webgl-noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["worley","freeze","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat frozen(vec2 uv) {\n    uv *= vec2(6.0, 10.0);\n\n    vec2 cellNoise = worley(uv, 1.0, false);\n    float mask = max(cellNoise.x * 0.7, cellNoise.y * 0.2);\n    \n    uv *= 3.0;\n   \n    cellNoise = worley(uv, 1.0, false);\n    mask += min(max(cellNoise.x * 0.7, cellNoise.y * 0.2) * 0.2, mask);\n    return mask;\n}\n\nfloat water(vec2 uv, float t) {\n    uv *= vec2(6.0, 10.0);\n    \n    float angle = 3.14159 * 0.25;\n    uv *= mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    float time = iTime * 0.4;\n    \n    float mask = (cnoise(vec3(uv, time)) * 0.5 + 0.5) * 0.7;\n    mask += (cnoise(vec3(uv + vec2(0.3, 0.7) * mask, time)) * 0.5 + 0.5) * 0.3;\n    mask = smoothstep(0.3, 0.7, mask) * 0.9;\n    \n    return mask;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    \n    uv.x += iTime * 0.1;\n    uv.y += sin(iTime * 0.1);\n    \n    vec3 col = vec3(0.0, 0.4, 0.6);\n    \n    float t = smoothstep(0.01, 0.8, sin(iTime) * 0.5 + 0.5);\n    \n    col *= mix(water(uv, 1.0-t), frozen(uv), t);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://github.com/Erkaman/glsl-worley/blob/2669c330c144489805e27649f4bc266fab2713da/worley2D.glsl\n\n// Permutation polynomial: (34x^2 + x) mod 289\nvec3 permute(vec3 x) {\n    return mod((34.0 * x + 1.0) * x, 289.0);\n}\n\nvec3 dist(vec3 x, vec3 y,  bool manhattanDistance) {\n\treturn manhattanDistance ?  abs(x) + abs(y) :  (x * x + y * y);\n}\n\nvec2 worley(vec2 P, float jitter, bool manhattanDistance) {\n\tfloat K= 0.142857142857; // 1/7\n\tfloat Ko= 0.428571428571 ;// 3/7\n  \tvec2 Pi = mod(floor(P), 289.0);\n   \tvec2 Pf = fract(P);\n  \tvec3 oi = vec3(-1.0, 0.0, 1.0);\n  \tvec3 of = vec3(-0.5, 0.5, 1.5);\n  \tvec3 px = permute(Pi.x + oi);\n  \tvec3 p = permute(px.x + Pi.y + oi); // p11, p12, p13\n  \tvec3 ox = fract(p*K) - Ko;\n  \tvec3 oy = mod(floor(p*K),7.0)*K - Ko;\n  \tvec3 dx = Pf.x + 0.5 + jitter*ox;\n  \tvec3 dy = Pf.y - of + jitter*oy;\n  \tvec3 d1 = dist(dx,dy, manhattanDistance); // d11, d12 and d13, squared\n  \tp = permute(px.y + Pi.y + oi); // p21, p22, p23\n  \tox = fract(p*K) - Ko;\n  \toy = mod(floor(p*K),7.0)*K - Ko;\n  \tdx = Pf.x - 0.5 + jitter*ox;\n  \tdy = Pf.y - of + jitter*oy;\n  \tvec3 d2 = dist(dx,dy, manhattanDistance); // d21, d22 and d23, squared\n  \tp = permute(px.z + Pi.y + oi); // p31, p32, p33\n  \tox = fract(p*K) - Ko;\n  \toy = mod(floor(p*K),7.0)*K - Ko;\n  \tdx = Pf.x - 1.5 + jitter*ox;\n  \tdy = Pf.y - of + jitter*oy;\n  \tvec3 d3 = dist(dx,dy, manhattanDistance); // d31, d32 and d33, squared\n  \t// Sort out the two smallest distances (F1, F2)\n  \tvec3 d1a = min(d1, d2);\n  \td2 = max(d1, d2); // Swap to keep candidates for F2\n  \td2 = min(d2, d3); // neither F1 nor F2 are now in d3\n  \td1 = min(d1a, d2); // F1 is now in d1\n  \td2 = max(d1a, d2); // Swap to keep candidates for F2\n  \td1.xy = (d1.x < d1.y) ? d1.xy : d1.yx; // Swap if smaller\n  \td1.xz = (d1.x < d1.z) ? d1.xz : d1.zx; // F1 is in d1.x\n  \td1.yz = min(d1.yz, d2.yz); // F2 is now not in d2.yz\n  \td1.y = min(d1.y, d1.z); // nor in  d1.z\n  \td1.y = min(d1.y, d2.x); // F2 is in d1.y, we're done.\n  \treturn sqrt(d1.xy);\n}\n\n//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 noisePermute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = noisePermute(noisePermute(ix) + iy);\n  vec4 ixy0 = noisePermute(ixy + iz0);\n  vec4 ixy1 = noisePermute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}","name":"Common","description":"","type":"common"}]}