{"ver":"0.1","info":{"id":"ldcfWj","date":"1526759089","viewed":199,"name":"Gyroid Height Derivative","username":"Ebanflo","description":"WASD to move and mouse to look around.","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["3d","raymarch","gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define close 0.0001\n#define far 50.0\n#define marchingIters 40\n\n#define AA 2\n\nconst vec4 pi = vec4(1, 2, 4, 8)*atan(1.0);\nconst float isqrt3 = inversesqrt(3.0);\nconst float epsilon = 0.001;\n\nfloat sdf(vec3 p){return isqrt3*abs(dot(sin(p), cos(p.zxy))) - 0.1;}\n\nvec3 calcNormal(vec3 p){\n    vec2 e = vec2(0, epsilon);\n    return normalize(vec3(sdf(p + e.yxx),\n                          sdf(p + e.xyx),\n                          sdf(p + e.xxy))\n                     - sdf(p));\n}\n\nvec3 render(vec2 fragCoord){\n    vec4 uv = (vec4(fragCoord, iMouse.xy) - 0.5*iResolution.xyxy)/iResolution.x;\n    vec4 rot = texelFetch(iChannel0, ROT, 0);\n    vec4 pos = texelFetch(iChannel0, POS, 0);\n    if (length(iMouse.xy) < 10.0)\n    {\n        pos = vec4(4.01, sin(-iTime)*4.0 + 4.0, iTime, 0.0);\n        rot = vec4(-sin(iTime*0.5)*0.6, cos(iTime*0.3)*0.3, 0.0, 0.0);\n    }\n\tvec3 rd = r(vec3(uv.xy, 0.5), -rot.xy);\n\tvec3 ro = pos.xyz;\n\tvec2 mo = 10.0*uv.zw;\n\trd = normalize(rd);\n    \n    float t = 0.0;\n    vec3 p = ro;\n    for(int i = 0; i < marchingIters; i++){\n        float d = sdf(p);\n        if(d < close) break;\n        t += d;\n        if(t > far) break;\n        p += d*rd;\n    }\n    if(t > far) return vec3(1);\n    vec3 n = calcNormal(p);\n    vec3 t1 = normalize(vec3(0.00001, -n.z, n.y));\n    vec3 t2 = normalize(cross(n, t1));\n    vec2 dt = vec2(t1.y, t2.y);\n    return dot(dt, dt)*(0.5 + 0.5*sin(atan(dt.y, dt.x) + vec3(0, 0.333333, 0.333333)*pi.yzw));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n#if AA>1\n    for(int m = 0; m < AA; m++){\n        for( int n=0; n<AA; n++ ){\n            vec2 px = fragCoord + vec2(float(m),float(n))/float(AA);\n    \t    col += render(px);    \n        }\n    }\n    col /= float(AA*AA);\n#else\n    col = render(fragCoord);\n#endif\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//movement system feat rodolphito\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    ivec2 texel = ivec2(fragCoord);\n    if (texel != POS && texel != ROT) discard;\n    vec4 rot = texelFetch(iChannel0, ROT, 0);\n    vec4 pos = texelFetch(iChannel0, POS, 0);\n    pos.w = max(step(0.0,iMouse.z) - pos.w,0.0);\n    if (texel == ROT)\n    {\n        vec2 mouse = iMouse.xy / iResolution.xy;\n        rot.zw += (mouse - rot.zw) * pos.w;\n        rot.xy += (mouse - rot.zw) * step(0.0,iMouse.w) * MOUSESENS;\n        rot.xy += vec2(KEYRT-KEYLF,KEYUP-KEYDN) * MOUSESENS * 0.003;\n        fragColor = rot;\n    }\n\telse if (texel == POS)\n    {\n        pos.xyz += r(vec3(KEY_D - KEY_A, SPACE - KEY_X, KEY_W - KEY_S),-rot.xy) * (BOOST * SHIFT + SPEED);\n        fragColor = pos;\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//movement system feat rodolphito\n#define POS ivec2(0,0)\n#define ROT ivec2(1,0)\n\n#define MOUSESENS 8.0\n#define SPEED 0.1\n#define BOOST 0.1\n#define KEY_X texture(iChannel1,vec2(88.5/256.0,0.25)).x\n#define SHIFT texture(iChannel1,vec2(16.5/256.0,0.75)).x\n#define SPACE texture(iChannel1,vec2(32.5/256.0,0.25)).x\n\n#define QWERTY\n\n#if defined(QWERTY)\n#define KEY_W texture(iChannel1,vec2(87.5/256.0,0.25)).x\n#define KEY_A texture(iChannel1,vec2(65.5/256.0,0.25)).x\n#define KEY_S texture(iChannel1,vec2(83.5/256.0,0.25)).x\n#define KEY_D texture(iChannel1,vec2(68.5/256.0,0.25)).x\n#define KEYLF texture(iChannel1,vec2(37.5/256.0,0.25)).x\n#define KEYUP texture(iChannel1,vec2(38.5/256.0,0.25)).x\n#define KEYRT texture(iChannel1,vec2(39.5/256.0,0.25)).x\n#define KEYDN texture(iChannel1,vec2(40.5/256.0,0.25)).x\n#else\n#define KEYLF texture(iChannel1,vec2(65.5/256.0,0.25)).x\n#define KEYUP texture(iChannel1,vec2(87.5/256.0,0.25)).x\n#define KEYRT texture(iChannel1,vec2(68.5/256.0,0.25)).x\n#define KEYDN texture(iChannel1,vec2(83.5/256.0,0.25)).x\n#define KEY_W texture(iChannel1,vec2(38.5/256.0,0.25)).x\n#define KEY_A texture(iChannel1,vec2(37.5/256.0,0.25)).x\n#define KEY_S texture(iChannel1,vec2(40.5/256.0,0.25)).x\n#define KEY_D texture(iChannel1,vec2(39.5/256.0,0.25)).x\n#endif\n\nvec3 r(vec3 v, vec2 r){\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}","name":"Common","description":"","type":"common"}]}