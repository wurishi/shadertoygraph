{"ver":"0.1","info":{"id":"csXfRS","date":"1688849047","viewed":225,"name":"Wave Equation (263 chars)","username":"fenix","description":"Inspired by this video by Nils Berglund:\n\nhttps://www.youtube.com/watch?v=pN-gi_omIVE\n","likes":15,"published":3,"flags":32,"usePreview":0,"tags":["2d","wave","simulation","codegolf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2023\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//  Inspired by this video by Nils Berglund:\n//\n//      https://www.youtube.com/watch?v=pN-gi_omIVE\n//\n//  Buffer A stores the displacement at each pixel in the x coordinate, and the previous\n//  displacement in the y coordinate. The simulation runs according to the formula @28:30:\n//\n//      u(n+1,i,j) = 2u(n,i,j) - u(n-1,i,j) +\n//                   C[u(n,i+1,j) + u(n,i-1,j) + u(n,i,j+1) + u(n,i,j-1) - 4u(n,i,j)]\n//\n//  This simulation looks like it will be fun to experiment with, but for my first very\n//  simple wave equation shader it seemed like a golfing style would be appropriate. If\n//  I do more of these I'll use a clearer style.\n//\n// ---------------------------------------------------------------------------------------\n\nM;\n    O = sin(O.x + vec4(0, 11, 16, 0)); // colorize\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// From SnoopethDuckDuck, -34 chars\n//*\nM.xxyy; // copies the current value from x to y coordinate to record new previous, put current previous into z for us to use\n    vec2 o = vec2(1, 0), R = iResolution.xy;\n    O.x = .5 * (U(u + o) + U(u - o) + U(u + o.yx) + U(u - o.yx)).x - O.z; // apply wave equation\n    O = iFrame == 0 ? step(length(u+u-R), R.y * .2) * o.xyyy : O; // initial condition\n}\n/**/\n\n// Original:\n/*\nM.xxyx; // copies the current value from x to y coordinate to record new previous, put current previous into z for us to use\n    vec2 o = vec2(1, 0), R = iResolution.xy;\n    O.x = 2. * O.x - O.z + .5 * (U(u + o.xy).x + U(u - o.xy).x + U(u + o.yx).x + U(u - o.yx).x - 4. * O.x); // apply wave equation\n    O = iFrame == 0 ? (length(u - .5 * R.xy) < R.y * .1) ? o.xyyy : vec4(0) : O; // initial condition\n}\n/**/\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define U(u) texelFetch(iChannel0, ivec2(u), 0) //\n#define M void mainImage( out vec4 O, vec2 u ) { O = U(u) //","name":"Common","description":"","type":"common"}]}