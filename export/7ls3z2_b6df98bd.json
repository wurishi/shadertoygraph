{"ver":"0.1","info":{"id":"7ls3z2","date":"1622476117","viewed":215,"name":"Nicer Underwater Julia","username":"seven_dc","description":"Testing raymarcher to render julia fractal","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["juliaraymarcher"],"hasliked":0,"parentid":"7dB3zt","parentname":"Underwater Julia fractal marcher"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 10\n#define MAX_DIST 10.\n#define SURF_DIST .1\n\nfloat julia( vec2 p, float time )\n{\n\tfloat ltime = 0.5-0.5*cos(time*0.36);\n    float zoom = pow( 0.9, 30.0*ltime );\n\tvec2 cen = vec2( 0.2055,0.01) + zoom*1.8;//*cos(4.0+2.0*ltime); \n\tvec2 c = vec2( -0.745, 0.186 ) - 0.245*zoom*(1.0-ltime*0.5);\n\tvec2 z = cen + (p-cen)*zoom;\n   \n\tvec2 dz = vec2( 1.0, 0.0 );\n\tfor( int i=0; i<60; i++ )\n\t{\n\t\tdz = 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x );\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n\t\tif( dot(z,z)>200.0 ) break;\n\t}\n\tfloat d = sqrt( dot(z,z)/dot(dz,dz) )*log(dot(z,z));\n    \n\treturn sqrt( clamp( (1.0/zoom)*d, 0.0, 1.0 ) );\n}\n\nfloat GetDistance(vec3 point) {\n    return julia(vec2(point.x,point.y), point.z+iTime);\n}\n\nfloat RayMarch(vec3 rayOrgin, vec3 rayDirection) {\n\tfloat distance=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 point = rayOrgin + rayDirection * distance;\n        float surfaceDistance = GetDistance(point);\n        distance += surfaceDistance;\n        // Stop marching if we go too far or we are close enough of surface\n        if(distance>MAX_DIST || surfaceDistance<SURF_DIST) break;\n    }\n    \n    return distance;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // put 0,0 in the center\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n       \n    // camera   \n    vec3 rayOrgin = vec3(0, 1, 0);\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayMarch(rayOrgin, rayDirection);\n    \n    vec3 col = vec3(d/100.,d/15.+uv.y,d/5.);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}