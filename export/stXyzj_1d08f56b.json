{"ver":"0.1","info":{"id":"stXyzj","date":"1648293293","viewed":64,"name":"Simple Phong Shader","username":"ghd3079","description":"My first Shadertoy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["phong"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 background(vec3 uv)\n{\n    uv = uv * 0.5 + 0.5;\n    float c = max(dot(uv, vec3(0.0, 1.0, 0.0)), 0.0);\n    vec3 skyColor = vec3(0.5, 0.5, 1.0);\n    return pow(c, 1.0) * skyColor;\n}\n\nfloat sdSphere(vec3 spherePos, float radius, vec3 rayStart, vec3 rayDir)\n{\n    vec3 oc = rayStart - spherePos;\n    float b = dot(rayDir, oc);\n    float c = dot(oc, oc) - radius*radius;\n    float det = b*b - c;\n    if(det < 0.0)\n    {\n        return -1.0;\n    }\n    float t = -b - sqrt(det);\n    return t;\n}\n\nfloat sdPlane(vec4 plane, vec3 rayStart, vec3 rayDir)\n{\n    float t = -(plane.w + dot(rayStart, plane.xyz));\n    return t / dot(rayDir, plane.xyz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 lightPos = vec3(2, 2, 0);\n    vec3 cameraPos = vec3(-5.0 * cos(iTime), 0, -5.0 * sin(iTime));\n    vec3 rayStart = cameraPos;\n    vec3 up = vec3(0, 1, 0);\n    vec3 front = normalize(-cameraPos);\n    vec3 right = normalize(cross(up, front));\n    up = normalize(cross(front, right));\n    vec3 rayDir = normalize(up * uv.y + right * uv.x + front);\n    \n    vec3 spherePos = vec3(0, 0, 0);\n    float radius = 0.5;\n    vec3 sphereColor = vec3(0.6, 0.3, 0.8);\n    \n    vec4 plane = vec4(0.0, 1.0, 0.0, 1.0);\n    \n    float tSphere = sdSphere(spherePos, radius, rayStart, rayDir);\n    float tPlane = sdPlane(plane, rayStart, rayDir);\n    float t = (tSphere * tPlane > 0.0) ? min(tSphere, tPlane) : max(0.0, max(tSphere, tPlane));\n    if(t > 0.0)\n    {\n        vec3 hit = rayStart + t * rayDir;\n        vec3 N = normalize(hit - spherePos);\n        vec3 L = normalize(lightPos - hit);\n        float NdotL = dot(N, L);\n        vec3 R = normalize(2.0 * NdotL * N - L);\n        vec3 V = normalize(cameraPos - hit);\n        \n        vec3 ambient = vec3(0.1);\n        vec3 diffuse = vec3(max(NdotL, 0.0));\n        vec3 specular = vec3(0.5 * pow(max(dot(R, V), 0.0), 1.0));\n        sphereColor *= (ambient + diffuse + specular);\n        \n        fragColor = vec4(sphereColor, 0.0);\n    }\n    else\n    {\n        fragColor = vec4(background(vec3(uv, 0)), 0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}