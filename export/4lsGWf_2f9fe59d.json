{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"//#define BIG_PIXELS\n\nmat2 rotate (float angle) {\n \treturn mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));   \n}\n\n#define METABALL(i) meta-=0.75*0.65/pow(length(vec3(sin(iTime*0.1 + float(i)*128.0),sin(iTime*0.1 - float(i)*64.0),cos(iTime*0.1 - float(i)*16.0))*2.25-p), g);\n\nfloat volume (vec3 p) {\n    float meta = 0.0;\n    float g = 2.125;\n    METABALL(0);  METABALL(2);  METABALL(3);  METABALL(4);\n    METABALL(5);  METABALL(6);  METABALL(7);  METABALL(8);\n    METABALL(9);  METABALL(10); METABALL(11); METABALL(12);\n    METABALL(13); METABALL(14);\n    return min(p.y + 3.25, meta + 1.0);\n}\n\nvec3 normal (vec3 p) {\n \tvec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(\n    \tvolume(p + eps.xyy) - volume(p - eps.xyy),\n        volume(p + eps.yxy) - volume(p - eps.yxy),\n        volume(p + eps.yyx) - volume(p - eps.yyx)\n    ));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    #ifdef BIG_PIXELS\n    uv.xy = floor(uv.xy*26.0)/26.0;\n\t#endif\n    \n    vec3 sun = normalize(vec3(0.0, -1.0, 0.0));\n    vec3 fog = vec3(1.0);\n    vec3 color = vec3(1.0);\n   \tvec3 ro = vec3(uv, -5.0);\n    vec3 rd = normalize(vec3(uv * .75, 1.0));\n  \n    float h = 0.0;\n    for (int i = 0; i < 150; ++i) {\n     \tvec3 p = ro+h*rd;\n        float tr = volume(p);\n        h += max(0.01, tr);\n       \n        if (h > 14.0) break;\n        if (tr < 0.0) {\n            vec3 n = normal(p);\n            float shade = clamp(dot(n, -sun), 0.0, 1.0);\n            float shade2 = clamp(dot(n, normalize(vec3(-1.0, -1.0, 0.0))), 0.0, 1.0);\n        \tcolor = vec3(1.0, 0.9, 0.7)*1.5*mix(0.2, 1.0, shade);\n            color += vec3(0.2, 0.2, 0.5)*0.25 * shade2;\n            \n            if (p.y < -3.0 + 1e-6) {\n                \n                color -= mix(0.0, 0.25, rand(floor(p.xz*0.5)));\n                \n             \tfloat sh = 0.1;\n                for (int i = 0; i < 16; ++i) {\n                 \tvec3 pp = p + sh * vec3(0.0, 1.0, 0.0);\n                    float si = volume(pp);\n                    sh += max(0.01, si);\n                    if (sh > 4.0) break;\n                    if (si < 0.0) {\n                     \tcolor *= 1.0 - exp(-max(0.0, length(pp-p)-0.125) * 3.5);\n                        break;   \n                    }\n                }\n            }\n            \n            float asd = clamp(dot(n, normalize(ro-p)), 0.0, 1.0);\n            color = mix(color*2.0, color, smoothstep(0.1, 0.50, asd));\n            color = mix(vec3(0.5), color, smoothstep(0.0, 0.5, asd));\n           \tcolor = mix(color, fog, 1.0-exp(-length(p)*0.25));\n            break;\n        }\n    }\n    \n    vec2 uv2 = fragCoord.xy / iResolution.xy;\n    uv2 = uv2 * 2.0 - 1.0;\n    #ifdef BIG_PIXELS\n    uv2.xy = floor(uv2.xy*26.0)/26.0;\n    #endif\n    color *= smoothstep(2.25, 1.65 - 0.75, length(uv2));\n    \n    fragColor = vec4(pow(color, vec3(0.7)), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4lsGWf","date":"1425760373","viewed":456,"name":"lowres metaballs","username":"germangb","description":"A few metaballs","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","metaballs"],"hasliked":0,"parentid":"","parentname":""}}