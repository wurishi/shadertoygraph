{"ver":"0.1","info":{"id":"wljBDD","date":"1599007405","viewed":375,"name":"Trees!","username":"logangilmour","description":"Make a tree by growing a signed distance field tree toward a given point in space! Warp the domain a bit for fun!","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["tree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nconst float pi = 3.1459;\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat tree(int seed, vec2 uv, float scale){\n    float theta = pi/2.;\n    float dotperp = 0.;\n    float minp = 1000.;\n    scale = noise(vec2(seed+10,seed+100))*0.5+.5;\n    \n    vec2 rando = vec2(noise(uv*2.+vec2(seed)),noise(uv*2.+vec2(seed+100)));\n    vec2 pos = vec2(noise(vec2(seed+5,seed))*2.-.4,-0.2-scale);\n    uv += rando*0.015;\n    rando = vec2(noise(uv/3.+vec2(seed+100)),noise(uv/3.+vec2(seed+200)));\n\tuv += rando*0.1;\n\n\t\n    int path = seed;\n    for(int i=0; i<8; i++){\n  \n  \n    \tvec2 pa = uv-pos;\n        vec2 dir = vec2(cos(theta),sin(theta));\n        vec2 ba = dir*scale;\n        vec2 perp = vec2(dir.y,-dir.x);\n        dotperp = dot(perp,pa);\n        bool side = dotperp>0.;\n        path = path*2+int(side);\n        float newtheta = theta - (float(side)*2.-1.)*0.25*(sin(iTime/scale*0.5+float(seed))*0.03+1.)/(float(i)*0.2+1.);\n        pos +=vec2(cos(theta),sin(theta))*scale;\n        float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n        float len = length( pa - ba*h )-0.02*(1.+(1.-h))*scale;\n        minp = min(len,minp);\n        theta = newtheta;\n        //theta += (rand(vec2(float(path*10),0.))*2.-1.)*0.3;\n        scale = scale/2.*(1.+rand(vec2(float(path*10),0.))*.3);\n    }\n    return minp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n/*\n\tfloat minp = \n        min(min(\n            tree(0,uv,vec2(-0.3,-1),0.6),\n            tree(7,uv,vec2(0.2,-1),0.7)),\n            tree(10000,uv,vec2(0.,-1),0.3));\n*/\n    float minp = 1000.;\n    for(int i=0; i<30; i++){\n        minp = min(minp,tree(i,uv,0.6));\n    }\n    \n    float fill = max(0.,min(1.,minp/0.002));\n    fragColor = vec4(vec3(fill),1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}