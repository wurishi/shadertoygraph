{"ver":"0.1","info":{"id":"WtSXWd","date":"1567451957","viewed":144,"name":"Escher popescher","username":"AlreadyTaken","description":"kb helped me to get a starting point  for https://isohedral.ca/escher-like-spiral-tilings/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["escherspiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.14159;\nfloat theta = 0.5773503;\n\nmat2 rot(float a) \n{\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nmat2 shear(vec2 v)\n{\n  return mat2(1,v.x,v.y,1);\n}\n\n\n\n\n//used this years ago. dunno for what anymore.. something something unity.\n//yes it is throw stuff at spiral time. why wo'T you work?\nvec2 hexagon(in vec2 p) \n\t{\n\tvec2 q = vec2( p.x*2.0*theta, p.y + p.x*theta );\n\tvec2 pi = floor(q);\n    vec2 pf = fract(q);\n\tfloat v = mod(pi.x + pi.y, 3.0);\n\tfloat ca = step(1.0,v), cb = step(2.0,v);\n\tvec2  ma = step(pf.xy,pf.yx);\n\t\t\t\n\treturn vec2( pi + ca - cb*ma);\n\t}\n\n\nvec2 expc(vec2 v){\n   float x = exp(0.5)*sin(v.y);\n   float y = exp(0.5)*cos(v.y);\n   return vec2(x,y);\n}\n    \n\n//Taken from https://www.shadertoy.com/view/WtSSDd\n//Thanks to kb again \n\n\n\n// complex logarithm \nvec2 logc(vec2 v)\n{\n    return vec2(log(length(v)),atan(v.y,v.x));\n}\n// map from logarithmic spiral to time coordinates  \nvec2 spiral(vec2 uv, float spd, int amnt)\n{\n    float ts = iTime*spd;\n    uv *= rot(sin(ts)*10.); // rotate\n    \n    uv = logc(uv.xy); // map from complex exp\n\n    // scale\n    vec2 uv2 = uv*vec2(0.1,1./(2.*pi));\n    \n    \n    float st = mod(ts,float(amnt));\n\n    // shear (y factor needs to be integer to avoid seams)\n    // uncomment to see why :)\n    //uv.x = float(st)*uv2.x + 9.*uv2.y;\n    //uv.y = float(st)*uv2.y - 9.*uv2.x;\n    \n    uv.x = 4.*uv2.x + 9.*uv2.y;\n    uv.y = 4.*uv2.y - 9.*uv2.x;\n    // tile and shift\n    return mod(uv,1.)-0.75;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvorig = uv;\n    uv.xy -= .5; // center around 0\n    uv.x /= iResolution.y/iResolution.x; // apply aspect\n\n    \n    uv.x*= 1.;\n    uv.y *= 1.;    \n    uv= spiral(uv.xy, 0.5, 6);\n    uv *= rot(0.2);\n    \n    //uv *= hexagon(uv*5.0);\n    uv = abs(uv);\n      vec2 hex = hexagon(uvorig*20.0);\n\n// Time varying pixel color\n    vec3 col = cos(5.*vec3(uv,0.)+iTime);\n     col *= hex.x;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}