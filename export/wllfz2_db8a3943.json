{"ver":"0.1","info":{"id":"wllfz2","date":"1597243172","viewed":111,"name":"Blender Line shader","username":"jbakker","description":"Test for blender image editor","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lineaa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat calc_coverage(vec2 uv, vec2 line_center, float angle) {\n    vec2 line_dir = vec2(sin(angle), cos(angle));\n    \n    vec2 ofs = uv - line_center;\n    float lambda = dot(line_dir, ofs);\n    vec2 projection = line_center + lambda * line_dir;\n    float d = distance(uv, projection);\n    float result = smoothstep(0.002, 0.001,abs(d));\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float coverage = max(max(\n      calc_coverage(uv, vec2(0.5), iTime),\n      calc_coverage(uv, vec2(0.2, 0.3), iTime* 0.2+ 0.1)),\n      calc_coverage(uv, vec2(0.8, 0.2), iTime*-0.3)\n    );\n\n    fragColor = vec4(vec3(coverage),1.0);\n}","name":"Image","description":"","type":"image"}]}