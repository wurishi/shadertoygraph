{"ver":"0.1","info":{"id":"md3yz7","date":"1694848212","viewed":141,"name":"线段圆在转圈圈 dashed circle","username":"xuyaomin","description":"使用线段画的圆, 计算点和圆心之间的夹角角度, 原点居中","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circle","dashed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// 计算点与圆心之间的夹角角度（以度为单位）\nfloat calculateAngle(vec2 p1, vec2 p2) {\n    vec2 d = p1 - p2;\n    float angle_radians = atan(d.y, d.x);\n    // 将弧度转换为角度（0到360度之间）\n    float angle_degrees = degrees(angle_radians);\n    // 确保角度在0到360度之间\n    if (angle_degrees < 0.0) {\n        angle_degrees += 360.0;\n    }\n    return angle_degrees;\n}\n\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5f * iResolution.xy) / iResolution.y;\n    vec2 fw = fwidth(uv);\n    \n    float radius = 0.3;\n    float padding = 12.0;\n    float dist = length(uv);\n    float speed = 10.0;\n    \n    float col = 0.0;\n    if (abs(dist - radius) < fw.x) {\n        // for pixel here I could use fragCoord.xy, but on textures you don't have it\n        // using fwidth is a tricky way to operate in screenspace sizes on all surfaces\n        // of course it's an approximation, but it's a pretty good one, here, uncomment this \n        // line to try fragCoord, it gives almost the same result:\n        //vec2 pixel = fragCoord.xy;\n        vec2 pixel = uv / fw;\n        float angle = calculateAngle(vec2(0.0, 0.0), pixel);\n        float m = mod(angle + speed*mod(iTime, 360.0), float(padding)) / float(padding);\n        float dash = step(0.5, m);\n        col = mix(1.0, 0.0, dash);\n    }\n    \n\tfragColor = vec4(col, col, col, 1.0);\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5f * iResolution.xy) / iResolution.y;\n    vec2 fw = fwidth(uv);\n    \n    float radius = 0.3;\n    float padding = 12.0;\n    float dist = length(uv);\n    float speed = 10.0;\n\n    float d = smoothstep(2./iResolution.y, 0., abs(dist - radius) - fw.x);\n\n    vec2 pixel = uv / fw;\n    float angle = calculateAngle(vec2(0.0, 0.0), pixel);\n    float m = mod(angle + speed*mod(iTime, 360.0), float(padding)) / float(padding);\n    float dash = step(0.5, m);\n        \n    vec3 col = mix(vec3(0), vec3(1,0,0), dash * d);\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}