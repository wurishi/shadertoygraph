{"ver":"0.1","info":{"id":"tlffzH","date":"1596034457","viewed":143,"name":"hmm","username":"CoolerZ","description":"Trying out the band limited cosine from https://www.shadertoy.com/view/WtScDt","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["sound","audio","palette","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Mt2Gzt","filepath":"https://soundcloud.com/redphantom2/ektrix","previewfilepath":"https://soundcloud.com/redphantom2/ektrix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Trying out the band limited cosine from https://www.shadertoy.com/view/WtScDt\n#define CRAZINESS 1\n\nconst float PI = radians(180.);\nconst float PI2 = 2.*PI; // radians(360) might be 0 instead of 2*PI.\n\n#define Z(X) (.5+.5*(X))\n\n/*\nvec3 get_color(float t)\n{\n    const float F = PI2;\n    const float A = .5;\n    vec3 col = vec3(1,0,0)*Z(cos(F*t)) + vec3(0,1,0)*Z(cos(2.*F*t)) + vec3(0,0,1)*Z(cos(4.*F*t));\n    return col;\n}\n*/\n\n/*\nvec3 get_color(float t)\n{\n    const float F = PI2;\n    const float A = .5;\n    vec3 col = vec3(1,0,0)*Z(cos(F*t)) + vec3(0,1,0)*Z(cos(F*t-PI2/3.)) + vec3(0,0,1)*Z(cos(F*t-2.*PI2/3.));\n    return col;\n}\n*/\n\n// box-filted cos(x)\nfloat fcos(float x)\n{\n    float w = fwidth(x);\n\t#if 1\n    return cos(x) * sin(0.5*w)/(0.5*w);       // exact\n\t#else\n    return cos(x) * smoothstep(6.2832,0.0,w); // approx\n\t#endif    \n}\n\n// pick raw cosine, or band-limited cosine\nbool mode = false;\nfloat mcos(float x){return mode ? cos(x) : fcos(x);}\n\nvec3 get_color(float t)\n{\n    const float F = PI2;\n    const float A = .5;\n    vec3 col = vec3(1,0,0)*Z(mcos(F*t)) + vec3(0,1,0)*Z(mcos(F*t-PI2/3.)) + vec3(0,0,1)*Z(mcos(F*t-2.*PI2/3.));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5)/(iResolution.xy-1.);\n    uv = 2.*uv-1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = vec3(uv,0.);\n    //vec2 xy = uv;\n    vec2 xy = 2.*uv/dot(uv,uv);\n    xy.x += 20.*dot(normalize(uv), vec2(cos(iTime),sin(iTime)));\n    xy.x += 20.*dot(normalize(uv), vec2(0,1));\n    #if CRAZINESS\n    //float freq = .5+.5*dot(normalize(uv), vec2(1,0));\n    float freq = (atan(uv.y,uv.x)+PI)/PI2;\n    float amp = texture(iChannel0,vec2(freq,.25)).x;\n    xy *= amp;\n    //xy += cos(length(xy));\n    //xy -= cos(amp*length(xy.x));\n    //xy += cos(4.*amp*length(xy.y));\n    //xy -= cos(8.*amp*length(xy.x));\n    #endif\n    xy += iTime;\n    float threshold = sin(iTime)*iResolution.x/iResolution.y;\n    mode = uv.x < threshold;\n    vec3 col = min(get_color(xy.x),get_color(xy.y));\n    col = mix(col, vec3(0.), 1.-smoothstep(0.,.01, abs(uv.x-threshold)));\n    if(uv.y < -.9)col = get_color(uv.x);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}