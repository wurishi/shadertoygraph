{"ver":"0.1","info":{"id":"3lfXRl","date":"1564845600","viewed":144,"name":"Wyatt's fluid","username":"qat","description":"wyatt\nhttp://wyattflanders.com/","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["wyatt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define LOOKUP(COORD) texture(iChannel0,(COORD)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 guy = texture(iChannel0, fragCoord/iResolution.xy);\n    guy = 0.5 + 0.5 * sin((guy.z + guy.y) * vec4(4.8,1.63,.85,1));\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 a = texture(iChannel0,uv).xy;\n    vec3 c = texture(iChannel1, a).rgb;\n    vec4 color = LOOKUP (fragCoord);\n    color    = 0.5 + 0.5 * sin((color.z +color.y) * vec4(4.8,1.63,.85,1));\n    fragColor = guy;\n}\n  ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\nEnergy.xy = X+Y   :  Ordered Energy\nEnergy.b  = B     :  Disordered Energy (volatile)\nEnergy.w  = W     :  Internal Energy\n*/\n\n#define LOOKUP(COORD) texture(iChannel0,(COORD)/iResolution.xy)\nvec4 Field (vec2 position) {\n    //rule one: Where I was is where I am now minus how fast I was going\n    vec2 velocityGuess = LOOKUP (position).xy;\n    vec2 positionGuess = position - velocityGuess;\n    return LOOKUP (positionGuess);\n}\n\nvoid mainImage( out vec4 Energy, in vec2 Me )\n{\n    Energy = Field(Me);\n    vec4 pX = Field(Me + vec2(1,0));\n    vec4 pY = Field(Me + vec2(0,1));\n    vec4 nX = Field(Me - vec2(1,0));\n    vec4 nY = Field(Me - vec2(0,1));\n    \n    //rule two: Exchange disorder symmetrically in all directions\n    Energy.b = (pX.b + pY.b + nX.b + nY.b)/4.0;\n    \n    \n    //rule three: change in volatile Energy B pushes me in that direction\n    //d/dt X = -d/dx B\n    //d/dt Y = -d/dy B\n    \n    //sum the force from each neighbor\n    vec2 Force;\n    Force.x = nX.b - pX.b;\n    Force.y = nY.b - pY.b;\n    \n    //add the average force from all the neighbors to Ordered Energy\n    Energy.xy += Force/4.0;\n    \n    //rule four\n    //d/dt B = -(d/dx X + d/dy Y)\n    //Add the average convergence to My disordered Energy\n    Energy.b += (nX.x - pX.x + nY.y - pY.y) / 4.0;\n    \n\n    //gravity\n    Energy.y -= Energy.w/300.;\n\t//\n    \n    //Boundary conditions :\n    if(Me.x<10.||Me.y<10.||iResolution.x-Me.x<10.||iResolution.y-Me.y<10.)\n    {\n    \tEnergy.xy *= 0.;\n    }\n    \n    //mass conservation\n    //need to account for internal energy exchange with neighbors \n    //d/dt W = -(d/dx (XW) + d/dy (YW))\n    //Add the average exchange of mass with each neighbor \n    Energy.w += (nX.x*nX.w-pX.x*pX.w+nY.y*nY.w-pY.y*pY.w)/4.;\n    \n    \n    if (iMouse.z > 0. && length(Me-iMouse.xy) < 15.){\n        \n        //\"internal energy\"\n        Energy.w=1.;// = (vec4(1.));\n        \n    }\n    \n\n}","name":"Buffer A","description":"","type":"buffer"}]}