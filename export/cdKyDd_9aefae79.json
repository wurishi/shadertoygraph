{"ver":"0.1","info":{"id":"cdKyDd","date":"1696834192","viewed":268,"name":"fractal furrball","username":"MonterMan","description":"random fractal that looks like some kind of furrball","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["starter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"modeling starter\" by MonterMan. https://shadertoy.com/view/DllBzj\n// 2023-10-08 08:11:02\n\n#define SAMPLE_COUNT 2\n#define T_MAX 100.0\n#define cdot(a, b) clamp(dot((a), (b)), 0.0, 1.0)\n\n#define TWEAK1 (iMouse.x/iResolution.x)\n#define TWEAK2 (iMouse.y/iResolution.y)\n\nfloat sdThing(vec3 p)\n{\n    float t = 5.0*iTime;\n    float r1 = 0.5+0.1*cos(t);\n    float r2 = 0.5+0.1*sin(t);\n    \n    float s = 1.0;\n    for (int i = 0; i < 10; ++i)\n    {\n        p = abs(p);\n        p.xz *= rot2d(r1);\n        p.yz *= rot2d(r2);\n        p.xz -= 1.2*s;\n        s *= 0.5;\n    }\n    \n    return length(p.xy)-0.001;\n}\n\nQuery map(vec3 p)\n{\n    Query query;\n    query.t = T_MAX;\n    query.matId = 0;\n    \n    float d = sdThing(p);\n    \n    update(query, d, 2);\n    return query;\n}\n\nfloat calcShadow(vec3 ro, vec3 rd, float k)\n{\n    float res = 1.0;\n    float t = 0.0;\n    for (int i = 0; i < 256 && t < T_MAX; ++i)\n    {\n        vec3 p = ro + t * rd;\n        float dist = map(p).t;\n        if (dist < 0.0001)\n        {\n            return 0.0;\n        }\n        t += dist;\n        res = min(res, k*dist/t);\n    }\n    return res;\n}\n\nfloat calcAO(vec3 p, vec3 n, float stepSize)\n{\n    float res = 0.0;\n    float amp = 0.5;\n    for (int i = 0; i < 5; ++i)\n    {\n        float t = stepSize*float(i+1);\n        vec3 sampleP = p + t * n;\n        float dist = map(sampleP).t;\n        res += amp * (dist / t);\n        amp /= 2.0;\n        stepSize *= 2.0;\n    }\n    return res;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(0, 0.0001);\n    return normalize(vec3(map(p+e.yxx).t - map(p-e.yxx).t,\n                          map(p+e.xyx).t - map(p-e.xyx).t,\n                          map(p+e.xxy).t - map(p-e.xxy).t));\n}\n\nvec3 render(vec2 uv)\n{\n    vec3 at = vec3(0, 0, 0);\n    vec3 ro = vec3(0, 1, -2.5);\n    vec3 cam_z = normalize(at - ro);\n    vec3 cam_x = normalize(cross(vec3(0,1,0),cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + 1.3 * cam_z);\n\n    int matId = -1;\n    float t = 0.0;\n    for (int i = 0; i < 256 && t < T_MAX; ++i)\n    {\n        vec3 p = ro + t * rd;\n        Query query = map(p);\n        if (query.t < 0.001)\n        {\n            matId = query.matId;\n            break;\n        }\n        t += query.t;\n    }\n\n    vec3 skyAvgCol = vec3(0.5,0.6,0.7);\n    \n    vec3 col = vec3(0);\n    \n    // calc sky gradient\n    vec3 skyCol;\n    {\n        float h = max(0.0, rd.y);\n        h -= 0.09;\n        skyCol = mix(skyAvgCol, vec3(0.75, 0.78, 0.8), exp(-5.0*h));\n    }\n    \n    col = skyCol;\n    if (t < T_MAX)\n    {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n        float ao = calcAO(p, n, 0.1);\n        \n        vec3 lightCol = vec3(0.95, 0.8, 0.6);\n        vec3 l = normalize(vec3(0.5, 0.4, -0.3));\n        \n        vec3 albedo = vec3(0.9);\n        if (matId == 1)\n        {\n            albedo = vec3(0.9);\n        }\n        else if (matId == 2)\n        {\n            albedo = vec3(0.9, 0.4, 0.3);\n        }\n        \n        // direct light\n        col = albedo * lightCol * cdot(n, l) * calcShadow(p+0.001*n, l, 10.0);\n        // sky ambient light\n        col += 0.05 * albedo * skyAvgCol * (0.5 + 0.5 * n.y) * ao;\n        // bounced light\n        col += 0.08 * albedo * lightCol * (0.5 - 0.5 * n.y) * ao;\n        \n        col = mix(col, skyCol, 1.0-exp(-0.008*t));\n        //col = vec3(ao);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    vec2 pixelSize = vec2(2.0*aspectRatio,2.0) / iResolution.xy;\n    \n    vec3 col = vec3(0);\n    for (int sampleI = 0; sampleI < SAMPLE_COUNT; ++sampleI)\n    {\n        vec2 jitter = hammersley(sampleI, SAMPLE_COUNT) - 0.5;\n        col += render(uv + jitter * pixelSize);\n    }\n    col /= float(SAMPLE_COUNT);\n\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nfloat radicalInverse(int x, float base)\n{\n    int baseI = int(base);\n    float result = 0.0;\n    float b = 1.0 / base;\n    while (x > 0)\n    {\n        result += float(x % baseI) * b;\n        x /= baseI;\n        b /= base;\n    }\n    return result;\n}\n\nvec2 halton23(int index)\n{\n    return vec2(radicalInverse(index, 2.0), radicalInverse(index, 3.0));\n}\n\nvec2 hammersley(int index, int N)\n{\n    return vec2(float(index)/float(N), radicalInverse(index, 2.0));\n}\n\nmat2 rot2d(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        c, -s,\n        s, c);\n}\n\nfloat bilat(float x)\n{\n    return 2.0 * x - 1.0;\n}\n\n\nfloat noise2(vec2 p)\n{\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    \n    float a = hash12(ip+vec2(0,0));\n    float b = hash12(ip+vec2(1,0));\n    float c = hash12(ip+vec2(0,1));\n    float d = hash12(ip+vec2(1,1));\n    \n    vec2 t = smoothstep(vec2(0), vec2(1), fp);\n    return mix(mix(a, b, t.x),\n               mix(c, d, t.x),\n               t.y);\n}\n\nfloat fbm2(vec2 p)\n{\n    // origin is always black, offset it a little to look more natural\n    p += vec2(31.2, 72.1);\n    \n    float res = 0.0;\n    \n    float amp = 0.5;\n    float freq = 1.0;\n    for (int i = 0; i < 6; ++i)\n    {\n        res += amp * noise2(p*freq);\n        p *= rot2d(0.3*float(i));\n        freq *= 2.0;\n        amp *= 0.5;\n    }\n    \n    return res;\n}\n\nfloat voronoiEdge(vec2 p, float randomness)\n{\n    vec2 ip = floor(p);\n    vec2 a, b;\n    float aDist = 10e30;\n    float bDist = 10e31;\n    for (int dy = -1; dy <= 1; ++dy)\n    {\n        for (int dx = -1; dx <= 1; ++dx)\n        {\n            vec2 gridId = ip + vec2(dx, dy);\n            vec2 gridP = gridId + mix(vec2(0.5), hash22(gridId), vec2(randomness));\n            float currDist = length(gridP - p);\n            if (currDist < aDist)\n            {\n                bDist = aDist;\n                b = a;\n                aDist = currDist;\n                a = gridP;\n            }\n            else if (currDist < bDist)\n            {\n                bDist = currDist;\n                b = gridP;\n            }\n        }\n    }\n    \n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    float t = dot(ap, ab) / dot(ab, ab);\n    return smoothstep(0.0, 0.03, abs(t-0.5));\n}\n\n//\n//\n// modeling essentials\n\n\nstruct Query\n{\n    float t;\n    int matId;\n};\n\n\nvoid update(inout Query query, float t, int matId)\n{\n    if (t < query.t)\n    {\n        query.t = t;\n        query.matId = matId;\n    }\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdSegment(vec3 p, float h, float r)\n{\n    p.y = max(0.0, abs(p.y) - 0.5*h);\n    return length(p) - r;\n}\n\nfloat sdSegment2(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    float t = clamp(dot(ap, ab) / dot(ab, ab), 0.0, 1.0);\n    return length((a + t*ab) - p) - r;\n}\n\nfloat udBox2(vec2 p, vec2 dim)\n{\n    p = abs(p);\n    return length(max(vec2(0.0), p-0.5*dim));\n}\n\nfloat udBox(vec3 p, vec3 dim)\n{\n    vec3 q = abs(p) - 0.5*dim;\n    return length(max(q, 0.0));\n}\n\nfloat sdBox2(vec2 p, vec2 dim)\n{\n    vec2 q = abs(p) - 0.5*dim;\n    return length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);\n}\n\nfloat sdBox(vec3 p, vec3 dim)\n{\n    vec3 q = abs(p) - 0.5*dim;\n    return length(max(q, 0.0)) + min(max(max(q.x, q.y), q.z), 0.0);\n}\n\nfloat sdCylinder(vec3 p, float h, float r)\n{\n    return sdBox2(vec2(length(p.xz), p.y), vec2(r, h));\n}\n\nfloat opRepeatLinear(float x, float period, out float outId)\n{\n    outId = floor((x+0.5*period) / period);\n    return mod(x+0.5*period, period)-0.5*period;\n}\n\nvec2 opRepeatLinear2(vec2 x, vec2 period, out vec2 outId)\n{\n    outId = floor((x+0.5*period) / period);\n    return mod(x+0.5*period, period)-0.5*period;\n}\n\n// basically mod(), but limited to hcount on each direction\nfloat modLim(float x, float period, float hcount)\n{\n    float id = floor(x/period);\n    if (id > 0.0) id = min(id, hcount);\n    if (id < 0.0) id = max(id, -hcount);\n    return x - id*period;\n}\n\nfloat opRepeatLimLinear(float x, float period, int count)\n{\n    float hcount = float(count/2);\n    return modLim(x+0.5*period, period, hcount)-0.5*period;\n}\n\nvec2 opRepeatPolar(vec2 p, float periodRadians, out float outId)\n{\n    float radius = length(p);\n    float theta = atan(p.y, p.x);\n    \n    theta = opRepeatLinear(theta, periodRadians, outId);\n    return radius * vec2(cos(theta), sin(theta));\n}\n\nfloat smin(float a, float b, float k)\n{\n    float term = max(0.0, k - abs(a - b));\n    return min(a, b) - 0.25/k*term*term;\n}\n\nfloat smax(float a, float b, float k)\n{\n    float term = max(0.0, k - abs(a - b));\n    return max(a, b) + 0.25/k*term*term;\n}","name":"Common","description":"","type":"common"}]}