{"ver":"0.1","info":{"id":"MlKcWy","date":"1537678482","viewed":232,"name":"supershape 3d","username":"MonterMan","description":"super\n\nreference: http://paulbourke.net/geometry/supershape/#rendering","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["supershape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1415926\n\nfloat supershape_r(float phi, float n1, float n2, float n3, float a, float b, float m)\n{\n    float sqrt_term1 = pow(abs(1.0 / a * cos(m / 4.0 * phi)), n2);\n    float sqrt_term2 = pow(abs(1.0 / b * sin(m / 4.0 * phi)), n3);\n    float radius = pow(sqrt_term1 + sqrt_term2, -1.0 / n1);\n    \n    return radius;\n}\n\nfloat r1(float phi)\n{\n    return supershape_r(phi, 0.2, 1.7, 1.7, 1.0, 1.0, 10.0);\n}\n\nfloat r2(float phi)\n{\n     return supershape_r(phi, 0.2, 1.7, 1.7, 1.0, 1.0, 10.0);\n}\n\nfloat scene(in vec3 p)\n{\n    float longitude = atan(p.y, p.x) - pi;\n    float latitude = asin(p.z / length(p));\n    \n    latitude += iTime;\n    \n    vec3 closest_p = vec3(0);\n    closest_p.x = r1(longitude)*cos(longitude)*r2(latitude)*cos(latitude);\n    closest_p.y = r1(longitude)*sin(longitude)*r2(latitude)*cos(latitude);\n    closest_p.z = r2(latitude)*sin(latitude);\n    \n    return 0.1 * (length(p) - length(closest_p));\n}\n\nvec3 scene_n(in vec3 p)\n{\n    vec2 e = vec2(0, 0.01);\n    return normalize(vec3(scene(p + e.yxx), scene(p + e.xyx), scene(p + e.xxy)) - scene(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float time = 0.3*iTime;\n    vec3 at = vec3(0, 0, 0);\n    vec3 ro = 2.5*vec3(cos(time), 0, sin(time));\n    vec3 cam_z = normalize(at - ro);\n    vec3 cam_x = normalize(cross(vec3(0,1,0), cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + 2.0 * cam_z);\n    \n    int matid = -1;\n    float t = 0.01;\n    float t_max = 20.0;\n    for (int i = 0; i < 512; ++i)\n    {\n        if (t > t_max) break;\n        \n        float d = scene(ro + t*rd);\n        if (d < 0.0001)\n        {\n            matid = 0;\n            break;\n        }\n        t += d;\n    }\n    \n    vec3 col = texture(iChannel0, rd).rgb;\n\tif (matid != -1)\n    {\n        vec3 v = -rd;\n        vec3 n = scene_n(ro + t*rd);\n        vec3 r = reflect(rd, n);\n        vec3 F0 = vec3(1.0, 0.734, 0.344);\n        vec3 fresnel = F0 + (vec3(1.0) - F0) * pow(1.0 - max(0.0, dot(v,n)), 5.0);\n        col = fresnel * texture(iChannel0, r).rgb;\n    }\n    \n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}