{"ver":"0.1","info":{"id":"XtsfRs","date":"1512973373","viewed":909,"name":"InfinityParticles","username":"nmacholl","description":"An infinity symbol made using two particle trails.","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["beginner","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nInfinity graph using particles. Bezier curves might be more performant?\nBonus is that it is easy to change the shape.\n*/\n\nvec2 dotCoordinates (float radius, vec2 offset, float t)\n{\n\tvec2 pos;\n    pos.x = offset.x + radius*cos(t);\n    pos.y = offset.y + radius*sin(t)*cos(t);\n    return pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(0, 0, 0, 1.0); // Initialize Black.\n    \n    int tailLength = 250; // Number of tail particles.\n    float particleSize = 0.025; // Radius of the particles.\n    \n    for (int h = tailLength; h > 0; h--)\n    {\n        vec2 rightDot = dotCoordinates(0.45, vec2(0.5, 0.5), iTime - (0.02 * float(h)));\n        vec2 leftDot = dotCoordinates(-0.45, vec2(0.5, 0.5), iTime - (0.02 * float(h))); \n        float d = distance(leftDot, uv);\n        if (d < particleSize)\n        {\n            fragColor = vec4(uv.x, uv.y, 0.8 + 0.2*sin(iTime), 1.0) - float(h)/float(tailLength);   \n        }\n        d = distance(rightDot, uv);\n        if (d < particleSize)\n        {\n            fragColor = vec4(uv.x, uv.y, 0.8 + 0.2*sin(iTime), 1.0) - float(h)/float(tailLength);   \n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}