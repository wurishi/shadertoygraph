{"ver":"0.1","info":{"id":"7sc3Ws","date":"1630861653","viewed":298,"name":"Swarm of Brushes","username":"pali6","description":"A swarm of brushes trying to replicate a picture.\nError in the reproduction is computed per pixel and blurred, brushes steer based on the gradient of this blurred error.\nbuf A = blurred error\nbuf B = painted image\nbuf C = brush data\nbuf D = original image","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["particles","art","swarm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / RES;\n    fragColor = abs(texture(iChannel0, uv));\n    \n    // uncomment to see brushes more clearly as red dots\n    /*\n    vec4 col = texture(iChannel0, uv);\n    for(int i = 1; i <= N; i++)\n    {\n        vec2 bPos = texture(iChannel1, vec2(i, 0) / RES).xy;\n        if(length((uv - bPos) * RES) < BRUSH_SIZE)\n        {\n            col = vec4(1,0,0,1);\n        }\n    }\n    \n    fragColor = col;\n    */\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DIST 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / RES;\n    if(iFrame <= 30)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    float a = texture(iChannel0, uv).x;\n    float error = length(texture(iChannel1, uv) - texture(iChannel2, uv));\n    float p = 0.9;\n    a = a * p + error * (1. - p);\n    float nei = 0.;\n    float s = 0.;\n    for(int dx = -DIST; dx <= DIST; dx++)\n    {    \n        for(int dy = -DIST; dy <= DIST; dy++)\n        {\n            nei += 1. / (length(vec2(dx, dy)) + 1.) * texture(iChannel0, (fragCoord + vec2(dx, dy)) / RES).x;\n            s += 1. / (length(vec2(dx, dy)) + 1.);\n        }\n    }\n    float p2 = 0.005;\n    a = p2 * a + (1. - p2) * (nei / s);\n    fragColor = vec4(a);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float rand(vec2 co)\n{\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 S = vec2(iDate.w + iDate.y, iDate.w + iDate.z);\n    vec2 uv = fragCoord / RES;\n    if(iFrame <= 30)\n    {\n        if(fragCoord.x <= float(N) + 0.1 && fragCoord.y <= 1.1)\n        {\n            fragColor = vec4(rand(fragCoord + S), rand(fragCoord + vec2(0, 1) + S), 0, 0);\n        }\n        else if(fragCoord.x <= float(N) + 0.1 && fragCoord.y <= 2.1)\n        {\n            fragColor = vec4(rand(fragCoord + S) * 2. - 1., rand(fragCoord + vec2(0, 1) + S) * 2. - 1., 0, 0);\n            fragColor.xy = normalize(fragColor.xy);\n        }\n        else if(fragCoord.x <= float(N) + 0.1 && fragCoord.y <= 3.1)\n        {\n            fragColor = vec4(\n                rand(fragCoord + S),\n                rand(fragCoord + vec2(0, 1) + S),\n                rand(fragCoord + vec2(0, 2) + S),\n                0\n            );\n        }\n        else\n            fragColor = vec4(0);\n        return;\n    }\n    if(fragCoord.x > float(N))\n        return;\n    vec2 pos = texture(iChannel0, vec2(fragCoord.x, 1) / RES).xy;\n    vec2 vel = texture(iChannel0, vec2(fragCoord.x, 2) / RES).xy;\n    vec3 col = texture(iChannel0, vec2(fragCoord.x, 3) / RES).rgb;\n    if(fragCoord.y <= 1.1)\n    {\n        pos += vel * SPEED;\n        pos.x = clamp(pos.x, 0., 1.);\n        pos.y = clamp(pos.y, 0., 1.);\n        fragColor = vec4(pos, 0, 0);\n    }\n    else if(fragCoord.y <= 2.1)\n    {\n        if(pos.x >= 1.)\n            vel.x -= 0.5;\n        if(pos.x <= 0.)\n            vel.x += 0.5;\n        if(pos.y >= 1.)\n            vel.y -= 0.5;\n        if(pos.y <= 0.)\n            vel.y += 0.5;\n        float d = 1.;\n        vec2 gr = vec2(\n            texture(iChannel1, pos + vec2(d, 0) / RES).x - texture(iChannel1, pos - vec2(d, 0) / RES).x,\n            texture(iChannel1, pos + vec2(0, d) / RES).x - texture(iChannel1, pos - vec2(0, d) / RES).x\n        );\n        gr = normalize(gr);\n        vel = vel * (1. - TURNING) + gr * TURNING;\n        vel = normalize(vel);\n        fragColor = vec4(vel, 0, 0);\n    }\n    else if(fragCoord.y <= 3.1)\n    {\n        col = col * (1. - COLOR_CHANGING) + texture(iChannel2, pos).rgb * COLOR_CHANGING;\n        fragColor = vec4(col, 1);\n    }\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// this is where the drawing process happens\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / RES;\n    if(iFrame <= 30)\n    {\n        fragColor = vec4(0,0,0,1);\n        return;\n    }\n    vec4 col = texture(iChannel0, uv);\n    for(int i = 1; i <= N; i++)\n    {\n        vec2 bPos = texture(iChannel1, vec2(i, 0) / RES).xy;\n        vec3 bCol = texture(iChannel1, vec2(i, 2.9) / RES).rgb;\n        if(length((uv - bPos) * RES)  < BRUSH_SIZE)\n        {\n            float mul = 0.02;\n            vec4 target = vec4(bCol, 1);\n            col = (col + target * mul) / (1. + mul); \n        }\n    }\n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define N 30\n#define BRUSH_SIZE (1. + 19. * exp(-iTime / 200.))\n#define SPEED (0.001 + 0.004 * exp(-iTime / 200.))\n#define TURNING (0.07 + (1. - exp(-iTime / 200.)) * 0.08)\n#define COLOR_CHANGING (0.02 + (1. - exp(-iTime / 200.)) * 0.08)\n\n#define RES iResolution.xy","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// buffer D is just for convenience and contains the image being reproduced\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / RES;\n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer D","description":"","type":"buffer"}]}