{"ver":"0.1","info":{"id":"DtyGzV","date":"1684479602","viewed":56,"name":"woody noise","username":"Necromurlok","description":"woody noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","wood"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat random2D (in vec2 st) {\n    return fract(sin(dot(st.yx, vec2(72.9898,78.233))) * 43758.5453123);\n}\n\nfloat random3D (in vec3 st) {\n    return fract(sin(dot(st.xyz, vec3(72.9898,78.233, 75.2523))) * 43758.5453123);\n}\n\n\n// Value noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise2D(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    // Cubic Hermite Curve.  Same as SmoothStep()\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    // Quintic interpolation curve\n//    vec2 u = smoothstep(0.0, 1.0, f);// * f * f * (f * (f * 6. - 15.) + 10.);\n    \n    float v0 = random2D(i);\n    float v1 = random2D(i + vec2(1.0, 0.0));\n    float v2 = random2D(i + vec2(0.0, 1.0));\n    float v3 = random2D(i + vec2(1.0, 1.0));\n    \n    float x0 = mix(v0, v1, u.x);\n    float x1 = mix(v2, v3, u.x);\n    \n    return mix(x0, x1, u.y);\n}\n\nfloat noise3D(vec3 st)\n{\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n    // Cubic Hermite Curve.  Same as SmoothStep()\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    // Quintic interpolation curve\n//    vec3 u = f * f * f * (f * (f * 6. - 15.) + 10.);\n    \n    float v0 = random3D(i);\n    float v1 = random3D(i + vec3(1.0, 0.0, 0.0));\n    float v2 = random3D(i + vec3(0.0, 1.0, 0.0));\n    float v3 = random3D(i + vec3(1.0, 1.0, 0.0));\n    \n    float v4 = random3D(i + vec3(0.0, 0.0, 1.0));\n    float v5 = random3D(i + vec3(1.0, 0.0, 1.0));\n    float v6 = random3D(i + vec3(0.0, 1.0, 1.0));\n    float v7 = random3D(i + vec3(1.0, 1.0, 1.0));\n\n    float x0 = mix(v0, v1, u.x);\n    float x1 = mix(v2, v3, u.x);\n    float x2 = mix(v4, v5, u.x);\n    float x3 = mix(v6, v7, u.x);\n    \n    float y0 = mix(x0, x1, u.y);\n    float y1 = mix(x2, x3, u.y);\n    \n    return mix(y0, y1, u.z);\n    \n}\n\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat lines(in vec2 pos, float b){\n    float scale = 5.0 + (1.0 + sin(iTime * 0.25) * 2.5);\n    pos *= scale;\n    return smoothstep(0.0, 0.5 + b * 0.5, abs((sin(pos.x * 3.1415) + b * 2.0)) * 0.5);\n//    return smoothstep(0.0, 0.5 + b * 0.5, pos.x * pos.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = (fragCoord / iResolution.xy);\n\n//    st.y *= iResolution.y / iResolution.x;\n\n    vec2 pos2D = st * vec2(20.0, 20.0);\n    float basicNoise2D = /*random2D(pos2D);*/ noise2D(pos2D);\n    \n    vec3 pos3D = vec3(pos2D, iTime * 1.0);\n    float basicNoise3D = noise3D(pos3D); //random2D(pos2D);\n    // Add noise\n    pos2D = rotate2d( basicNoise3D ) * pos2D;\n\n    // Draw lines\n    float pattern = lines(pos2D, .5) * 0.2 + basicNoise3D;\n    // Output to screen\n    fragColor = vec4(vec3(pattern), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}