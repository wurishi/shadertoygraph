{"ver":"0.1","info":{"id":"lfByWc","date":"1723291800","viewed":31,"name":"2024-august-01","username":"xlat","description":"puzzle","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["my"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DESKTOP_x\n#ifdef  DESKTOP_\n    #define FC        gl_FragColor\n    #define iChannel0 textureA\n    #define texture   texture2D\n\n    uniform sampler2D textureA;\n    uniform float     iTime;\n    uniform vec2      iResolution;\n#endif\n\n/// template\n///----------------------------------------------------------------------------|\n/// Той-02\n///----------------------------------------------------------------------------:\nconst vec3  RED    = vec3(0.7, 0. , 0. );\nconst vec3  GREEN  = vec3(0.7, 0.7, 0.0);\nconst vec3  BLUE   = vec3(0.0, 0.0, 0.4);\nconst vec3  WHITE  = vec3(0.9, 0.9, 0.9);\nconst vec3  BLACK  = vec3(0.0, 0.2, 0.1);\nconst vec3  SHOVEL = vec3(0.2, 0.5, 0.3);\n\n///----------------------|\n/// Базовые значения.    |\n///----------------------:\nconst float SZCELL = 25.0         ; /// Ширина сетки.\nconst float dim    =  2.0 * SZCELL; /// Расстояние между парой.\n\n\nfloat r_now_ext    =  2.5 * SZCELL; /// Внешний    радиус трека.\nfloat r_now_intro;                  /// Внутренний радиус трека.\nfloat dd         ;                  /// Смещение трека от центра доски.\n\n\n    ///------------------:\n    float foot_now =  6.0;\n    float foot_act =  4.0;\n    ///------------------.\n\nfloat foot_y;\n\nvec2  emptiness  ; /// Прямоугольная пустотелость внутри доски.\nvec2  shovel     ; /// Прямоугольный движетель-лопата.\n\nfloat s_mover    ; /// Расстояние хода лопаты.\n\nfloat s_mover_x = 0.0;\n\nvoid calc()\n{\n  //r_now_ext   = ...;\n    r_now_intro = r_now_ext - SZCELL;\n\n    dd          = r_now_ext + dim / 2.0;\n    ///--------------------------------.\n\n    foot_y      = SZCELL * foot_now;\n\n    emptiness.x = SZCELL * 5.0 + dim * 2.0;\n    emptiness.y = SZCELL * foot_act;\n\n    shovel.x    = SZCELL * 2.0 + dim * 2.0;\n    shovel.y    = emptiness.y;\n\n    s_mover     = SZCELL + dim;\n}\n\n///----------------------------------------------------------------------------:\nbool iscells(in vec2 p) { return mod(p.x, SZCELL) < 1.0 || mod(p.y, SZCELL) < 1.0; }\nbool isaxes (in vec2 p) { return     p.x         == 0.0 ||     p.y         == 0.0; }\n\nbool isshovel_center(in vec2 p)\n{   float  x = abs(p.x - s_mover_x);\n    return x < SZCELL / 2.0 && abs(p.y) < shovel.y / 2.0;\n}\n\nbool isshovel(in vec2 p)\n{   float  x = abs(p.x - s_mover_x);\n    return x < shovel.x / 2.0 && abs(p.y) < shovel.y / 2.0 && x > SZCELL / 2.0;\n}\n\nbool isemptiness(in vec2 p)\n{   return abs(p.x) < emptiness.x / 2.0 && abs(p.y) < emptiness.y / 2.0;\n}\n\nbool isfoots(in vec2 p, in float d)\n{\n    vec2   P = vec2(abs(p.x + d), abs(p.y));\n    return P.y < foot_y / 2.0 && P.x < r_now_ext && P.x > r_now_intro;\n}\n\nbool istrack_half(in vec2 p, in float r1, in float r2, in float d)\n{\n    float x = p.x + d;\n    float y = abs(p.y) - foot_y / 2.0;\n\n    float R1 = r1 * r1;\n    float R2 = r2 * r2;\n    float S  = x * x + y * y;\n\n    return S < R1 && S > R2 && y > 0.0;\n}\n\nbool istrack2(in vec2 p, in float r1, in float r2, in float d)\n{\n    return isfoots(p, dd) || isfoots(p, -dd) ||\n\n           istrack_half(p, r_now_ext, r_now_intro,  dd) ||\n           istrack_half(p, r_now_ext, r_now_intro, -dd);\n}\n\n///----------------------------------------------------------------------------:\nvoid mainImage(out vec4 FC, in vec2 fragCoord)\n{\n    calc();\n\n    vec2 p    = fragCoord - iResolution.xy / 2.0;\n    vec2 uv   = fragCoord / iResolution.xy;\n\n    vec4 TXTR_COLOR = texture(iChannel0, uv);\n\n    s_mover_x = (s_mover / 2.0) * sin(iTime / 1.0);\n\n    vec2 t    = vec2(fragCoord.y, fragCoord.x - s_mover_x) / iResolution.xy;\n    vec4 F    = texture(iChannel0, t);\n\n         if(isaxes  (   p                         )) FC = vec4(WHITE , 1.0);\n    else if(iscells (   p                         )) FC = vec4(GREEN , 1.0);\n    else if(isshovel_center(p                     )) FC = vec4(BLUE  , 1.0);\n    else if(isshovel(   p                         )) FC = F + vec4(0.2, 0.2, 0.2, 0.0);\n    else if(isemptiness(p                         )) FC = vec4(BLACK , 1.0);\n    else if(istrack2(p, r_now_ext, r_now_intro, dd)) FC = vec4(BLUE  , 1.0);\n    else FC = TXTR_COLOR;\n}\n\n#ifdef DESKTOP_\n    void main()\n    {   vec2 fragCoord = iResolution.xy * gl_TexCoord[0].xy;\n\n        mainImage(gl_FragColor, fragCoord);\n    }\n#endif\n","name":"Image","description":"","type":"image"}]}