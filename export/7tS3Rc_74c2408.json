{"ver":"0.1","info":{"id":"7tS3Rc","date":"1624409363","viewed":70,"name":"Diffraction math test","username":"meteotrix","description":"I'm trying to figure out why wikipedia and a couple other science papers say it's hard to compute the term 'r' in the fresnel diffraction equations.\nDid everyone just copy that one paragraph from Introduction To Fourier Optics 1968, and never questioned?","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","diffraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float aperture_value(float x, float y)\n{\n    //return (distance(vec2(0.5,0.5), vec2(x,y)) < 0.16) ?  1.0 : 0.0;\n    \n    float dot_center_to_uv = dot(normalize(vec2(x,y) - vec2(0.5)), vec2(1,0));\n    return (0.5+sin(acos(dot_center_to_uv)*12.68*10.0)*0.5) \n                * ((distance(vec2(0.5,0.5), vec2(x,y)) < 0.3) ?  1.0 : 0.0)\n                * ((distance(vec2(0.5,0.5), vec2(x,y)) > 0.2) ?  1.0 : 0.0);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(uv.xyy);    \n    \n#define x_reso 80.0\n#define y_reso 45.0\n\n    //vec2 U = vec2(0.0, 0.0); //accumulator variable, complex-valued\n    float U = 0.0; //intensity, scalar cheat\n    \n    float k = (2.0*3.14159265359) / 0.000000575 ; //2pi over lambda\n    float d = 0.4; //distance from aperture to sensor\n    float lambda = 0.000000575; //wavelength\n    float r; //distance to point being integrated\n    \n    for (float y = 0.0; y < 1.0; y += 1.0/y_reso)\n    {\n        for (float x = 0.0; x < 1.0; x += 1.0/x_reso)\n        {\n            r = sqrt(pow(uv.x - x,2.0) + pow(uv.y - y,2.0) + d*d);\n            //vec2 complex_exponential = vec2(cos(r),sin(r)); \n            float complex_exponential = cos(r*k); //fake\n            U += pow(aperture_value(x, y),1.0) * k * complex_exponential / (r*r);\n        }\n    }\n    U *= d/lambda;\n\n    //fragColor = vec4(U.x, U.y, 0,1.0);\n    fragColor = vec4(U,U,U, 1.0);\n    \n    //fragColor = vec4(aperture_value(uv.x,uv.y), 0, 0,1.0);\n}","name":"Image","description":"","type":"image"}]}