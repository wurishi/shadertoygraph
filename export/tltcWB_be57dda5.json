{"ver":"0.1","info":{"id":"tltcWB","date":"1610041377","viewed":61,"name":"Introduction to shading","username":"Draedrus","description":"simple scene","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","simple","phong","blinn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RES iResolution\n#define LIGHT_ON\n#define DIFFUSE_TERM_ON\n#define SPECULAR_ON\n#define SHADOWS_ON\nfloat is(vec3 ro, vec3 rd, vec3 sc, float sr, out float tmin, out float tmax)\n{\n    vec3 Z = ro-sc;\n    float B = 2.0 * dot(rd, Z);\n  \n    float C = Z.x*Z.x+Z.y*Z.y+Z.z*Z.z-sr*sr;\n    float D = B*B - 4.0*C;\n    float d = -1.0;\n    if(D>=0.0) {\n        if(C==0.0) {\n            tmin = -B/2.0;\n            tmax = -1.;\n            d = 0.0;\n        }else{\n            tmin = (-B-sqrt(D))/2.0;\n            tmax = (-B+sqrt(D))/2.0;\n            d = 1.0;\n        }\n    }\n    return d;\n}\n\nvoid build(vec3 ro, vec3 rd, vec3 pt, vec3 N, vec3 ic, inout vec4 s, inout vec3 oc)\n{\n    float _d = dot(rd, N);\n    float d = _d!=0.?(dot(pt-ro, N)/_d):100.; d = d<0.?1000.:d;\n    if(d>0. && d<s.x)\n    {\n        s = vec4(d, N);\n        oc = ic;\n    }\n}\n\nvoid scene(vec3 ro, vec3 rd, inout vec4 s, inout vec3 oc)\n{\n    s = vec4(1000.f, vec3(0., 1., 0.));\n    build(ro, rd, vec3(0.), vec3(0., 1., 0.), vec3(1., 1., 0.), s, oc);\n    build(ro, rd, vec3(2., 0., 0.), vec3(-1., 0., 0.), vec3(1., 0., 0.), s, oc);\n    build(ro, rd, vec3(-2., 0., 3.), normalize(vec3(0.)-vec3(-2, 0., 3.)), vec3(0.5, 0.5, 1.), s, oc);\n    float tmin = 100., tmax = -100.;\n    float sp = is(ro, rd, vec3(-0.2, .5, 0.), 1., tmin, tmax);\n    if(sp>-1. && s.x>tmin && tmin>0. && tmin>0.)\n    {\n        s = vec4(tmin, normalize((ro+rd*tmin)-vec3(-0.2, .5, 0.)));\n        oc = vec3(0., 1., 0.);\n    }\n}\n\nfloat shadows(vec3 ro, vec3 Lp)\n{\n    float tmin = 0., tmax = 0.;\n    vec4 s = vec4(1000., 0., 0., 0.);\n    vec3 oc = vec3(0.);\n    vec3 d = normalize(Lp-ro);\n    scene(ro, d, s, oc);\n    float ds = max(0., dot(d, normalize(Lp-(ro+d*s.x))));\n    return (1.-ds)+ds*exp(-1.8*.5*max(0., 2.-s.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*RES.xy)/RES.y;\n\n    // setup\n    vec3 ro = vec3(0., 1., -4.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    vec3 tgt = vec3(0.);\n    vec3 lw = vec3(2., 0., 0.);\n    vec3 up = vec3(0., 1., 0.);\n    vec3 fwd = normalize(tgt-ro);\n    vec3 left = normalize(cross(fwd, up));\n    up = normalize(cross(left, fwd));\n    \n    rd = mat3(left, up, fwd)*rd;\n    \n    vec3 Lp = vec3(2.0*sin(iTime), 0.7, 2.0*cos(iTime))+vec3(-0.5, 0., 0.);\n    vec3 N = vec3(0., 1., 0.);\n    vec4 s = vec4(1000.f, N);\n    vec3 c = vec3(0.);\n    scene(ro, rd, s, c);\n    \n    vec3 p = ro+rd*s.x;\n    vec3 L = normalize(p-Lp);\n    vec3 H = normalize(L+rd);\n    float Ld = length(Lp-p);\n\n    vec3 col = vec3(0.);\n    // https://github.com/stackgl/glsl-specular-cook-torrance/blob/master/index.glsl\n    float NoV = dot(-rd, s.yzw);\n    float NoL = dot(L, s.yzw);\n    float HoN = max(0., dot(H, s.yzw));\n    float HoV = max(0., dot(H, rd));\n    float HoL = max(0., dot(H, L));\n    float F = 0.02+0.98*pow(1.-max(0., NoV), 5.);\n    float R = 0.6;\n    float D = 1./max(0.001, ((NoV+sqrt((NoV-R*NoV) * NoV + R))*(NoL+sqrt((NoL-R*NoL) * NoL + R))));\n    float G = clamp(min((2.*HoN*NoV)/HoV, (2.*HoN*NoL)/HoL), 0.001, 1.);\n    \n    col =\n    #if defined(LIGHT_ON)\n    (\n    c\n    #if defined(DIFFUSE_TERM_ON)\n    *max(0., NoV)/Ld\n    #endif\n    #if defined(SPECULAR_ON)\n    +D*F*G/max(0.01, 3.14*NoV*NoL)\n    #endif\n    )\n    #if defined(SHADOWS_ON)\n    *max(.0, shadows(p+s.yzw*0.01, Lp))\n    #endif\n    #else\n    vec3(1.);\n    #endif\n    ;\n    // Output to screen\n    col = col / (1.+col);\n    fragColor = vec4(pow(col*col*(3.-2.*col), vec3(0.7 / 2.2)),1.0);\n    //fragColor.rgb = vec3(1./(NoL+sqrt((NoL-R*NoL) * NoL + R)));\n    //fragColor.rgb = vec3(HoV-HoL);\n    //fragColor.rgb = L;\n}","name":"Image","description":"","type":"image"}]}