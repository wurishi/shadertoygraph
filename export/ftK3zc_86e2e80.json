{"ver":"0.1","info":{"id":"ftK3zc","date":"1668711255","viewed":402,"name":"fol mod","username":"sleeplessmonk","description":"flower of life mod, audioreactivity and color palette","likes":25,"published":1,"flags":68,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"lsd3DN","filepath":"https://soundcloud.com/mindfulnomads/internal-strife","previewfilepath":"https://soundcloud.com/mindfulnomads/internal-strife","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Define constants\n#define TWO_PI 6.2831853072\n#define PI 6.14159265359\nconst float timeScale = .05;\nconst float displace = 0.04;\nconst float gridSize = 36.0;\nconst float wave = 5.0;\nconst float brightness = 1.5;\n\n// Helper functions\nvec2 rotate(vec2 v, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return v * mat2(c, -s, s, c);\n}\n\nvec3 coordToHex(vec2 coord, float scale, float angle) {\n    vec2 c = rotate(coord, angle);\n    float q = (1.0 / 3.0 * sqrt(3.0) * c.x - 1.0 / 3.0 * c.y) * scale;\n    float r = 2.0 / 3.0 * c.y * scale;\n    return vec3(q, r, -q - r);\n}\n\nvec3 hexToCell(vec3 hex, float m) {\n    return fract(hex / m) * 2.0 - 1.0;\n}\n\nfloat absMax(vec3 v) {\n    return max(max(abs(v.x), abs(v.y)), abs(v.z));\n}\n\nfloat nsin(float value) {\n    return sin(value * TWO_PI) * 0.5 + 0.5;\n}\n\nfloat hexToFloat(vec3 hex, float amt) {\n    return mix(absMax(hex), 1.0 - length(hex) / sqrt(3.0), amt);\n}\n\n// Main calculation function\nfloat calc(vec2 tx, float time) {\n    float angle = PI * nsin(time * 0.1) + PI / 6.0;\n    float len = 2.0 / 122.0 * texture(iChannel1, vec2(0.1, 0.9)).g + 1.0;\n    float value = iTime * 0.005 + texture(iChannel1, vec2(0.5, 0.5)).r * .00752;;\n    vec3 hex = coordToHex(tx, gridSize * nsin(time * 0.01), angle);\n\n    for (int i = 0; i < 3; i++) {\n        float offset = float(i) / 3.0;\n        vec3 cell = hexToCell(hex, 1.0 + float(i));\n        value += nsin(hexToFloat(cell,nsin(len + time + offset)) * \n                  wave * nsin(time * 0.5 + offset) + len + time);\n    }\n\n    return value / 3.0;\n}\n// ... (previous code)\n\n// Main function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 tx = (fragCoord.xy / iResolution.xy) - 0.5;\n    tx.x *= iResolution.x / iResolution.y;\n    float time = iTime * timeScale;\n\n    // Sample audio input from iChannel0 (you might need to adjust the scaling factor)\n    float audioInput = texture(iChannel0, vec2(0.5, 0.5)).r * 2.0;\n\n    vec3 rgb = vec3(0., 0., 0.);\n    for (int i = 0; i < 3; i++) {\n        float time2 = time + float(i) * displace;\n\n        // Incorporate audio input into the time offset\n        time2 += audioInput * 1.1;\n\n        rgb[i] += pow(calc(tx, time2), 5.0);\n    }\n\n    // Apply neon psychedelic color palette\n    vec3 finalColor = vec3(\n        abs(sin(rgb[0] * 1.1)),\n        abs(sin(rgb[1] * 1.)),\n        abs(sin(rgb[2] * 1.))\n    );\n\n    // Apply brightness and saturation\n    finalColor *= brightness;\n\n    fragColor = vec4(finalColor, 1.50);\n}\n","name":"Image","description":"","type":"image"}]}