{"ver":"0.1","info":{"id":"fdt3Wf","date":"1632157743","viewed":252,"name":"SSAO Homework","username":"Xia","description":"references : https://www.gamedev.net/tutorials/programming/graphics/a-simple-and-practical-approach-to-ssao-r2753/\n                  ","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["ssao"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INTENSITY 1.1\n#define SCALE 2.5\n#define BIAS 0.05\n#define SAMPLE_RAD 0.03\n#define DIS_CONSTRAINT 1.2\n\nvec3 getPosition(vec2 uv) \n{\n     return texture(iChannel0, uv).xyz;\n}\n\nvec3 getNormal(vec2 uv)\n{\n     return texture(iChannel1, uv).xyz;\n}\n\nvec2 getRandom(vec2 uv)\n{\n     return normalize(texture(iChannel2, uv).xy * 2.0 - 1.0);\n}\n\nfloat doAmbientOcclusion(vec2 uv, vec2 offset, vec3 p, vec3 n)\n{\n     vec3 diff = getPosition(offset + uv) - p;\n     vec3 v = normalize(diff);\n     float d = length(v) * SCALE;\n     float ao = max(0.0, dot(n, v) - BIAS) * (1.0 / (1.0 + d)) * INTENSITY;\n     float l = length(diff);\n     ao *= smoothstep(DIS_CONSTRAINT, DIS_CONSTRAINT * 0.5, l);\n     return ao;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 dire[4] = vec2[](vec2(1, 0), vec2(-1, 0), vec2(0, 1), vec2(0,-1));\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 p = getPosition(uv);\n    vec3 n = getNormal(uv);\n    vec2 rand = getRandom(uv);\n    \n    float ssao = 0.0;\n    int iterations = 4;\n    for(int i = 0; i < iterations; i++)\n    {\n        vec2 coord1 = reflect(dire[i], rand) * SAMPLE_RAD;\n        vec2 coord2 = vec2(coord1.x * cos(radians(45.0)) - coord1.y * sin(radians(45.0)), \n                           coord1.x * cos(radians(45.0)) + coord1.y * sin(radians(45.0)));\n                           \n        ssao += doAmbientOcclusion(uv, coord1 * 0.25, p, n);\n        ssao += doAmbientOcclusion(uv, coord2 * 0.5, p, n);\n        ssao += doAmbientOcclusion(uv, coord1 * 0.75, p, n);\n        ssao += doAmbientOcclusion(uv, coord2, p, n);\n    }\n    ssao = ssao / (float(iterations) * 4.0);\n    ssao = 1.0 - ssao * INTENSITY;\n    \n    fragColor = vec4(vec3(ssao), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int MAX_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\nconst float FOV = 45.0;\n\nfloat sdPlane(vec3 p, vec4 n) \n{\n     return dot(p,n.xyz) + n.w;\n}\n\nfloat sdTorus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nmat2 Rot(float a)\n{\n   //a = radians(a);\n   return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat sdScene(vec3 p)\n{\n    vec3 torus = p-vec3(0.0, 0.2, 0.0);\n    torus.xy *= Rot(0.2 * iTime);\n    return min(sdPlane(p, vec4(0.0, 1.0, 0.0, 0.0)), sdTorus(torus, vec2(2.1, 0.4)));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float start, float end)\n{  \n   float depth = start;\n   \n   for(int i = 0; i < MAX_STEPS; i++)\n   {\n        vec3 p = ro + rd * depth;\n        float dist = sdScene(p);\n        depth += dist;\n        \n        if(depth > MAX_DIST || dist < EPSILON) break;\n   }\n   return depth;\n}\n\nvec3 RayDir(float fieldOfView, vec2 size, vec2 fragCoord) \n{\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 GetWorldNormal(vec3 p)\n{\n   float d = sdScene(p);\n   \n   vec3 n = d - vec3(\n      sdScene(p - vec3(EPSILON, 0, 0)),\n      sdScene(p - vec3(0, EPSILON, 0)),\n      sdScene(p - vec3(0, 0, EPSILON)));\n      \n   return normalize(n);\n}\n\nmat4 viewMatrix(vec3 ro, vec3 lookat, vec3 up) \n{\n    vec3 f = normalize(lookat - ro);\n    vec3 r = normalize(cross(f, up));\n    vec3 u = cross(r, f);\n    return mat4(\n        vec4(r.x, u.x, -f.x,0.0),\n        vec4(r.y, u.y, -f.y,0.0),\n        vec4(r.z, u.z, -f.z,0.0),\n        vec4(-dot(r,ro), -dot(u,ro),-dot(f,ro), 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 viewrd = RayDir(45.0, iResolution.xy, fragCoord);\n    vec3 ro = vec3(8.0, 10.0, 6.0);\n    \n    mat4 WorldToview = viewMatrix(ro, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    mat4 ViewToWorld = inverse(WorldToview);\n    \n    vec3 worldrd = (ViewToWorld * vec4(viewrd, 0.0)).xyz;\n    \n    float dist = RayMarch(ro, worldrd, MIN_DIST, MAX_DIST);\n    if (dist > MAX_DIST - EPSILON) \n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    vec3 p = ro + dist * worldrd;\n    p = (WorldToview * vec4(p, 0.0)).xyz;\n    \n    fragColor = vec4(p, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const int MAX_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\nconst float FOV = 45.0;\n\nfloat sdPlane(vec3 p, vec4 n) \n{\n     return dot(p,n.xyz) + n.w;\n}\n\nfloat sdTorus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nmat2 Rot(float a)\n{\n   //a = radians(a);\n   return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat sdScene(vec3 p)\n{\n    vec3 torus = p-vec3(0.0, 0.2, 0.0);\n    torus.xy *= Rot(0.2 * iTime);\n    return min(sdPlane(p, vec4(0.0, 1.0, 0.0, 0.0)), sdTorus(torus, vec2(2.1, 0.4)));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float start, float end)\n{  \n   float depth = start;\n   \n   for(int i = 0; i < MAX_STEPS; i++)\n   {\n        vec3 p = ro + rd * depth;\n        float dist = sdScene(p);\n        depth += dist;\n        \n        if(depth > MAX_DIST || dist < EPSILON) break;\n   }\n   return depth;\n}\n\nvec3 RayDir(float fieldOfView, vec2 size, vec2 fragCoord) \n{\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 GetWorldNormal(vec3 p)\n{\n   float d = sdScene(p);\n   \n   vec3 n = d - vec3(\n      sdScene(p - vec3(EPSILON, 0, 0)),\n      sdScene(p - vec3(0, EPSILON, 0)),\n      sdScene(p - vec3(0, 0, EPSILON)));\n      \n   return normalize(n);\n}\n\nmat4 viewMatrix(vec3 ro, vec3 lookat, vec3 up) \n{\n    vec3 f = normalize(lookat - ro);\n    vec3 r = normalize(cross(f, up));\n    vec3 u = cross(r, f);\n    return mat4(\n        vec4(r.x, u.x, -f.x,0.0),\n        vec4(r.y, u.y, -f.y,0.0),\n        vec4(r.z, u.z, -f.z,0.0),\n        vec4(-dot(r,ro), -dot(u,ro),-dot(f,ro), 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 viewrd = RayDir(45.0, iResolution.xy, fragCoord);\n    vec3 ro = vec3(8.0, 10.0, 6.0);\n    \n    mat4 WorldToview = viewMatrix(ro, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    mat4 ViewToWorld = inverse(WorldToview);\n    \n    vec3 worldrd = (ViewToWorld * vec4(viewrd, 0.0)).xyz;\n    \n    float dist = RayMarch(ro, worldrd, MIN_DIST, MAX_DIST);\n    if (dist > MAX_DIST - EPSILON) \n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    vec3 p = ro + dist * worldrd;\n    vec3 n = GetWorldNormal(p);\n    n = (WorldToview * vec4(n, 0.0)).xyz;\n    \n    fragColor = vec4(n, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}