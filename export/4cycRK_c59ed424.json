{"ver":"0.1","info":{"id":"4cycRK","date":"1732056672","viewed":807,"name":"Approach Vector","username":"Kali","description":"Shadertoy version of my Surreal post","likes":51,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","scifi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float max_rad=.01;\nconst float it=100.;\n\n#define time iTime\n\n#define tx iChannel0\n\nmat2 rot(float a){\n\tfloat s=sin(a);\n    float c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat hash(vec2 p)\n{\n    p*=1342.;\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\t\n\tvec2 uv = fragCoord/iResolution.xy;\n\tmat2 spin=rot(2.39996);\n    vec2 p=vec2(0.,1.);\n    vec3 res=vec3(0.);\n    float ti=mod(time*.5,10.);\n    float rad_step=max_rad/it+hash(uv)*.0003;\n\tfloat rad=0.;\n    vec4 col=texture(tx,uv);\n    for (float i=0.;i<it; i++) {\n        rad+=rad_step;\n        p*=spin;\n        vec4 col=texture(tx,uv+p*rad);\n        res+=smoothstep(.5,1.,max(col.r,max(col.g,col.b)))*col.rgb;\n    }; \n    res/=it;\n    vec4 ff = vec4(col.rgb*.5+res*.7,1.0)*1.4; \n    ff.rgb=mix(vec3(length(ff.rgb*.5)),ff.rgb,.5);\n    ff.rgb=max(vec3(.13),ff.rgb);\n    ff.rgb*=vec3(1.1,1.,.9);\n    fragColor = ff;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define resolution iResolution.xy\n#define vTexCoord (gl_FragCoord.xy/iResolution.xy)\n#define PI 3.1416\n#define time min(2.,float(iFrame)/60.)\n\n#define PI 3.1416\n\nfloat det=.001;\n\n#define colship vec3(1.,.5,.3)\n#define colsat vec3(.6,.7,.8)*.6\n#define colfue vec3(2.,.7,.3)\n#define colpla vec3(1.5,.8,.5)\n#define coluces vec3(1.,1.,0.)\n#define coluces2 vec3(0.,0.7,2.)\n\nfloat hash(vec2 p)\n{\n    p*=1342.;\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise1d(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(vec2(i, 0.0)), hash(vec2(i + 1.0, 0.0)), u);\n}\n\n\nfloat kset(vec3 p)\n{\n    for(int i=0; i<12; i++) {\n        p=abs(p)/dot(p,p)-.8;\n    }\n    return clamp(0.,1.,length(p));\n}\n\nfloat rnd(float p)\n{\n    p*=1234.;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    return fract(2.*p*p);\n}\n\n\nmat2 rot(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\n\n\nvec3 circuits1(vec2 p) {\n    float c1=1000.;\n    float c2=1000.;\n    for(int i=0; i<6; i++) {\n        p=abs(p)/clamp(abs(p.x*p.y),0.3,2.)-1.;\n        c1=min(c1,abs(p.x));\n        if (i<3) c2=min(c2,abs(p.y));\n    };\n    float m=step(c1,.05);\n    return vec3(c1,c2,m);\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat ot;\nfloat sat(vec3 pos) {\n    float sc=.7;\n    pos*=sc;\n    ot=1000.;\n    pos.xz*=rot(1.8);\n    pos.xy*=rot(.1);\n    vec4 c=vec4(.0,-0.48,-.5,2.);\n    vec4 p = vec4(pos, 0.0);\n    vec4 dp = vec4(1.0, 0.0,0.0,0.0);\n    float d = 1000.;\n    for (int i = 0; i < 10; i++) {\n        dp = 2.0 * vec4(p.x * dp.x - dot(p.yzw, dp.yzw), p.x * dp.yzw + dp.x * p.yzw + cross(p.yzw, dp.yzw));\n        p = vec4(p.x * p.x - dot(p.yzw, p.yzw), vec3(2.0 * p.x * p.yzw)) + c;\n        float p2 = dot(p, p);\n        float r = length(p.xy)+.3;\n        float f = 0.5 * r * log(r) / length(dp);\n        d = min(d, f);\n        ot=min(ot,abs(p.y)+step(.4,fract(p.z*.5)));\n        if (p2 > 100.) break;\n    }\n    d-=circuits1(pos.xz).x*.03;\n    return d/sc;\n}\n\nfloat li;\nfloat fu;\nfloat arm;\nvec3 cxy, cyz, cxz;\nfloat spaceship(vec3 p) {\n    cxy=circuits1(p.xy*2.+vec2(0.,-.5));\n    cyz=circuits1(p.yz*.3+vec2(-.5,.0));\n    cxz=circuits1(p.xz);\n    vec3 p2=p;\n    p2.x=abs(p2.x)-2.5;\n    vec3 p3=p;\n    p3.x=abs(p3.x)-1.8;\n    p2.xz*=1.-smoothstep(.45,.5,abs(p.y))*.1;\n    p2.x+=cyz.y*.0;\n    p2.z-=abs(p.x)*.5;\n    p2.y+=abs(p.x)*.1;\n    arm=box(p2,vec3(.8,.7,5.));\n    arm=min(arm,box(p2+vec3(0.,0.,4.),vec3(2.,.1,1.)));\n    arm-=cxy.x*.1+cyz.y*.3+cxz.x*.1;\n    p2.x+=.5;\n    vec3 ce=circuits1(vec2(atan(p2.y,p2.x),length(p2)));\n    p3=abs(p3)-.1;\n    p3=abs(p3)-.1;\n    float cyl=max(abs(p.z)-4.7,abs(length(p3.xy*p3.xy*3.)-.02));\n    fu=max(.015,max(p2.z+5.,abs(length(p3.xy)-.1)));\n    arm=max(arm,-cyl+.2);\n    p.x=abs(p.x)-.8;\n    p.z+=4.4;\n    li=box(p,vec3(.3,.2,.5))*2.;\n    float d=min(arm,cyl);\n    d=min(d,fu);\n    d=min(d,li);\n    return d*.5;\n}\n\nvec3 ps;\nfloat ci;\nfloat pla;\nvec3 plpos;\nfloat de(vec3 p) {\n    plpos=p+vec3(6.,5.,20.);\n    pla=length(plpos)-6.;\n    float sc=2.7;\n    vec3 p2=p*sc;\n    p2.y-=7.;  \n    p2.xz*=rot(3.7);\n    p2.yz*=rot(.6);\n    p2.xy*=rot(-.2);\n    float sp=spaceship(p2)/sc;\n    ps=p2;\n    p.z-=2.5;\n    p.y-=0.5;\n    ci=sat(p);\n    float d=ci;\n    d=min(sp,d);\n    d=min(d,pla);\n    return d*.5;\n}\n\nvec3 normal2(vec3 p)\n{\n    vec2 e=vec2(0.,det);\n    return normalize(vec3(de(p+e.yxx),de(p+e.xyx),de(p+e.xxy))-de(p));\n}\n\nvec3 normal(vec3 pos) {\n    vec2 e=vec2(0.,det);\n    vec3 ev[4];\n    ev[0]=e.yxx;\n    ev[1]=e.xyx;\n    ev[2]=e.xxy;\n    ev[3]=e.xxx-.000001;\n    vec3 nn = vec3(0);\n    for(int i = 0; i<4; i++){\n        nn += sign(ev[i])*de(pos + ev[i]);\n        if(nn.x<-1e8) break;\n    } \n    return normalize(nn);\n}\n\nfloat shadow(vec3 ro, vec3 rd) {\n    float res = 1.0;\n    float t = 0.01;\n    for (int i = 0; i < 150; i++) {\n        float h = de(ro + rd * t);\n        if (h>10000.) break;\n        res = min(res, 50.0 * h / t);\n        t += clamp(h, 0.02, 0.05);\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nvec3 march(vec3 from, vec3 dir) \n{\n    float td=0.,d=0.,maxdist=100.,g=0.,g2=0.;\n    vec3 p=from,col=vec3(.0);\n    float h=hash(dir.xy*100.+mod(time,10.))-.5;\n    float ref=0.;\n    for (int i=0; i<300; i++)\n    {\n        p+=dir*d*(1.+h*.2);\n        d=de(p);\n        if ((d<det) || td>maxdist) break;\n        td+=d;\n        g+=.07/(.1+fu*20.)*smoothstep(1.,0.,ps.z);\n        g+=.2/(.1+li*10.)*smoothstep(1.,0.,ps.z);\n        g2+=.1/(.1+pla*.1);\n        g2+=.03/(.1+arm);\n    }\n    vec3 pp=ps;\n    if (d<.01) \n    {  \n        float rust=kset(fract(p*.2));\n        col+=colship*step(arm,.1)*(.5+rust*.5);\n        col+=(colsat+step(ot,.3)*.2-rust*.15)*step(ci,.02);\n        float ar=arm;\n        vec3 xz=cxz;\n        float pl=pla;\n        vec3 n=normal(p);\n        vec2 id=floor(p.xy/25.);\n        col+=step(length(fract(p*25.+n*10.+hash(id)*.3)-.5),.2)*step(ci,.02)*coluces2*2.;\n        vec3 plp=plpos;\n        float ll=li;\n        vec3 ldir=normalize(vec3(-1.,2.,1.));\n        float sh=shadow(p, ldir);\n        float dif=smoothstep(.5,.6,dot(n,ldir))*sh;\n        float cam=max(0.3,dot(-dir,n))*.6;\n        col=(dif+cam)*col;\n        vec3 id2=floor(pp/5.);\n        p=fract(pp*5.+.1);\n        col+=step(length(p-.5),.15)*step(ar,.1)*step(.5,abs(n.x))*step(-4.,pp.z)*coluces;\n        if (pl<.1) {\n            plp.xz*=rot(plp.y*.5);\n            col=max(0.3,dot(ldir,n))*colpla*1.3;\n            p=fract(plp*.3);\n            float k=kset(dir);\n            for (int i=0; i<8; i++) {\n                p=abs(p)/dot(p,p)-.9;\n            }\n            col-=length(p)*.3+k*.3;\n        }\n        if (ll<.01) col=colfue;\n    }\n    else\n    {\n        p=fract(dir*10.);\n        for (int i=0; i<8; i++) {\n            p=abs(p)/dot(p,p)-.8;\n        }\n        col+=smoothstep(.1,0.,dot(p,p-.1))*exp(-2.*abs(dir.x-dir.y))*2.*(.2+smoothstep(-.5,.0,dir.y));\n        col+=smoothstep(.1,0.,dot(p,p))*exp(-50.*abs(length(dir.xy+vec2(-1.2,0.)+.1*noise1d(dir.y*10.))-.5)-.1)*20.*abs(normalize(1.+dir.xzy))*vec3(1.,1.,0.);\n        col+=exp(-8.*abs(length(dir.xy+vec2(-1.2,0.)+.1*noise1d(dir.y*10.))-.5)-.1)*.25;\n        col+=exp(-10.*length(dir.xy+vec2(.5,-0.15)))*colpla;\n        col+=exp(-2.*abs(dir.x-dir.y*.5))*.5;\n    }\n    col+=g*.03*colfue*exp(-.01*length(ps));\n    col+=g2*.0001*colpla*(ps.y);\n    col.rb*=rot(dir.y*.5);\n    return col;\n}\n\nvec2 rand2(vec2 co){\n    return\n    vec2(fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453),\n        fract(cos(dot(co.xy ,vec2(4.898,7.23))) * 23421.631));\n}\n\nvec2 uniformDisc(vec2 co) {\n    vec2 r = rand2(co);\n    return sqrt(r.y)*vec2(cos(r.x*6.28),sin(r.x*6.28));\n}\n\nmat3 lookat(vec3 dir) {\n    dir=normalize(dir);vec3 rt=normalize(cross(dir,vec3(0.,1.,0.)));\n    return mat3(rt,cross(rt,dir),dir);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vTexCoord-.5;\n    uv.x*=resolution.x/resolution.y;\n    uv.y+=.05;\n    vec2 pix=1./resolution.xy;\n    vec3 from=vec3(0.,3.5,5.);\n    from.yz*=rot(0.*3.14+.07);\n    from.xz*=rot(0.*3.14-.25);\n\n    vec3 target=vec3(0.,2.,0.);\n    float fov=1.1;\n    vec3 camdir=normalize(target-from);\n    mat3 look=lookat(camdir);\n    vec3 dir=look*vec3(0.,0.,fov);\n    vec3 up=look*vec3(0.,1.,0.);\n    vec3 right=look*vec3(1.,0.,0.);\n    float aper=.0;\n    float focalplane=4.;\n    vec2 r=aper*uniformDisc(uv+time);\n    vec2 disc=uniformDisc(uv+time);\n    vec2 jittered=uv+pix*disc;\n    vec3 offset=r.x*right+r.y*up;\n    vec3 raydir=normalize((dir+jittered.x*right+jittered.y*up)*focalplane-offset);\n    vec3 col=march(from+offset,raydir);\n    if (time<2.) {\n        col+=(hash(uv+(time*20.))-.5)*.3;\n        col=mix(texture(iChannel0,vTexCoord).rgb,col,exp(-time*5.));\n    } else{\n        col=texture(iChannel0,vTexCoord).rgb;\n    }\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}