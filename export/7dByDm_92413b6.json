{"ver":"0.1","info":{"id":"7dByDm","date":"1668800890","viewed":172,"name":"Wobbly hex glitched","username":"JennySchub","description":"I know this is very inefficient :) feel free to optimize","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["wobble","hexagon"],"hasliked":0,"parentid":"fdSyDh","parentname":"Wobbly hexes"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec3 colMap(float v) {\n\n\tv=mod(v, PI+1.3)-.8;\t\n    return vec3(\n\t\tsin(sin(v-.6)),\n\t\tsin(sin(v)),\n\t\tsin(sin(v+.6))\n\t);\n\n} \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Output to screen\n    fragColor.xyz = colMap(texture(iChannel0, fragCoord/iResolution.xy).r).xzy;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 realuv = (fragCoord/iResolution.xy - .5)*iResolution.xy/iResolution.xx*2.;\n    \n    float a = .1;\n    float sq3 = sqrt(3.);\n    float aM = 1./cos(PI/3.);\n    vec3 col = vec3(1.);\n    vec2 uv;\n    mat2 rot;\n    float tim = iTime * .1;\n    float sinus, cosinus,angle;\n    float count = (sin(iTime*.3)*.5+.53)*50.;\n    for(float i=0.; i<1.; i+=1./count){\n        angle=sin(i*.4*tim+tim)*PI;\n        sinus=sin(angle);\n        cosinus=cos(angle);\n        rot=mat2(cosinus, -sinus, sinus, cosinus);\n        uv=realuv*rot;\n        a=i;\n        col = vec3(\n            min(col.x, \n                (i+\n                    max(\n                        max(\n                            smoothstep(a,a+1./iResolution.y, abs(uv.y)),\n                            smoothstep(a*aM,a*aM+aM/iResolution.y, abs(uv.y+uv.x*sq3))\n                        ),\n                        smoothstep(a*aM,a*aM+aM/iResolution.y, abs(uv.y-uv.x*sq3))\n                    )\n                )\n            )        \n        );\n    }\n    \n    col = vec3(col.x*(sin(iTime)*.5+1.)*2.+iTime);\n    \n    vec3 blurred = vec3(0.);\n    float bs =25.;\n    for(float x=-bs; x<=bs; x+=bs){\n        for(float y=-bs; y<=bs; y+=bs){\n            blurred+=texture(iChannel0, (fragCoord+vec2(x,y))/iResolution.xy).xyz;\n        }\n    }\n    blurred/=9.;\n    float mx=.95;\n    col = col*(1.+mx)-mx*blurred;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}