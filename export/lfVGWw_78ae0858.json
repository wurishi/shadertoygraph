{"ver":"0.1","info":{"id":"lfVGWw","date":"1712857634","viewed":28,"name":"ihujnaushjnfd8ujhnuajhsf","username":"Thesailor31","description":"asf,;l,pl,.sfasopl,","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["nikita"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdHeart(vec2 uv, float size, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  float xx = x * x;\n  float yy = y * y;\n  float yyy = yy * y;\n  float p = xx + yy - size;\n  float d = p * p * p - xx * yyy;\n\n  return d;\n}\n\n\n\n\nfloat sdfCircle(vec2 uv, float r, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n\n  return length(vec2(x, y)) - r;\n}\n\nfloat sdfSquare(vec2 uv, float size, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  return max(abs(x), abs(y)) - size;\n}\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nfloat sdSphere(vec3 p, float r )\n{\n  vec3 offset = vec3(sin(iTime*2.)*0.2, cos(iTime*2.)*0.6, sin(iTime*1.));\n  return length(p - offset) - r;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdSphere(p, 1.);\n    depth += d;\n    if (d < PRECISION || depth > end) break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(vec3 p) //  функция возвращает направление луча, которое представляет направление, в котором обращена точка на сфере.\n{\n  float e = 0.05; \n  float r = 1.; // радиус сферы\n  return normalize(vec3(\n    sdSphere(vec3(p.x + e, p.y, p.z), r) - sdSphere(vec3(p.x - e, p.y, p.z), r),\n    sdSphere(vec3(p.x, p.y + e, p.z), r) - sdSphere(vec3(p.x, p.y - e, p.z), r),\n    sdSphere(vec3(p.x, p.y, p.z  + e), r) - sdSphere(vec3(p.x, p.y, p.z - e), r)\n  ));\n}\n\n\nvec3 drawScene(vec2 uv) {\n  vec3 col = vec3(1.,1.,1.);\n  float square = sdfSquare(uv, sin(iTime*1.), vec2(sin(iTime*1.)*0.3, iTime*0.001));\n  float circle = sdfCircle(uv, 0.4, vec2(cos(iTime*2.)*0.6, sin(iTime*2.)*0.2));\n  float d = sdHeart (uv, 0.04, vec2(sin(iTime)*0.16,(cos(iTime*1.)*0.16 - cos(iTime*2.)*0.05 - cos(iTime*3.)*0.02 - 0.01*cos(iTime*4.) )));\n  \n  if (d< 0.) col = vec3(1.,0.,0.);\n  else if (circle<0.) col = vec3(0.,0., 1.);\n  else if (square<0.) col= vec3(0.3,0.8,0.2);\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0., 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 5); //  положение камеры\n  vec3 rd = normalize(vec3(uv, -1)); // направление луча\n\n  float d = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // расстояние до сферы\n\n  if (d > MAX_DIST) {\n    col = drawScene(uv);; // луч не попал на сферу\n  } else {\n    vec3 p = ro + rd * d; // точка на сфере, которую мы обнаружили при прохождении луча\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(0,-2 , 1);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    // считаем рассеянное отражение, используя скалярное произведение\n    // нормаль и направление света\n    float dif = clamp(dot(normal, lightDirection), 0.1, 1.);\n\n    \n    col = dif * vec3(1, 0.6, 0.9) + backgroundColor * .3;\n     \n  }\n \n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}