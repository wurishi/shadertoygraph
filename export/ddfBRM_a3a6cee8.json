{"ver":"0.1","info":{"id":"ddfBRM","date":"1688561034","viewed":224,"name":"Stochastic Bilinear filtering","username":"koiava","description":"Implementation of a stochastic bilinear interpolation.\nLeft - Nearest neighbor, middle - Bilkinear, right - stochastic bilinear\nPlease see \"STOCHASTIC TEXTURE FILTERING\" from M. Fajardo et al.\nhttps://arxiv.org/pdf/2305.05810.pdf\n","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["interpolation","bilinear","stochastic","filrtering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= vec2(0.5, 0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= (cos(iTime) + 1.2)*0.23;\n    uv += vec2(0.5, 0.5);\n    \n    vec2 tc = uv*iChannelResolution[0].xy;\n    vec2 fr = fract(tc);\n    \n    int split1 = int(iMouse.x*(iMouse.x/iResolution.x));\n    float mx = iResolution.x-iMouse.x;\n    int split2 = int(iResolution.x - mx*(mx/iResolution.x));\n    \n    vec3 col;\n    if(int(fragCoord.x) == split1 || int(fragCoord.x) == split2) {\n        col = vec3(1.0);\n    } else {\n        if(fragCoord.x < float(split1)) {\n            ivec2 itc = ivec2(floor(tc + vec2(0.5, 0.5)));\n            col = texelFetch(iChannel0, itc + ivec2(0, 0), 0).xyz;\n        } else if(fragCoord.x < float(split2)) {\n            ivec2 itc = ivec2(floor(tc));\n\n            vec3 c0 = texelFetch(iChannel0, itc + ivec2(0, 0), 0).xyz;\n            vec3 c1 = texelFetch(iChannel0, itc + ivec2(1, 0), 0).xyz;\n            vec3 c2 = texelFetch(iChannel0, itc + ivec2(0, 1), 0).xyz;\n            vec3 c3 = texelFetch(iChannel0, itc + ivec2(1, 1), 0).xyz;\n\n            col =  mix(mix(c0, c1, fr.x), mix(c2, c3, fr.x), fr.y);\n        } else {\n            vec2 bn_res = iChannelResolution[1].xy;\n            vec4 bn = texture(iChannel1, mod(fragCoord, bn_res) / bn_res);\n            ivec2 itc = ivec2(floor(tc));\n\n            if(bn.x > fr.x) {\n                if(bn.y > fr.y) {\n                    col = texelFetch(iChannel0, itc + ivec2(0, 0), 0).xyz;\n                } else {\n                    col = texelFetch(iChannel0, itc + ivec2(0, 1), 0).xyz;\n                }\n            } else {\n                if(bn.y > fr.y) {\n                    col = texelFetch(iChannel0, itc + ivec2(1, 0), 0).xyz;\n                } else {\n                    col = texelFetch(iChannel0, itc + ivec2(1, 1), 0).xyz;\n                }\n            }\n        }\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}