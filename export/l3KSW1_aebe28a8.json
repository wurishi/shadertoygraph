{"ver":"0.1","info":{"id":"l3KSW1","date":"1719916454","viewed":99,"name":"Fork Waves Remi ODtian 311","username":"ODtian","description":"simple audio visualizer (also pretty without audio) based upon \"waves\" by bonniem, with added travelling pulse effect, color cycling, and of course, the requested audio sensitivity. Each wave is particularly responsive to a specific range of frequencies.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["waves","sound","wave","music","colors","beginner","audio","visualizer","easy","sounds"],"hasliked":0,"parentid":"4ljGD1","parentname":"Waves Remix"},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// https://www.shadertoy.com/view/4ljGD1\nfloat squared(float value) {\n    return value * value;\n}\n\nfloat getAmp(float frequency) {\n    return texture(iChannel0, vec2(frequency / 512.0, 0)).x;\n}\n\nfloat getWeight(float f) {\n    return (+getAmp(f - 2.0) + getAmp(f - 1.0) + getAmp(f + 2.0) + getAmp(f + 1.0) + getAmp(f)) / 5.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uvTrue = fragCoord.xy / iResolution.xy;\n    vec2 uv = -1.0 + 2.0 * uvTrue;\n\n    float lineIntensity;\n    float glowWidth;\n    vec3 color = vec3(0.0);\n\n    for (float i = 0.0; i < 5.0; i++) {\n        uv.y += (0.2 * sin(uv.x + i / 7.0 - iTime * 0.6));\n        vec2 uv_ = uv;\n        for (int j = 0; j < 3; j++) {\n            uv_.y -= 0.03;\n            float Y = uv_.y + getWeight(squared(i) * 20.0) *\n                (texture(iChannel0, vec2(uvTrue.x, 1)).x - 0.5);\n            lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + iTime, 2.0) - 1.0));\n            lineIntensity = smoothstep(-10.0, 1.0, lineIntensity) - smoothstep(1.0, 2.0, lineIntensity);\n\n            glowWidth = abs(lineIntensity / (150.0 * Y));\n            color[j] += glowWidth * (2.0 + sin(iTime * 0.13));\n            // color[j] += vec3(glowWidth * (2.0 + sin(iTime * 0.13)), glowWidth * (2.0 - sin(iTime * 0.23)), glowWidth * (2.0 - cos(iTime * 0.19)));\n        }\n\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}