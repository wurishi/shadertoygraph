{"ver":"0.1","info":{"id":"wsscDB","date":"1585534776","viewed":481,"name":"unsharp masking filter","username":"horristic","description":"https://en.wikipedia.org/wiki/Unsharp_masking","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["imageanalysis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 kernel;\n\nvec4 _sampleColor(vec2 pos)\n{\n    if(pos.x < 0.0) pos.x *= -1.0;\n    if(pos.y < 0.0) pos.y *= -1.0;\n    if(pos.x > iResolution.x) pos.x -= iResolution.x;\n    if(pos.y > iResolution.y) pos.y -= iResolution.y;\n    vec2 uv = pos/iResolution.xy;\n    return texture(iChannel0, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tkernel[0]=vec3(0,-1,0);\n   \tkernel[1]=vec3(-1,5,-1);\n   \tkernel[2]=vec3(0,-1,0);\n    \n    vec2 sample_position = fragCoord;\n    vec4 col = vec4(0);\n    for(int y = 0; y < 3; y++)\n    {\n        for(int x =0; x < 3; x++)\n        {\n            sample_position.x += float(x-1);\n            sample_position.y += float(y-1);\n            col += _sampleColor( sample_position ) * kernel[y][x];\n        }\n    }\n    \n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}