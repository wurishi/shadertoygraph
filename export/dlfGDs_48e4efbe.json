{"ver":"0.1","info":{"id":"dlfGDs","date":"1684412959","viewed":45,"name":"mandelbrot explo","username":"poipoi34","description":"move around and explore mandelbrot set. Got help from https://www.shadertoy.com/view/ltsyRS\narrow keysto move\nz -> zoom\nspace -> unzoom","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 rect_centered(vec2 p, float size)\n{\n    //takes into account the 800*450 window\n    return vec4(p.x - size*800./1000., p.x + size*800./1000., p.y - size*450./1000., p.y + size*450./1000.);\n}\n\nvec2 getCoord() {\n    return vec2(\n    \ttexelFetch(iChannel0, ivec2(0, 0), 0).r,\n        texelFetch(iChannel0, ivec2(1, 0), 0).r\n    );\n}\n\nfloat getSize() {\n    return texelFetch(iChannel0, ivec2(2, 0), 0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 p = getCoord();\n    \n    vec4 rect = rect_centered(getCoord(),getSize());\n    \n    float x_min = rect.x;\n    float x_max = rect.y;\n    float y_min = rect.z;\n    float y_max = rect.w;\n    \n    float Re_z = x_min + (x_max - x_min) * uv.x;\n    float Im_z = y_min + (y_max - y_min) * uv.y;\n    \n    float Re_c = Re_z;\n    float Im_c = Im_z;\n    \n    float it = 1000.;\n    float i = 0.;\n    \n    while (i < it && Re_z*Re_z + Im_z*Im_z < 4.){\n        float memRe_z = Re_z;\n        Re_z = Re_z*Re_z - Im_z*Im_z + Re_c;\n        Im_z = 2.*memRe_z*Im_z + Im_c;\n        i += 1.;\n    }\n    \n    vec3 col = vec3(0.,0.,0.);\n    \n    if (i == it)\n        col = vec3 (1.,1.,1.);\n    \n    else\n        col = vec3 (i/10.,i/100.,i/1000.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int SPACE = 32;\nconst int Z = 90;\n\nconst float speed = 1.0;\nconst float speedZoom = 0.01;\nconst float min_zoom = 0.01;\n\n//ce buffer mémorise 3 donnés dans 3 pixels en haut à gauche: la position x et y de la caméra, et la taille\n//il modifie également ces donnés en fonction des touches appuyés\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float outData = 0.0;\n\n    switch(int(fragCoord.x)) {\n        case 0:\n            if (iTime < 0.1)\n                outData = -1.5;\n            else\n                outData = texelFetch(iChannel0, ivec2(0), 0).r +\n                    (iTimeDelta * speed * texelFetch(iChannel0, ivec2(2, 0), 0).r) * texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r -\n                    (iTimeDelta * speed * texelFetch(iChannel0, ivec2(2, 0), 0).r) * texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r;\n                break;\n        \n        case 1:\n        \toutData = texelFetch(iChannel0, ivec2(1, 0), 0).r +\n                (iTimeDelta * speed * texelFetch(iChannel0, ivec2(2, 0), 0).r) * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n        \t\t(iTimeDelta * speed * texelFetch(iChannel0, ivec2(2, 0), 0).r) * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n        \tbreak;\n        case 2:\n            if (iTime < 0.1)\n                outData = 3.5;\n            else\n                outData = texelFetch(iChannel0, ivec2(2, 0), 0).r *\n                (1. - texelFetch(iChannel1, ivec2(Z, 0), 0).r * speedZoom)*\n                (1. + texelFetch(iChannel1, ivec2(SPACE, 0), 0).r * speedZoom);\n               \n         \n    }\n    \n    fragColor = vec4(outData, 0.0, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}