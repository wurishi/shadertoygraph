{"ver":"0.1","info":{"id":"cdKSWd","date":"1681805441","viewed":113,"name":"Various Gamma Functions","username":"myth0genesis","description":"Various gamma functions I needed for obtaining p-values in my battery of GPU hash tests.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["gamma","incomplete","complementary","upper","lower"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float thck = 2.00;\nconst float pi = 3.1415927410125732421875;\n\n// Toth's coefficients: https://www.rskey.org/CMS/index.php/the-library/11\nconst float g = 5.65;  // 5.15 + 0.5\nconst float p0 = 2.506628275635;\nconst float p1 = 225.525584619175;\nconst float p2 = -268.295973841305;\nconst float p3 = 80.9030806934622;\nconst float p4 = -5.007578639705;\nconst float p5 = 0.0114684895435;\n\n// Borrowed from Fabrice Neyret here: https://www.shadertoy.com/view/7dXXDN\n// Tried to clean up the asymptotes as much as I could\n// Edit: Just realized it looks terrible on higher-resolution monitors\nfloat plot(float x, float y) {\n    return clamp(1.25 - abs(x - y) / fwidth(1.25 * x - y), 0.0, 1.0);\n}\n\n// Gamma function\n// Taken from here: https://www.shadertoy.com/view/WtlGDN\n// and here: https://www.shadertoy.com/view/3lfGD7\nfloat gamma(float x) {\n    // The comparison operators have been changed to \">=\" to fix undefined behavior at x == 1.0\n    float xx = (x >= 1.0) ? x : (1.0 - x);\n    float sum = p0 + p1 / (xx + 1.0) + p2 / (xx + 2.0) + p3 / (xx + 3.0) + p4 / (xx + 4.0) + p5 / (xx + 5.0);\n    float xh = xx + g;\n    float y = exp(log(sum) + (xx + 0.5) * log(xh) - log(xx) - xh);\n\n    return ((x >= 1.0) ? y : (pi / (y * sin(pi * x))));\n}\n\n// Incomplete upper gamma function\n// Method came from \"Numerical Recipes in FORTRAN 77\"\nfloat icug(float a, float x) {\n    float dif = x - a;\n    return exp(-x) * pow(x, a) *\n        (1.0 / (dif + 1.0 - ((1.0 - a) / (dif + 3.0 - (2.0 * (2.0 - a) / (dif + 5.0 - (3.0 * (3.0 - a) / (dif + 7.0))))))));\n}\n\n// Incomplete lower gamma function\nfloat iclg(float a, float x) {\n    return gamma(a) - icug(a, x);\n}\n\n// Complementary incomplete upper gamma function\nfloat cicug(float a, float x) {\n    return icug(a, x) / gamma(a);\n}\n\n// Complementary incomplete lower gamma function\nfloat ciclg(float a, float x) {\n    return iclg(a, x) / gamma(a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 8.0;\n\n    vec3 col = vec3(0.0);\n    col.r += plot(gamma(uv.x), uv.y);\n    col.g += plot(icug(uv.x, 0.5), uv.y);\n    col.b += plot(iclg(uv.x, 0.5), uv.y);\n    col.rg += plot(cicug(uv.x, 0.5), uv.y);\n    col.gb += plot(ciclg(uv.x, 0.5), uv.y);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}