{"ver":"0.1","info":{"id":"fd3cRB","date":"1653592438","viewed":255,"name":"Nice Pattern Automata","username":"SnoopethDuckDuck","description":"Could be useful for texturing pixel art, or something else :)\n\nPlay around with th and s, you can get other patterns really easily\n\nUsed to generate shapes:\nhttps://www.shadertoy.com/view/7s3cRS","likes":5,"published":3,"flags":48,"usePreview":0,"tags":["feedback","cellularautomata"],"hasliked":0,"parentid":"stjfzy","parentname":"traversal 3b"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n\nvec3 pal(float t, vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float zm = 0.14; \n    vec2 res = floor(iResolution.xy);    \n    vec2 f = mod(floor(32. * iTime) + fragCoord, res);\n    \n    vec3 col = texelFetch( iChannel0, ivec2(zm * f + 0.5 * (1.-zm) * res), 0).rgb;\n    col.b = col.g;\n    col = pal(0.75 + 0.35 * col.g + 0.5 * uv.y, 0.5 * vec3(2,1,3)/3.);\n    \n    fragColor.rgb = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nfloat cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).g;\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    ivec2 px = ivec2(f);\n    int frame = iFrame % 1200;\n    \n    ivec2 g = ivec2(f + vec2(100.,151.) * iTime * 60.) & 1023;\n    float rand = texelFetch(iChannel2, g, 0).r;\n    \n    if (frame == 0 || key_down(KEY_RESET)) {      \n        return;\n    }\n           \n    // Center cell\n    float e = cell(px);\n    \n    // Neighbour cells\n    float b = cell(px - ivec2(0,1));\n    float t = cell(px + ivec2(0,1));\n    float l = cell(px - ivec2(1,0));\n    float r = cell(px + ivec2(1,0));   \n    float bl = cell(px + ivec2(-1,-1));\n    float br = cell(px + ivec2(1, -1));\n    float tl = cell(px + ivec2(-1, 1));\n    float tr = cell(px + ivec2(1,  1));   \n    \n    float sum = b + t + l + r;\n    float diag = bl + br + tl + tr;\n    float dif = abs(b-t) * abs(l-r);\n    \n    sum += diag;\n    \n    //e = clamp(e - 0.001, 0., 1.);    \n    //rand = step(0.9, rand);\n    \n    // > 0 and < 1\n    float th = 0.5; // 0.9\n    \n    // between 0 and 7 ish\n    float s = 3.5;\n    \n    if (e <= 0. && rand >= th && sum <= s)\n        e = (rand - th) / (1.-th);\n    else if (sum >= s || dif >= 0.75) // dif makes corners rounder (maybe)\n        e = 0.;\n        \n    col.g = e;\n}","name":"Buffer A","description":"","type":"buffer"}]}