{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define TPIS 1.0471975512\n\nfloat hash(float seed) { return fract(sin(seed) * 43758.5453); }\nmat2 rot(float th) { return mat2(cos(th), -sin(th), sin(th), cos(th)); }\nfloat angle(vec2 uv) { return mod(atan(uv.y, uv.x)+TWO_PI, TWO_PI); }\n\nfloat line(vec2 r, float dist, float thickness) {\n    float ret = 0.;\n    float a = angle(r);\n    if( a > TWO_PI - TPIS*0.5 || a < TPIS*0.5 ) {\n\t    ret = smoothstep(dist, dist+0.002, r.x)*(1.0-smoothstep(dist+thickness, dist+thickness+0.002, r.x));   \n    }\n\treturn ret;\n}\n\nfloat hexagonRadius = 0.1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5*iResolution.xy) / iResolution.y;\n\n    vec2 uv3 = uv;\n    \n    float t = pow(iTime*0.1 + 10.,1.5) + 0.04*sin(10.*iTime);\n    uv /= dot(uv, vec2(sin(t * 0.34), sin(t * 0.53))) * 0.6 + 1.0; // perpective distorion code stolen from xTibor's shader ^_^\n    uv *= 0.1*sin(iTime*4.13)+1.0;\n    float r = length(uv);\n\tfloat theta = angle(uv) + t;\n    \n    int region = int(6.*theta/TWO_PI); // assign integers 0..5 to each region\n    \n    vec3 color = vec3(0.,0.,0.);\n    \n    // background\n    float col1 = mod(float(region+int(iTime*0.9)),2.0); // 0,1,0,1... alternate\n    color += vec3(col1*0.2+0.2,col1*0.2+0.2,0.); // alternate colors for each region\n    \n    // hexagon\n    vec2 uv2;\n    for(int i=0; i<6; i++) {\n\t    uv2 = rot(float(i)*TPIS + TPIS*0.5 - t)*uv;\n    \tcolor += line(uv2, hexagonRadius, 0.015)*vec3(1.,1.,0.); // draw 6 sides\n        color -= line(uv2, 0., hexagonRadius)*vec3(col1*0.2+0.2,col1*0.2+0.2,0.); // erase the inside of hexagon\n    }\n    \n    // cursor\n    vec2 m = (iMouse.xy - 0.5*iResolution.xy) / iResolution.y;\n    vec2 cursorPosition = 0.16*normalize(m);\n    //color += vec3(1., 1., 0.)*(1.0-smoothstep(0.02, 0.022, distance(uv, cursorPosition)));\n    float triangleSize = 0.02;\n    float triangleDist = 0.14;\n    float aT = angle(m);\n    vec2 uvT = uv; // start with original coordinate system\n    uvT = rot(aT)*uvT; // rotate it to the direction of cursor\n    uvT = uvT - vec2(triangleDist, 0.0); // translate it away from the coordinate center\n\tif(abs(uvT.y)<triangleSize-uvT.x && uvT.x>0.) color = vec3(1.,1.,0.); // draw a triangle: y<abs(side-x)\n    \n    \n    // obstacles\n    float seed2 = floor(t*0.5)+1424.0;\n    float missingSegment = hash(seed2);\n    float dist = mod(2.0 - t, 2.0); // distance of the obstacle from the origin\n    if(hexagonRadius<dist+0.01) {\n        for(int i=0; i<5; i++) {\n            uv2 = rot(float(i+int(missingSegment*6.))*TPIS + TPIS*0.5 - t)*uv;\n            float obs = line(uv2, dist, 0.05);\n            color += obs*vec3(1.,1.,0.);\n            // hit\n            if( obs > 0.5 && distance(uv, 0.17*normalize(m)) < 0.02  ) {\n                color = vec3(1.,0.,0.);\n            }\n        }\n    }\n    \n    color *= smoothstep(1.8, 0.5, length(uv3));\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Md2XWh","date":"1411628386","viewed":712,"name":"Duper Hexagon","username":"vug","description":"A simple imitation of the insanely hard game Super Hexagon http://superhexagon.com/ Press the mouse button and use the mouse to rotate the circle around the hexagon. Try not to hit the obstacles.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","game"],"hasliked":0,"parentid":"","parentname":""}}