{"ver":"0.1","info":{"id":"DtlfDB","date":"1693413709","viewed":28,"name":"SDF messin 1","username":"qwertygnu","description":"just toying with shaders ;)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Adapted from\n// \"ShaderToy Tutorial - Ray Marching Primitives\" by Martijn Steinrucken \n// https://youtu.be/Ff0jJyyiVyw\n\n#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat custom(vec3 p, vec3 a) {\n    vec3 ab = (a+2.)-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-1.;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n\treturn length(max(abs(p)-s, 0.));\n}\n\nfloat sdSphere(vec3 p, vec3 a, float r) {\n    return length(p-a)-r;\n}\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat GetDist(vec3 p) {    \n    float planeDist = p.y;\n    \n    p.xy *= rot(iTime);\n    \n    float sd =  sdSphere(p, vec3(2, 3, 20), 2.);\n    float cd = sdCapsule(p, vec3(3, .5, 6), vec3(3, 2.5, 6), .5); \n    float td = sdTorus(p-vec3(0,3.5,6), vec2(1.5, .5));\n    float bd = dBox(p-vec3(-3.5, 1, 6), vec3(1,.75,1));\n    float cyld = sdCylinder(p, vec3(0, .3, 3), vec3(3, .3, 5), .3);\n    float cust = custom(p, vec3(0, 2, 12));\n    \n    float d = planeDist;\n    d = min(d, sd*(abs(tan(iTime+2.)*4.+6.)+.2));\n    d = min(d, cd*(sin(-iTime+2.)*3.+6.));\n    d = min(d, td*(sin(iTime+2.)*4.+6.));\n    //d = min(d, bd*(sin(iTime+2.)*3.34+5.));\n    d = min(d, cyld*(cos(iTime+2.)*4.+6.));\n    //d = min(d, cust);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS*.5;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 2, 0);\n    vec3 rd = normalize(vec3(uv.x-.15, uv.y-.2, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif,dif*.4,dif*.2);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}