{"ver":"0.1","info":{"id":"7tj3R1","date":"1623380545","viewed":87,"name":"Diff Light w/ Spec Highlights","username":"trigophers","description":"MOVE WITH MOUSE!!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ray","specular","diffuse","madness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define maxDist 10000.\n#define specAmount 0.96\nvec3 center;\nvec3 ray;\nfloat rdist;\nvec3 color;\nvec3 normal;\nint material;\n\nvoid sphere(vec4 posRad, vec3 sColor) {\n    vec3 obj = posRad.xyz - center;\n    vec3 temp = vec3(dot(obj, ray), dot(obj, obj), 0.);\n    if ((temp.x>0.0) && (posRad.w*posRad.w > (temp.y - temp.x*temp.x))) {\n        temp.z = sqrt(posRad.w*posRad.w - (temp.y - temp.x*temp.x));\n        if ((temp.y > posRad.w*posRad.w) && rdist > temp.x - temp.z) {\n            rdist = temp.x - temp.z;\n            normal = normalize(center+ray*rdist-posRad.xyz);\n            color = sColor;\n        }\n    }\n}\n\nvoid nsphere(vec4 posRad, vec3 sColor, int m) {\n    vec3 a = ray; //normalized already\n    vec3 b = posRad.xyz-center;\n    float sc = dot(a, b)/length(a);\n    vec3 v3 = center+ray*sc;\n    if (distance(v3, posRad.xyz) < posRad.w) {\n        float l = sqrt(posRad.w*posRad.w-distance(v3, posRad.xyz)*distance(v3, posRad.xyz));\n        float h = sc-l;\n        float k = sc+l;\n        if (k<rdist && distance(posRad.xyz, center)<posRad.w) {\n            rdist = h;\n            vec3 intersect = center+ray*rdist;\n            normal = normalize(posRad.xyz-intersect);\n            color = sColor;\n            material = m;\n        } else if (h<rdist && h>0.) {\n            rdist = h;\n            vec3 intersect = center+ray*rdist;\n            normal = normalize(intersect-posRad.xyz);\n            color = sColor;\n            material = m;\n        }\n    }\n}\n\nvoid scene() {\n    nsphere(vec4(0, 5, 30, 5), vec3(1, 0, 0), 0);\n    nsphere(vec4(5, 4, 30, 4), vec3(0, 1, 0), 0);\n    nsphere(vec4(0, -100000, 30, 100000), vec3(0.2, 0.5, 0.5), 0);\n    //nsphere(vec4(0, 0, 0, 16), vec3(0.9, 0.8, 0.3), 0);\n}\n\nvec3 raytrace(vec2 uv) {\n    center = vec3(iMouse.x-iResolution.x/2., 5, iMouse.y-iResolution.y/2.);\n    ray = normalize(vec3(uv, 1));\n    rdist = maxDist;\n    scene();\n    if (rdist<maxDist) {\n        vec3 light = vec3(cos(iTime)*10., 30., sin(iTime)*10.+30.);\n        vec3 lightVec = normalize(light-(center+rdist*ray));\n        float saveC = max(dot(lightVec, normal), 0.0)+0.02;\n        vec3 saveOC = color;\n        vec3 specRef = normalize(reflect(ray, normal));\n        \n        center = center+rdist*ray+normal/10.;\n        ray = lightVec;\n        rdist = maxDist;\n        scene();\n        if (rdist<maxDist && rdist<distance(center, light)) {\n            return saveOC*0.02;\n        } else {\n            float spec = dot(specRef, lightVec);\n            if (spec>specAmount) {\n                return saveOC*saveC+max((spec-specAmount)*13.*1.75, 0.0);\n            }\n        }\n        return vec3(saveC*saveOC);\n        \n    } else {\n        return vec3(0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-iResolution.xy/2.)/iResolution.yy;\n    vec3 superSample = vec3(0.);\n    superSample += raytrace(uv+vec2(1./iResolution.x/2., -1./iResolution.x/2.));\n    superSample += raytrace(uv+vec2(-1./iResolution.x/2., -1./iResolution.x/2.));\n    superSample += raytrace(uv+vec2(1./iResolution.x/2., 1./iResolution.x/2.));\n    superSample += raytrace(uv+vec2(-1./iResolution.x/2., 1./iResolution.x/2.));\n    superSample /= 4.;\n    fragColor = vec4(pow(superSample, vec3(0.4545)), 1.0);\n}","name":"Image","description":"","type":"image"}]}