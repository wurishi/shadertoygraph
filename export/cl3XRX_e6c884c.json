{"ver":"0.1","info":{"id":"cl3XRX","date":"1685619732","viewed":7083,"name":"Enter The Matrix [399 chars]","username":"kishimisu","description":"It's all an illusion","likes":122,"published":3,"flags":0,"usePreview":1,"tags":["raymarching","sdf","random","fog","infinite","white","character","world","neon","characters","rabbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Enter The Matrix by @kishimisu (2023) - https://www.shadertoy.com/view/cl3XRX\n   \n   Let me show you how deep the rabbit hole goes...\n   \n   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)\n\n/* 499 => 399 chars with the help of @Xor, @iapafoto, @FabriceNeyret & @coyote */\nvoid mainImage(out vec4 I, vec2 u) {\n\n    float   M    ,           \n            A    , \n            T    = iTime,\n            R    ;\n    for(    I    *= R; R++ < 66.;) { \n    vec4    X    = iResolution.xyzz, \n    \n        p = A * normalize(vec4((u+u-X.xy) * \n                      mat2(cos(A*sin(T*.1)*.3 + vec4(0,33,11,0))), X.y, 0));\n        p.z += T;\n        p.y = abs(abs(p.y) - 1.);\n        \n        X = fract(dot(X=ceil(p*4.), sin(X)) + X);\n        X.g += 4.;\n        M = 4.*pow(smoothstep(1., .5, \n                       texture(iChannel0, (p.xz+ceil(T+X.x))/4.).a), 8.)-5.;\n        \n        A += p.y*.6 - (M+A+A+3.)/67.;\n        \n        I += (X.a + .5) * (X + A) * ( 1.4 - p.y ) / 2e2 / M / M / exp(A*.1);\n    }\n}\n\n/* Original version [499 chars]:\n\n// Random noise from https://www.shadertoy.com/view/4djSRW (simplified)\nvec4 h(vec4 p) {\n    p += dot(fract(p*.1), p.wzxy+33.33);\n    return fract(p*p.zywx);\n}\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2  R = iResolution.xy;   u += u - R; \n    float i, t, e, k = iTime;\n    \n    for (O *= i; max(t, i) < 66.; i++) {\n        \n        vec4 r, p = t * normalize(vec4(u/R.y * mat2(cos(t*sin(k*.1)*.3 + vec4(0,33,11,0))), 1, 0)); \n        \n        p.z += k;\n        p.y = abs(abs(p.y) - 1.);\n        \n        r = h(floor(p*4.));\n        e = .1 * pow(smoothstep(1., .5, texture(iChannel0, (p.xz+floor(k+r.x))/4.).a), 8.);\n        \n        t += (p.y - e - t*.05 + .05)*.6;\n        \n        O += .7 * (r.a*.01 + .005) \n            * (r + t + vec4(0,4,0,0))\n            * smoothstep(1.4, .0, p.y)\n            / pow(5. - e*40., 2.) \n            / exp(t*.1);\n    }\n}*/","name":"Image","description":"","type":"image"}]}