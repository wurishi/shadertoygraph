{"ver":"0.1","info":{"id":"ws2yDt","date":"1587542867","viewed":323,"name":"Packing Floats","username":"MikaJoo","description":"Minimal sample that pack vec3 into one uint (as float) and unpack it.\ninput value must be between [-1;1]","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["uintbitstofloat","floatbitstouint","packingfloats","packunorm2x16","unpackunorm2x16"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FLT_MAX = (1.0f - pow(2.0f, -24.0f)) * pow(2.0f, 128.0f);\nfloat packvec3(in vec3 v) \n{\n\tvec4 x = vec4(v, 1);\n\t//x = clamp(x, -FLT_MAX, FLT_MAX) * 127.0;\n\tx = clamp(x, -1.0, 1.0) * 127.0;\n    uvec4 sig = uvec4(mix(vec4(0), vec4(1), greaterThanEqual(sign(x),vec4(0))));\n    uvec4 mag = uvec4(abs(x));\n    uvec4 r = sig << 7 | mag;\n\tuint ui = r.x << 24 | r.y << 16 | r.z << 8 | r.w;\n\n\t//ui = packSnorm4x8(vec4(v*0.5 + 0.5, 1));\n\treturn uintBitsToFloat(ui);\n}\nvec3 unpackvec3(in float f) \n{\n\tuint ui = floatBitsToUint(f);\n\t//return unpackSnorm4x8(ui).xyz * 2 - 1;\n\n\tuvec4 r = (uvec4(ui) >> uvec4(24, 16, 8, 0)) & uvec4(0xFF);\n    uvec4 sig = r >> 7;\n    uvec4 mag = r & uvec4(0x7F);\n    vec4 fsig = mix(vec4(-1), vec4(1), greaterThanEqual(sig,uvec4(1)));\n    vec4 fmag = vec4(mag) / 127.0;\n\treturn (fsig * fmag).xyz;\n}\n\n\n\n\n\n\n// https://www.shadertoy.com/view/wdlGzS\nfloat uintToMinifloat(uint i){\n    if((i&0xFFu)==0u) return 0.;\n    float mantissa = float(i&7u);\n    float exponent = float((i>>3)&15u);\n    float sgn = float((i>>7)&1u);\n    return (mantissa/8.+1.)*exp2(exponent)*(sgn*2.-1.);\n}\n\nuint MinifloatTouint(float x){\n    float sgn = float(x>0.);\n    x = abs(x);\n    if(x<.5) return 0u;\n    float exponent = floor(log2(x));\n    float mantissa = floor(8.*(x / exp2(exponent) - 1.));\n    if(exponent>=16.){\n        exponent=15.;\n        mantissa=7.;\n    }\n    return uint(sgn)<<7 | uint(exponent) << 3 | uint(mantissa);\n    \n}\n\nvec4 unpackUnorm4x8(uint p){\n    return vec4(uintToMinifloat(p)/32768.,\n                uintToMinifloat(p>>8)/32768.,\n                uintToMinifloat(p>>16)/32768.,\n                uintToMinifloat(p>>24)/32768.);\n}\n\nuint packUnorm4x8(vec4 v){\n    return MinifloatTouint(v.x*32768.) |\n            MinifloatTouint(v.y*32768.)<<8 |\n            MinifloatTouint(v.z*32768.)<<16 |\n            MinifloatTouint(v.w*32768.)<<24;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    float packedColor = packvec3(data.rgb);\n    vec3 unpackedColor = unpackvec3(packedColor);\n    \n    //fragColor.rgb = data.rgb;\n    //fragColor.rgb = unpackedColor;\n    vec3 err1 = abs(data.rgb - unpackedColor) * 100.0f;\n    \n    \n    // gl version\n    // https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/packUnorm.xhtml\n    // https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/unpackUnorm.xhtml\n    // https://www.shadertoy.com/view/wdlGzS\n    uint packedunorm = packUnorm4x8(vec4(data.rgb, 0));\n    vec4 unpackedColor2 = unpackUnorm4x8(packedunorm);\n    \n    //fragColor.rgb = data.rgb;\n    //fragColor.rgb = unpackedColor2.rgb;\n    vec3 err2 = abs(data.rgb - unpackedColor2.rgb) * 100.0f;\n    \n    \n    if(length(err1)>length(err2))\n    \tfragColor.rgb = vec3(length(err1) - length(err2), 0, 0);\n    else\n        fragColor.rgb = vec3(0, length(err1) - length(err2), 0);\n}","name":"Image","description":"","type":"image"}]}