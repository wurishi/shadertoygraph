{"ver":"0.1","info":{"id":"ctlfW2","date":"1693472183","viewed":37,"name":"music visualization 2d_0","username":"bhxj","description":"到此一游，shadertoy分享的第一个shader，很简单。\nfftw数据的用法是从这个牛逼的作品里抄来的: https://www.shadertoy.com/view/wsdXDN","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdc3DM","filepath":"https://soundcloud.com/virtual-riot/virtual-riot-did-i-mention-i","previewfilepath":"https://soundcloud.com/virtual-riot/virtual-riot-did-i-mention-i","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float freq_step = 1.0 / (64.0 * 8.0);\nconst float frame0 = 0.05;\nconst float frame1 = 0.15;\nfloat texture_fftw(float uvx)\n{\n    float freq = 0.0;\n    for (float offset = 0.0; offset < freq_step * 8.5; offset += freq_step)\n    {\n        freq += texture(iChannel0, vec2(offset + uvx, 0.0)).r;\n    }\n    freq /= 9.0;\n    freq = freq * freq;\n    return freq;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;   \n    \n    float uvx = uv.x * 64.0;\n    float grid_x = fract(uvx);\n    grid_x = smoothstep(frame0, frame1, grid_x) - smoothstep(1.0 - frame1, 1.0 - frame0, grid_x);\n    \n    uvx = (floor(uvx)) / 64.0;\n    float freq = texture_fftw(uvx);\n    //freq = pow(freq, 2.0 - uvx);\n    float grid_y = fract(uv.y * 32.0);\n    float grid_y_offset = floor(uv.y * 32.0) / 32.0;\n    grid_y = smoothstep(frame0, frame1, grid_y) - smoothstep(1.0 - frame1, 1.0 - frame0, grid_y);\n    //grid_y *= max(sign(freq - grid_y_offset), 0.0);\n    \n    vec3 color0 = vec3(0.0, 0.0, 1.0);\n    vec3 color1 = vec3(0.0, 1.0, 1.0);\n    vec3 color2 = vec3(0.0, 1.0, 0.0);\n    vec3 color3 = vec3(1.0, 1.0, 0.0);\n    vec3 color4 = vec3(1.0, 0.0, 0.0);\n    \n    vec3 color = color0 * (1.0 - smoothstep(0.0, 0.2, freq));   \n    color +=     color1 * (smoothstep(0.0, 0.2, freq) - smoothstep(0.2, 0.4, freq));   \n    color +=     color2 * (smoothstep(0.2, 0.4, freq) - smoothstep(0.4, 0.6, freq));   \n    color +=     color3 * (smoothstep(0.4, 0.6, freq) - smoothstep(0.6, 0.8, freq));   \n    color +=     color4 * (smoothstep(0.6, 0.8, freq));\n   \n    fragColor = mix(vec4(0.0), vec4(color, 1.0), grid_y * grid_x *max(sign(freq - grid_y_offset), 0.0) );\n    \n    fragColor = mix(fragColor, vec4(0.0, 0.2, 0.0, 1.0), 1.0 - grid_y * grid_x);\n}\n","name":"Image","description":"","type":"image"}]}