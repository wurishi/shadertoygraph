{"ver":"0.1","info":{"id":"XXG3RK","date":"1717871121","viewed":59,"name":"Equirexperiments","username":"gllama","description":"Learning slowly. Misc misfits from my experimentation with equirectangular space. CC0-1.0 licensed ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["grid","cc0","equirectangular"],"hasliked":0,"parentid":"XXK3RG","parentname":"Equirectangular Grid"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 🌎🌍 Equirexperiments\n// License CC0-1.0\n#define PI 3.1415926535897932384626433832795\n#define TIME iTime\n\n// Black Magic Function\nfloat f(float x) {\n  float y = fract(20. * abs(x));\n  if (y < 0.1) return 1.0;\n  return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n// Settings\n\n    // How often to draw lines \n    float interval =.05;\n    // Line thiccness\n    float thicc = .005;\n    \n    \n// Calculations\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; \n\n    // Convert UV to 3D Point\n    float alpha = 2.*PI*uv.x;\n    float beta = PI*uv.y;\n    vec3 equi = vec3(\n        sin(beta)*cos(alpha),\n        cos(beta),\n        sin(beta)*sin(alpha)\n    );\n    \n    // Calulate Spherical/Equirectangular UV\n    vec2 sphericalUV = vec2(\n        atan(equi.y, equi.x) / (2.0 * PI) + .5, \n        (equi.z+1.)*.5\n    );\n    \n    // Dunno if this ever did anything useful but left un-used\n    //float lat = atan(equi.z,equi.x);\n    //float lon = acos(equi.y);\n    //vec2  nuv = vec2(\n    //    (lon + 3.14159265359) / (2.0 * 3.14159265359),\n    //    lat / 3.14159265359\n    //);\n    \n    \n// Drawing    \n    \n    // Start with black\n    vec3 col = vec3(0.0,0.0,0.0);\n\n    // Create Checkerboard Pattern\n    vec2 scaledUV = sphericalUV * 20.0;\n    float checker = mod(floor(scaledUV.x) + floor(scaledUV.y), 2.0);\n    // Paint Checkerboard Pattern\n    col = mix(vec3(1.0, 1.0, 1.0), vec3(equi.x,equi.y,equi.z), checker);\n    \n    \n    // If ??? something equirectangular-space\n    // Don't know what this would be called (Max X || Y || Z == 1.0)?\n    // Paints Light Red Lines\n    float c = max(f(equi.x), max(f(equi.y), f(equi.z)));\n    if(c==1.){\n       col = vec3(1.,0.4,0.4);\n    }\n\n    // Draw animated purple gridlines based on UV (float offset used to animate)\n    float offset = mod(iTime/10.,PI);\n    if(mod(sphericalUV.x+offset,interval)<thicc || mod(sphericalUV.y+offset,interval)<thicc){\n        col = vec3(1.,0.,1.);\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}