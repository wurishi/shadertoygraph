{"ver":"0.1","info":{"id":"7lBGDK","date":"1624808776","viewed":61,"name":"ixd08_kaleidoscope","username":"ixd08","description":"kaleidoscope","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nstruct Triangle {\n    vec2 v1;\n    vec2 v2;\n    vec2 v3;\n};\n\n#define S_RECT 0\n#define S_ELLIPSE 1\n#define S_TRIANGLE 3\n\nstruct Shape {\n    int type;\n    vec2 pos;\n    float angle;\n    vec2 size;\n    vec3 color;\n};\n\nvec4 drawShape(Shape shape, vec2 uv) {\n    uv -= shape.pos;\n    float c = cos(-shape.angle);\n    float s = sin(-shape.angle);\n    mat2 m = mat2(c, s, -s, c);\n    uv = m * uv;\n    uv /= shape.size / 2.0;\n    if (shape.type == S_RECT) {\n        if (abs(uv.x) <= 1.0 && abs(uv.y) <= 1.0) {\n            return vec4(shape.color, 1.0);\n        }\n    } else if (shape.type == S_ELLIPSE) {\n        if (dot(uv, uv) <= 1.0) {\n            return vec4(shape.color, 1.0);\n        }\n    } else {\n        if ((uv.y <= 1.0 + 2.0 * uv.x) && (uv.y <= 1.0 - 2.0 * uv.x) && (uv.y >= -1.0)) {\n            return vec4(shape.color, 1.0);\n        }\n    }\n    return vec4(0);\n}\n\nfloat rand(int a, int b) {\n    float x = float(a * 100 + b);\n    return fract(abs(sin(15123.9847 * x) * 9234.3521));\n}\n\n\nvec3 baseImage(vec2 uv) {\n    for (int i = 0; i < 100; ++i) {\n        vec2 A = vec2( rand(i,1)*2.0, rand(i,2)*2.0 );\n        vec2 k = vec2( rand(i,3)*0.3, rand(i,4)*0.3 );\n        vec2 pos = vec2( rand(i,5), rand(i,6) ) + A*sin(k*iTime);\n        vec2 size = vec2( rand(i,7)*0.2+0.1, rand(i,8)*0.2+0.1);\n        float angle = rand(i,9)*2.0*PI + (rand(i,10)*2.0-1.0)*PI*iTime;\n        vec3 color = vec3( rand(i,11)*0.9, rand(i,12)*0.9, rand(i,13)*0.9);\n        float r = rand(i,14);\n        int type;\n        if (r < 0.4) {\n            type = S_RECT;\n        } else if (r < 0.6) {\n            type = S_ELLIPSE;\n        } else {\n            type = S_TRIANGLE;\n        }\n        Shape s = Shape(type, pos, angle, size, color);\n        vec4 col = drawShape(s, uv);\n        if (col.a > 0.0) {\n            return col.rgb;\n        }\n    }\n    \n    return vec3(0);\n}\n\n\n/*\nvec3 baseImage(vec2 uv) {\n    if (distance(uv, vec2(0, 0)) < 0.2) {\n        return vec3(0, 1, 1);\n    }\n    if (distance(uv, vec2(1, 0)) < 0.2) {\n        return vec3(1, 1, 0);\n    }\n    if (distance(uv, vec2(0.5, 1.0)) < 0.2) {\n        return vec3(1, 0, 0);\n    }\n    return vec3(uv.y, uv.x, 1.0 - uv.x);\n    //return vec3(0);\n}\n*/\n\n// p -> q\nvec2 mapTriangle(vec2 uv, Triangle p, Triangle q) {\n    mat2 LP = mat2(p.v2 - p.v1, p.v3 - p.v1);\n    mat2 LQ = mat2(q.v2 - q.v1, q.v3 - q.v1);\n    return LQ * inverse(LP) * (uv - p.v1) + q.v1;\n}\n\n// triangle\nvec2 uvKaleidoscope0(vec2 uv) {\n    uv.y = mod(uv.y, 2.);\n    if (uv.y > 1.) {\n        uv.y = 2.-uv.y;\n    }\n    uv.x *= sqrt(3.) / 2.;\n    uv.x -= 0.5 * uv.y;\n    uv.x = mod(uv.x, 3.);\n    Triangle q = Triangle(vec2(0, 0), vec2(1, 0), vec2(.5, sqrt(3.0) / 2.0));\n    Triangle p;\n    if (uv.x < 1.) {\n        if (uv.y < 1.-uv.x) {\n            p = Triangle(vec2(0, 0), vec2(1, 0), vec2(0, 1));\n        } else {\n            p = Triangle(vec2(1, 1), vec2(1, 0), vec2(0, 1));\n        }\n    } else if (uv.x < 2.) {\n        uv.x -= 1.;\n        if (uv.y < 1. - uv.x) {\n            p = Triangle(vec2(0, 1), vec2(0, 0), vec2(1, 0));\n        } else {\n            p = Triangle(vec2(0, 1), vec2(1, 1), vec2(1, 0));\n        }\n    } else {\n        uv.x -= 2.;\n        if (uv.y < 1. - uv.x) {\n            p = Triangle(vec2(1, 0), vec2(0, 1), vec2(0, 0));\n        } else {\n            p = Triangle(vec2(1, 0), vec2(0, 1), vec2(1, 1));\n        }\n    }\n    uv = mapTriangle(uv, p, q);\n    return uv;\n}\n\n// square\nvec2 uvKaleidoscope1(vec2 uv) {\n    uv = mod(uv, 2.);\n    \n    if (uv.y > 1.) {\n        uv.y = 2. - uv.y;\n    }\n    if (uv.x > 1.) {\n        uv.x = 2. - uv.x;\n    }\n    if (uv.y > 1. - uv.x) {\n        Triangle p = Triangle(vec2(1, 1), vec2(1, 0), vec2(0, 1));\n        Triangle q = Triangle(vec2(0, 0), vec2(1, 0), vec2(0, 1));\n        uv = mapTriangle(uv, p, q);\n    }\n    return uv;\n}\n\n// hexagon\nvec2 uvKaleidoscope2(vec2 uv) {\n    uv.y = mod(uv.y, 2.);\n    if (uv.y > 1.) {\n        uv.y = 2.-uv.y;\n    }\n    uv.x *= sqrt(3.) / 2.;\n    uv.x -= 0.5 * uv.y;\n    uv.x = mod(uv.x, 3.);\n    Triangle q = Triangle( vec2(0.5,1.0), vec2(0.5-1.0/sqrt(3.0),0.0), vec2(0.5,0.0) );\n    Triangle p;\n    if (uv.x < 1.) {\n        if (uv.y < 1.-uv.x) {\n            if (uv.y < uv.x) {\n                p = Triangle( vec2(0,0), vec2(1,0), vec2(0.5,0.5) );\n            } else {\n                p = Triangle( vec2(0,0), vec2(0,1), vec2(0.5,0.5) );\n            }\n        } else {\n            if (uv.y < uv.x) {\n                p = Triangle( vec2(1,1), vec2(1,0), vec2(0.5,0.5) );\n            } else {\n                p = Triangle( vec2(1,1), vec2(0,1), vec2(0.5,0.5) );\n            }\n        }\n    } else if (uv.x < 2.) {\n        uv.x -= 1.;\n        if (uv.y < 1.0 - 2.0 * uv.x) {\n            p = Triangle( vec2(0,1), vec2(0,0), vec2(0.5,0.0) );\n        } else if (uv.y < 1.0 - uv.x) {\n            p = Triangle( vec2(0,1), vec2(1,0), vec2(0.5,0.0) );\n        } else if (uv.y < 1.0 - 0.5 * uv.x) {\n            p = Triangle( vec2(0,1), vec2(1,0), vec2(1.0,0.5) );\n        } else {\n            p = Triangle( vec2(0,1), vec2(1,1), vec2(1.0,0.5) );\n        }\n    } else {\n        uv.x -= 2.;\n        if (uv.y < 0.5 - 0.5 * uv.x) {\n            p = Triangle( vec2(1,0), vec2(0,0), vec2(0.0,0.5) );\n        } else if (uv.y < 1.0 - uv.x) {\n            p = Triangle( vec2(1,0), vec2(0,1), vec2(0.0,0.5) );\n        } else if (uv.y < 2.0 - 2.0 * uv.x) {\n            p = Triangle( vec2(1,0), vec2(0,1), vec2(0.5,1.0) );\n        } else {\n            p = Triangle( vec2(1,0), vec2(1,1), vec2(0.5,1.0) );\n        }\n    }\n    uv = mapTriangle(uv, p, q);\n    return uv;\n}\n\n// octagon\nvec2 uvKaleidoscope3(vec2 uv) {\n    uv = mod(uv, 3.0);\n    uv /= 3.0;\n    \n    if (uv.y > 0.5) {\n        uv.y = 1.0 - uv.y;\n        uv.x = 1.0 - uv.x;\n    }\n    if (uv.x > 0.5) {\n        uv.x = 1.0 - uv.x;\n        uv = uv.yx;\n    }\n    if (uv.y > 0.5 - uv.x) {\n        uv.x = 0.5 - uv.x;\n        uv.y = 0.5 - uv.y;\n        uv = uv.yx;\n    }\n    \n    float a = 1.0 / (cos(PI / 8.0) / sin(PI / 8.0) + 1.0);\n    float r = a / (2.0 * sin(PI / 8.0));\n    float h = a / (2.0 * tan(PI / 8.0));\n    \n    Triangle p;\n    if (uv.y > h) {\n        p = Triangle(vec2(0.0, h + a / 2.0), vec2(a / 2.0, h), vec2(-a / 2.0, h));\n    } else if (uv.y > 2.0 * h / a * uv.x) {\n        p = Triangle(vec2(0, 0), vec2(a / 2.0, h), vec2(-a / 2.0, h)); \n    } else if (uv.x > h) {\n        p = Triangle(vec2(h + a / 2.0, 0.0), vec2(h, -a / 2.0), vec2(h, a / 2.0));\n    } else if (uv.y < a / (2.0 * h) * uv.x) {\n        p = Triangle(vec2(0, 0), vec2(h, -a / 2.0), vec2(h, a / 2.0));\n    } else {\n        p = Triangle(vec2(0, 0), vec2(a / 2.0, h), vec2(h, a / 2.0));\n    }\n    \n    Triangle q = Triangle(vec2(0.5, 1.0), vec2(0, 0), vec2(1, 0));\n    \n    uv = mapTriangle(uv, p, q);\n    \n    return uv;\n}\n\n// oct star\nvec2 uvKaleidoscope4(vec2 uv) {\n    uv = mod(uv, 5.0);\n    uv /= 5.0;\n    \n    if (uv.y >= 0.5) {\n        uv.y = 1.0 - uv.y;\n    }\n    if (uv.x >= 0.5) {\n        uv.x = 1.0 - uv.x;\n    }\n    if (uv.y > uv.x) {\n        uv = uv.yx;\n    }\n    \n    float a = 1.0 / (3.0 * cos(PI / 8.0) / sin(PI / 8.0) + 1.0);\n    float r = a / (2.0 * sin(PI / 8.0));\n    float h = a / (2.0 * tan(PI / 8.0));\n    \n    Triangle p;\n    if (uv.x < h + a / 2.0 || uv.y < 2.0 * h - uv.x) {\n        if (uv.y > (h - a / 2.0) / (h + a / 2.0) * uv.x) { \n            p = Triangle(vec2(0, 0), vec2(h + a / 2.0, h - a / 2.0), vec2(h + a / 2.0));\n        } else {\n            p = Triangle(vec2(0, 0), vec2(h + a / 2.0, h - a / 2.0), vec2(0.5 - h - a / 2.0, 0.0));\n        }\n    } else if (uv.y > 2.0 * h || uv.y > 0.5 + h + a / 2.0 - uv.x) {\n        if (uv.y > (uv.x - 2.0 * h) * 2.0 * h / a) {\n            p = Triangle(vec2(0.5, 0.5), vec2(2.0 * h), vec2(0.5 - h + a / 2.0, 2.0 * h));\n        } else {\n            p = Triangle(vec2(0.5, 0.5), vec2(0.5, h + a / 2.0), vec2(0.5 - h + a / 2.0, 2.0 * h));\n        }\n    } else if (uv.y < uv.x - 2.0 * h - a) {\n        p = Triangle(vec2(0.5, 0.0), vec2(2.0 * h + a, 0.0), vec2(0.5, h - a / 2.0));\n    } else {\n        p.v1 = vec2(2.0 * h + a / 2.0, h);\n        vec2 d = uv - p.v1;\n        float ang = atan(d.y, d.x);\n        ang += PI / 8.0;\n        float n = floor(ang / PI * 4.0);\n        ang = n * PI / 4.0 + PI / 8.0;\n        p.v2 = p.v1 + vec2(r * cos(ang), r * sin(ang));\n        ang -= PI / 4.0;\n        p.v3 = p.v1 + vec2(r * cos(ang), r * sin(ang));\n        if (mod(n, 2.0) > 0.5) {\n            vec2 t = p.v2;\n            p.v2 = p.v3;\n            p.v3 = t;\n        }\n        \n    }\n    Triangle q = Triangle(vec2(0.5, 1.0), vec2(0, 0), vec2(1, 0));\n    uv = mapTriangle(uv, p, q);\n    \n    return uv;\n}\n\nvec3 kaleidoscope(float id, vec2 uv) {\n    id = mod(id, 5.0);\n    if (id < 1.0) {\n        return baseImage(uvKaleidoscope0(uv));\n    }\n    if (id < 2.0) {\n        return baseImage(uvKaleidoscope1(uv));\n    }\n    if (id < 3.0) {\n        return baseImage(uvKaleidoscope2(uv));\n    }\n    if (id < 4.0) {\n        return baseImage(uvKaleidoscope3(uv));\n    }\n    return baseImage(uvKaleidoscope4(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n    uv *= 7.0;\n    \n    vec3 col;\n    float interval = 20.0;\n    float mixTime = 1.0;\n    float t = mod(iTime, interval);\n    float id = iTime / interval;\n    if (t < interval - mixTime) {\n        col = kaleidoscope(id, uv);\n    } else {\n        vec3 c1 = kaleidoscope(id, uv);\n        vec3 c2 = kaleidoscope(id + 1.0, uv);\n        float factor = smoothstep(interval - mixTime, interval, t);\n        col = mix(c1, c2, factor);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}