{"ver":"0.1","info":{"id":"ds2Gzz","date":"1667162482","viewed":88,"name":"Fileds for Dyn Sys Plotter","username":"Envy24","description":"Use mouse to drag vector field.\n\nPlotter: https://www.shadertoy.com/view/cdj3zz","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","distance","field","function","vector","arrow","l2"],"hasliked":0,"parentid":"ddX3WX","parentname":"Truncated vector field"},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define PIXELATE(SC, PS)          ( floor( (SC) / (PS) ) * (PS) )    // PS - pixel size\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define FIELD_SCALE                 5.0\n#define PI                          3.1415926535897932\n\n// Points after point E.\nfloat arrowSDF(\n    in vec2 NDC,\n    in vec2 B,\n    in vec2 E,\n    in float R,\n    in float S) // Scale for working in screen coordinates.\n{\n    float len = length(B-E);\n    vec2 dir = len < 1e-7 ? vec2(1,0) : normalize(E-B),\n         up = cross(vec3(dir, 0.), vec3(0, 0, -1)).xy,\n         C = E - dir * 0.05 * S, //      U--\n         U = C + up  * 0.05 * S, // B----C--E--E'\n         D = C - up  * 0.05 * S; //      D--\n         E += dir * 0.1375 * S;\n    \n    vec3 BARY = inverse(mat3(\n            U.x, U.y, 1.0,\n            D.x, D.y, 1.0,\n            E.x, E.y, 1.0)) * vec3(NDC.x, NDC.y, 1.0);\n    \n    float sign = \n        BARY.x >= 0.0 &&    \n        BARY.y >= 0.0 && \n        BARY.z >= 0.0 ?  // inside triangle?\n            -1. : 1.;\n    \n    float d = segmentSDF_L2(NDC, U, D, 0.);\n          d = min(d, segmentSDF_L2(NDC, U, E, 0.));\n          d = min(d, segmentSDF_L2(NDC, D, E, 0.));\n          d = \n              len < 0.1375 ? \n                  d :\n                  min(d, segmentSDF_L2(NDC, B, C, 0.));\n    \n    return sign*d-R;\n}\n\nvec3 colorize_field(float dist, vec3 color)\n{    \n    float F = 30., freq = F*dist, aa = 1./F, C = 0.7, amp = 0.2, width = 0.3,\n          curves_sdf = C + amp*smoothstep(4./R.y, 0., (width+cos(freq)) * aa),\n          exp_raise = 1. - exp(-4.*abs(dist));\n        \n    color = 1.0 - sign(dist) * color; // Change color if dist is negative. \n    color *= exp_raise;               // Attenuate color around edges.     \n    color *= curves_sdf;              // Add interleaved curves.\n    \n    return mix(color, vec3(1), smoothstep(6./R.y, 0., abs(dist)) );\n}\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - R.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin)\n{\n    return ((2. * (SC - MOUSE_OFFSET) - R.xy) / R.y) * scale - origin;\n}\nvec2 unmap_from_centered_ndc(in vec2 NDC, in float scale, in vec2 origin)\n{\n    return ((((NDC + origin) / scale) * R.y) + R.xy) * 0.5 + MOUSE_OFFSET;       \n}\n\nfloat weight_color(vec3 color)\n{\n    //return max(max(color.x, color.y), color.z);\n    //return (color.x + color.y + color.z) / 3.;\n    // source: https://www.shadertoy.com/view/XdXSzX\n    return dot(color, vec3(0.2126, 0.7152, 0.0722));\n    //return dot(color, vec3(0.3, 0.59, 0.11));\n}\n\n// for range xy = [-5.*AR; 5.*AR][-5; 5.]\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    float SCALE = 25.;\n    vec2 NDC = map_to_centered_ndc(SC, FIELD_SCALE, -ORIGIN);\n    vec2 CC = map_to_centered_ndc(PIXELATE(SC, SCALE) + vec2(SCALE/2.), FIELD_SCALE, -ORIGIN);\n  \n    vec2 B = CC,\n         dir = field(B, T0);\n    // not so simple, to pick appropriate magic scalars(\n    float mag = clamp(length(dir) * 0.01, 0., SCALE*0.005);\n    vec2 E = B + normalize(dir) * mag;\n         B -= normalize(dir) * mag*2.;\n\n    float minDist = arrowSDF(NDC, B, E, 0., 1.0);\n    \n    vec3 color = vec3(0);\n         //color = vec3(normalize(field(CC, T0).xy/mag), 0.5);  // Pixelated\n         color = vec3(normalize(field(NDC, T0).xy/mag), 0.5); // Smooth\n     float arrow = weight_color(color) <= 0.5 ? 1. : 0.;\n         color = mix( color, vec3(arrow), smoothstep(16./R.y, 0., minDist));       \n\n    O = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nvec2 rotateAroundZ(vec2 p, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n\n    return vec2(\n        p.x * c - p.y * s,\n        p.y * c + p.x * s);\n}\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E,\n    float R)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}\n\n#define X ( P.x )\n#define Y ( P.y )\n \n/**\n#define ORIGIN         ( vec2(0.6, -0.48) )\n#define T_MIN          ( -1.0 )\n#define T_MAX          ( 1.0 )\n#define T0             ( sinOSC(T_MIN, T_MAX, iTime ) ) \nvec2 field(in vec2 P, float T)\n{    \n    return \n        vec2(\n            X*X + Y*T - T*X - X,\n           -X*Y - Y*Y - Y*T - T*T - T*X - Y);\n}\n/**/\n#define ORIGIN         ( vec2(0.0, -0.1) )\n#define T_MIN          ( -1. )\n#define T_MAX          ( 1. )\n#define T0             ( sinOSC(T_MIN, T_MAX, iTime ) ) \nvec2 field(in vec2 P, float T) \n{      \n    return \n        vec2(\n           -X*X + X*Y + Y*Y - Y*T - T*T + T*X - X - Y - T,\n           -X*X - X*Y + Y*Y + Y*T + T*T - T*X + T);\n}\n/**\n#define ORIGIN         ( vec2(-0.20, 0.55) )\n#define T_MIN          ( -1. )\n#define T_MAX          ( 1. )\n#define T0             ( sinOSC(T_MIN, T_MAX, iTime ) ) \nvec2 field(in vec2 P, float T)\n{     \n    return \n        vec2(\n           -X*X - Y*Y - T*T + T*X + Y - T,\n            X*X - X*Y - Y*T - T*T);\n}\n/**\n#define ORIGIN         ( vec2(0.6, 0.16) )\n#define T_MIN          ( -1. )\n#define T_MAX          ( 1. )\n#define T0             ( sinOSC(T_MIN, T_MAX, iTime ) ) \nvec2 field(in vec2 P, float T)\n{       \n    return \n        vec2(\n           -X*X + T*T + T*X + X - Y + T,\n           -Y*Y - Y*T + T*X + X - Y);\n}\n/**\n#define ORIGIN         ( vec2(0.2, 0.26) )\n#define T_MIN          ( -1. )\n#define T_MAX          ( 1. )\n#define T0             ( sinOSC(T_MIN, T_MAX, iTime ) ) \nvec2 field(in vec2 P, float T)\n{    \n    return \n        vec2(\n           -Y*T - T*X + Y,\n            X*X - T*X - X + T);\n}\n/**\n#define ORIGIN         ( vec2(-0.1, 0.05) )\n#define T_MIN          ( -1. )\n#define T_MAX          ( 1. )\n#define T0             ( sinOSC(T_MIN, T_MAX, iTime ) ) \nvec2 field(in vec2 P, float T)\n{          \n    return \n        vec2(\n           -X*X + X*Y - Y*Y + Y*T - T*X - X + Y + T,\n           -X*X + T*T - T*X - X - Y);\n}\n/**/","name":"Common","description":"","type":"common"}]}