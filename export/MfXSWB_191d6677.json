{"ver":"0.1","info":{"id":"MfXSWB","date":"1705644910","viewed":88,"name":"Kishimisu tutorial w/ Cross","username":"dysphoricpeach","description":"Followed the kishimisu introductory shader art tutorial: https://youtu.be/f4s1h2YETNY?si=wm7JxeFcHtgcdFrF and used the hyperbolic cross from iq as the sdf: https://www.shadertoy.com/view/Nt3yDH","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","iq","kishimisu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdHyperbolicCross( in vec2 p, float k )\n{\n    // scale\n    float s = 1.0/k - k;\n    p = p*s;\n    // symmetry\n    p = abs(p);\n    p = (p.x>p.y) ? p.yx : p.xy;\n    // offset\n    p += k;\n    \n    // solve quartic (for details see https://www.shadertoy.com/view/ftcyW8)\n    float x2 = p.x*p.x/16.0;\n    float y2 = p.y*p.y/16.0;\n    float r = (p.x*p.y-4.0)/12.0;\n    float q = y2-x2;\n    float h = q*q-r*r*r;\n    float u;\n    if( h<0.0 )\n    {\n        float m = sqrt(r);\n        u = m*cos( acos(q/(r*m) )/3.0 );\n    }\n    else\n    {\n        float m = pow(sqrt(h)+q,1.0/3.0);\n        u = (m+r/m)/2.0;\n    }\n    float w = sqrt(u+x2);\n    float x = p.x/4.0-w+sqrt(2.0*x2-u+(p.y-x2*p.x*2.0)/w/4.0);\n    \n    // clamp arm\n    x = max(x,k);\n    \n    // compute distance to closest point\n    float d = length( p-vec2(x,1.0/x) ) / s;\n\n    // sign\n    return p.x*p.y < 1.0 ? -d : d;\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.117, 0.622, 0.740);\n    vec3 b = vec3(0.516, 0.368, 0.048);\n    vec3 c = vec3(0.096, 1.091, 0.028);\n    vec3 d = vec3(2.076, 1.417, 3.483);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 p0 = p;\n    vec3 finalColor = vec3(0.0);\n    \n    // cross morphing speed\n    float k = 0.5 + 0.45*sin(1.234*iTime);\n    \n    for (float i = 0.0; i < 3.5; i++){\n        p = fract(p * 1.5) - 0.5;\n    \n        float d = sdHyperbolicCross(p, k) * exp(-length(p0));\n    \n        vec3 col = palette(length(p0) + i*.8 + iTime*.4);\n    \n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n    \n        d = pow(0.005 / d, 1.2);\n    \n        finalColor += col * d;\n    }  \n    \n    fragColor = vec4(finalColor, 1.0);\n   \n}","name":"Image","description":"","type":"image"}]}