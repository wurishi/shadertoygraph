{"ver":"0.1","info":{"id":"Wdf3zn","date":"1544650014","viewed":176,"name":"vertical flow coral","username":"edapx","description":"vertical flow","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["verticalflow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvec2 vectorField(vec2 uv){\n  vec2 res = uv;\n  float n = noise(res*vec2(3.0));\n  res.y -= iTime*0.05;\n  res += sin(res.yx*40.) * 0.02;\n  res += vec2(n);\n  return res;\n}\n\nfloat plot(float val, float c, float t){\n  float l = smoothstep(c,c-t,val);\n  float r = smoothstep(c,c-t/5.,val);\n  return r-l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  float t = 0.2; // try 0.2 or 0.3\n  vec4 m = iMouse / iResolution.xxxx;\n  vec2 st = fragCoord/iResolution.xy;\n  st.y *= iResolution.y / iResolution.x;\n  st = vec2(st.y, st.y * (st.x * 0.4));\n  st = vectorField(st);\n\n  float cell = 0.2 + m.y*0.3;\n  vec2 modSt = mod(st, vec2(cell));\n\n  float x = plot(modSt.x, cell, t);\n  float y = plot(modSt.y, cell, t);\n    \n  vec3 green = vec3(0.733,1.,0.309 );\n  vec3 red = vec3(1.,0.352,0.207);\n  vec3 blue = vec3(0.086,0.290, 0.8 );\n\n    \n  vec3 col = blue * x;\n  col     += green * y;\n  col     += red*vec3(smoothstep(1.3, .01,x+y));\n\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}