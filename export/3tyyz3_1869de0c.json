{"ver":"0.1","info":{"id":"3tyyz3","date":"1611380678","viewed":122,"name":"Mandelbrot + Julia sets","username":"laggermc","description":"Visualization of the Mandelbrot and Julia sets.\n\nClick on image to interact.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["julia","mandelbrot","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERATIONS 500\n#define C_MAP 1\n#define TILE 1\n#define MANDELBROT 0\n\nfloat colormap_red(float x) {\n    if (x < 0.7) {\n        return 4.0 * x - 1.5;\n    } else {\n        return -4.0 * x + 4.5;\n    }\n}\n\nfloat colormap_green(float x) {\n    if (x < 0.5) {\n        return 4.0 * x - 0.5;\n    } else {\n        return -4.0 * x + 3.5;\n    }\n}\n\nfloat colormap_blue(float x) {\n    if (x < 0.3) {\n       return 4.0 * x + 0.5;\n    } else {\n       return -4.0 * x + 2.5;\n    }\n}\n\nvec4 colormap_jet(float x) {\n    float r = clamp(colormap_red(x), 0.0, 1.0);\n    float g = clamp(colormap_green(x), 0.0, 1.0);\n    float b = clamp(colormap_blue(x), 0.0, 1.0);\n    return vec4(r, g, b, 1.0);\n}\nvec2 squareImaginary(vec2 n) {\n    return vec2((n.x * n.x) - (n.y * n.y), 2.0 * n.x * n.y);\n}\n\nvec3 iterate(vec2 z, vec2 c) {\n\n    int iterations = 0;\n\n    while (length(z) < 2.0 && iterations < MAX_ITERATIONS) {\n    \n        z = squareImaginary(z) + c;\n        iterations++;\n    }\n    \n    z = squareImaginary(z); iterations++;    // a couple of extra iterations helps\n    z = squareImaginary(z); iterations++;    // decrease the size of the error term.\n    float l = length(z);\n    float m = float(MAX_ITERATIONS);\n    float i = float(iterations);\n    float mu = i - (log (log (l)))/ log (2.0);\n\n    vec3 col = colormap_jet(mu * .03).rgb;\n    // vec3 col = vec3(0.0);\n    // if (iterations >= MAX_ITERATIONS) col = vec3(1.0);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n\n    // Define window of the complex plane to render Julias\n    float x = 0.;\n    vec2 jRealRange = vec2(-2.0 + x, 2.0 - x);\n    vec2 jCompRange = jRealRange * iResolution.y / iResolution.x;\n    // Define window of the complex plane to render Mandelbrot\n    vec2 mRealRange = vec2(-2.5, 1.0);\n    vec2 mCompRange = mRealRange * iResolution.y / iResolution.x;\n    \n    // Normalized pixel coordinates from 0 to 1\n    vec2 st  = fragCoord/iResolution.xy;\n\n\n    // Coordinates scaled and shifted to complex plane\n    vec2 uv = st;\n\n    #if TILE==1\n    // Number of tiles\n    // float n = 1.;\n    float n = floor(exp(mod(0.5 * t, 5.))) + 1.0;\n    uv *= n;\n    uv = fract(uv);\n    // vec2 c = floor(uv) + 0.5;\n    #endif\n\n    #if MANDELBROT==0\n    uv *= length(jRealRange);\n    uv.y *= iResolution.y / iResolution.x;\n    uv -= vec2(length(jRealRange) / 2.0, length(jCompRange) / 2.0);\n\n    #else\n    uv.x *= 2.0;\n    uv.x = fract(uv.x);\n    if (fragCoord.x >= iResolution.x / 2.0) {\n        uv *= length(jRealRange);\n        uv.y *= iResolution.y / iResolution.x * 2.0;\n        uv -= vec2(length(jRealRange) / 2.0, length(jCompRange));\n    }\n    else {\n        uv *= length(mRealRange);\n        uv.y *= iResolution.y / iResolution.x * 2.0;\n        uv -= vec2(length(mRealRange) / 2.0 + 0.5, length(mCompRange));\n    }\n    #endif\n\n\n    #if C_MAP==1 && TILE==1\n    // c value map\n    vec2 c = st;\n    c *= length(mRealRange);\n    c.y *= iResolution.y / iResolution.x;\n    c -= vec2(length(mRealRange) / 2.0 + 0.5, length(mCompRange) / 2.0);\n\n    #elif MANDELBROT==1\n\n    vec2 c = iMouse.xy / iResolution.xy;\n    c.x *= 2.0;\n    c.x = fract(c.x);\n    c *= length(mRealRange);\n    c.y *= iResolution.y / iResolution.x * 2.0;\n    c -= vec2(length(mRealRange) / 2.0 + 0.5, length(mCompRange));\n    \n    #else\n\n    // Overwrite c val\n    float r = 0.5;\n    vec2 c = vec2(r * cos(iTime), r * sin(iTime));\n    // vec2 c = vec2(2.0, 2.0);\n\n    #endif\n\n    #if MANDELBROT==0\n    vec3 col = iterate(uv, c);\n    #else\n    vec3 col = vec3(0.0);\n    if (fragCoord.x >= iResolution.x / 2.0) {\n        col = iterate(uv, c);\n    }\n    else {\n        col = iterate(vec2(0.), uv);\n    }\n\n    #endif\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}