{"ver":"0.1","info":{"id":"DdSSzz","date":"1669781251","viewed":79,"name":"GOL (Game Of Life)","username":"Avicky","description":"Learning Shadertoy using GOL.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["andrewlang"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4( texelFetch( iChannel0, ivec2(fragCoord), \n        0 ) .xxx, 1. );\n  \n        \n}\n\n\n\n\n\n  ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//This is work in progress. Still learning and improving at the same time.\n//Credit to iq, whose code i am looking at.\n\nint cell( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n}\n\nfloat hash1( float w )\n{\n    return fract(sin(w)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n    \n\n\n   \tint gol =   cell(px+ivec2(-1,-1)) + cell(px+ivec2(0,-1)) + \n        cell(px+ivec2(1,-1))\n              + cell(px+ivec2(-1, 0)) + cell(px)*9 + \n                    cell(px+ivec2(1, 0))\n              + cell(px+ivec2(-1, 1)) + cell(px+ivec2(0, 1)) + \n                    cell(px+ivec2(1, 1));\n    float f = (gol==3 || gol==11 || gol==12) ? 1.0 : 0.0;\n    \n\n\n   if( iFrame==0 ) f = step(0.5, hash1(fragCoord.x*13.0+hash1\n       (fragCoord.y*71.1)));\n     \n        //(0 = iMouse).z > 0.5 && length(0.xy - u) <.25\t\n    \n   //if(iMouse.z > 0.1 && length (iMouse.xy/SIZE-fragCoord.xy)\n       //<BRUSH_SIZE) fragColor = vec4(f, 0.0, 0.0, 0.0); //if the pixel coordinate, fragcoord, is \n                                                 //smaller than 2 pixels,then put all of the values to o \n    \n    \n\tfragColor = vec4( f, 0.0, 0.0, 0.0 );\n}\n\n   ","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n//global variable are kept in a common tab.\n\n#define SIZE 10.\n#define BRUSH_SIZE 3.\n#define SPEED 20 \n\n//size = pixel size\n//brush size = Mouse size\n//SPEED - controls the speed of the pixels. Invese of speed, the bigger is slower.","name":"Common","description":"","type":"common"}]}