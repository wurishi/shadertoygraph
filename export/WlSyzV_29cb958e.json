{"ver":"0.1","info":{"id":"WlSyzV","date":"1594779863","viewed":276,"name":"2D water thingy","username":"JuanDeager","description":"2D water demonstration","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.51 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat fbm(vec3 pos, float octaves, float frequency, float amplitude, float lacunarity, float persistence)\n{\n    float res = 0.0;\n    pos *= frequency;\n    for(int i = 0; i < int(ceil(octaves)); ++i)\n    {\n        res += amplitude * snoise(pos);\n        pos *= lacunarity;\n        amplitude *= persistence;\n    }\n    return res;\n}\n\nvec3 minAxis(vec3 v)\n{\n    vec3 a = abs(v);\n    return step(a, a.yxx) * step(a, a.zzy);\n}\n\nvec3 maxAxis(vec3 v)\n{\n    vec3 a = abs(v);\n    return step(a.yxx, a) * step(a.zzy, a);\n}\n\n\n\n\n\n\n\n// Constants, could make them uniforms\nconst vec3 sunDir = normalize(vec3(-2, -.3, -1)); // direction FROM sun TO world\nconst vec3 viewDir = vec3(0, 0, -1); // direction FROM camera TO world\nconst float invShininess = 4.; // lower makes the water shinier\nconst vec3 waterColor = vec3(0, .5, 1);\n\n// Noise parameters\nconst float oct = 2.0;\nconst float freq = 51.75;\nconst float amp = 1.5;\nconst float lac = 1.15;\nconst float persist = 0.85;\n\nconst float heightScale = 0.01; // make height small to match the difference in x & y coords, otherwise tiny height differences will affect normal too much\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 offsetUp = vec2(0, -.01);\n    vec2 offsetRight = vec2(-.01, 0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvUp = uv + offsetUp;\n    vec2 uvRight = uv + offsetRight;\n\t\n#if 1 // Debug, set to zero to make scene static\n    float tTime = iTime;\n#else\n    float tTime = 1.;\n#endif\n    \n    // Location to sample from (don't use as world coord since this is all jacked up)\n    vec3 samplerPos = vec3(uv.x/10.+tTime/55., uv.y/10.+tTime/24., tTime/45.5);\n    vec3 samplerPosUp = vec3(uvUp.x/10.+tTime/55., uvUp.y/10.+tTime/24., tTime/45.5);\n    vec3 samplerPosRight = vec3(uvRight.x/10.+tTime/55., uvRight.y/10.+tTime/24., tTime/45.5);\n    float height =      fbm(samplerPos, oct, freq, amp, lac, persist);\n    float heightUp =    fbm(samplerPosUp, oct, freq, amp, lac, persist);\n    float heightRight = fbm(samplerPosRight, oct, freq, amp, lac, persist);\n    \n    // Get the \"world\" position of the three sampled locations\n    vec3 pos = vec3(uv, height * heightScale);\n    vec3 posUp = vec3(uvUp, heightUp * heightScale);\n    vec3 posRight = vec3(uvRight, heightRight * heightScale);\n    \n    // Get the normal of the fragment by taking the cross product of the vectors pointing to 2 neighboring samples\n    vec3 dirA = normalize(pos - posUp);\n    vec3 dirB = normalize(pos - posRight);\n    vec3 normal = normalize(cross(dirB, dirA));\n    \n    // specular\n    vec3 reflectDir = reflect(-sunDir, normal);\n    float spec = 0.0;\n    spec = pow(max(dot(viewDir, reflectDir), 0.0), invShininess);\n    vec3 specular = spec * vec3(1); // or any other sun color you want, white is just simple\n    \n    // Output to screen\n#if 1\n    vec3 color = waterColor + specular;\n    fragColor = vec4(color, 1.0);\n    //fragColor = vec4(vec3(height, heightUp, heightRight),1.0);\n#else\n    // Debug (transform the normal from [-1,1] -> [0,1] so it can be displayed as a color)\n    normal = normal * .5 + 1.;\n    fragColor = vec4(vec3(normal),1.0);\n#endif\n}","name":"Image","description":"","type":"image"}]}