{"ver":"0.1","info":{"id":"ttyXDW","date":"1582712611","viewed":101,"name":"Spirogragh","username":"foez","description":"inspired from this video https://www.youtube.com/watch?v=klHUOS76AbM","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","spirograph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define N 20\n#define PI 3.14\n\nfloat dLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    \n    float t = dot(pa, ba)/dot(ba, ba);\n    t = clamp(t, 0., 1.);\n    return length(pa-ba*t);\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b) {\n    float d = dLine(p, a, b);\n    return smoothstep(.006, 0., d);\n}\n\n\nvec3 getCol(vec2 uv)\n{\n    vec3 col = vec3(0);\n    float time = iTime;\n    vec2 p[N];\n    float r = .5;\n    p[0] = vec2(0, r);\n    \n    vec3 c1 = vec3(1, 0, 0);\n    vec3 c2 = vec3(1);\n    \n    for(int i=0;i<N;i++) {\n        float theta = float(i)*2.*PI/float(N) + sign(sin(time+sin(time+sin(time)))*sin(time*3.));\n        float c = cos(theta);\n        float s = sin(theta);\n        p[i] = r*vec2(c, s);\n    }\n    \n    vec3 b = vec3(1, 0, 0);\n    vec3 red = vec3(0,0,1);\n    for(int i=0;i<N;i++) {\n        col += red*Line(uv, p[i], p[i]);\n    }\n    \n    \n    int pa = (N/2)%N;\n    float d1 = 100000.;\n    for(int i=0;i<N/2;i++){\n        d1 = min(d1, dLine(uv, p[pa], p[i]));\n        pa = (pa+1)%N;\n        d1 = min(d1, dLine(uv, p[pa], p[i]));\n        pa = (pa+1)%N;\n    }\n    \n    pa = (0);\n    float d2 = 100000.;\n    float spr = mix(200., 1000., fract(time));\n    \n    float circle = length(uv) - r;\n    col += c1*(1./(spr*d1));\n    \n    float mask = step(0., -circle)*(1.-smoothstep(0.01, 0., d1));\n    \n    for(int i=N/2;i<N;i++){\n        d2 = min(d2, dLine(uv, p[pa], p[i]));\n        pa = (pa+1)%N;\n        d2 = min(d2, dLine(uv, p[pa], p[i]));\n        pa = (pa+1)%N;\n    }\n    \n    col += (mask)*c2*(1./(spr*d2));\n   \treturn col;  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv = 1. -2. * uv;\n    uv.x *= iResolution.x/iResolution.y;\n    uv /= 1.5;\n    // Time varying pixel color\n    vec3 col = getCol(uv);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}