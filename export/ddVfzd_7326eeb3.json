{"ver":"0.1","info":{"id":"ddVfzd","date":"1698553574","viewed":357,"name":"GM Shaders: Tonemaps","username":"Xor","description":"A quick tonemap demo for my [url=https://mini.gmshaders.com/p/tonemaps]tutorial[/url].\n    ","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"GM Shaders: Tonemaps\" by @XorDev\n\n    A quick tonemap demo for my tutorial:\n    https://mini.gmshaders.com/p/tonemaps\n*/\n#define TONEMAP -1\n\n#define TM_NONE   0\n#define TM_ACES   1\n#define TM_HABLE  2\n#define TM_UNREAL 3\n#define TM_TANH   4\n\n// Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n// https://www.shadertoy.com/view/llXyWr\nvec3 Tonemap_ACES(vec3 x)\n{\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\n// Hable 2010, \"Filmic Tonemapping Operators\"\n// http://filmicworlds.com/blog/filmic-tonemapping-operators/\nvec3 Tonemap_Uncharted2(vec3 x)\n{\n    x *= 16.0;\n    const float A = 0.15;\n    const float B = 0.50;\n    const float C = 0.10;\n    const float D = 0.20;\n    const float E = 0.02;\n    const float F = 0.30;\n    \n    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\n\n// Unreal 3, Documentation: \"Color Grading\"\n// https://www.shadertoy.com/view/llXyWr\nvec3 Tonemap_Unreal(vec3 x)\n{\n    // Adapted to be close to Tonemap_ACES, with similar range\n    // Gamma 2.2 correction is baked in, don't use with sRGB conversion!\n    return x / (x + 0.155) * 1.019;\n}\n\n// My tanh tonemap\nvec3 Tonemap_tanh(vec3 x)\n{\n    x = clamp(x, -40.0, 40.0);\n    return (exp(x)-exp(-x)) / (exp(x)+exp(-x));\n}\n\n//Demo\nvoid mainImage( out vec4 fragColor, vec2 fragCoord)\n{\n    //Resolution, position and offset vector\n    vec2 r = iResolution.xy;\n    vec2 p = (fragCoord*2.0-r)/r.y;\n    vec2 v = vec2(.8*cos(iTime),.3);\n    \n    vec4 col = vec4(0,0,0,1);\n    //Center ring\n    col.rgb += vec3(0.3,0.1,1.0) / max(abs(length(p  )-.4), 1e-5);\n    //Green ring\n    col.rgb += vec3(0.1,0.4,0.1) / max(abs(length(p+v)-.1), 1e-5);\n    //Orange ring\n    col.rgb += vec3(0.5,0.2,0.1) / max(abs(length(p-v)-.1), 1e-5);\n    \n    //Select tonemap\n    int t = TONEMAP<0? int(iTime)%5 : TONEMAP;\n    //Apply tonemap\n    if (t == TM_NONE)\n        col.rgb = (col.rgb / 1e1);\n    else if (t == TM_ACES)\n        col.rgb = Tonemap_ACES(col.rgb / 4e1);\n    else if (t == TM_HABLE)\n        col.rgb = Tonemap_Uncharted2(col.rgb / 4e1);\n    else if (t == TM_UNREAL)\n        col.rgb = Tonemap_Unreal(col.rgb / 4e1);\n    else\n        col.rgb = Tonemap_tanh(col.rgb / 4e1);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}