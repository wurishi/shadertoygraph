{"ver":"0.1","info":{"id":"sdscDs","date":"1642952482","viewed":427,"name":"insulate","username":"jt","description":"Turn a 2d SDF into a 3d SDF by combining distance to 2d \"skeleton\"/\"core\" with distance to plane, like insulation around a wire.\nCould be used to render fast foliage given a fast 2d distance-field. Unfortunately the resulting SDF is not exact.","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","sdf","distance","skeleton","wrap","core","bound","extrude","2dto3d","insulate","embed","wireify","stringify","3dify"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/sdscDs insulate 2022-1-23 by Jakob Thomsen\n// To render foliage which is mostly 2d it would be nice to have an operator\n// which turns a 2d SDF into a 3d SDF by giving the 2d SDF 3d thickness\n// (i.e. embed the 2d sdf in 3d by projection onto a plane)\n// Let's try the \"insulate\" (wireify? stringify?) operator:\n//     float insulate(vec3 p, dist_fn2d f)\n//     {\n//         float dp = p.z; // distance to plane\n//         float df = f(p.xy); // distance to 2d SDF \"surface\" (sign disappears in square below)\n//         return sqrt(dp * dp + df * df); // combine distances (wrap 2d core/skeleton in 3d distance-field)\n//     }\n// This operator seems so simple and so efficient that I'm sure someone discovered it before me\n// (if so, please let me know by posting a link).\n// Otherwise I'll place this in the public domain -\n// use it however you like as long as you don't misrepresent the origin and don't try to copyright it.\n\n// Actually due to squaring of the input distance, the sign is effectively ignored -\n// so perhaps the input should be considered to be an udf rather than an sdf\n// (the output would be an udf too, but can be turned into a sdf by subtracting a constant).\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\nfloat box2d(vec2 p)\n{\n    vec2 d = abs(p) - 1.0;\n    return min(max(d.x, d.y),0.0) + length(max(d, 0.0));\n}\n\nfloat circle2d(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat segment2d(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat insulate_box(vec3 p)\n{\n    float dp = p.z; // distance to plane\n    float d = box2d(p.xy); // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat insulate_boxes(vec3 p)\n{\n    float dp = p.z; // distance to plane\n    float d = abs(abs(box2d(p.xy)) - 0.5) - 0.25; // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat insulate_circle(vec3 p)\n{\n    float dp = p.z; // distance to plane\n    float d = circle2d(p.xy, 1.0); // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat insulate_circles(vec3 p)\n{\n    float dp = p.z; // distance to plane\n    float d = abs(abs(circle2d(p.xy, 1.0)) - 0.5) - 0.25; // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat insulate_segment(vec3 p)\n{\n    float dp = p.z; // distance to plane\n    float d = segment2d(p.xy, vec2(-1.5), vec2(+1.5)); // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat map(vec3 p)\n{\n    float d = mix(0.01, 0.1, 0.5 + 0.5 * cos(iTime));\n    return\n        min\n        (\n            min\n            (\n                min\n                (\n                    insulate_circles(p) - d,\n                    insulate_boxes(p) - d\n                ),\n                insulate_segment(p) - d\n            ),\n            halfspace(p, -1.2)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 2.0 * pi * fract(iTime * 0.1);\n    my = (iMouse.y != 0.0) ? my : pi * 3.0 / 4.0;;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX); // XXX artifacts on cylinder XXX\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}