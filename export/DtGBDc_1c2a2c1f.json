{"ver":"0.1","info":{"id":"DtGBDc","date":"1702541558","viewed":49,"name":"Simple Grid Pattern","username":"marktulewicz","description":"A simple grid that alternates colors on the even and odd tiles.\n\nSplit into Chunks, Tiles, and Cells\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#ifdef GAME\nuniform vec3      iResolution;\nuniform float     iTime;\nuniform float     iChannelTime[4];\nuniform vec4      iMouse;\nuniform vec4      iDate;\nuniform float     iSampleRate;\nuniform vec3      iChannelResolution[4];\nuniform int       iFrame;\nuniform float     iTimeDelta;\nuniform float     iFrameRate;\nuniform vec3      iCameraPosition;\n\nuniform mat4 projection; \nuniform mat4 view;\nuniform mat4 model;\nuniform mat3 normalMatrix;\n\nin vec3 WorldPos;\nin vec2 TexCoords;\n\nlayout(location = 0) out vec4 FragColor;\n\n\n#endif\n\n\nvec2 chunkSize = vec2(256.0, 256.0);\nvec2 tileSize = vec2(64.0, 64.0);\nvec2 cellSize = vec2(8.0, 8.0);\n\nfloat chunkThickness = 4.0;\nfloat tileThickness = 2.0;\nfloat cellThickness = 1.0;\n\nvec4 fillEven = vec4(0xC6,0xC4,0xC7, 255.0) / 255.0;\nvec4 fillOdd = vec4(0xBF,0xBD,0xC0, 255.0) / 255.0;\n\nvec4 cellStroke = vec4(0xAB, 0xBD, 0xD8, 255.0) / 255.0;\nvec4 stroke = vec4(0xF2, 0xD3, 0x98, 255.0) / 255.0;\n\nvec4 gridColor( out vec4 fragColor, in vec2 fragCoord, in float d)\n{\n    \n    vec2 uv = fragCoord.xy;\n    vec2 derivative = fwidth(uv);\n\n    float aa = length(fwidth(uv));\n    float aScale = chunkThickness;\n    float bScale = tileThickness;\n    float cScale = cellThickness;\n\n    vec2 halfChunkSize = chunkSize / 2.0;\n    vec2 halfTileSize =  tileSize / 2.0;\n    vec2 halfCellSize =  cellSize / 2.0;\n\n    vec2 aGrid = abs(mod(uv - halfChunkSize, chunkSize) - halfChunkSize) / derivative;\n    vec2 bGrid = abs(mod(uv - halfTileSize, tileSize) - halfTileSize) / derivative;\n    vec2 cGrid = abs(mod(uv - halfCellSize, cellSize) - halfCellSize) / derivative;\n    \n    vec2 fillMod = floor(uv / tileSize);    \n    \n    float oddness = fract((fillMod.x + fillMod.y) / 2.0) * 2.0;\n    \n    vec4 cellStrokeDynamic = (fillEven + fillOdd) / 2.2;\n    vec4 strokeDynamic = (fillEven + fillOdd) / 2.4;\n\n    vec4 colorVal = mix(\n        fillEven, \n        fillOdd,  \n        smoothstep(0.0, 1.0, (oddness))\n    );       \n\n    colorVal = mix(\n        colorVal, \n        cellStrokeDynamic, \n        smoothstep(cScale, .0, min(cGrid.x, cGrid.y))\n    );\n\n    colorVal = mix(\n        colorVal, \n        strokeDynamic, \n        smoothstep(aScale, .0, min(aGrid.x, aGrid.y))\n    );\n\n    colorVal = mix(\n        colorVal, \n        strokeDynamic, \n        smoothstep(bScale, .0, min(bGrid.x, bGrid.y))\n    );\n     \n    return colorVal;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    vec4 color = vec4(1e20);\n        \n    fragCoord -= iTime * 10.0;\n        \n    color = vec4(gridColor(color, fragCoord, 1.0));\n\n    if (color.w < 0.5)\n    {\n        discard;\n    }\n\n    fragColor = vec4(color.xyz, 1);  \n}\n\n#ifdef GAME\n\nvoid main( void )\n{\n    mainImage(FragColor, TexCoords);\n}\n\n#endif\n","name":"Image","description":"","type":"image"}]}