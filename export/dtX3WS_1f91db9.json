{"ver":"0.1","info":{"id":"dtX3WS","date":"1672335858","viewed":452,"name":"2D SDF with circles & smooth min","username":"lorismat_","description":"Distance to a circle","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","circle","distance"],"hasliked":0,"parentid":"dlfGRs","parentname":"Fork Disk - dis lorismat_ 757"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// smooth min implementation and SDF in 2d with circles\n// from Inigo Quilez articles!\n// smooth min: \n// https://iquilezles.org/articles/smin/\n// sdf in 2d:\n// https://iquilezles.org/articles/distfunctions2d/\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat smin(float a, float b, float k) {\n    float h = max(k - abs(a-b), 0.) / k;\n    return min(a, b) - h*h*h*k*1./6.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pix = 2./iResolution.y;  \n\n\tvec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\tvec2 m = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float f = 0.9;\n\n\tfloat d = sdCircle(p,0.8);\n    float dd = sdCircle(m+vec2(sin(iTime*f + 1.)*1.5,sin(iTime*f + 1.)*0.4),0.2);\n    \n    vec3 col = vec3(1.);\n    \n    col = mix(col, vec3(0.), smoothstep(-pix,pix, smin(d,dd,1.0) - .0375 ));\n    col = mix(col, vec3(0.), smoothstep(pix,-pix, smin(d,dd,0.3) - .0065 ));\n\t\n    fragColor = vec4(1.-col,1.0);\n}","name":"Image","description":"","type":"image"}]}