{"ver":"0.1","info":{"id":"4sVfRD","date":"1527814315","viewed":120,"name":"Display persistence test #1","username":"Quinchilion","description":"Idea based on https://www.testufo.com/eyetracking#pattern=checkerboard\n\nYou should see lines when you focus on the stationary dot in the center of the screen.\nYou should see a moving checkerboard pattern when looking on the moving dots.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Idea based on https://www.testufo.com/eyetracking#pattern=checkerboard\n// Assumes 60 frames per second, does not do any explicit synchronization\n\nconst float line_width = 2.0;\nconst float cell_size = 18.0;\nconst vec3 line_color = vec3(1.0);\nconst float dot_size = 8.0;\nconst float dot_spacing = 300.0;\nconst vec3 dot_color = vec3(1.0, 1.0, 0.0);\n\nfloat motionCheckers(vec2 pos) {\n\t// Repeats this pattern in time and space:\n    // |   ->   | -> |   ->   | -> ...\n    //   | -> |   ->   | -> |   -> ...\n    // (arrows denote frame progression)\n    \n    vec2 cellf = fract(pos / cell_size);\n    bool oddFrame = fract(float(iFrame) / 2.0) >= 0.5;\n    \n    bool activeLine = cellf.x > 0.5 ^^ cellf.y > 0.5 ^^ oddFrame;\n    \n    bool line = fract(cellf.x * 2.0) <= (2.0 * line_width / cell_size);\n    \n\treturn float(line && activeLine);\n}\n\nfloat leadingDot(vec2 pos) {\n    // Draws a dot that follows the checkerboard pattern\n    pos.x -= iTime * cell_size * (60.0 / 2.0);\n    \n\tvec2 dotp = (fract(pos / dot_spacing) - 0.5) * dot_spacing;\n    bool isDot = dot(dotp, dotp) <= (dot_size * dot_size);\n    \n    return float(isDot);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 pos = fragCoord - iResolution.xy / vec2(2.0);\n    \n    // Simple wave pattern that is only visible in the motion blur\n    vec2 sinPos = vec2(pos.x, pos.y + sin(pos.x / 50.0) * 15.0);\n\n\tvec3 c = motionCheckers(sinPos) * line_color;\n    \n    c = mix(c, dot_color, leadingDot(sinPos));\n    \n    float stationaryDot = float(dot(pos, pos) <= (dot_size * dot_size));\n    c = mix(c, dot_color, stationaryDot);\n    \n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}