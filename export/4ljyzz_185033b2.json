{"ver":"0.1","info":{"id":"4ljyzz","date":"1507213678","viewed":86,"name":"Another Julia Set Shader","username":"nr4","description":"This is a standard Julia set shader for a polynomial with degree 2.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/** Julia set shader\n    Copyright (C) 2017  Alexander Kraus <nr4@z10.info>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst float pi = acos(-1.);\n\nmat2 complex(float re, float im)\n{\n    return mat2(re,im,-im,re);\n}\n\nmat2 poly2(mat2 z, mat2 c)\n{\n    return z*z+c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.*(fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n    \n    mat2 z = mat2(uv.x, uv.y, -uv.y, uv.x);\n    int ncalls = 0, ncalls_max = 40;\n    \n    for(int i=0; i<ncalls_max; ++i)\n    {\n        z = poly2(z, complex(-.8, 0.2));\n    }\n    \n    vec4 start = vec4(49./255., 255./255., 4./255., 1.);\n    vec4 end = vec4(232./255., 14./255., 18./255., 1.);\n    \n\tfragColor = start + (determinant(z))*(end-start);\n}","name":"Image","description":"","type":"image"}]}