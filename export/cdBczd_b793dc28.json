{"ver":"0.1","info":{"id":"cdBczd","date":"1688025154","viewed":104,"name":"Simple GT Spot Arealight","username":"APassbyDreg","description":"an area spotlight groundtruth on diffuse surface","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["spotlight","arealight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfragColor = vec4(pow(clamp(texture(iChannel0, fragCoord.xy / iResolution.xy).rgb, 0., 1.), vec3(1./2.2)), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SAMPLES 4\n\nfloat seed = 0.;\nfloat rand() { return fract(sin(seed++)*43758.5453123); }\n\nfloat sample_light(vec3 p, vec3 n)\n{\n    vec3 pos = vec3(2.0, 0.2, 2.0);\n    vec3 dir = normalize(vec3(-1.0, -0.2, -1.0));\n    vec3 u = cross(dir, vec3(0, 1, 0));\n    vec3 v = cross(u, dir);\n    vec2 extent = vec2(2.0, 0.1);\n    vec2 angle_factor = vec2(0.8, 0.9);\n    float intensity = 1.0;\n    \n    vec3 l = pos + extent.x * u * rand() + extent.y * v * rand();\n    float angle = dot(normalize(p - l), dir);\n    float attn = 1.0;\n    if (angle < angle_factor.y)\n    {\n        attn = smoothstep(angle_factor.x, angle_factor.y, angle);\n    }\n    \n    return attn * dot(normalize(l - p), n) * intensity / dot(l - p, l - p);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n\tseed = iTime + iResolution.y * fragCoord.x / iResolution.x + fragCoord.y / iResolution.y;\n\tvec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n    vec3 color = vec3(0.0);\n\tfor (int i = 0; i < SAMPLES + min(0, iFrame); ++i)\n    {\n        vec2 pos = uv * iResolution.xy / iResolution.x * 4.0;\n        color += sample_light(vec3(pos.x, 0, pos.y), vec3(0, 1, 0));\n    }\n    vec4 accum = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    float samples = accum.a + float(SAMPLES);\n\tfragColor = vec4((accum.rgb * accum.a + color)/samples, samples);\n}","name":"Buffer A","description":"","type":"buffer"}]}