{"ver":"0.1","info":{"id":"XXlcWH","date":"1726106979","viewed":6,"name":"Cool SDF Link","username":"Quill","description":"For a computer graphics assignment","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//This function is copied from https://iquilezles.org/articles/distfunctions/. It is the Link (exact) function.\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n    vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n    return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\nmat3 rotation3dY(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat3(\n    c, 0.0, -s,\n    0.0, 1.0, 0.0,\n    s, 0.0, c\n  );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x - 0.5*(iResolution.x/iResolution.y);\n    uv.y = uv.y - 0.5;\n    vec2 Mouseuv = iMouse.xy/iResolution.yy;\n    Mouseuv.x = Mouseuv.x - 0.5*(iResolution.x/iResolution.y);\n    Mouseuv.y = Mouseuv.y - 0.5;\n    \n    float d = 0.0001f;\n    float t = 0.0;\n    float tdx = 0.0;\n    float tdy = 0.0;\n    vec3 col = vec3(0.0);\n    //col = vec3(cosNoise(vec2(uv.x\n    vec3 pt = vec3(uv.x, uv.y, 0.0);\n    vec3 ptdx = vec3(uv.x+d, uv.y, 0.0);\n    vec3 ptdy = vec3(uv.x, uv.y+d, 0.0);\n    vec3 dir = normalize(vec3(0.0, 0.0, 1.0));\n    vec3 linkPos = vec3(-0.39, 0.0, 10.0);\n    vec3 lightPos = vec3(Mouseuv, 0.0);\n    \n    const float len = 0.15, rad1 = 0.2, rad2 = 0.1;\n    \n    for(int i = 0; i < 25; i++) {\n        col = texture(iChannel1, uv-(iTime/3.0)).rgb;\n        vec3 pos = pt + dir * t;\n        vec3 posdx = ptdx + dir * tdx;\n        vec3 posdy = ptdy + dir * tdy;\n        float dist = sdLink(pos - linkPos, len, rad1, rad2);\n        float distdx = sdLink(posdx - linkPos, len, rad1, rad2);\n        float distdy = sdLink(posdy - linkPos, len, rad1, rad2);\n        float bound = 0.000001;\n        if (dist < bound && distdx < bound && distdy < bound) {\n            vec3 normal = cross(normalize(posdx - pos), normalize(pos - posdy));\n            col = vec3(1.0)*dot(normal, normalize(lightPos - pos));\n            col *= texture(iChannel0, (4.0*uv)+(iTime)).rrr;\n            break;\n        }\n        col *= texture(iChannel0, (4.0*uv)+(iTime)).rrr;\n        t += dist;\n        tdx += distdx;\n        tdy += distdy;\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}