{"ver":"0.1","info":{"id":"7tVXzD","date":"1640353719","viewed":255,"name":"Stars by MareeBree","username":"mareebree","description":"Stars Space Cosmos","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["space","stars","cosmos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Star\n{\n    float mask;\n    vec2 pos;\n    vec3 color;\n    float size;\n    float blinkSpeed;\n    float blinkOffset;\n};\n\nfloat rand(float co, float a, float b) \n{ return fract(sin(co*(a)) * b); }\nfloat rand(vec2 co, float a, float b, float c)\n{ return fract(sin(dot(co.xy ,vec2(a,b))) * c); }\nfloat rand(vec3 co, float a, float b, float c)\n{ return rand(co.xy+rand(co.z, a, b), a, b, c); }\n\n// All components are in the range [0â€¦1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat blur_mask(vec2 uv)\n{\n    float sum = 0.0f;\n    for(float i=-1.0f; i <= 1.0f; i++)\n    {\n        for(float j=-1.0f; j <= 1.0f; j++)\n        {\n            float eps = 0.03f;\n            sum += texture(iChannel0, uv + eps * vec2(i,j)).r;\n        }\n    }\n\n    return sum / 9.0f;\n}\n\nStar generate_star(vec3 cell_id)\n{\n    const vec3 starColorHSV = vec3(48.0f / 360.0f, 93.0f / 100.0f, 97.0f / 100.0f);\n\n    float rnd1 = rand(cell_id, 12.3213, 53.13214, 531431.13413);\n    float rnd2 = rand(cell_id, 764.312, 123.321313, 4143.31231);\n    float rnd3 = rand(cell_id, 53.1341, 631.1312, 5136.513);\n    float rnd4 = rand(cell_id, 15.1234, 51.3123, 7422.3123);\n    float rnd5 = rand(cell_id, 512.321, 123.312, 875875.142);\n    float rnd6 = rand(cell_id, 13.312, 87.3213, 16132.1234);\n    float rnd7 = rand(cell_id, 313.123, 977.123, 61232.1563);\n    \n    Star s;\n    s.pos = vec2(rnd1, rnd2);\n    s.size = 0.1 + 0.2 * rnd6;\n    s.blinkSpeed = 0.7f + rnd3 * 5.0f;\n    s.blinkOffset = rnd4;\n    s.mask = step(0.7f, rnd5);\n    s.color = hsv2rgb(starColorHSV + vec3(0.0f, -rnd7 * 0.5, rnd7 * 0.2));\n    return s;\n}\n\nfloat star_mask(vec2 uv, Star star)\n{\n    // normalize uv\n    uv = 2.0f * uv - 1.0f;\n    uv -= star.pos.x;\n\n    // Calculate fade\n    float fade_value = sin(iTime * star.blinkSpeed + star.blinkOffset);\n    fade_value = 0.5 * fade_value + 0.5; // [0,1]\n    fade_value = 0.5 * fade_value + 0.5; // [0.5,1]\n    \n    // Star mask\n    float d1 = length(uv);\n    float d2 = abs(uv.x) + abs(uv.y);\n    float d = mix(d1,d2,1.0 / fade_value * 3.0 * length(uv));\n    float mask = 1.0f - d / star.size;\n    mask *= star.mask;\n    \n    // apply blink\n    mask *= fade_value;\n    \n    return max(0.0f, mask);\n}\n\nvec3 star_layer(vec2 uv, float layerIndex)\n{\n    vec3 color = vec3(0.0f);\n    float starNumFactor = 15.0f + layerIndex * 15.0f;\n    float starTint = max(1.0 - 0.2 * layerIndex, 0.0);\n    \n    vec2 layer_uv = fract(uv * starNumFactor);\n    vec2 layer_id = floor(uv * starNumFactor);\n    \n    //if(layerIndex == 0.0f && (layer_uv.x > .9f || layer_uv.y > .9f))\n    //    color.r += 1.0f;\n    \n    for(float i = -1.0f; i <= 1.0f; i++)\n    {\n        for(float j = -1.0f; j <= 1.0f; j++)\n        {\n            vec3 cell_id = vec3(layer_id + vec2(i,j), layerIndex);\n            Star star = generate_star(cell_id);\n            vec2 uv = layer_uv - vec2(i,j);\n            color += star_mask(uv, star) * star.color * starTint;\n        }\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen setup\n    vec2 global_uv = fragCoord/iResolution.xy;\n    global_uv.x *= iResolution.x / iResolution.y;\n    \n    // Background\n    vec3 bgColor1 = vec3(37.0f/255.0f ,27.0f/255.0f,66.0f/255.0f);\n    vec3 bgColor2 = vec3(32.0f/255.0f ,17.0f/255.0f, 46.0f/255.0f);\n    float bgMask = blur_mask(fract(global_uv * 2.0f));\n    vec3 finalColor = mix(bgColor2, bgColor1, bgMask);\n    \n    // Star layer\n    float numLayers = 5.0f;\n    for(float i=0.0f; i < numLayers; i++)\n    {\n        // Space movement\n        // WHY is this increasing speed over time ?!?!?!\n        //float shiftAngle = sin(0.1f * iTime) * 3.14f;\n        float shiftAngle = 38.0f;\n        vec2 shiftDirection = vec2(cos(shiftAngle), sin(shiftAngle));\n        float shiftSpeed = 0.1f / (1.0f + 2.0f * i);\n        vec2 star_layer_uv = shiftDirection * (shiftSpeed * iTime) + global_uv;\n        \n        finalColor += star_layer(star_layer_uv, i);\n    }\n    \n    // Final\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}