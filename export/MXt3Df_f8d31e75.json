{"ver":"0.1","info":{"id":"MXt3Df","date":"1717098992","viewed":20,"name":"Texture/ Shader Assignment","username":"MaxEmilien","description":"Cube shader depending on x, y value","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://github.com/leadedge/ShaderMaker/issues/4\n//https://stackoverflow.com/questions/58684315/shadertoy-fragcoord-vs-iresolution-vs-fragcolor\n//https://stackoverflow.com/questions/73325982/re-defining-shader-variables-draws-them-all\n \nconst vec3 lightDir = normalize(vec3(-1.0, 1.0, 1.0)); \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\n    vec3 cameraPos = vec3(0.0, 0.0, 3.0);\n    vec3 cameraDir = normalize(vec3(0.0, 0.0, -1.0));\n    vec3 cameraRight = normalize(cross(vec3(0.0, 1.0, 0.0), cameraDir));\n    vec3 cameraUp = normalize(cross(cameraDir, cameraRight));\n    float fov = radians(45.0);\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    vec3 rayDir = normalize(cameraDir + uv.x * cameraRight * aspectRatio * tan(fov / 2.0) + uv.y * cameraUp * tan(fov / 2.0));\n\n    float t = 100.0; \n    vec3 normal; \n\n    vec3 invDir = 1.0 / rayDir;\n    vec3 tMin = (vec3(-1.0) - cameraPos) * invDir;\n    vec3 tMax = (vec3(1.0) - cameraPos) * invDir;\n\n    vec3 t1 = min(tMin, tMax);\n    vec3 t2 = max(tMin, tMax);\n\n    t = max(max(t1.x, t1.y), t1.z);\n    float tmax = min(min(t2.x, t2.y), t2.z);\n\n    if (t < tmax) {\n        vec3 intersection = cameraPos + rayDir * t;\n        normal = sign(intersection) * step(abs(intersection), vec3(1.0));\n    } else {\n        discard; \n    }\n\n    float diffuse = max(dot(normal, lightDir), 0.0);\n\n    vec3 color = vec3(0.8 + 0.8 * sin(iTime), 0.5 + 0.5 * cos(iTime), 0.5 + 0.5 * sin(iTime + 1.0));\n\n    fragColor = vec4(color * diffuse, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}