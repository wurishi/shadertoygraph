{"ver":"0.1","info":{"id":"wdtGW4","date":"1568661201","viewed":250,"name":"Star Wars Cellular Automaton","username":"ailanthus","description":"A variant of Star Wars lifelike cellular automaton with extra states.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["automata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float state = texture(iChannel0, fragCoord.xy/iResolution.xy).r;\n    fragColor.rgb = hsb2rgb(vec3(state+.7, .98, state+.1));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//uniform float survive = 12.5;\n//uniform float someConstantValue = 12.5\n#define STATES 50.\n\nfloat get(vec2 pos){\n\treturn (texture(iChannel0, mod(pos/iResolution.xy, 1.))).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 on = vec4(1.);\n    vec4 off = vec4(vec3(0), 1.);\n    vec4 prev = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    fragColor = prev;\n    \n    \n    //if (iTime <= 0.){\n     //   float n = step(texture(iChannel1, fragCoord.xy/iResolution.xy).x, .43);\n     //   fragColor = vec4(n);\n    //}////\n    if((iFrame==0)||(length(iMouse.xy-fragCoord))<5.0)\n    {\n        //fragColor=vec4((fract(dot(sin(fragCoord*vec2(157.1,113.7)), vec2(353.17+iTime,383.093-iTime)))>0.33)?0.0:1.0);\n    }\n    if (length(iMouse.xy-fragCoord)<5.0)\n    {\n        fragColor=on;\n    \t//fragColor=vec4((fract(dot(sin(fragCoord*vec2(157.1,113.7)), vec2(353.17+iTime,383.093-iTime)))>0.33)?0.0:1.0);;\n    }\n    else {\n        float state = get(fragCoord.xy);\n        // in a classic CA, extra states are all just dying. so we just move to the next state.\n        if (state > .001 && state < .99){\n            fragColor.r-=1./(STATES-1.);\n            if (fragColor.r < 0.01){\n                fragColor = off;\n            }\n        }\n        else{\n            int count = 0;\n            if (get(fragCoord.xy+vec2(0., 1.)) > .9) count++;\n            if (get(fragCoord.xy+vec2(0., -1.)) > .9) count++;\n            if (get(fragCoord.xy+vec2(1., 0.)) > .9) count++;\n            if (get(fragCoord.xy+vec2(-1., 0.)) > .9) count++;\n            if (get(fragCoord.xy+vec2(1., 1.)) > .9) count++;\n            if (get(fragCoord.xy+vec2(-1., -1.)) > .9) count++;\n            if (get(fragCoord.xy+vec2(1., -1.)) > .9) count++;\n            if (get(fragCoord.xy+vec2(-1., 1.)) > .9) count++;\n            //if (state < .5/(STATES-1.))\n            if (state < .999){ // if state is 0\n                if (count == 2){\n               \t fragColor = on;\n                }\n        \t}\n            // DIE\n            else if(count<3 || count >5)\n                fragColor-=1./(STATES-1.);\n                //fragColor = off;\n                //fragColor.b *= 1.2;\n             //fragColor = vec4(state);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}