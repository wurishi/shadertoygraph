{"ver":"0.1","info":{"id":"MdcfD2","date":"1526757022","viewed":282,"name":"Skull ASCII Shader","username":"coburn","description":"This is a fork of https://www.shadertoy.com/view/lssGDj\nAnnotated with comments on the internals and fucking around with new characters...","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fork","ascii","skull"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//FORK OF: https://www.shadertoy.com/view/lssGDj\n\n// Bitmap to ASCII (not really) fragment shader by movAX13h, September 2013\n// This is the original shader that is now used in PixiJs ans various other products.\n\n// Here's a little tool for new characters: thrill-project.com/archiv/coding/bitmap/\n\nfloat character(float n, vec2 p)\n{\n\tp = floor(p*vec2(4.0, -4.0) + 2.5); //[-1,1],[-1,1] => [-4,4],[4,-4] + 2.5\n\tif (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y) //Creates a border for each character\n\t{\n        //Read the bitmap, output 1 if there's a pixel...\n\t\tif (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\n\t}\n    //Otherwise return 0\n\treturn 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Get the UV of image (bottom left, [0,resolution.x], [0,resolution.y])\n\tvec2 uv = fragCoord.xy;\n    //Color pixelated at every 8 pixels\n\tvec3 col = texture(iChannel0, floor(uv/16.0)*16.0/iResolution.xy).rgb;\n\t//Weighted color => black and white\n\tfloat gray = 0.3 * col.r + 0.59 * col.g + 0.11 * col.b;\t\n\t\n    //Choose ASCII character using gray value and encoded bitmap\n\tfloat n =  4096.0;             // .\n\tif (gray > 0.2) n = 65600.0;    // :\n\tif (gray > 0.3) n = 332772.0;   // *\n\tif (gray > 0.4) n = 15255086.0; // o \n\tif (gray > 0.5) n = 23385164.0; // &\n\tif (gray > 0.6) n = 15252014.0; // 8\n\tif (gray > 0.7) n = 13199452.0; // @\n\tif (gray > 0.8) n = 11512810.0; // #\n    \n    if (gray > 0.5) n = 11524078.0; //Skull\n    else n = 4096.0;\n\t\n\tvec2 p = mod(uv/8.0, 2.0) - vec2(1.0); //Every 4 units, sweep from -1.0 to 0.9999\n\tcol = col*character(n, p); //Generate character for bitmap and fill using color\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}