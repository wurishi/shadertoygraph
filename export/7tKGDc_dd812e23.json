{"ver":"0.1","info":{"id":"7tKGDc","date":"1638483526","viewed":148,"name":"Rorschach's Game Of Death","username":"bignobody","description":"After iterating on a Game of Life shader, I had the idea to make this. Produces a different result each run. Sometimes the results are symmetrical, sometimes they start that way and get chaotic, sometimes they are asymmetrical.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PIXELSCALE 2.0\n// After iterating on a Conway's Game of Life shader\n// I got the idea to make this. Special thanks to The Art of Code.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    fragColor = texelFetch(iChannel0,ivec2(max((fragCoord.yx-vec2(-iResolution.y+sin(iTime*0.5)*iResolution.x*0.5,(iResolution.x)-((iResolution.x*0.5)+iResolution.y)))/PIXELSCALE, 1.0)),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define FRAMEDELAY 1\n#define FADERATE 0.0002\n#define INITFRAMES 50\n#define COLLAPSEINIT true\n#define DENSITY 2.0\n#define HIGHLIFE false\n// Change INITFRAMES to something larger to give you time to hit the FULLSCREEN button :D\n// Change HIGHLIFE to true to enable the Highlife variant (dead with 6 neighbours comes to life)\n\nfloat n21(vec2 p)\n{\n    p = fract(p * iDate.zw);\n    p += (dot(p,p*iDate.xy));\n    return (fract(p.x*p.y));\n}\n\nint getNeighbours(ivec2 p)\n{\n    int num = 0;\n    for (int y = -1; y <=1; y ++)\n    {\n        for (int x = -1; x <= 1; x ++)\n        {\n            if (x == 0 && y == 0) continue;\n           num += texelFetch(iChannel0, p + ivec2(x,y),0).b < .1 ? 1 : 0;\n        }\n    }\n    return num;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if (iFrame < INITFRAMES)\n    {\n        vec2 gv = fract(uv)*(COLLAPSEINIT ? iDate.ww : iDate.xy); //\"collapse\" mode initializes with larger numbers producing lines\n        col = vec4(pow(n21(gv),min(max(24.0-DENSITY,1.0),28.0))); \n    }\n    else\n    {\n        if (iFrame % max(FRAMEDELAY,1) == 0)\n        {\n            float v = texelFetch(iChannel0, ivec2(fragCoord), 0).b;\n            bool alive = v < 0.1;\n            int n = getNeighbours(ivec2(fragCoord));\n            float r = 0.9;\n            float g = 0.95;\n            float b = 0.92;\n            if (alive && (n ==2 || n == 3))\n            {\n                r = 0.1;\n                g = 0.005;\n                b = 0.01;\n                if (n == 2)\n                {\n                    r = 0.12;\n                    b = 0.09;\n                }\n            }\n            else if (alive)\n            {\n                //just died.\n                r = 0.1;\n                g = 0.1;\n                b = 0.1;\n\n            }\n            if (!alive && ((n == 3)||(HIGHLIFE && n == 6)) )\n            {\n                r = 0.0;\n                b = 0.0;\n                g = 0.0;\n                v = 0.0;\n                                          \n            }\n            \n            if (v >= 0.1 && v < 0.95)\n            {\n                v += FADERATE;\n                b = min(v,0.92);\n                g = min(v+FADERATE,0.95);\n                r = min(v+FADERATE,0.9);\n                \n            }\n            \n            col = vec4(r,g,b,1.0);\n        }\n    }\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}