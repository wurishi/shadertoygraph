{"ver":"0.1","info":{"id":"ttfXW7","date":"1563181005","viewed":139,"name":"Hex Hex Test","username":"lzjseed","description":"Hex Hex  Test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void sincos(float a,out float b,out float c)\n{\n    b = sin(a);\n    c = cos(a);\n}\n\n#define RadToDeg(a) ((a) * 180.0 / 3.1415926)\n#define DegToRad(a) ((a) * 3.1415926 / 180.0)\n\nfloat Hex(vec2 p,float r,float d)\n{    \n    p = abs(p);\n\n    float s,c;\n    sincos(DegToRad(d),s,c);\n\n    return smoothstep(r * 0.98,r,max(p.x*s + p.y*c,p.y));\n    //return smoothstep(r * 0.98,r,max(p.x*.866025 + p.y*.5,p.y));\n}\n\nvec3 pow3(vec3 p,float s)\n{\n    return vec3(pow(p.x,s),pow(p.y,s),pow(p.z,s));\n}\n\nvec3 calNormal(vec2 pos)\n{\n    float s = iResolution.x / iResolution.y;\n    \n   \tvec2 n1 = vec2(0.0,1.0);\n    vec2 n2 = vec2(0.866025,0.5);\n    vec2 n3 = vec2(0.866025,-0.5);\n    vec2 n4 = vec2(0.0,-1.0);\n    vec2 n5 = vec2(-0.866025,-0.5);\n    vec2 n6 = vec2(-0.866025,0.5);\n    \n    vec2 p0 = normalize(vec2(pos.x - 0.5*s,pos.y - 0.5));\n    \n    if(acos(dot(n1,p0)) <= 3.1415926 / 6.0)\n    {\n        p0 = mix(p0,n1,smoothstep(3.14159126 / 5.0,3.14159126 / 6.0,acos(dot(n1,p0))));\n    }\n    else if(acos(dot(n2,p0)) <= 3.1415926 / 6.0)\n    {\n        p0 = mix(p0,n2,smoothstep(3.14159126 / 5.0,3.14159126 / 6.0,acos(dot(n2,p0))));\n    }\n    else if(acos(dot(n3,p0)) <= 3.1415926 / 6.0)\n    {\n        p0 = mix(p0,n3,smoothstep(3.14159126 / 5.0,3.14159126 / 6.0,acos(dot(n3,p0))));\n    }\n    else if(acos(dot(n4,p0)) <= 3.1415926 / 6.0)\n    {\n        p0 = mix(p0,n4,smoothstep(3.14159126 / 5.0,3.14159126 / 6.0,acos(dot(n4,p0))));\n    }\n    else if(acos(dot(n5,p0)) <= 3.1415926 / 6.0)\n    {\n        p0 = mix(p0,n5,smoothstep(3.14159126 / 5.0,3.14159126 / 6.0,acos(dot(n5,p0))));\n    }\n    else if(acos(dot(n6,p0)) <= 3.1415926 / 6.0)\n    {\n        p0 = mix(p0,n6,smoothstep(3.14159126 / 5.0,3.14159126 / 6.0,acos(dot(n6,p0))));\n    }\n    \n    return normalize(vec3(p0.x,p0.y,0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float count = 3.0;\n    vec2 uv = fragCoord / iResolution.xy;\n\t\n   \tfloat s = iResolution.x / iResolution.y;\n    \n    vec2 uv2 = fract(uv * count);\n    \n    uv2.x *= s;\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 bump = vec3(0.0,0.0,1.0);\n    vec3 col = calNormal(uv2);\n\t\n    float mask1 = 1.0;\n    mask1 = mix(mask1,0.0,Hex(uv2 - vec2(0.5*s,0.5),0.5,60.0));\n    mask1 = mix(0.0,mask1,Hex(uv2 - vec2(0.5*s,0.5),0.45,60.0));\n    \n    vec2 uv3 = fract((uv+vec2(0.5,0.5)) * count);\n    \n    uv3.x *= s;\n    \n    vec3 col2 = calNormal(uv3);\n    \n    float mask2 = 1.0;\n    mask2 = mix(mask2,0.0,Hex(uv3 - vec2(0.5*s,0.5),0.5,60.0));\n    mask2 = mix(0.0,mask2,Hex(uv3 - vec2(0.5*s,0.5),0.45,60.0));\n    \n    vec3 finalCol = mix(bump,vec3(mask1 * col + mask2 * col2),mask1 + mask2) * 0.5 + 0.5;\n    //Gamma Correct\n    finalCol = pow3(finalCol,0.4545);\n    // Output to screen\n    fragColor = vec4(finalCol,1.0);\n}","name":"Image","description":"","type":"image"}]}