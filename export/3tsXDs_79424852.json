{"ver":"0.1","info":{"id":"3tsXDs","date":"1564668862","viewed":219,"name":"fractal flame v2","username":"jorge2017a1","description":"fractal flame v2","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractalflamev2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Creado por Hirai_worthless en 2019-07-31\n//modificado por jorge flores p.\n\nmat2 genRot(float val){\n\treturn mat2(cos(val),-sin(val),sin(val),cos(val));\n}\nfloat PI = 3.14159265;\nvec3 path(float t){\n\tfloat x = clamp(sin(t) * pow(2.0,0.5),-1.0,1.0);\n    float y = clamp(cos(t) * pow(2.0,0.5),-1.0,1.0);\n    float z = 0.2;\n    return vec3(x,y,z);\n}\nfloat grid(vec3 p, float a){\n    //p.xz *= genRot(iTime);\n    //p = fract(p / a) * a;\n    p = fract(p ) ;\n    \n    \n    p -= vec3(a / 1.5);\n\t\n    \n    \n    float d1 = max(abs(p.x),abs(p.y)) - a/(15.0);\n\tfloat d2 = max(abs(p.y),abs(p.z)) - a/(15.0);\n\tfloat d3 = max(abs(p.z),abs(p.x)) - a/(15.0);\n    \n\treturn (min(min(d1,d2),d3));\n}\nfloat map(vec3 p){\n\tfloat k = grid(p,1.0);\n    \n    for(float i = 2.0; i < 6.0; i++  ){\n        k = max(k,-grid(p,1.0/i));\n    }\n    return k;\n}\n\nconst float EPS = 0.001;\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(p + vec3(EPS, 0.0, 0.0)) - map(p + vec3(-EPS,  0.0,  0.0)),\n        map(p + vec3(0.0, EPS, 0.0)) - map(p + vec3( 0.0, -EPS,  0.0)),\n        map(p + vec3(0.0, 0.0, EPS)) - map(p + vec3( 0.0,  0.0, -EPS))\n    ));\n}\n\nvec4 trace (vec3 o, vec3 r){\n\tfloat t = 0.0;\n    vec3 p = vec3(0.3,0.12,0.10);\n    \n    for(int i = 0; i < 128; ++i){\n        p = o + r * t;\n        float d = map(p);\n        t += d * 0.7;\n    }\n    return vec4(getNormal(p),t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float stime;\n    stime=iTime*0.1;\n    \n    float PI = 3.14159265;\n    vec2 uv = fragCoord.xy /iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv,1.5));\n    \n    r.xz *= genRot(stime);\n    \n    \n    vec3 o = vec3(  1.2,  0.5 + stime * 1.0 , cos(stime * PI / 4.) * 1.2);\n   \n    vec4 data = trace(o,r);\n    float t = data.w;\n    float fog = 1.0 / (1.0 + t * t * 0.05);\n    vec3 fc = mix(vec3(0.3 - data.x,0.6 -data.y,0.5-data.z),vec3(0.),1.0 - fog);\n\t//fc = vec3(fog);\n    // Output to screen\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}