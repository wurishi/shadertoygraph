{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define S(a, b, c) smoothstep(a, b, c)\n#define t iTime\n\nfloat Circle(vec2 uv, vec2 p, float r, float width, float blur){\n    \n\n    float d = length(uv-p);\n    float c = S(r, r-blur, d);\n    float c2 = S(r-width, r-blur-width, d);\n    return c-c2;\n\n}\n\n\nfloat sigmoid(float x) {\n    float expX = exp(x);\n    return expX / (expX + 1.);\n}\n\n\nfloat drop(vec2 uv, vec2 p, float w, float k, float phase){\n\n    float z = sin(-w*t + k*length(uv-p) + phase) * 0.5 + 0.5;\n    //z = S(z, z-0.1, 0.5);\n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    //uv *= 3.1;\n    \n    vec2 m = iMouse.xy/iResolution.xy;\n    m -= 0.5;\n    m.x *= iResolution.x/iResolution.y;\n\n\n\n    float d = length(uv);\n    \n    float col = S(0.3,0.33,d);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    \n    //col = Circle(uv, vec2(0.0, 0.0), sin(iTime), 0.03, 0.01);\n    float z = 0.0;\n    \n    float TAU = 1.0;\n    vec2 p = vec2(0.0,0.0);\n    z += 0.2*drop(uv, vec2(-0.25,-0.25), 5.0, 25.0, 0.0);\n    z += 0.2*drop(uv, vec2(-0.25,0.25), 2.0, 25.0, 0.);\n    z += 0.2*drop(uv, vec2(0.3,0.3), 2.0, 25.0, .0);\n    z += 0.2*drop(uv, vec2(-0.3,0.3), 2.0, 25.0, 0.0);\n    //z = mix(z, drop(uv, vec2(0.0,0.0), 2.0, 25.0, 3.14/2.0), 0.5);\n    //z = mix(z, drop(uv, vec2(0.0,0.0), 2.0, 25.0, 3.14/2.0), 0.5);\n    //z = S(z,z-0.1,0.5);\n    //z += drop(uv, vec2(0.3,0.3), 3.0, 20.0, 3.0* (iTime) );\n    //z = Circle(uv, vec2(0.0, 0.0), abs(sin(iTime))*0.5, 0.03, 0.01);\n    //z += sin(-3.0*t + 3.0*length(uv+p )*5.0);\n    \n    //vec3 col = vec3(0.0);\n\n\tif( iMouse.z>0.0 ) // button is down\n\t{\n        float zz = drop(uv, m, 3.0, 20.0, iTime*3.0);\n        z = mix(z, zz, 0.5);\n        //z = zz;\n        //z += 0.5*Circle(uv, m.xy , 0.3,0.01,0.01);\n        \n\t}\n    //z = 0.5*Circle(uv,vec2(0,0) , 10.0, 10.0,0.01);\n    \n\n    \n    ///fragColor = vec4(vec3( sigmoid(z) ),1.0);\n    fragColor = vec4(vec3( z ),0.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"mtdGWs","date":"1683636934","viewed":31,"name":"wave interference test","username":"darkdivan","description":"wave interference.\ntodo:\n - make the wave source stay in place after letting go of LMB\n - make the wave start from the source and spread (and die out)\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"","parentname":""}}