{"ver":"0.1","info":{"id":"dtGGWW","date":"1684070432","viewed":133,"name":"Biquadratic equations (quartic)","username":"Poisson","description":"Biquadratic equation solver, this is a quartic special case: ax^4 + bx^2 + c = 0","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","sdf","intersection","graph","plot","solver","quadratic","quartic","equation","maths","root","intersector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// circle sdf\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\n// segment sdf\nfloat sdSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0., 1.);\n    return length(pa - ba*h);\n}\n\n// ray sdf\n// o is the origin\n// d is the direction\nfloat sdRay(vec2 p, vec2 o, vec2 d) {\n    vec2 po = p-o;\n    float h = dot(po,d);\n    return length(po - d*h);\n}\n\n// sdf antialiasing function\nfloat antialias(float d) {\n    #if 1\n    float idf = iResolution.y;\n    #else\n    float dx = dFdx(d);\n    float dy = dFdy(d);\n    float idf = 1./length(vec2(dx,dy));\n    #endif\n    return clamp(.5-d*idf, 0., 1.);\n}\n\n// biquadratic function sdf approximation\n\n// f(x) = ax^4 + bx^2 + c\n// f'(x) = 4ax^3 + 2bx; -> this is the dervate of f(x)\n// x and y are the coordinates of the point\n\n//          f(x) - y\n// d ≈ -------------------\n//      sqrt(1 + f'(x)^2)\n\nfloat sdBiquadratic(vec2 p, float ka, float kb, float kc) {\n    float x2 = p.x*p.x, x3 = x2*p.x;\n    float h = sqrt(1.+16.*ka*ka*x3*x3 + 16.*ka*kb*x2*x2 + 4.*kb*kb*x2); // sqrt(1 + f'(x)^2)    \n    return (p.y - ka*x2*x2 - kb*x2 - kc) / h;\n}\n\n/*\n\nlet's solve equation ax^4 + bx^2 + c = 0\nlet's say: X = x^2\nwe get: aX^2 + bX + c = 0\nwe can easily solve this equation using quadratic formulas:\n\nΔ = b^2 - 4ac\nX1 = -b - sqrt(Δ) / (2a)\nX2 = -b + sqrt(Δ) / (2a)\n\nso we have 4 roots:\nx1 = sqrt(X1)\nx2 = sqrt(X2)\nx3 = -sqrt(X1)\nx4 = -sqrt(X2)\n\n*/\n\nvec4 solveBiquadratic(float a, float b, float c) {\n    float h = b*b - 4.*a*c; // discriminant\n    if (h<0.) return vec4(-1); // no real solutions\n    \n    h = sqrt(h);\n    vec2 res = -b + vec2(1,-1)*h;\n    res = sqrt(res/(2.*a));\n    return vec4(res,-res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p =  (fragCoord - .5*iResolution.xy) / iResolution.y;\n    // normalized mouse coordinates\n    vec2 mo = (iMouse.xy - .5*iResolution.xy) / iResolution.y;\n      \n    // 3 parameters of the equation\n    float ka = 5.*cos(iTime+6.);\n    float kb = 3.*sin(iTime*1.5 + 9.);\n    float kc = .07*sin(iTime+6.5);\n      \n    vec3 col;\n      \n    { // draw background\n    col = vec3(.45+.55*p.y)*.03;\n    col *= 1.+.35*smoothstep(.5,-.5,cos(p.x*64.)*cos(p.y*64.)); // grid\n\n    // axis\n    float d = min(abs(p.x),abs(p.y));\n    col = mix(col, vec3(.75), antialias(d-.0025));\n    }\n    \n    { // draw curve\n    float d = sdBiquadratic(p, ka, kb, kc); // distance\n    col = mix(col, vec3(1), .02*step(d,0.)); // fill\n    col = mix(col, vec3(1), antialias(abs(d)-.004)); // outline\n    }\n\n    { // draw solutions\n    vec4 res = solveBiquadratic(ka, kb, kc); // solutions of the equation\n    \n    // intersection points sdf\n      float d1 = sdCircle(p-vec2(res.x,0), .02);\n    d1 = min(d1, sdCircle(p-vec2(res.z,0), .02));\n      float d2 = sdCircle(p-vec2(res.y,0), .02);\n    d2 = min(d2, sdCircle(p-vec2(res.w,0), .02));\n    \n    // draw intersection points\n    col = mix(col, vec3(1,.7,.06), antialias(d1));\n    col = mix(col, vec3(.05,.2,1), antialias(d2));\n    }\n        \n    col = pow(col, vec3(.4545)); // gamma correction\n    \n    // vignette\n    vec2 q = fragCoord/iResolution.xy;\n    col *= .4+.6*pow(16. * q.x*q.y*(1.-q.x)*(1.-q.y), .1);\n            \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}