{"ver":"0.1","info":{"id":"ldy3zc","date":"1455593124","viewed":431,"name":"WTH-Fractal","username":"tayholliday","description":"Raymarching of a fractal.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","raymarch","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// A simple fractal.\n// From https://www.shadertoy.com/view/MslGWN\nfloat field(in vec3 p,float s) {\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n\tfloat accum = s/4.;\n\tfloat prev = 0.;\n\tfloat tw = 0.;\n\tfor (int i = 0; i < 26; ++i) {\n\t\tfloat mag = dot(p, p);\n\t\tp = abs(p) / mag + vec3(-.5, -.4, -1.5);\n\t\tfloat w = exp(-float(i) / 7.);\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n\t\ttw += w;\n\t\tprev = mag;\n\t}\n\treturn max(0., 5. * accum / tw - .7);\n}\n\nconst float mindist = 1.0;\nconst float maxdist = 4.0;\n\nfloat map2( vec3 p ) {\n \n    float t = field(p,.5);\n    \n    return t;\n}\n\n// From https://www.shadertoy.com/view/MtX3Ws\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    float t = tminmax.x;\n    //float d2 = .02\n    float dt = .2 * sin(iTime*.1);\n    //float dt = .2 - .195*cos(iTime*.05);//animated\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<10; i++ )\n\t{\n        t+=dt*exp(-2.*c);\n        if(t>tminmax.y)break;\n        \n        c = map2(ro+t*rd);               \n        \n        //col = .99*col+ .08*vec3(c*c, c, c*c*c);//green\t\n        col = .99*col+ .08*vec3(c*c*c, c*c, c);//blue\n    }    \n    return col;\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    return raymarch(ro, rd, vec2(mindist, maxdist));\n}\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    vec2  p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n    float an = 1.87 - 0.04*(1.0-cos(0.5*iTime));\n\n    vec3  ro = vec3(-0.4,0.2,0.0) + 2.2*vec3(cos(an),0.0,sin(an));\n    vec3  ta = vec3(-0.6,0.2,0.0);\n    mat3  ca = setCamera( ro, ta, 0.0 );\n    vec3  rd = normalize( ca * vec3(p,-2.8) );\n\n    vec3 col = render( ro, rd );\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}