{"ver":"0.1","info":{"id":"ttfBW8","date":"1708282111","viewed":27,"name":"My 3DDDD","username":"ArmanD","description":"Try to click and drag.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["b"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define ratio (iResolution.x/iResolution.y)\n#define mv (((iMouse.xy/iResolution.y)-vec2(0.5*ratio,0.5) )*20.)\n#define nrz normalize\n#define pixSize (vec2(1.,ratio)/iResolution)\n\n\n#define PI 3.141592\n#define zero vec3(0.,0.,0.)\n#define one vec3(1.,1.,1.)\n#define white vec3(1.,1.,1.)\n#define red vec3(1.,0.,0.)\n#define green vec3(0.,1.,0.)\n#define blue vec3(0.,0.,1.)\n#define black vec3(0.,0.,0.)\n\nvec3 to(vec3 v1 , vec3 v2){\n  return v2-v1;\n  }\n  vec3 rot(vec3 v,vec3 a){\n    mat3 mx = mat3(1.,    0.,      0.,\n                   0.,cos(a.x),-sin(a.x),\n                   0.,sin(a.x),cos(a.x));\n   mat3 my = mat3(cos(a.y),0.,sin(a.y),\n                   0.,     1.,   0.,\n                 -sin(a.y),0.,cos(a.y));\n  mat3 mz = mat3(cos(a.z),-sin(a.z),0.,\n                 sin(a.z),cos(a.z), 0.,\n                   0.,      0.,     1.);\n    return v* mx*my*mz;\n\n    }\n    float sin2(float f){\n      return sin(f)*sin(f);\n      }\n    float cos2(float f){\n      return cos(f)*cos(f);\n      }\n    float angle(vec3 v1,vec3 v2){\n        return acos(dot(v1,v2));\n        }\n    vec2 AAAOangle(vec3 v){\n        v = (v);\n        vec3 s =  sign(v);\n\n  vec2 re = vec2(angle((vec3(v.x,0.,v.z)),blue)*s.y,\n              angle((vec3(0.,v.y,v.z)),blue)*s.x\n                    );\n          return re;\n        }\nfloat planeY(vec2 ux,vec2 angle,vec3 sPos, vec3 ro){\n   //ux = ux.yx;\n   // angle.y = angle.x;\n\tvec3 a = sPos+vec3(cos(angle.y),sin(angle.y),0.);\n    vec3 b = a+vec3(-sin(angle.y),cos(angle.y),0.);\n    vec3 t = to(a,b);\n    float c =  -( t.y*a.x -t.x*a.y );\n    float d =  (t.y*ux.x +c)/t.x;\n    vec3 fPos = vec3(ux,d);\n    if (length(fPos.xz)>sqrt(2.))\n      d = -10.;\n    return d;\n}\nfloat planeX(vec2 ux,vec2 angle,vec3 sPos, vec3 ro){\n    //ux = ux.yx;\n\tvec3 a = sPos+vec3(cos(angle.x),sin(angle.x),0.);\n    vec3 b = a+vec3(-sin(angle.x),cos(angle.x),0.);\n    vec3 t = to(a,b);\n    float c =  -( t.y*a.x -t.x*a.y );\n    float d =  (t.y*ux.y +c)/t.x;\n    vec3 fPos = vec3(ux,d);\n    if (length(fPos.yz)>sqrt(2.))\n      d = -10.;\n    return d;\n}\nfloat getDist(vec2 uv,vec2 angle,vec3 sPos,vec3 ro){\n       vec2 ux = uv*sPos.z;\n        float l = length(ux);\n    \tfloat d = min( \n            max(\n            max(planeY(ux,angle,sPos,ro),planeY(ux,angle+PI/2.,sPos,ro)),\n                      max(planeY(ux,angle+PI,sPos,ro),planeY(ux,angle-PI/2.,sPos,ro))\n        \t\t\t\t  ),\n            max(planeX(ux,angle+PI/2.,sPos,ro),planeX(ux,angle-PI/2.,sPos,ro)) \n                     );\n    \n     \n        return sin(acos(pow(l,1.)));\n  }\nvec3 getNormal(vec2 uv,vec2 angle,vec3 sPos,vec3 ro){\n\n   \n    vec2 ux = uv*sPos.z;\n    float d = getDist(uv, angle,sPos,ro);\n\n    vec3 lPos = vec3(ux,d);\n    vec3 fragPos = sPos-lPos;\n\nvec2 e = vec2 (1./iResolution.x / 1., 0. );\nvec3 p = vec3(ux,d);\nvec3 p1 = vec3(ux+e.xy,getDist(uv+e.xy/sPos.z,angle,sPos,ro));\nvec3 p2 = vec3(ux+e.yx,getDist(uv+e.yx/sPos.z,angle,sPos,ro));\n\nvec3 n = cross(to(p,p1),to(p,p2));\nn.z = abs(n.z);\nn = -nrz(n);\nn = rot(n,vec3(angle,0.));\n  return d>-10. ? n : zero;\n  }\n\nvec3 getColor(vec2 uv){\nvec3 sPos = vec3(0.,0.,5.);\nvec3 ro = sPos + //rot(rot(-blue,vec3(0.,(mv.x),0.)),vec3(mv.y,0.,0.));\n    \t\t\t+  vec3(sin(mv.x),1.,cos(mv.x));\n    \t\t\t//+  vec3(2.,sin(mv.y),cos(mv.y));\n                //+ vec3(sin(mv.y),cos(mv.y),-0.);\n      //    zero;cos(mv.x),\n        vec2 angle = AAAOangle(to(sPos,ro));\nvec3 normal = getNormal(uv,angle,sPos,ro);\n    vec2 ux = uv*sPos.z;\nvec3 fragPos = sPos + vec3(ux,-getDist(uv,angle,sPos,ro));\nfloat r = 20.;\nfloat t = iTime*2.;\n//directional lights\n  /* vec3 toLight = vec3(sin(t)*r,20.,cos(t)*r);\nfloat bri = dot(normal,normalize(toLight));\n//*/ // point lights\n     vec3 pl= vec3 (sin(t)*r,20.,cos(t)*r)+sPos;\n              //vec3 (10.,20.,0.);\nvec3 toLight = to(fragPos,pl);\nfloat bri = max(dot(-normal,nrz(toLight)),0.)+max(dot(normal,nrz(toLight)),0.);\n   bri/=length(toLight)/20.;//att //*/\nreturn vec3(bri);\n  }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 ux = fragCoord.xy / iResolution.xy;\n  vec2 uv = fragCoord.xy / iResolution.y;\n  uv -= vec2(0.5*ratio,0.5);\n\n  //anti aliasing\n  int calcColCount=1;\n    vec3 col = vec3(0.);\n    /*for(int i =0;i<calcColCount;i++){\n      col += getColor(uv+(pixSize/\n\n      col += getColor(uv+(pixSize/3.)*vec2(1.,-1.));\n      col += getColor(uv+(pixSize/3.)*vec2(-1.,1.));\n      col += getColor(uv+(pixSize/3.)*-1.);\n        float(calcColCount+1)\n        *float(i)\n        ));\n      }\n      col /= float(calcColCount);//*/\n    col = getColor(uv);\nfragColor=vec4(col,1.0);\n     \n}\n","name":"Image","description":"","type":"image"}]}