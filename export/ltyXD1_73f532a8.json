{"ver":"0.1","info":{"id":"ltyXD1","date":"1484168905","viewed":615,"name":"Logistic map Fourier transform","username":"piotrekli","description":"Taking the Fourier transform of iterations of the logistic map.\nUpdate 15.04.2017:  random frequency on Y (=antialiasing) (Buf B/line 22), lighter color","likes":9,"published":1,"flags":48,"usePreview":0,"tags":["2d","fractal","spectrum","map","chaos","logistic","fourier","bifurcation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = atan(0.0, -1.0);\n\nmat2 rotation(float angle)\n{\n    float cosine = cos(angle);\n    float sine = sin(angle);\n    return mat2(cosine, -sine, sine, cosine);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ft = texture(iChannel0, uv).xy;\n    float af = PI*uv.y;\n    vec4 t = texture(iChannel1, vec2(uv.x, 0.));\n    ft -= vec2(0.5, 0.5/tan(af*0.5))*t.y/t.z;\n\tfragColor = vec4(log(400.0*length(ft)/float(t.z)+1.0)*0.6);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n/* LOGISTIC MAP */\nfloat  lm(float a, float r) { return r*a*(1.0-a); }\n\n/* ???\nfloat  lm(float a, float r) { return cos(r*a)*0.5+0.5; }\n*/\n\n/* TENT MAP\nfloat  lm(float a, float r) { return r-r*abs(a-0.5)*2.0; }\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y != 0.5) return;\n    float uvx = (fragCoord.x+hash11(iTime+0.38275))/iResolution.x;\n    float r = mix(3.0, 4.0, uvx);\n    vec4 a = vec4(0.5, 0.0, 0.0, 0.0);\n    if (iFrame > 0 && !(texture(iChannel3, vec2(32.0/255.0, 0.5)).x > 0.5))\n        a = texture(iChannel0, fragCoord/iResolution.xy);\n    float b = lm(a.x, r);\n    fragColor = vec4(b, a.y+b, a.z+1.0, 0.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nconst float PI = atan(0.0, -1.0);\n\nmat2 rotation(float angle)\n{\n    float cosine = cos(angle);\n    float sine = sin(angle);\n    return mat2(cosine, -sine, sine, cosine);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float af = PI*((fragCoord.y+hash11(iTime+0.65464))/iResolution.y);\n    if (iFrame <= 0 || texture(iChannel3, vec2(32.0/255.0, 0.5)).x > 0.5)\n    {\n        fragColor = vec4(0.0, 0.0, 1.0, 0.0);\n        return;\n    }\n    fragColor = texture(iChannel1, uv);\n    vec4 t = texture(iChannel0, vec2(uv.x, 0.));\n    float signal = t.x; //- t.y/t.z; // high pass\n    fragColor.xy += fragColor.zw * signal;\n    fragColor.zw *= rotation(af);\n}","name":"Buf B","description":"","type":"buffer"}]}