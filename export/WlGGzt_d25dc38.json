{"ver":"0.1","info":{"id":"WlGGzt","date":"1579566164","viewed":593,"name":"Symmetric Nearest-Neighbour blur","username":"fenwick67","description":"Proof of concept implementing the Symmetric Nearest Neighbour smoothing algorithm as detailed in https://observablehq.com/@jobleonard/symmetric-nearest-neighbour-all-the-things. This is only box blur.\n\nChange r on line 73 to change the blur radius.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["postprocessing","blur","smoothing","cartoonify"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define CHANNEL iChannel0\n#define colorDist colorDistFast\n\nfloat colorDistFast(vec4 c1, vec4 c2){\n\tfloat dr = c1.r - c2.r;\n    float dg = c1.g - c2.g;\n    float db = c1.b - c2.b;\n    return dr * dr + dg * dg + db * db;\n}\n\nfloat colorDistAccurate(vec4 c1, vec4 c2){\n\tvec4 c = c1 - c2;\n    float y = c.r * 0.2124681075446384 + c.g * 0.4169973963260294 + c.b * 0.08137907133969426;\n  \tfloat i = c.r * 0.3258860837850668 - c.g * 0.14992193838645426 - c.b * 0.17596414539861255;\n  \tfloat q = c.r * 0.0935501584120867 - c.g * 0.23119531908149002 + c.b * 0.13764516066940333;\n  \treturn y*y + i*i + q*q;\n}\n\n\n// pick one of the 4 diagonal pixels!\n// d.x must not be zero\nvec4 pick4(vec2 center, vec2 d){\n    \n    float closest_dist = 10000000000000.0f;\n    vec4 pick;\n    vec4 sampCenter = texture(CHANNEL, center/ iResolution.xy);\n    \n\tvec4 samp;\n    float dist;\n    \n\tsamp = texture(CHANNEL, (center+d) / iResolution.xy);\n    dist = colorDist(sampCenter, samp);\n    if (closest_dist > dist){\n        pick = samp;\n        closest_dist = dist;\n    }\n    samp = texture(CHANNEL, (center-d) / iResolution.xy);\n    dist = colorDist(sampCenter, samp);\n    if (closest_dist > dist){\n        pick = samp;\n        closest_dist = dist;\n    }\n    \n    samp = texture(CHANNEL, (center+vec2(d.y*-1.0f, d.x)) / iResolution.xy);\n    dist = colorDist(sampCenter, samp);\n    if (closest_dist > dist){\n        pick = samp;\n        closest_dist = dist;\n    }\n    samp = texture(CHANNEL, (center-vec2(d.y*-1.0f, d.x)) / iResolution.xy);\n    dist = colorDist(sampCenter, samp);\n    if (closest_dist > dist){\n        pick = samp;\n        closest_dist = dist;\n    }\n    \n    return pick;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tif (fragCoord.x < iMouse.x){// show unmodified\n\t\tfragColor = texture(CHANNEL, fragCoord.xy / iResolution.xy);\n    } else if (abs(fragCoord.x - iMouse.x) < 1.5f){// render line\n    \tfragColor = vec4(1.0f, 1.0f, 1.0f, 2.0f) - texture(CHANNEL, fragCoord.xy / iResolution.xy);\n    }else {// blur\n        \n\t\tint r = 5;\n        vec3 color;\n\t\t\n\t\tfor (int i=1; i <= r; i++)\n\t\t{\n\t\t\tfor (int j=0; j <= r; j++)\n\t\t\t{\n\t\t\t\tcolor += pick4(fragCoord.xy, vec2(i, j)).rgb;\n\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tfragColor = vec4(color/float(r*(r+1)), 1.0);\n\t}\n}","name":"Image","description":"","type":"image"}]}