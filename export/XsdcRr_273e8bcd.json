{"ver":"0.1","info":{"id":"XsdcRr","date":"1517795032","viewed":307,"name":"It wasn't me, it was PIXI 4!","username":"hanz","description":"Just testing a - simple - frag shader that I still can't get to work properly in PIXI.js v4.7.0. With this test I can now rest assure that it wasn't me, but an issue in PIXI. Somehow , in PIXI, the coords are off.  ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","simple","math","testing","projection","plane","perspective","pixi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 detectOutside( vec2 uv ) \n{\n\tif (length(clamp(uv, vec2(0.0, 0.0), vec2(1.0, 1.0)) - uv) == 0.0)\n\t\treturn vec4(texture(iChannel0, uv).xyz, 1.0);\n\telse\n\t\treturn vec4(0, 0, 0, 0);\n\n}\n\n\nvec2 rotate( vec2 v, vec2 o, float a )\n{\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * (v-o) + o;\n}\n\n\n#define Max_Rotation 0.65\n#define Mouse_Rotation ( Max_Rotation - Max_Rotation * 2.0 * (iMouse.xy / iResolution.xy) )\n#define RotationCenter vec2( 0.0, 0.0 )\n\n\nvec2 TransformPlane( vec2 uv, vec2 center, float XRot, float YRot )\n{\n    //around y-axis\n    vec2 RayDirection =  vec2(uv.x, 0.0);\n    vec2 A1 = vec2(0.0, -1.0);\n    vec2 B1 = RayDirection - A1;\n    vec2 C1 = rotate(vec2(-1.0, 0.0), vec2(center.x, 0.0), YRot);\n    vec2 D1 = rotate(vec2( 1.0, 0.0), vec2(center.x, 0.0), YRot) - C1;\n    //intersection point\n    float u = ( (C1.y + 1.0) * D1.x - C1.x * D1.y ) / (D1.x*B1.y-D1.y*B1.x);\n    //pos. on plane\n    float sx = u * B1.x;\n \tfloat sy = u * uv.y;\n    //around x-axis\n    RayDirection = vec2(sy, 0.0);\n    vec2 B2 = RayDirection - A1;\n    vec2 C2 = rotate(vec2(-1.0, 0.0), vec2(center.y, 0.0), XRot);\n    vec2 D2 = rotate(vec2( 1.0, 0.0), vec2(center.y, 0.0), XRot) - C2;\n    //intersection point\n    float v = ( (C2.y + 1.0) * D2.x - C2.x * D2.y ) / (D2.x*B2.y-D2.y*B2.x);\n    //final pos. on plane:\n    return vec2(v * sx, v * B2.x );\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    float R_X = iMouse.w > 0.0 ? Mouse_Rotation.y : Max_Rotation*cos(iTime);\n    float R_Y = iMouse.w > 0.0 ? Mouse_Rotation.x : Max_Rotation*sin(iTime);\n    vec2 MyCoords = TransformPlane(uv, RotationCenter, R_X, R_Y);\n    vec2 MyTexCoord = (MyCoords+1.0)/2.0;\n    \n    \n    fragColor = vec4(detectOutside(MyTexCoord.xy));\n    \n}","name":"Image","description":"","type":"image"}]}