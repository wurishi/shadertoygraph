{"ver":"0.1","info":{"id":"NdBGDR","date":"1617197475","viewed":567,"name":"Vogel Disk Sampling","username":"Tech_","description":"Here is a shader about vogel disk sampling! Enjoy!","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["sampling","disk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 GetVogelDiskSample(int sampleIndex, int sampleCount, float phi) \n{\n    const float goldenAngle = radians(180.0) * (3.0 - sqrt(5.0));\n    float sampleIndexF = float(sampleIndex);\n    float sampleCountF = float(sampleCount);\n    \n    float r = sqrt((sampleIndexF + 0.5) / sampleCountF);  // Assuming index and count are positive\n    float theta = sampleIndexF * goldenAngle + phi;\n    \n    float sine = sin(theta);\n    float cosine = cos(theta);\n    \n    return vec2(cosine, sine) * r;\n}\n\n#define TOTAL_SAMPLES int((sin(iTime * 0.2) * 0.5 + 0.5) * 120.0 + 20.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.3;\n\n    vec3 col;\n    \n    const float phi = 1.6180;\n    float minDist = 10000.0;\n    \n    for (int i = 0; i < TOTAL_SAMPLES; i++) \n    {\n        vec2 point = GetVogelDiskSample(i, TOTAL_SAMPLES, phi); \n        float d = distance(uv, point);\n        minDist = min(minDist, d);\n    }\n    \n    // Suggested by elenzil (https://www.shadertoy.com/user/elenzil)\n    float smoothEpsilon = 3.0 / iResolution.y;\n    col += smoothstep(0.03 + smoothEpsilon, 0.03 - smoothEpsilon, minDist);\n   \n    // col += step(minDist, 0.05);\n   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}