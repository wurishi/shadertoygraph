{"ver":"0.1","info":{"id":"NtKfDK","date":"1665262737","viewed":76,"name":"10.08.2022:ResistanceIsFutile","username":"g___r___e___g","description":"Ran out of mental energy to make the animation cycle smoothly.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fragtober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.2832\n#define MAX_DIST 10.\n\n// blackle noise\n#define FK(k) floatBitsToUint(cos(k))^floatBitsToUint(k)\nfloat hash(vec2 p) {\n  uint x = FK(p.x), y = FK(p.y);\n  return float((x-y*y)*(x*x+y)-x)/4.28e9;\n}\n\nvec2 rotate(vec2 p, float a) {\n  float s = sin(a), c = cos(a);\n  return mat2(c, -s, s, c) * p;\n}\n\nfloat sdBox(vec3 p, vec3 r) {\n  return length(max(vec3(0), abs(p) - r));\n}\n\nfloat scene(vec3 p) {\n  p.xz = rotate(p.xz, TAU/8.);\n  return sdBox(p, vec3(0.5));\n}\n\nvec3 sceneNormal(vec3 p) {\n  vec2 e = vec2(1e-4, 0);\n  return normalize(vec3(\n    scene(p + e.xyy) - scene(p - e.xyy),\n    scene(p + e.yxy) - scene(p - e.yxy),\n    scene(p + e.yyx) - scene(p - e.yyx)\n  ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float sf= 1. / min(iResolution.x, iResolution.y);\n  vec2 uv = sf * (fragCoord - .5 * iResolution.xy);\n  vec3 ro = vec3(0, 0, 2.5);\n  vec3 rd = normalize(vec3(uv, -0.75));\n  vec3 color = vec3(0.);\n\n  float t = mod(iTime * 0.8, 4.);\n  float aStep = 300.;\n  float angle = (atan(uv.y, uv.x) + TAU / 2.)/TAU;\n  float hAngle = hash(vec2(floor(angle * aStep)));\n  float hLength = hash(vec2(hAngle));\n  float hOpacity = hash(vec2(hLength)) * .5 + .5;\n  float dLine = length(uv);\n  float dStart = hAngle * 4. - t;\n  float dEnd = dStart + 0.05 + hLength / t * 0.25;\n  float dCut = 0.;\n  dCut += step(dStart, dLine);\n  dCut -= step(dEnd, dLine); \n  dCut *= floor(mod(aStep*angle, 2.));\n  color = mix(color, vec3(1, 1, 0.9) * hOpacity, dCut);\n\n  float d = 0.;\n  for (int i = 0; i < 100; i++) {\n    vec3 p = ro + rd * d;\n    float dS = scene(p);\n    if (abs(dS) < 1e-6) break;\n    d += dS;\n    if (d > MAX_DIST) break;\n  }\n\n  if (d < MAX_DIST) {\n    vec3 p = ro + rd * d;\n    float dif = dot(normalize(vec3(1)), sceneNormal(p)) + .6;\n    dif = clamp(dif, 0., 1.);\n    color = mix(color, dif * vec3(.5), 1.);\n  }\n\n  fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}