{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec4 mandel(vec3 pa)\n{\n    vec2 p = pa.xz;\n    vec2 res = vec2(5.0);\n\tfloat maxIter = 256.0;//(sin(iTime / 1.0) + 1.0) / 2.0 * 40.0;\n    vec2 r = (-res + 2.0 * p) / res.y;// / (((iTime / 100.0) * 1000.0) + 1.0);\n    vec2 z = vec2(sin(iTime) / 2.0,  (cos(iTime / 2.0)));\n    float zoom = 0.1;//(sin(iTime) + 2.0);\n    vec2 xy = vec2(r.x, r.y); //r.x + cos(iTime / 4.0) + 2.0\n    vec2 c = vec2(-0.245, 0.0) + xy / (zoom * 10.0);\n    float l = 0.0;\n    for(int i = 0; i >= 0; i++)\n\t{\n    \tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\t\tif(z.x * z.x + z.y * z.y > maxIter || l > maxIter) break; // z.x * z.x + z.y * z.y > maxIter to show regular\n\t\tl += 1.0;\n\t}\n    \n    int v = int(mod(l, 16.0)); //l + 1.0 - log(log(sqrt(z.x * z.x + z.y * z.y))) / log(2.0)\n    vec3 co = vec3(0.0);\n    if(v == 1) // wtf had to type out this monster because GLSL doesn't like dynamic array indexing\n        co = vec3(25, 7, 26);\n    else if(v == 2)\n        co = vec3(9, 1, 47);\n    else if(v == 3)\n        co = vec3(4, 4, 73);\n    else if(v == 4)\n        co = vec3(0, 7, 100);\n    else if(v == 5)\n        co = vec3(12, 44, 138);\n    else if(v == 6)\n        co = vec3(24, 82, 177);\n    else if(v == 7)\n        co = vec3(57, 125, 209);\n    else if(v == 8)\n        co = vec3(134, 181, 229);\n    else if(v == 9)\n        co = vec3(211, 236, 248);\n    else if(v == 10)\n        co = vec3(241, 233, 191);\n    else if(v == 11)\n        co = vec3(248, 201, 95);\n    else if(v == 12)\n    \tco = vec3(255, 170, 0);\n    else if(v == 13)\n        co = vec3(204, 128, 0);\n   \telse if(v == 14)\n        co = vec3(153, 87, 0);\n    else if(v == 15)\n        co = vec3(106, 52, 3);\n\t\n    co /= 256.0;\n    \n    return vec4(l / 256.0 / 1.5, co);\n}\n\nvec4 func(vec3 p)\n{\n    vec4 m = mandel(p - vec3(0.5, 0.0, 0.0));\n\treturn vec4(p.y - m.x, m.yzw);  \n}\n\nvec4 march( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 100.0;\n\tconst float prcsn = 0.001;\n    float h = prcsn * 2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    vec3 col; \n    \n    for(int i = 0; i < 128; i++)\n    {\n        if( h < prcsn || t > maxd ) break;\n\t    vec4 a = func(ro+rd*t);\n        h = a.x;\n        col = a.yzw;\n        t += h*.3;\n    }\n\n    if(t < maxd ) res = t;\n    return vec4(res, col);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    const float eps = 0.002;\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize(v1 * func(pos + v1 * eps).x + \n\t\t\t\t\t  v2 * func(pos + v2 * eps).x + \n\t\t\t\t\t  v3 * func(pos + v3 * eps).x + \n\t\t\t\t\t  v4 * func(pos + v4 * eps).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n\tvec3 ro = vec3(-1.0, 4.0, -1.0);//sin(iTime*0.1), 3.0, cos(iTime*0.1));\n    vec3 ta = vec3(0, 2.5, 0);\n    \n    float roll = 0.0;\n    \n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww,vec3(sin(roll),cos(roll),0.0)));\n    vec3 vv = normalize(cross(uu,ww));\n    \n    mat3 camMat = mat3(uu, vv, ww);\n    vec3 rd = normalize(camMat * vec3(uv.xy,2.0));\n    vec3 col = vec3(0.3, 0.3, uv.y);\n    vec3 lightDir = normalize(vec3(0.57703));\n\n    vec4 res = march(ro, rd);\n    float t = res.x;\n    vec3 co = res.yzw;\n\n    if( t > -0.5 ) {\n    \tvec3 p = ro + t * rd;\n        \n        vec3 c = vec3(max(p.y + 0.3, 0.1));//texture(iChannel0, p.xz).xyz;\n        vec3 n = calcNormal(p);\n        //n *= calcTexNormal(iChannel0, p.xz); // specular not working with this...\n    \n        float ambient = 0.2;\n        float b = max(ambient, clamp(dot(n, lightDir), 0.0, 1.0));\n                        \n\t    col = (co);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tlGzr","date":"1418273083","viewed":326,"name":"3D Mandelbrot Fake","username":"Slyth","description":"Some testing w awful code","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}