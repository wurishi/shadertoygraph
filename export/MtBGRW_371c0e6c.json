{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/* Compiled with Shaderforth: https://github.com/daeken/Shaderforth\nimport[ noise ]\nimport[ distance-2d ]\n\n:globals\n\ttrue =>shadertoy\n\t\t{\n\t\t\t@vec3 uniform =iResolution @float uniform =iTime\n\t\t\tiResolution .xy =>resolution\n\t\t\tiTime =>time\n\t\t}\n\t\t{ @vec2 uniform =resolution @float uniform =time }\n\tshadertoy cif\n\n\t( static-frame )\n\t@vec3 =accum\n;\n\n:struct material\n\t@vec3 =color\n\t@float =thickness\n\t@float =absorption\n;\n\n:m curve-steps 100 ;\n:m curve ( p a b c )\n\tcurve-steps upto {\n\t\t_ float curve-steps 1 - / =t\n\t\t\ta b t mix\n\t\t\tb c t mix\n\t\tt mix *p\n\t}\n;\n\n:m hash ( elems tfreq )\n\ttfreq 1000 / =>freq\n\telems /flatten-deep enumerate /{ =>[ _hi _hx ] _hi 1 + 7177 freq * * _hx 6599 freq * * _hi 1 + 5749 freq * * * + sin } \\*\n;\n\n:m grain ( x )\n\tx 50 * pnoise-2d .05 * .95 +\n;\n\n: square-impl ( p:vec2 pos:vec2 dim:vec2 rot:float mat:material )\n\tp rot rotate-2d =p\n\tp pos - dim box =>dist\n\t[ pos p - mat ] .9 hash =>grain-seed\n\tgrain-seed pos p - + grain =tex\n\tgrain-seed pos p - + 40 * pnoise-2d abs -200 * 290 + =>edge\n\tdist 0 1 clamp 10 edge + * 0 1 clamp =v\n\t\tmat .color tex *\n\t\t##fff\n\t\tv\n\tmix =>color\n\taccum mat .thickness .1 * 0 v mix - =accum\n\taccum accum color * mat .absorption mix =accum\n;\n\n:m square ( p pos dim rot mat )\n\t{ p pos dim rot neg deg->rad mat square-impl }\n;\n\n:m symm [ _ .x abs _ .y ] ;\n\nresolution frag->position =p\n\n##fff ##ddd p length .2 + 2.25 ** p 1000 * pnoise-2d .2 * + mix =>background\n\nbackground =accum\n\np symm =ps\n\n[\n\tps [ .05 -.15 ] [ .7 .4 ] 47 [ ##f00 1 .65 ] material square\n\tps [ .05 -.15 ] [ .6 time 3 * sin 20 ** .1 * + .3 time 3 * sin 20 ** .1 * + ] 47 [ ##f00 .7 .0 ] material square\n\tps [ .853 -.15 ] [ .1 .25 ] 47 [ ##f00 1 .625 ] material square\n\tps [ 1.006 -.15 ] [ .05 .1 ] 47 [ ##f00 1 .6 ] material square\n] =>layers\n\nlayers /call drop\n\naccum ->fragcolor\n*/\n\nstruct material {\n\tvec3 color;\n\tfloat thickness;\n\tfloat absorption;\n};\nvec3 accum;\nvec2 rotate_02d(vec2 c, float a) {\n\tfloat ca = cos(a);\n\tfloat sa = sin(a);\n\treturn vec2(c.x * ca - c.y * sa, c.y * ca + c.x * sa);\n}\nfloat pnoise_12d(vec2 v) {\n\tvec4 Pi = mod(floor(v.xyxy) + vec4(0., 0., 1., 1.), 289.);\n\tvec4 Pf = fract(v.xyxy) - vec4(0., 0., 1., 1.);\n\tvec4 gx = fract(mod(((mod((Pi.xzxz * 34. + 1.) * Pi.xzxz, 289.) + Pi.yyww) * 34. + 1.) * (mod((Pi.xzxz * 34. + 1.) * Pi.xzxz, 289.) + Pi.yyww), 289.) / 41.) * 2. - 1.;\n\tvec4 gy = abs(gx) - .5;\n\tgx -= floor(gx + .5);\n\tvec4 norm = inversesqrt(sqrt(gx * gx + gy * gy));\n\tvec2 fade_xy = ((Pf.xy * 6. - 15.) * Pf.xy + 10.) * pow(Pf.xy, vec2(2.));\n\tvec2 n_x = mix(vec2(dot(vec2(gx.x, gy.x) * norm.x, Pf.xy), dot(vec2(gx.z, gy.z) * norm.y, Pf.xw)), vec2(dot(vec2(gx.y, gy.y) * norm.z, Pf.zy), dot(vec2(gx.w, gy.w) * norm.w, Pf.zw)), fade_xy.x);\n\treturn mix(n_x.x, n_x.y, fade_xy.y) * 2.3;\n}\nvoid square_2impl(vec2 p, vec2 pos, vec2 dim, float rot, material mat) {\n\tp = rotate_02d(p, rot);\n\tvec2 var_5 = abs(p - pos) - dim;\n\tvec2 var_6 = pos - p;\n\tfloat tex = pnoise_12d((sin(6.4593 + var_6.x * 5.9391 * 5.1741) * sin(12.919 + var_6.y * 5.9391 * 10.348) * sin(19.378 + mat.color.x * 5.9391 * 15.522) * sin(25.837 + mat.color.y * 5.9391 * 20.696) * sin(32.296 + mat.color.z * 5.9391 * 25.87) * sin(38.756 + mat.thickness * 5.9391 * 31.045) * sin(45.215 + mat.absorption * 5.9391 * 36.219) + pos - p) * 50.) * .05 + .95;\n\tfloat v = clamp(clamp(min(max(var_5.x, var_5.y), 0.) + length(max(abs(p - pos) - dim, 0.)), 0., 1.) * (10. + abs(pnoise_12d((sin(6.4593 + var_6.x * 5.9391 * 5.1741) * sin(12.919 + var_6.y * 5.9391 * 10.348) * sin(19.378 + mat.color.x * 5.9391 * 15.522) * sin(25.837 + mat.color.y * 5.9391 * 20.696) * sin(32.296 + mat.color.z * 5.9391 * 25.87) * sin(38.756 + mat.thickness * 5.9391 * 31.045) * sin(45.215 + mat.absorption * 5.9391 * 36.219) + pos - p) * 40.)) * -200. + 290.), 0., 1.);\n\taccum -= mix(mat.thickness * .1, 0., v);\n\taccum = mix(accum, accum * mix(mat.color * tex, vec3(1., 1., 1.), v), mat.absorption);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 p = (fragCoord.xy / iResolution.xy * 2. - 1.) * vec2(iResolution.x / iResolution.y, 1.);\n\taccum = mix(vec3(1., 1., 1.), vec3(.86667, .86667, .86667), pow(length(p) + .2, 2.25) + pnoise_12d(p * 1000.) * .2);\n\tvec2 ps = vec2(abs(p.x), p.y);\n\tsquare_2impl(ps, vec2(.05, -.15), vec2(.7, .4), -.82029, material(vec3(1., 0., 0.), 1., .65));\n\tsquare_2impl(ps, vec2(.05, -.15), vec2(.6 + pow(sin(iTime * 3.), 20.) * .1, .3 + pow(sin(iTime * 3.), 20.) * .1), -.82029, material(vec3(1., 0., 0.), .7, 0.));\n\tsquare_2impl(ps, vec2(.853, -.15), vec2(.1, .25), -.82029, material(vec3(1., 0., 0.), 1., .625));\n\tsquare_2impl(ps, vec2(1.006, -.15), vec2(.05, .1), -.82029, material(vec3(1., 0., 0.), 1., .6));\n\tfragColor = vec4(accum, 1.);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtBGRW","date":"1427171042","viewed":281,"name":"Paper Heart","username":"daeken","description":"Paper renderer test.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["shaderforth","paper"],"hasliked":0,"parentid":"","parentname":""}}