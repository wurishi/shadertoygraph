{"ver":"0.1","info":{"id":"lXVSDW","date":"1719978130","viewed":40,"name":"Photosynthesis under  microscope","username":"Capo","description":"Imitate photosynthesis under a microscope using changes in color and graphics","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// HSV to RGB conversion\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Rotate function\nmat2 rotate(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\n// Function to generate different shapes\nfloat shape(vec2 uv, int shapeType) {\n    float d;\n    if (shapeType == 0) {\n        // Circle\n        d = length(uv - vec2(0.5));\n    } else if (shapeType == 1) {\n        // Triangle\n        uv = abs(uv - 0.5);\n        d = max(uv.x * 0.866025 + uv.y * 0.5, uv.y * 0.5) - 0.5;\n    } else if (shapeType == 2) {\n        // Square\n        d = max(abs(uv.x - 0.5), abs(uv.y - 0.5));\n    } else {\n        // Hexagon\n        uv = abs(uv - 0.5);\n        d = max(uv.x * 0.57735 + uv.y * 0.5, uv.y * 0.5) - 0.5;\n    }\n    return d;\n}\n\n// Fractal pattern generation with rotation and animation\nvec3 fractal(vec2 uv, float time, int depth) {\n    vec3 fractalColor = vec3(0.0);\n\n    for (int j = 0; j < depth; j++) {\n        uv = rotate(time * 0.1 + float(j) * 0.1) * uv; // Rotate UV\n        uv *= 2.0;\n        vec2 cell = floor(uv);\n        uv = fract(uv);\n        uv = abs(uv - 0.5);\n\n        float d = shape(uv, j % 4); // Generate different shapes\n        float t = sin(time + length(cell) * 0.1) * 0.5 + 0.5;\n\n        vec3 colorLayer = hsv2rgb(vec3(t + 0.1 * float(j), 0.8, 1.0));\n        fractalColor += colorLayer * (1.0 - smoothstep(0.0, 0.5, d)) * 0.5;\n    }\n\n    return fractalColor;\n}\n\n// Blur effect\nvec3 blur(vec2 uv, float radius) {\n    vec3 col = vec3(0.0);\n    float total = 0.0;\n    for (float x = -radius; x <= radius; x++) {\n        for (float y = -radius; y <= radius; y++) {\n            vec2 offset = vec2(x, y) / iResolution.xy;\n            col += texture(iChannel0, uv + offset).rgb;\n            total += 1.0;\n        }\n    }\n    return col / total;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv = rotate(iTime * 0.1) * uv;\n\n    float time = iTime * 0.5;\n    int depth = 6; \n    vec3 fractalColor = fractal(uv, time, depth);\n\n    float gradient = length(uv);\n    fractalColor *= smoothstep(1.0, 0.5, gradient);\n\n    vec3 blurredColor = blur(fragCoord.xy / iResolution.xy, 5.0);\n\n    vec3 finalColor = mix(fractalColor, blurredColor, 0.3);\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}