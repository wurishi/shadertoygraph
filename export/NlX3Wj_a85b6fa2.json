{"ver":"0.1","info":{"id":"NlX3Wj","date":"1622803165","viewed":73,"name":"Breathing tiles","username":"_t4sty","description":"A simple background effect of breathing colored tiles.\nClick somewhere to get things started.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["background","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// UTILS\nfloat pong(in float x)\n{\n    return abs(mod(x, 2.0)-1.0);\n}\n\n// GRID\nfloat falloff(in float x, in float limit) {\n    if (x < limit) return 1.0;\n    return 1.0 - pow(abs(limit-x)/limit, 2.0);\n}\n\nfloat size(in vec2 xy, in float t, in vec2 m)\n{\n    return pow(xy.y, pong(t)) * m.y + m.x;\n}\n\nvec3 color(in vec2 xy, in float t, in vec2 m)\n{\n    return vec3(pong(xy.x), pong(xy.y), pong(t));\n}\n\n// MAIN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float density = 20.0;\n    float radius = 0.5/density;\n    float t = iTime * 0.3;\n\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 m = vec2(1.0, 1.0) - iMouse.xy/iResolution.xy;\n    vec2 nearest = ceil(uv * density)/density;\n    float d = distance(uv, nearest);\n    float limit = radius * size(nearest, t, m);\n    float c = falloff(d, limit);\n    vec3 col = color(uv, t, m) * c;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}