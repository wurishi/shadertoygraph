{"ver":"0.1","info":{"id":"WsXBz7","date":"1587906307","viewed":165,"name":"sphere and sineggcarton","username":"NRGsama","description":"Tried to recreate the shader from https://richardmattka.com/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 80\n#define MAX_DIST 80.\n#define SURF_DIST .0001\n\nfloat sinPatt(vec3 p){\n\treturn 0.1 + abs(sin(p.x) - cos(p.y) + sin(p.z))*1.2 ;\n}\nfloat getDist(vec3 p) {\n\tvec4 s = vec4(0, 0, 0, 2);\n    //s.xz += vec2(2.*cos(iTime),2.*sin(iTime));\n    float angle = iTime*0.5;\n    float si = sin(angle);\n    float co = cos(angle);\n    \n    float scale = 5.+4.*sin(angle);\n    mat2 rotationMatrix = mat2( co, si,\n                               \t-si,  co);\n    //s.w = s.w*(1.2+0.2*sin(angle));\n    vec2 p1 = rotationMatrix*p.xz ;\n    p = vec3(p1.x,p.y,p1.y);\n    float sphereDist =  length(p-s.xyz)-s.w;\n    float d = max(sphereDist,(0.85-sinPatt(p*(scale)))/scale);\n    return  d;\n}\nfloat rayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = getDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\nvec3 getNormal(vec3 p) {\n\tfloat d = getDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 getColor(vec3 p) {\n    float amount = clamp((2.7 - length(p)) / 3.0, 0.0, 1.0);\n    vec3 col = vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5) * cos(6.28319 * (vec3(0.2, 0.0, 0.0) + amount * vec3(1.0, .9, 0.8)));\n    return col*amount ;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec3 ro = vec3(0,0,-5.+sin(iTime));\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    float d=0.;\n    vec3 col = vec3(0.);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*d;\n        float dS = getDist(p);\n        d += dS;\n        if(d>MAX_DIST || dS<SURF_DIST) break;\n        col += 0.07*getColor(p);\n    }\n    \n    //return dO;\n    //vec3 p = ro + rd * d ;\n    //vec3 col = GetColor((p));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}