{"ver":"0.1","info":{"id":"msKBRh","date":"1701683417","viewed":34,"name":"Tic-Tac-Toe Shader","username":"ProfSucrose","description":"Sphere textured w/ alternating tic-tac-toe cells","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sphericalcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"ivec2 char_x = ivec2(0x1c366300, 0x6363361c);\nivec2 char_o = ivec2(0x63361c00, 0x1c366363);\n\n#define MOUSE_CONTROLLED\n\n#define resolution iResolution\n#define time iTime\n#define PI 3.14159\n\nfloat fontSize = 20.0;\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nbool bit(int byte, int x) {\n  int shifted = byte / int(pow(2.0, float(x)));\n  return (shifted - 2 * (shifted / 2)) == 1;\n}\n\nbool char(ivec2 ch, int x, int y) {\n  int sampleY = int(mod(float(y), 4.0));\n  return bit(y >= 4 ? ch.y : ch.x, sampleY * 8 + x);\n}\n\nvec3 textBuffer(vec2 fragCoord) {\n    ivec2 coord = ivec2(int(fragCoord.x), int(fragCoord.y));\n    int x = int(mod(float(coord.x / int(fontSize)), 2.0));\n    int charPixelX = int(mod(float(coord.x), fontSize) / (fontSize / 8.0));\n    int charPixelY = int(mod(float(coord.y), fontSize) / (fontSize / 8.0));\n   \n    int y = int(fragCoord.y/fontSize);\n    \n    bool isFilled = char((x + y) % 2 == 0 ? char_x : char_o, charPixelX, charPixelY);\n    vec3 col = isFilled ? vec3(1.0) : vec3(0.0); // black if filled, white otherwise\n    return col;\n}\n\nvec3 backgroundTexture(vec2 uv)\n{\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    return col;\n}\n\nmat4 rotation3d(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(\n    oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n    0.0,                                0.0,                                0.0,                                1.0\n  );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv -= vec2(0.5);\n    \n    uv *= 0.8;\n\n    float fov = radians(45.0);\n    \n    float cameraZ = 0.2;\n    vec3 cameraPos = vec3(0.0, 0.0, 0.0);\n    vec3 imagePos = vec3(uv.x, uv.y, cameraZ);\n    vec3 ray = imagePos - cameraPos;\n    \n    vec2 uvMouse = iMouse.xy/iResolution.xy;\n    \n    #ifdef MOUSE_CONTROLLED\n        float yaw = -mix(-radians(180.0), radians(180.0), uvMouse.x);\n        float pitch = mix(-radians(180.0), radians(180.0), uvMouse.y);\n    #else\n        float yaw = iTime * 0.3;\n        float pitch = iTime * 0.3;\n    #endif\n    \n    mat4 rot = rotation3d(vec3(0, 1, 0), yaw)\n        * rotation3d(vec3(1, 0, 0), pitch);\n        \n    ray = (rot * vec4(ray, 0.0)).xyz;\n    \n    float a = dot(ray, ray);\n    \n    float b = 2.0*dot(ray, cameraPos);\n    float c = -1.0 + dot(cameraPos, cameraPos);\n    \n    float det = sqrt(b*b - 4.0*a*c);\n    float t0 = (-b + det)/(a+a);\n    float t1 = (-b - det)/(a+a);\n    \n    float t = t0;\n    \n    vec3 p = cameraPos + t*ray;\n    float r = length(p);\n    float theta = atan(p.z, p.x);\n    float phi = atan(sqrt(p.x*p.x + p.z*p.z), p.y);\n    \n    float thetaNorm = (theta + PI) / (2.0 * PI);\n    float phiNorm = (phi + PI) / (2.0 * PI);\n    \n    vec3 textureCol = texture(iChannel0, vec2(theta, phi)).rgb;\n    vec3 textCol = textBuffer(vec2(thetaNorm, phiNorm) * fontSize * 30.0);\n    vec3 col = mix(textureCol, textCol, 0.5);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}