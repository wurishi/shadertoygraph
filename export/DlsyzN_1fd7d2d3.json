{"ver":"0.1","info":{"id":"DlsyzN","date":"1690472230","viewed":21,"name":"Zooming Circles","username":"Tritelz","description":"First shader with circling circles","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //move coord in range [-1, 1]\n    vec2 uv = (fragCoord / iResolution.xy) * 2. - 1.;\n    //adjusting as per the aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    //how far the point is from 0,0\n    float d = length(uv);\n    //find the angle of uv\n    float angle = atan(uv.y / d, uv.x / d);\n    //okay, so first increase the angle and then find its point on unit circle\n    //and mulitply by distance to move the point.\n    uv.x = d * cos(angle + iTime / 10.);\n    uv.y = d * sin(angle + iTime / 10.);\n    \n    float minZoom = .2;\n    float frequency = 10.;\n    float amplitude = 5.;\n    float zoomFactor = minZoom + abs(sin(iTime / frequency) * amplitude);\n    uv *= zoomFactor;\n    \n    fragColor = vec4(0,0,0,1);\n    for(int i = 1; i<6; i++) {\n        //split the point into 4, each x and y are split into two\n        uv = fract(uv); //uv is now [0,1)\n        //rescale the point to [-1,1]\n        uv = (uv * 2. - 1.);\n        //new distance\n        d = length(uv);\n        //translate this distance\n        d = abs(d - .5) * 2.;\n        d = d - step(.5, d);\n        //some fun coloring\n        if (i % 3 == 0) {\n            fragColor += vec4(d,0,0,1);\n        } else if (i % 2 == 0) {\n            fragColor += vec4(0,d,0,1);\n        } else {\n            fragColor += vec4(0,0,d,1);\n        }\n    }\n    fragColor *= .5 + abs(sin(iTime / 2.));\n}\n\n","name":"Image","description":"","type":"image"}]}