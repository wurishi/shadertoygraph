{"ver":"0.1","info":{"id":"llXBDn","date":"1511587281","viewed":183,"name":"Silliness","username":"tomviolin","description":"Silliness. Pure and simple.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["silly","britney","vandamme"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#pragma optimize(on)\n\n#define C 2\n\n//fancy function to compute a color from the velocity\nvec4 computeColor(float normal_value)\n{\n    vec3 color;\n    if(normal_value<0.0) normal_value = 0.0;\n    if(normal_value>1.0) normal_value = 1.0;\n    float v1 = 1.0/7.0;\n    float v2 = 2.0/7.0;\n    float v3 = 3.0/7.0;\n    float v4 = 4.0/7.0;\n    float v5 = 5.0/7.0;\n    float v6 = 6.0/7.0;\n    //compute color\n    if(normal_value<v1)\n    {\n      float c = normal_value/v1;\n      color.x = 70.*(1.-c);\n      color.y = 70.*(1.-c);\n      color.z = 219.*(1.-c) + 91.*c;\n    }\n    else if(normal_value<v2)\n    {\n      float c = (normal_value-v1)/(v2-v1);\n      color.x = 0.;\n      color.y = 255.*c;\n      color.z = 91.*(1.-c) + 255.*c;\n    }\n    else if(normal_value<v3)\n    {\n      float c = (normal_value-v2)/(v3-v2);\n      color.x =  0.*c;\n      color.y = 255.*(1.-c) + 128.*c;\n      color.z = 255.*(1.-c) + 0.*c;\n    }\n    else if(normal_value<v4)\n    {\n      float c = (normal_value-v3)/(v4-v3);\n      color.x = 255.*c;\n      color.y = 128.*(1.-c) + 255.*c;\n      color.z = 0.;\n    }\n    else if(normal_value<v5)\n    {\n      float c = (normal_value-v4)/(v5-v4);\n      color.x = 255.*(1.-c) + 255.*c;\n      color.y = 255.*(1.-c) + 96.*c;\n      color.z = 0.;\n    }\n    else if(normal_value<v6)\n    {\n      float c = (normal_value-v5)/(v6-v5);\n      color.x = 255.*(1.-c) + 107.*c;\n      color.y = 96.*(1.-c);\n      color.z = 0.;\n    }\n    else\n    {\n      float c = (normal_value-v6)/(1.-v6);\n      color.x = 107.*(1.-c) + 223.*c;\n      color.y = 77.*c;\n      color.z = 77.*c;\n    }\n    return vec4(color.r/255.0,color.g/255.0,color.b/255.0,1.0);\n}\n\nvec4 gtexture(sampler2D x, vec2 xy){\n    float r = sin(iTime*1.5)*sin(iTime*1.5);\n    vec4 colors=texture(x,xy);\n    vec4 colorg=texture(x,vec2(1,1));\n    if (length(colors-colorg)<0.33 || \n        length(\n            (colors/length(colors)) - \n            (colorg/length(colorg))) < .25) { \n        colors=texture(iChannel2,xy);\n    } else {\n       \tcolors = (colors*r + (1.-r)*texture(iChannel2,xy));\n        colors.a=1.;\n    }\n    return colors;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //only one pixel out of 4 stores the moments\n    int ix0 = int(floor(fragCoord.x/float(C)));\n    int iy0 = int(floor(fragCoord.y/float(C)));\n    int ix=ix0; int iy=iy0;\n    //vec3 m = texture(iChannel0, (vec2(2*ix+1,2*iy+1)+0.5)/iResolution.xy).xyz;\n    //ix=ix0-0;iy=iy+1;\n    vec2 N = texture(iChannel0, (vec2(C*ix+1,C*iy+1)+0.5)/iResolution.xy).xy;\n    ix=ix0-0;iy=iy-1;\n    vec2 S = texture(iChannel0, (vec2(C*ix+1,C*iy+1)+0.5)/iResolution.xy).xy;\n    ix=ix0+1;iy=iy-0;\n    vec2 E = texture(iChannel0, (vec2(C*ix+1,C*iy+1)+0.5)/iResolution.xy).xy;\n    ix=ix0-1;iy=iy-0;\n    vec2 W = texture(iChannel0, (vec2(C*ix+1,C*iy+1)+0.5)/iResolution.xy).xy;\n\n    float dx=E.x-W.x;\n    float dy=N.x-S.x;\n    //dx=clamp(dx,-.1,.1);\n    //dy=clamp(dx,-.1,.1);\n    float theta = length(vec2(dx-0.01,dy+0.01));\n    float light = 1./((theta*theta*10000.)+1.);\n    fragColor = clamp(vec4(light)*1.2-.4,-.2,1.)+gtexture(iChannel1, (-vec2(dx,-dy)*1.)+vec2(fragCoord.x,iResolution.y-fragCoord.y)/iResolution.xy);\n    //fragColor.xyz *= light;\n    return;\n}","name":"Image","description":"","type":"image"}]}