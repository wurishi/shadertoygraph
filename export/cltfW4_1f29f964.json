{"ver":"0.1","info":{"id":"cltfW4","date":"1701303932","viewed":20,"name":"basic audio vis template","username":"matdombrock","description":"vis","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CONTRAST 1.5\n#define SCALE 1.0\n\n// The main function that ShaderToy will call to color each pixel\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize the fragment coordinates to the range [0, 1]\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Sample the audio data from iChannel0. The y-coordinate is set to 0.5 to sample the middle of the texture.\n    // The texture function returns a vec4 where each component corresponds to a color channel (red, green, blue, alpha).\n    vec4 data = texture(iChannel0, vec2(uv.x, 0.5));\n\n    // Average the red, green, and blue channels of the audio data to get a single value\n    float sum = (data.r + data.g + data.b) / SCALE;\n\n    // Compare the audio value with the y-coordinate of the fragment.\n    // The step function returns 0.0 if the first argument is greater than the second, and 1.0 otherwise.\n    float y = step(sum, uv.y) / (3.0 - CONTRAST);\n\n    // Set the color of the fragment.\n    // If the audio value is greater than the y-coordinate, the fragment is colored white; otherwise, it is colored black.\n    vec4 c1 = vec4(vec3(y, 0,1.0-y), 1.0);\n    vec4 c2 = vec4(1) - vec4(data.r, data.g, data.b, 1.0);\n    fragColor = mix(c1, c2, 0.25);\n}","name":"Image","description":"","type":"image"}]}