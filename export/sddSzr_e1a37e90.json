{"ver":"0.1","info":{"id":"sddSzr","date":"1632530610","viewed":69,"name":"Chair","username":"JunYaoLiang","description":"First try to use distancefield.Thanks to Inigo Quilez for sharing knowledge and shaders.I know the project is simple and will fill in the details later.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Games101 Homework   Final_Project\n// By JunYao Liang\n\nfloat sdCappedCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.5*ra+rb, 1.0*abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\nfloat sminCubic( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nfloat legs(in vec3 pos)\n{\n    float z=0.3;\n    float y=-0.7;\n    float x=-0.5;\n    float xt=0.2;\n    float yt=0.65;\n    float zt=0.2;\n    vec3 ta=vec3(x+xt,y+yt,z-zt);\n    vec3 tb=vec3(x-xt,y-yt,z+zt);\n    \n    vec3 ba=vec3(0.0+x,y+0.5*yt,z);\n    vec3 bb=vec3(0.0+x,y-0.5*yt,z);\n    \n\n    float oblique=sdCappedCylinder(pos,ta,tb,0.15);\n    float straight=sdCappedCylinder(pos,ba,bb,0.7);\n    float leg=max(oblique,straight);\n    \n    pos.x=-pos.x;\n    oblique=sdCappedCylinder(pos,ta,tb,0.15);\n    straight=sdCappedCylinder(pos,ba,bb,0.7);\n    leg=min(leg,max(oblique,straight));\n    \n    \n    pos.z=-pos.z;\n    oblique=sdCappedCylinder(pos,ta,tb,0.15);\n    straight=sdCappedCylinder(pos,ba,bb,0.7);\n    leg=min(leg,max(oblique,straight));\n    \n    pos.x=-pos.x;\n    oblique=sdCappedCylinder(pos,ta,tb,0.15);\n    straight=sdCappedCylinder(pos,ba,bb,0.7);\n    leg=min(leg,max(oblique,straight));\n    \n    return leg;\n}\n\n\nfloat map( in vec3 pos )\n{\n    vec3 pfoot=pos-vec3(0.0,0.0,-1.5);\n    vec3 pCus=pos-vec3(0.0,0.0,-1.5);\n    \n    float foots=legs(pfoot*2.0)*0.5;\n    float cusion=sdRoundedCylinder(pCus*2.0,0.35,0.35,0.3)*0.5;\n    float chair=sminCubic(foots,cusion,0.1);\n    \n    \n    \n    return chair;\n}\n\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*(iTime-10.0);\n\tvec3 ro = vec3( 1.0*cos(an), 0.0,0.8+0.5*sin(an));\n    //vec3 ro = vec3( 0.0, 0.0,1.0);\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n        \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 3.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}