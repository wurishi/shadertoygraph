{"ver":"0.1","info":{"id":"DtVfDW","date":"1702083614","viewed":17,"name":"UCSD CSE 167 HW5 Elijah","username":"Elijah","description":"Implementation of The Boids Algorithm","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    vec2 sepF = vec2(0.0, 0.0);\n    int numSep = 0;\n    vec2 cohF = vec2(0.0, 0.0);\n    int numCoh = 0;\n    vec2 aliF = vec2(0.0, 0.0);\n    int numAli = 0;\n    vec2 bouF = vec2(((pos.x < 200.0)?1:0) - ((pos.x > iResolution.x - 200.0)?1:0), ((pos.y < 160.0)?1:0) - ((pos.y > iResolution.y - 160.0)?1:0));\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel_i = texelFetch(iChannel0, tex_pos, 0);\n        if(pos_vel == pos_vel_i) {\n            continue;\n        }\n        vec2 pos_i = pos_vel_i.xy;\n        vec2 vel_i = pos_vel_i.zw;\n        vec2 disVec = pos - pos_i;\n        float dis = sqrt(pow(disVec.x, 2.0) + pow(disVec.y, 2.0));\n        if(dis < 30.0) {\n            sepF += pos - pos_i;\n            numSep++;\n        }\n        if(dis < 150.0) {\n            cohF += pos_i;\n            numCoh++;\n            aliF += vel_i;\n            numAli++;\n        }\n    }\n    if(numSep != 0) {\n        sepF = sepF / float(numSep);\n    }\n    if(numCoh != 0) {\n        cohF = cohF / float(numCoh) - pos;\n    } else {\n        cohF = cohF - pos;\n    }\n    if(numAli != 0) {\n        aliF = aliF / float(numAli) - vel;\n    } else {\n        aliF = aliF - vel;\n    }\n    vec2 force = 0.02 * sepF + 0.001 * cohF + 0.03 * aliF + 0.5 * bouF;\n    vel += force;\n    pos += vel;\n    float lengthOfVel = sqrt(pow(vel.x, 2.0) + pow(vel.y, 2.0));\n    if(lengthOfVel > 0.0) {\n        if(lengthOfVel > 10.0) {\n            vel *= 10.0 / lengthOfVel; \n        }\n        if(lengthOfVel < 5.0) {\n            vel *= 5.0 / lengthOfVel;\n        }\n    }\n    \n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}