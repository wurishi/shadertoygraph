{"ver":"0.1","info":{"id":"Xs3cRr","date":"1517846084","viewed":116,"name":"Paw Metaballs","username":"kMiller","description":"HW for Procedural graphics","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","metballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// for merging spheres\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nconst float PI = 3.14159265359;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 scrPt = (2.*fragCoord - iResolution.xy )/ iResolution.y;\n\t\n    // main blob\n\tfloat mainBlob = length(scrPt) - .2;\n    \n    // smaller blobs moving in circle\n    float theta = iTime * 1.5;\n    float cosTheta = cos(theta);\n    float sinTheta = sin(theta);\n    mat2 rot = mat2(cosTheta, -sinTheta, sinTheta, cosTheta);    \n    \n    // rotate outer circle about static center circle\n    vec2 rotPt = rot * scrPt;\n    // center of circle of small blobs\n    vec2 outerCenter = vec2(.24, 0);\n    // translate then rotate again\n    float theta2 = -iTime * 3.0;\n    float cosTheta2 = cos(theta2);\n    float sinTheta2 = sin(theta2);\n    mat2 rot2 = mat2(cosTheta2, -sinTheta2, sinTheta2, cosTheta2); \n    vec2 innerRot = rot2 * (rotPt + outerCenter);\n    \n    float rad = .08; // radius of small spheres\n    // static centers of small blobs\n    \n    float c1 = length(innerRot - .3 * vec2(1, 0)) - rad;\n    float c2 = length(innerRot - .3 * vec2(.309, .951)) - rad;\n    float c3 = length(innerRot - .3 * vec2(-.809, .5877)) - rad;\n    float c4 = length(innerRot - .3 * vec2(-.809, -.5877)) - rad;\n    float c5 = length(innerRot - .3 * vec2(.309, -.951)) - rad;\n\n    \n    float blendVal = .2;\n    float blend = smin(mainBlob, c1, blendVal);\t\t  // Distance field of a sphere\n    blend = smin(blend, c2, blendVal); // smin for merching the objects in the Scene \n    blend = smin(blend, c3, blendVal);  // 0.3 factor for archiving \n    blend = smin(blend, c4, blendVal); // noticable lerping between objects\n\tblend = smin(blend, c5, blendVal);\n    \n    if(blend <= 0.01){\n\t\tfragColor = vec4(0, 0, 0, 1);\n    }  else {\n        fragColor = vec4(1);\n    }  \n   \n}","name":"Image","description":"","type":"image"}]}