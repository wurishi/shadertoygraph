{"ver":"0.1","info":{"id":"3sXfzj","date":"1588650190","viewed":89,"name":"spinning squares","username":"aberkson1","description":"cool patter","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n\nfloat line(vec2 uv, float m, float b)\n{\n    float y = m*uv.x+b;\n    return smoothstep(y + 0.01, y, uv.y) - smoothstep(y, y - 0.01, uv.y);\n}\n\nvec2 rotate2d(vec2 uv, float angle)\n{\n    uv -= 0.5;\n \tuv *= mat2(cos(angle), sin(angle),\n               -sin(angle), cos(angle));  \n    \n    uv += 0.5;\n    return uv;\n}\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n\tvec3 col = vec3(0.0);\n    \n    uv *= 2.25;\n\tfloat evenAngle = 0.0;\n    float m1  = mod(floor(uv.x), 2.0);\n    float m2  = mod(floor(iTime), 2.0);\n    float res = m1 == m2 ?  1.0 : -1.0;\n    \n    if (sin(iTime * PI * .25 ) > 0.0)\n    {\n        uv.y = fract(uv.y + iTime * res * m2);\n    \tuv = rotate2d(fract(uv), m2 * PI * iTime * .5);\n    }\n    else\n    {\n    \tuv = rotate2d(fract(uv), m2 * PI * iTime * .5);\n    }\n    \n    //\n    float l = (1.0 - length(floor(uv)));\n    col +=  line(fract(uv),  1.0, -0.5) * l;\n    col +=  line(fract(uv), -1.0,  0.5) * l;\n    col +=  line(fract(uv),  1.0,  0.5) * l;\n    col +=  line(fract(uv), -1.0,  1.5) * l;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}