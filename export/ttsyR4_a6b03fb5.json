{"ver":"0.1","info":{"id":"ttsyR4","date":"1591573962","viewed":106,"name":"shining honeycomb","username":"darkfox","description":"colorful hexagonal tiling.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// hexagonal tiling.\n\n// constants.\nconst float pi = 3.14159;\nconst float SCALE = 0.15;\nconst float ROTATION_SPEED = 0.5;\n\n// hsb to rgb.\nvec3 getRGB(float h, float s, float b){\n  vec3 c = vec3(h, s, b);\n  vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n  rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n// seed hexagonal cell and get color.\nvec3 hexa(vec2 p, float a){\n  // lattice (e1 =(a, 0.0), e2 = (a * 0.5, a * sqrt(3.0) / 2.0))\n  float s = p.x / a - p.y / (sqrt(3.0) * a);\n  float t = 2.0 * p.y / (sqrt(3.0) * a);\n  vec2 q = vec2(s, t);\n  vec2 i = floor(q);\n  vec2 f = fract(q);\n  // search the center of cell.\n  vec2 cell_i;\n  vec2 g = vec2(2.0 * f.x + f.y, f.x + 2.0 * f.y);\n  if(g.x < 1.0 && g.y < 1.0){\n    cell_i = i;\n  }else if(g.x > 2.0 && g.y > 2.0){\n    cell_i = i + vec2(1.0, 1.0);\n  }else{\n    if(f.x > f.y){ cell_i = i + vec2(1.0, 0.0); }else{ cell_i = i + vec2(0.0, 1.0); }\n  }\n  vec2 e1 = vec2(a, 0.0);\n  vec2 e2 = vec2(a * 0.5, a * 0.5 * sqrt(3.0));\n  vec2 cell = cell_i.x * e1 + cell_i.y * e2; // center.\n  vec2 u0 = vec2(1.0, 0.0);\n  vec2 u1 = vec2(0.5, sqrt(3.0) * 0.5);\n  vec2 u2 = vec2(-0.5, sqrt(3.0) * 0.5);\n  // calc distance.\n  float d = abs(dot(p - cell, u0));\n  d = max(d, abs(dot(p - cell, u1)));\n  d = max(d, abs(dot(p - cell, u2)));\n  d *= 2.0 / a; // scaling to 0.0ï½ž1.0\n  d = d * d;\n  return getRGB(cell_i.x * 0.02 + mod(iTime * 0.1, 1.0), 1.0 - d, 0.93);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n  float t = iTime * ROTATION_SPEED;\n  mat2 m = mat2(cos(t), sin(t), -sin(t), cos(t));\n  p = m * p;\n  vec3 color = hexa(p, SCALE);\n  float diff = abs(p.x * p.y) * 0.4 + 0.6;\n  fragColor = vec4(color, 1.0) * diff;\n}","name":"Image","description":"","type":"image"}]}