{"ver":"0.1","info":{"id":"NdfXzj","date":"1618840782","viewed":283,"name":"Camera Kaleidoscope","username":"Willisburg","description":"Kaleidoscope hell","likes":5,"published":1,"flags":2,"usePreview":0,"tags":["warningkaleidoscopecamera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI2DIV3 2.09439510239\n\nvec2 rotate(vec2 pos, float angle)\n{\n    vec2 pos2 = vec2(pos.x*cos(angle)+pos.y*sin(angle), \n                    pos.y*cos(angle)-pos.x*sin(angle));\n    return pos2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord-iResolution.xy/2.0;\n    \n    // Get coordinates from the center\n    vec2 posCentered = abs(iResolution.xy/2.0 - fragCoord);\n    float time = iTime;\n    \n    // Rotate uv counterclockwise and normalize\n    vec2 uv1 = rotate(uv, iTime)/iResolution.xy + 0.5;\n    vec2 uv2 = rotate(uv, iTime + PI2DIV3)/iResolution.xy + 0.5;\n    vec2 uv3 = rotate(uv, iTime - PI2DIV3)/iResolution.xy + 0.5;\n    \n    // Rotate uv clockwise and normalize\n    vec2 uv5 = rotate(vec2(1.0 - uv.x, uv.y), iTime)/iResolution.xy + 0.5;\n    vec2 uv6 = rotate(vec2(1.0 - uv.x, uv.y), iTime + PI2DIV3)/iResolution.xy + 0.5;\n    vec2 uv7 = rotate(vec2(1.0 - uv.x, uv.y), iTime - PI2DIV3)/iResolution.xy + 0.5;\n    \n    // Get square root of centered position for pythagorean theorem ;) Triangles babyyy\n    float w1 = posCentered.x*posCentered.x;\n    float h1 = posCentered.y*posCentered.y;\n    \n    // Triangles babyyy\n    float len = sqrt(w1+h1);\n\n    // Output to screen\n    \n    // If the length from center is smaller than height output it normally\n    if(len < iResolution.y / 2.0)\n    {\n        fragColor = (\n        texture(iChannel0, uv1) + texture(iChannel0, uv2) +\n        texture(iChannel0, uv3) +\n         texture(iChannel0, uv5) + texture(iChannel0, uv6) +\n        texture(iChannel0, uv7)\n       \n        )/5.0;\n    }\n    else\n    {\n        float scale = 2.0;\n        fragColor = (\n        texture(iChannel0, uv1/scale) + texture(iChannel0, uv2/scale) +\n        texture(iChannel0, uv3/scale) +\n        \n        texture(iChannel0, uv5/scale) + texture(iChannel0, uv6/scale) +\n        texture(iChannel0, uv7/scale)\n        )/6.0;    \n    }\n}","name":"Image","description":"","type":"image"}]}