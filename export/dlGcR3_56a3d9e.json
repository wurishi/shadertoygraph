{"ver":"0.1","info":{"id":"dlGcR3","date":"1700572174","viewed":31,"name":"Checkboard Square","username":"roey_shap","description":"First shader on my journey to becoming an absolute shader wizard. Yeah - a shwizard.\nBeen putting this off for way too long. Better late than never.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["monochrome"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(float min1, float max1, float value, float min2, float max2)\n{\n    float d2 = max2 - min2;\n    float d1 = max1 - min1;\n    float sizeRatio = d2 / d1;\n\n    return (value * sizeRatio) - (min1 * sizeRatio) + min2;\n}\n\nvec2 rotateBy(vec2 inputVector, float angle) \n{\n    mat2 rotationMatrix;\n    float sinOf = sin(angle);\n    float cosOf = cos(angle);\n    rotationMatrix[0] = vec2(sinOf, cosOf);\n    rotationMatrix[1] = vec2(-cosOf, sinOf);\n    \n    return inputVector * rotationMatrix;\n}\n\nfloat floorTo(float value, float snapValue)\n{\n    return floor(value / snapValue) * snapValue;\n}\n\nbool isMultipleOf(float value, float stepSize) {\n    float s = 1000.0;\n    return int(floor(value * s)) % int(floor(stepSize * s)) == 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize coordinates so that (0, 0) is the center of the canvas\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float sideLength = 0.3;\n    float squareAngle = iTime;\n        \n    vec2 squareCenter = vec2(0);\n    vec2 unrotatedUV = rotateBy(uv, -squareAngle);\n    vec2 score = sideLength - abs(unrotatedUV);\n    bool inSquare = abs(unrotatedUV.x) <= sideLength && abs(unrotatedUV.y) <= sideLength;\n    // weird anti-alias attempt after first coment float inSquare = smoothstep(0.0, 1.0, (score.x + score.y) / (sideLength * sideLength * sideLength * sideLength));\n    vec2 checkerBoardSize = vec2(10, 10);\n    bool xOnOddCell = isMultipleOf(floorTo(uv.x, 1.0/checkerBoardSize.x), 2.0/checkerBoardSize.x);\n    bool yOnOddCell = isMultipleOf(floorTo(uv.y, 1.0/checkerBoardSize.x), 2.0/checkerBoardSize.y);\n    bool onDiagonalCell = (xOnOddCell || yOnOddCell) && !(xOnOddCell && yOnOddCell);\n\n    float colVal = map(-1.0, 1.0, sin(iTime * 5.0), 0.5, 1.0);\n    vec3 col = vec3(colVal) * float(inSquare) * float(onDiagonalCell);\n\n\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}