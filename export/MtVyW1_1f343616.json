{"ver":"0.1","info":{"id":"MtVyW1","date":"1536112859","viewed":453,"name":"GPU Sound Practice","username":"teessider","description":"1st attempt at making sound! Sound is visualised in Image buffer with some tweaks ;)","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["sphere","audio","practice","gpu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SPEED 0.75\n\n#define TAU 6.2831\n#define PI 3.1415\n#define FREQ vec4(220.0, 330.0, 298.0, 110.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0-1.0;\n    \n    // COPY of Sound buffer\n    float bass = sin(TAU * FREQ.w * iTime);\n    // Attenuation of each sound\n    vec3 attens = vec3(-2.0, -10.0, -4.0);\n    // Where the sounds are placed in a loop:\n    vec3 beats = vec3(0.0, 0.5, 0.75);\n    vec3 sounds = sin(vec3(PI, TAU, TAU*0.75) * FREQ.xyz * iTime) * exp(attens * fract(SPEED * iTime + beats));\n    float music = smoothstep(-1.0, 1.0, bass*0.1 + mix(mix(sounds.x, sounds.z, mod(iTime, 2.0)), sounds.y, fract(iTime + 1.5)));\n    // END COPY HERE\n \n    // Some visualisation \n    float sphere = 1.0 - dot(uv, uv);\n    float spheres = clamp(length(cos(uv*TAU) * sin(uv*TAU)), 0.0, 1.0);\n    uv /= spheres;\n    vec3 soundVis = vec3(abs(uv.xx) * abs(uv.yy) * music, spheres) * sphere;\n\n    // Output to screen\n    fragColor = vec4(soundVis,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// My first attempt into making some music/sound!\n// Also first foray into synthesising sound :D\n// Some References:\n// https://www.shadertoy.com/view/4dsBzj\n// https://youtu.be/jjU3rO36zCs?t=12m6s - NVScene 2015 Shadertoy demo\n\n#define SPEED 0.75\n\n#define TAU 6.2831\n#define PI 3.1415\n#define FREQ vec4(220.0, 330.0, 298.0, 110.0)\n\nvec2 mainSound( in int samp, float time )\n{\n    float bass = sin(TAU * FREQ.w * time);\n    // Attenuation of each sound\n    vec3 attens = vec3(-2.0, -10.0, -4.0);\n    // Where the sounds are placed in a loop:\n    vec3 beats = vec3(0.0, 0.5, 0.75);\n    vec3 sounds = sin(vec3(PI, TAU, TAU*0.75) * FREQ.xyz * time) * exp(attens * fract(SPEED * time + beats));\n    return vec2(smoothstep(-1.0, 1.0, bass*0.1 + mix(mix(sounds.x, sounds.z, mod(time, 2.0)), sounds.y, fract(time+1.5))) );\n}","name":"Sound","description":"","type":"sound"}]}