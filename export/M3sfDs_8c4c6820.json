{"ver":"0.1","info":{"id":"M3sfDs","date":"1729089920","viewed":31,"name":"White, Perlin & Worley noise","username":"mujtaba8086","description":"Created just for cover image for [url=https://gameidea.org/2023/12/16/noise-functions/]this[/url] post.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise","perlin","worley","whitenoise","proceduralgeneration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Three noise function (perlin, white noise and worley noise) blended together.\n\n// White Noise\nfloat whiteNoise(vec2 uv) {\n    return fract(sin(dot(uv ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// Perlin Noise function\nfloat perlinNoise(vec2 uv) {\n    vec2 p = floor(uv);\n    vec2 f = fract(uv);\n    f = f * f * (3.0 - 2.0 * f);\n    \n    float n = p.x + p.y * 57.0;\n    float res = mix(mix(fract(sin(n) * 43758.5453), fract(sin(n + 1.0) * 43758.5453), f.x),\n                    mix(fract(sin(n + 57.0) * 43758.5453), fract(sin(n + 58.0) * 43758.5453), f.x),\n                    f.y);\n    return res;\n}\n\n// Worley Noise (cell noise)\nfloat worleyNoise(vec2 uv) {\n    vec2 p = floor(uv);\n    vec2 f = fract(uv);\n    float d = 1.0;\n\n    for(int y = -1; y <= 1; y++) {\n        for(int x = -1; x <= 1; x++) {\n            vec2 b = vec2(float(x), float(y));\n            vec2 r = b + fract(sin(dot(p + b, vec2(12.9898, 78.233))) * 43758.5453) - f;\n            d = min(d, dot(r, r));\n        }\n    }\n    return d;\n}\n\n// Smoothing Function to blend between noises\nfloat blendSmooth(float x, float edgeStart, float edgeEnd) {\n    float t = smoothstep(edgeStart, edgeEnd, x);\n    return t * t * (3.0 - 2.0 * t);  // Smoothstep blend\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y;\n    \n    float white = whiteNoise(uv * 10.0);\n    float perlin = perlinNoise(uv * 10.0);\n    float worley = worleyNoise(uv * 10.0);\n\n    // Blending across the width of the screen\n    float blendLeft = blendSmooth(uv.x, 0.34, 0.7);   // Blend white noise to Perlin\n    float blendRight = blendSmooth(uv.x, 1.0, 1.5);  // Blend Perlin to Worley\n\n    // Mix noises based on position and blending\n    float noise = mix(white, perlin, blendLeft);\n    noise = mix(noise, worley, blendRight);\n    \n    fragColor = vec4(vec3(noise), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}