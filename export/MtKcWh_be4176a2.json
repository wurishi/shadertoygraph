{"ver":"0.1","info":{"id":"MtKcWh","date":"1536172916","viewed":149,"name":"Frametime Overlay - sort3","username":"bkeinert","description":"Benchmark for sort3 ([url=https://www.shadertoy.com/XtVcDh]XtVcDh[/url] & [url=https://www.shadertoy.com/view/XtKcWh]XtKcWh[/url]).\nLines: green 90 Hz, yellow 60 Hz, orange 30 Hz, red 15 Hz, gray 5 ms grid.\nConfigure via defines in [b]Common[/b].","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","performance","sort","median","sorting","overlay","benchmark","frametime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// See \"Common\" for configuration options / credits etc.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 tc = fragCoord/iResolution.xy;\n\n    // Average over 2*n + 1 samples\n    // Algorithm color: v.xyz / frametime in ms: v.w\n    float n = 1.0;\n    vec4 v = vec4(0, 0, 0, 0);\n    for (float i = -n; i <= n; ++i) {\n        v += texture(iChannel0, tc*vec2(1.0, 0.0) + vec2(i, 0.0)/iResolution.xy);\n    }\n    v /= (2.0*n+1.0);\n\n\tfloat scale = SCALE_MAX_MS;\n\n#ifdef ADAPTIVE_SCALING\n    // Adapative scaling\n    //if (iFrame > ADAPTIVE_SCALING_FRAMES){\n    \tscale =  max(texture(iChannel0, vec2(1.0, 1.0)).w * 2.0, 1.0);\n    //}\n#endif\n\n\t// Run benchmark\n    fragColor.xyz = clamp(runAlgorithmBenchmark(getAlgorithmId(iFrame), fragCoord, iTime), 0.0, 0.25);\n   \n    // Draw colored \"bars\"\n    if (tc.y < v.w/scale){\n    \tfragColor = mix(clamp(fragColor, 0.0, 1.0), vec4(v.xyz, 1.0), 0.35);\n    }\n    \n    // 90 Hz (green)\n    if (abs(tc.y - (1000.0/90.0)/scale) <= 0.5/iResolution.y) {\n       \tfragColor = mix(fragColor, vec4(0,1.0,0,0), 0.95);\n    }\n\n    // 60 Hz (yellow)\n    if (abs(tc.y - (1000.0/60.0)/scale) <= 0.5/iResolution.y) {\n       \tfragColor = mix(fragColor, vec4(1.0,1.0,0,0), 0.95);\n    }\n    \n    // 30 Hz (orange)\n    if (abs(tc.y - (1000.0/30.0)/scale) <= 0.5/iResolution.y) {\n       fragColor = mix(fragColor, vec4(1,0.5,0,0), 0.95);\n    }\n    \n    // 15 Hz (red)\n    if (abs(tc.y - (1000.0/15.0)/scale) <= 0.5/iResolution.y) {\n       fragColor = mix(fragColor, vec4(1,0,0,0), 0.95);\n    }    \n\n    // 5 ms grid\n    if (abs((mod(tc.y*scale, 5.0) - 5.0)/(2.5*scale)) <= 0.5/iResolution.y) {\n       fragColor = mix(fragColor, vec4(0.5,0.5,0.5,0.5), 0.5);\n    } \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Frametime Overlay - bkeinert 2018\n// Configuration\n#define ITERATIONS_PER_ALGORITHM 20000\n//#define ITERATIONS_PER_ALGORITHM 2000\n#define FRAMES_PER_ALGORITHM 50\n#define ALGORITHMS 4\n#define SCALE_MAX_MS 100.0\n#define ADAPTIVE_SCALING\n#define ADAPTIVE_SCALING_FRAMES 25\n\n// Credit for the thought-provoking impulse goes to tholzer:\n// \"I wonder, if there is in general a possibility to visualize the runtime of two tests... \"\n// -- tholzer, 2018-09-04 comment of https://www.shadertoy.com/view/XtVcDh\n\n// Sort algorithms by iq / CeeJayDK / bkeinert from\n// https://www.shadertoy.com/view/XtVcDh and https://www.shadertoy.com/view/XtKcWh\n\n// Red\n// iq - https://twitter.com/iquilezles/status/559477513139675136\nvec3 cuteSort(vec3 n) { \n   float a = min(min(n.x,n.y),n.z);\n   float b = max(max(n.x,n.y),n.z);\n   return vec3(a, n.x+n.y+n.z-a-b, b);\n}\n\n// Green\n// CeeJayDK - https://www.shadertoy.com/view/XtKcWh\nvec3 sort3(vec3 c) { \n\tc.rg = (c.r <= c.g) ? c.rg : c.gr;\n\tc.rb = (c.r <= c.b) ? c.rb : c.br;\n\tc.gb = (c.g <= c.b) ? c.gb : c.bg;\n    return c;\n}\n\n// Blue\n// bkeinert - via comment of https://www.shadertoy.com/view/XtKcWh\nvec3 sort3bk(vec3 v) {\n\tvec2 t = vec2(min(v.x, v.y), max(v.x, v.y));\n\treturn vec3(min(t.x, v.z), min(max(v.z, t.x), t.y), max(t.y, v.z)); \n}\n\n// Cyan\n// CeeJayDK variant of sort3bk via comment of https://www.shadertoy.com/view/XtVcDh\nvec3 sort3bk_cj(vec3 v) {\n    vec4 t = vec4(min(v.x, v.y), min(v.z, v.y), max(v.x, v.y), max(v.z, v.y));\n\treturn vec3(min(t.x, t.y), max(t.x, t.y), max(t.z, t.w));\n}\n\nint getAlgorithmId(int frame) {\n\treturn (frame/FRAMES_PER_ALGORITHM) % ALGORITHMS;\n}\n\nvec3 getAlgorithmColor(int id) {\n\tvec3 colors[] = vec3[](\n        vec3(0.85,0,0),\n        vec3(0,0.85,0),\n        vec3(0,0,0.85),\n        vec3(0,0.85,0.85));\n    return colors[id];\n}\n\nvec3 runAlgorithmBenchmark(int id, vec2 fragCoord, float time) {\n    // from https://www.shadertoy.com/view/XtVcDh\n    vec3 c = sin(fragCoord.xxy+fragCoord.xyy+time*vec3(11,111,113));\n    if (id == 0) {\n  \t\tfor(int i=0; i < ITERATIONS_PER_ALGORITHM; i++)\n            c.bgr = cuteSort(c.rgb)-vec3(.01,.0,-.01);\n    } else if (id == 1) {\n    \tfor(int i=0; i < ITERATIONS_PER_ALGORITHM; i++)\n            c.bgr = sort3(c.rgb) -vec3(.01,.0,-.01);\n    } else if (id == 2) {\n    \tfor(int i=0; i < ITERATIONS_PER_ALGORITHM; i++)\n            c.bgr = sort3bk(c.rgb)-vec3(.01,.0,-.01);\n    } else if (id == 3) {\n    \tfor(int i=0; i < ITERATIONS_PER_ALGORITHM; i++)\n            c.bgr = sort3bk_cj(c.rgb)-vec3(.01,.0,-.01);\n    }\n    return c.bgr;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 id = ivec2(fragCoord);\n    \n    // Use one line (y == 0) of buffer A\n    if (id.y == 0) {\n        if (id.x == int(iResolution.x)-1) {\n            // Insert current algorithm color and frametime (in ms) on the right\n    \t\tvec3 color = getAlgorithmColor(getAlgorithmId(iFrame));\n        \tfragColor = vec4(color, iTimeDelta*1000.0);\t\n        } else {\n            if (int(iResolution.x) - id.x > iFrame) {\n                fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n            } else {\n            \t// Shift values from previous frames to the left\n    \t\t\tfragColor = texture(iChannel0, (vec2(id) + vec2(1.5, 0.0))/iResolution.xy);\n            }\n        }\n    } else {\n#ifdef ADAPTIVE_SCALING\n        // Average timings over #ADAPTIVE_SCALING frames for adaptive scaling\n        if (all(equal(id, ivec2(iResolution.xy)-1))) {\n            float s = 0.0;\n            int numFrames = min(iFrame, ADAPTIVE_SCALING_FRAMES);\n            for (int i = 0; i < numFrames; ++i) {\n            \ts += texture(iChannel0, vec2(1.0 - (float(i) + 0.5)/iResolution.x, 0.0)).w;\n            }\n            s /= float(numFrames);\n            fragColor = vec4(s,s,s,s);\n        } else {\n        \t// Ignore all other fragments\n\t\t\tdiscard;\n        }\n#else\n        // Ignore all other fragments\n        discard;\n#endif\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}