{"ver":"0.1","info":{"id":"sllXzH","date":"1625178388","viewed":157,"name":"Maxnorm Distance to Parabola","username":"oneshade","description":"Maxnorm distance to a parabola.","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","parabola","maxnorm","linf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdParabola(in vec2 p, in float h) {\n    float x = sqrt(0.25 + max(0.0, abs(p.x * h) + p.y * h)) - 0.5;\n    return (x * x / h - p.y) * sign(h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Boilerplate\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    float time = iTime * 0.5;\n\n    // Default before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(0.5, 0.5 * sin(time)) * cos(time);\n\n    float a = sin(0.25 * iTime) * 16.0;\n    float b = cos(0.25 * iTime);\n    float c = 0.25 * sin(0.5 * iTime);\n    vec2 vertex =  vec2(-0.5 * b / a, c - 0.25 * b * b / a);\n\n    float d = sdParabola(uv - vertex, a);\n    d *= 2.0; // Shrink isolines\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    float mDist = abs(sdParabola(mouse - vertex, a));\n    color = mix(color, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - mouse) - 0.008));\n    color = mix(color, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, abs(max(abs(uv.x - mouse.x), abs(uv.y - mouse.y)) - mDist) - 0.001));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}