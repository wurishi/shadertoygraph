{"ver":"0.1","info":{"id":"M3SXDR","date":"1710444610","viewed":46,"name":"Lissajous02","username":"kukovisuals","description":"inspired by lissajous","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lissajous","visuals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Shader created by KukoVisuals\n * Â© 2024 KukoVisuals. All rights reserved.\n *\n * If you use this shader or modify it, please credit me by mentioning KukoVisuals.\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time-varying distortion parameters\n    float distortionScale = 0.224;\n    float distortionFrequency = 0.1;\n    \n    // Oscillating factors for distortion\n    float oscillatingFactor1 = 10.0 + 3.0 * sin(iTime * 0.008);\n    float oscillatingFactor2 = 10.0 + 3.0 * cos(iTime * 0.0008); \n    \n    // Apply a non-linear distortion to the coordinates\n    vec2 distortedUv = uv + distortionScale * vec2(\n        sin(distortionFrequency * iTime - uv.x * oscillatingFactor1),\n        cos(distortionFrequency * iTime - uv.y * oscillatingFactor2)\n    );\n\n    // Time-varying transformation matrix parameters\n    float angle = iTime / 8.;  // Rotate based on time\n    float scale = 2.5 + 0.5 * sin(iTime);  // Scale pulsates over time\n    \n    mat2 rotationMatrix = mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n    \n    mat2 scaleMatrix = mat2(\n        scale       , scale - 1.0,\n        scale - 1.0 , scale\n    );\n    mat2 transformationMatrix = scaleMatrix * rotationMatrix;\n\n    // Apply the transformation matrix to the distorted coordinates\n    vec2 transformedUv = transformationMatrix * (distortedUv - 0.5) + 0.5;\n\n    // Use the transformed coordinates to create a pattern\n    float pattern = sin(10.0 * transformedUv.x) * cos(5.0 * transformedUv.y);\n\n    // Output to screen\n    pattern = smoothstep(0.0, 0.1, pattern);\n    fragColor = vec4(pattern - 0.2, pattern - 0.8, pattern - 0.7, 1.0);\n}","name":"Image","description":"","type":"image"}]}