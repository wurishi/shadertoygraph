{"ver":"0.1","info":{"id":"tt3XWB","date":"1583090012","viewed":431,"name":"burn","username":"letsparty1793","description":"simulate paper burned","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","dissolve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NOISE_TYPE_PERLIN 1\n#define NOISE_TYPE_VALUE 2\n#define NOISE_TYPE NOISE_TYPE_PERLIN\n\n#define MOD3 vec3(.1031,.11369,.13787)\n//#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1.0 + 2.0 * fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// ========= Noise ===========\n#if NOISE_TYPE == NOISE_TYPE_VALUE\nfloat value_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n        \t\t\tmix(hash31(pi + vec3(0, 0, 0)), hash31(pi + vec3(1, 0, 0)), w.x),\n        \t\t\tmix(hash31(pi + vec3(0, 0, 1)), hash31(pi + vec3(1, 0, 1)), w.x), \n                    w.z),\n        \t\tmix(\n                    mix(hash31(pi + vec3(0, 1, 0)), hash31(pi + vec3(1, 1, 0)), w.x),\n        \t\t\tmix(hash31(pi + vec3(0, 1, 1)), hash31(pi + vec3(1, 1, 1)), w.x), \n                    w.z),\n        \t\tw.y);\n}\n#define noise(p) value_noise(p)\n#else\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n#define noise(p) perlin_noise(p)\n#endif\n\nfloat fbm0(vec2 p)\n{\n    float d = 0.0;\n    //const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 ); \n    float m = 4.0;\n    d += 0.5 * noise(p.xyy); p = m * p;\n    d += 0.25 * noise(p.xyy); p = m * p;\n    d += 0.125 * noise(p.xyy); p = m * p;\n    d += 0.0625 * noise(p.xyy); p = m * p;\n    return d;\n}\n\nfloat fbm1(vec2 p)\n{\n    float d = 0.0;\n    //const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 ); \n    float m = 1.5;\n    d -= 0.5 * noise(p.xyy); p = m * p;\n    d -= 0.25 * noise(p.xyy); p = m * p;\n    d -= 0.125 * noise(p.xyy); p = m * p;\n    d -= 0.0625 * noise(p.xyy); p = m * p;\n    return d;\n}\n\nfloat FBM(vec2 p)\n{\n    float d = 0.0;\n    p.xy -= 0.5;\n    vec2 op = p;\n    p *= 4.0;\n    if (p.x < 10.0) {        \n        float w = 1.0;\n        d += w * noise(p.xyy); \n        \n        p *= 4.0;\n        w /= 8.0;\n        //float m = 1.8;\n        const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 ); \n        d -= w * noise(p.xyy); p = m * p; w *= 0.5;\n        d -= w * noise(p.xyy); p = m * p; w *= 0.5;\n        d -= w * noise(p.xyy); p = m * p; w *= 0.5;\n        d -= w * noise(p.xyy); p = m * p; w *= 0.5;\n    }\n    else {\n        if (p.x < 0.0) {\n            //return fbm0((p+vec2(0.5,0.0))*10.);\n            d = noise((p+vec2(0.5,0.0)).xyy*10.);\n        }\n        else {\n            d = fbm1(p*2.);\n        }\n        d = fbm1(p*1.);\n    }\n    \n    //float l = length(op) - 0.5*sqrt(2.0);\n    //d += l;\n    \n    d += 0.5;\n    \n    float x = clamp(length(op) / (0.5*sqrt(2.0)), 0.0, 1.0);\n    x = pow(x,1.0);\n    d *= x;\n    \n    d -= 0.5;\n\n    return max(d, -0.5);\n}\n\nfloat sdGrid(vec2 coord, float num)\n{\n\tvec2 f = fract(coord.xy * num);\n\treturn 1.0 - smoothstep(0.00,0.01,min(f.x,f.y));\n}\n\n#define COLOR_LEAD vec3(.95, .35, .01)\n#define COLOR_TRAIL vec3(.95, .75, .01)\n#define COLOR_BLACK vec3(.1, .1, .1)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    time = iTime;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //vec3 heightmap = texture(iChannel2, uv).rrr;\n    vec3 heightmap  = vec3(FBM(uv)+0.5);\n    vec3 background = texture(iChannel0, uv).rgb;\n    vec3 foreground = texture(iChannel1, uv).rgb;\n    \n    float t = fract(-time*0.2);\n    //vec3 erosion = smoothstep(t-0.1*length(uv-0.5)*4., t, heightmap);\n    vec3 erosion = smoothstep(t-0.2, t, heightmap);\n    //erosion = erosion * erosion * erosion;\n    \n    //vec3 col = mix(foreground, background, erosion);\n    \n    \n    vec3 border = smoothstep(0.0, 0.1, erosion) - smoothstep(0.1, 1.0, erosion);\n    vec3 bordercolor = mix(COLOR_LEAD, COLOR_TRAIL, smoothstep(0.9, 1.0, border));\n    vec3 col = mix(foreground, bordercolor * border, step(0.01, border));\n    col = mix(col, background, erosion);\n    \n    //col = heightmap;\n    fragColor = vec4(col,1.0);// + vec4(sdGrid(uv-0.5, 2.));\n}","name":"Image","description":"","type":"image"}]}