{"ver":"0.1","info":{"id":"lssfzs","date":"1498051499","viewed":463,"name":"underwater explosion","username":"adambene","description":"Underwater explosion with smoke.\nNewton's 2nd law with the drag equation.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["explosion","water","underwater"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cycle_interval 5.\n#define t mod(iTime, cycle_interval)\n#define SEED (float(int(iTime) / int(cycle_interval)) / 1000. + .012)\n#define PI 3.141592654\n\nconst float particles = 100.;\nconst float c = 50.; // drag coeff.\nconst float m = 2.; // particle mass\nconst float sqrt_c = sqrt(c);\nconst float sqrt_m = sqrt(m);\n\n// [0, 1)\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// x: [0, PI] -> [0, 1)\nfloat rand(float x){\n    return fract(sin(x) * 43758.5453);\n}\n\n// i: (-1, 1)\nvec2 randVec(float i) {\n    float phi = rand(SEED + i + .01) * PI * 2.,\n            r = rand(SEED - i + .02);\n\treturn vec2(cos(phi), sin(phi)) * r;\n}\n\nvec2 randVecRing(float i) {\n    return normalize(vec2(rand(SEED + i + .001) - .5, rand(SEED + i + .002) - .5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y - vec2(iResolution.x / iResolution.y / 2., .5);\n    vec4 cl = vec4(0,0,.3,1);\n\n    for (float i = 0.; i < particles; i++) {\n        float seed = i / particles;\n        vec2 p0 = (randVec(seed)) / 10.;\n        vec2 v0 = (randVec(seed + .1)) * .8;\n        \n        vec2 p = p0 - v0 * 2. * sqrt_m * atan(sqrt_c * t / sqrt_m) / sqrt_c;\n\n        float d = smoothstep(.0, 1., 1. - clamp(7. * distance(uv, p), 0., 1.));\n\n        cl += .2 * vec4(1., .9, .5, 1) * mix(d, 0., t / cycle_interval);\n    }\n\n    for (float i = 0.; i < particles; i++) {\n        float seed = i / particles;\n        vec2 p0 = (randVec(seed)) / 50.;\n        vec2 v0 = (randVecRing(seed + .01)) * (.2*rand(seed + .02) + .7);\n        \n        vec2 p = p0 - v0 * 2. * sqrt_m * atan(sqrt_c * t / sqrt_m) / sqrt_c;\n\n        float d = smoothstep(.15, .0, distance(uv, p));\n\n        cl += mix(vec4(.7, .4, .0, 1) * d, -1. * vec4(.1, .1, .1, 1) * d, t / cycle_interval);\n        cl = mix(cl,vec4(.3, .3, .3, 1.), mix(d, 0., 1. - t / cycle_interval));\n    }\n\n    fragColor = cl;\n}","name":"Image","description":"","type":"image"}]}