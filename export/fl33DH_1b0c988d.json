{"ver":"0.1","info":{"id":"fl33DH","date":"1636060844","viewed":71,"name":"vectorial plane","username":"G4ROOT","description":"ssqsqs","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["plane","vectorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SIGCOUNT 8\n#define SIGCOUNTF 8.\n\nstruct s_signal {\n    int signalType;\n    float frequency;// frequency (0.5 = 2Hz)\n    float amplitude;\n};\n\nstruct s_vecPlane {\n    s_signal channelXY[SIGCOUNT];\n    s_signal channelYZ[SIGCOUNT];\n};\n\n#define M_PI 3.14159265\n\nfloat sigSin(float freq, float x)\n{\n    return sin((x * 2. * M_PI) / freq);\n}\n\nfloat sigSaw(float freq, float x)\n{\n    return abs(sqrt(mod(x/freq, 1.)) * 4. - 2.) -1.;\n}\n\n//   |---|\n// __|   |\nfloat sigSquare(float freq, float x)\n{\n    float t = mod(x, freq);\n    float f3 = (freq / 3.);\n    return  t < f3 ? -1. : ((t < f3 * 2.) ? 0. : 1.);\n}\n\nfloat sigTriangle(float freq, float x)\n{\n    \n    return abs(mod(4. * x * (1./freq), 4.) - 2.) - 1.;\n}\n\nfloat calcSignal(float x, s_signal p)\n{\n    if (p.signalType == 0) {\n        return sigSin(p.frequency, x) * p.amplitude;\n    } else if (p.signalType == 1) {\n        return sigSaw(p.frequency, x) * p.amplitude;\n    } else if (p.signalType == 2) {\n        return sigSquare(p.frequency, x) * p.amplitude;\n    }\n    return sigTriangle(p.frequency, x) * p.amplitude;\n}\n\n\nfloat calcDepth(s_vecPlane p, float x, float y)\n{\n    float XY = 0.;\n\n    for (int i = 0; i < SIGCOUNT; i++) {\n        XY += calcSignal(x, p.channelXY[i]);\n    }\n\n    float YZ = 0.;\n    for (int i = 0; i < SIGCOUNT; i++) {\n        YZ += calcSignal(y, p.channelYZ[i]);\n    }\n    \n    return (XY/SIGCOUNTF) + (YZ/SIGCOUNTF) / 2.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    s_vecPlane plane;\n    float XYamplitude[SIGCOUNT] = float[SIGCOUNT](\n        0.4, 0.2, 0.5, 0.2, 0.1, 0.4, 0.5, 0.4\n    );\n    float YZamplitude[SIGCOUNT] = float[SIGCOUNT](\n        0.4, 0.2, 0.0, 0.8, 0.2, 0.8, 0.7, 0.6\n    );\n    float XYfrequency[SIGCOUNT] = float[SIGCOUNT](\n        0.1, 0.2, 0.05, 0.2, 0.1, 0.7, 0.41, 0.5 \n    );\n    float YZfrequency[SIGCOUNT] = float[SIGCOUNT](\n        .3, .2, .5, .2, .1, .65, .41, .155 \n    );\n    int XYsig[SIGCOUNT] = int[SIGCOUNT](\n        2, 1, 2, 3, 0, 1, 2, 3\n    );\n    int YZsig[SIGCOUNT] = int[SIGCOUNT](\n        1, 1, 3, 0, 1, 0, 3, 3\n    );\n    \n    \n    for (int i = 0; i < SIGCOUNT; i++) {\n        plane.channelXY[i].amplitude = XYamplitude[i];\n        plane.channelXY[i].frequency = XYfrequency[i];\n        plane.channelXY[i].signalType = XYsig[i];\n        plane.channelYZ[i].amplitude = YZamplitude[i];\n        plane.channelYZ[i].frequency = YZfrequency[i];\n        plane.channelYZ[i].signalType = YZsig[i]; \n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float r = calcDepth(plane, uv.x, uv.y) * 2.;\n    // Output to screen\n    //fragColor = vec4(vec3(r > 0. ? r : 0., 0., r < 0. ? -r : 0.), 1.0);\n    fragColor = vec4(vec3(r > 0.33 ? r : 0., (abs(r) <= 0.33) ? r + 0.33 : 0., r < -0.33 ? -r : 0.), 1.0);\n\n}","name":"Image","description":"","type":"image"}]}