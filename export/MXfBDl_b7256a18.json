{"ver":"0.1","info":{"id":"MXfBDl","date":"1729059582","viewed":32,"name":"Beckmann LUT","username":"SelfishKrus","description":"Ref:\nGPU Gems 3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["skin","lut","beckmann"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SQUARE\n// #define SAMPLE_WITH_A2\n\n// Beckmann Texture\nfloat PHBeckmann(float NoH, float roughness)\n{\n    float a = roughness * roughness;\n    float alpha = acos(NoH);\n    float ta = tan(alpha);\n    float val = 1.0 / (a*pow(NoH,4.0)) * exp(-(ta*ta)/(a));\n    return val;\n}\n\nfloat KSTextureCompute(float PHBeckmann)\n{\n    return 0.5 * pow(PHBeckmann, 0.1f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef SQUARE\n        if (fragCoord.x > iResolution.y) \n        {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n            return;\n        }\n        vec2 uv = fragCoord/iResolution.y;\n    #else\n        vec2 uv = fragCoord/iResolution.xy;\n    #endif\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    \n    // uv.x - NoH\n    // uv.y - roughness\n    #ifdef SAMPLE_WITH_A2\n        uv.y = sqrt(sqrt(uv.y));\n    #endif \n    \n    float PH = PHBeckmann(uv.x, uv.y);\n    vec3 col = vec3(KSTextureCompute(PH));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}