{"ver":"0.1","info":{"id":"4XfyWj","date":"1726647552","viewed":47,"name":"Mirrored spectrum","username":"ncoredump","description":"Based on the work of Guages and VT220","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spectrum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n#define WIDTH 0.92\n#define HEIGHT 0.15\n#define CURVE 20.0\n\n#define BEZEL_COL vec4(0.80, 0.81, 0.85, 1.0)\n#define BEZEL_SIZE 0.10\n#define PHOSPHOR_COL vec4(0.2, 1.0, 0.2, 1.0)\n#define PHOSPHOR_COL3 vec3(0.2, 1.0, 0.2)\n\n#define SHINE 0.33\n#define AMBIENT 0.66\n//#define NO_OF_LINES iResolution.y*HEIGHT\n#define SMOOTH 0.004\n\nvec2 uv;\n\n\nvec3 getCol(float id){ //color definitions, for triplets\n    vec3 setCol = vec3(0);\n\n     if (id == 1.) setCol = vec3(244,  0,204); //vw2 pink\n     if (id == 2.) setCol = vec3(  0,250,253); //vw2 light blue\n     if (id == 3.) setCol = vec3( 30, 29,215); //vw2 blue\n     if (id == 4.) setCol = vec3(252,157,  0); //miami orange\n     if (id == 5.) setCol = vec3( 26,246,138); //miami green\n     if (id == 6.) setCol = vec3(131, 58,187); //nordic violet\n     if (id == 7.) setCol = vec3(231, 15, 20); //arena red\n     if (id == 8.) setCol = vec3( 35, 87, 97); //arena dark blue\n     if (id == 9.) setCol = vec3(103,211,225); //arena blue\n     if (id == 10.) setCol = vec3(241,204,  9); //bambus2 yellow\n     if (id == 11.) setCol = vec3( 22,242,124); //bambus2 green\n     if (id == 12.) setCol = vec3( 30,248,236); //magic turquoise\n     if (id == 13.) setCol = vec3( 28,142, 77); //matrix green\n     if (id == 14.) setCol = vec3( 66,120, 91); //matrix green 2\n     if (id == 15.) setCol = vec3(173,  0, 27); //matrix red\n     if (id == 16.) setCol = vec3(0,  255,0); //matrix red\n     if (id == 17.) setCol = vec3(255,  255,255); //matrix red\n  \n    return setCol/256.;\n}\n\nfloat aaStep( float fun){return smoothstep( fwidth(fun), .0, fun);} //simple antialiasing\nvec2 aaStep( vec2 fun){return vec2( aaStep(fun.x), aaStep(fun.y));} //overload\n\nmat2 rotM(float r){float c = cos(r), s = sin(r); return mat2(c,s,-s,c);} //2D rotation matrix\n\nfloat hash21(vec2 p){ //pseudorandom generator, cf. The Art of Code on youtu.be/rvDo9LvfoVE\n    p = fract(p*vec2(13.81, 741.76));\n    p += dot(p, p+42.23);\n    return fract(p.x*p.y);\n}\n\nfloat roundSquare(vec2 p, vec2 b, float r)\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\n\nfloat sdRoundRect( in vec2 p, in vec2 b, in float r ) {\n    vec2 q = abs(p)-b+r;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r;\n}\n\n\n\n\n\nvec2 crtCurve(vec2 uv, float r)\n{\n//        uv = (uv - 0.5) * 2.0;// uv is now -1 to 1\n        uv = r*uv/sqrt(r*r -dot(uv, uv));\n//        uv = (uv / 2.0) + 0.5;// back to 0-1 coords\n        return uv;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 draw_panel(vec2 uv,vec2 p_pos,vec2 p_size,float bezil_size) {\n    vec4 col=vec4(getCol(0.),.1);\n    vec4 b = vec4(0.0, 0.0, 0.0, 0.5);\n\n    float r = CURVE;\n    vec2 drawcoord_shine1=p_pos;\n    vec2 drawcoord_shine2=p_pos;\n\n    drawcoord_shine1.x+=0.005;\n    drawcoord_shine1.y-=0.005;\n\n    drawcoord_shine2.x+=0.005;\n    drawcoord_shine2.y+=0.005;\n\n    vec2 tmp = uv-p_pos;\n    vec2 uvE = crtCurve(tmp, r+0.15);\n    vec2 uvS = crtCurve(tmp, r);\n\n    vec2 uvC = (uvS - 0.5)* 2.0; // screen content coordinate system\n    uvC *= vec2(0.5/p_size.x, 0.5/p_size.y);\n    uvC = (uvC / 2.0) + 0.5;\n // Shine\n//    col += max(0.0, SHINE - distance(uv, p_size)) * smoothstep(SMOOTH/2.0, -SMOOTH/2.0, roundSquare(uvS-drawcoord_shine1, p_size, 0.05));\n//Ambient\n //   col += max(0.0, AMBIENT - 0.5 * distance(uvS, p_pos)) *\n  //      smoothstep(SMOOTH, -SMOOTH, roundSquare(uvS-p_pos, p_size, 0.05));\n\n    for(int i=0; i<12; i++)\n        b += (clamp(BEZEL_COL + rand(uvE+float(i))*0.05-0.010, 0., 1.) + rand(uvE+1.0+float(i))*0.10 * cos((uv.x-0.5)*3.1415*0.5))/12.;\n\n  // Inner Border\n    col += b/3.*( 1. + smoothstep(0.5*p_size.x/p_size.y-bezil_size, 0.5*p_size.x/p_size.y+bezil_size, abs(atan(uvS.x-0.5, uvS.y-0.5))/3.1415) +\n        smoothstep(0.25*p_size.x/p_size.y+bezil_size, 0.25*p_size.x/p_size.y-bezil_size, abs(atan(uvS.x-0.5, 0.5-uvS.y))/3.1415) ) *\n        smoothstep(-SMOOTH, SMOOTH, roundSquare(uvS-p_pos, p_size, 0.05)) *\n        smoothstep(SMOOTH, -SMOOTH, roundSquare(uvE-p_pos, p_size + bezil_size, 0.05));\n\n    // Shine\n    col += (b - 0.4)*\n        smoothstep(-SMOOTH*2.0, SMOOTH*2.0, roundSquare(uvE-drawcoord_shine1, p_size + bezil_size, 0.05)) *\n        smoothstep(SMOOTH*2.0, -SMOOTH*2.0, roundSquare(uvE-drawcoord_shine2, p_size + bezil_size, 0.05));\n\n    // Shine\n    col += (b - 0.4)*\n        smoothstep(-SMOOTH*2.0, SMOOTH*2.0, roundSquare(uvE-drawcoord_shine1, p_size + bezil_size, 0.05)) *\n        smoothstep(SMOOTH*2.0, -SMOOTH*2.0, roundSquare(uvE-drawcoord_shine2, p_size + bezil_size, 0.05));\nreturn col;\n}\n\n\n\nvoid mainImage( out vec4 FragColor, in vec2 fragCoord )\n{\n\n  vec2 pos, size;\n  vec2 npos = fragCoord.xy / iResolution.xy;   // 0.0 .. 1.0\n  float intensity = 0.0;\n  vec3 col=vec3(0,0,0);\n  // get uv position with origin at window center\n  float aspect = iResolution.x / iResolution.y;   // aspect ratio x/y\n  vec2 ratio = vec2(aspect, 1.0);                 // aspect ratio (x/y,1)\n  uv = (2.0 * npos - 1.0);             // -1.0 .. 1.0\n  pos = vec2(0.0, 0.0);\n  size = vec2(0.9f, 0.9f);\n  col=vec3(0,0,0);\n\n  vec4 tmp = vec4( uv-vec2(0.0,0.0), vec2(.94));\n  tmp.z = aaStep(sdRoundRect( tmp.xy, tmp.zw,0.06)); //empty box\n // col *= 1.-tmp.z; //delete col\n  tmp.xy /= 2.*tmp.w;\n  col += (texelFetch(iChannel0, ivec2(int(512.*2.*abs(tmp.x)),0),0).x - 2.*abs(tmp.y)) * tmp.z * getCol(4.0); //mirrored sound texture spectrum\n\n\n  vec4 pannel;\n  pannel=draw_panel(uv,pos,size,0.1);\n\n  vec4 col4=vec4(0,0,0,0);\n  col4=mix(col4,vec4(col,tmp.z),tmp.z);\n\n // if (col4.b == 0.0) discard;\n\n vec4 finalColor=vec4(0);\n finalColor+=mix(finalColor,pannel,1.0);\n //col4.r=0;\n finalColor+=mix(finalColor,col4 * -vec4(getCol(4.0),0.0), -tmp.z);\n finalColor.a=1.0;\n FragColor = finalColor;\n\n\n}","name":"Image","description":"","type":"image"}]}