{"ver":"0.1","info":{"id":"WtBGD3","date":"1564315704","viewed":708,"name":"Transparent Blocks","username":"nr4","description":"Block scene from the 64k intro \"Gross Gloss\" by Team210 at Solskogen 2k19","likes":39,"published":1,"flags":32,"usePreview":0,"tags":["demoscene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Gross Gloss by Team210 - 64k intro by Team210 at Solskogen 2k19\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float fsaa = 144.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float bound = sqrt(fsaa)-1.;\n   \tfor(float i = -.5*bound; i<=.5*bound; i+=1.)\n        for(float j=-.5*bound; j<=.5*bound; j+=1.)\n        {\n     \t\tcol += texture(iChannel0, fragCoord/iResolution.xy+vec2(i,j)*mix(3.,20.,2.*abs(fragCoord.y/iResolution.y-.5))*exp(-abs(1.e-2*length(fragCoord.xy)/iResolution.y-.5))/max(bound, 1.)/iResolution.xy).xyz;\n        }\n    col /= fsaa;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* Gross Gloss by Team210 - 64k intro by Team210 at Solskogen 2k19\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n// Update1: Changes implementing FabriceNeyret2's comments.\n\n// Global constants\nconst vec3 c = vec3(1.0, 0.0, -1.0);\n\nfloat iScale;\n\nvoid rand(in vec2 x, out float n)\n{\n    x += 400.;\n    n = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n}\n\n// Box sdf\nvoid dbox(in vec2 x, in vec2 b, out float d)\n{\n    vec2 da = abs(x)-b;\n    d = length(max(da,c.yy)) + min(max(da.x,da.y),0.0);\n}\n\n// Stroke\nvoid stroke(in float d0, in float s, out float d)\n{\n    d = abs(d0)-s;\n}\n\n// Extrusion\nvoid zextrude(in float z, in float d2d, in float h, out float d)\n{\n    vec2 w = vec2(-d2d, abs(z)-0.5*h);\n    d = length(max(w,0.0));\n}\n\n// Add sdfs\nvoid add(in vec2 sda, in vec2 sdb, out vec2 sdf)\n{\n    sdf = sda.x<sdb.x?sda:sdb;\n}\n\nvec2 ind;\nvoid scene(in vec3 x, out vec2 sdf)\n{\n    x.y += .3*iTime;\n    x.xy = vec2(x.x-x.y,x.x+x.y)/sqrt(2.);\n    \n    float d,\n        size = .1;\n    vec2 x2 = mod(x.xy,size)-.5*size;\n\t\n    ind = ceil((x.xy - x2)/size);\n    dbox(x2, .5*size*c.xx, d);\n    zextrude(x.z, -d-.005, .05, d);\n    d = max(x.z,d);\n    d = abs(d);\n    sdf = vec2(d,2.);\n    \n    float r, r2;\n    rand(ind-floor(iTime), r);\n    rand(ind-floor(iTime)-1., r2);\n    r = mix(r, r2, smoothstep(.8,1.,fract(iTime)));\n    if(r > .7)\n    {\n        r2 = 1.;\n        dbox(x2, .5*size*c.xx, d);\n        zextrude(x.z, -d-.02, .3*(r-.7)/.3*r2, d);\n        stroke(d, .001, d);\n        add(sdf, vec2(d,1.), sdf);\n    }\n}\n\nvoid normal(in vec3 x, out vec3 n)\n{\n    const float dx = 1.e-4;\n    vec2 s, na;\n    \n    scene(x,s);\n    scene(x+dx*c.xyy, na);\n    n.x = na.x;\n    scene(x+dx*c.yxy, na);\n    n.y = na.x;\n    scene(x+dx*c.yyx, na);\n    n.z = na.x;\n    n = normalize(n-s.x);\n}\n\nfloat sm(float d)\n{\n    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);\n}\n\nvoid colorize(in vec2 x, out vec3 col)\n{\n    x.y += .3*iTime;\n    x = vec2(x.x-x.y,x.x+x.y)/sqrt(2.);\n    \n    float d,\n        size = .1,\n        r;\n    vec2 x2 = mod(x.xy,size)-.5*size;\n    \n    float r2;\n    rand(ind-floor(iTime), r);\n    rand(ind-floor(iTime)-1., r2);\n    r = mix(r, r2, smoothstep(.8,1.,fract(iTime)));\n    col = mix(.14*c.xxx, .33*c.xxx, r);\n    dbox(x2, .35*size*c.xx, d);\n    if(r > .9)\n    {\n        col = mix(col, mix(c.xxy, c.xxx, .8), sm(d));\n        stroke(d, .0025, d);\n        col = mix(col, mix(c.xyy,c.xxx,.8), sm(d));\n        stroke(d-.004, .002, d);\n        col = mix(col, c.xyy, sm(d));\n    }\n\telse if(r > .8)\n    {\n        col = mix(col, mix(c.xyy, c.xxx, .8), sm(d));\n        stroke(d, .0025, d);\n        col = mix(col, mix(.7*c.xxy,c.xxx,.8), sm(d));\n        stroke(d-.004, .002, d);\n        col = mix(col, .7*c.xxy, sm(d));\n    }\n    else if(r > .7)\n    {\n        col = mix(col, mix(c.xyy, c.xxx, .8), sm(d));\n        stroke(d, .0025, d);\n        col = mix(col, mix(mix(c.xxy, c.xyy, .5),c.xxx,.8), sm(d));\n        stroke(d-.004, .002, d);\n        col = mix(col, mix(c.xxy, c.xyy, .5), sm(d));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    iScale = 1.;\n    \n    vec2 uv = ( fragCoord -.5* iResolution.xy) / iResolution.y, \n        s;\n    vec3 col = c.yyy, \n        o = c.yzx,\n        r = c.xyy, \n        u = normalize(c.yxx), \n        t = c.yyy, \n        dir,\n        n,\n        x;\n    int N = 100,\n        i;\n    t = uv.x * r + uv.y * u;\n    dir = normalize(t-o);\n\n    float d = -(o.z-.15)/dir.z;\n    \n    for(i = 0; i<N; ++i)\n    {\n     \tx = o + d * dir;\n        scene(x,s);\n        if(s.x < 1.e-4)break;\n        if(x.z<-.05)\n        {\n            col = .2*c.xxx;\n            i = N;\n            break;\n        }\n        d += min(s.x,5.e-3);\n        //d += s.x;\n    }\n    \n    if(i < N)\n    {\n        normal(x,n);\n        \n        if(s.y == 1.)\n        {\n            vec3 l = normalize(x+c.xzx);\n            vec3 c1;\n            \n            float r;\n\t\t    rand(ind-floor(iTime), r);\n            if(r > .9)\n                col = c.xyy;\n            else if(r > .8)\n                col = .7*c.xxy;\n            else if(r > .7)\n                col = mix(c.xxy, c.xyy, .5);\n            float sc = clamp((r-.7)/.3,0.,1.);\n            col = mix(mix(col, c.xxx, .1*sc), .4*c.xyy, sc);\n            col = .3*col\n                + .9*col * abs(dot(l,n))\n                + 1.3*col * pow(abs(dot(reflect(-l,n),dir)),3.);\n            col = mix(col, c.xxx, .4);\n            col *= col;\n            \n            d = -(o.z)/dir.z;\n            x = o + d * dir;\n            scene(x,s);\n            l = normalize(x+c.xzx);\n            colorize(x.xy, c1);\n            n = c.yyx;\n            \n            c1 = .1*c1\n                + .8*c1 * abs(dot(l,n))\n                + c1 * pow(abs(dot(reflect(-l,n),dir)),3.);\n            col = mix(col, c1, .3);\n        }\n        else if(s.y == 2.)\n        {\n            vec3 l = normalize(x+c.xzx);\n            float r;\n            \n            colorize(x.xy, col);\n            col = .1*col\n                + .8*col * abs(dot(l,n))\n                + col * pow(abs(dot(reflect(-l,n),dir)),3.);\n        }\n    }\n    col += col;\n    col *= col;\n    \n    fragColor = vec4(clamp(col,0.,1.),1.0);\n}\t","name":"Buffer A","description":"","type":"buffer"}]}