{"ver":"0.1","info":{"id":"4sVfD3","date":"1569954382","viewed":132,"name":"transparent","username":"pequalsnp","description":"a simple transparent shader","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["colors","shading","transparent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Angle(vec3 v,vec3 u)\n{\n    return dot(v,u)/(length(v)*length(u));\n}\n\nfloat Delta(vec3 pos,vec3 spos)\n{\n    float a = Angle(pos,vec3(sin(iTime*0.15),cos(iTime*0.1),sin(iTime*0.1)));\n    \n\treturn  abs(length(pos-spos)\n               - 1.0\n               + 0.05*sin(8.0*pos.y + iTime)\n               - 0.05*sin(16.0*pos.x*pos.y + iTime)\n        \t   + 0.05*sin(20.0*a));\n}\n\nvec3 Normal(vec3 pos,vec3 spos) {\n    return normalize(pos-spos);\n}\n\nvec3 Col(vec3 pos,vec3 spos)\n{\n    vec3 norm = Normal(pos,spos);\n    return norm*Angle(norm,vec3(1.0,0.5,0.5));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0*fragCoord/iResolution.xy - 1.0;\n    \n\tvec3 pos = vec3(uv,0.0);\n    vec3 dir = pos - vec3(0.0,0.0,-1.5);\n    \n    vec3 spos = vec3(sin(iTime)*0.1,cos(iTime)*0.1,1.0);\n    \n\tvec3 color  = vec3(0.0);\n    \n    int steps = 150;\n    for(int i = 0; i < steps; i++)\n    {\n        if(Delta(pos,spos) < 0.015)\n        {\n            color += Col(pos,spos)*(float(i)/float(steps));\n        }\n        pos += 0.01*dir;\n    }\n    \n\tcolor *= 0.35;\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}