{"ver":"0.1","info":{"id":"lfcBDl","date":"1733614035","viewed":32,"name":"three-quarter circles [mag]","username":"magnet_powered","description":"Based on a doodle I did at work.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["circles","rotate"],"hasliked":0,"parentid":"MccBDl","parentname":"fish scales [mag]"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Thanks to Fabrice Neyret for improvement suggestions\n * (@FabriceNeyret2, see comments)\n */\n\n#define PI radians(180.)\n#define PI2 radians(360.)\n\n#define NUM_TILES (12.)\n#define CIRCLE_THICKNESS (.03)\n#define ARC_PROPORTION (0.75)\n\n// Colours from https://lospec.com/palette-list/kirokaze-gameboy\n#define white (vec3(0xe2, 0xf3, 0xe4) / 255.)\n#define black (vec3(0x33, 0x2c, 0x50) / 255.)\n#define grey  (vec3(0x46, 0x87, 0x8f) / 255.)\n\n\nfloat rand(in vec2 v) {\n    return fract(1e4 * sin(dot(v, vec2(12.9898, 78.233))));\n}\n\nfloat calc_angle_offset(in vec2 tile_id) {\n    return PI2 * fract(rand(tile_id) + (iTime / 5.));\n}\n\nbool in_angle(float angle, float angle_start, float arc_proportion) {\n    return abs(mod(angle - angle_start + PI, PI2) - PI) < arc_proportion * PI;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 coord) {\n    vec2 norm_coord = NUM_TILES * coord / iResolution.y;\n    vec2 tile_id = floor(norm_coord);\n\n    float d = 9.;\n    for (int i = 0; i < 9; i++) {\n        vec2 neighbor_offset = vec2(i % 3, i / 3) - 1.;\n        vec2 pos = fract(norm_coord) - neighbor_offset - .5;\n        float angle = atan(pos.y, pos.x);\n        float angle_offset = calc_angle_offset(tile_id + neighbor_offset);\n\n        if (in_angle(angle, angle_offset, ARC_PROPORTION)) {\n            d = min(d, abs(length(pos) - 1.) - CIRCLE_THICKNESS);\n        }\n    }\n\n    float t = smoothstep(0., 12. / iResolution.y, d);\n    fragColor = vec4(mix(black, white, t), 1.);\n}\n","name":"Image","description":"","type":"image"}]}