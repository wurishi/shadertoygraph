{"ver":"0.1","info":{"id":"WlV3WR","date":"1578926137","viewed":89,"name":"Rudimentary Solar System","username":"KVogt","description":"Shader Proj of a solar system for Computer Graphics","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["solorsystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvec4 Sun (vec2 uv)\n    {\n        float sunSize = length(uv);\n        vec4 sunColors = vec4(1.0,abs(sin(iTime))+.6 ,0.00, 0.0);\n        \n       // vec4 planOne = PlanetOne(uv);\n        \n        sunColors.a = smoothstep(.20,.14,sunSize);\n        return sunColors;\n        //return circ;    \n    }\n\nvec4 PlanetOne(vec2 uv){\n   // float len = length(uv); //distance from any edge on the sun to the center of the planet\n    \n   // len = len - (uv.x-.5)\n    float planetPos = length(uv*3.0 + vec2(1.3 * sin(iTime / 3.0), cos(iTime / 3.0)));\n    \n    vec4 planetColors = vec4(0.0, 0.5, 0.6, 0.0);\n    planetColors.a = smoothstep( .26, .25, planetPos);\n    \n    return planetColors;\n}\n\nvec4 PlanetTwo(vec2 uv){ //maybe moon?\n    \n    float moonPos = length(((uv * 3.0 + vec2(1.3 * sin(iTime / 3.0), cos(iTime / 3.0)))*2.5) + vec2(sin(iTime*2.0 ), cos(iTime*2.0)));\n    vec4 moonColors =vec4(0.6, 0.4, 0.4, 0.0);\n    moonColors.a = smoothstep( .13, .12, moonPos);\n    return moonColors;\n}    \n\n\nvec4 Space(vec2 uv){\n   vec4 spaceColor = vec4(.11,.13,.13,0.0);\n    vec4 sun = Sun(uv);\n    spaceColor = mix (spaceColor, sun, sun.a);\n    vec4 plan1 = PlanetOne(uv);\n    spaceColor = mix(spaceColor, plan1, plan1.a);\n    vec4 moon = PlanetTwo(uv);\n    spaceColor = mix(spaceColor, moon, moon.a);\n    \n    return spaceColor;\n}   \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n   \n    \n    // Output to screen\n    fragColor = Space(uv);}","name":"Image","description":"","type":"image"}]}