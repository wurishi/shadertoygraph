{"ver":"0.1","info":{"id":"Wls3Wf","date":"1557925232","viewed":172,"name":"smin of 3 euler spiral distances","username":"ollj","description":"mouse.x sets chirality\nmouse.y sets thickness\n\nmessing around with spirals.\ni need spirals to debug wallpaper-group stuff.\nthat gets back to basic chirality of:\nhttps://www.shadertoy.com/view/4ldyWN","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sabs","eulerspiral","smon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//only integer numbers of chirality\n#define FloorIt\n\n#define ViewZoom 5.\n\n#define spinSpeed .1\n\n\n\n\n//get spital coords of poolar coords\n\n//carthesian coords in polar coords out\nvec2 c2p(vec2 uv){ return vec2(atan(uv.x,uv.y),length(uv));}\n\n//polar 2 spiralEuclidean\nvec2 p2se(vec2 u,float turns\n){u.x=u.x*turns/pi\n ;u-=mod(turns+1.,2.)*2.//optionally fix oddChiraliyOffset (blue lines become asymptotic to blue lines towards the center)\n ;u.x+=iTime            //optionally GrowSpin over time\n ;float s=u.y-u.x\n ;return (vec2(floor(s)-u.x,s));}\n\n//carthesian 2 spiralEuclidean\nvec2 c2se(vec2 u,float turns){return p2se(c2p(u),turns);}\n\nvec4 spiral(vec2 u,vec4 m,float bokeh){\n    \n     //;vec2 n=(iMouse.zw-.5)*ViewZoom;\n ;vec2 v=u*ViewZoom\n ;      m*=ViewZoom*2.\n ;if(m.y<0.){u.x=-u.x;}\n #ifdef FloorIt\n ;m.y=floor(m.y*2.+.5)*.5\n #endif  \n ;v=c2se(v,m.y)\n ;v=fract(v)    \n\n ;vec3 c=v.xyy\n //m.x sets thickness of red\n ;m.x=iMouse.x/iResolution.x\n ;//m.x=1.-m.x\n ;m.x=clamp(m.x,bokeh,1.-bokeh)\n ;m.x=abs(v.y-.5)-.5*m.x\n ;return vec4(c.xz,v.y,m.x)\n ;}\n\n\nvoid mainImage(out vec4 O,vec2 I){//;int a=34%3\n ;vec2 u=fra(I.xy);\n ;vec4 mouse=iMouseZwFix(iMouse,true)\n ;vec4 m=vec4(fra(mouse.xy),fra(mouse.zw))\n ;float bokeh=6.*ViewZoom/min(iResolution.x,iResolution.y)\n ;vec4 dd=spiral(u           ,   m.zwxy,bokeh)\n ;vec4 ee=spiral(u-1.5       ,  -m     ,bokeh)     \n ;vec4 ff=spiral(u-vec2(1,-1),   m     ,bokeh)\n ;vec3 c=mix(mix(dd.xyy,ee.xyy,.5),ff.xyy,1./3.)\n ;vec2 v=mix(mix(dd.yz ,ee.yz ,.5),ff.yz ,1./3.)\n ;\n ;//ee.w=smin(ee.w,dd.w,1.)\n ;//ee.w=smin(ee.w,ff.w,1.)\n ;\n ;//ee.w=mix(ee.w,dd.w,.5)\n ;//ee.w=min(ee.w,dd.w)\n ;//ee.w=smine(ee.w,dd.w,13.) \n ;//ee.w=smine(ee.w,dd.w,13.)\n     \n ;//ee.w=sminh(ee.w,dd.w,.013)\n ;//ee.w=sminh(ee.w,ff.w,.013)\n ;\n ;ee.w=sminc(ee.w,dd.w,.5)\n ;ee.w=sminc(ee.w,ff.w,.5)\n ;\n ;//ee.w+=-ff.w-dd.w                //hexagonal nonsense\n ;//ee.w*=ff.w*dd.w ;ee.w=sat(ee.w)   //3x metaball spiral disappoints\n ;    \n ;ee.w=smoothstep(bokeh,-bokeh,ee.w)\n ;c.y=ee.w//c.y=mix(v.y,ee.w,u.y/ViewZoom*2.+1.)\n ;c=c.yzx\n ;c.y*=.3\n ;O=vec4(c,1)\n ;}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 iMouseZwFix(vec4 m,bool NewCoke\n ){if(m.z>0.){ //while mouse down\n    if(m.w>0.)return m;//mouse was clicked in THIS     iFrame \n    else m.w=-m.w      //mosue was clicked in previous iFrame\n    //remember, MouseDrag advances the iFrame Count, even while paused !!\n ;}else{if(!NewCoke||m.w>0.)return m.xyxy; //OPTIONAL onMouseUp (fold or whatever)\n    m.zw=-m.zw;}\n  return m;}\n\n\n#define pi acos(-1.)\n#define fra(u)(u-.5*iResolution.xy)*ViewZoom/iResolution.y\n#define v0 float\n#define v1 vec2\n#define v2 vec3\n#define v3 vec4\n#define u2(a)(a*2.-1.)\n#define u5(a)(a*.5+.5)\n#define dd(a)dot(a,a)\n//perpendicular dot()used for line intersections.\n#define dotp(a,b)dot(vec2(-a.y,a.x),b)\nv0 suv(vec2 a){return a.x+a.y;}\nv0 miv(v1 a){return min(a.y,a.x);}//return max domain of vector.\nv0 miv(v2 a){return min(a.z,miv(a.xy));}\nv0 miv(v3 a){return min(miv(a.zw),miv(a.xy));}\n#define mav(a)-miv(-a)\n#define sat(a)clamp(a,0.,1.)\nvec4 minx(vec4 a,vec4 b){return mix(b,a,step(a.x,b.x));}//return the vec4 with the smaller .x\n#define min2dd(a)min(dd(a.xy),dd(a.zw))\n#define equals(a,b,c)   mix(b,a,step(c,0.)+step(0.,c)-1.)\n#define equals2(a,b,c)   mix(b,a,step(c.x,0.)+step(0.,c.x)+step(c.y,0.)+step(0.,c.y)-3.)\nvec2 perp(vec2 a){return vec2(-a.y,a.x);}\nbool rea(float s,float b,float e){b-=s;return(abs(s-.5*b)*e<abs(b));}//return(abs(b-a*.5)<a*e);//return(s<b-e||s>b+e);\nv0 segment2(v1 p,v1 a,v1 b){p-=a;b-=a;return dd(p-b*sat(dot(p,b)/dd(b)));}\nv0 segment(v1 p,v1 a,v1 b){return sqrt(segment2(p,a,b));}\nv0 lie(v1 u,v1 a,v1 b\n){float c=dd(a-u);float d=segment2(u,a,b);a.x=equals2(c,d,(a-b));return sqrt(a.x);}\n//return distacne from [u] to intersection of ray [ut] and plane [n] trough origin. //[n]PlaneNormal,[u]RayOrigin,[t]RayDirection\n//float gPRxZ(vec3 n,vec3 u,vec3 t){return -(dot(n,u)/dot(n,t));}\nfloat gPRxZ(vec2 n,vec2 u,vec2 t){return -(dot(n,u)/dot(n,t));}//second life wiki geometric,is a generalization of segment():\n//lazy fast div0 avoidance.\n// Solve cubic equation for roots\nvec3 solveCubic(vec3 a){float p=a.y-a.x*a.x/3.,p3=p*p*p,q=a.x*(2.*a.x*a.x-9.*a.y)/27.+a.z,d=q*q+4.*p3/27.,o=-a.x/3.\n;if(d>=.0){vec2 v=(vec2(1,-1)*sqrt(d)-q)/2.;return vec3(o+suv(sign(v)*pow(abs(v),vec2(1./3.))));}\n;float v=acos(-sqrt(-27./p3)*q*.5)/3.,m=cos(v),n=sin(v)*sqrt(3.);return vec3(m+m,-n-m,n-m)*sqrt(-p/3.)+o;}\nvec2 solveCubic2(vec3 a)\n{float p=a.y-a.x*a.x/3.\n;float b=p*p*p,q=a.x*(2.*a.x*a.x-9.*a.y)/27.+a.z\n;float d=q*q+4.*b/27.\n;float o=-a.x/3.\n;if(d>=.0){vec2 v=(vec2(1,-1)*sqrt(d)-q)/2.;return vec2(o+suv(sign(v)*pow(abs(v),vec2(1./3.))));}\n;float v=acos(-sqrt(-27./b)*q*.5)/3.,m=cos(v),n=sin(v)*sqrt(3.);return vec2(m+m,-n-m)*sqrt(-p/3.)+o;}\nfloat sdBezier(vec2 A,vec2 B,vec2 C,vec2 u){\n;if(!(rea(A.y,C.y,.001)))return lie(u,A,C);\n;vec4 b=A.xyxy-vec4(u,B*2.-C);vec2 a=B-A,t=sat(solveCubic2(vec3(3.*dot(a,b.zw),2.*dd(a)+dot(b.xy,b.zw),dot(b.xy,a))/dd(b.zw)))\n;vec4 c=a.xyxy*2.;A-=u;b=A.xyxy+vec4(a.xy*2.+b.zw*t.x,a.xy*2.+b.zw*t.y)*t.xxyy;return sqrt(min2dd(b));}\n\nconst float tiny=1e-7;//smallest denormalNumber>0_16bit_float is pow(2,-24)\n#define if0(a)if(a==0.)a=tiny\n\n//smin sabs collection of \n//https://www.shadertoy.com/view/ltf3W2\n//has 6 different smin sabs functions\n// The MIT License\n// Copyright Â© 2018 Tiny Texel\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/**/\n\n//hermite polynomial\n// polynomial\nfloat SRamp3(float x, float k\n){float xp=sat(-x*k+.5)\n ;float xp2 = xp * xp\n ;return min(x, xp2 * (xp2 * 0.5 - xp) / k);}\n\nfloat SAbs3(float x, float k){return x - 2.0 * SRamp3(x, k);}\n\nfloat smin(float a, float b, float k){return a+SRamp3(b-a,k);}\n\n// exponential\nfloat srampe(float x,float k){return x/(1.-exp2(x*k));}\nfloat sabse(float x,float k){return x-2.*srampe(x,k);}\nfloat smine(float a,float b,float k){return a+srampe(b-a,k);}\n\n// hyperbolic\nfloat sabsh(float x, float k){return sqrt(x*x+k);}\nfloat sramph(float x, float k){return .5*(x-sabsh(x, k));}\nfloat sminh(float a, float b, float k){return a+sramph(b-a,k);}\n\n\n// cosine\n\n// C2\nfloat SAbsCos(float x, float r\n){float n=r*2./pi\n ;return max(abs(x), cos(x / n) * -n + r);}\nfloat SRampCos(float x, float k\n){return 0.5 * (x - SAbsCos(x, k));}\nfloat sminc(float a, float b, float k\n){return a + SRampCos(b - a, k);}\n\nfloat sabsC(float x, float r\n){return abs(x)>r?abs(x):(x*x*.5/r)+(r*(.398679-cos(x*pi/r)/pi/pi));}\nfloat SRampCos2(float x, float k){return .5*(x-sabsC(x,k));}\nfloat sminC(float a, float b, float k\n){return a + SRampCos2(b - a, k);}","name":"Common","description":"","type":"common"}]}