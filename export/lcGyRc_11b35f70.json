{"ver":"0.1","info":{"id":"lcGyRc","date":"1732148432","viewed":68,"name":"Perpendicular Mandelbrot Lasers","username":"Mandelbrot837","description":"An experimental coloring of the Perpendicular Mandelbrot.  Here's how it works:\nIf the real value is less than 0, add some red.  Otherwise, add some blue.\nThe green results from points being close to the boundary between red and blue.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat randSeed = 0.;\nvec2 nextRand2() {\n    vec2 v = vec2( randSeed++, randSeed++ );\n\treturn vec2( random( v+0.34 ), random( v+0.75 ) );    \n}\n\n#define MAX_ITER 448.\n#define THRESHOLD 262144.\n#define SPEED 1.0\n#define ILLUMINATION_FACTOR 64.\n#define ILLUMINATION_POWER 0.40625\n#define CENTER vec2(-0.6291921,0.5161883)\n\nvec3 pbrot(vec2 uv, float time) {\n    // z = ( |Re(z)| + i|Im(z)| )^2\n    \n    float zoom = pow(0.25,-cos(time) * 4. + 4.) * 4.;\n    vec2 z = zoom*(uv - vec2(0,0));\n    z += CENTER;\n    vec2 c = z;\n    vec3 cinterior = vec3(0.);\n    float i = 0.;\n    \n    vec3 outColor;\n    \n    for(; ++i <= MAX_ITER ;) {\n        if(z.x > 0. && true)\n        {\n            z = vec2(z.x, -z.y);\n            cinterior += vec3(0,0,ILLUMINATION_FACTOR / dot(z,z));\n        }\n        else\n        {\n            cinterior += vec3(ILLUMINATION_FACTOR / dot(z,z),0,0);\n        }\n        \n        cinterior += vec3(0,256. / (abs(z.x) / (abs(z.y) - dot(z,z) * 0.125)) / (0.25 * dot(z,z) + 0.00390625), 0);\n        \n        if(false)\n        {\n            z = abs(z);\n        }\n        \n        z = mat2(z, -z.y, z.x) * z + c;\n    \tif( dot(z,z) > THRESHOLD ) break;\n\t}\n\n    return vec3(pow(cinterior.x,ILLUMINATION_POWER),pow(cinterior.y,ILLUMINATION_POWER * 0.65),pow(cinterior.z,ILLUMINATION_POWER));\t    \n}\n\n// Main\n\n#define SAMPLES 2.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 R = iResolution.xy;\n    \n    vec3 col = vec3(0);\n\n    for(float i=0.; i < SAMPLES; i++) {\n        vec2 p = 0.5*(2.*fragCoord-R+nextRand2())/R.y ;\n        p.y = -p.y;\n        col += pbrot(p, iTime * 0.1) / MAX_ITER;\n    }\n    \n    col *= (1./SAMPLES);\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}