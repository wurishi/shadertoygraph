{"ver":"0.1","info":{"id":"WdVyRd","date":"1603513319","viewed":7913,"name":"Balls on a rope","username":"xjorma","description":"Remake of an old Atari ST Demoscene Effect by Elric/Holocaust\nhttps://youtu.be/X3f5e8cIDT8?t=706\nMusic by Jess","likes":35,"published":3,"flags":64,"usePreview":0,"tags":["demoscene","amiga","demo","ball","atari","rope","reproduction","cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4tjGW3","filepath":"https://soundcloud.com/david-gallardo-492062428/atari-demo-music-by-jess-overlander","previewfilepath":"https://soundcloud.com/david-gallardo-492062428/atari-demo-music-by-jess-overlander","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\nconst int\tnbBall = 8;\nconst float ballRadius = 0.07;\nconst float maxLateralSpeed = 1.;\nconst float Tau = radians(360.);\nconst float minPhaseSpeed = 2.1;\nconst float maxPhaseSpeed = 3.2;\nconst float sinAmplitude = 1.2;\nconst vec3\tdrawColor = vec3(0.2,0.3,0.4);\n\n// Hash without Sine, https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nfloat triangleSignal(float x, float f)\n{\n    f = 1. / f;\n    return (abs((f * x - 4. * floor(0.25 * f * x)) - 2.) - 1.) / f;\n}\n\nfloat smoothFilter(float d)\n{\n    float v = 2. / iResolution.y;\n    return smoothstep(v, -v, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2\tp = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float\tratio = iResolution.x / iResolution.y;\n    vec3\tcol = vec3(0);\n    \n    // Compute and draw balls\n    vec2\tballArray[nbBall + 1];\n    for(int i = 0; i < nbBall; ++i)\n    {\n        float LateralSpeed = (hash11(float(i) * 1.2544) - 0.5) * 2. * maxLateralSpeed;\n        float phaseOffset = hash11(float(i) * 1.4482) * Tau;\n        float LateralOffset = hash11(float(i) * 1.9528) * (ratio * 2. - 2. * ballRadius);\n        float phaseSpeed = mix(minPhaseSpeed, maxPhaseSpeed, hash11(float(i) * 1.1273));\n        ballArray[i] = vec2(\ttriangleSignal(LateralOffset + LateralSpeed * iTime, ratio - ballRadius),\n                       \t\t\tsinAmplitude * (abs(sin(phaseOffset + phaseSpeed * iTime)) - 0.5) \n                           );\n        float a = smoothFilter(sdCircle( ballArray[i] - p , ballRadius));\n        col = mix(col, drawColor, a);           \n    }\n    \n    // Sort Ball in X (Lame bubble)\n    for(int i = 0; i < nbBall - 1; ++i)\n    {\n\t    for(int j = 0; j < nbBall - 1 - i; ++j)\n        {\n            if(ballArray[j].x > ballArray[j + 1].x)\n            {\n                vec2 tmp = ballArray[j + 1];\n                ballArray[j + 1] = ballArray[j];\n                ballArray[j] = tmp;\n            }\n        }\n    }\n    \n   \t// Find convex using an algorithm similar to gift wraping\n \tballArray[nbBall] = vec2(ratio, 0);\n    int   convexSize = 0;\n    vec2  convexHull[nbBall + 2];\n    convexHull[convexSize++] = vec2(-ratio, 0);\n    int\t  SmallestIndex = 0;\n    for(;;)\n    {\n        float SmallestDir = 1.;\n        bool  found = false;\n        for(int i = SmallestIndex; i < nbBall + 1; ++i)\n        {\n            vec2 dir = normalize(ballArray[i] - convexHull[convexSize - 1]);\n            if(dir.y < SmallestDir)\n            {\n                \n                SmallestDir = dir.y;\n                SmallestIndex = i;\n                found = true;\n            }\n        }\n       \tif(found)\n        {\n            convexHull[convexSize++] = ballArray[SmallestIndex];\n        }\n        else\n        {\n            break;\n        }\n    }\n      \n        \n    // Draw hull\n    for(int i = 0; i < convexSize - 1; ++i)\n    {\n\t    float a = smoothFilter(udSegment(p, convexHull[i] - vec2(0, ballRadius), convexHull[i + 1] - vec2(0, ballRadius)) - 0.005);\n        col = mix(col, drawColor, a);\n          \n    }\n\n \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}