{"ver":"0.1","info":{"id":"clVXzR","date":"1685900818","viewed":41,"name":"Warbling Pentagons","username":"ReasonMaster","description":"Warbling pentagons!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["warble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    float d0 = length(uv);\n    \n    uv = fract(uv * 2.) - 0.5;\n    \n    float d = length(vec2(uv.x, uv.y));\n    \n    float d1 = d0;\n\n    for (float i = 0.; i < 4.; i++) {\n        d1 -= 0.8 + (sin(iTime * 0.5) / (2. + i));\n        d1 = abs(d1);\n        //d0 = smoothstep(0., 0.5, d0);\n        d1 = 0.2 / d1;\n    }\n    \n    float pent = (0.6 + (cos(iTime) / 7.)) - smoothstep(0., (0.2 + (cos((iTime + (d1 * 4.)) * 1.6) / (8. + d0))), sdPentagon(uv, (d0 * 0.2)));\n    pent = 0.8 / pent;\n\n\n\n    \n    \n    vec3 col = vec3(pent * d1, \n                    0.5 - (d / (0.8 + (sin((iTime * 2.) - (d1 * 2.)) / 5.))), \n                    pent * 0.3);\n                   \n\n    if (col.x >= 1. && col.z >= 1.) {\n        col = vec3(d0 * 0.5, d, d);\n    }\n    \n\n    \n    col += d1 * 0.2;\n    //d0 = 0.5 / d0;\n    //col = vec3(d0);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}