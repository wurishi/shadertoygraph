{"ver":"0.1","info":{"id":"ltXfWl","date":"1513856517","viewed":1516,"name":"Old TV Filter","username":"zoweb","description":"Makes the input look like an old TV.\n\nUses some lens distortion, scan lines, noise, desaturation, over-the-top \"HDR\" and a vignette.","likes":20,"published":1,"flags":40,"usePreview":0,"tags":["noise","scanlines","grain","oldtv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n    \n    //fragColor -= clamp(mod(floor(fragCoord.y), 2.), 0., 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/************************************************************************\n * This buffer generates the effected output.                           *\n * The next buffers will apply effects such as scan lines and blurring. *\n ************************************************************************/\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord / iResolution.xy;\n    float alpha = 1.;\n    \n    float isBar = mod(fragCoord.y, 2.);\n    fragCoord.x -= isBar * (rand(uv * iTime) * 14. - 7.);\n    fragCoord.y -= isBar * (rand(uv + iTime) * 4. - 2.);\n    alpha *= 1. - isBar / 20.;\n                            \n\tvec2 noisedUV = fragCoord / iResolution.xy;\n    \n    // lens distortion\n    float distortAmount = distance(vec2(.5), noisedUV);\n    noisedUV -= vec2(.5);\n    noisedUV *= 1. + ((.5 - distortAmount) / .5) * -.17;\n    noisedUV += vec2(.5);\n    \n\tfragColor = texture(iChannel0, noisedUV);\n    \n    // desaturate\n    float desaturation = .6;\n    \n    float r = fragColor.r;\n    float g = fragColor.g;\n    float b = fragColor.b;\n    \n    float luma = .3 * r + .6 * g + .1 * b;\n    \n    fragColor.r = r + desaturation * (luma - r);\n    fragColor.g = g + desaturation * (luma - g);\n    fragColor.b = b + desaturation * (luma - b);\n    fragColor = clamp(fragColor, 0., 1.);\n    \n    // hdr\n    fragColor += fragColor - .5;\n    fragColor = clamp(fragColor, 0., 1.);\n    \n    // noise\n    fragColor -= round(rand(uv * iTime) / 1.5) / 15.;\n    fragColor = clamp(fragColor, 0., 1.);\n    fragColor *= alpha;\n    \n    // vignette\n\tfragColor *= 1. - smoothstep(.4, 1., distortAmount) * .2;\n    fragColor.rb *= 1. - smoothstep(.4, 1., distortAmount) * .2;\n   \tfragColor.rg *= .95;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"float rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 noisedUV = fragCoord / iResolution.xy;\n    \n    // motion blur distortion\n    float distortAmount = distance(vec2(.5), noisedUV);\n    noisedUV -= vec2(.5);\n    noisedUV *= 1. + ((.5 - distortAmount) / .5) * .05;\n    noisedUV += vec2(.5);\n    \n    fragColor = mix(texture(iChannel0, uv), texture(iChannel1, noisedUV), .7);\n}","name":"Buf D","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define M_SIZE 3\n\n// https://www.shadertoy.com/view/XdfGDH\nfloat normpdf(in float x, in float sigma) {\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\n// https://www.shadertoy.com/view/XdfGDH\nvec4 blur(vec2 fragCoord) {\n\tconst int kSize =  (M_SIZE - 1) / 2;\n    float kernel[M_SIZE];\n    \n    vec4 finalColour = vec4(0.);\n    \n    float sigma = 7.;\n    float Z = 0.;\n    \n    for (int j = 0; j <= kSize; j++) {\n    \tkernel[kSize + j] = kernel[kSize - j] = normpdf(float(j), sigma);\n    }\n    \n    for (int j = 0; j < M_SIZE; j++) {\n    \tZ += kernel[j];\n    }\n    \n    for (int i = -kSize; i <= kSize; i++) {\n        for (int j = -kSize; j <= kSize; j++) {\n            vec4 tex = texture(iChannel0, (fragCoord + vec2(float(i), float(j)))\n                        / iResolution.xy);\n            tex.a = (tex.r + tex.g + tex.b) / 3.;\n        \tfinalColour += kernel[kSize + j] * kernel[kSize + i] * tex;\n        }\n    }\n    \n    return finalColour / (Z * Z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = blur(fragCoord);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592653589793238462643383279502884197169399375105820974944592307816406286\n\nfloat rand(float n){\n    return fract(sin(n) * 43758.5453123);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    return vec2(rand(time * 1000.) + sin(time * 90000.) / PI) / 32.;\n}","name":"Sound","description":"","type":"sound"}]}