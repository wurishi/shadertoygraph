{"ver":"0.1","info":{"id":"cdj3RW","date":"1667315711","viewed":371,"name":"simply liquid","username":"Trixelized","description":"buffer b is just to create a matcap\nits pretty ass sorry","likes":21,"published":1,"flags":32,"usePreview":0,"tags":["liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RADIAL_SAMPLES 5\n#define SAMPLERAD 5.5\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy);\n    vec3 off = vec3(1.0 / iResolution.xy, 0.0);\n    \n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    vec3 neo_normal = vec3(0.0);\n    \n    for (int j = 0; j < RADIAL_SAMPLES; j++) {\n        \n        float rads = (3.14159*2.0) * (float(j) / float(RADIAL_SAMPLES));\n        vec4 samp = texture(iChannel0, uv + (SAMPLERAD * off.xy * vec2(sin(rads), cos(rads))));\n        \n        neo_normal += vec3((samp.r + length(samp.gb - 0.5) - length(col.gb - 0.5)) * vec2(sin(rads), cos(rads)), 0.25);\n        \n    }\n    \n    neo_normal = normalize(neo_normal);\n    \n    vec3 matcap = texture(iChannel1, 0.5 - 0.5 * neo_normal.xy).rgb;\n    \n    fragColor = vec4(matcap * mix(0.75, 1.5, col.r), 1.0);\n    \n    // display only matcap\n    // fragColor = vec4(texture(iChannel1, uv).rgb, 1.0) * step(length(uv - 0.5), 0.5);\n    \n    // display only speed\n    // fragColor = vec4(texture(iChannel0, uv).rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define LOD 1.5\n\n#define SPEEDMULT 3.5\n\n#define RADIAL_SAMPLES 5\n#define SAMPLERAD 5.5\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy);\n    vec3 off = vec3(1.0 / iResolution.xy, 0.0);\n    \n    \n    vec4 source = texture(iChannel0, uv, LOD);\n    \n    float xsp = source.g - 0.5;\n    float ysp = source.b - 0.5;\n    \n    float xsp_normal = 0.0;\n    float ysp_normal = 0.0;\n    vec3 normal = vec3(0.0);\n    \n    \n    for (int j = 0; j < RADIAL_SAMPLES; j++) {\n        \n        float rads = (3.14159*2.0) * (float(j) / float(RADIAL_SAMPLES));\n        vec4 samp = texture(iChannel0, uv + (SAMPLERAD * off.xy * vec2(sin(rads), cos(rads))), LOD);\n        \n        xsp_normal += ((samp.g - 0.5) - xsp);\n        ysp_normal += ((samp.b - 0.5) - ysp);\n        \n        normal += vec3((length(samp.gb - 0.5) - length(source.gb - 0.5)) * vec2(sin(rads), cos(rads)), 0.1);\n        \n    }\n    \n    normal = normalize(normal);\n    xsp += normal.x * -0.25 * source.r;\n    ysp += normal.y * -0.25 * source.r;\n    \n    xsp += xsp_normal / float(RADIAL_SAMPLES);\n    ysp += ysp_normal / float(RADIAL_SAMPLES);\n    \n    vec2 turb = 0.5 - texture(iChannel1, uv * 0.2 + vec2(sin(iTime/80.), cos(iTime/80.))).xy;\n    xsp += 0.01 * turb.x;\n    ysp += 0.01 * turb.y;\n    \n    vec4 final_samp = texture(iChannel0, uv - off.xy * vec2(xsp, ysp) * SPEEDMULT);\n    final_samp.r = final_samp.r * 0.995;\n    \n    xsp = mix(xsp, final_samp.g - 0.5, 0.75);\n    ysp = mix(ysp, final_samp.b - 0.5, 0.75);\n    \n    fragColor = vec4(clamp(vec3(final_samp.r, xsp + 0.5, ysp + 0.5), 0.0, 1.0), 1.0);\n    \n    \n    // EMITTER\n        vec2 p = 0.5 + vec2(sin(iTime * 2.8) * 0.1, 0.1 * cos(iTime * 6.66));\n        if (iMouse.z > 0.0) p = iMouse.xy / iResolution.xy;\n        float len1 = smoothstep(0.05, 0.0, length(uv - p));\n        fragColor.gb += mix(vec2(0.0), normalize(p - 0.5), len1);\n        fragColor.r += 0.5 * len1;\n        fragColor = clamp(fragColor, 0.0, 1.0);\n    \n    // INIT\n        if (iFrame < 2) fragColor = vec4(0.0, 0.5, 0.5, 1.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy);\n    \n    vec3 o = vec3(-0.5, 0.3, 0.5);\n    \n    vec3 col = vec3(smoothstep(0.4, 0.5, length(uv - vec2(0.5, 0.45))));\n    \n    col += 0.55 + 0.45 * sin(length(uv * 13.6) + o);\n    \n    col *= smoothstep(0.0, 0.025, length(uv + vec2(-0.5, -0.5)));\n    \n    fragColor = vec4(col * 1.0, 1.0);\n}\n\n","name":"Buffer B","description":"","type":"buffer"}]}