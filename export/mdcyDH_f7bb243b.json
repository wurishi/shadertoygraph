{"ver":"0.1","info":{"id":"mdcyDH","date":"1694996518","viewed":34,"name":"Mandelbrot_V1","username":"JohnFLeo","description":"Generates a zoomable fractalshader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//x is the real part and y is the imaginary part\n\n//function from https://www.shadertoy.com/view/tlByWG\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec2 add(vec2 c1,vec2 c2){\n    return vec2(\n    c1.x+c2.x,\n    c1.y+c2.y\n    );\n}\nvec2 mul(vec2 c1,vec2 c2){\n    return vec2(\n    c1.x*c2.x - c1.y*c2.y,\n    c1.x*c2.y + c1.y*c2.x\n    );\n}\n\nint calcMandelbrot(vec2 complexNumber, int max_iterations){\n    int iterations = 0;\n    vec2 zn = vec2(0.0,0.0);\n    float b = 0.0;\n    while(iterations <= max_iterations && b <= 2.0){\n        zn = mul(zn,zn);\n        zn = add(zn, complexNumber);\n        iterations +=1;\n        b = length(zn);\n    }\n    return iterations;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int max_iter = 300;\n    \n    float min_zoom = 0.00005;\n    float max_zoom = 2.;\n    float period = 10.;\n    float phaseShift = 3.14159265359;\n    float h1 = log(max_zoom);\n    float h0 = (log(min_zoom)-h1)*0.5;\n    \n    float tz =h0 *(cos(phaseShift+((2.0 * 3.14159265359* iTime)/period))+1.0)+h1;\n    \n    float zoom = pow( 2.71828, tz );\n    \n    vec2 start_point0 = vec2(0., 0.);\n    vec2 start_point1 = vec2(-0.46012222, 0.5702860);\n    vec2 originOffset = vec2(iResolution.x/2., iResolution.y/2.); \n    vec2 c = ( fragCoord + originOffset - iResolution.xy ) / iResolution.y;\n    c = zoom * c + start_point1;\n    \n    //calc amount of iterations needed to succed the threshold\n    int iter = calcMandelbrot(c, max_iter);\n    \n    float hue = float(iter)/float(max_iter);\n    float saturation = 1.0;\n    float brightness = iter<max_iter?1.0:0.0;\n    vec3 col = hsv2rgb(vec3(hue,saturation,brightness));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}