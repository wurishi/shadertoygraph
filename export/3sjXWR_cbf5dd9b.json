{"ver":"0.1","info":{"id":"3sjXWR","date":"1553437914","viewed":180,"name":"3d bilibili","username":"mxr233","description":"a sign of bilibili","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["tv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define max_dist 100.\n#define surface_d .01\n#define ambient 0.1\n#define pi 3.1415926\nvec2 mmin(vec2 a,vec2 b)\n{\n\treturn (a.x<b.x)?a:b;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\nfloat sdfRoundedBox(vec3 p,vec3 size,float r)\n{\n    return length(max(abs(p)-size,0.0))-r;\n}\nfloat linstep(float a,float b,float x)\n{\n    return clamp((x-a)/(b-a),0.,1.);\n}\nfloat sdfBox(vec3 p,vec3 size) //3d\n{\n    return length(max(abs(p)-size,0.0));\n}\nfloat sdfbox(vec2 p,vec2 size) //2d\n{\n    return length(max(abs(p)-size,0.0));\n}\nfloat sdfboxframe(vec2 p,vec2 size) //2d\n{\n    float t=length(max(abs(p)-size,0.0))-.2;\n    return 1.0-smoothstep(.01,.02,abs(t));\n}\nfloat sdfEllipse(vec2 center, float a, float b, vec2 coord) { \n    float a2 = a * a; \n    float b2 = b * b; \n    return (b2 * (coord.x - center.x) * (coord.x - center.x) + a2 * (coord.y - center.y) * (coord.y - center.y) - a2 * b2)/(a2 * b2); \n}\nfloat sdfSphere(vec3 p,float r)\n{\n    return length(p)-r;\n}\nfloat aTod(float t)\n{\n    return t*pi/180.;\n}\nmat2 rot(float angle)\n{\n    return mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n}\nvec2 Dis(vec3 p)\n{\n    vec3 box=vec3(0,1,6);\n   \tfloat Boxd=sdfRoundedBox(p-box,vec3(1.2,.7,.5),.5);\n    p.x = abs(p.x);\n    float skyline1=sdCapsule(p-vec3(.0,1.,3),vec3(1.,2.,2.7),vec3(0,-.1,3),.21);\n\n    //foot\n    //float foot1=sdfSphere(p-vec3(-1.,-.1,5.4),.3);\n    float foot2=sdfSphere(p-vec3(1.,-.1,5.4),.3);\n    vec2 res=mmin(vec2(Boxd,1.0),vec2(skyline1,2.0));\n    res=mmin(res,vec2(skyline1,2.0));\n    res=mmin(res,vec2(foot2,1.0));\n    return res;\n}\nvec3 computeNormal(vec3 p)\n{\n    float offset=.01;\n    float d=Dis(p).x;\n    vec3 n=vec3(\n        Dis(p+vec3(offset,0,0)).x-d,\n        Dis(p+vec3(0,offset,0)).x-d,\n        Dis(p+vec3(0,0,offset)).x-d\n    );\n    return normalize(n);\n}\nvec2 raymarching(vec3 ro,vec3 rd)\n{\n   vec2 res=vec2(.5,0.0);\n   for(int i=0;i<111;i++){\n       vec3 p=ro+rd*res.x;\n       vec2 ds=Dis(p);\n       res.x+=ds.x;\n       res.y=ds.y;\n       if(res.x>max_dist||ds.x<surface_d)break;\n  }\n   return res;\n}\nvec3 computeLight(vec3 hit,vec3 LightDir,vec3 lightcolor,float d)\n{\n    vec3 albedo=vec3(1.);\n    if(d>1.5)\n        albedo=vec3(0.0); \n    vec3 n=computeNormal(hit);\n    vec3 ldir=normalize(LightDir);\n    float ins=max(0.0,dot(n,ldir));\n    //ins=ceil(ins*4.)/4.;\n    vec3 color=lightcolor*ins*albedo;\n    if(hit.z<6.){\n        vec2 temphit=hit.xy;\n        hit.x=abs(hit.x);//mirror\n        vec2 p=hit.xy-vec2(.5,1.3);\n        p*=rot(aTod(-45.));\n        color=mix(color,vec3(0.),\n                  linstep(.02,.01,sdfbox(p,vec2(.07,.3))));\n        color=mix(color,vec3(0.),\n                  sdfboxframe(temphit-vec2(-.01,1.),vec2(.95,.505)));\n        float t=sdfEllipse(vec2(0.2,1.),.3,.58,hit.xy);\n        float t1=sdfEllipse(vec2(0.2,1.),.2,.48,hit.xy);\n        float t2=sdfbox(temphit-vec2(0.,.1),vec2(.6,.6));\n        t=max(t,-t1);\n        t=max(t,t2);\n        color=mix(color,vec3(0.),\n                  smoothstep(.02,.01,t));\n    }\n    return color;\n}    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/min(iResolution.x,iResolution.y);\n   \n    vec3 ro=vec3(0,3,0);\n    //float mo = 2.0 + 0.5 * iMouse.x / iResolution.x;\n   // vec3 ro = vec3(1.0 * cos( mo ), 3.0, 1.0 * sin( mo ) );\n    vec3 rd=normalize(vec3(uv.x,uv.y,1));\n\tvec2 c=raymarching(ro,rd);\n    if(c.x>max_dist-10.)\n    {\n        fragColor=vec4(155,155,155,255)/255.;\n        return;\n    }\n    //c/=10.;\n    vec3 hit=ro+rd*c.x;\n    vec3 lightcolor= vec3(1.0, 1., 255./255.);\n    vec3 lightDir=vec3(0,1,-1);\n    //vec3 lightDir=vec3(-1.+2.*sin(iTime*2.),1,-1);\n    vec3 col=computeLight(hit,lightDir,lightcolor,c.y);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}