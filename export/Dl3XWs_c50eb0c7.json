{"ver":"0.1","info":{"id":"Dl3XWs","date":"1685845806","viewed":108,"name":"Normal Filtered Anti-Aliasing","username":"ianertson","description":"Use the mouse to move the filter around","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["antialiasing","aa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define T (iTime)\n\n\n#define G(samp, uv) (textureLod(samp, uv, -10.).rgb)\n#define LUM(V) dot(V, vec3(0.299, 0.587, 0.114))\n#define GL(samp, uv) LUM(G(samp, uv))\nvec3 AA(in sampler2D samp, in vec2 uv) {\n    vec2 ts = vec2(textureSize(samp, 0).xy);\n    vec2 tx = (1.0 / ts) * 2.0;\n    vec3 S1 = G(samp, uv);\n    float S1L = LUM(S1);\n    float up = GL(samp, uv + tx * vec2(0, 1));\n    float down = GL(samp, uv + tx * vec2(0, -1));\n    float left = GL(samp, uv + tx * vec2(-1, 0));\n    float right = GL(samp, uv + tx * vec2(1, 0));\n    float ydiff = up - down;\n    float xdiff = left - right;\n    float F = fwidth(S1L);\n    vec3 yv = vec3( F, 1, ydiff );\n    vec3 xv = vec3( 1, F, xdiff );\n    vec3 n = normalize(cross(xv, yv));\n    vec2 e = n.xy * tx * (1.0 + F);\n    vec3 S2 = G(samp, uv + e * vec2(1, 0));\n    vec3 S3 = G(samp, uv + e * vec2(0, 1));\n    vec3 S4 = G(samp, uv + e * vec2(1, 1));\n    vec3 S5 = G(samp, uv + e * vec2(-1, -1));  \n    return (S1 + S2 + S3 + S4 + S5) / 5.0;\n}\n\nvec3 img(in sampler2D samp, in vec2 fc, in vec2 uv) {\n    vec3 col = vec3(0.0);\n    float sep = iMouse.z > 0.0001 ? iMouse.x : R.x * (0.5 + (0.5*cos(T*0.5)));\n    col = fc.x < sep ? G(samp, uv) : AA(samp, uv);\n    float tt = 4.0;\n    float ss = smoothstep(tt, 0.0, abs(fc.x-sep));\n    return mix(col, vec3(1, 0, 0), ss);\n}\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc.xy/R.xy;\n    vec3 c1 = img(iChannel0, fc, uv);\n    vec3 c2 = img(iChannel1, fc, uv);\n    vec3 c3 = col = img(iChannel2, fc, uv);\n    float tt = 0.15;\n    float cycle = mod(T*0.15, 3.0 + tt);\n    float frame = 1.0;\n    \n    #define LERP(FROM, TO)\\\n        FROM = mix(FROM, TO, smoothstep(frame - tt, frame + tt, cycle));\\\n        frame += 1.0;\n    \n    col = LERP(col, c1);\n    col = LERP(col, c2);\n    col = LERP(col, c3);\n    O = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}