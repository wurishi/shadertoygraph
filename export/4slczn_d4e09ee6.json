{"ver":"0.1","info":{"id":"4slczn","date":"1486748699","viewed":136,"name":"Fractals for Fun","username":"4onen","description":"A basic fractal generator using a buffer to store previous iterations. Advances one iteration per frame. Minimum quality render (240 iterations) achieved in 4 seconds, assuming 60 FPS. Support for offsetting the view with recompile and re-render.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","buffers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//      /\\\n//     /||\\\n//    /||||\\\n//     ||||\n//     ||||\n// The code you're\n// looking for is\n//    up here.\n//     ||||\n//     ||||\n//     ||||\n//================\n//This shader just renders Buffer A to the screen in pretty colors.\n//  Go see Buf A (above) for the real fractal code!\n//(And, y'know, the variables you can change to find different fractals.)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Simple normalized fragment coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //The color we'll return later\n    vec3 ret = abs(texture(iChannel0,uv).xyz);\n    //Take the absolute value because some of the colors\n    //that take longer to render will only show up because\n    //their escaped points reach near infinity.\n    \n    //Divide it by 240 to make a 4 second render (at 60FPS.)\n    //Also eliminates flashes from updating data, as changing\n    //data states are usually << 1.0, making the resulting color\n    //flashes << 1.0/240.0, or imperceptible to the human eye.\n    //I could also use float(iFrame) or iTime here,\n    //but that would make re-rendering on aspect-ratio change\n    //look really, really bad.\n    ret /= 240.0;\n    \n    //Invert the iterations-to-render coloration.\n    //Makes pixels in the set black, and pixels outside \n    //more blue the less iterations they took to escape.\n    ret.z = 1.0-ret.z;\n    \n    //Pass the resulting color to the color buffer.\n\tfragColor = vec4(vec3(ret),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//The scale of the coordinate system.\n//The top of the screen is at +SCALE before the offset,\n//the bottom of the screen is at -SCALE before the offset.\n#define SCALE 1.0\n\n//Due to floating point number precision errors, using\n//these offsets will slightly reduce render quality.\n//Uncomment these \"#define\"s to activate.\n//A value to shift the render left or right.\n//#define OFFSET_X 0.0\n//A value to shift the render up or down.\n//#define OFFSET_Y 0.0\n\n//Comment this out to just draw a mandelbrot set\n#define JULIA_C vec2(0.3524,0.1-iTime * 0.001)\n//Fun values: \n//Default speedyspiral -- vec2(0.3524,0.1-iTime * 0.001)\n//Long render time -- vec2(0.3524,-0.1)\n//Creeping arms -- vec2(0.28,0.011)\n//Crystal Links Cactus -- vec2(-0.12,-0.77)\n//Fireworks -- vec2(0.0,0.65)\n//The Creep -- vec2(-0.018,0.75)\n\n/* == Old functions ==\n//Multiplies two complex numbers represented as Vec2s.\n//Just the FOIL method from algebra\nvec2 complexMult(vec2 n1, vec2 n2){\n    return vec2(n1.x*n2.x-n1.y*n2.y\n                ,n1.x*n2.y+n1.y*n2.x);\n}\n\n//Multiplies a complex number by itself.\n//Minutely faster than multiplying with the same number as both arguments.\nvec2 complexSquare(vec2 n){\n    return vec2(n.x*n.x-n.y*n.y\n                ,n.x*n.y*2.0);\n}*/\n\n//Multiplies two complex numbers represented as Vec2s.\n//Just the FOIL method from algebra\n//Update suggested by FabriceNeyret2\nvec2 complexMult(vec2 n1, vec2 n2){\n    return mat2(n1, -n1.y, n1.x) * n2;\n}\n\n//Multiplies a complex number by itself.\n//Minutely faster than multiplying with the same number as both arguments.\n//Update suggested by FabriceNeyret2\nvec2 complexSquare(vec2 n){\n    return mat2(n, -n.y, n.x) * n;\n}\n    \n\n//Func for drawing the given fractal\nvec3 func(vec2 Z_0, vec3 Z){\n    //If we've \"escaped to infinity\" just return\n    //the number of steps it took us, without changing anything.\n    if(length(Z.xy)>2.0) return vec3(Z.z);\n    \n    vec2 c = vec2(0.0);\n    //If we're drawing a Julia set...\n\t#ifdef JULIA_C\n    \tc = JULIA_C;\n    #else\n    \tc = Z_0;\n    #endif\n    //Return Z^2+c \n    return vec3\n        ( complexSquare(Z.xy)+c\n        , Z.z+1.0 //along with the current iteration count plus 1.0\n        );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Simple normalized pixel coordinate\n    vec2 baseUV = fragCoord.xy / iResolution.xy;\n    //Pixel coordinate in -1.0 to 1.0 grid\n    vec2 uv = -1.0 + 2.0*baseUV;\n    //Pixel coordinate in -SCALE to SCALE grid\n    uv *= SCALE;\n    //Pixel coordinate in aspect-ratio corrected offset scaled grid.\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //Pixel coordinate in the -SCALE to SCALE grid, \n    //now offset by (OFFSET_X, OFFSET_Y)\n    #ifdef OFFSET_X\n    \tuv.x += OFFSET_X;\n    #endif\n\t#ifdef OFFSET_Y\n        uv.y += OFFSET_Y;\n    #endif\n    \n    //Return color will be...\n    vec3 ret = vec3(0.0);\n    //The previous color of this pixel was...\n    vec4 last = texture(iChannel0,baseUV);\n    \n    //If the aspect ratio has changed since the last draw operation\n    if(iResolution.x/iResolution.y != last.w)\n        ret = vec3(uv,0.0);//Reset to first iteration.\n    else //Otherwise...\n        ret = func(uv,last.xyz); //Calculate this iteration\n    \n    //Store data, iteration count, and current aspect ratio.\n    fragColor = vec4(ret,iResolution.x/iResolution.y);\n}","name":"Buf A","description":"","type":"buffer"}]}