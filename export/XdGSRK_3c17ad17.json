{"ver":"0.1","info":{"id":"XdGSRK","date":"1465240471","viewed":183,"name":"Pipelined Kaleidoscope","username":"akohdr","description":"Feeding colour fields into pipelined kaleidoscope produces interesting effect.  \nMouse moves underlying generated texture for different colouring.\n","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define kmix(f,c,w) k.rgb f texture(c, uv).rgb*(w)\n#define kweight(a) .6-.4*sin(iDate.w/a)\n\nvoid mainImage(out vec4 k,vec2 p) \n{\n    vec2 uv = p/iResolution.xy;\n\n//    k = texture(iChannel0, uv); return; //shows unaltered colour field texture instead\n    \n    // blend various stages of pipeline\n    k = vec4(1);\n\n    // commenting various combinations, changing weighting and +,-,*,/ ops gets interesting\n    kmix(*=, iChannel3, kweight(7.));\n    kmix(/=, iChannel2, kweight(5.));\n    kmix(-=, iChannel1, kweight(3.));\n    \n    k.rgb = clamp(k.rgb,0.,1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Select underlying colour field to use\n//#define PERIODIC_SUPERPOSITION\n#define FLUID_FIELDS\n//#define COLOUR_SEPERATION\n//#define SINE_PUKE\n\n#ifdef PERIODIC_SUPERPOSITION\n// Variations of periodic superposition\n#define F(a) vec3(sin(a))\n\nvoid mainImage( out vec4 k, in vec2 p )\n{\n    p -= 5.*iMouse.xy;\n\tp.x += iDate.w*9.;\n    \n    vec3 \n    \tc  = F(p.xxx/2.);\n        c += F(p.xxy/3.);\n    \tc += F(p.xyx/5.);\n    \tc += F(p.xyy/7.);\n    \tc += F(p.yxx/11.);\n    \tc += F(p.yxy/13.);\n    \tc += F(p.yyx/17.);\n    \tc += F(p.yyy/19.);\n    \n    k = vec4(c,1);\n}\n#endif\n\n\n\n\n#ifdef FLUID_FIELDS\n// Variation of FluidFields\n#define f length(fract(q*=m*=.8+.05*d++)-.5)\n#define C min(min(f,f),f)\n\nvoid mainImage(out vec4 k, vec2 p)\n{\n    p = mod(p-iMouse.xy,iResolution.xy);\t\t// discontinutity hidden/enhanced by Kaleidoscope\n        \n    float d = -3.,\t\t\t\t\t\t\t\t// matrix factor delta\n          t = sin(iTime/9.);\t\t\t\t// appropriate speed\n    vec3 q = vec3(p/iResolution.yy,t);\n    \n    mat3 m = mat3(-2, -1,  2, \n                   3, -2,  1, \n                   1,  2,  2);\n    k = vec4(\n        \tvec3(C,C,C)\t\t\t\t\t\t\t// three fields mapped to RGB\n         \t/ (.5-.4*sin(abs(.4+.1*t)))         // temporal sizing reveals blobs in each field\n    \t,1);\n}\n#endif\n\n\n\n\n\n#ifdef COLOUR_SEPERATION\n#define f length(length(k*=k)-p)\n\nvoid mainImage(out vec4 k,vec2 p)\n{\n    p = mod(p-iMouse.xy,iResolution.xy);\t\t// discontinutity hidden/enhanced by Kaleidoscope\n//    p = p.yx;\t\t\t\t\t\t// rotate 90 degrees (fullscreen)\n    p = (p.x>4e2 ? p.yy : p)/150.;\t// ortho project fade stripe / size\n    vec4 t = sin(iDate/4.); \t\t// temporal component\n    k = t.wwww;\n    k += vec4(f,f,f,0);\n\n//    k -= k.r;\t\t\t\t\t\t// fade variations\n//    k -= k.g;\n//    k -= k.b;\n//    k -= k.a;\n\n\tk = t.w<0. ? 1.-k : k;\t\t\t// negative toggle (CMY on wht / RGB on black)\n}\n#endif\n    \n\n\n#ifdef SINE_PUKE\n// shortened/tweaked version of https://www.shadertoy.com/view/ltX3Wn\nconst float sc = 3.3,\n        \taa = 4.5,\n\t\t\tma = 2.,\n\t\t\t d =.02,\n    \t\tsp = .3,\n\t\t\tdt = 75e-4,\n\t\t\tst = 32.,\n\t\t\t c = .5,\n\t\t\t b = .575;\n\n#define T (iDate.w/9.)\n#define LOOP(i) p += vec2(ma/(qu-=aa))*sin((ad-=sc)*(p.yx+vec2(-1,1)*(T*sp*i)))+st;    \n\nvoid mainImage( out vec4 k, in vec2 p )\n{\n    p = mod(p-iMouse.xy,iResolution.xy);\t\t// discontinutity hidden/enhanced by Kaleidoscope\n    \n    float ad=sc, qu=aa;\n    p = p*dt + T*d;\n    LOOP(2.)\n    LOOP(3.)\n    LOOP(5.)\n    LOOP(7.)\n//    LOOP(11.)\n//    LOOP(13.)\n//    LOOP(17.)\n//    LOOP(19.)\n    \n    k = vec4(b-vec3(sin(p.yx*ma),cos(p.y+p.x))*c,1);\n}\n#endif \n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Kaleidoscope pipeline stage\n\nvoid mainImage(out vec4 k,vec2 p) {\n    k = texture(iChannel0, \n                  length(p = p/iResolution.xy - .5)* \n                  \t(abs(fract(atan(p.x,p.y)) - .5) + vec2(0,1)));\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Kaleidoscope pipeline stage\n\nvoid mainImage(out vec4 k,vec2 p) {\n    k = texture(iChannel0, \n                  length(p = p/iResolution.xy - .5)* \n                  \t(abs(fract(atan(p.x,p.y)) - .5) + vec2(0,1)));\n}\n","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Kaleidoscope pipeline stage\n\nvoid mainImage(out vec4 k,vec2 p) {\n    k = texture(iChannel0, \n                  length(p = p/iResolution.xy - .5)* \n                  \t(abs(fract(atan(p.x,p.y)) - .5) + vec2(0,1)));\n}\n","name":"Buf D","description":"","type":"buffer"}]}