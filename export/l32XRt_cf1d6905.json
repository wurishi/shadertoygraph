{"ver":"0.1","info":{"id":"l32XRt","date":"1710964565","viewed":91,"name":"Rotating thing","username":"DiggerDwarf","description":"Uuhh basically i put a sphere and 3 ellipsoids and did a smooth union\nAnd i color it with the ditance to the object and the nb of steps used in my raymarching algorithm\n\nuhm i recently check the normals and it really highlights the artifacts of the SDFs","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","tag","othertag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cred. Inigo Quilez for the SDFs\n\nfloat sdSphere(vec3 o, float r, vec3 p) { return length(p-o)-r; }\n\nfloat opSUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);}\n\nfloat sdEllipsoid(vec3 o, vec3 r, vec3 p) {\n    float k0 = length((p-o)/r);\n    float k1 = length((p-o) / (r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat sdBox(vec3 o, vec3 r, vec3 p) {\n    vec3 q = abs(p-o)-r;\n    return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat map(vec3 p) {\n    float d_s1 = sdSphere(vec3(0., 0., 0.), 1.0, p);\n\n    float a = sdEllipsoid(vec3(0.0), vec3(1., 0.2, 1.5), p);\n    float b = sdEllipsoid(vec3(0.0), vec3(0.2, 1.5, 1.), p);\n    float c = sdEllipsoid(vec3(0.0), vec3(1.5, 1., 0.2), p);\n\n    return opSUnion(opSUnion(opSUnion(a, d_s1, 0.2), b, 0.2), c, 0.2);\n}\n\n#define normal_offset 0.00001\n\nvec3 get_normal(vec3 pos) {\n    vec3 xDir = vec3(normal_offset, 0.0, 0.0);\n    vec3 yDir = vec3(0.0, normal_offset, 0.0);\n    vec3 zDir = vec3(0.0, 0.0, normal_offset);\n    \n    return normalize(vec3(map(pos+xDir)-map(pos-xDir),\n\t\t                map(pos+yDir)-map(pos-yDir),\n\t\t                map(pos+zDir)-map(pos-zDir)));\n}\n\nvec3 rotated_y(vec3 v, float a) {\n    return vec3((v.x*cos(a))+(v.z*sin(a)),\n                v.y,\n                (v.z*cos(a))-(v.x*sin(a)));\n}\nvec3 rotated_x(vec3 v, float a) {\n    return vec3(\n        v.x,\n        (v.y*cos(a)) - (v.z*sin(a)),\n        (v.y*sin(a)) + (v.z*cos(a))\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // constants\n    float pi = 3.141592653;\n    \n    // normalizing and fractionating screen\n    vec2 rep = vec2(1., 1.);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = fract(uv*rep.xy);\n    uv = uv * 2. - 1.;\n    uv.x *= (iResolution.x*rep.y) / (iResolution.y*rep.x);\n\n    vec3 ro = vec3(0, 0, -2.8);\n    vec3 rd = normalize(vec3(uv, 1));\n\n    ro = rotated_x(rotated_y(ro, -iTime/2.), iTime/2.);\n    rd = rotated_x(rotated_y(rd, -iTime/2.), iTime/2.);\n\n    float t = 0.;\n    float i;\n    for (i = 0. ; i < 80. ; i++) {\n        float a = map(ro);\n        ro += rd*a;\n        t += length(rd*a);\n        if (a < .0001 || t > 100.) break;\n    }\n\n\n    fragColor = vec4(t/4., i/40., (t/4.) + (i/40.), 1.);\n    fragColor = vec4(abs(get_normal(ro)), 1.0);\n}","name":"Image","description":"","type":"image"}]}