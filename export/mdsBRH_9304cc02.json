{"ver":"0.1","info":{"id":"mdsBRH","date":"1688473977","viewed":60,"name":"De blobs","username":"Ronush","description":"blublub","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n\n\nconst vec4 sphere0pos = vec4(-2.0, 1.0, 0.0, 1.0);\nconst vec4 sphere1pos = vec4(2.0, 1.0, 0.0, 1.0);\n\nfloat smin(float a, float b)\n{\n    float k = 2.0;\n    float res = exp2(-k * a) + exp2(-k * b);\n    return -log2(res) / k;\n}\n\nfloat sdSphere(vec3 p, vec3 c, float r, out vec3 color)\n{\n    float sphere = (length(p - c) - r);\n    float displacement = sin(5.0 * (p.x + mod(iTime, 3.14159 * 2.0))) * sin(5.0 * (p.y + mod(iTime, 3.14159 * 2.0))) * sin(5.0 * p.z) * 0.25;\n\n    if (c == vec3(1.0, 0.0, 0.0))\n    {\n        color = vec3(1.0, 0.0, 0.0);  // Red\n    }\n    else if (c == vec3(0.0, 0.0, 1.0))\n    {\n        color = vec3(0.0, 0.0, 1.0);  // Blue\n    }\n\n    return sphere + displacement;\n}\n\n\nvec4 getDist(vec3 p)\n{\n    vec4 sphere0 = vec4(-2.0, 1.0, 0.0, 1.0);\n    vec4 sphere1 = vec4(2.0, 1.0, 0.0, 1.0);\n    vec3 color;\n\n    float sphere0SD = sdSphere(p, vec3(sphere0.xyz), sphere0.w, color);\n    float sphere1SD = sdSphere(p, vec3(sphere1.xyz), sphere1.w, color);\n    float plane0SD = abs(p.y + 0.2);\n\n    if (sphere0SD < sphere1SD)\n    {\n        color = vec3(1.0, 0.0, 0.0);  // Red\n    }\n    else\n    {\n        color = vec3(0.0, 0.0, 1.0);  // Blue\n    }\n\n    float minDist = smin(smin(sphere0SD, sphere1SD), plane0SD);\n\n    return vec4(minDist, color);\n}\n\nvec3 getNormal(vec3 p)\n{\n    float d0 = getDist(p).x;\n    vec2 e = vec2(0.00, 0.0001);\n    vec3 d1 = vec3(\n        getDist(p - e.yxx).x,\n        getDist(p - e.xyx).x,\n        getDist(p - e.xxy).x);\n    vec3 n = normalize(d0 - d1);\n\n    return n;\n}\nfloat GetLight(vec3 p)\n{\n    vec3 lightpos = vec3(3.0, 3.0, 0.0);\n    vec3 n = getNormal(p);\n    vec3 d = normalize(lightpos - p);\n    float strength = dot(n, d) + 0.5;\n\n    return strength;\n}\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.0;\n    float dS = 0.0;\n\n    for (int i = 0; i < 100; i++)\n    {\n        vec3 p = ro + rd * dO;\n        vec4 dist = getDist(p);\n        dS = dist.x;\n        vec3 color = dist.yzw;\n\n        dO += dS;\n        if (dS < 0.1) break;\n    }\n    return dO;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n    float theta = mod(iTime, 3.14159 * 2.0);\n    float magnitude = 7.0;\n    vec3 ro = vec3(cos(theta) * magnitude, 1.0, sin(theta) * magnitude);\n    vec3 direction = normalize(-ro);\n    vec3 rd = vec3(uv, 1.0);\n\n    rd *= rotateY(-theta - 3.14159 / 2.0);\n\n    vec3 col = vec3(0.0);\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 n = getNormal(p);\n    d /= 6.0;\n\n    vec3 color1 = vec3(1.0, 0.0, 0.0);  // Red\n    vec3 color2 = vec3(0.0, 0.0, 1.0);  // Blue\n\n    float distanceToCircle1 = length(p - vec3(sphere0pos.xyz));\n    float distanceToCircle2 = length(p - vec3(sphere1pos.xyz));\n\n    if (distanceToCircle1 < distanceToCircle2) {\n        col = color1;\n    } else {\n        col = color2;\n    }\n\n    col = mix(color1, color2, distanceToCircle1 / (distanceToCircle1 + distanceToCircle2));\n    col *= vec3(GetLight(p));\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}