{"ver":"0.1","info":{"id":"MllcWX","date":"1506736973","viewed":140,"name":"Static Touch","username":"bradleygriffith","description":"static, mouse, noise, voronoi","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","mouse","static"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat random( vec2 p) {\n    return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453);\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\n\n    float pointRadius = 1.0;\n    float pointCellWidth = 2.0;\n    float pointRadiusOfCell = pointRadius / pointCellWidth;\n    \n    vec2 totalCellCount = iResolution.xy / pointCellWidth;\n    vec2 cellUv = uv * totalCellCount;\n\n    // Tile the space\n    vec2 i_uv = floor(cellUv);\n    vec2 f_uv = fract(cellUv);\n\n    float m_dist = 1.;  // minimun distance\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    float bleedAmount = 0.0;\n    float bleedCellWidth = pointCellWidth;\n\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x), float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = random2(i_uv + neighbor);\n\n           \n            \n            vec2 cellRowCol = floor(fragCoord / bleedCellWidth) + neighbor;\n            vec2 cellBleedFragCoord = ((cellRowCol * bleedCellWidth) + (bleedCellWidth / 2.0));\n            vec2 cellBleedUv = cellBleedFragCoord / iResolution.xy;\n\n            \n            float distanceFromCenter = distance((iMouse.xy / iResolution.xy), cellBleedUv);\n\n            float cellBleedWeight = step( distanceFromCenter, random(cellRowCol));\n\t\t\t\n\n            \n            // Animate the point\n            point = 0.5 + 0.75 * sin(iTime + 6.2831 * point);\n\n            // Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_uv;\n\n            // Distance to the point\n            float dist = length(diff);\n            dist += cellBleedWeight; // Effectively remove point\n\n            // Keep the closer distance\n            m_dist = min(m_dist, dist);\n        }\n    }\n\n    float pointEasing = pointRadiusOfCell - (1.0 / pointCellWidth);\n\n    float isParticle = 1.0 - smoothstep(pointEasing, pointRadiusOfCell, m_dist);\n \n    fragColor = vec4(vec3(isParticle), 1.0);\n}","name":"Image","description":"","type":"image"}]}