{"ver":"0.1","info":{"id":"MX2GWm","date":"1708542908","viewed":60,"name":"IZG: Barycentric Coordinates","username":"dormon","description":"This simple shader visualizes barycentric coordinates.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangle","rasterization","barycentrics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getLine(vec2 A,vec2 B){\n  vec2 s = B-A;\n  vec2 n = vec2(-s.y,s.x);\n  return vec3(n,-dot(n,A));\n}\n\nfloat triangleArea(vec2 A,vec2 B,vec2 C){\n  float a = length(B-A);\n  float b = length(C-B);\n  float c = length(A-C);\n  float s = (a+b+c)/2.f;\n  \n  return sqrt(s*(s-a)*(s-b)*(s-c));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 polygon[] = vec2[](\n      vec2(50,50),\n      vec2(350,100),\n      vec2(250,350)\n    );\n    \n    int N = polygon.length();\n\n    bool inside = true;\n    for(int i=0;i<N;++i){\n        vec3 line = getLine(polygon[i],polygon[(i+1)%N]);\n        float lv = dot(vec3(fragCoord.xy,1),line);\n        inside = inside && lv > 0.f;\n    }\n\n    float l0 = triangleArea(fragCoord.xy,polygon[1],polygon[2]);\n    float l1 = triangleArea(fragCoord.xy,polygon[0],polygon[2]);\n    float l2 = triangleArea(fragCoord.xy,polygon[0],polygon[1]);\n    float wt = triangleArea(polygon[0],polygon[1],polygon[2]);\n    \n    l0 /= wt;\n    l1 /= wt;\n    l2 /= wt;\n    \n    if(inside)\n        fragColor = vec4(vec3(1,0,0)*l0+vec3(0,1,0)*l1+vec3(0,0,1)*l2,1);\n    else\n        fragColor = vec4(0.0);\n}","name":"Image","description":"","type":"image"}]}