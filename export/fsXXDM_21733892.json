{"ver":"0.1","info":{"id":"fsXXDM","date":"1618689754","viewed":42,"name":"318_korolev_v5v6","username":"thiranger","description":"cg task 2","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["tracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// constants\n#define EPS 1e-7\n#define INF 1e16\n#define REFRACTIVE_IDX_AIR      1.000000\n#define REFRACTIVE_IDX_GLASS    1.500000\n#define REFRACTIVE_IDX_WATER    1.333333\n\n// enum\n#define EMISSION    0\n#define DIFFUSE     1\n#define REFLECTION  2\n#define REFRACTION  3\n\nstruct TSphere {\n    vec3 position;\n    vec4 color;\n    float radius;\n};\n\nstruct TIcosahedron {\n    vec4 color;\n    vec3 triangles[20];\n    vec3 points[12];\n};\n\nstruct TCylinder {\n    float height;\n    float radius;\n};\n\nfloat check(vec3 p1, vec3 p2, vec3 a, vec3 b) {\n    return step(0., dot(cross(b - a, p1 - a), cross(b - a, p2 - a)));\n}\n\nfloat inTriangle(vec3 pos, vec3 v[3]) {\n    return check(pos, v[0], v[1], v[2])\n         * check(pos, v[1], v[2], v[0])\n         * check(pos, v[2], v[0], v[1]);\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 vertices[3], out vec3 normal) {\n    vec3 directionVec1 = vertices[1] - vertices[0];\n    vec3 directionVec2 = vertices[2] - vertices[0];\n    vec3 c = cross(directionVec1, directionVec2);\n    normal = normalize(c);\n    vec3 shiftVec = pos - vertices[0];\n    float a = dot(dir, c);\n    if (abs(a) < EPS) {\n        return INF;\n    }\n    float t = -dot(shiftVec, c) / a;\n    if (t < 0.) {\n        return INF;\n    }\n    vec3 worldPos = pos + t * dir;\n    if (abs(inTriangle(worldPos, vertices)) < EPS) {\n        return INF;\n    }\n    if (dot(vertices[0] + EPS * normal, vertices[0] + EPS * normal) < dot(vertices[0], vertices[0])) {\n        normal = -normal;\n    }\n    return t;\n}\n\nfloat traceIcosahedron(TIcosahedron icosahedron, vec3 pos, vec3 dir, out vec3 normal) {\n    float t = INF;\n    for (int i = 0; i < 20; ++i) {\n        vec3 triangle[3];\n        for (int j = 0; j < 3; ++j) {\n            triangle[j] = icosahedron.points[int(icosahedron.triangles[i][j])];\n        }\n        vec3 curr_norm;\n        float tmp = traceTriangle(pos, dir, triangle, curr_norm);\n        if (tmp < t) {\n            t = tmp;\n            normal = curr_norm;\n        }\n    }\n    return t;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(TCylinder stand, vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (stand.height - pos.y) / dir.y;\n    if (t <= 0.) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < stand.radius) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - stand.radius;\n    float D = b * b - a * c;\n    if (D < 0.) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= stand.height) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= stand.height) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nvec4 isOccluded(TIcosahedron icosahedron, TCylinder stand, vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec4 col = vec4(1);\n    vec3 cylNorm;\n    float cylT = traceCylinder(stand, pos, dir, cylNorm);\n    if (cylT < dist) {\n        col *= vec4(0);\n    }\n    vec3 icoNorm;\n    float icoT = traceIcosahedron(icosahedron, pos, dir, icoNorm);\n    if (icoT < dist) {\n        col *= icosahedron.color * 2.;\n    }\n    return col;\n}\n\nvec4 computeLight(TIcosahedron icosahedron, TCylinder stand, TSphere light1, TSphere light2, vec3 pos, vec4 color, vec3 normal, vec3 direction) {\n    vec3 toLight1 = light1.position - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    vec4 att1 = isOccluded(icosahedron, stand, pos, light1.position + direction * light1.radius) * 30. / distSq1;\n    vec3 toLight2 = light2.position - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    vec4 att2 = isOccluded(icosahedron, stand, pos, light2.position + direction * light2.radius) * 5. / distSq2;\n    return color * (\n        max(0., dot(normal, normalize(toLight1))) * att1 * light1.color +\n        max(0., dot(normal, normalize(toLight2))) * att2 * light2.color +\n        texture(iChannel0, normal) * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1. - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1. - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat someFunc(float edgeFirst, float edgeSecond) {\n    return (edgeFirst - edgeSecond) / (edgeFirst + edgeSecond)\n         * (edgeFirst - edgeSecond) / (edgeFirst + edgeSecond);\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 32.943))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    TIcosahedron icosahedron = TIcosahedron(\n        vec4(1),\n        vec3[20] (\n            vec3(0, 1, 2), vec3(0, 1, 3), vec3(0, 3, 7), vec3(0, 7, 4),\n            vec3(0, 4, 2), vec3(1, 2, 5), vec3(1, 5, 6), vec3(1, 6, 3),\n            vec3(2, 4, 8), vec3(2, 8, 5), vec3(3, 6, 9), vec3(3, 7, 9),\n            vec3(4, 7, 10), vec3(4, 8, 10), vec3(5, 8, 11), vec3(5, 6, 11),\n            vec3(6, 9, 11), vec3(7, 9, 10), vec3(8, 10, 11), vec3(9, 10, 11)\n        ),\n        vec3[12] (\n            vec3( 0.96976499, -1.,         -0.25779034),\n            vec3(-0.71094595, -1.,         -0.70813548),\n            vec3(-0.25881905, -1.,          0.96592583),\n            vec3( 0.41928685,  0.,         -1.56479984),\n            vec3( 1.14265273,  0.,          1.14474658),\n            vec3(-1.56193958,  0.,          0.42005326),\n            vec3(-1.14265273,  0.62,       -1.14474658),\n            vec3( 1.56193958,  0.62,       -0.42005326),\n            vec3(-0.41928685,  0.62,        1.56479984),\n            vec3( 0.25881905,  1.62,       -0.96592583),\n            vec3( 0.71094595,  1.62,        0.70813548),\n            vec3(-0.96976499,  1.62,        0.25779034)\n        )\n    );\n    TSphere light1 = TSphere( vec3(1.5, 0.7, 1), vec4(1, 0.6, 1, 1), 0.2 );\n    TSphere light2 = TSphere( vec3(-1.5, -0.7, -1), vec4(1), 0.2 );\n    TSphere water = TSphere( vec3(0, 0.35, 0), vec4(vec2(0.8), vec2(1)), 0.8 );\n    TCylinder stand = TCylinder(-1., 1.);\n    vec3 camPosition = vec3(0, 5, -10);\n\n    vec3 random = vec3(rand(float(iFrame)), rand(float(iFrame + 53)), rand(float(iFrame + 97)));\n    vec3 direction = normalize(random - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (random.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-camPosition);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n\n    vec3 curPos = camPosition;\n    vec3 curDir = viewVec;\n    float n1 = REFRACTIVE_IDX_AIR;\n    float glassReflection = someFunc(REFRACTIVE_IDX_AIR, REFRACTIVE_IDX_GLASS);\n    float waterReflection = someFunc(REFRACTIVE_IDX_WATER, REFRACTIVE_IDX_GLASS);\n\n    vec4 Filter = vec4(1);\n\n    for (int i = 0; i < 16; ++i) {\n        float t = INF;\n        int materialType;\n        vec4 color;\n        vec3 normal;\n        float nEnter = REFRACTIVE_IDX_AIR;\n\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel1, worldPos.xz * 0.1);\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - light1.position, curDir, light1.radius, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = light1.color;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - light2.position, curDir, light2.radius, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = light2.color;\n            normal = l2Norm;\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(stand, curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y);\n            normal = cylNorm;\n        }\n\n        vec3 icoNorm;\n        float icoT = traceIcosahedron(icosahedron, curPos, curDir, icoNorm);\n        if (icoT < t) {\n            t = icoT;\n            normal = icoNorm;\n            if (random.x < glassReflection) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                Filter *= icosahedron.color;\n                if (dot(curDir, normal) > 0.) {\n                    nEnter = REFRACTIVE_IDX_AIR;\n                } else {\n                    nEnter = REFRACTIVE_IDX_GLASS;\n                }\n            }\n        }\n        vec3 watNorm;\n        float watT = traceSphere(curPos - water.position, curDir, water.radius, watNorm);\n        if (watT < t) {\n            t = watT;\n            normal = watNorm;\n            if (random.x < waterReflection) {\n                materialType = REFLECTION;\n            } else {\n                Filter *= water.color;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.) {\n                    nEnter = REFRACTIVE_IDX_GLASS;\n                } else {\n                    nEnter = REFRACTIVE_IDX_WATER;\n                }\n            }\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel1, worldPos.xz);\n            bool flag = false;\n            switch (materialType) {\n            case EMISSION:\n                fragColor = color * Filter;\n                flag = true;\n                break;\n            case DIFFUSE:\n                fragColor = computeLight(icosahedron, stand, light1, light2, worldPos, color, normal, direction) * Filter;\n                flag = true;\n                break;\n            case REFLECTION:\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                break;\n            case REFRACTION:\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n            if (flag) {\n                break;\n            }\n        } else {\n            fragColor = texture(iChannel0, curDir) * Filter;\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) + texture(iChannel1, screenUV);\n}","name":"Buffer B","description":"","type":"buffer"}]}