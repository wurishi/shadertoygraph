{"ver":"0.1","info":{"id":"dslGzf","date":"1669859940","viewed":87,"name":"Bacteria - by Willoweyes","username":"Willoweyes","description":"Another type of game of life","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel1, uv/SIZE).rgb;\n    \n    vec2 gv = fract(fragCoord/SIZE) - 0.5;\n    \n    float d = length(gv);\n    \n    col *= smoothstep(.1, .0, d-.4);\n    //vec3 mask = vec3(1.,.75,1.);\n    vec3 mask = vec3(1.*abs(sin(t+2.*Pi/3.)),1.*abs(sin(t+4.*Pi/3.)),1.*abs(sin(t+2.*Pi)));\n    //col.rb = gv;\n    //vec3 maskRed = vec3(white + col.r*0.7,white,white),1.)\n    // Output to screen\n    float white = (col.b + col.g)/0.9;\n    fragColor = vec4(col, 1.);//*vec3(abs(sin(t)),abs(sin(t+2.*Pi/3.)), abs(sin(t+4.*Pi/3.))),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SIZE 1.\n#define BRUSH_SIZE 40.\n#define SPEED 0.7\n#define Pi 3.1415\n#define t iTime","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 Avg(ivec2 p)\n{\n    float totalRed = 0. , totalGreen = 0., totalBlue = 0., temp, coef = 0.2, frange = 2.0;\n    int range = 2;\n    float div = (frange*2.+1.)*(frange*2.+1.) - 1.8;\n    float divRed = 0., divGreen = 0., divBlue = 0.;\n    float reward = 0.1;\n    \n    for (int x=-range; x<=range; x++)\n    {\n        for (int y=-range; y<=range; y++)\n        {\n            if (x==0 && y==0) continue;\n            totalRed += texelFetch(iChannel1, p+ivec2(x,y), 0).r;\n            totalGreen += texelFetch(iChannel1, p+ivec2(x,y), 0).g;\n            totalBlue += texelFetch(iChannel1, p+ivec2(x,y), 0).b;\n        }\n    }\n    if (totalRed >= totalGreen && totalRed > totalBlue)\n    {\n        totalRed = totalRed - totalGreen;\n        totalGreen *= coef;\n        divRed = reward;\n    } \n    else if (totalGreen > totalRed && totalGreen >= totalBlue)\n    {\n        totalGreen = totalGreen - totalBlue;\n        totalBlue *= coef;\n        divGreen = reward;\n        \n    }\n    else if (totalBlue >= totalRed && totalBlue > totalGreen)\n    {\n        totalBlue = totalBlue - totalRed;\n        totalRed *= coef;\n        divBlue = reward;\n    }\n    return vec3(totalRed/(div-divRed), totalGreen/(div-divGreen), totalBlue/(div-divBlue));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0);\n \n    if (iFrame < 5) //initialize\n    {\n        col = vec4(texture(iChannel0, uv).rgb * vec3(1.,1.,1.),1.);\n        //if (length(iMouse.xy/SIZE - fragCoord.xy) < BRUSH_SIZE)\n        //col = vec4(0.,0.,1.,1.);\n        \n        //col = vec4(0);\n    }\n    else if (iFrame % SPEED !=0)\n        col = texture(iChannel1, uv);\n    else //alive!\n    {\n        float red = texelFetch(iChannel1, ivec2(fragCoord), 0).r;\n        float green = texelFetch(iChannel1, ivec2(fragCoord), 0).g;\n        float blue = texelFetch(iChannel1, ivec2(fragCoord), 0).b;\n        \n        float re = 0.8, ofs = 0.3;\n        \n        if (red == green && green == blue)\n            col.rgb = Avg(ivec2(fragCoord));\n        else\n        {\n            if (red < re)\n            {\n                if (blue < ofs)\n                    col.r = Avg(ivec2(fragCoord)).r;\n                else \n                    col.r = 0.;\n            }\n            else \n                col.r = red-0.5;\n\n            if (green < re)\n            {\n                if (red < ofs)\n                    col.g = Avg(ivec2(fragCoord)).g;\n                else \n                    col.g = 0.;\n            }\n            else \n                col.g = green-0.5;\n\n            if (blue < re)\n            {\n                if (green < ofs)\n                    col.b = Avg(ivec2(fragCoord)).b;\n                else\n                    col.b = 0.;\n            }\n            else \n                col.b = blue-0.5;\n        }\n    }\n    if (iMouse.z > 0.5 && length(iMouse.xy/SIZE - fragCoord.xy) < BRUSH_SIZE) col += vec4(0.5,0.,0.,1.);\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 old = texture(iChannel1, uv);\n    vec4 new = texture(iChannel0, uv);\n    \n    fragColor = mix(old, new, 1.);\n}","name":"Buffer B","description":"","type":"buffer"}]}