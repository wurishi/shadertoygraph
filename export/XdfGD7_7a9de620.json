{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//const vec3 lightPosition = vec3(0.1, 0.5, 0.5);\nconst vec3 cameraPosition = vec3(0.5, 0.5, 1);\n\n//ray-sphere intersection\nfloat intersect(vec3 rayOrigin, vec3 rayDir, vec3 sphereCenter, float radius)\n{\n  float a = dot(rayDir, rayDir);\n  float b = dot(rayOrigin - sphereCenter, rayDir);\n  float c = dot(rayOrigin - sphereCenter, rayOrigin - sphereCenter) - radius*radius;\n  \n  float discr = b*b - a*c;\n  if(discr < 0.0)\n    return -1.0;\n  \n    discr = sqrt(discr);\n    float t0 = (-b - discr) / a;\n    float t1 = (-b + discr) / a;\n  \n\treturn min(t0, t1);\n}\n\n//Blinn phong shading\nvec4 getColor(vec3 p, vec3 center, vec4 diffuseColor, vec3 lightPosition)\n{\n  vec3 n = p - center;\n  n = normalize(n);\n  vec3 l = lightPosition - p;\n  float distanceToLight = length(l);\n  l = normalize(l);  \n  vec3 v = cameraPosition - p;\n  v = normalize(v);\n  vec3 h = v + l;\n  h = normalize(h);\n  \t\n  vec4 lightColor = vec4(0.7,0.7,0.7,1.0);\n  vec4 attenuatedLight = lightColor;// /(10.0*distanceToLight*distanceToLight + 1.2);\n  vec4 ambientComponent = diffuseColor * vec4(0.25,0.25,0.25,1.0);\n  vec4 diffuseComponent = attenuatedLight * diffuseColor * max(0.0, dot(n,l));\n  float shininess = 100.0;\n  vec4 specularColor = vec4(1.0,1.0,1.0,1.0);\n  vec4 specularComponent = attenuatedLight * specularColor * max(0.0, pow(dot(n,h), shininess));\n  return /*ambientComponent +*/ diffuseComponent /*+ specularComponent*/;\n}  \n\nvec4 drawSphere(vec3 rayDir, vec3 pos, float r, vec4 color, vec3 light)\n{\n  float t = intersect(cameraPosition, rayDir, pos, r);\n  if(t > -1.0)\n    return getColor(cameraPosition + t*rayDir, pos, color, light);\n  else\n    return vec4(-1,-1,-1,-1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec3 normalizedPosition = vec3(fragCoord.xy / iResolution.x, 0);\n  vec2 normalizedMouse = iMouse.xy / iResolution.x;\n  vec3 rayDir = normalizedPosition - cameraPosition;\n  rayDir = normalize(rayDir);\n    \n  //Light\n  vec3 lightPosition = vec3(normalizedMouse, -0.2);\t\n\t\n  //Sphere1\n  vec4 outColor = vec4(0.0,0.0,1.0,1);  \t\n\n  vec3 pos = vec3(0.5 ,0.0,-0.5);\n  vec4 color = vec4(1.0,0.0,0.0,1.0);\n  float r = 0.25;\n  vec4 sphereColor = drawSphere(rayDir, pos, r, color, lightPosition);\n  if(sphereColor.x > -1.0)\n    outColor = sphereColor;\n    \n  fragColor = outColor;\n  \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdfGD7","date":"1371520956","viewed":236,"name":"Raytracer Red Sphere","username":"aaecheve","description":"One raytraced spheres","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""}}