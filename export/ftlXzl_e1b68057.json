{"ver":"0.1","info":{"id":"ftlXzl","date":"1626328455","viewed":62,"name":"SED4906 - Raymarching Test 1","username":"sed4906","description":"Rotom rotom!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float E = 0.001;\nconst vec3 I = vec3(1,1,1);\nconst vec3 O = vec3(0,0,0);\nconst vec3 U = vec3(0,1,0);\n\nvec3 K_a = vec3(0.2, 0.2, 0.2);\nvec3 K_d = vec3(0.7, 0.2, 0.2);\nvec3 K_s = vec3(1.0, 1.0, 1.0);\nfloat shininess = 10.0;\n\nmat4 view(vec3 look, vec3 eye, vec3 up) {\n\tvec3 f = normalize(eye - look);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\nfloat sphere( vec3 pos, float radius, vec3 point )\n{\n    return distance(pos, point) - radius;\n}\n\nfloat cube( vec3 pos, vec3 size, vec3 point )\n{\n    vec3 d = abs(pos - point) - size;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat scene( vec3 point )\n{\n    return min(sphere(O,1.0,point),max(-sphere(O,1.2,point),max(cube(O, I, point),sphere(O,1.3,point))));\n}\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(\n        scene(vec3(p.x + E, p.y, p.z)) - scene(vec3(p.x - E, p.y, p.z)),\n        scene(vec3(p.x, p.y + E, p.z)) - scene(vec3(p.x, p.y - E, p.z)),\n        scene(vec3(p.x, p.y, p.z  + E)) - scene(vec3(p.x, p.y, p.z - E))\n    ));\n}\n\nvec3 phong(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = normal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 light(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phong(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phong(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\nvec3 raymarch( vec3 eye, vec3 dir, float clip )\n{\n    vec3 end = eye;\n    float len = 0.0;\n    while(len < clip)\n    {\n        float dist = scene(end);\n        end += dir * dist;\n        len += dist;\n        if(dist <= E)\n        {\n            vec3 lit = light(K_a, K_d, K_s, shininess, end, eye);\n            return lit;\n        }\n    }\n    return O;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.x/iResolution.y;\n\n    vec3 camera = vec3(5.0*sin(iTime),5.0*cos(iTime),5.0*cos(iTime));\n    vec3 raydir = normalize(vec3(uv.x-0.5,(uv.y-0.5)/ar,1.0));\n\n    // Raymarch the scene\n    vec3 col = raymarch(camera, (view(O, camera, U) * vec4(raydir,1.0)).xyz, 50.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}