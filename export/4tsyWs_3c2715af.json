{"ver":"0.1","info":{"id":"4tsyWs","date":"1506981905","viewed":1928,"name":"Rayleigh Scattering Equation","username":"AlanZucconi","description":"This shader shows a polar plot of the Rayleigh scattering.\nColours correspond to wavelength.\n\nBy Alan Zucconi\nWebsite: www.alanzucconi.com\nTwitter: @AlanZucconi","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["scattering","rayleigh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rayleigh Scattering\n// By Alan Zucconi\n// Website: www.alanzucconi.com\n// Twitter: @AlanZucconi\n\n\n/* This shader shows a polar plot of the Rayleigh scattering.\n * Colours correspond to wavelength. */\n\n#define PI 3.14159265358979323846\nconst float DEG2RAD = PI / 180.;\n\n// Scattering parametres\n#define N 2.5e+25\n#define n 1.00029\nconst float Kr =\n    0.5 * PI*PI * pow(n*n-1., 2.)\n    / // -----------------------------\n                   N;\n\n// Theta in radians\n// Lambda in metres\nfloat rayleigh (float theta, float lambda)\n{\n    return Kr * (1. + pow(cos(theta),2.)) / pow(lambda, 4.);\n}\n\n// Inverse Rayleigh:\n// From Intensity and Angle,\n// returns the wavelength\nfloat inverseRayleigh (float intensity, float theta)\n{\n    return pow(Kr / intensity * (1.+pow(cos(theta),2.)), 1./4.);\n}\n\n// Read \"Improving the Rainbow\" for more information\n// http://www.alanzucconi.com/?p=6703\nfloat saturate (float x)\n{\n    return min(1.0, max(0.0,x));\n}\nvec3 saturate (vec3 x)\n{\n    return min(vec3(1.,1.,1.), max(vec3(0.,0.,0.),x));\n}\n\n// --- Spectral Zucconi --------------------------------------------\n// By Alan Zucconi\n// Based on GPU Gems: https://developer.nvidia.com/sites/all/modules/custom/gpugems/books/GPUGems/gpugems_ch08.html\n// But with values optimised to match as close as possible the visible spectrum\n// Fits this: https://commons.wikimedia.org/wiki/File:Linear_visible_spectrum.svg\n// With weighter MSE (RGB weights: 0.3, 0.59, 0.11)\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\n\n// --- Spectral Zucconi 6 --------------------------------------------\n\n// Based on GPU Gems\n// Optimised by Alan Zucconi\nvec3 spectral_zucconi6 (float w)\n{\n\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n\tconst vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n\tconst vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n\n\tconst vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n\tconst vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n\tconst vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n\n\treturn\n\t\tbump3y(c1 * (x - x1), y1) +\n\t\tbump3y(c2 * (x - x2), y2) ;\n}\n\n\n// --- Main Image -----------------------------------------\nvec2 center = vec2(0.5,0.5);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat invAr = iResolution.y / iResolution.x;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Aspect ratio\n    vec2 pos = (center - uv);\n    pos.y *= invAr;\n    \n    float radius = 0.0000075;\n    \n    pos *= radius;\n    \n    float theta = atan(pos.y, pos.x);\n    float intensity = length(pos);\n    \n    float wavelength = inverseRayleigh(intensity, theta);\n    \n    vec3 c = spectral_zucconi6(wavelength * 1000000000.);\n    \n    fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}