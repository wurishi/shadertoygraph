{"ver":"0.1","info":{"id":"Mc3fRf","date":"1733325389","viewed":105,"name":"\"波\" Using Cubic Bezier Curve","username":"ZhouboLi","description":"\"波\" Using Cubic Bezier Curve","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","bezier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2[] bo1 = vec2[6](\nvec2(2.13, 7.87),\nvec2(2.67, 7.83),\nvec2(3.39, 7.68),\nvec2(3.28, 6.96),\nvec2(2.72, 7.0),\nvec2(2.3, 7.36)\n);\n\nvec2[] bo2 = vec2[6](\nvec2(1.7, 1.87),\nvec2(1.36, 2.36),\nvec2(2.7, 3.55),\nvec2(3.56, 4.37),\nvec2(3.14, 3.26),\nvec2(2.68, 2.21)\n);\n\nvec2[] bo3 = vec2[6](\nvec2(4.27, 6.6),\nvec2(5.06, 7.14),\nvec2(7.52, 7.13),\nvec2(8.1, 6.77),\nvec2(7.29, 6.47),\nvec2(5.46, 6.38)\n);\n\nvec2[] bo4 = vec2[6](\nvec2(7.29, 5.54),\nvec2(8.14, 6.24),\nvec2(7.86, 6.8),\nvec2(8.53, 6.79),\nvec2(8.7, 6.22),\nvec2(8.22, 5.9)\n);\n\nvec2[] bo5 = vec2[6](\nvec2(4.25, 1.68),\nvec2(5.16, 4.35),\nvec2(4.83, 6.1),\nvec2(5.44, 6.53),\nvec2(5.5, 5.66),\nvec2(5.35, 2.7)\n);\n\nvec2[] bo6 = vec2[6](\nvec2(5.44, 3.03),\nvec2(5.13, 2.58),\nvec2(4.99, 7.1),\nvec2(5.44, 6.75),\nvec2(5.84, 7.08),\nvec2(5.8, 2.6)\n);\n\nvec2[] bo7 = vec2[6](\nvec2(3.53, 4.68),\nvec2(4.32, 5.01),\nvec2(5.6, 5.1),\nvec2(6.32, 4.87),\nvec2(5.35, 4.51),\nvec2(3.4, 4.2)\n);\n\nvec2[] bo8 = vec2[6](\nvec2(3.27, 1.44),\nvec2(5.16, 2.1),\nvec2(5.79, 3.41),\nvec2(6.27, 4.83),\nvec2(7.4, 4.99),\nvec2(5.4, 1.48)\n);\n\nvec2[] bo9 = vec2[6](\nvec2(8.8, 1.71),\nvec2(6.56, 2.28),\nvec2(5.19, 4.37),\nvec2(4.43, 4.64),\nvec2(4.24, 4.15),\nvec2(6.8, 1.4)\n);\n\n\nvec2[6] shift(vec2[6] ps, vec2 shiftp){\n    return vec2[6](\nps[0]+shiftp,\nps[1]+shiftp,\nps[2]+shiftp,\nps[3]+shiftp,\nps[4]+shiftp,\nps[5]+shiftp\n);\n}\n\nint solve_cubic(vec3 coeffs, inout vec3 r){\n\n\tfloat a = coeffs[2];\n\tfloat b = coeffs[1];\n\tfloat c = coeffs[0];\n\n\tfloat p = b - a*a / 3.0;\n\tfloat q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n\tfloat p3 = p*p*p;\n\tfloat d = q*q + 4.0*p3 / 27.0;\n\tfloat offset = -a / 3.0;\n\tif(d >= 0.0) {\n\t\tfloat z = sqrt(d);\n\t\tfloat u = (-q + z) / 2.0;\n\t\tfloat v = (-q - z) / 2.0;\n\t\tu = sign(u)*pow(abs(u),1.0/3.0);\n\t\tv = sign(v)*pow(abs(v),1.0/3.0);\n\t\tr[0] = offset + u + v;\t\n\n\t\tfloat f = ((r[0] + a) * r[0] + b) * r[0] + c;\n\t\tfloat f1 = (3. * r[0] + 2. * a) * r[0] + b;\n\n\t\tr[0] -= f / f1;\n\n\t\treturn 1;\n\t}\n\tfloat u = sqrt(-p / 3.0);\n\tfloat v = acos(-sqrt( -27.0 / p3) * q / 2.0) / 3.0;\n\tfloat m = cos(v), n = sin(v)*1.732050808;\n\n\tr[0] = offset + u * (m + m);\n    r[1] = offset - u * (n + m);\n    r[2] = offset + u * (n - m);\n\n\tvec3 f = ((r + a) * r + b) * r + c;\n\tvec3 f1 = (3. * r + 2. * a) * r + b;\n\n\tr -= f / f1;\n\n\treturn 3;\n}\n\nfloat cubic_bezier_sign(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\n\tfloat cu = (-p0.y + 3. * p1.y - 3. * p2.y + p3.y);\n\tfloat qu = (3. * p0.y - 6. * p1.y + 3. * p2.y);\n\tfloat li = (-3. * p0.y + 3. * p1.y);\n\tfloat co = p0.y - uv.y;\n\n\tvec3 roots = vec3(1e38);\n\tint n_roots = solve_cubic(vec3(co/cu,li/cu,qu/cu),roots);\n\n\tint n_ints = 0;\n\n\tfor(int i=0;i<3;i++){\n\t\tif(i < n_roots){\n\t\t\tif(roots[i] >= 0. && roots[i] <= 1.){\n\t\t\t\tfloat x_pos = -p0.x + 3. * p1.x - 3. * p2.x + p3.x;\n\t\t\t\tx_pos = x_pos * roots[i] + 3. * p0.x - 6. * p1.x + 3. * p2.x;\n\t\t\t\tx_pos = x_pos * roots[i] + -3. * p0.x + 3. * p1.x;\n\t\t\t\tx_pos = x_pos * roots[i] + p0.x;\n\n\t\t\t\tif(x_pos < uv.x){\n\t\t\t\t\tn_ints++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tvec2 tang1 = p0.xy - p1.xy;\n\tvec2 tang2 = p2.xy - p3.xy;\n\n\tvec2 nor1 = vec2(tang1.y,-tang1.x);\n\tvec2 nor2 = vec2(tang2.y,-tang2.x);\n\n\tif(p0.y < p1.y){\n\t\tif((uv.y<=p0.y) && (dot(uv-p0.xy,nor1)<0.)){\n\t\t\tn_ints++;\n\t\t}\n\t}\n\telse{\n\t\tif(!(uv.y<=p0.y) && !(dot(uv-p0.xy,nor1)<0.)){\n\t\t\tn_ints++;\n\t\t}\n\t}\n\n\tif(p2.y<p3.y){\n\t\tif(!(uv.y<=p3.y) && dot(uv-p3.xy,nor2)<0.){\n\t\t\tn_ints++;\n\t\t}\n\t}\n\telse{\n\t\tif((uv.y<=p3.y) && !(dot(uv-p3.xy,nor2)<0.)){\n\t\t\tn_ints++;\n\t\t}\n\t}\n\n\tif(n_ints==0 || n_ints==2 || n_ints==4){\n\t\treturn 1.;\n\t}\n\telse{\n\t\treturn -1.;\n\t}\n}\n\nbool BetweenCubicBezier(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3, vec2 p4, vec2 p5){\n    return cubic_bezier_sign(uv, p0, p1, p2, p3) < 0.0f &&\n        cubic_bezier_sign(uv, p0, p4, p5, p3) < 0.0f;\n}\n\nvec2 pos(vec2 p){\n    return p + vec2((iResolution.x - iResolution.y)/iResolution.y/2.0 , 0);\n}\n\n\nbool BetweenCubicBezierBuffer(vec2 uv, vec2[6] ps, float a){\n    return cubic_bezier_sign(uv, pos(ps[0]/a), pos(ps[1]/a), pos(ps[2]/a), pos(ps[3]/a)) > 0.0f &&\n        cubic_bezier_sign(uv, pos(ps[0]/a), pos(ps[5]/a), pos(ps[4]/a), pos(ps[3]/a)) < 0.0f;\n}\n\nbool BetweenCubicBezierBufferR(vec2 uv, vec2[6] ps, float a){\n    return cubic_bezier_sign(uv, pos(ps[0]/a), pos(ps[1]/a), pos(ps[2]/a), pos(ps[3]/a)) < 0.0f &&\n        cubic_bezier_sign(uv, pos(ps[0]/a), pos(ps[5]/a), pos(ps[4]/a), pos(ps[3]/a)) > 0.0f;\n}\n\nbool BetweenCubicBezierBufferRR(vec2 uv, vec2[6] ps, float a){\n    return cubic_bezier_sign(uv, pos(ps[0]/a), pos(ps[1]/a), pos(ps[2]/a), pos(ps[3]/a)) < 0.0f &&\n        cubic_bezier_sign(uv, pos(ps[0]/a), pos(ps[5]/a), pos(ps[4]/a), pos(ps[3]/a)) < 0.0f;\n}\n\nbool CombineBezier(vec2 p){\n    return BetweenCubicBezierBuffer(p, shift(bo1, vec2(0.2, -0.2)), 10.0) || \n    BetweenCubicBezierBuffer(p, shift(bo1, vec2(-0.5, -2.0)), 10.0) || \n    BetweenCubicBezierBufferR(p, shift(bo2, vec2(-0.1, 0.1)), 10.0) ||\n    BetweenCubicBezierBufferRR(p, bo3, 10.0) ||\n    BetweenCubicBezierBufferR(p, shift(bo4, vec2(-0.45, 0.0)), 10.0) ||\n    BetweenCubicBezierBufferR(p, shift(bo5, vec2(-0.99, 0.2)), 10.0) ||\n    BetweenCubicBezierBufferR(p, shift(bo6, vec2(0.5, 1.9)), 10.0) ||\n    BetweenCubicBezierBufferRR(p, shift(bo7, vec2(1.0, 0.2)), 10.0) ||\n    BetweenCubicBezierBufferRR(p, shift(bo8, vec2(0.72, 0.32)), 10.0) ||\n    BetweenCubicBezierBuffer(p, shift(bo9, vec2(0.1, 0.05)), 10.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/iResolution.y;\n    bool dd = CombineBezier(p);\n    fragColor = vec4(1.0) - vec4(int(dd));\n}","name":"Image","description":"","type":"image"}]}