{"ver":"0.1","info":{"id":"XsBcW1","date":"1491836954","viewed":124,"name":"Marble colour 3","username":"hclarke","description":"more of this","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["marble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S. Guillitte 2015\n\nfloat zoom=0.4;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nfloat map(in vec3 p) {\n\t\n\tfloat res = 0.;\n\t\n    vec3 c = p;\n\tfor (int i = 0; i < 10; ++i) {\n        p =.7*abs(p)/dot(p,p) -.7;\n        p.yz= csqr(p.yz);\n        p=p.zxy;\n        res += exp(-19. * abs(dot(p,c)));\n        \n\t}\n\treturn res/2.;\n}\n\n\n\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    ro.z += fract(iTime*0.2);\n   \tvec3 one3 = vec3(1.,1.,1.);\n    vec3 t = one3 * tminmax.x;\n    \n    vec3 dt = vec3(.04, 0.02, 0.09);\n    //float dt = .2 - .195*cos(iTime*.05);//animated\n    vec3 col= vec3(0.);\n    vec3 c = one3 * 0.;\n    for( int i=0; i<32; i++ )\n\t{\n        t+=dt*exp(-2.*c);\n        vec3 a = step(t,one3*tminmax.y);\n        vec3 pos = ro+t*rd;\n        \n        c.x = map(ro+t.x*rd);\n        c.y = map(ro+t.y*rd);\n        c.z = map(ro+t.z*rd);  \n        col = mix(col, .99*col+ .08*c, a);\n    }    \n    return col;\n}\n\nvec3 cubehelix(float v, float m, float M, float s) {\n \tconst mat3 YUV_to_RGB = mat3(\n         1.0,1.0,1.0,\n        0.0,-0.39465,2.03211,\n        1.13983,-0.58060,0.0);\n    \n    float a = 3.14159*(v+iTime*0.5)*2.0 * s;\n    vec3 c = vec3(mix(m,M,pow(v,.7)),sin(a),cos(a));\n   \tc.yz *= 0.08;\n    \n    return YUV_to_RGB*c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\n    vec3 ro = zoom*vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.2);\n    vec3 ta = vec3( 0.0 , 1.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,2.) );\n\n\t// raymarch\n    vec3 col = raymarch(ro,rd,tmm);\n\t// shade\n    \n    col =  .5 *(log(1.+col));\n    //col = clamp(col,0.,1.);\n    col = cubehelix(col.r*10.0, col.b, col.g,0.4);\n\t\n    fragColor = vec4( col, 1.0 );\n\n}\n","name":"Image","description":"","type":"image"}]}