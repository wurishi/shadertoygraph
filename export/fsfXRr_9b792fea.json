{"ver":"0.1","info":{"id":"fsfXRr","date":"1618648228","viewed":66,"name":"328_Kozhemyak_v5v6","username":"kv_msu","description":"Выполнено: \n1)вся база\n2)резкие тени\n3)мягкие тени\n4)куб-мапа\n5)Ambient Occlusion\n6)Окружение в виде текстурированной плоскости","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["water","icosaedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BUMPFACTOR 0.1\n#define EPSILON 0.1\n#define BUMPDISTANCE 60.\n\n#define time (iTime+285.)\n\nfloat noise( const in vec2 x ) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy) + f.xy;\n\treturn textureLod( iChannel3, (uv+ 0.5)/256.0, 0.0 ).x;\n}\n\nfloat noise( const in vec3 x ) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel3, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nmat2 rot(const in float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nconst mat2 m2 = mat2( 0.60, -0.80, 0.80, 0.60 );\n\nconst mat3 m3 = mat3( 0.00,  0.80,  0.60,\n                     -0.80,  0.36, -0.48,\n                     -0.60, -0.48,  0.64 );\n\nfloat fbm( in vec3 p ) {\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m3*p*2.02;\n    f += 0.2500*noise( p ); p = m3*p*2.03;\n    f += 0.1250*noise( p ); p = m3*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n}\n\nfloat hash( in float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\n// intersection functions\n\nbool intersectPlane(const in vec3 ro, const in vec3 rd, const in float height, inout float dist) {\t\n\tif (rd.y==0.0) {\n\t\treturn false;\n\t}\n\t\t\n\tfloat d = -(ro.y - height)/rd.y;\n\td = min(100000.0, d);\n\tif( d > 0. && d < dist ) {\n\t\tdist = d;\n\t\treturn true;\n    } else {\n\t\treturn false;\n\t}\n}\n\n// light direction\n\nvec3 lig = normalize(vec3( 0.3,0.5, 0.6));\n\nvec3 bgColor( const in vec3 rd ) {\n\tfloat sun = clamp( dot(lig,rd), 0.0, 1.0 );\n\tvec3 col = vec3(0.5, 0.52, 0.55) - rd.y*0.2*vec3(1.0,0.8,1.0) + 0.15*0.75;\n\tcol += vec3(1.0,.6,0.1)*pow( sun, 8.0 );\n\tcol *= 0.95;\n\treturn col;\n}\n\n// coulds functions by inigo quilez\n\n#define CLOUDSCALE (500./(64.*0.03))\n\nfloat cloudMap( const in vec3 p, const in float ani ) {\n\tvec3 r = p/CLOUDSCALE;\n\n\tfloat den = -1.8+cos(r.y*5.-4.3);\n\t\t\n\tfloat f;\n\tvec3 q = 2.5*r*vec3(0.75,1.0,0.75)  + vec3(1.0,2.0,1.0)*ani*0.15;\n    f  = 0.50000*noise( q ); q = q*2.02 - vec3(-1.0,1.0,-1.0)*ani*0.15;\n    f += 0.25000*noise( q ); q = q*2.03 + vec3(1.0,-1.0,1.0)*ani*0.15;\n    f += 0.12500*noise( q ); q = q*2.01 - vec3(1.0,1.0,-1.0)*ani*0.15;\n    f += 0.06250*noise( q ); q = q*2.02 + vec3(1.0,1.0,1.0)*ani*0.15;\n    f += 0.03125*noise( q );\n\t\n\treturn 0.065*clamp( den + 4.4*f, 0.0, 1.0 );\n}\n\nvec3 raymarchClouds( const in vec3 ro, const in vec3 rd, const in vec3 bgc, const in vec3 fgc, const in float startdist, const in float maxdist, const in float ani ) {\n    // dithering\t\n\tfloat t = startdist+CLOUDSCALE*0.02*hash(rd.x+35.6987221*rd.y+time);//0.1*texture( iChannel0, fragCoord.xy/iChannelResolution[0].x ).x;\n\t\n    // raymarch\t\n\tvec4 sum = vec4( 0.0 );\n\tfor( int i=0; i<64; i++ ) {\n\t\tif( sum.a > 0.99 || t > maxdist ) continue;\n\t\t\n\t\tvec3 pos = ro + t*rd;\n\t\tfloat a = cloudMap( pos, ani );\n\n        // lighting\t\n\t\tfloat dif = clamp(0.1 + 0.8*(a - cloudMap( pos + lig*0.15*CLOUDSCALE, ani )), 0., 0.5);\n\t\tvec4 col = vec4( (1.+dif)*fgc, a );\n\t\t// fog\t\t\n\t//\tcol.xyz = mix( col.xyz, fgc, 1.0-exp(-0.0000005*t*t) );\n\t\t\n\t\tcol.rgb *= col.a;\n\t\tsum = sum + col*(1.0 - sum.a);\t\n\n        // advance ray with LOD\n\t\tt += (0.03*CLOUDSCALE)+t*0.012;\n\t}\n\n    // blend with background\t\n\tsum.xyz = mix( bgc, sum.xyz/(sum.w+0.0001), sum.w );\n\t\n\treturn clamp( sum.xyz, 0.0, 1.0 );\n}\n\n// terrain functions\nfloat terrainMap( const in vec3 p ) {\n\treturn (textureLod( iChannel0, (-p.zx*m2)*0.000046, 0. ).x*600.) * smoothstep( 820., 1000., length(p.xz) ) - 2. + noise(p.xz*0.5)*15.;\n}\n\nvec3 raymarchTerrain( const in vec3 ro, const in vec3 rd, const in vec3 bgc, const in float startdist, inout float dist ) {\n\tfloat t = startdist;\n\n    // raymarch\t\n\tvec4 sum = vec4( 0.0 );\n\tbool hit = false;\n\tvec3 col = bgc;\n\t\n\tfor( int i=0; i<80; i++ ) {\n\t\tif( hit ) break;\n\t\t\n\t\tt += 8. + t/300.;\n\t\tvec3 pos = ro + t*rd;\n\t\t\n\t\tif( pos.y < terrainMap(pos) ) {\n\t\t\thit = true;\n\t\t}\t\t\n\t}\n\tif( hit ) {\n\t\t// binary search for hit\t\t\n\t\tfloat dt = 4.+t/400.;\n\t\tt -= dt;\n\t\t\n\t\tvec3 pos = ro + t*rd;\t\n\t\tt += (0.5 - step( pos.y , terrainMap(pos) )) * dt;\t\t\n\t\tfor( int j=0; j<2; j++ ) {\n\t\t\tpos = ro + t*rd;\n\t\t\tdt *= 0.5;\n\t\t\tt += (0.5 - step( pos.y , terrainMap(pos) )) * dt;\n\t\t}\n\t\tpos = ro + t*rd;\n\t\t\n\t\tvec3 dx = vec3( 100.*EPSILON, 0., 0. );\n\t\tvec3 dz = vec3( 0., 0., 100.*EPSILON );\n\t\t\n\t\tvec3 normal = vec3( 0., 0., 0. );\n\t\tnormal.x = (terrainMap(pos + dx) - terrainMap(pos-dx) ) / (200. * EPSILON);\n\t\tnormal.z = (terrainMap(pos + dz) - terrainMap(pos-dz) ) / (200. * EPSILON);\n\t\tnormal.y = 1.;\n\t\tnormal = normalize( normal );\t\t\n\n\t\tcol = vec3(0.2) + 0.7*texture( iChannel2, pos.xz * 0.01 ).xyz * \n\t\t\t\t   vec3(1.,.9,0.6);\n\t\t\n\t\tfloat veg = 0.3*fbm(pos*0.2)+normal.y;\n\t\t\t\t\t\n\t\tif( veg > 0.75 ) {\n\t\t\tcol = vec3( 0.45, 0.6, 0.3 )*(0.5+0.5*fbm(pos*0.5))*0.6;\n\t\t} else \n\t\tif( veg > 0.66 ) {\n\t\t\tcol = col*0.6+vec3( 0.4, 0.5, 0.3 )*(0.5+0.5*fbm(pos*0.25))*0.3;\n\t\t}\n\t\tcol *= vec3(0.5, 0.52, 0.65)*vec3(1.,.9,0.8);\n\t\t\n\t\tvec3 brdf = col;\n\t\t\n\t\tfloat diff = clamp( dot( normal, -lig ), 0., 1.);\n\t\t\n\t\tcol = brdf*diff*vec3(1.0,.6,0.1);\n\t\tcol += brdf*clamp( dot( normal, lig ), 0., 1.)*vec3(0.8,.6,0.5)*0.8;\n\t\tcol += brdf*clamp( dot( normal, vec3(0.,1.,0.) ), 0., 1.)*vec3(0.8,.8,1.)*0.2;\n\t\t\n\t\tdist = t;\n\t\tt -= pos.y*3.5;\n\t\tcol = mix( col, bgc, 1.0-exp(-0.0000005*t*t) );\n\t\t\n\t}\n\treturn col;\n}\n\nfloat waterMap( vec2 pos ) {\n\tvec2 posm = pos * m2;\n\t\n\treturn abs( fbm( vec3( 8.*posm, time ))-0.5 )* 0.1;\n}\n\nconst float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(3,2,7);\nvec3 randDir;\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst vec3 PLANE_COLOR = vec3(1, 1, 1);\nconst float PLANE_HEIGHT = -1.4;\n\nstruct Light {\n    vec3 pos;\n    float radius;\n    vec3 color;\n    float intensity;\n};\n\nconst int LIGHT_NUM = 2;\n\nLight Lights[LIGHT_NUM] = Light[LIGHT_NUM](\nLight(vec3(-3, 1.5, 0), 0.5, vec3(0.3, 0.5, 1.0), 20.0f),\nLight(vec3(3, 1.5, 0), 0.25, vec3(1.0, 1, 1), 20.0f));\n\nconst float CYL_RADIUS = 1.0;\nconst float CYL_SLOPE = 0.2;\nconst float CYL_HEIGHT = 0.5;\nconst vec3 CYL_BASE_POS = vec3(0, PLANE_HEIGHT + 0.001, 0);\n\nconst vec3 ICO_COLOR = vec3(1.0, 1.0, 1.0);\n\n//const vec3 ICO_COLOR = vec3(0.0, 0.8, 1.0);\n\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5;\nconst float WATER_N = 1.33;\n\nconst float BLUR_RATE = 0.05;\nconst float BLUR_RATE_2 = 0.075;\n\nvec3 RAND_DIR;\n\nconst float ICO_BASE = CYL_HEIGHT + CYL_BASE_POS.y + 1.0;\nconst vec3 ICO_CENTRE = vec3(0.0, 1.11 + ICO_BASE, 0.0);\n\nstruct Cube {\n    vec3 centre;\n    float size;\n    int type;\n};\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nfloat randNormal(float frame)\n{\n    float S = 0.0;\n    for (int i = 0; i < 12; ++i) {\n        S += rand(frame);\n    }\n    return (S - 6.0) / 12.0;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = 2.0 * dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - 4.0 * a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / (2.0 * a);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = (-b + sqrt(D)) / (2.0 * a);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, float radius, float height, out vec3 normal) {\n    float t = INF;\n    vec3 worldPos;\n    float curT = (height - pos.y) / dir.y;\n    if (t > curT && curT > 0.0) {\n        worldPos = curT * dir + pos;\n        if (dot(worldPos.xz, worldPos.xz) < radius) {\n            normal = vec3(0, 1, 0);\n            t = curT;\n        }\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - radius;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    curT = (-b - sqrt(D)) / a;\n    if (t > curT && curT > 0.0) {\n        worldPos = curT * dir + pos;\n        if (worldPos.y <= height) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            t = curT;\n        }\n    }\n    curT = (-b + sqrt(D)) / a;\n    if (t > curT && curT > 0.0) {\n        worldPos = curT * dir + pos;\n        if (worldPos.y <= height) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            t = curT;\n        }\n    }\n    return t;\n}\n\nfloat triple(vec3 v1, vec3 v2, vec3 v3) {\n    return dot(v1, cross(v2, v3));\n}\n\n\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 vert[3], vec3 centre, out vec3 norm) {\n    vec3 d1 = vert[1] - vert[0];\n    vec3 d2 = vert[2] - vert[0];\n    norm = normalize(cross(d1, d2));\n    vec3 d0 = pos - vert[0];\n    float a = triple(dir, d1, d2);\n    if (a == 0.0) return INF;\n    float t = - triple(d0, d1, d2) / a;\n    if (t < 0.0) return INF;\n    \n    vec3 worldPos = pos + t * dir;\n    \n    for (int i = 0; i < 3; i++) {\n        vec3 de = vert[(i + 1) % 3] - vert[i];\n        vec3 dp = worldPos - vert[i];\n        vec3 norm1 = normalize(cross(de, dp));\n        if (dot(norm1 - norm, norm1 - norm) > 0.5) return INF;\n    }\n    \n    if (dot(vert[0] + 0.01 * norm - centre, vert[0] + 0.01 * norm - centre) < dot(vert[0] - centre, vert[0] - centre)) {\n        norm = -norm;\n    }\n    \n    return t;\n}\n\nint THREE_FACE[20 * 3] = int[20 * 3]\n(0,6,1, \n0,11,6, \n1,4,0, \n1,8,4,\n1,10,8,\n2,5,3,\n2,9,5,\n2,11,9,\n3,7,2,\n3,10,7,\n4,8,5,\n4,9,0,\n5,8,3,\n5,9,4,\n6,10,1,\n6,11,7,\n7,10,6,\n7,11,2,\n8,10,3,\n9,11,0);\n\nvec3 THREE_VERT[12] = vec3[12]\n(vec3(-0.26286500 * 2.0, 0.0000000 + ICO_BASE, 0.42532500 * 2.0),\nvec3(0.26286500 * 2.0, 0.0000000 + ICO_BASE, 0.42532500 * 2.0),\nvec3(-0.26286500 * 2.0, 0.0000000 + ICO_BASE, -0.42532500 * 2.0),\nvec3(0.26286500 * 2.0, 0.0000000 + ICO_BASE, -0.42532500 * 2.0),\nvec3(0.0000000 * 2.0, 0.42532500 * 2.0 + ICO_BASE, 0.26286500 * 2.0),\nvec3(0.0000000 * 2.0, 0.42532500 * 2.0 + ICO_BASE, -0.26286500 * 2.0),\nvec3(0.0000000 * 2.0, -0.42532500 * 2.0 + ICO_BASE, 0.26286500 * 2.0),\nvec3(0.0000000 * 2.0, -0.42532500 * 2.0 + ICO_BASE, -0.26286500 * 2.0),\nvec3(0.42532500 * 2.0, 0.26286500 * 2.0 + ICO_BASE, 0.0000000),\nvec3(-0.42532500 * 2.0, 0.26286500 * 2.0 + ICO_BASE, 0.0000000),\nvec3(0.42532500 * 2.0, -0.26286500 * 2.0 + ICO_BASE, 0.0000000),\nvec3(-0.42532500 * 2.0, -0.26286500 * 2.0 + ICO_BASE, 0.0000000)\n);\n\nfloat traceIcosaedron(vec3 pos, vec3 dir, out vec3 norm) {\n    vec3 cur_norm;\n    float t = INF, cur_t;\n    for (int i = 0; i < 20; i++) {\n        vec3 cur_face[3];\n        for (int j = 0; j < 3; j++) {\n            cur_face[j] = THREE_VERT[THREE_FACE[i * 3 + j]];\n        }\n        cur_t = traceTriangle(pos, dir, cur_face, ICO_CENTRE, cur_norm);\n        if (cur_t < t) {\n            t = cur_t;\n            norm = cur_norm;\n        }\n    }\n    \n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos - CYL_BASE_POS, dir, CYL_RADIUS, CYL_HEIGHT, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = Lights[0].pos - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, Lights[0].pos + randDir * Lights[0].radius) ? 0.0 : 30.0f / distSq1;\n    vec3 toLight2 = Lights[1].pos - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, Lights[1].pos + randDir * Lights[1].radius) ? 0.0 :25.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * Lights[0].color\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * Lights[1].color\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) return reflect(v, normal);\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 6)), rand(float(iFrame + 13)));\n    RAND_DIR = normalize(randVals - 0.5);\n    fragColor = vec4(0, 0, 0, 1.0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    \n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    float n1 = AIR_N;\n    float n2 = WATER_N;\n    float r = pow2(n1 - n2) / pow2(n1 + n2);\n    float n;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    for (int i = 0; i < LIGHT_NUM; i++) {\n        Lights[i].pos = Lights[i].pos + vec3(0, 1, 0) * randVals.x * BLUR_RATE;\n    }\n    \n   /* for (int i = 0; i < CUBE_NUM; i++) {\n        Cubes[i].centre = Cubes[i].centre + randVals * BLUR_RATE_2;\n    }\n    */\n    vec3 curPos = CAMERA_POS;\n    vec3 curView = viewVec;\n    \n    \n    vec3 colorMult = vec3(1, 1, 1);\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n\t\n\t// camera parameters\n\tvec3 ro = vec3(0.0, 0.5, 0.0);\n\tvec3 ta = vec3(0.0, 0.45,1.0);\n\tif (iMouse.z>=1.) {\n\t\tta.xz *= rot( (iMouse.x/iResolution.x-.5)*7. );\n\t}\n\t\t\n\tta.xz *= rot( mod(iTime * 0.05, 6.2831852) );\n    \n\t// build ray\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = vec3(0.8,.5,0.0);\n\n\tfloat fresnel, refldist = 5000., maxdist = 5000.;\n\tbool reflected = false;\n\tvec3 normal, col = bgColor( rd );\n\tvec3 roo = ro, rdo = rd, bgc = col;\n\t\n\tif( intersectPlane( ro, rd, 0., refldist ) && refldist < 200. ) {\n\t\tro += refldist*rd;\t\n\t\tvec2 coord = ro.xz;\n\t\tfloat bumpfactor = BUMPFACTOR * (1. - smoothstep( 0., BUMPDISTANCE, refldist) );\n\t\t\t\t\n\t\tvec2 dx = vec2( EPSILON, 0. );\n\t\tvec2 dz = vec2( 0., EPSILON );\n\t\t\n\t\tnormal = vec3( 0., 1., 0. );\n\t\tnormal.x = -bumpfactor * (waterMap(coord + dx) - waterMap(coord-dx) ) / (2. * EPSILON);\n\t\tnormal.z = -bumpfactor * (waterMap(coord + dz) - waterMap(coord-dz) ) / (2. * EPSILON);\n\t\tnormal = normalize( normal );\t\t\n\t\t\n\t\tfloat ndotr = dot(normal,rd);\n\t\tfresnel = pow(1.0-abs(ndotr),5.);\n\n\t\trd = reflect( rd, normal);\n\n\t\treflected = true;\n\t\tbgc = col = bgColor( rd );\n\t}\n\n\tcol = raymarchTerrain( ro, rd, col, reflected?(800.-refldist):800., maxdist );\n    col = raymarchClouds( ro, rd, col, bgc, reflected?max(0.,min(150.,(150.-refldist))):150., maxdist, time*0.05 );\n\t\n\tif( reflected ) {\n\t\tcol = mix( col.xyz, bgc, 1.0-exp(-0.0000005*refldist*refldist) );\n\t\tcol *= fresnel*0.9;\t\t\n\t\tvec3 refr = refract( rdo, normal, 1./1.3330 );\n\t\tintersectPlane( ro, refr, -2., refldist );\n\t\tcol *= mix( texture( iChannel0, (roo+refldist*refr).xz*1.3 ).xyz * \n\t\t\t\t   vec3(1.,.9,0.6), vec3(0.5,.9,0.8)*0.5, clamp( refldist / 3., 0., 1.) ) \n\t\t\t   * (1.-fresnel)*0.125;\n\t}\n\t\n\tcol = pow( col, vec3(0.7) );\n\t\n\t// contrast, saturation and vignetting\t\n\tcol = col*col*(3.0-2.0*col);\n    col = mix( col, vec3(dot(col,vec3(0.33))), 1.0 );\n\n    for (int i = 0; i < 10; i++) {\n        float t = INF;\n        int materialType;\n        vec3 normal;\n        vec3 color;\n        float nEnter = AIR_N;\n            \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curView, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curView + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 lightNorm;\n        float lightT;\n        for (int i = 0; i < LIGHT_NUM; i++) {\n            vec3 lightNorm;\n            lightT = traceSphere(curPos - Lights[i].pos, curView, Lights[i].radius, lightNorm);\n            if (lightT < t) {\n                t = lightT;\n                normal = lightNorm;\n                materialType = EMISSION;\n                vec3 worldPos = curPos + t * curView;\n                color = Lights[i].color;\n            }\n        }\n        \n        vec3 icoNorm;\n        float icoT = traceIcosaedron(curPos, curView, icoNorm);\n        if (icoT < t) {\n            t = icoT;\n            normal = icoNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ICO_COLOR;\n                materialType = REFRACTION;\n                if (dot(curView, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curView, 0.5, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            vec3 worldPos = curPos + t * curView;\n            if (randVals.x < WATER_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= col;\n                materialType = REFRACTION;\n                if (dot(curView, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = WATER_N;\n                }\n            }\n        }\n       \n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos - CYL_BASE_POS, curView, CYL_RADIUS, CYL_HEIGHT, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curView + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curView + curPos;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curView = reflect(curView, normal);\n                curPos = worldPos + curView * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curView = refraction(curView, normal, n1, nEnter);\n                curPos = worldPos + curView * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curView).rgb * colorMult;\n        }\n    }\n    \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}