{"ver":"0.1","info":{"id":"4sVXzK","date":"1465414489","viewed":328,"name":"Space Monolith","username":"zackpudil","description":"My God, it's full of fractals.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal","distancefields"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float tmax = 20.0;\n\nfloat map(vec3 p) {\n\tp.xy = mod(p.xy + 1.0, 2.0) - 1.0;\n\tp.z = abs(p.z) - 0.75;\n\tvec4 q = vec4(p, 1.0);\n\t\n\tfor(int i = 0; i < 15; i++) {\n\t\tq.xyz = abs(q.xyz) - vec3(0.3, 1.0, -0.0);\n\t\tq = 2.0*q/clamp(dot(q.xyz, q.xyz), 0.5, 1.0) - vec4(1.0, 0.0, 0.3, 0.0);\n\t}\n\t\n\treturn abs(q.x + q.y + q.z)/q.w;\n}\n\nvec2 march(vec3 ro, vec3 rd) {\n\tfloat d = 1.0;\n\tfloat e, t = 0.0;\n    float g = 0.0;\n\t\n\tfor(int i = 0; i < 200; i++) {\n\t\tif(abs(d) < e || t >= tmax) break;\n\t\td = map(ro + rd*t);\n\t\te = 0.001*(1.0 + t*4.0);\n\t\tt += d*(0.55 + 0.05*t);\n        \n        g = 1.0;\n\t}\n\t\n\treturn vec2(t, t >= tmax ? 0.0 :clamp(g*0.9, 0.0, 1.0));\n}\n\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.01, 0.0);\n\tvec3 n = vec3(\n\t\tmap(p + h.xyy) - map(p - h.xyy),\n\t\tmap(p + h.yxy) - map(p - h.yxy),\n\t\tmap(p + h.yyx) - map(p - h.yyx)\n\t);\n\treturn normalize(n);\n}\n\nmat3 camera(vec3 eye, vec3 lat) {\n\tvec3 ww = normalize(lat - eye);\n\tvec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\t\n\treturn mat3(uu, vv, ww);\n}\n\nfloat hash2(vec2 n) {\n\treturn fract(sin(dot(n, vec2(27.233, 71.989)))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tvec3 col = vec3(1)*step(0.997, hash2(uv));\n\t\n\tvec3 ro = vec3(iTime*0.5, 1.0*sin(iTime*0.3), 0.25*cos(iTime*0.2));\n\tvec3 rd = normalize(camera(ro, ro + vec3(3.0, 0, 4.0*sin(iTime*0.5)))*vec3(uv, 1.97));\n    \n    vec3 pos;\n\t\n\tvec2 i = march(ro, rd);\n\tif(i.x < tmax) {\n\t\tpos = ro + rd*i.x;\n\t\tvec3 nor = normal(pos);\n\n\t\tcol = vec3(0.0);\n\n\t\tcol += 0.1*pow(clamp(1.0 + dot(rd, nor), 0.0, 1.0), 2.0)*smoothstep(-8.0, -6.0, -i.x);\n\t}\n\n\tfloat y = mod(pos.y + iTime, 2.0);\n    col += pow(abs(i.y), 0.3)\n        *vec3(1.0, 0, 0)\n        *smoothstep(0.0, 0.2, y)\n\t\t*smoothstep(-0.2, 0.0, -y);\n\tcol = pow(col, vec3(.454545));\n\t\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}