{"ver":"0.1","info":{"id":"cdBfWD","date":"1689697392","viewed":68,"name":"Raymarching - shaded sphere","username":"rozanski","description":"Basic shaded sphere using raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereSDF(in vec3 p, float radius) {\n    return sqrt(pow(p.x, 2.0) + pow(p.y, 2.0) + pow(p.z, 2.0)) - radius;\n}\n\n// From https://iquilezles.org/articles/normalsSDF/\nvec3 calcNormal(in vec3 p)\n{\n    const float eps = 0.0001;\n    const vec2 h = vec2(eps,0);\n    return normalize(vec3(sphereSDF(p + h.xyy, 1.0) - sphereSDF(p - h.xyy, 1.0),\n                          sphereSDF(p + h.yxy, 1.0) - sphereSDF(p - h.yxy, 1.0),\n                          sphereSDF(p + h.yyx, 1.0) - sphereSDF(p - h.yyx, 1.0)));\n}\n\nvec3 raymarch(in vec3 ro, in vec3 rd) {\n    const int maxSteps = 256;\n    float distanceTravelled = 0.0;\n    \n    for (int i = 0; i < maxSteps; ++i) {\n        vec3 p = ro + distanceTravelled * rd;\n        float distance = sphereSDF(p, 1.0);\n        \n        if (distance < 0.001) {\n            vec3 color = vec3(0.0);\n            vec3 light = vec3(0.0, 1.0, -0.5);\n            vec3 normal = calcNormal(p);\n    \n            float diffuse = clamp(dot(normal, light), 0.1, 1.0);\n        \n            return vec3(1.0) * diffuse;\n        }\n        \n        if (distanceTravelled > 100.0) {\n            break;\n        }\n        \n        distanceTravelled += distance;\n    }\n    \n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.0 * gl_FragCoord.xy - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0,0.0,-2.5);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    \n    vec3 color = raymarch(ro, rd);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}