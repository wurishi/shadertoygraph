{"ver":"0.1","info":{"id":"3sK3zy","date":"1571326126","viewed":291,"name":"Infinite House Plan","username":"104","description":"More partitioning goodness","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float lineThickness = 2.5;\nconst float PARTITIONS = 13.;\n\n\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    float t = (iTime+1e2)*.4;\n    vec2 uv = fragCoord/iResolution.xy-.5;\n    vec2 N = uv;\n    vec2 R = iResolution.xy;\n    uv.x *= R.x / R.y;\n    uv.x += t*.2;\n    uv.y += sin(t)*.3;\n    uv.y -= .5;\n    \n    vec2 cellUL = floor(uv);\n    vec2 cellBR = cellUL + 1.;\n    vec2 seed = cellUL;\n    o = vec4(1);\n    for(float i = 1.; i <= PARTITIONS; ++ i) {\n        vec4 h = hash42(seed+1e2*(vec2(cellBR.x, cellUL.y)+10.));\n        vec2 test = abs(cellUL - cellBR);\n        vec2 uv2 = uv;\n        float dl = abs(uv2.x - cellUL.x);\n        dl = min(dl, length(uv2.y - cellUL.y));\n        dl = min(dl, length(uv2.x - cellBR.x));\n        dl = min(dl, length(uv2.y - cellBR.y));\n\n        vec3 col = h.rgb;\n        o.rgb *= smoothstep(0.,lineThickness/max(R.x,R.y),dl);\n        if (h.w < .2)\n            o.rgb *= mix(col, vec3(col.r+col.g+col.b)/3.,.6);\n        vec2 pt = mix(cellUL, cellBR, h.y);\n\n        vec2 p2 = pt - uv;\n        float r = max(fract(p2.x-.5), fract(.5-p2.x));\n        r = max(r, fract(.5-p2.y));\n        r = max(r, fract(p2.y-.5));\n        r = 1.-r;\n        vec2 sz = cellBR - cellUL;\n        if (pow(sz.x * sz.y, .1) < r * 1.5) {\n            break;\n        }\n        vec2 thresh = sin(t*2.*h.xy)*.5+.5;\n        thresh *= h.zw*.3;\n        if (sz.x < thresh.x || sz.y < thresh.y)\n            break;\n        \n        if (uv2.x < pt.x) {// descend into quadrant.\n            if (uv2.y < pt.y) {\n                cellBR = pt.xy;\n            } else {\n              \tcellUL.y = pt.y;\n              \tcellBR.x = pt.x;\n            }\n        } else {\n            if (uv2.y > pt.y) {\n                cellUL = pt.xy;\n            } else {\n                cellUL.x = pt.x;\n                cellBR.y = pt.y;\n            }\n\t    }\n    }\n    \n    o = clamp(o,0.,1.);\n    o = pow(o,o-o+.3);\n    o *= 1.-dot(N,N);\n}\n\n","name":"Image","description":"","type":"image"}]}