{"ver":"0.1","info":{"id":"XsjcDK","date":"1493846105","viewed":100,"name":"diffuse sphere","username":"anclin","description":"diffuse sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["diffusesphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 M(){\n    float aspectRatio = iResolution.x / iResolution.y;\n\tfloat mx = (iMouse.x / iResolution.x - 0.5) * 2.0;\n    float my = (iMouse.y / iResolution.y - 0.5) * 2.0;\n    return vec2(mx,my);\n}\n\nvec3 LightDirection(vec2 xy){\n    float R = 1.0;\n    float sensitivity = 1.0;\n    float x = xy.x * sensitivity;\n    float y = xy.y * sensitivity;\n    float var = R*R - x*x - y*y;\n\tfloat z = sqrt( var );\n    if( var < 0.0 )\n        z = 0.0;\n    return normalize(vec3(x,y,z));  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float R = 0.5;\n    float atten = 1.1;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n    uv -= 0.5;\n    uv.x *= aspectRatio;\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n    float nx = x;\n    float ny = y;\n    float nz = sqrt( R*R - x*x - y*y );\n    vec3 n = vec3(nx,ny,nz);\n    \n    vec3 color = vec3(0);\n    \n    float d = sqrt( dot( uv, uv ) );\n    float mask = d < R ? 1.0 : 0.0;\n    \n    vec3 lightDirection = LightDirection( M() );\n    \n    float diffuse = dot(n,lightDirection);\n\tdiffuse = max(0.0, diffuse) * atten;\n    \n    vec3 lightColor = vec3(0.9, 0.9, 0.7);\n    vec3 ambientColor = vec3(0.11, 0.13, 0.15);\n    color += vec3(lightColor * diffuse + ambientColor);\n    \n    color *= mask;\n    \n    //color = vec3(0.5-nz*1.0);\n    color = vec3(x*x+y*y);\n    \n    fragColor = vec4(color,1);\n    \n    // DEBUG\n\t//fragColor = vec4(n*mask,1);\n\n}","name":"Image","description":"","type":"image"}]}