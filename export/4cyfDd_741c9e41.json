{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// 3D Perlin noise implementation\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\nvec3 fade(vec3 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }\n\nfloat noise(vec3 P) {\n    vec3 i0 = mod289(floor(P));\n    vec3 i1 = mod289(i0 + vec3(1.0));\n    vec3 f0 = fract(P);\n    vec3 f1 = f0 - vec3(1.0);\n    vec3 f = fade(f0);\n    \n    vec4 ix = vec4(i0.x, i1.x, i0.x, i1.x);\n    vec4 iy = vec4(i0.yy, i1.yy);\n    vec4 iz0 = i0.zzzz;\n    vec4 iz1 = i1.zzzz;\n    \n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n    \n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n    \n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n    \n    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n    \n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n    \n    float n000 = dot(g000, f0);\n    float n100 = dot(g100, vec3(f1.x, f0.yz));\n    float n010 = dot(g010, vec3(f0.x, f1.y, f0.z));\n    float n110 = dot(g110, vec3(f1.xy, f0.z));\n    float n001 = dot(g001, vec3(f0.xy, f1.z));\n    float n101 = dot(g101, vec3(f1.x, f0.y, f1.z));\n    float n011 = dot(g011, vec3(f0.x, f1.yz));\n    float n111 = dot(g111, f1);\n    \n    vec3 fade_xyz = fade(f0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n}\n\n// Returns terrain height at given position\nfloat getHeight(vec2 pos) {\n    float height = 9.0;\n    float scale = 1.0;\n    float influence = 1.0;\n    \n    for(int i = 0; i < 5; i++) {\n        height += noise(vec3(pos * scale, 0.0)) * influence;\n        scale *= 2.0;\n        influence *= 0.5;\n    }\n    \n    return height;\n}\n\n// Camera movement\nmat3 getRotationMatrix(vec3 angle) {\n    float sx = sin(angle.x);\n    float cx = cos(angle.x);\n    float sy = sin(angle.y);\n    float cy = cos(angle.y);\n    float sz = sin(angle.z);\n    float cz = cos(angle.z);\n    \n    return mat3(\n        cy * cz, cx * sz + sx * sy * cz, sx * sz - cx * sy * cz,\n        -cy * sz, cx * cz - sx * sy * sz, sx * cz + cx * sy * sz,\n        sy, -sx * cy, cx * cy\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Camera setup\n    float time = iTime * 0.3;\n    vec3 cameraPos = vec3(time * 5.0, 10.0, sin(time) * 2.0);\n    vec3 cameraTarget = cameraPos + vec3(1.0, -0.3, 0.0);\n    vec3 cameraUp = vec3(0.0, 1.0, 0.0);\n    \n    // Camera rotation based on look-at\n    vec3 forward = normalize(cameraTarget - cameraPos);\n    vec3 right = normalize(cross(forward, cameraUp));\n    vec3 up = cross(right, forward);\n    mat3 rotation = mat3(right, up, -forward);\n    \n    // Ray setup\n    vec3 rayDir = rotation * normalize(vec3(uv, 1.0));\n    \n    // Ray marching setup\n    float maxDist = 100.0;\n    float dist = 0.0;\n    float minStep = 0.1;\n    vec3 pos = cameraPos;\n    bool hit = false;\n    vec3 color = vec3(0.6, 0.8, 1.0); // Sky color\n    \n    // Ray march loop\n    for(int i = 0; i < 100; i++) {\n        pos = cameraPos + rayDir * dist;\n        float height = getHeight(pos.xz);\n        \n        if(pos.y < height) {\n            hit = true;\n            break;\n        }\n        \n        dist += max(minStep, (pos.y - height) * 0.5);\n        \n        if(dist > maxDist) break;\n    }\n    \n    if(hit) {\n        // Calculate normal\n        vec2 eps = vec2(0.1, 0.0);\n        vec3 normal = normalize(vec3(\n            getHeight(pos.xz - eps.xy) - getHeight(pos.xz + eps.xy),\n            2.0 * eps.x,\n            getHeight(pos.xz - eps.yx) - getHeight(pos.xz + eps.yx)\n        ));\n        \n        // Lighting\n        vec3 lightDir = normalize(vec3(1.0, 0.8, 0.6));\n        float diffuse = max(0.0, dot(normal, lightDir));\n        \n        // Height-based coloring\n        vec3 baseColor = mix(\n            vec3(0.2, 0.3, 0.1), // Valley color\n            vec3(1.0, 1.0, 1.0), // Peak color\n            smoothstep(0.0, 2.0, getHeight(pos.xz))\n        );\n        \n        // Apply lighting\n        color = baseColor * (diffuse * 0.8 + 0.2);\n        \n        // Add distance fog\n        float fog = 1.0 - exp(-dist * 0.03);\n        color = mix(color, vec3(0.6, 0.8, 1.0), fog);\n    }\n    \n    // Output final color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4cyfDd","date":"1734561294","viewed":17,"name":"falksdflakdf","username":"johnDoesShadersYipee","description":"terrain","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["terrain"],"hasliked":0,"parentid":"","parentname":""}}