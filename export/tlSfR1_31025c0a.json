{"ver":"0.1","info":{"id":"tlSfR1","date":"1598348892","viewed":116,"name":"Cacarisse's","username":"entibo","description":"https://old.reddit.com/r/loadingicon/comments/hnjp3p/kaleidoscopic_prism/","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265\n\nfloat pix;\n#define S(v) smoothstep(-pix, pix, v )\n\nfloat speed = 2.0;\n\n\nfloat diamond(vec2 p, float width, float height) {\n    float m = height/width;\n    return S(height-m*abs(p.x) - abs(p.y));\n}\n\nfloat cacarisse(vec2 p) {\n    float t = cos(iTime*speed);\n    t = sign(t)*pow(abs(t),1.8); // This line slows it down in the \"nested hexagon\" part\n    \n    float v = diamond(p+vec2(t/3.,0.), 1., 1./sqrt(3.));\n    v *= S(-abs(p.x-t/6.)+.5); // Cut-off on each side\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float minres = min(iResolution.x, iResolution.y);\n    vec2 uv = 2.*(fragCoord - .5*iResolution.xy) / minres;    \n    \n    uv = vec2(-uv.y, uv.x); // Rotate 90Â°\n    \n    float v = 0.;\n    for(float k=0.; k < 4.; k++) {\n        float dir = mod(k,2.)==0. ? 1. : -1.;\n        float scale = pow(2., k); // Size is halved with each iteration\n        pix = 2.*scale/minres; // Adjust the anti-aliasing\n        vec2 p = uv * scale * vec2(dir, 1.); // Scale and mirror\n        v += dir*cacarisse(p);\n    } \n    \n    fragColor = vec4(v);\n}","name":"Image","description":"","type":"image"}]}