{"ver":"0.1","info":{"id":"DsyyRd","date":"1696437347","viewed":106,"name":"CRT by willeves07","username":"willeves07","description":"A simple crt monitor shader","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["simple","chroma","chromaticaberration","crt","fisheye","monitor","grain","filmgrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// layer one is film grain\n// layer two is chromatic aberration\n// layer three is fisheye effect\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fish_intensity = 1.2;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    float strength = fish_intensity * 0.03;\n    \n    vec2 intensity = vec2(strength * aspectRatio,\n                          strength * aspectRatio);\n\n    vec2 coords = uv;\n    coords = (coords - 0.5) * 2.0;\t\t\n\t\t\n    vec2 realCoordOffs;\n    realCoordOffs.x = (1.0 - coords.y * coords.y) * intensity.y * (coords.x); \n    realCoordOffs.y = (1.0 - coords.x * coords.x) * intensity.x * (coords.y);\n\t\n    vec2 fuv = (uv - realCoordOffs);\n    fuv.y = 1.0 - fuv.y;\n    \n    fuv *= 1.15;\n    fuv -= vec2(0.075, 0.075);\n    \n    if(fuv.x < 0.0 || fuv.x > 1.0 || fuv.y < 0.0 || fuv.y > 1.0){\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }else{\n        vec4 color = texture(iChannel0, fuv);\t \n    \n        fragColor = vec4(color);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    int sampleCount = 50;\n    float blur = 0.5;\n    float strength = 0.15;\n    \n    float falloff = 1.0 / strength;\n\n    vec2 destCoord = fragCoord.xy / iResolution.xy;\n\n    vec2 direction = normalize(destCoord - 0.5); \n    vec2 velocity = direction * blur * pow(length(destCoord - 0.5), falloff);\n\tfloat inverseSampleCount = 1.0 / float(sampleCount); \n    \n    mat3x2 increments = mat3x2(velocity * 1.0 * inverseSampleCount,\n                               velocity * 2.0 * inverseSampleCount,\n                               velocity * 4.0 * inverseSampleCount);\n\n    vec3 accumulator = vec3(0);\n    mat3x2 offsets = mat3x2(0); \n    \n    for (int i = 0; i < sampleCount; i++) {\n        accumulator.r += texture(iChannel0, destCoord + offsets[0]).r; \n        accumulator.g += texture(iChannel0, destCoord + offsets[1]).g; \n        accumulator.b += texture(iChannel0, destCoord + offsets[2]).b; \n        \n        offsets -= increments;\n    }\n\n\tfragColor = vec4(accumulator / float(sampleCount), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float strength = 0.2;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Calculate noise and sample texture\n    float mdf = strength; // increase for noise amount \n    vec4 noise = vec4(\n        rand(vec3(iTime*3.0, uv.x, uv.y)),\n        rand(vec3(iTime*1.0, uv.y, uv.x)),\n        rand(vec3(iTime*0.3, cos(uv.x), uv.y)),\n        1.0\n    );\n    vec4 tex = texture(iChannel0, vec2(uv.x, 1.0 - uv.y));\n    \n    vec4 col = tex - (noise * mdf);\n\n    // Output to screen\n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"}]}