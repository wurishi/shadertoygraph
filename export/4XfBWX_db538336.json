{"ver":"0.1","info":{"id":"4XfBWX","date":"1729023403","viewed":41,"name":"Chromatic Squares","username":"8InfinityTaco8","description":"I used the \"An introduction to Shader Art Coding\" tutorial by Kishimisu.\n\nhttps://youtu.be/f4s1h2YETNY?si=7kUQ8l584xKV_xt0","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Customizable color palette to scroll through\nvec3 palette(float t){\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.500, 0.500, 0.500); \n    vec3 c = vec3(1.000, 1.000, 1.000);\n    vec3 d = vec3(-0.500, 0.333, 0.667);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// Signed distance function for a square\nfloat sdSquare(vec2 p, float size) {\n    // Compute the distance to a square (half-size is used here)\n    vec2 d = abs(p) - size;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n\n    // Define the final color\n    vec3 finalColor = vec3(1.0); // Background color (white)\n\n    // Loop to generate a grid of squares\n    for (float i = 0.0; i < 4.0; i++) {\n        // Repeat the UV coordinates to create a grid pattern\n        uv = fract(uv * 2.0) - 0.5;\n\n        // Size of the square (adjust this value to change the square size)\n        float size = 0.3;\n\n        // Distance to the square (signed distance function for a square)\n        float d = sdSquare(uv, size);\n\n        // Smooth edge for anti-aliasing\n        float edge = 0.02;\n        float squareShape = smoothstep(edge, 0.0, d);\n\n        // Color the square based on distance\n        vec3 col = palette(length(uv0) + i * 0.4 + iTime * 0.4);\n        \n        // Apply the square shape to the color\n        finalColor = mix(finalColor, col, squareShape);\n    }\n\n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}