{"ver":"0.1","info":{"id":"NtGyWK","date":"1662181872","viewed":110,"name":"The Hercules Cluster","username":"okro","description":"Trying to capture the experience of seeing the Hercules Cluster (M13)  through my 6\" Dobsonian.  Mouse Y controls light pollution level. \n\nI tried to make the stars move, but the subpixel movement looked pretty bad.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["sky","stars","astronomy","hercules","m13"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43752.5453123);\n}\n\n\nfloat lens(in vec2 uv) \n{\n    return smoothstep(0.7, 0.58, distance(uv, vec2(0.0)));\n}\n\n\nfloat glowField(in vec2 uv) \n{\n    return smoothstep(0.04, 0.0, distance(uv, vec2(0.0)));\n}\n\n\nvec3 stars(in vec2 uv, in float pollution) \n{\n    float rnd = pow(random( uv ), max(60.0, pollution*3000.0));\n    return vec3(rnd);\n}\n\nvec3 glow(in vec2 uv)\n{\n    vec3 glowCol = vec3(0.3, 0.3, 1.0);\n    float glowIntensity = 0.25;\n   \n    \n    return glowCol * glowIntensity * glowField(uv);\n}\n\nfloat clusterField(in vec2 uv)\n{\n    return smoothstep(0.1, 0.0, distance(uv, vec2(0.0)));\n}\n\nvec3 cluster(in vec2 uv)\n{\n    vec3 clusterCol = vec3(0.4, 0.5, 1.0);\n    vec2 dx = vec2(uv.x + iTime*.0000002, uv.y);\n    return clusterCol * pow(random(dx), 4.0) *clusterField(uv);\n}\n\nvec3 m13(in vec2 uv, in float pollution) \n{\n    return pow(1.0-pollution, 14.0)*(glow(uv) + cluster(uv));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pollution = abs(iMouse.y*.0005);\n    const vec3 pollutionCol = vec3(1.0, 1.0, 0.5);\n\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n\tuv.x *= iResolution.x/iResolution.y; //fix aspect ratio\n    \n    vec3 color = stars(uv, pollution) + m13(uv, pollution);\n     \n  \n    color.rgb = max(pollutionCol*pollution, color);\n       \n\tfragColor = vec4(color*lens(uv), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43752.5453123);\n}\n\nvec3 stars(in vec2 uv) \n{\n   float rnd = pow(random( uv ), 60.0);\n   return vec3(rnd);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n\tuv.x *= iResolution.x/iResolution.y; //fix aspect ratio\n    \n    fragColor = vec4(stars(uv),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}