{"ver":"0.1","info":{"id":"3dd3zM","date":"1568099240","viewed":91,"name":"simple Racetrack-Shaped Rect","username":"qeas11","description":"A simple Racetrack-Shaped Rectrectangle, the implementation of the method is very clumsy, hope to get your advice.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat disk(vec2 r, vec2 center, float radius) {\n\treturn 1.0 - smoothstep( radius-0.003, radius+0.0, length(r-center));\n}\n\nfloat rectangle(vec2 r, vec2 topLeft, vec2 bottomRight) {\n\tfloat ret;\n\tfloat d = 0.001;\n\tret = smoothstep(topLeft.x-d, topLeft.x+d, r.x);\n\tret *= smoothstep(topLeft.y-d, topLeft.y+d, r.y);\n\tret *= 1.0 - smoothstep(bottomRight.y-d, bottomRight.y+d, r.y);\n\tret *= 1.0 - smoothstep(bottomRight.x-d, bottomRight.x+d, r.x);\n\treturn ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = vec2(fragCoord.xy / iResolution.xy);\n\tvec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\tfloat xMax = iResolution.x/iResolution.y;\t\n\t\n\tvec3 bgCol = vec3(1.0);\n\tvec3 col = vec3(0.216, 0.471, 0.698);\n\tvec3 ret;\n\tvec2 q;\n\tfloat angle;\n\tangle = 0.2*PI;\n\tq.x =   cos(angle)*r.x + sin(angle)*r.y;\n\tq.y = - sin(angle)*r.x + cos(angle)*r.y;\n\t\n\tret = bgCol;\n\tret = mix(ret, col, disk(r, vec2(0.65, 0.0), 0.36));\n\tret = mix(ret, col, disk(r, vec2(-0.65, 0.0), 0.36));\n\tret = mix(ret, col, rectangle(r, vec2(-0.645, -0.359), vec2(0.645, 0.359)) );\t\n\n\t\t\n\tvec3 pixel = ret;\n\tfragColor = vec4(pixel, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}