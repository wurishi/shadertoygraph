{"ver":"0.1","info":{"id":"WlcBR2","date":"1613043303","viewed":203,"name":"IT312G-Galaxy2","username":"pyknic","description":"Attempt at creating a galaxy in GLSL","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["galaxy"],"hasliked":0,"parentid":"3lcfzj","parentname":"IT312G-Galaxy"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float ArmCount = 5.;\nconst float ArmCurvature = 1.4f;\nconst float StarDensity = 30.;\nconst float StarSize = .2;\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n \nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n \nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n \nfloat permutes(float vx)\n{\n      return mod((34.0 * vx + 1.0) * vx, 289.0);      \n}\n \nfloat snoise(vec3 v) { \n      const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n      const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n      \n      // First corner\n      vec3 i  = floor(v + dot(v, C.yyy) );\n      vec3 x0 =   v - i + dot(i, C.xxx) ;\n      \n      // Other corners\n      vec3 g = step(x0.yzx, x0.xyz);\n      vec3 l = 1.0 - g;\n      vec3 i1 = min( g.xyz, l.zxy );\n      vec3 i2 = max( g.xyz, l.zxy );\n      \n      //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n      //   x1 = x0 - i1  + 1.0 * C.xxx;\n      //   x2 = x0 - i2  + 2.0 * C.xxx;\n      //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n      vec3 x1 = x0 - i1 + C.xxx;\n      vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n      vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n      \n      // Permutations\n      i = mod289(i); \n      vec4 p = permute( permute( permute( \n                i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n              + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n              + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n      \n      // Gradients: 7x7 points over a square, mapped onto an octahedron.\n      // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n      float n_ = 0.142857142857; // 1.0/7.0\n      vec3  ns = n_ * D.wyz - D.xzx;\n      \n      vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n      \n      vec4 x_ = floor(j * ns.z);\n      vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n      \n      vec4 x = x_ *ns.x + ns.yyyy;\n      vec4 y = y_ *ns.x + ns.yyyy;\n      vec4 h = 1.0 - abs(x) - abs(y);\n      \n      vec4 b0 = vec4( x.xy, y.xy );\n      vec4 b1 = vec4( x.zw, y.zw );\n      \n      //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n      //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n      vec4 s0 = floor(b0)*2.0 + 1.0;\n      vec4 s1 = floor(b1)*2.0 + 1.0;\n      vec4 sh = -step(h, vec4(0.0));\n      \n      vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n      vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n      \n      vec3 p0 = vec3(a0.xy,h.x);\n      vec3 p1 = vec3(a0.zw,h.y);\n      vec3 p2 = vec3(a1.xy,h.z);\n      vec3 p3 = vec3(a1.zw,h.w);\n      \n      //Normalise gradients\n      vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n      p0 *= norm.x;\n      p1 *= norm.y;\n      p2 *= norm.z;\n      p3 *= norm.w;\n      \n      // Mix final noise value\n      vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n      m = m * m;\n      return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n \nfloat fBm (vec3 P, float octaves, float lacunarity, float gain)\n{\n  float amp = 1.0;\n  float sum = 0.0;\n  float i;\n  \n  for (i = 0.0;  i < octaves;  i += 1.0) {\n    sum += amp * snoise (P);\n    amp *= gain;\n    P *= lacunarity;\n  }\n  return sum;\n}\n \nfloat Turbulence (vec3 P, float octaves, float lacunarity, float gain)\n{\n  float amp = 1.0;\n  float sum = 0.0;\n  float i;\n  \n  for (i = 0.0;  i < octaves;  i += 1.0) {\n    sum += abs(amp * snoise (P));\n    amp *= gain;\n    P *= lacunarity;\n  }\n  return sum;\n}\n\nuniform vec4 mainColor;\n\nvec3 colorAtTime(float armMask, vec2 polar, float t) {\n    float time0 = polar.y + t;\n    vec3 noiseCoord = 0.4 * vec3(\n        cos(polar.x) * time0, \n        sin(polar.x) * time0,\n        iTime * .05\n    );\n    \n    vec3 color1 = vec3(47., 110., 168.)/255.;\n    float layer1 = abs(fBm(noiseCoord * 3., 6., 2.1, 0.5));\n    vec3 color2 = vec3(179., 97., 199.)/255.;\n    float layer2 = pow(Turbulence(noiseCoord * 4., 6., 2.1, 0.45)*.6, 1.5);\n    vec3 col = layer1 * color1 + layer2 * color2;\n    return col * armMask;\n}\n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\n\n\n// Compound versions of the hashing algorithm I whipped together.\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\nuint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\n\n\n\n// Construct a float with half-open range [0:1] using low 23 bits.\n// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\n\n\n\n// Pseudo-random value in half-open range [0:1].\nfloat random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\nfloat random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n\nvec2 GetCellCenter(vec2 uv) {\n    return vec2(\n        mod(mod(uv, 1.) * StarDensity, 1.) * 2. - 1.\n    );\n}\n\nvec2 RandomCellOffset(vec2 uv) {\n    vec3 grid = vec3(floor(uv*StarDensity)/StarDensity, 0.);\n    vec3 gridNoise = vec3(\n        random(grid+vec3(20., 50., -10.)),\n        random(grid+vec3(10., -30., -26.)),\n        random(grid+vec3(-78., -29., 50.))\n    );\n    \n    return normalize(gridNoise.xy * 2. - 1.) * \n        clamp(0., 1., gridNoise.z);\n}\n\nvec2 RandomActualCellOffset(vec2 uv) {\n    float d = 1./StarDensity;\n    vec2 center = GetCellCenter(uv);\n    vec2 c0 = RandomCellOffset(uv);\n    for (int i = 0; i < 9; i++) {\n        int dx = i % 3 - 1; // -1, 0 or 1\n        int dy = i / 3 - 1; // -1, 0 or 1\n        vec2 offset = vec2(dx, dy);\n        vec2 c1 = RandomCellOffset(uv + d*offset) + 2.*offset;\n        if (distance(center, c0) > distance(center, c1)) {\n            c0 = c1;\n        }\n    }\n    return c0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // -1 to 1\n    //vec2 uv = 2.0 * ((fragCoord + vec2(0.0, iResolution.x*.20))/iResolution.x - .5);\n    \n    vec2 uv = fragCoord/iResolution.x + vec2(0., .15);\n    \n    \n    vec2 backUV = uv;\n    {\n        // We center texture coordinates around 0.0\n        // Perspective plane equation \n        float pcenter=0.1;\n        float pmult=1.6; \n        float vc=(uv.y-pcenter)*pmult;\n        float uu=((uv.x-0.5)*1.0)/(1.0-vc);\n        float vv=((vc-0.6)/(1.0-vc)); \n        uv=vec2(uu,vv);\n    }\n    \n    vec2 middle = (uv + .5) * 2. - 1.;\n    //backUV += normalize(middle) * \n    //    (.2*pow(length(middle), .3)) * .5;\n    \n    \n    \n    \n    vec2 blackHoleUV = uv * .125;\n    \n    float yShift = max(0.0, 1.8 - pow(length(blackHoleUV),0.2));\n    blackHoleUV.y += yShift*.4;\n    \n    vec2 blackholePolar = vec2(\n        atan(blackHoleUV.y,blackHoleUV.x),\n        length(blackHoleUV)\n    );\n    \n    //uv.y += yShift;\n    \n    vec2 polar = vec2(\n        atan(uv.y, uv.x), // The angle (radians)\n        length(uv)        // The distance (0 - sqrt(2))\n    );\n    \n    // Bend the arms\n    float curveFactor = pow(polar.y, 0.7) * ArmCurvature;\n    curveFactor -= pow(max(0.0, 1.3 - length(uv)*2.),10.);\n    polar.x += curveFactor;\n    \n    blackholePolar.x += pow(blackholePolar.y, 0.7) * ArmCurvature;\n    blackholePolar.x += curveFactor;\n    \n    // Masks out the arms (0 - 1)\n    float armU = mod(polar.x*ArmCount, 6.28)/6.28; // 0 to 1\n    armU = armU * 2. - 1.;                   // -1 to 1\n    armU = abs(armU);                        // 0 to 1\n    armU = smoothstep(0.0, 1.0, armU);       // 0 to 1\n    \n    float barmU = mod(blackholePolar.x*ArmCount, 6.28)/6.28; // 0 to 1\n    barmU = barmU * 2. - 1.;                   // -1 to 1\n    barmU = abs(barmU);                        // 0 to 1\n    barmU = smoothstep(0.0, 1.0, barmU);       // 0 to 1\n\n    // Distance along the arm (0 - inf)\n    float armV = curveFactor * armU;\n\n    // Which arm? (0.0, 0.25, 0.5, 0.75, 1.0)\n    float armW = floor(\n        mod(polar.x+3.14, 6.28)*ArmCount / 6.28\n    ) / (ArmCount - 1.0);\n    \n    // Noise Coordinate\n    float time0 = polar.y/10.0 + mod(iTime, 5.0) / 5.0;\n    float time1 = polar.y/10.0 + mod(iTime + 2.5, 5.0) / 5.0;\n    float t     = abs(mod(iTime, 5.0) * 0.4 - 1.0);\n    vec3 col0 = colorAtTime(armU, polar, time0);\n    vec3 col1 = colorAtTime(armU, polar, time1);\n    vec3 col = mix(col0, col1, t);\n    \n    // Noise Coordinate\n    float btime0 = blackholePolar.y/10.0 + mod(iTime, 5.0) / 5.0;\n    float btime1 = blackholePolar.y/10.0 + mod(iTime + 2.5, 5.0) / 5.0;\n    vec3 bcol0 = colorAtTime(barmU, blackholePolar, btime0);\n    vec3 bcol1 = colorAtTime(barmU, blackholePolar, btime1);\n    vec3 bcol = mix(bcol0, bcol1, t);\n    \n    float hole = clamp(pow(length(uv)*5.,3.), 0.0, 1.0);\n    float light = clamp(pow(1.0-length(uv),3.), 0.0, 1.0);\n    \n    float galaxyMask = clamp(1.0 - length(uv)*0.3, 0.0, 1.0);\n    vec3 galaxy = galaxyMask * clamp( \n        vec3(pow(hole,1.3)*(pow(armU,1.5)*light+col)),\n        vec3(0.0), vec3(1.0));\n        \n    \n    \n    float backNoise0 = pow(abs(fBm(vec3(backUV*3., -1.),\n        6., 2.4, 0.4)), 1.5);\n    float backNoise1 = clamp(abs(Turbulence(vec3(backUV, 5.),\n        7., 2.2, 0.4)-0.3), 0., 1.);   \n    float backNoise2 = clamp(1.0-pow(abs(Turbulence(vec3(backUV*3., -1.),\n        6., 2.4, 0.4)), 0.5), 0.0, 1.0);\n        \n    vec3 backCol = \n        //vec3(39., 78., 145.)/255. * backNoise0 * .7 +\n        vec3(121., 34., 168.)/255. * backNoise1 * 0.4 +\n        vec3(49., 187., 212.)/255. * backNoise2 * .7\n    ;\n    \n    fragColor = vec4(backCol + galaxy, 1.0);\n    \n    \n    \n    vec2 gridNoise = RandomActualCellOffset(backUV);\n    \n    vec2 cellCenter = GetCellCenter(backUV);\n    \n    float starSizeT = abs(2.*mod(iTime*.1+random(RandomCellOffset(backUV)), 1.0)-1.);\n    float starSize = starSizeT * StarSize + 0.001;\n    float stars = (1.0/starSize)*(clamp(1.-distance(gridNoise, cellCenter),1.-starSize,1.)-(1.-starSize));\n    \n    stars = pow(stars, 5.);\n    \n    fragColor += vec4(vec3(stars), 1.);\n    \n    //fragColor = vec4(vec3(vec2(stars), 0.), 1.);\n    //fragColor = vec4(vec3(gridNoise.xy, 0.), 1.);\n}","name":"Image","description":"","type":"image"}]}