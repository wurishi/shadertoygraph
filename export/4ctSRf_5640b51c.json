{"ver":"0.1","info":{"id":"4ctSRf","date":"1714310941","viewed":14,"name":"Vakidioot 3","username":"rooby","description":"Vakidioot","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["vakidioot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SURFACE_DIST 0.1\n\nvec3 LIGHT_DIR = normalize(vec3(3., 8., -7.));\nvec3 MAT_COL = vec3(28., 117., 138.) / 255.;\nvec3 BG_COL = vec3(0.1);\n\nfloat MAX_DIST = 100.;\nfloat MIN_DIST = 0.1;\nint MAX_STEPS = 100;\n\nfloat sdfScene(vec3 pos)\n{\n    float d = length(pos - vec3(0., 0., 5.)) - 1.;\n    d = min(d, 2. + pos.y);\n\n    return d;\n}\n\nvec3 getNormal(vec3 pos)\n{\n    vec2 u = vec2(0.0001, 0.);\n\n    return normalize(vec3(\n        sdfScene(pos + u.xyy) - sdfScene(pos - u.xyy),\n        sdfScene(pos + u.yxy) - sdfScene(pos - u.yxy),\n        sdfScene(pos + u.yyx) - sdfScene(pos - u.yyx)\n    ));\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDir)\n{\n    float depth = 0.;\n    \n    for (int i=0; i<MAX_STEPS; i++)\n    {\n        vec3 pos = rayOrigin + depth * rayDir;\n        float dist = sdfScene(pos);\n        depth += dist;\n        \n        if (depth > MAX_DIST)\n            break;\n        else if (abs(dist) < MIN_DIST)\n            return depth;\n    }\n    \n    return -1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.*fragCoord - iResolution.xy)/ iResolution.x;\n\n    // Position and direction of camera\n    vec3 rayOrigin = vec3(0.);\n    vec3 rayDir = normalize(vec3(uv, 1.));\n\n    // Compute distance to scene using ray marching\n    float depth = rayMarch(rayOrigin, rayDir);\n    \n    vec3 col = BG_COL;\n    if (depth > 0.)\n    {\n        vec3 pos = rayOrigin + depth * rayDir;\n        vec3 normal = getNormal(pos);\n        \n        float brightness = max(dot(normal, LIGHT_DIR), 0.); \n        float d = rayMarch(pos + normal*SURFACE_DIST, LIGHT_DIR);\n        if (d > 0.)\n            brightness *= 0.1;\n        \n        col = brightness * MAT_COL;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}