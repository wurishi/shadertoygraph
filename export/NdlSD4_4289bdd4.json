{"ver":"0.1","info":{"id":"NdlSD4","date":"1618701392","viewed":80,"name":"321_Kovalenko_v5v6","username":"kovalenko_anastasia","description":"Glass icosahedron with water landscape.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0.8, 1.0, -8);\n\nconst vec3 LIGHT1_POS = vec3(-4.5, 1.5, 2);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 0);\n\nconst vec3 LIGHT2_POS = vec3(2.5, 0.5, 0);\nconst float LIGHT2_RADIUS = 0.75;\nconst vec3 LIGHT2_COLOR = vec3(1, 0.5, 1);\nconst vec3 BASE = vec3(-0.5, 0, -0.5);\n\nconst vec3 WATER_COLOR = vec3(0.5, 0.8, 1);\nvec3 randDir;\n\nvec3 VERT[12] = vec3[12](\nvec3(0.0, 0.0, 0.0),\nvec3(1.0, 0.0, 0.0),\nvec3(0.5, 0.87, 0.0),\nvec3(0.5, -0.65, 0.58),\nvec3(1.31, 0.76, 0.58),\nvec3(-0.31, 0.76, 0.58),\nvec3(-0.31, -0.18, 0.93),\nvec3(1.31, -0.18, 0.93),\nvec3(0.5, 1.22, 0.93),\nvec3(0.5, -0.29, 1.51),\nvec3(1.0, 0.58, 1.51),\nvec3(0.0, 0.58, 1.51)\n);\n\nint FACES[20*3] = int [20*3](\n0, 1, 2,\n0, 1, 3,\n0, 2, 5, \n0, 3, 6, \n0, 5, 6,\n1, 2, 4,\n1, 3, 7,\n1, 4, 7,\n2, 4, 8, \n2, 5, 8,\n3, 6, 9, \n3, 7, 9, \n4, 7, 10,\n4, 8, 10,\n5, 6, 11,\n5, 8, 11,\n6, 9, 11,\n7, 9, 10,\n8, 10, 11,\n9, 10, 11\n);\n\n\nfloat findDist(vec3 pos, vec3 dir, vec3 vert1, vec3 vert2, vec3 vert3) {\n    vec3 dif = vert1 - pos;\n    vec3 d1 = vert2 - vert1;\n    vec3 d2 = vert3 - vert1;\n    float c1 = d1.y * d2.z - d1.z * d2.y;\n    float c2 = d2.x * d1.z - d1.x * d2.z;\n    float c3 = d1.x * d2.y - d2.x * d1.y;\n    float a = c1 * dir.x + c2 * dir.y + c3 * dir.z;\n    float b = c1 * dif.x + c2 * dif.y + c3 * dif.z;\n    return b / a;\n}\n\nbool triangCheck(vec3 point, vec3 vert1, vec3 vert2, vec3 vert3) {\n    vec3 d = vert2 - vert1;\n    vec3 p = point - vert1;\n    vec3 n = normalize(cross(vert2 - vert1, vert3 - vert1));\n    vec3 n1 = normalize(cross(d, p));\n    d = vert3 - vert2;\n    p = point - vert2;\n    vec3 n2 = normalize(cross(d, p));\n    d = vert1 - vert3;\n    p = point - vert3;\n    vec3 n3 = normalize(cross(d, p));\n    if (dot(n1 - n, n1 - n) > 0.1)\n        return false;\n    if (dot(n2 - n, n2 - n) > 0.1)\n        return false;\n    if (dot(n3 - n, n3 - n) > 0.1)\n        return false;\n    return true;\n}\n\nfloat traceIcos(vec3 pos, vec3 dir, out vec3 normal) {\n    float res = INF;\n    for (int i = 0; i < 20; ++i) {\n        vec3 vert1 = (VERT[FACES[i * 3]] + BASE) * 1.5;\n        vec3 vert2 = (VERT[FACES[i * 3 + 1]] + BASE) * 1.5;\n        vec3 vert3 = (VERT[FACES[i * 3 + 2]] + BASE) * 1.5;\n        float t = findDist(pos, dir, vert1, vert2, vert3);\n        if (triangCheck(pos + t * dir, vert1, vert2, vert3) == true) {\n            normal = normalize(cross(vert2 - vert1, vert3 - vert1));\n            if (dot(normal, dir) < 0.0) \n                normal = -normal;\n            if (t < res) {\n                res = t;\n            }\n        }\n    }\n    if (res > 0.0)\n        return res;\n    return INF;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-0.8 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.0;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -0.8) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.3 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = pos + t * dir;\n    if (dot(worldPos.xz, worldPos.xz) >= 70.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 10.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS+ randDir * LIGHT2_RADIUS) ? 0.0 : 12.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,447.488483,45.5432) )) * 898258.5453);\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) \n{\n    if (dot(v, normal) < 0.0) normal = -normal;\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) return reflect(v, normal);\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 2)), rand(float(iFrame + 20)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy + (randVals.xy - 0.5) * 1.3) / iResolution.x; \n    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 curDir = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 SPH_POS = vec3(0.0, 0.5, 0) + vec3(0, 1, 0) * randVals.x * 0.2;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const int WATER = 4;\n    \n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float nEnter = AIR_N;\n    \n    vec3 curPos = CAMERA_POS;\n    \n    float mult = 1.0;\n    \n    for (int i = 0; i < 20; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = curPos + t * curDir;\n            color = texture(iChannel0, worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 icNorm;\n        float icosT = traceIcos(curPos, curDir, icNorm);\n        if (icosT < t) {\n            t = icosT;\n            if (randVals.y * 0.5 < GLASS_R * 7.0) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n            }\n            normal = icNorm;\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = curPos + t * curDir;\n            color = texture(iChannel0, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        vec3 sphNorm;\n        float sphT = traceSphere(curPos - SPH_POS, curDir, 0.7, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            vec3 worldPos = curPos + t * curDir;\n            materialType = WATER;\n            fragColor.rgb = 0.4*WATER_COLOR + texture(iChannel2, worldPos.xy * worldPos.y).rgb;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-4;\n                n1 = nEnter;\n            } \n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float PI = 3.14159265;\nconst float MAX_RAYMARCH_DIST = 150.0;\nconst float MIN_RAYMARCH_DELTA = 0.00015; \nconst float GRADIENT_DELTA = 0.015;\nfloat waveHeight1 = 0.005;\nfloat waveHeight2 = 0.004;\nfloat waveHeight3 = 0.001;\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187, \n                      0.366025403784439,  \n                     -0.577350269189626, \n                      0.024390243902439);\n\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n  i = mod289(i); \n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat map(vec3 p) {\n\treturn p.y + (0.5 + waveHeight1 + waveHeight2 + waveHeight3) \n\t\t+ snoise(vec2(p.x + iTime * 0.4, p.z + iTime * 0.6)) * waveHeight1\n\t\t+ snoise(vec2(p.x * 1.6 - iTime * 0.4, p.z * 1.7 - iTime * 0.6)) * waveHeight2\n\t  \t+ snoise(vec2(p.x * 6.6 - iTime * 1.0, p.z * 2.7 + iTime * 1.176)) * waveHeight3;\n}\n\nvec3 gradientNormalFast(vec3 p, float map_p) {\n    return normalize(vec3(\n        map_p - map(p - vec3(GRADIENT_DELTA, 0, 0)),\n        map_p - map(p - vec3(0, GRADIENT_DELTA, 0)),\n        map_p - map(p - vec3(0, 0, GRADIENT_DELTA))));\n}\n\nfloat intersect(vec3 p, vec3 ray_dir, out float map_p, out int iterations) {\n\titerations = 0;\n\tif (ray_dir.y >= 0.0) { return -1.0; } \n\t\n\tfloat distMin = (- 0.5 - p.y) / ray_dir.y;\n\tfloat distMid = distMin;\n\tfor (int i = 0; i < 50; i++) {\n\t\tdistMid += max(0.05 + float(i) * 0.002, map_p);\n\t\tmap_p = map(p + ray_dir * distMid);\n\t\tif (map_p > 0.0) { \n\t\t\tdistMin = distMid + map_p;\n\t\t} else { \n\t\t\tfloat distMax = distMid + map_p;\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tdistMid = distMin + (distMax - distMin) / 2.0;\n\t\t\t\tmap_p = map(p + ray_dir * distMid);\n\t\t\t\tif (abs(map_p) < MIN_RAYMARCH_DELTA) return distMid;\n\t\t\t\tif (map_p > 0.0) {\n\t\t\t\t\tdistMin = distMid + map_p;\n\t\t\t\t} else {\n\t\t\t\t\tdistMax = distMid + map_p;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn distMid;\n\t\t}\n\t}\n\treturn distMin;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat waveHeight = cos(0.03) * 10.0 + 50.6;\n    waveHeight1 *= waveHeight;\n\twaveHeight2 *= waveHeight;\n\twaveHeight3 *= waveHeight;\n\t\n\tvec2 position = vec2((fragCoord.x - iResolution.x / 2.0) / iResolution.y, (fragCoord.y - iResolution.y / 2.0) / iResolution.y);\n\tvec3 ray_start = vec3(0, 0.2, -2);\n\tvec3 ray_dir = normalize(vec3(position,0) - ray_start);\n\t\n\tray_start.y = cos(0.5) * 0.2 - 0.25 + sin(2.0) * 0.05;\n    \n\tconst float dayspeed = 0.04;\n    float middayperc = 0.1;\n\t\n\tfloat subtime = -0.10;\n    vec3 light1_pos = vec3(0.0, middayperc * 200.0, cos(subtime * dayspeed) * 200.0);\n    float sunperc = pow(max(0.0, min(dot(ray_dir, normalize(light1_pos)), 1.0)), 190.0 + max(0.0,light1_pos.y * 4.3));\n\tvec3 suncolor = (1.0 - max(0.0, middayperc)) * vec3(1.5, 1.2, middayperc + 0.5) + max(0.0, middayperc) * vec3(1.0, 1.0, 1.0) * 4.0;\n\tvec3 skycolor = vec3(middayperc + 0.8, middayperc + 0.7, middayperc + 0.5);\n\tvec3 skycolor_now = suncolor * sunperc + (skycolor * (middayperc * 1.6 + 0.5)) * (1.0 - sunperc);\n\tvec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n\tfloat map_p;\n\tint iterations;\n\tfloat dist = intersect(ray_start, ray_dir, map_p, iterations);\n\tif (dist > 0.0) {\n\t\tvec3 p = ray_start + ray_dir * dist;\n\t\tvec3 light1_dir = normalize(light1_pos - p);\n        \tvec3 n = gradientNormalFast(p, map_p);\n\t\tvec3 ambient = skycolor_now * 0.1;\n        \tvec3 diffuse1 = vec3(1.1, 1.1, 0.6) * max(0.0, dot(light1_dir, n)  * 2.8);\n\t\tvec3 r = reflect(light1_dir, n);\n\t\tvec3 specular1 = vec3(1.5, 1.2, 0.6) * (0.8 * pow(max(0.0, dot(r, ray_dir)), 200.0));\t    \n\t\tfloat fog = min(max(p.z * 0.07, 0.0), 1.0);\n        \tcolor.rgb = (vec3(0.6,0.6,1.0) * diffuse1 + specular1 + ambient)  * (1.0 - fog) + skycolor_now * fog;\n    \t} else {\n        \tcolor.rgb = skycolor_now.rgb;\n    \t}\n\tfragColor = color;\n}","name":"Buffer C","description":"","type":"buffer"}]}