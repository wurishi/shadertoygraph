{"ver":"0.1","info":{"id":"Wt2cW1","date":"1594262100","viewed":124,"name":" PhasorNoise","username":"treize","description":"MyNodeEditor Shader Function , PhasorNoise","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float M_PI =acos(-1.0);\n\nint morton(int x, int y)\n{\n  int z = 0;\n  for (int i = 0 ; i < 32* 4 ; i++) \n  {\n    z |= ((x & (1 << i)) << i) | ((y & (1 << i)) << (i + 1));\n  }\n  return z;\n}\nvec2 phasor(vec2 x, float f, float b, float o, float phi)\n{\n    float a = exp(-M_PI * (b * b) * ((x.x * x.x) + (x.y * x.y))),\n    \t  s = sin (2.0* M_PI * f  * (x.x*cos(o) + x.y*sin(o))+phi),\n    \t  c = cos (2.0* M_PI * f  * (x.x*cos(o) + x.y*sin(o))+phi);\n    return vec2(a*c,a*s);\n}\n\nfloat uni_0_1(inout int xx) \n{\n    int N = 15487469;\n    xx *= 3039177861;\n    xx %=  N;\n    return  float(xx) / float(N);\n}\nfloat uni(inout int xx,float min, float max)\n{\n    float uni_0_1_= uni_0_1(xx);\n    return min + (uni_0_1_* (max - min));\n}\n\nvec2 cell(ivec2 ij, vec2 uv,float _kr,float f, float b, float o)\n{\n\tint s= morton(ij.x,ij.y) + 333;\n\ts = s==0? 1: s +2;\n\tint x=s,\n        impulse  =0,\n        nImpulse = 16;\n\tfloat  cellsz = 2.0 * _kr;\n\tvec2 noise;\n\twhile (impulse <= nImpulse)\n\t{\n\t\tvec2 impulse_centre = vec2(uni_0_1(x),uni_0_1(x));\n\t\tvec2 d = (uv - impulse_centre) *cellsz;\n\t\tfloat rp = uni(x,0.0,2.0*M_PI);\n\t\tnoise += phasor(d, f, b ,o,rp );\n\t\timpulse++;\n\t}\n\treturn noise;\n}\nvec2 eval_noise(vec2 uv,float kr, float f, float b, float o)\n{   \n\n\tfloat cellsz = kr*2.0;\n\tvec2 _ij = uv/cellsz;\n    ivec2 ij = ivec2(_ij);\n    vec2 fij = _ij - vec2(ij);\n    vec2 noise = vec2(0.0);\n\tfor (int j = -2; j <= 2; j++)\n\t{\n\t\tfor (int i = -2; i <= 2; i++)\n\t\t{\n\t\t\tivec2 nij = ivec2(i, j);\n\t\t\tnoise += cell(ij + nij , fij - vec2(nij),kr,f,b,o );\n\t\t}\n\t}\n    return noise;\n}\n//void PhasorNoise(vec2 uv,float f_,float b_,float o_,out float a,out float b,out float c,out float d)\nvoid PhasorNoise(vec2 uv,vec2 scale,float f_,float b_,float o_,out float a,out float b,out float c,out float d)\n{\n    vec2 dir = vec2(cos(o_),sin(o_));\n    float kr = sqrt(-log(0.05) / M_PI) / b_;\n    vec2 p=uv*scale;\n    vec2 phasorNoise = eval_noise(p,kr,f_,b_,o_)*0.3;\n    float phi = atan(phasorNoise.y,phasorNoise.x);\n    a=phi;\n    b=sin(phi) +0.5;\n    c=length(phasorNoise);\n    d=fract(phi/(2.0*M_PI)-f_*dot(p,dir));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p =  ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n    vec3 col;\n    vec4 out_col;\n    PhasorNoise(p,vec2(1.0),25.0,10.0,0.1,out_col.x,out_col.y,out_col.z,out_col.w);\n    col=vec3(out_col.z);\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}