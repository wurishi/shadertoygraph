{"ver":"0.1","info":{"id":"7djcDy","date":"1644108734","viewed":412,"name":"Making Music in Shadertoy - ep2","username":"athibaul","description":"The final file obtained at the end of the second episode. See the video : https://youtu.be/CqDrw0l0tas","likes":26,"published":1,"flags":8,"usePreview":0,"tags":["tutorial","music","synthesis","gpusound","sounddesign"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// =======================================\n//  Making Music in Shadertoy - Episode 2\n//     FM Synthesis, Pad, Lead Synth\n// =======================================\n// See the video : https://youtu.be/CqDrw0l0tas\n//\n// See Sound tab for the sound synthesis.\n\n\n#define R(th) mat2(cos(th), -sin(th), sin(th), cos(th))\n\n\n// =============================================\n// SDFs by Inigo Quilez\n// https://iquilezles.org/\n// The MIT License\n// Copyright © 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/Nlj3WR\nfloat sdBox( in vec2 p, in vec2 rad )\n{\n    p = abs(p)-rad;\n    return max(p.x,p.y);\n}\n\n// https://www.shadertoy.com/view/7tj3DR\nfloat sdEllipse( in vec2 p, in vec2 r )\n{\n    p = abs(p);\n    p = max(p,(p-r).yx);\n    float m = dot(r,r);\n    float d = p.y-p.x;\n    return p.x - (r.y*sqrt(m-d*d)-r.x*d)*r.x/m;\n}\n\n\n// ==============================================\n\n\nfloat eighthNote(in vec2 U, float w)\n{\n    U = 15.*U;\n    w *= 15.;\n    float col = 0.;\n    \n    \n    // Note head\n    vec2 p = U - vec2(-3.6,-9.8);\n    p = R(0.4)*p;\n    col = mix(col, 1., smoothstep(w,0., sdEllipse(p, vec2(4.2,2.6))));\n    // Note stem\n    col = mix(col, 1., smoothstep(w,0., sdBox(U - vec2(0.,1.5),vec2(0.4,10.1))));\n    // Note flag\n    // Intersection of two circles\n    p = U - vec2(0,-1.4);\n    float d_in = length(p) - 7.0;\n    p += vec2(3,0) * R(-0.4);\n    float d_out = length(p) - 10.0;\n    float d = max(-d_in, d_out);\n    d = max(d, -(p*R(0.4)).y);// is up\n    d = max(d, -U.x);// is right\n    col = mix(col, 1., smoothstep(w, 0., d));\n    \n    // Upper part of the note flag\n    float r_right = 3.7;\n    p = U - vec2(0.4+r_right,11.6);\n    d = r_right - length(p);\n    d = max(d, -U.x);\n    d = max(d, p.y);\n    d = max(d, -p.y-r_right);\n    d = max(d, p.x+0.5*r_right);\n    col = mix(col, 1., smoothstep(w, 0., d));\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    U = (2.*U-iResolution.xy)/iResolution.y;\n    \n    U *= 5.;\n    float w = 1.5*fwidth(U.x);\n    U.x += iTime;\n    float sx = 1.5;\n    float notei = round(U.x/sx);\n    U.x -= notei*sx;\n    U.y += fract(notei*0.618)*2.-1.;\n    \n    vec3 col = vec3(1. - eighthNote(U,w));\n    \n    // Output to screen\n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Sound code by Alexis THIBAULT\n\n/*\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\nhttps://creativecommons.org/licenses/by-nc/4.0/\n\nYou are free to:\n\n    Share — copy and redistribute the material in any medium or format\n    Adapt — remix, transform, and build upon the material\n\n    The licensor cannot revoke these freedoms as long as you follow the license terms.\n\nUnder the following terms:\n\n    Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\n    NonCommercial — You may not use the material for commercial purposes.\n\n    No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n*/\n\n\n#define TWOPI (2.*3.1415926)\n\n#define bpm 100.\n#define beatdur (60./bpm)\n\n// Frequency Modulation\n\n// f(t) instantaneous frequency\n// sig = sin(phase(t))\n// phase'(t) = TWOPI*f(t)\n// phase(t) = integral of TWOPI*f(t) dt\n\n// Constant frequency\n// f(t) = f0\n// phase'(t) = TWOPI*f0\n// phase(t) = TWOPI*f0*t + c\n// sig(t) = sin(TWOPI*f0*t + c)\n\n// Sinusoidal variation\n// carrier frequency fc\n// modulation frequency fm\n// frequency deviation df\n// f(t) = fc + df * cos(TWOPI*fm*t)\n// phase'(t) = TWOPI*fc + TWOPI*df * cos(TWOPI*fm*t))\n// phase(t) = TWOPI*fc*t + df/fm * sin(TWOPI*fm*t)\n// sig(t) = sin(TWOPI*fc*t + df/fm * sin(TWOPI*fm*t))\n\n// index of modulation iom = df/fm\n\n\n#define FM(fc, fm, iom) sin(TWOPI*fract((fc)*t) + (iom)*sin(TWOPI*fract((fm)*t)))\n#define FM2(pc, pm, iom) sin(mod(pc,TWOPI) + (iom)*sin(mod(pm,TWOPI)))\n\n#define N(nn) 440.*exp2(((nn)-9.)/12.)\n\n// Center frequency = fc\n// Audible sidebands : abs(fc +- n*fm) for n <= ~iom\n// Negative frequencies get reflected back\n\n\nvec2 padSynth(float f, float t)\n{\n    vec2 sig = vec2(0);\n    // body\n    sig += FM(f, f+vec2(-1.,1.62), 1.) * 0.03;\n    sig += FM(f+2., f+vec2(1.,-1.62), 1.) * 0.02;\n    // personality\n    float fc = f*round(2000./f);\n    float iom = 1000./f;\n    sig += FM(fc, f+vec2(0.7,-2.), iom * (1. - 0.5*sin(1.9*t))) * 0.01;\n    sig += FM(fc-2., f+vec2(-1.,1.6), iom * (1. + 0.5*sin(3.*t))) * 0.007;\n    \n    float env = smoothstep(0., 0.3, t);\n    return sig * env;\n}\n\nvec2 padChord(vec4 fs, float t)\n{\n    vec2 sig = vec2(0);\n    sig += padSynth(fs.x, t) * vec2(0.8,0.3);\n    sig += padSynth(fs.y, t) * vec2(1., 0.1);\n    sig += padSynth(fs.z, t) * vec2(0.1, 1.);\n    sig += padSynth(fs.w, t) * vec2(0.3, 0.8);\n    return sig;\n}\n\nvec2 padChordPattern(float t)\n{\n    t = max(t, 0.);\n    t = mod(t, 16.*beatdur);\n    vec4 chord = \n        (t < 4.*beatdur) ? vec4(-3., -1., 0., 4.) :\n        (t < 8.*beatdur) ? vec4(-3., 0., 2., 5.) :\n        (t < 12.*beatdur) ? vec4(-7., -3., 0., 7.) :\n        (t < 14.*beatdur) ? vec4(-5., 0., 2., 4.) :\n                            vec4(-5., -1., 2., 4.);\n    float t_cur = mod(t, 4.*beatdur);\n    float env = smoothstep(4.*beatdur, 3.5*beatdur, t_cur);\n    return padChord(N(chord), t_cur) * env;\n}\n\nvec2 padChordPatternVerb(float t)\n{\n    return padChordPattern(t)\n    + padChordPattern(t-0.01).yx * 0.3 * vec2(-1,1)\n    + padChordPattern(t-beatdur) * 0.25;\n}\n\n// Lead Synth\n\nfloat vibratoPhase(float f0, float semitones, float vibHz, float t)\n{\n    float df = 0.06*f0*semitones;\n    float phase = TWOPI*f0*t + df/vibHz*sin(TWOPI*vibHz*t);\n    return phase;\n}\n\nvec2 leadSynth(float f, float t)\n{\n    vec2 sig = vec2(0);\n    \n    t = max(t, 0.); // To avoid problems with the exponential envelope\n    \n    // Vibrato\n    // WRONG\n    // f += 5.*sin(TWOPI*5.*t);\n    // phase(t) = f(t)*t\n    // phase'(t) = f(t) + f'(t)*t\n    \n    // RIGHT\n    // f(t) = f0 + df*cos(TWOPI*fm*t)\n    // phase(t) = TWOPI*f0*t + df/fm*sin(TWOPI*fm*t)\n    // fm = 5 Hz\n    // df = epsilon*f0\n    float vibEnv = smoothstep(0., 0.5, t);\n    float phase = vibratoPhase(f, 0.2*vibEnv, 5., t);\n    float tpt = TWOPI*t;\n    \n    // body\n    sig += FM2(phase, phase, 1.) * 0.05;\n    sig += FM2(phase+5.*tpt, phase+vec2(-1.,0.8)*tpt, 3.) * 0.02;\n    \n    // presence\n    float ratio = round(5000./f);\n    float iom = 1500./f;\n    sig += FM2(ratio*phase, phase, iom) * 0.01;\n    sig += FM2(ratio*phase+5.*tpt, phase+vec2(3.,-3.)*tpt, iom) * 0.01;\n    \n    // attack\n    float fc = f*round(10000./f);\n    iom = 10000./f;\n    sig += FM(fc, f, iom) * 0.05 * exp(-30.*t);\n    \n    float env = 1.;\n    // Fake compression\n    env *= 0.7*(1.+smoothstep(0.02,0.,t) + 0.3*smoothstep(0.,0.5,t));\n    \n    return sig * env;\n}\n\nvec2 leadSynthPattern(in float t)\n{\n    vec2 sig = vec2(0);\n    t -= 1.75*beatdur;\n    t = max(t, 0.);\n    t = mod(t, 8.*beatdur);\n    \n    //#define P(nn, b) if(t>0. && t<(b)*beatdur) { sig += leadSynth(N(nn), t) * smoothstep((b)*beatdur, (b)*beatdur-0.01, t);  } t -= (b)*beatdur;\n    #define P(nn, b) sig += leadSynth(N(nn), t) * step(0., t) * smoothstep((b)*beatdur, (b)*beatdur-0.01, t); t -= (b)*beatdur;\n    \n    P(7., 0.25);\n    P(9., 0.5);\n    P(7., 1.);\n    P(9., 1.);\n    P(9.+12., 0.5);\n    P(16., 0.5);\n    P(14., 1.);\n    P(12., 0.5);\n    P(9., 0.25);\n    P(7., 0.25);\n    P(9., 1.5);\n    \n    #undef P\n    \n    return sig;\n}\n\nvec2 leadSynthPatternVerb(float t)\n{\n    return leadSynthPattern(t)\n    + leadSynthPattern(t-0.005).yx * vec2(0.3,0.7)\n    + leadSynthPattern(t-0.75*beatdur) * 0.5 * vec2(-1,1)\n    + leadSynthPattern(t-1.5*beatdur) * 0.25 * vec2(-1,-1);\n}\n\nvec2 mainSound( int samp, float t )\n{\n    vec2 sig = vec2(0);\n    sig += padChordPatternVerb(t);\n    //sig += leadSynth(440., t);\n    sig += leadSynthPatternVerb(t);\n    return sig;\n}\n","name":"Sound","description":"","type":"sound"}]}