{"ver":"0.1","info":{"id":"4fsGDM","date":"1706698384","viewed":48,"name":"coordinate for terry","username":"TerryInGansu","description":"UV坐标转换成坐标系","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["coordinate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float func(in vec2 uv) {\n    // return step(0.,x);\n    return abs(sin(uv.x) - uv.y) < fwidth(uv.x) ? 1. : 0.;\n}\n\nfloat segment(in vec2 p, in vec2 a, in vec2 b, in float w) {\n    float f = 0.;\n\n    // p = clamp(p, vec2(-1.,-1.), vec2(1.,1.));\n\n    vec2 ba = b - a;\n    vec2 pa = p - a;\n\n    float proj = clamp(dot(ba, pa) / dot(ba, ba), 0.3,.8); \n    // float proj = dot(ba, pa) / dot(ba, ba);  \n    float d = length(proj * ba - pa);\n\n    if (d <= w) {\n        f = 1.;\n    }\n\n    return clamp(f, 0., 1.);\n}\n\nvec2 fixUV(in vec2 uv) {\n    return (uv - vec2(0.5, 0.5)) * 8.;\n}\n\n\n// float funcPlot(in vec2 uv) {\n//     float f = 0.;\n//     for(float i = 0.; i <= iResolution.x; i+=1.) {\n//         float fx = fixUV(vec2(i, 0.)).x;\n//         float nfx = fixUV(vec2(i + 1., 0.)).x;\n//         f += segment(uv, vec2(fx, func(fx)), vec2(nfx, func(nfx)), 0.005);\n//     }\n//     return clamp(f, 0., 1.);\n// }\n\nfloat sdfRect(vec2 p, vec2 size) {\n    vec2 d = abs(p) - size * 0.5;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nvec3 crod(in vec2 uv) {\n    vec3 col = vec3(0.);\n    uv = fixUV(uv);\n    vec2 cell = fract(uv);\n    \n    if (abs(cell.x) < fwidth(cell.x)) col = vec3(0., 0., 1.);\n    if (abs(cell.y) < fwidth(cell.y)) col = vec3(0., 0., 1.);\n    \n    if (abs(uv.x) < fwidth(uv.x)) col = vec3(1.,0.,0.);\n    \n    if (abs(uv.y) < fwidth(uv.y)) col = vec3(0., 1., 0.);\n\n    const float epsilon = 0.01;\n    //uv\n    col = mix(col, vec3(1.,1.,0.), func(uv));\n    // col.r = smoothstep(1., .99, length(uv));\n\n    col = mix(col, vec3(0.23), smoothstep(.2, .199, sdfRect(uv, vec2(1.,1.))));\n    \n    return col;\n}\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/ min(iResolution.x, iResolution.y);\n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // col = grid(uv);\n    \n    col = crod(uv);\n\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}