{"ver":"0.1","info":{"id":"XstfWH","date":"1524940415","viewed":162,"name":"smoothtri","username":"Del","description":"smooth triangle wave","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["graph","smoothtrianglewave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// smooth triangle curve test\n\n#define\tPI 3.14159\n#define\tTAU 6.28318\n\n// out: 0->val->0\nfloat SmoothTri(float t, float val)\n{\n\treturn val - (val * abs(cos(t*PI)) );\n}\n\n// out: 0->val->0\nfloat SmoothTri2(float t, float val)\n{\n    return val * (1.0-(0.5+cos(t*TAU)*0.5));\n}\n\n// out: 0->val->0\nfloat SmoothTri3(float t, float val)\n{\n    t = smoothstep(0.0,1.0,fract(t));\n\treturn val - (val * abs(cos(t*PI)) );\n}\n\n\nvec3 blendCurve(vec3 backgroundColor, vec3 curveColor, float delta)\n{\n    delta *= iResolution.y * 0.25;\n    float alpha = exp2(-delta*delta);\n    return mix(backgroundColor, curveColor, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - vec2((iResolution.x-iResolution.y)*0.5, 0.0)) / iResolution.y;\n    \n    vec2 mouse = (iMouse.xy- vec2((iResolution.x-iResolution.y)*0.5, 0.0)) / iResolution.y;\n    \n    uv = (uv - 0.5) * 2.1;\t// + 0.5;\n    uv.x += 0.5;\n    vec3 col = vec3(1.0);\n    float clamped_x = clamp(uv.x, 0.0, 1.0);\n    \n    float ysize = 0.6;\n    \n    if (iMouse.z>0.5)\n    {\n\t\tclamped_x = uv.x;\t\t// unclamped\n        ysize = (mouse.y-0.5)*2.0;\n    }    \n    vec2 smallGrid = abs(0.5-fract(uv*10.0-0.5))*0.4;\n    vec2 bigGrid = abs(0.5-fract(uv-0.5))*2.0;\n    \n    col = blendCurve(col, vec3(0.8, 0.8, 0.8), min(smallGrid.x, smallGrid.y));\n    col = blendCurve(col, vec3(0.0, 0.0, 0.0), min(bigGrid.x, bigGrid.y));\n\n    \n    \n\n    // smoothtri = red\n    float d1 = SmoothTri(clamped_x,ysize)-uv.y;\n\tcol = blendCurve(col, vec3(1.0, 0.0, 0.0), d1);\n    // smoothtri2 = green\n    float d2 = SmoothTri2(clamped_x,ysize)-uv.y;\n\tcol = blendCurve(col, vec3(0.0, 1.0, 0.0), d2);\n    // smoothtri3 = blue\n    float d3 = SmoothTri3(clamped_x,ysize)-uv.y;\n\tcol = blendCurve(col, vec3(0.0, 0.0, 1.0), d3);\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}