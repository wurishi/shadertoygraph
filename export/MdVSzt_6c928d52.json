{"ver":"0.1","info":{"id":"MdVSzt","date":"1466453609","viewed":183,"name":"Map render","username":"djtecking","description":"Height mapping","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2dmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 crd = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, crd);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI2 6.28318530718\n\nfloat rand (vec2 pos, float seed) {\n    return sin((fract(sin(dot(pos.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123) * PI2) + seed);\n}\n\nfloat rho(vec2 pos, vec2 origin) {\n    return pow(pow(pos.x - origin.x, 2.) + pow(pos.y - origin.y, 2.), .5);\n}\n\nfloat theta(vec2 pos, vec2 origin) {\n    float angle = atan((pos.y - origin.y) / (pos.x - origin.x));\n    if(pos.x >= origin.x) {\n        if(pos.y < origin.y) {\n            angle += PI2 / 2.;\n        }\n        else {\n            angle -= PI2 / 2.;\n        }\n    }\n    return angle + PI2 / 2.;\n}\n\nvec2 rot2(vec2 pos, float angle) {\n    return pos * mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat bar(vec2 pos, vec2 origin, float angle) {\n//  float d = rho(pos, origin) * cos(mod(theta(pos, origin) + angle, PI2));\n    pos = rot2(pos - origin, -angle) + origin;\n    float d = dot(pos.xy - origin.xy, vec2(.8, 0.));\n\n    if(d > 1.) return 0.;\n    else if(d > 0.) return 1. - (cos(d * PI2) * .5 + .5);\n    else if(d > -1.) return (cos(d * PI2) * .5 + .5) - 1.;\n    return 0.;\n}\n\nfloat donut(vec2 pos, vec2 origin) {\n    float d = rho(pos, origin) / 2.;\n    if(d > 1.) return 0.;\n    return 1. - (cos(d * PI2) * .5 + .5);\n}\n\nfloat perlinunit(vec2 pos, vec2 origin, float angle) {\n    return donut(pos, origin) * bar(pos, origin, angle);\n}\n\nfloat perlin(vec2 pos, float seed) {\n    float height = 0.;\n    for(int y = -1; y < 3; y++) {\n        for(int x = -1; x < 3; x++) {\n            vec2 offset = vec2(float(x), float(y));\n            float angle = rand (floor(pos + offset), 0.) * seed;\n            height += perlinunit(pos, floor(pos + offset), angle);\n        }\n    }\n    return height / 6.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 crd = fragCoord.xy / iResolution.xy * 10.;\n    float height = perlin(crd, iTime);\n    //fragColor = vec4(vec3(rand(crd.xy, iTime * 1.)),1.0) * 0.5 + 0.5;\n    fragColor = fract(vec4(vec3(height * 0.5 + 0.5), 1.));\n}\n","name":"Buf A","description":"","type":"buffer"}]}