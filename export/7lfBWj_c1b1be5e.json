{"ver":"0.1","info":{"id":"7lfBWj","date":"1651462345","viewed":148,"name":"kaleidoscope arbitrary sides 1","username":"HaleyHalcyon","description":"a","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"NlXBD2","parentname":"kaleidoscope_arbitrary_sides"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (6.283185307)\n#define HEX(x) (vec3((x >> 16) & 255, (x >> 8) & 255, x & 255) / 255.)\n\nvec3 color(float x){\n    const int colorCount = 8;\n    vec3[] c = vec3[](\n        HEX(0xb010b0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        HEX(0xb0ffb0),\n        HEX(0xa0ffe0),\n        HEX(0x7080F0),\n        HEX(0x8000a0)\n    );\n    x *= float(colorCount);\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo],\n        c[(lo + 1) % colorCount],\n        smoothstep(0.98, 1., fract(x))\n    );\n}\n\nfloat zigzag(float x) {\n    return 1. - (abs(1. - mod(x, 2.0)));\n}\n\n#define REP 7. // how many pairs of reflections do you want\n\n// i am dumb and i can't think of a better way to do this than converting to polar coords and back\nvec2 kaleido(vec2 uv, float tx_rot, float circ_rot) {\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    theta = zigzag(\n        REP * 2. * (\n            theta + circ_rot\n        ) / TAU\n    ) * TAU / (REP * 2.) + tx_rot;\n    uv = r * vec2(\n        cos(theta), sin(theta)\n    );\n    return uv;\n}\n\nvec3 spiral(vec2 uv, float time) {\n    float logr = (uv.x * uv.x + uv.y * uv.y < 0.1) ? 0.0 : log(length(uv));\n    float theta = (uv.y == 0.0 && uv.x == 0.0) ? 0.0 : atan(uv.y, uv.x);\n    return color(\n        fract(\n            1.0 * logr + 8. * theta / TAU + 2. * time\n        )\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / length(iResolution.xy);\n    float time = fract(iTime / 6.0);\n    vec2 uv_kal = kaleido(uv, time * TAU, -time * TAU / REP);\n    vec3 colSpiral = spiral(\n        (round(-1. * time + uv_kal * 12.) + 1. * time) / 8., time\n    );\n\n    fragColor = vec4(colSpiral,1.0);\n}","name":"Image","description":"","type":"image"}]}