{"ver":"0.1","info":{"id":"DtfBWr","date":"1692781241","viewed":123,"name":"Gray-Scott reaction diffusion","username":"tetrismegistus","description":"Gray-Scott reaction diffusion, check back here for blog post link if you want to know more","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nvec3 getColor(float value) {\n    vec3 col = vec3(1.0); // Default color\n    if (value < 0.33) {\n        col = mix(vec3(0.0, 0.0, 1.0), vec3(0.0, 1.0, 1.0), value/0.33);\n    } else if (value < 0.66) {\n        col = mix(vec3(0.0, 1.0, 1.0), vec3(1.0, 1.0, 0.0), (value-0.33)/0.33);\n    } else {\n        col = mix(vec3(1.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), (value-0.66)/0.33);\n    }\n    return col;\n}\n\n\nvec3 adjustContrast(vec3 color, float contrast) {\n    return (color - vec3(0.5)) * contrast + vec3(0.5);\n}\n\nvec3 adjustSaturation(vec3 color, float saturation) {\n    float grey = dot(color, vec3(0.299, 0.587, 0.114));\n    return mix(vec3(grey), color, saturation);\n}\n\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 texColor = (iFrame % 2 == 0) ? texture(iChannel1, uv) : texture(iChannel0, uv);\n\n    // Convert concentrations to color\n    float u = texColor.r;\n    float v = texColor.g;\n\n    // Define light blue and black colors\n    vec3 lightBlue = vec3(0.0, 0.0, 1.0);\n    vec3 black = vec3(1.0, 1.0, 1.0);\n\n    // Use v concentration to interpolate between light blue and black\n    vec3 finalColor = mix(lightBlue, black, u);\n\n    fragColor = vec4(finalColor, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"precision highp float;\n\n\n// Define some constants. You may need to tweak these for the best visual results.\nconst float dt = 0.5;\n\nconst float feed = 0.055;\nconst float kill = 0.062;\n\nvec2 laplace(vec2 uv)\n{\n    vec2 lap = vec2(0.0);\n    \n    // Loop through neighboring pixels\n    for (int i=-1; i<=1; i++)\n    {\n        for (int j=-1; j<=1; j++)\n        {\n            vec2 offset = vec2(float(i), float(j)) / iResolution.xy;\n            vec4 neighbor = texture(iChannel0, uv + offset);\n            \n            float weight;\n            if (i==-1 && j==-1) weight = 0.05;\n            else if (i==0 && j==-1) weight = 0.2;\n            else if (i==1 && j==-1) weight = 0.05;\n            else if (i==-1 && j==0) weight = 0.2;\n            else if (i==0 && j==0) weight = -1.0;\n            else if (i==1 && j==0) weight = 0.2;\n            else if (i==-1 && j==1) weight = 0.05;\n            else if (i==0 && j==1) weight = 0.2;\n            else if (i==1 && j==1) weight = 0.05;\n\n            lap += weight * vec2(neighbor.r, neighbor.g);\n        }\n    }\n    return lap;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n     vec2 center = vec2(0.5, 0.5);\n\n    // Calculate distance from center, normalized to [0,1]\n    float distanceFromCenter = length(uv - center);\n\n    if(iFrame < 1) {\n        // Initialization for the first frame\n        float size = 0.1; // Change this value to control the size of the square\n        if(uv.x > 0.5 - size && uv.x < 0.5 + size && uv.y > 0.5 - size && uv.y < 0.5 + size) {\n            fragColor = vec4(1.0, 0.0, 0.0, 1.0);  // Red square\n        } else {\n            fragColor = vec4(0.5, 0.5, 0.5, 1.0);  // Background color (grey)\n        }\n    } else {\n        vec2 uv = fragCoord/iResolution.xy; \n\n        // Parameters for our sinusoidal variation:\n        float amplitude = 0.25;  // Adjusts height of the waves\n        float frequency = 9.5; // Adjusts number of waves\n\n        // Calculate sinusoidal variation for Du and Dv:\n        float sinVariationX = amplitude * sin(frequency * uv.x);\n        float sinVariationY = amplitude * sin(frequency * uv.y);\n\n        // Original constant diffusion values:\n        float DuConstant = 1.3; // Example, you might have your own constant value here\n        float DvConstant = max(0.1, 1.0 - length(uv - vec2(0.5, 0.5))); \n\n        // Modify the diffusion rates with the sinusoidal values:\n        float DuSine = DuConstant + sinVariationX + sinVariationY;\n        float DvSine = DvConstant + sinVariationX + sinVariationY;\n\n        vec4 texColor = (iFrame % 2 == 0) ? texture(iChannel0, uv) : texture(iChannel1, uv);\n\n        // Get concentrations of U and V\n        float u = texColor.r;\n        float v = texColor.g;\n\n        // Compute the Laplacians\n        vec2 lap = laplace(uv);\n\n        // Gray-Scott equations with the sinusoidal Du and Dv values:\n        float dudt = DuSine * lap.x - u * v * v + feed * (1.0 - u);\n        float dvdt = DvSine * lap.y + u * v * v - (feed + kill) * v;\n\n        u += dudt * dt;\n        v += dvdt * dt;\n\n        fragColor = vec4(u, v, 0.0, 1.0);\n\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"precision highp float;\n\n\n// Define some constants. You may need to tweak these for the best visual results.\nconst float dt = 0.5;\n\n\nconst float feed = 0.055;\nconst float kill = 0.062;\n\nvec2 laplace(vec2 uv)\n{\n    vec2 lap = vec2(0.0);\n    \n    // Loop through neighboring pixels\n    for (int i=-1; i<=1; i++)\n    {\n        for (int j=-1; j<=1; j++)\n        {\n            vec2 offset = vec2(float(i), float(j)) / iResolution.xy;\n            vec4 neighbor = texture(iChannel0, uv + offset);\n            \n            float weight;\n            if (i==-1 && j==-1) weight = 0.05;\n            else if (i==0 && j==-1) weight = 0.2;\n            else if (i==1 && j==-1) weight = 0.05;\n            else if (i==-1 && j==0) weight = 0.2;\n            else if (i==0 && j==0) weight = -1.0;\n            else if (i==1 && j==0) weight = 0.2;\n            else if (i==-1 && j==1) weight = 0.05;\n            else if (i==0 && j==1) weight = 0.2;\n            else if (i==1 && j==1) weight = 0.05;\n\n            lap += weight * vec2(neighbor.r, neighbor.g);\n        }\n    }\n    return lap;\n}\n\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n        vec2 uv = fragCoord/iResolution.xy; \n\n        // Parameters for our sinusoidal variation:\n        float amplitude = 0.25;  // Adjusts height of the waves\n        float frequency = 9.5;  // Adjusts number of waves\n\n        // Calculate sinusoidal variation for Du and Dv:\n        float sinVariationX = amplitude * sin(frequency * uv.x);\n        float sinVariationY = amplitude * sin(frequency * uv.y);\n\n        // Original constant diffusion values:\n        float DuConstant = 1.3; // Example, you might have your own constant value here\n        float DvConstant = max(0.1, 1.0 - length(uv - vec2(0.5, 0.5))); \n\n        // Modify the diffusion rates with the sinusoidal values:\n        float DuSine = DuConstant + sinVariationX + sinVariationY;\n        float DvSine = DvConstant + sinVariationX + sinVariationY;\n\n        vec4 texColor = (iFrame % 2 == 0) ? texture(iChannel0, uv) : texture(iChannel1, uv);\n\n        // Get concentrations of U and V\n        float u = texColor.r;\n        float v = texColor.g;\n\n        // Compute the Laplacians\n        vec2 lap = laplace(uv);\n\n        // Gray-Scott equations with the sinusoidal Du and Dv values:\n        float dudt = DuSine * lap.x - u * v * v + feed * (1.0 - u);\n        float dvdt = DvSine * lap.y + u * v * v - (feed + kill) * v;\n\n        u += dudt * dt;\n        v += dvdt * dt;\n\n        fragColor = vec4(u, v, 0.0, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}