{"ver":"0.1","info":{"id":"tstyRM","date":"1601236040","viewed":42,"name":"Raymarching_aesch_1","username":"annaesch","description":"Raymarching Test 1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p) {\n\tvec4 sphere = vec4(0, 1, 4, 1);\n    \n    float sphereDist =  length(p-sphere.xyz)-sphere.w;\n    float planeDist = p.y; //with plane at y=0 \n    \n    float d = min(sphereDist, planeDist); //take smallest distance \n    return d;\n}\n\nfloat RayMarch(vec3 rayPos, vec3 rayDir) {\n\tfloat distO=0.; // distance origin\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = rayPos + rayDir*distO; //marching step point p \n        float distS = GetDist(p); // distance to closest object\n        distO += distS; // move to next marching step\n        if(distO>MAX_DIST || distS<SURF_DIST) break;\n    }\n    \n    return distO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p); //get distance to surface\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3( \t// points around p\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 8, 4);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*3.; // moving lightPos\n    vec3 l = normalize(lightPos-p); // vec from p to light source\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.); // no negative results\n    float d = RayMarch(p+n*SURF_DIST*2., l); // distance to object\n    if(d<length(lightPos-p)) dif *= .1; //check if distance to object is closer than ditance to light \n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // shift origin to center\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 rayPos = vec3(0, 1, 0); // ray origin\n    vec3 rayDir = normalize(vec3(uv.x, uv.y, 1)); // ray direction normalized\n\n    float d = RayMarch(rayPos, rayDir); // distance to objects\n    \n    vec3 p = rayPos + rayDir * d; // position for lighting\n    \n    float dif = GetLight(p); // diffuse light\n    col = vec3(dif);\n    \n   \tcol = pow(col, vec3(.7)); // gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}