{"ver":"0.1","info":{"id":"mlKBz3","date":"1707124831","viewed":133,"name":"Void Tunnel - Redaphid","username":"redaphid","description":"tunnel","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Convert to polar coordinates\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n\n    // Time-dependent rotation for the void\n    float timeRotation = iTime * 0.2;\n\n    // Adjust angle for rotation and segmenting\n    float adjustedAngle = mod(angle + timeRotation, 2.0 * 3.14159 / 6.0) - 3.14159 / 6.0;\n\n    // Calculate outward radiating fin-like protrusions\n    float finEffect = smoothstep(-0.1, 0.1, adjustedAngle) * smoothstep(0.15, 0.25, radius);\n\n    // Define the central void shape\n    float voidShape = 1.0 - smoothstep(0.15, 0.2, radius);\n\n    // Combine fin effect and void shape\n    float effect = max(finEffect, voidShape);\n\n    // Color the effect\n    vec3 color = effect * vec3(0.8, 0.7, 1.0);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}