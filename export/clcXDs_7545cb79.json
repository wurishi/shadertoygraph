{"ver":"0.1","info":{"id":"clcXDs","date":"1685904034","viewed":52,"name":"electrical tape flowers","username":"ag","description":"Designing some flowers for my room. Wall color is fixed, (electrical) tape colors and width are fixed. If you have any ideas or suggestions, please let me know -- but it's my first home decor project so I'm looking for as simple as possible.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["geometric","flowers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 red = vec3(.95, .1, .1);\nvec3 white = vec3(.98, .98, .98);\nvec3 yellow = vec3(.95, .95, .1);\nvec3 black = vec3(.05, .05, .05);\nvec3 green = vec3(.1, .6, .5);\nfloat tape_thickness = 0.022;\n\n\nstruct Flower {\n  vec2 center;\n  float radius;\n  int n_petals;\n  vec3 color;\n  float initangle;\n};\n\n\n\nfloat mask_flower(vec2 pos, Flower f) {\n  vec2 rt = as_polar(pos - f.center);\n  rt.y += f.initangle;\n  float petal_angle = 2.0 * pi / float(f.n_petals);\n  float petal_t = rt.y - floor(rt.y / petal_angle) * petal_angle;\n  float petal_edge = petal_angle / 2.0;\n  \n  // the radius multiplier to get a polygon with n_petals sides\n  float polygon_mult = cos(petal_edge) / cos(petal_edge  - petal_t);\n  // we don't want a polygon though, so we use a slightly different multiplier\n  float delta_multiplier = 1.8; //1.45; // how much to increase the change in radius\n  float r_at_angle = f.radius * (1.0 + delta_multiplier*(polygon_mult - 1.0));\n\n  float in_bounds = mask_disc(rt, r_at_angle - tape_thickness, r_at_angle);\n  float within_flower = min(in_bounds, 0.0);\n  float outside_flower = max(in_bounds, 0.0);\n  \n  float petal_edge_dist = smoothstep(\n      0.0, 1.0, (1.0 - abs(petal_t - petal_edge) * rt.x * 2.0 / tape_thickness)*30.0);\n  float outside_petal_edge = 1.0 - petal_edge_dist;\n  \n  return within_flower * outside_petal_edge + outside_flower;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord/iResolution.xy;\n    float x_scale = iResolution.x / iResolution.y;\n    p.x *= x_scale;\n    \n    // background\n    vec3 bg_col = vec3(.86, .8, .7);\n    \n    vec3 col = bg_col;\n\n    // branch\n    float bx = p.x;\n    float by = (p.y - 0.37 - 0.1*p.x - 0.07*sin(p.x*3.3) + 0.07*cos(p.x*4.5))\n             * (1.0 + 1.5*bx + 0.2*pow(bx, 6.0));\n    float in_branch = (1.0 - clamp((bx - .86*x_scale)*200.0, 0.0, 1.0))\n                    * (1.0 - pow(clamp((0.0 - by)*100.0, 0.0, 1.0), 6.0))\n                    * (1.0 - pow(clamp((by - .15)*100.0, 0.0, 1.0), 6.0));\n    float on_stripe = clamp(sin(150.0 * p.x - 80.0*p.y)*1000.0, 0.0, 1.0);\n    \n    float ibos = in_branch * on_stripe;\n    col = (1.0 - ibos) * col + ibos * black;\n\n    /*\n    // colorful flowers\n    Flower[] flowers = Flower[] (\n      // 1\n      Flower(vec2(.09 * x_scale, .68), .145, 10, white, 0.0),\n      Flower(vec2(.09 * x_scale, .68), .11, 8, green, 0.0),\n      Flower(vec2(.09 * x_scale, .68), .08, 6, white, 0.0),\n      // 2\n      Flower(vec2(.19 * x_scale, .32), .10, 8, red, 0.0),\n      Flower(vec2(.19 * x_scale, .32), .07, 5, black, 0.0),\n      // 3\n      Flower(vec2(.51 * x_scale, .74), .112, 10, red, 0.0),\n      Flower(vec2(.51 * x_scale, .74), .08, 5, yellow, 0.0),\n      // 4\n      Flower(vec2(.77 * x_scale,  .24),  .10, 8, green, 0.0),\n      Flower(vec2(.77 * x_scale,  .24),  .07, 6, black, 0.0)\n    );\n    */\n    \n    // single-accent flowers\n    vec3 accent = green;\n    Flower[] flowers = Flower[] (\n      // 1\n      Flower(vec2(.09 * x_scale, .68), .145, 10, white, -0.1),\n      Flower(vec2(.09 * x_scale, .68), .11, 8, accent, 0.0),\n      Flower(vec2(.09 * x_scale, .68), .08, 6, white, 0.1),\n      // 2\n      Flower(vec2(.19 * x_scale, .32), .10, 8, accent, 0.2),\n      Flower(vec2(.19 * x_scale, .32), .07, 5, black, 0.5),\n      // 3\n      Flower(vec2(.51 * x_scale, .74), .112, 10, black, -0.2),\n      Flower(vec2(.51 * x_scale, .74), .08, 5, white, 0.8),\n      // 4\n      Flower(vec2(.77 * x_scale,  .26),  .08, 7, accent, 0.35)\n    );\n    \n    int n_flowers = flowers.length();\n\n    // make each flower\n    for (int i = 0; i < n_flowers; i++) {\n      float in_flower = mask_flower(p, flowers[i]);\n      float in_petals = -min(in_flower, 0.0);\n      float visible = max(in_flower, 0.0);\n      col = visible * col;\n      col += (1.0 - visible - in_petals) * flowers[i].color;\n      col += in_petals * bg_col;\n    }\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nfloat pi = 3.1415;\n\n\nfloat mask_circle(vec2 rt, float radius) {\n  return clamp((rt.x / radius - 1.0)*100.0, 0.0, 1.0);\n}\n\n\nfloat mask_disc(vec2 rt, float r_inner, float r_outer) {\n  return mask_circle(rt, r_outer) + mask_circle(rt, r_inner) - 1.0;\n}\n\n\nvec2 as_polar(vec2 pos) {\n  return vec2(length(pos), atan(pos.y, pos.x));\n}\n\n\n","name":"Common","description":"","type":"common"}]}