{"ver":"0.1","info":{"id":"M3G3zV","date":"1717899459","viewed":153,"name":"Just rain on glass","username":"JimMcKeeth","description":"Based on Heartfelt by BigWings https://www.shadertoy.com/view/ltffzl\nI added more options at the top to turn off effects\n\nControls: Mouse x = scrub time  y = rain amount","likes":6,"published":1,"flags":0,"usePreview":1,"tags":["glass","heart","rain","drop","window","droplets","drops","raining","rainonwindow"],"hasliked":0,"parentid":"ltffzl","parentname":"Heartfelt"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original https://www.shadertoy.com/view/ltffzl\n// Heartfelt - by Martijn Steinrucken aka BigWings - 2017\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//#define S(a, b, t) smoothstep(a, b, t)\nbool CHEAP_NORMALS = false;\nbool USE_POST_PROCESSING = false;\nbool USE_ZOOM = false;\nbool USE_BLUR = false;\n\nvec3 N13(float p) {\n    //  from DAVE HOSKINS\n   vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nvec4 N14(float t) {\n\treturn fract(sin(t*vec4(123., 1024., 1456., 264.))*vec4(6547., 345., 8799., 1564.));\n}\nfloat N(float t) {\n    return fract(sin(t*12345.564)*7658.76);\n}\n\nfloat Saw(float b, float t) {\n\treturn smoothstep(0., b, t)*smoothstep(1., b, t);\n}\n\n\nvec2 DropLayer2(vec2 uv, float t) {\n    vec2 UV = uv;\n    \n    uv.y += t*0.75;\n    vec2 a = vec2(6., 1.);\n    vec2 grid = a*2.;\n    vec2 id = floor(uv*grid);\n    \n    float colShift = N(id.x); \n    uv.y += colShift;\n    \n    id = floor(uv*grid);\n    vec3 n = N13(id.x*35.2+id.y*2376.1);\n    vec2 st = fract(uv*grid)-vec2(.5, 0);\n    \n    float x = n.x-.5;\n    \n    float y = UV.y*20.;\n    float wiggle = sin(y+sin(y));\n    x += wiggle*(.5-abs(x))*(n.z-.5);\n    x *= .7;\n    float ti = fract(t+n.z);\n    y = (Saw(.85, ti)-.5)*.9+.5;\n    vec2 p = vec2(x, y);\n    \n    float d = length((st-p)*a.yx);\n    \n    float mainDrop = smoothstep(.4, .0, d);\n    \n    float r = sqrt(smoothstep(1., y, st.y));\n    float cd = abs(st.x-x);\n    float trail = smoothstep(.23*r, .15*r*r, cd);\n    float trailFront = smoothstep(-.02, .02, st.y-y);\n    trail *= trailFront*r*r;\n    \n    y = UV.y;\n    float trail2 = smoothstep(.2*r, .0, cd);\n    float droplets = max(0., (sin(y*(1.-y)*120.)-st.y))*trail2*trailFront*n.z;\n    y = fract(y*10.)+(st.y-.5);\n    float dd = length(st-vec2(x, y));\n    droplets = smoothstep(.3, 0., dd);\n    float m = mainDrop+droplets*r*trailFront;\n    \n    //m += st.x>a.y*.45 || st.y>a.x*.165 ? 1.2 : 0.;\n    return vec2(m, trail);\n}\n\nfloat StaticDrops(vec2 uv, float t) {\n\tuv *= 40.;\n    \n    vec2 id = floor(uv);\n    uv = fract(uv)-.5;\n    vec3 n = N13(id.x*107.45+id.y*3543.654);\n    vec2 p = (n.xy-.5)*.7;\n    float d = length(uv-p);\n    \n    float fade = Saw(.025, fract(t+n.z));\n    float c = smoothstep(.3, 0., d)*fract(n.z*10.)*fade;\n    return c;\n}\n\nvec2 Drops(vec2 uv, float t, float l0, float l1, float l2) {\n    float s = StaticDrops(uv, t)*l0; \n    vec2 m1 = DropLayer2(uv, t)*l1;\n    vec2 m2 = DropLayer2(uv*1.85, t)*l2;\n    \n    float c = s+m1.x+m2.x;\n    c = smoothstep(.3, 1., c);\n    \n    return vec2(c, max(m1.y*l0, m2.y*l1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n    vec2 UV = fragCoord.xy/iResolution.xy;\n    vec3 M = iMouse.xyz/iResolution.xyz;\n    float T = iTime+M.x*2.;    \n    \n    float t = T*.2;\n    \n    float rainAmount = iMouse.z>0. ? M.y : sin(T*.05)*.3+.7;\n    \n    float maxBlur = 0.0;\n    float minBlur = 0.0;\n    \n    if (USE_BLUR)\n    {\n        maxBlur = mix(3., 6., rainAmount);\n        minBlur = 2.0;\n    }\n    \n    float story = 0.;\n    \n    if (USE_ZOOM)\n    {\n      float zoom = -cos(T*0.2);\n      uv *= .7+zoom*.3;\n\n      UV = (UV-.5)*(.9+zoom*.1)+.5;\n    }\n    \n    \n    float staticDrops = smoothstep(-.5, 1., rainAmount)*2.;\n    float layer1 = smoothstep(.25, .75, rainAmount);\n    float layer2 = smoothstep(.0, .5, rainAmount);\n    \n    \n    vec2 c = Drops(uv, t, staticDrops, layer1, layer2);\n    vec2 n;\n    if (CHEAP_NORMALS) \n    \tn = vec2(dFdx(c.x), dFdy(c.x));// cheap normals (3x cheaper, but 2 times shittier ;))\n    else\n    {\n    \tvec2 e = vec2(.001, 0.);\n    \tfloat cx = Drops(uv+e, t, staticDrops, layer1, layer2).x;\n    \tfloat cy = Drops(uv+e.yx, t, staticDrops, layer1, layer2).x;\n    \tn = vec2(cx-c.x, cy-c.x);\t\t// expensive normals\n    } \n        \n    float focus = mix(maxBlur-c.y, minBlur, smoothstep(.1, .2, c.x));\n    vec3 col = textureLod(iChannel0, UV+n, focus).rgb;\n    \n    \n    if (USE_POST_PROCESSING)\n    {\n        t = (T+3.)*.5;\t\t\t\t\t\t\t\t\t\t// make time sync with first lightning\n        float colFade = sin(t*.2)*.5+.5+story;\n        col *= mix(vec3(1.), vec3(.8, .9, 1.3), colFade);\t// subtle color shift\n        float fade = smoothstep(0., 10., T);\t\t\t\t// fade in at the start\n        float lightning = sin(t*sin(t*10.));\t\t\t\t// lighting flicker\n        lightning *= pow(max(0., sin(t+sin(t))), 10.);\t\t// lightning flash\n        col *= 1.+lightning*fade*mix(1., .1, story*story);\t// composite lightning\n        col *= 1.-dot(UV-=.5, UV);\t\t\t\t\t\t\t// vignette\n\n        col *= fade;\t\t\t\t\t\t\t\t\t\t// composite start and end fade\n    }\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}