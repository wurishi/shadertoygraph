{"ver":"0.1","info":{"id":"4ct3D4","date":"1711710494","viewed":35,"name":"Spinning HSB","username":"julcasans","description":"Excercise from The Book of Shaders: Modify the polar example to get a spinning color wheel, just like the waiting mouse icon.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["colors","bookofshaders","hsb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define TWO_PI 6.28318530718\n\n// Excercise from The Book of Shaders:\n// Modify the polar example to get a spinning color wheel, just like the waiting mouse icon.\n\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord/iResolution.xy;\n    float ar = iResolution.x/iResolution.y;\n    vec3 color = vec3(0.0);\n    st.x *= ar;    \n\n    // Use polar coordinates instead of cartesian\n    vec2 toCenter = vec2(0.5, 0.5)-st;\n\n    float angle = atan(toCenter.y,toCenter.x);\n    float radius = length(toCenter)*2.0;\n\n    // Map the angle (-PI to PI) to the Hue (from 0 to 1)\n    // and the Saturation to the radius\n    color = hsb2rgb(vec3((iTime*0.9+angle/TWO_PI+0.5),radius,1.0));\n    \n    float l1 = length(st-vec2(0.5,0.5));\n    vec3 c1 = vec3(1.0) * step(l1, 0.4);\n    \n    fragColor = vec4(color*c1,1.0);\n}","name":"Image","description":"","type":"image"}]}