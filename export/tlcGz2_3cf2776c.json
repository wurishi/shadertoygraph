{"ver":"0.1","info":{"id":"tlcGz2","date":"1684067444","viewed":36,"name":"Julia Menge","username":"LobsterCrew","description":"computes the julia set fractal\n\nbraucht noch AA\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 c = vec2(-.12, 0.8);\n\nvec2 cmul(vec2 z1, vec2 z2)\n{\n    float r = z1.x * z2.x - z1.y * z2.y;\n    float i = z1.x * z2.y + z1.y * z2.x;\n    return vec2(r, i);\n}\n\nvec2 julia(vec2 z)\n{\n    float b;\n    int i;\n    for(i = 0; i < 30; i++)\n    {\n        z = cmul(z, z) + c;\n        b = length(z);\n        if (b > 2.)\n        {\n            break;\n        }\n    }\n    return vec2(b, i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 q = 2.*(fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\t\n    float t = pow(2., -.2 * iTime);\n    vec2 res = julia((q  * t - vec2(-.37325, -.38) ));\n    \n    vec3 col = vec3(1, 1, 1) * smoothstep(1., .99, res.x/2.);\n    col += vec3(.5, .0, .7) * res.y/10.;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}