{"ver":"0.1","info":{"id":"lf2GWm","date":"1704314806","viewed":46,"name":"island","username":"efcawesome","description":"i","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["i"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\t<https://www.shadertoy.com/view/Xd23Dh>\n//\tby inigo quilez <http://iquilezles.org/www/articles/voronoise/voronoise.htm>\n//\n\nvec3 hash3( vec2 p ){\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat iqnoise( in vec2 x, float u, float v ){\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0+63.0*pow(1.0-v,4.0);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g )*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\n\nvec3 getCol(float h) {\n    if (h > 0.8) {\n        return vec3(0.580,0.580,0.580);\n    }\n    else if (h > 0.6) {\n        return vec3(0.510,0.435,0.227);\n    }\n    else if (h > 0.4) {\n        return vec3(0.663,0.514,0.196);\n    }\n    else if (h > 0.2) {\n        return vec3(0.278,0.439,0.220);\n    }\n    else if (h > 0.0) {\n        return vec3(0.325,0.702,0.302);\n    }\n    else {\n        return vec3(0.373,0.784,0.867);\n    }\n}\n\nvec3 palette(float t) {\n    vec3 a = vec3(-0.112, 0.668, -0.172);\n    vec3 b = vec3(-0.032, 0.418, 1.248);\n    vec3 c = vec3(0.52, 0.888, -0.502);\n    vec3 d = vec3(-0.43, -0.302, -0.032);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    \n    float d = length(uv);\n\n    float n = iqnoise(uv * 7.5 + 25.36, 1.0, 1.0);\n    \n    n -= d*0.75;\n    if (n < 0.0) n = 0.0;\n    vec3 finalCol = getCol(n);\n    \n    \n    float r = 3.0;\n    vec2 sunpos = vec2(r*cos(iTime/10.0), r*sin(iTime/10.0));\n    vec2 heading = sunpos - uv;\n    float magnitude = length(heading);\n    vec2 dir = heading/magnitude/100.0;\n    \n    while(length(sunpos - uv) > 0.05) {\n        uv += dir;\n        float dis = length(uv);\n\n        float h = iqnoise(uv * 7.5 + 25.36, 1.0, 1.0);\n    \n        h -= dis*0.75;\n        \n        if (h > n) { // if object is in way of sun, make darker\n            finalCol -= vec3(0.1, 0.1, 0.1);\n            break;\n        }\n        \n        if (h > 1.0) break; // if height is above max height, stop loop\n    }\n\n    // Output to screen\n    fragColor = vec4(finalCol, 1.0);\n}","name":"Image","description":"","type":"image"}]}