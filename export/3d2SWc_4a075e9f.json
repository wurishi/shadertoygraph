{"ver":"0.1","info":{"id":"3d2SWc","date":"1555138783","viewed":154,"name":"Living noise","username":"AlexK","description":"An attempt to make scalable and dynamic base for time and scale dependent procedural stuff. It can be iterated huge number of times without noticeable loss in performance, however it do not work after 24 iteration correctly because of float precision.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","life"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float[] seed = float[](.25, .5,\n                     .75, 1.) ;\n\n\nfloat rnd(float seed){\n\treturn fract((1. - cos((seed + 21.2313662551) * 37.6447205633))/2.);\n}\n\nvec2 color(vec2 uv, float col, int i, float r){\n    int x = int(uv.x * 2.)%2;\n    int y = int(uv.y * 2.)%2;\n\n    float c;\n    \n    float r1 = rnd(float(i));\n    float r2 = rnd(seed[y * 2 + x]);\n    \n    float r3 = rnd((r1 + r2) * r);\n    \n    \n    c = (col + r3 + col * (r3 - 0.5) * 0.6) * 1.2 ;\n    \n\treturn vec2(c, r3);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    uv -= vec2(1.1, 0.6);\n    \n    // Starting at 200000x zoom and move it to 1x over period of 30s\n    float zoom = 1. / min(1., mix(0.000005, 1., pow((1. + iTime) / 30., 5.)));\n    uv = uv / zoom;\n    \n    uv += vec2(1.1, 0.6);\n    uv.y = 1. - uv.y;\n    uv.x += -0.4;\n        \n    float inn = iTime * 0.3;\n    float val = 0.5; \n    vec2 n_uv = uv;\n    float r = 1.;\n    \n    // Reduce number of iterations as zoom value became smaller (not necessary, just a demonstration of persistence)\n    int iters = int(max(9.,mix(24., 9., pow((1. + iTime) / 30., 5.) )));\n    \n    for (int i=0;i<iters;i++){\n        vec2 res = color(n_uv, inn, i+1, r);\n        inn = res[0];\n        r = res[1];\n        n_uv = n_uv * 2.;\n        \n        val += cos(inn) / pow(float(i + 1), 0.4) /8.;\n    }\n    \n    \n\n    // Output to screen\n    \n    vec3 col = vec3(val, val, val);\n    //if (col.r <0.2) col = vec3(0.4, 0., 0.);\n    if (uv.x<0. || uv.x>1.) col = vec3(0., 0., 0.);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}