{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define GraphicDetail 100\n#define StartSpeed 1.0\n\nfloat hash(float x)\n{\n\treturn fract(21654.6512 * sin(385.51 * x));\n}\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat sdCylinder(vec3 p, vec4 c)\n{\n\treturn max(length(p.xz-c.xy)-c.z,abs(p.y) - c.w);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat scene(vec3 p)\n{\n\tp.xz = rotate(p.xz, 0.0);\n\t\n\tfloat globalTime12 = pow(iTime, 1.2);\n\tfloat globalTime20 = pow(iTime, 1.35);\n\t\n\t//p = vec3(rotate(p.xy,sin(iTime / 10.0) * 3.0),p.z);\n\n\t//p.z += iTime * 3.0;\t\n\t\n\tfloat sin10 = sin(globalTime12 / 10.0 + 1.0);\n\tfloat sin6 = sin(globalTime12 / 6.0);\n\t\n\tp.x += cos(p.z / 20.0) * 20.0 * sin6 - 20.0 * sin6;\n\tp.y += cos(p.z / 10.0)  * 10.0 * sin10  - 10.0 * sin10;\t\n\n\t\n\t/*\n\tp.x -= cos(iTime * 3.0 / 20.0) * 20.0 - 20.0;\n\tp.y -= cos(iTime * 3.0 / 10.0)  * 5.0  - 5.0;*/\n\t\n\tvec3 pr = p + vec3(100.0,100.0,0.0);\n\tpr.z += globalTime20;\n\t\n\tvec3 c = vec3(200.0,200.0,1.0);\n\tpr = mod(pr,c)-0.5*c;\n\t\n\tfloat rand =  fract(677.9472* sin(68.2418747 * floor((p.z + 1.5 + globalTime20)  / 3.0)));\n\tfloat rand2 = fract(354.6512 * sin(85.514878 * floor((p.z + 1.5 + globalTime20) / 3.0)));\n\t\n\t\t  //AuÃŸenrand\n\tfloat w = sdCylinder(pr.yzx, vec4(0.0,0.0,1.0,0.1));\n\t\t\n\t\t//Ringe\n\t\tif(mod(floor(p.z + 0.2 + globalTime20),6.0) > 0.2)\t\n\t\t\tw = sdCylinder(pr.yzx, vec4(0.0,0.0,1.0,0.05));\n\t\t\n\t\t  \t//zwischneteile\t\n\t\t\t\t//rotating  \n\t\t\t\tvec3 p3 = vec3(rotate(p.xy,iTime  * (rand * 4.0 - 2.0)),p.z);\n\t\t\t\t\n\t\t\t\t//Strich\n\t\t\t\tif(rand < 0.25)\n\t\t\t\t\tw = max(w, -max((abs(p3.x) - 0.2), sdCylinder(p.yzx, vec3(0.0,0.0,0.8))));\n\t\t\t\t\n\t\t\t\t//2seiten mit kreisauschnitt\n\t\t\t\tif(rand < 0.5 && rand >= 0.25)\n\t\t\t\t{\n\t\t\t\t\tfloat w1 = abs(p3.x) - 0.4;\n\t\t\t\t\tw1 = max(w1, -sdCylinder(p3.yzx, vec3(0.0,0.8,0.6)));\n\t\t\t\t\tw1 = max(w1, -sdCylinder(p3.yzx, vec3(0.0,-0.8,0.6)));\n\t\t\t\t\tw = max(w,-max( -w1, sdCylinder(p.yzx, vec3(0.0,0.0,0.8))));\n\t\t\t\t}\n\t\t\t\t//3 Kreise\n\t\t\t\tif(rand < 0.75 && rand >= 0.5)\n\t\t\t\t{\n\t\t\t\t\tfloat w1 = sdCylinder(p3.yzx, vec3(0.5,0.0,0.3));\n\t\t\t\t\tw1  = min(w1, sdCylinder(p3.yzx, vec3(-0.25,0.433,0.3)));\n\t\t\t\t\tw1  = min(w1, sdCylinder(p3.yzx, vec3(-0.25,-0.433,0.3)));\n\t\t\t\t\tw = max(w,-w1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Viertel ausgeschnitten\n\t\t\t\tif(rand >= 0.75)\n\t\t\t\t{\n\t\t\t\t\tfloat w1;  \n\t\t\t\t\t//Einzelnes Eck\n\t\t\t\t\tif(rand == 0.5 || rand2 == 0.5)\n\t\t\t\t\t\trand +=0.001;rand2 += 0.001;\n\t\t\t\t\tif(rand < 0.75)\n\t\t\t\t\t{\n\t\t\t\t\t\tw1 = sdBox(p3 + vec3(0.5 * sign(rand-0.5),0.5 * sign(rand2-0.5),0.0),vec3(0.5 ,0.5,1e28));\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Mitte\n\t\t\t\t\t\tif(rand + rand2 > 1.3)\n\t\t\t\t\t\t\tw1 = min(w1,sdCylinder(p.yzx, vec3(0.0,0.0,0.2)));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tw1 = max(w1,-sdCylinder(p.yzx, vec3(0.0,0.0,0.2)));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tw1 = sdBox(p3 + vec3(0.5 * sign(rand-0.5),0.5 * sign(rand2-0.5),0.0),vec3(0.5 ,0.5,1e28));\t\t\t\t\t\t\n\t\t\t\t\t\tw1 = min(w1,sdBox(p3 + vec3(-0.5 * sign(rand-0.5),-0.5 * sign(rand2-0.5),0.0),vec3(0.5 ,0.5,1e28)));\n\t\t\t\t\t\tw1 = max(w1,-sdCylinder(p.yzx, vec3(0.0,0.0,0.2)));\n\t\t\t\t\t}\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tw = max(w, -max(w1, sdCylinder(p.yzx, vec3(0.0,0.0,0.8))));\n\t\t\t\t}\n\t\t  \n\t\t  //Hollow pipes\n\t\t  if(mod(floor(p.z + 0.35 + globalTime20),6.0) > 0.2)\n\t\t\t  w = max(w,-sdCylinder(p.yzx, vec3(0.0,0.0,0.9)));\n\t\n\tfloat f = w;\n\t    \n\t      //AuÃŸen\n\t\t  w = sdCylinder(pr.yzx, vec3(0.0,0.0,1.0)); \n\t      w = max(w, -sdCylinder(p.yzx, vec3(0.0,0.0,0.9)));\n\t\n\t\t  p.xy = rotate(p.xy,iTime / 3.0);\n\t\t  w = max(w, min((abs(p.y) - 0.1),(abs(p.x) - 0.1)));\n\t\t  f = min(f,w);\n\t\t // f = min(f, sdTorus(pr.yzx, vec2(3.0,0.1)));\n\t\n\t\n\treturn f;\t\t\t  \n\t\t\t\t  \n}\n\nvec3 normal(vec3 p)\n{\n\tfloat c = scene(p);\n\tvec3 delta;\n\tvec2 h = vec2(0.01, 0.0);\n\tdelta.x = scene(p + h.xyy) - c;\n\tdelta.y = scene(p + h.yxy) - c;\n\tdelta.z = scene(p + h.yyx) - c;\n\treturn normalize(delta);\n}\n\n\nvec2 distanceshift(float z, float globalTime12)\n{\n\tfloat sin10 = sin(globalTime12 / 10.0 + 1.0);\n\tfloat sin6 = sin(globalTime12 / 6.0);\n\tvec2 p;\n\t\n\tp.x = cos(z / 20.0) * 20.0 * sin6 - 20.0 * sin6;\n\tp.y = cos(z / 10.0)  * 10.0 * sin10  - 10.0 * sin10;\t\n\t\n\treturn p;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 -1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tmouse = mouse * 2.0 -1.0;\n\tmouse.x *=  iResolution.x / iResolution.y;\n\t\n\tfloat mouseradius = 0.8;\t\t\n\tif(length(mouse) > mouseradius)\n\t\tmouse *= mouseradius / length(mouse);\n\t\n\t\n\tvec3 eye = vec3(mouse/1.3, 0.0);\n\tvec3 dir = normalize(vec3(uv,1.77));\n\t\n\tvec3 ray = eye; \n\t\n\tfor(int i = 0; i < GraphicDetail;i++)\n\t{\t\t\n\t\tray += dir * scene(ray);\n\t}\n\t\n\t// hintergrundfarbe\n\t//vec3 col = vec3(0.2);\n\t\n\tfloat globalTime12 = pow(iTime, 1.2);\t  // the rotating speed\n\tvec2 p = distanceshift(70.0 , globalTime12);\n\tvec3 col = mix( vec3(0.0), vec3(0.8), 1.0-0.3 *(length(uv.xy - vec2(0.03,0.01) * -p ))); \n\t\n\t// sonne richtungsvektor\n\tvec3 sun = normalize(vec3(0.2, 1.0, -0.3));\n\t\n\tif(distance(eye, ray) < float(GraphicDetail))\n\t{\n\t\tvec3 nml = normal(ray);\n\t\t\n\t\t// diffuses licht\n\t\tfloat diff = dot(nml, sun) * 0.6 + 0.4;\n\t\t\n\t\t// spekulares licht\n\t\tvec3 ref = reflect(dir, nml);\n\t\tfloat spec = dot(ref, sun);\n\t\tspec = pow(max(spec, 0.0), 32.0);\n\t\t\n\t\t// finale farbe\n\t\tcol = vec3(0.0, 0.5, 1.0);\n\t\tcol = col * diff + spec;\n\t}\n\t\n\t//Collision Detection\n\tif(scene(eye) <= 0.0)\n\t  col = vec3(1.0,0.0,0.0);\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsX3Rf","date":"1375537920","viewed":2202,"name":"Missile game","username":"asti","description":"You can navigate with the mouse and if you see a red screen you are in the inside of an obstacle.\n","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["3d","distancefield","game"],"hasliked":0,"parentid":"","parentname":""}}