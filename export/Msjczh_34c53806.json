{"ver":"0.1","info":{"id":"Msjczh","date":"1492598625","viewed":84,"name":"Finals Project","username":"OTK","description":"Finals Project","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["aw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float createRectangle(vec2 size, vec2 coordinate, vec2 pos)\n{\n \tfloat valueH = step(pos.x, coordinate.x) - step(size.x + (pos.x), coordinate.x);\n   \tfloat valueV = step(pos.y, coordinate.y) - step(size.y + (pos.y), coordinate.y);\n    return valueH*valueV;\n}\n\nfloat createPolygon(int sides, vec2 uv, float ratio, float x, float y, float rotate)\n{\n    vec2 coor = vec2(x, y);\n    uv -= vec2(coor.x *ratio, coor.y);\n    float a = atan(uv.x,uv.y)+ 3.14159265359 + rotate;\n\tfloat r = 6.28318530718 / float(sides);\n    float dist = cos(floor(.5+a/r)*r-a)*length(uv);\n    \n    return dist;\n}\n\nfloat rand(vec2 uv)\n{\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n\nfloat random (in vec2 uv) {\n    return fract(sin(dot(uv.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 1\nfloat fbm (in vec2 uv) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\nvec3 yellow = vec3(1.0, 1.0, 0.0);\nvec3 green = vec3(0.0, 1.0, 0.0);\nvec3 blue = vec3(0.0, 0.0, 1.0);\nvec3 red = vec3(1.0, 0.0, 0.0);\nvec3 maroon = vec3(0.55, 0.0, 0.0);\nvec3 colorA = vec3(0.390, 0.265, 0.192);\nvec3 colorB = vec3(0.930, 0.493, 1.502);\nvec3 gray = vec3(0.5, 0.5, 0.5);\nvec3 black = vec3(0.0);\nvec3 white = vec3(1.0);\nvec3 brown = vec3(0.3, 0.0, 0.0);\n\n#define result 4\n#if result == 1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv *= ratio;\n    uv *= 20.0;\n    float value = step(15.0 + noise(uv + (iTime) * 2.0), uv.x) - step(18.0 + noise(uv + (iTime) * 2.0), uv.x);\n    float music = texture(iChannel0, vec2(value)).x;\n\tfragColor = vec4(vec3(music), 0.0);\n}\n\n#elif result == 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv *= ratio;\n    vec3 value = vec3(0.960, 0.906, 0.974);\n    float plank = 1.5;\n    plank = floor(uv.x + 20.0);\n    float mask = sin(uv.x * 20.0);\n    vec3 stains = vec3(fbm((uv * 2.2) * 2.0)) * 0.46;\n    vec3 color = mix(value, colorA, vec3(fbm(uv.xx * 20.0)));\n    value = mix(brown, colorA, vec3(fbm(uv.yy * 20.5)));\n    value -= vec3(noise(uv * vec2(500.0, 14.0 * vec3(stains)) - noise(uv * vec2(100.0, 64.0)))* 0.3) * color;\n\tfragColor = vec4(value,1.0);\n}\n\n#elif result == 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv *= ratio;\n    uv *= 3.0;\n    vec3 value = vec3(0.860, 0.806, 0.574);\n    vec3 stains = vec3(fbm((uv * 2.2) * 1.0)) * 0.46;\n    float plank = 1.5;\n    plank = floor(uv.x + 20.0);\n    float mask = sin(uv.x * 20.0);\n    vec3 color = mix(blue, white, smoothstep(0.35, 0.15, stains) - smoothstep(0.52, 0.6, stains));\n\tfragColor = vec4(color,1.0);\n}\n\n#elif result == 4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float value = 0.0;\n    float id = floor(uv.y * 100.0);\n    float r = rand(vec2(id));\n    uv.x += r;\n    uv = fract(uv + -((iTime * iMouse.x / iResolution.x) * r * noise(uv)));\n    value = step(0.0 * r, uv.x) - step(r * iMouse.y / iResolution.y, uv.x);\n\tfragColor = vec4(vec3(value), 0.0);\n}\n\n#elif result == 5\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv *= ratio;\n    uv *= 20.0;\n    float value = step(15.0 + noise(uv + (iTime) * 2.0), uv.y) - step(15.5 + noise(uv + (iTime) * 2.0), uv.y);\n    value += step(17.0 + noise(uv + (iTime) * 2.0), uv.y) - step(17.5 + noise(uv + (iTime) * 2.0), uv.y);\n    value += step(13.0 + noise(uv + (iTime) * 2.0), uv.y) - step(13.5 + noise(uv + (iTime) * 2.0), uv.y);\n    value += (1.0 - step(7.0, createPolygon(3, uv + noise(uv + iTime), ratio, 15.5, 16.0, 0.52)));\n\tfragColor = vec4(vec3(value), 0.0);\n}\n\n#elif result == 6\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv *= ratio;\n    uv *= 4.0;\n    vec3 stains = vec3(fbm((uv * 2.2) * 1.0)) * 0.46;\n    vec3 color = mix(maroon, yellow, smoothstep(0.24, 0.25, stains) - smoothstep(0.27, 0.28, stains));\n\tfragColor = vec4(color,1.0);\n}\n\n#elif result == 7\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv *= ratio;\n    uv *= 4.0;\n    vec3 value = vec3(0.860, 0.806, 0.574);\n    vec3 stains = vec3(fbm((uv * 2.2) * 1.0)) * 0.46;\n    float plank = 1.5;\n    plank = floor(uv.x + 20.0);\n   \n    float mask = sin(uv.x * 20.0);\n    vec3 color = vec3(fbm(uv) * stains);\n    color = mix(green, blue, smoothstep(0.35, 0.15, stains));\n\tfragColor = vec4(color,1.0);\n}\n\n#elif result == 8\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv *= ratio;\n    uv *= 3.0;\n    vec3 value = vec3(0.860, 0.806, 0.574);\n    vec3 stains = vec3(fbm((uv * 2.2) * 1.0)) * 0.46;\n    float plank = 1.5;\n    plank = floor(uv.x + 20.0);\n   \n    float mask = sin(uv.x * 20.0);\n    vec3 color = vec3(fbm(uv) * stains);\n    color = mix(gray, white, smoothstep(0.35, 0.15, stains) - smoothstep(0.52, 0.6, stains));\n\tfragColor = vec4(color,1.0);\n}\n\n#endif","name":"Image","description":"","type":"image"}]}