{"ver":"0.1","info":{"id":"wlKXWz","date":"1600462628","viewed":101,"name":"Draw a segment","username":"GCScholar","description":"Draw a 2D segment between to points","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["line","segment","drawline","drawasegment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Draw return 1.0 if the point is closed to the segment less than the thickness\n#define drawLine(A, B, r) smoothstep(r,0.,distanceFromSegment(U, A, B))\n\n// Draw a segment between A and B, with thickness r.\n// It computes the distance of a point from a line and return it\n//  if the distance is 0 the point belong to the line\nfloat distanceFromSegment(vec2 U, vec2 A, vec2 B) \n{\n\tvec2 UA = U - A;\n    vec2 BA = (B - A);\n    \n    float s = dot(UA, BA) / length(BA);   // scalar projection of U-A on B-A\n    s = s / length(BA); \t\t\t\t  // normalize the projection value in the range [0,1], \n    \t\t\t\t\t\t\t\t      //  a value of 0 means the projection correspond to A, 1 to B,\n    \t\t\t\t\t\t\t\t\t  //  in between the projection is inside the segment, \n                                          //  outside [0,1] the projection is outside the segment.\n    s = clamp(s, 0., 1.);                 // If the scalar projection is outside [0,1], its value is clamped to \n                                          //  0 or 1 ...\n   \t\n    return length(UA - s*BA);          \t  // ... so here we compute the distance of U from its projection if it is\n                                          // inside the segment, or from the extreme points A or B if it is outside\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizing coordinates: the center of the screen is (0,0)\n    //  and the coordinates range from -1 to 1 along the y axis\n\tvec2 U = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n     \n    // The size of 1 pixel in normalized coordinates\n    float px_size = 2. / iResolution.y;\n    \n    // Thickness\n    float thickness = px_size;\n    \n    // The segments points\n    vec2 A = vec2(-1.0,-0.5);\n    vec2 B = vec2(-0.5,0.5);\n    vec2 C = vec2(0.0,-0.5);\n    vec2 D = vec2(0.5,0.5);\n    vec2 E = vec2(1.0,-0.5);\n    \n    // If the point belong at one line the value will be 1., otherwise 0.\n    float f = drawLine(A, B, thickness)\n        \t +drawLine(B, C, thickness)\n        \t +drawLine(C, D, thickness)\n        \t +drawLine(D, E, thickness);\n    \n    fragColor = vec4(f,f,f,1.);\n}","name":"Image","description":"","type":"image"}]}