{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Takashi Furuya, https://github.com/takfuruya\n// GPU Programming and Architecture Hackathon, University of Pennsylvania\n// http://www.seas.upenn.edu/~cis565/\n\n// Forked from:\n//https://www.shadertoy.com/view/4ss3DB\n\n#define pi 3.141592653589793238462643383279\n#define pi_inv 0.318309886183790671537767526745\n#define pi2_inv 0.159154943091895335768883763372\n\nvec2 complex_mul(vec2 factorA, vec2 factorB){\n  return vec2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\n}\n\nvec2 complex_div(vec2 numerator, vec2 denominator){\n   return vec2( numerator.x*denominator.x + numerator.y*denominator.y,\n                numerator.y*denominator.x - numerator.x*denominator.y)/\n          vec2(denominator.x*denominator.x + denominator.y*denominator.y);\n}\n\nvec2 wrap_flip(vec2 uv){\n\treturn vec2(1.)-abs(fract(uv*.5)*2.-1.);\n}\n \nfloat border(vec2 domain, float thickness){\n   vec2 uv = fract(domain-vec2(0.5));\n   uv = min(uv,1.-uv)*2.;\n   return clamp(max(uv.x,uv.y)-1.+thickness,0.,1.)/(thickness);\n}\n\nfloat circle(vec2 uv, vec2 aspect, float scale){\n\treturn clamp( 1. - length((uv-0.5)*aspect*scale), 0., 1.);\n}\n\nfloat sigmoid(float x) {\n\treturn sin(x)+1.3;//2./(1. + exp2(-x)) - 1.;\n}\n\nfloat smoothcircle(vec2 uv, vec2 center, vec2 aspect, float radius, float sharpness){\n\treturn 0.5 - sigmoid( ( length( (uv - center) * aspect) - radius) * sharpness) * 0.5;\n}\n\nfloat lum(vec3 color){\n\treturn dot(vec3(0.30, 0.59, 0.11), color);\n}\n\nvec2 spiralzoom(vec2 domain, vec2 center, float n, float spiral_factor, float zoom_factor, vec2 pos){\n\tvec2 uv = domain - center;\n\tfloat angle = atan(uv.y, uv.x);\n\tfloat d = length(uv);\n\treturn vec2( angle*n*pi2_inv + log(d)*spiral_factor, -log(d)*zoom_factor) + pos;\n}\n\nvec2 mobius(vec2 domain, vec2 zero_pos, vec2 asymptote_pos){\n\treturn complex_div( domain - zero_pos, domain - asymptote_pos);\n}\n\n\nvec3 gear(vec2 domain, float phase, vec2 pos){\n\tfloat angle = atan(domain.y - pos.y, domain.x - pos.x);\n\tfloat d = 0.2 + sin((angle + phase) * 10.)*0.1;\n\tvec3 col = /*texture( iChannel1, domain/1.0, -100.0 ).xyz*0.01;//*/smoothcircle(domain, pos, vec2(1), d, 128.)*vec3(1.);\n\tcol = mix(col, vec3(1,0.8,0), smoothcircle(domain, pos, vec2(1), 0.05, 256.));\n\treturn col;\n}\n\nvec3 geartile(vec2 domain, float phase){\n\tdomain = fract(domain);\n\treturn \n\t\tgear(domain, -phase, vec2(-0.25,0.25)) + \n\t\tgear(domain, phase, vec2(-0.25,0.75)) + \n\t\ttexture( iChannel0, domain/1.0, -100.0 ).xyz + \n\t\tgear(domain,- phase, vec2(1.25,0.75)) + \n\t\tgear(domain, -phase, vec2(0.25,-0.25)) + \n\t\tgear(domain, phase, vec2(0.75,-0.25)) + \n\t\tgear(domain, phase, vec2(0.25,1.25)) + \n\t\tgear(domain, -phase, vec2(0.75,1.25)) + \n\t\tgear(domain, phase, vec2(0.25,0.25)) + \n\t\tgear(domain, -phase, vec2(0.25,0.75)) + \n\t\tgear(domain, -phase, vec2(0.75,0.25)) + \n\t\tgear(domain, phase, vec2(0.75,0.75));\t\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\t// aspect-ratio correction\n\tvec2 aspect = vec2(1.,iResolution.y/iResolution.x);\n\tvec2 uv_correct = 0.5 + (uv -0.5)/ aspect.yx;\n\tvec2 mouse_correct = 0.5 + ( iMouse.xy / iResolution.xy - 0.5) / aspect.yx;\n\t\t\n\tfloat phase = iTime*0.01;\n\tfloat dist = 0.75;\n\tvec2 uv_bipolar = mobius(uv_correct, vec2(0.5 - dist*0.5, 0.5), vec2(0.5 + dist*0.5, 0.5));\n\tuv_bipolar = spiralzoom(uv_bipolar, vec2(0.), 5., -0.125*pi, 0.8, vec2(-0.125,0.125)*phase);\n\tuv_bipolar = vec2(-uv_bipolar.y,uv_bipolar.x); // 90Â° rotation \n\n\tvec3 gear = geartile(uv_bipolar, -phase*1.);\n\t\n\tfragColor.xyz = mix( vec3(0), vec3(0.1,0.2,0.4), uv.y);\t\t\n\tfragColor.xyz = mix(fragColor.xyz, vec3(1), gear); // blend\n\tfragColor.w = 1.;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ls2GRW","date":"1384659712","viewed":512,"name":"Starry Night","username":"takfuruya","description":"By Gogh?","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["star","night"],"hasliked":0,"parentid":"","parentname":""}}