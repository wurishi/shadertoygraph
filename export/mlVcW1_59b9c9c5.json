{"ver":"0.1","info":{"id":"mlVcW1","date":"1700196620","viewed":278,"name":"Truch [333]","username":"Xor","description":"Too tired to golf further tonight. Ideas are welcome!","likes":39,"published":1,"flags":0,"usePreview":0,"tags":["3d","truchet","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"Truch\" by @XorDev\n    \n    Experiments with truchets in 3D.\n    \n    Based on Truchet Blobs: shadertoy.com/view/Nljyzh\n    Inspired by @kamoshika_vrc: X.com/kamoshika_vrc\n    \n    X: X.com/XorDev/status/1725373145597485150\n    Twigl: twigl.app/?ol=true&ss=-NjQ_-41acvGMZ5Aj9Ib\n    \n    <512 chars playlist: https://www.shadertoy.com/playlist/N3SyzR\n    -5 Thanks to FabriceNeyret2\n*/\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Iterator, raymarch step size and total marched distance.\n    float i,s,T;\n    //Raymarch loop (clear fragcolor, loop 100 times and add shading using SDF)\n    for( O*=i ; i++<1e2 ; O += 1e-3/(.1-s) )\n    {\n        //Resolution for scaling\n        vec3 r = iResolution,\n        //Compute projected sample position with matrix for rotation\n        p = vec3( (I+I-r.xy)/r.x *T ,T-90. )*.1 * mat3(1,-1,5, 6,0,2, 0,5,4),\n        //Polar/log coordinates\n        P = vec3( atan(p.z,p.y)*.95, iTime - log(s=length(p)*.1) , 0 ) *3.,\n        //Cell coordinates\n        c = ceil(P),\n        //This flips the sign of cells in a checkerboard pattern\n        //and then pseudo-randomly flips the x sign\n        S = cos(ceil( cos(c-c.y) *(c+c.x) )*acos(-1.));\n        //Marches forward, computing the truchet SDF\n        T -= s = clamp( ( .5 - length( min(P=fract(P*S), 1.-P.yxz) ) ) *S*s , p-5. , p ).x;\n    }\n}\n/*\nvoid mainImage(out vec4 O, vec2 I)\n{\n    O*=0.;\n    for(float i,s,T;i++<1e2;O+=1e-4/(.01-s))\n    {\n        vec3 r=iResolution,\n        p=vec3((I+I-r.xy)/r.x*T,T-9.)*mat3(6,0,2,0,5,4,1,-1,4)*.1,\n        P=vec3(atan(p.y,p.x)*.95,iTime-log(s=length(p)),0)*3.,\n        c=ceil(P),\n        S=cos(ceil(cos(c-c.y)*(c+c.x))*acos(-1.));\n        T-=s=clamp((.5-length(min(P=fract(P*S),1.-P.yxz)))*S.x*s*.1,p.z-.5,p.z);\n    }\n}\n*/","name":"Image","description":"","type":"image"}]}