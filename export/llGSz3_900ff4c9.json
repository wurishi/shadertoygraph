{"ver":"0.1","info":{"id":"llGSz3","date":"1485387770","viewed":2546,"name":"Simple Cheap Box Blur","username":"stoyan3d","description":"Simple box blur study. It's done in two passes to make this as cheap as possible.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["blur","fast","cheap","box","imageeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float kernel = 10.0;\nconst float weight = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 sum = vec3(0);\n    float pixelSize = 1.0 / iResolution.x; \n    \n    // Horizontal Blur\n    vec3 accumulation = vec3(0);\n    vec3 weightsum = vec3(0);\n    for (float i = -kernel; i <= kernel; i++){\n        accumulation += texture(iChannel0, uv + vec2(i * pixelSize, 0.0)).xyz * weight;\n        weightsum += weight;\n    }\n    \n    sum = accumulation / weightsum;\n    \n    fragColor = vec4(sum, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float kernel = 10.0;\nconst float weight = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 sum = vec3(0);\n    float pixelSize = 1.0 / iResolution.y; \n    \n    // Vertical Blur\n    vec3 accumulation = vec3(0);\n    vec3 weightsum = vec3(0);\n    for (float i = -kernel; i <= kernel; i++){\n        accumulation += texture(iChannel0, uv + vec2(0.0, i * pixelSize)).xyz * weight;\n        weightsum += weight;\n    }\n    \n    sum = accumulation / weightsum;\n    \n    fragColor = vec4(sum, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}