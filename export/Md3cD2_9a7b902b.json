{"ver":"0.1","info":{"id":"Md3cD2","date":"1520211331","viewed":228,"name":"Basic Procedural Textures","username":"WQS33","description":"basic procedural textures","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","repeating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//draw 2D checker board\nvoid CheckerBoard(in vec2 uv, in float widthDiv, out float intensity){\n    uv = mod(uv * vec2(widthDiv, widthDiv * iResolution.y /iResolution.x), vec2(1.0));\n    vec2 value = uv - vec2(0.5);\n    intensity = float(value.x * value.y > 0.0);\n}\n\n\n//draw 2D checker board anti-aliasing version WIP\nvoid CheckerBoardAA(in vec2 uv, in float widthDiv,in int subPix, out float intensity){\n    uv = mod(uv * vec2(widthDiv, widthDiv * iResolution.y /iResolution.x), vec2(1.0));\n    vec2 value = uv - vec2(0.5);\n    intensity = float(value.x * value.y > 0.0);\n}\n\n//draw 2D grid\nvoid Grid2D(in vec2 uv, in float widthDiv, in float edgeWidth, out float intensity){\n    uv = mod(uv * vec2(widthDiv, widthDiv * iResolution.y /iResolution.x), vec2(1.0));\n    vec2 value = abs(uv - vec2(0.5)) - vec2(edgeWidth * 0.5);\n    intensity = float(min(value.x, value.y) < 0.0);\n}\n\n//draw grid of spheres\nvoid SphereGrid(in vec2 uv, in float widthDiv, in float radiusPre, out float intensity){\n    uv = mod(uv * vec2(widthDiv, widthDiv * iResolution.y /iResolution.x), vec2(1.0));\n    vec2 value = uv - vec2(0.5);\n    intensity = float(distance(value, vec2(0.0)) > radiusPre);\n}\n\n//draw bricks \nvoid Bricks(in vec2 uv, in vec2 div, in float edgeWidth, out float intensity){\n    vec2 orinal_uv = uv;\n    uv = mod(uv * div, vec2(1.0));\n    float shift = mod(floor(orinal_uv.y * div.y), 2.0);\n    //uv *= shift;\n    uv = mod(uv + vec2(0.5 * shift, 0.0), vec2(1.0)) + vec2(0.5);\n    vec2 value = abs(uv - vec2(0.5)) - vec2(edgeWidth * 0.5);\n    intensity = float(min(value.x, value.y) > 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float intensity = 0.0;\n    \n    \n    //use procedural functions\n    //CheckerBoard(uv, 4.0, intensity);\n    //Grid2D(uv, 9.0, 0.03, intensity);\n    //SphereGrid(uv, 9.0, 0.4, intensity);\n    Bricks(uv, vec2(4, 6), 0.03, intensity);\n    \n    vec3 col = vec3(intensity);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(uv, 0.0,1.0);\n}","name":"Image","description":"","type":"image"}]}