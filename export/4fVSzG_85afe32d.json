{"ver":"0.1","info":{"id":"4fVSzG","date":"1716024836","viewed":61,"name":"Phase accumulator","username":"peremoya2000","description":"A simple sound changing frequencies thanks to a phase accumulator. Resembles sound of a Spanish ambulance.","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float mask = sin(iTime)*.5+.5;\n\n    // Output to screen\n    fragColor = vec4(col*mask,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TAU 6.28318530718\n#define PERIODE 12.565893\n#define START_FREQUENCY 440.\nvec2 mainSound( int samp, float time )\n{\n    //Mod to avoid losing precission\n    time = mod(time, PERIODE);\n\n    //To accumulate phase we need define the advance of rotations as a the indefinite integral of the frequency over time function   \n    float phase = (START_FREQUENCY*time-cos(time)*START_FREQUENCY*.5) * TAU;\n\n    return vec2(.2*sin(phase));\n}","name":"Sound","description":"","type":"sound"}]}