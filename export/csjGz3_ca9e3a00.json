{"ver":"0.1","info":{"id":"csjGz3","date":"1668019446","viewed":71,"name":"Seamless 3D voronoi diagram","username":"Famousghost","description":"Simple algorithm to create seamless 3D voronoi diagram","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["voronoiseamless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 1.0f - texture(iChannel0, uv * 2.0f).aaa;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0.0f);\n    \n    int numOfCells = DENSITY;\n    float cellSize = 1.0f / float(numOfCells);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n;\n    vec3 points[DENSITY * DENSITY * DENSITY];\n    for(int x = 0; x < numOfCells; ++x)\n    {\n        for(int y = 0; y < numOfCells; ++y)\n        {\n            for(int z = 0; z < numOfCells; ++z)\n            {\n                points[x + numOfCells * (y + z * numOfCells)] = hash(vec3(x, y, z) * cellSize, radians(ANGLE_OFFSET));\n            }\n        }\n    }\n    float resultDist = 100.0f;\n    //It can be done with one loop and array of offsets, but this way also works fine\n    for(int i = -1; i <= 1; ++i)\n    {\n\n        for(int j = -1; j <= 1; ++j)\n        {\n            for(int k = -1; k <= 1; ++k)\n            {\n                for(int x = 0 ; x < numOfCells; ++x)\n                {\n                    for(int y = 0; y < numOfCells; ++y)\n                    {\n                        for(int z = 0; z < numOfCells; ++z)\n                        {\n\n                            vec3 offset = vec3(i, j, k) * float(numOfCells) * cellSize;\n                            vec3 point = points[x + numOfCells * (y + z * numOfCells)];\n                            float dist = length(vec3(uv, mod(iTime * 0.1f, 1.0f)) - point - offset);\n\n                            if(resultDist > dist)\n                            {\n                                resultDist = dist;\n                                col = vec4(point, clamp(dist, 0.0f, 1.0f));\n                            }\n                        }\n\n                     }\n                 }\n             }\n          }\n    }\n    \n    fragColor = col;\n    //fragColor = vec4(vec3(resultDist) ,1.0f);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define DENSITY 4\n#define ANGLE_OFFSET 45.0\n\nvec3 hash(in vec3 uv, in float offset)\n{\n    float x = sin(dot(uv, vec3(11.1434f, 19.1343324f, 33.3423423f)));\n    float y = sin(dot(uv, vec3(33.34234234, 121.34242332f, 333.34423432f)));\n    float z = sin(dot(uv, vec3(213.134423f, 443.34234324f, 534.33213214f)));\n    \n    vec3 u = vec3(x, y, z) * 4342387.4234234f;\n    \n    return vec3(sin(u.x * offset) * 0.5f + 0.5f, cos(u.y * offset) * 0.5f + 0.5f, cos(u.z * offset) * 0.5f + 0.5f);\n}\n","name":"Common","description":"","type":"common"}]}