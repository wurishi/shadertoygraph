{"ver":"0.1","info":{"id":"Mt2cRV","date":"1509379444","viewed":212,"name":"Spatial Transform (v2.0)","username":"timeiskey","description":"NEW AND IMPROVED;\n\nalso this is reminiscent of the beginning of vector calculus;","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle( vec2 uv, vec2 pos, float r, float blur )\n{\n\tfloat d = length( pos - uv );\n\tfloat c = smoothstep( r, r-blur, d );\n    return c;\n}\n\nfloat fast_circle( vec2 uv, vec2 pos, float r, float blur )\n{\n    if( (abs(pos.x - uv.x) < blur) && (abs(pos.y - uv.y) < blur) )\n    {\n    \treturn 1.0;\n    }\n\telse\n    {\n    \treturn 0.0;\n    }\n}\n\n#define PI 3.14159\n#define TWO_PI 2.0*PI\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //\tnormalized coordinate of current pixel\n\tvec2 uv = fragCoord / iResolution.y;\n    uv *= 4.0;\n        \n    float blur = 2.0 / iResolution.y;\n    float time = sin(iTime) * TWO_PI;\n    \n    //\tDRAW\n    vec3 c = vec3( 0.0 );\n    \n    //\tgrid of circles\n    float xpos;\n    float ypos;\n    for( float x = 0.02; x <= 1.0; x+= 0.02 )\n    {\n \t\tfor( float y = 0.02; y <= 1.0; y+= 0.02 )\n        {   \n            xpos = 3.0 + x + cos(time * y);\n            ypos = 1.5 + y + sin(time * x);\n            c += fast_circle( uv, vec2( xpos, ypos ), 0.01, blur );\n        }\n    }\n    \n\tfragColor = vec4( c ,1.0);\n}","name":"Image","description":"","type":"image"}]}