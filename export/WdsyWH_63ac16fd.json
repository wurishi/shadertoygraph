{"ver":"0.1","info":{"id":"WdsyWH","date":"1584728066","viewed":388,"name":"fibrillation / propag automata","username":"FabriceNeyret2","description":"spontaneous sync.\n\n- cell transmit influx only if receptive (and alive)\n- after impulsed, has refractory delay #delay\n- some cells get randomly excited with low proba #freq\n  but only in the blue zone left to #p\n- mouse paint to kill cells in some areas","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["automata","forestfire","cardiacfibrillation","synchronisation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    O = T(U); O.x /= delay;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// O.x : cell excitation state (time to be excitable again). \n// O.y : alive state (0 = alive)\n// O.z : shows spontaneous excitation (at low proba) area\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( iFrame == 0 ) {    // init\n        O = vec4(0);\n        if ( U.x < p*R.x /* && hash(U) > 1. - delay * freq */ ) \n            O.x = ceil( delay * hash(U+.5) ), O.z = .3;\n        return; \n    }\n    \n    O = T(U);                                                    // previous state\n    \n    if ( O.y == 0. )                                             // cell alive\n      if ( O.x == 0.)                                            // excitable cell\n        if ( U.x < p*R.x && hash(U+iTime) > 1.-freq )            // spontaneous impulse\n            O.x = delay;\n        else \n            for ( int k=0; k<9; k++ ) {                          // if excitation front in neighborhood, propagates  \n                vec2 D = vec2(k%3,k/3)-1.;\n                if( iFrame%2 < 1 || D.x*D. y== 0. )              // slows diagonal\n                if ( T(U + D).x == delay ) { O.x = delay; return; } \n            }\n      else O.x--;                                                // refractory period\n    \n    if ( iMouse.z > 0. && length(iMouse.xy-U) < 20. ) O.y = 1., O.x = 0.; // paint necrose\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define delay 60.       // refractory delay before cell get re-excitable ( per frame )\n#define freq   0.0003   // proba of spontaneous excitation ( per cell per frame )\n#define p      .8       // spontaneous excitation only for cell.x < p ( normalized coords)\n\n#define R iResolution.xy\n\n  #define T(U)     texelFetch( iChannel0,ivec2(U) , 0 )\n//#define T(U)     texelFetch( iChannel0,ivec2(U) % ivec2(R) , 0 )  // cyclical world variant\n  #define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n","name":"Common","description":"","type":"common"}]}