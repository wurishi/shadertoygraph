{"ver":"0.1","info":{"id":"mtSyz1","date":"1691463987","viewed":23,"name":"singleeye","username":"luhongdi","description":"you can touch your mouse to trag eye","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["truth","snoiseeye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Tmin 0.1\n#define Tmax 150.0\n#define Raymarch_Time 128\n#define PRESSICON 0.001\n#define AA 5\n#define PI 3.141592653579\n#define TWO_PI 6.28318530718\n#define NUM_OCTAVES 5\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {//return -1.0~1.0\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                     + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\nfloat noise_sum_abs(vec2 p,float f)\n{\n    p = p * 2.0;\n    f += 1.0000 * abs(snoise(p)); p = 2.0 * p;\n    f += 0.5000 * abs(snoise(p)); p = 2.0 * p;\n    f += 0.2500 * abs(snoise(p)); p = 2.0 * p;\n    f += 0.1250 * abs(snoise(p)); p = 2.0 * p;\n    f += 0.0625 * abs(snoise(p)); p = 2.0 * p;\n\n    return f;\n}\n\nfloat noise_sum(vec2 p,float f)//未加绝对值返回值在-2-2\n{\n    p = p * 2.0;\n    f += 1.0000 * (snoise(p)); p = 2.0 * p;\n    f += 0.5000 * (snoise(p)); p = 2.0 * p;\n    f += 0.2500 * (snoise(p)); p = 2.0 * p;\n    f += 0.1250 * (snoise(p)); p = 2.0 * p;\n    f += 0.0625 * (snoise(p)); p = 2.0 * p;\n\n    return f;\n}\nfloat noise_sum0_1(vec2 p,float f)\n{\n    p = p * 2.0;\n    f += 1.0000 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n    f += 0.5000 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n    f += 0.2500 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n    f += 0.1250 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n    f += 0.0625 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n\n    return f;\n}\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    \n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * (snoise(_st)+1.0)*0.5;\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\nfloat fbmnormal ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(00.0);\n\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * (snoise(_st)+1.0)*0.5;\n        _st =  _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\nvec3 beacolor(vec2 New_st,vec3 color1,vec3 color2,vec3 color3,vec3 color4){\n    vec3 color=vec3(0.0);\n    vec2 q = vec2(0.);\n    q.x = fbm( New_st );\n    q.y = fbm( New_st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( New_st + 2.0*q + vec2(1.7,9.2) );\n    r.y = fbm( New_st + 1.0*q + vec2(8.3,2.8));\n\n    float f = fbm(New_st+r);\n\n    color = mix(color1,\n                color2,\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                color3,\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                color4,\n                clamp(length(r.x),0.0,1.0));\n    return color;\n}\n\nfloat sdfpuple(vec2 st,float r){\n    float noisestvalue=noise_sum(vec2(st.x,st.y),0.0);\n    float circler=r+0.01*noisestvalue*abs(cos(20.0*atan(st.y,st.x)));\n    float circle=length(st)-pow(circler,0.9);    \n    return circle;\n}\nfloat sdfhalfpuple(in vec2 st,float r){\n    float noisestvalue=noise_sum(vec2(st.x,st.y),0.0);\n    float circler=r-0.2+0.2*noisestvalue*cos(80.*atan(st.y,st.x));\n    float circle=length(st)-circler;    \n    return circle;\n}\nfloat sdfallpuple(vec2 st,float r){\n    float noisestvalue=noise_sum(vec2(st.x,st.y),0.0);\n    float circler=r+noisestvalue*1.15*cos(90.0*atan(st.y,st.x));\n    float circle=length(st)-circler;    \n    return circle;\n}\nfloat sdfedge(vec2 st,float r){\n    float circler=r;\n    float circle=length(st)-circler;    \n    return circle;\n}\n\n\nvec3 eyeball(vec2 st,float r){\n    vec3 color=vec3(0.0);\n\n    float puple=sdfpuple(st,r+0.0);\n    vec3 puplecolor=vec3(0.1);\n\n    float halfpuple=sdfhalfpuple(st,r+0.3);\n    vec3 halfpuplecolor=beacolor(st,vec3(0.667,0.441,0.200),\n                                    vec3(0.668,0.304,0.101),\n                                    vec3(0.165,0.154,0.062),\n                                     vec3(0.970,0.681,0.235));\n\n    float allpuple=sdfallpuple(st,r+0.6);\n    vec3 allpuplecolor=beacolor(st,vec3(0.161,0.511,0.667),\n                                    vec3(0.172,0.457,0.668),\n                                    vec3(0.016,0.132,0.165),\n                                    vec3(0.198,0.783,0.970));\n\n    float edge=sdfedge(st,r+0.5);\n    vec3 edgecolor=vec3(0.0);\n\n\n    if(puple<0.0){\n        color=puplecolor;\n    }\n    else if(halfpuple<0.0){\n        color=halfpuplecolor;\n    }\n    else if(allpuple<0.0){\n        color=allpuplecolor;\n    }\n    else{\n        color=vec3(0.4);\n    }\n    if(edge>0.0){\n        color=vec3(1.0);\n    }\n\n\n    return color;\n}\nfloat sdfeye(vec2 st,float r){\n    float xx=0.8*st.x;\n    float yy=2.1*st.y;\n    vec2 stt=vec2(xx,yy);\n    float circle=length(stt)-r;\n    return circle;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec2 uv_original=(2.0*fragCoord-iResolution.xy)/iResolution.xy;\n    vec2 uv_ori_cube=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 st =uv_ori_cube*3.0;\n    vec2 mouse=6.0*((iMouse.xy/iResolution.xy)-0.5);\n    vec3 color=vec3(0.0);\n   \n    if (sdfeye(st,2.0)<0.0){\n        if(iMouse.z>0.01){\n            color=eyeball(vec2(st-mouse),0.3);\n        }\n        else{\n            color=eyeball(vec2(st),0.3);\n        }\n        \n    }\n    \n     fragColor = vec4(color,1.0);\n\n}","name":"Image","description":"","type":"image"}]}