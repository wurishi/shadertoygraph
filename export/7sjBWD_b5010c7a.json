{"ver":"0.1","info":{"id":"7sjBWD","date":"1646342276","viewed":1634,"name":"sRGB vs gamma encoding 2","username":"ttg","description":"sRGB is [b]NOT[/b] the same thing as 2.2 gamma !  The error is significant for images with dark tones.\n\nIf top half of image appears consistent: you have true sRGB display pipeline.\nIf bottom half consistent: you have gamma=2.2 (fake sRGB) display.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["gamma","srgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nPlease read full description here:\n\nsRGB is *NOT* the same thing as 2.2 gamma !\nThe error is significant for images with dark tones.\n\nYes, the image should be that dark.\nTry dark theme or fullscreen if you have trouble seeing it.\n\nIf you see any moire patterns, you are on mobile or Mac, or have a calibration\nproblem or screen scaling setting, and the test cannot be used.\n\nIf the top two strips appear consistent in intensity:\n  You have true sRGB (most common standard) display pipeline.\nIf bottom two appear consistent in intensity:\n  You have gamma=2.2 (unfortunately common fake sRGB) display.\n\nExplanation:\n\nThe image is divided into four strips.\nEach represents the same red-green linear gradient.\n\nThe inner two drop into the linear portion of sRGB luminosity encoding curve.\nThe outer two avoid this portion by using a higher value range with halftone\npattern.\n\nThe top half of the image is output with sRGB luminosity encoding.\nThe bottom half is output with gamma 2.2 response encoding.\n\nThe extreme darkness of the image is as intended, the error in difference of\nthese encodings becomes significant in this range.\nBanding is expected and does not make the comparison invalid.\n\nIf you get something other than sRGB consistency, this does not necessarily\nmean your computer is incapable of displaying photographs on the web correctly.\nThere's some chance the deficiency affects only WebGL:  The standard for HTML\ncanvas fails to specify any color space, or even a means of specifying one.\nBrowser developers use this nonstandardization as an excuse to not implement\ncolor management for HTML canvas.\n \nThis can be a problem for WebGL content with wide dynamic luminosity range\n(artistic intent, not to be confused with high-dynamic-range standards) not\nappearing as intended: the distortion to dark colors and values is similar to \nthat of inappropriate gamma corrections for bright images: At the bottom of the\nrange, the gamma of sRGB is NOT 2.2, it is exactly 1.0 !\n\n*/\n\nvec3 srgb_encode (vec3 v) {\n  return mix(12.92*v,1.055*pow(v,vec3(.41666))-.055,lessThan(vec3(.0031308),v));\n}\n\nvoid mainImage (out vec4 d, vec2 f) {\n#define HALFTONE(p) float(int(dot(floor(f),vec2(413,229)))%512<int((p)*512.))\n  vec2 uv = f/iResolution.xy;\n  vec3 col = mix(vec3(1,0,0),vec3(0,1,0),uv.x);\n  col*=.005;\n  if (abs(uv.y*2.-1.)>.5) {\n    col*=3.*HALFTONE(1./3.);\n  }\n  if (uv.y>.5) d.rgb = srgb_encode(col);\n  else         d.rgb = pow(col,vec3(1./2.2));\n}","name":"Image","description":"","type":"image"}]}