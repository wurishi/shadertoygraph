{"ver":"0.1","info":{"id":"mdsBWn","date":"1711244263","viewed":23,"name":"2:shader","username":"bigphoob","description":"Lil effect.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Center origin and fix aspect ratio.\n    vec2 uv = fragCoord / iResolution.xy;\n   \n    // When the rgb value of the whole screen is black the shader cycles between a fractal variation of the effect.\n    if (sin(iTime * 2.0) < 0.0) uv = fract(5.0 * uv);\n    \n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // A square is bounded by a particular x component on the x axis. A square is bounded by a particular\n    // y component on the y axis.\n    float originDist = abs(sin(iTime));\n\n    vec3 col = vec3(1.0);\n    \n    // Creates the outer square.\n    if ((abs(uv.x) < originDist) && (abs(uv.y) < originDist)) col *= 0.0;\n    // Creates the inner square.\n    if ((abs(uv.x) < originDist - abs(sin(0.5 * iTime))) && (abs(uv.y) < originDist - abs(sin(0.5 * iTime)))) col = vec3(1.0);\n    \n    // Creates a pulsing effect used to transition between the fractal variation of the effect.\n    col.r *= abs(sin(iTime * 2.0));\n    col.g *= abs(sin(iTime * 2.0));\n    col.b *= abs(sin(iTime * 2.0));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}