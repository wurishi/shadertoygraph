{"ver":"0.1","info":{"id":"lsBfzh","date":"1499383819","viewed":391,"name":"feel_screen_AB","username":"kloumpt","description":"hu, hu, hu","likes":5,"published":1,"flags":34,"usePreview":0,"tags":["hu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 base_color = texture(iChannel0, uv);\n    //base_color = vec(1.0);\n    fragColor = base_color;\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define IN_SHADERTOY 1\n\n#ifndef IN_SHADERTOY\n    uniform sampler2D webcam_tex;\n    uniform sampler2D noise_tex;\n\n    uniform sampler2D pass_1_tex;\n    uniform sampler2D pass_2_tex;\n    uniform sampler2D pass_3_tex;\n    uniform sampler2D pass_final_tex;\n\n    uniform vec2 iResolution;\n    uniform float iTime;\n\n    \n\n#else\n\n\t#define webcam_tex iChannel0\n\t#define pass_1_tex iChannel1\n\t//#define pass_final_tex iChannel3\n\n#endif\n\n\nfloat rand(float x) {\n\treturn sin(cos(x * 3479.6321) * 2131.213) * 0.5 + 0.5;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    #ifndef IN_SHADERTOY\n    vec2 webcam_uv = vec2(1.0) - uv;\n    #else\n    vec2 webcam_uv = uv;\n    #endif\n    vec2 off = 1.0 / iResolution.xy * 4.0;\n    \n    vec2 p = uv  + normalize(uv - vec2(0.5)) * off;\n    \n    vec3 color = texture(webcam_tex, webcam_uv).rgb;\n    float feedback_weight = max(0.0, 1.0 - length(color) * 0.1);\n    \n    color = vec3(length(color)) * vec3(0.5 + 0.5 *  cos(iTime * 3.145 / 4.0), 0.5 + 0.5 * cos(iTime * 3.145/4.0 + 123.0), 0.5 + 0.5 * cos(iTime * 3.145/4.0 + 231.0)); \n    \n    color = mix(color, texture(pass_1_tex, p).rgb, step(0.95, feedback_weight));\n    \n    fragColor = vec4(color, 1.0);\n}\n\n\n\n#ifndef IN_SHADERTOY\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n#endif\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define IN_SHADERTOY 1\n\n#ifndef IN_SHADERTOY\n    uniform sampler2D webcam_tex;\n    uniform sampler2D noise_tex;\n\n  uniform sampler2D pass_1_tex;\n  uniform sampler2D pass_2_tex;\n  uniform sampler2D pass_3_tex;\n  uniform sampler2D pass_final_tex;\n\n  uniform vec2 iResolution;\n  uniform float iTime;\n\n    \n#else\n\n\t#define pass_1_tex iChannel0\n\t#define pass_3_tex iChannel0\n\n#endif\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 base_color = texture(pass_1_tex, uv);\n    \n    fragColor = base_color;\n}\n\n\n\n\n#ifndef IN_SHADERTOY\n\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n#endif\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define IN_SHADERTOY 1\n\n#ifndef IN_SHADERTOY\n    uniform sampler2D webcam_tex;\n    uniform sampler2D noise_tex;\n\n  uniform sampler2D pass_1_tex;\n  uniform sampler2D pass_2_tex;\n  uniform sampler2D pass_3_tex;\n  uniform sampler2D pass_final_tex;\n\n  uniform vec2 iResolution;\n  uniform float iTime;\n\n    \n#else\n\n\t#define pass_2_tex iChannel0\n\t#define pass_3_tex iChannel0\n\n#endif\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 base_color = texture(pass_2_tex, uv);\n    \n    fragColor = base_color;\n}\n\n\n\n\n#ifndef IN_SHADERTOY\n\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n#endif\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define IN_SHADERTOY 1\n\n#ifndef IN_SHADERTOY\n    uniform sampler2D webcam_tex;\n    uniform sampler2D noise_tex;\n\n  uniform sampler2D pass_1_tex;\n  uniform sampler2D pass_2_tex;\n  uniform sampler2D pass_3_tex;\n  uniform sampler2D pass_final_tex;\n\n  uniform vec2 iResolution;\n  uniform float iTime;\n\n    \n#else\n\n\t#define pass_3_tex iChannel0\n\n#endif\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 base_color = texture(pass_3_tex, uv);\n    \n    fragColor = base_color;\n}\n\n\n\n\n#ifndef IN_SHADERTOY\n\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n#endif\n","name":"Buffer D","description":"","type":"buffer"}]}