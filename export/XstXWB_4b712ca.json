{"ver":"0.1","info":{"id":"XstXWB","date":"1461337947","viewed":1417,"name":"Tiling a Texture","username":"Dave_Hoskins","description":"Creating a simple tiled texture. Merging the left and right edges together and then doing the top and bottom on a second pass.\nMost of Shadertoy's textures are tile-able anyway.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["texture","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This just shows the final result tiled.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, (xy * (mod(floor(iTime*.5), 4.0)+1.0)));\n      \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define HASHSCALE1 .1031\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat noise(vec2 xz)\n{\n\tvec2 f = fract(xz);\n\txz = floor(xz);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn\tmix(mix(hash12(xz), hash12(xz + vec2(1.0, 0.0)), u.x),\n\tmix(hash12(xz + vec2(0.0, 1.0)), hash12(xz + vec2(1.0, 1.0)), u.x), u.y);\n}\nfloat FBM(vec2 p)\n{\n    float a = .65;\n    float o = 0.0;\n\n    for (int i = 0; i < 8; i++)\n    {\n        float v = noise(p);\n            \n        v = pow(1.0-abs(v-.5)*2., 2.4);\n        o += v * a;\n        a *= .5;\n        p *= 2.2;\n        \n    }\n    return min(o, 1.);\n}\n//=============================================================\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(FBM(3200.+xy+floor(iTime*.125)));\n    col.z = smoothstep(0.2,.4, col.x)*.7 ;\n    fragColour = vec4(col, 1.);\n    \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// .0 - .5\n#define MERGE_START .3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    \n\tfragColor = mix(texture(iChannel0, xy),\n                    texture(iChannel0, vec2(1.-xy.x, xy.y)),\n                  \tsmoothstep(MERGE_START, .5, abs(xy.x-.5))*.5);        \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// .0 - .5\n#define MERGE_START .3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    \n    fragColor = mix(texture(iChannel0, xy),\n                    texture(iChannel0, vec2(xy.x,1.-xy.y)),\n                    smoothstep(MERGE_START, .5, abs(xy.y-.5))*.5);\n}","name":"Buffer C","description":"","type":"buffer"}]}