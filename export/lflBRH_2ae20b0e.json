{"ver":"0.1","info":{"id":"lflBRH","date":"1723389130","viewed":30,"name":"PISSS Shadow LUT","username":"SelfishKrus","description":"Ref:\nGPU Pro2\nNvidia FaceWorks: https://github.com/NVIDIAGameWorks/FaceWorks/blob/1624b67e26b984d393f053fbf2761e5c6207b44e/src/precomp.cpp#L706","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lut","pisss"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// #define GAMMA\n// #define TONE_MAPPING\n#define PI 3.14159265359\n#define PROFILE_WIDTH 256\n\n#define _START 0.5\n#define _END 1.\n\nvec3 ACESToneMapping(vec3 color, float adapted_lum) \n{\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n\n    color *= adapted_lum;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n\n// Gaussian Function\nfloat Gaussian ( float v , float r )\n{\n    return 1.0 / sqrt (2.0 * PI * v ) * exp(- (r * r) / 2.0 / v);\n}\n\nvec3 DiffusionProfile(float r)\n{\n    return Gaussian ( 0.0064 * 1.414 , r ) * vec3( 0.233 , 0.455 , 0.649 ) +\n    \t   Gaussian ( 0.0484 * 1.414 , r ) * vec3( 0.100 , 0.336 , 0.344 ) +\n    \t   Gaussian ( 0.1870 * 1.414 , r ) * vec3( 0.118 , 0.198 , 0.000 ) +\n    \t   Gaussian ( 0.5670 * 1.414 , r ) * vec3( 0.113 , 0.007 , 0.007 ) +\n    \t   Gaussian ( 1.9900 * 1.414 , r ) * vec3( 0.358 , 0.004 , 0.000 ) +\n    \t   Gaussian ( 7.4100 * 1.414 , r ) * vec3( 0.078 , 0.000 , 0.000 ) ;\n}\n\nfloat NvFaceWorksPenumbraMapping(float newPos)\n{\n    return (3. - 2. * newPos) * newPos * newPos;\n}\n\nfloat NewPenumbraMapping(float start, float end, float newPos)\n{\n    return smoothstep(start, end, newPos);\n}\n\nvec3 IntegrateShadowScattering(float penumbraLocation, float penumbraWidth)\n{\n    vec3 totalWeights = vec3(0.);\n    vec3 totalLight = vec3(0.);\n    \n    for(int delta = 0; delta < PROFILE_WIDTH; delta += 1)\n    {\n        float f_delta = float(delta);\n        float newPos = penumbraLocation + f_delta / penumbraWidth;\n        float newPosClamped = min(max(newPos, 0.0f), 1.0f);\n        \n        float light = NewPenumbraMapping(_START, _END, newPosClamped);\n        // float light = NvFaceWorksPenumbraMapping(newPosClamped);\n        \n        vec3 weights = DiffusionProfile(f_delta); // f_delta = distance\n        \n        totalWeights += weights;\n        totalLight += light * weights;\n    }\n    \n    return totalLight / totalWeights;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy; // uv.x - orignal shadow value, uv.y - penumbra width in world space\n    vec3 col = IntegrateShadowScattering(uv.x, 1. / uv.y);\n    #ifdef GAMMA\n        col = pow( col, vec3(0.4545));\n    #endif\n    #ifdef TONE_MAPPING\n        col = ACESToneMapping(col, LUM);\n    #endif \n    fragColor = vec4(col, 1.);\n\n}","name":"Image","description":"","type":"image"}]}