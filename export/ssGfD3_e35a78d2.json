{"ver":"0.1","info":{"id":"ssGfD3","date":"1658903867","viewed":119,"name":"Rhythm_cylinder","username":"Sicheng_Wei","description":"task2 SWS3005_11","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID:\n//\n// GROUP NUMBER:\n//\n// STUDENT NAME:\n// NUS User ID.:\n//\n// STUDENT NAME:\n// NUS User ID.:\n//\n// STUDENT NAME:\n// NUS User ID.:\n//\n// COMMENTS TO GRADER:\n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_PLANES = 1;\nconst int NUM_SPHERES = 8;\n\nconst int ROW_CYLINDERS = 7;\nconst int COL_CYLINDERS = 7;\nconst float CY_RADIUS = 0.6;\nconst float CY_HEIGHT = 1.0;\nconst int NUM_CYLINDERS = ROW_CYLINDERS * COL_CYLINDERS;\n\nconst int NUM_DISK_PLANE = 8;\nconst int NUM_Disk = 8;\n\nconst int NUM_MATERIALS = 3 + NUM_CYLINDERS + 6;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n// The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n    int materialID2;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius, height;\n    int materialID;\n};\n\nstruct Cylinder_t{\n    vec3 center;\n    float radius, height;\n    int materialID;\n};\n\nstruct Disk_t{\n    Plane_t plane;\n    vec3 center;\n    float radius;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nCylinder_t Cylinder[NUM_CYLINDERS];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\nPlane_t Disk_Plane[NUM_DISK_PLANE];\nDisk_t Disk[NUM_Disk];\n\n/////////////////////////////////////////////////////////////////////////////\n// Random Functions Lib.\n/////////////////////////////////////////////////////////////////////////////\nfloat random(float x)\n{\n    float y = fract(sin(x)*100000.0);\n    return y;\n}\n\nvec3 random3( vec3 p )\n{\n    p = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n    dot(p,vec3(269.5,183.3,246.1)),\n    dot(p,vec3(113.5,271.9,124.6)));\n\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the moving sphere.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitMovingSphere(){\n\n    // Circling sphere.\n    vec3 center = vec3( Cylinder[(NUM_CYLINDERS - 1) / 2].center.x,\n    Cylinder[(NUM_CYLINDERS - 1) / 2].center.y + Cylinder[(NUM_CYLINDERS - 1) / 2].height + 0.5 + 0.7,\n    Cylinder[(NUM_CYLINDERS - 1) / 2].center.z );\n    vec3 a = normalize(vec3(1, -2, 1));\n    vec3 b = normalize(vec3(3, 1, -1));\n\n    Sphere[1].center = center + 2. * cos( 1. * iTime) * a + 2.75 * sin( 1. * iTime) * b;\n    Sphere[1].radius = 0.4;\n    Sphere[1].materialID = 2;\n\n    a = normalize(vec3(1, -2, 2));\n    b = normalize(vec3(16, 0, -8));\n    Sphere[2].center = center + 1.5 * cos( 1.5 * iTime) * a + 2.5 * sin( 1.5 * iTime) * b;\n    Sphere[2].radius = 0.4;\n    Sphere[2].materialID = 1;\n\n    a = normalize(vec3(2, 0, 1));\n    b = normalize(vec3(3, 1, -6));\n    Sphere[3].center = center + 1.25 * cos( 3. * iTime) * a + 2. * sin( 3. * iTime) * b;\n    Sphere[3].radius = 0.3;\n    Sphere[3].materialID = 3 + NUM_CYLINDERS + 2;\n\n    a = normalize(vec3(4, -2, 2));\n    b = normalize(vec3(1, 1, -1));\n    Sphere[4].center = center + 1.25 * cos( 3. * iTime) * a + 2. * sin( 3. * iTime) * b;\n    Sphere[4].radius = 0.3;\n    Sphere[4].materialID = 3 + NUM_CYLINDERS + 1;\n\n    a = normalize(vec3(8, -9, 2));\n    b = normalize(vec3(1, 1, 4));\n    Sphere[5].center = center + 0.95 * cos( 4.5 * iTime) * a + 1.75 * sin( 4.5 * iTime) * b;\n    Sphere[5].radius = 0.2;\n    Sphere[5].materialID = 3 + NUM_CYLINDERS + 2;\n\n    a = normalize(vec3(12, -5, 7));\n    b = normalize(vec3(1, 1, -1));\n    Sphere[6].center = center + 0.95 * cos( 4.5 * iTime) * a + 1.75 * sin( 4.5 * iTime) * b;\n    Sphere[6].radius = 0.2;\n    Sphere[6].materialID = 3 + NUM_CYLINDERS + 3;\n\n    a = normalize(vec3(17, -8, 1));\n    b = normalize(vec3(1, 2, -1));\n    Sphere[7].center = center + .5 * cos( 6. * iTime) * a + 1. * sin( 6. * iTime) * b;\n    Sphere[7].radius = 0.1;\n    Sphere[7].materialID = 3 + NUM_CYLINDERS + 4;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the disk.\n/////////////////////////////////////////////////////////////////////////////\nvoid  InitDisk(){\n    float length = 10.0f;\n    float r = 4.0f;\n\n    Disk_Plane[0].A = 0.0;\n    Disk_Plane[0].B = 0.0;\n    Disk_Plane[0].C = 1.0;\n    Disk_Plane[0].D = length;\n    Disk_Plane[0].materialID = 0;\n\n    Disk_Plane[1].A = 0.0;\n    Disk_Plane[1].B = 0.0;\n    Disk_Plane[1].C = 1.0;\n    Disk_Plane[1].D = -length;\n    Disk_Plane[1].materialID = 0;\n\n    Disk_Plane[2].A = 1.0;\n    Disk_Plane[2].B = 0.0;\n    Disk_Plane[2].C = 0.0;\n    Disk_Plane[2].D = length;\n    Disk_Plane[2].materialID = 0;\n\n    Disk_Plane[3].A = -1.0;\n    Disk_Plane[3].B = 0.0;\n    Disk_Plane[3].C = 0.0;\n    Disk_Plane[3].D = length;\n    Disk_Plane[3].materialID = 3 + NUM_CYLINDERS;\n\n    Disk_Plane[4].A = 1.0;\n    Disk_Plane[4].B = 0.0;\n    Disk_Plane[4].C = 1.0;\n    Disk_Plane[4].D = 18.;\n    Disk_Plane[4].materialID = 0;\n\n    Disk_Plane[5].A = 1.0;\n    Disk_Plane[5].B = 0.0;\n    Disk_Plane[5].C = -1.0;\n    Disk_Plane[5].D = 18.;\n    Disk_Plane[5].materialID = 0;\n\n    Disk_Plane[6].A = -1.0;\n    Disk_Plane[6].B = 0.0;\n    Disk_Plane[6].C = 1.0;\n    Disk_Plane[6].D = 18.;\n    Disk_Plane[6].materialID = 0;\n\n    Disk_Plane[7].A = -1.0;\n    Disk_Plane[7].B = 0.0;\n    Disk_Plane[7].C = -1.0;\n    Disk_Plane[7].D = 18.;\n    Disk_Plane[7].materialID = 0;\n\n    Disk[0].plane = Disk_Plane[0];\n    Disk[0].radius = r;\n    Disk[0].center = vec3(0, .25 * r, -length);\n\n    Disk[1].plane = Disk_Plane[1];\n    Disk[1].radius = r;\n    Disk[1].center = vec3(0, .5 * r, length);\n\n    Disk[2].plane = Disk_Plane[2];\n    Disk[2].radius = r;\n    Disk[2].center = vec3(-length, 0.75 * r, 0);\n\n    Disk[3].plane = Disk_Plane[3];\n    Disk[3].radius = r;\n    Disk[3].center = vec3(length, 0.5 * r, 0);\n\n    Disk[4].plane = Disk_Plane[4];\n    Disk[4].radius = r;\n    Disk[4].center = vec3(-9., .25 * r, -9.);\n\n    Disk[5].plane = Disk_Plane[5];\n    Disk[5].radius = r;\n    Disk[5].center = vec3(-9., .5 * r, 9.);\n\n    Disk[6].plane = Disk_Plane[6];\n    Disk[6].radius = r;\n    Disk[6].center = vec3(9., 0.75 * r, -9.);\n\n    Disk[7].plane = Disk_Plane[7];\n    Disk[7].radius = r;\n    Disk[7].center = vec3(9., r , 9.);\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n    Plane[0].materialID2 = 57;\n    \n    \n\n    // Circling sphere.\n    Sphere[1].center = vec3( 1.5 * cos(iTime), 0.5, 1.5 * sin(iTime) );\n    Sphere[1].radius = 0.5;\n    Sphere[1].materialID = 2;\n\n    // Cylinder\n    for(int i = 0; i < ROW_CYLINDERS; i++){\n        for(int j = 0; j < COL_CYLINDERS; j++){\n            Cylinder[i * COL_CYLINDERS + j].radius = CY_RADIUS;\n            Cylinder[i * COL_CYLINDERS + j].center = vec3(float(i) * (CY_RADIUS + 0.2) * 2.0f - float((ROW_CYLINDERS - 1) / 2) * 2.0f * (CY_RADIUS + 0.2),\n            CY_HEIGHT,\n            float(j) * 2.0f * (CY_RADIUS + 0.2) - float((ROW_CYLINDERS - 1) / 2) * 2.0f * (CY_RADIUS + 0.2));\n            Cylinder[i * COL_CYLINDERS + j].height = CY_HEIGHT + (0.3 + random(float(i * COL_CYLINDERS + j))) * sin((2.0 + random(float(i * COL_CYLINDERS + j))) * iTime + random(float(i * COL_CYLINDERS + j)));\n            Cylinder[i * COL_CYLINDERS + j].materialID = 3 + i * COL_CYLINDERS + j;\n            if(i * COL_CYLINDERS + j == (NUM_CYLINDERS - 1) / 2) Cylinder[i * COL_CYLINDERS + j].height = CY_HEIGHT * 3.0f;\n        }\n    }\n\n    InitMovingSphere();\n\n    InitDisk();\n\n    // Center bouncing sphere.\n    Sphere[0].center = vec3( 0.0,\n    Cylinder[(NUM_CYLINDERS - 1) / 2].center.y + Cylinder[(NUM_CYLINDERS - 1) / 2].height + abs(sin(6.0 * iTime)) + 0.7,\n    0.0 );\n    Sphere[0].radius = 0.7;\n    Sphere[0].materialID = 1;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // Blue plastic material\n    for(int i = 0; i < NUM_CYLINDERS; i++){\n        Material[3 + i].k_d = vec3(0.7, 0.7, 0.7) + 0.3 * random3(vec3(float(i), float(i), float(i)));\n        Material[3 + i].k_a = 0.7 * Material[3 + i].k_d;\n        Material[3 + i].k_r = vec3(0.7, 0.7, 0.7) + 0.3 * random3(vec3(float(i), float(i), float(i)));\n        Material[3 + i].k_rg = 0.5 * Material[3 + i].k_r;\n        Material[3 + i].n = 128.0;\n    }\n    \n    \n    Material[3 + (NUM_CYLINDERS - 1) / 2] = Material[1];\n\n    // ball plastic material.\n    Material[3 + NUM_CYLINDERS].k_d = vec3( abs(cos(iTime)), 0.5, abs(sin(iTime)));\n    Material[3 + NUM_CYLINDERS].k_a = 0.2 * Material[3].k_d;\n    Material[3 + NUM_CYLINDERS].k_r = 2.0 * Material[3].k_d;\n    Material[3 + NUM_CYLINDERS].k_rg = 0.5 * Material[3].k_r;\n    Material[3 + NUM_CYLINDERS].n = 64.0;\n\n    // ball plastic material.\n    Material[3 + NUM_CYLINDERS + 1].k_d = vec3( 0.5, 0.8, 0.8 );\n    Material[3 + NUM_CYLINDERS + 1].k_a = 0.2 * Material[2].k_d;\n    Material[3 + NUM_CYLINDERS + 1].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3 + NUM_CYLINDERS + 1].k_rg = 0.5 * Material[2].k_r;\n    Material[3 + NUM_CYLINDERS + 1].n = 128.0;\n\n    // ball plastic material.\n    Material[3 + NUM_CYLINDERS + 2].k_d = vec3( 0.1, 0.5, 0.8 );\n    Material[3 + NUM_CYLINDERS + 2].k_a = 0.2 * Material[2].k_d;\n    Material[3 + NUM_CYLINDERS + 2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3 + NUM_CYLINDERS + 2].k_rg = 0.5 * Material[2].k_r;\n    Material[3 + NUM_CYLINDERS + 2].n = 128.0;\n\n    // ball plastic material.\n    Material[3 + NUM_CYLINDERS + 3].k_d = vec3( 0.5, 0.5, 0.3 );\n    Material[3 + NUM_CYLINDERS + 3].k_a = 0.2 * Material[2].k_d;\n    Material[3 + NUM_CYLINDERS + 3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3 + NUM_CYLINDERS + 3].k_rg = 0.5 * Material[2].k_r;\n    Material[3 + NUM_CYLINDERS + 3].n = 128.0;\n\n    // ball plastic material\n    Material[3 + NUM_CYLINDERS + 4].k_d = vec3( 0.6, 0.5, 0.1 );\n    Material[3 + NUM_CYLINDERS + 4].k_a = 0.2 * Material[2].k_d;\n    Material[3 + NUM_CYLINDERS + 4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3 + NUM_CYLINDERS + 4].k_rg = 0.5 * Material[2].k_r;\n    Material[3 + NUM_CYLINDERS + 4].n = 128.0;\n    \n    //Grey for grid\n    Material[57].k_d = vec3( 0.0, 0.0, 0.0 );\n    Material[57].k_a = vec3( 0.11, 0.06, 0.09 );\n    Material[57].k_r = vec3( 0.05, 0.05, 0.10 );\n    Material[57].k_rg = 0.4 * Material[3].k_r;\n    Material[57].n = 128.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0 + 4.0 * sin(iTime), -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 0.7, 0.7, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( 4.0, 8.0, 3.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 0.7, 0.7, 1.0 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\nout float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\nout float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 oc = ray.o - sph.center;\n    float a = 1.0f;\n    float b = 2.0f * dot(ray.d, oc);\n    float c = dot(oc, oc) - pow(sph.radius, 2.0);\n    float d = b * b - 4.0f * a * c;\n\n    if(d < 0.0f) return false;\n    float t1 = (-b + sqrt(d)) / a * 0.5f, t2 = (-b - sqrt(d)) / a * 0.5f;\n    t = t1 < t2 ? t1 : t2;\n\n    if(t < tmin || t > tmax) return false;\n\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize(hitPos - sph.center);\n\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 oc = ray.o - sph.center;\n    float a = 1.0f;\n    float b = 2.0f * dot(ray.d, oc);\n    float c = dot(oc, oc)  - pow(sph.radius, 2.0);\n    float d = b * b - 4.0f * a * c;\n\n    float t;\n\n    if(d < 0.0f) return false;\n    float t1 = (-b + sqrt(d)) / a * 0.5f, t2 = (-b - sqrt(d)) / a * 0.5f;\n    t = t1 < t2 ? t1 : t2;\n\n    if(t < tmin || t > tmax) return false;\n    return true;\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectCylinder( in Cylinder_t cld, in Ray_t ray, in float tmin, in float tmax,\nout float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    Plane_t top, but;\n    top.A = 0.0, top.B = -1.0, top.C = 0.0, top.D = cld.center.y + cld.height, top.materialID = cld.materialID;\n    but.A = 0.0, but.B = -1.0, but.C = 0.0, but.D = cld.center.y + cld.height, but.materialID = but.materialID;\n\n    float temp_t;\n    vec3 temp_hitpos, temp_hitNormal;\n    if(IntersectPlane(top, ray, tmin, tmax, temp_t, temp_hitpos, temp_hitNormal) || IntersectPlane(but, ray, tmin, tmax, temp_t, temp_hitpos, temp_hitNormal)){\n        vec3 d = temp_hitpos - cld.center;\n        if(d.x * d.x + d.z * d.z < cld.radius * cld.radius){\n            t = temp_t;\n            hitPos = temp_hitpos;\n            hitNormal = temp_hitNormal;\n            return true;\n        }\n    }\n\n    vec3 oc = ray.o - cld.center;\n    float a = ray.d.x * ray.d.x + ray.d.z * ray.d.z;\n    float b = 2.0f * (ray.d.x * oc.x + ray.d.z * oc.z);\n    float c = oc.x * oc.x + oc.z * oc.z - cld.radius * cld.radius;\n    float d = b * b - 4.0f * a * c;\n    if(d < 0.0f) return false;\n\n    d = sqrt(d);\n    float t1 = (-b - d) / 2.0f / a;\n    float t2 = (-b + d) / 2.0f / a;\n    t = t1 < t2 ? t1 : t2;\n\n    if(t < tmin || t > tmax) return false;\n    vec3 hitTemp = ray.o + t * ray.d;\n    if(hitTemp.y > cld.center.y + cld.height) return false;\n\n    hitPos = hitTemp;\n    hitNormal = normalize(vec3(hitPos.x - cld.center.x, 0.0f, hitPos.z - cld.center.z));\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectCylinder( in Cylinder_t cld, in Ray_t ray, in float tmin, in float tmax )\n{\n    Plane_t top, but;\n    top.A = 0.0, top.B = -1.0, top.C = 0.0, top.D = cld.center.y + cld.height, top.materialID = cld.materialID;\n    but.A = 0.0, but.B = -1.0, but.C = 0.0, but.D = cld.center.y - cld.height, but.materialID = but.materialID;\n\n    float temp_t;\n    vec3 temp_hitpos, temp_hitNormal;\n    if(IntersectPlane(top, ray, tmin, tmax, temp_t, temp_hitpos, temp_hitNormal) || IntersectPlane(but, ray, tmin, tmax, temp_t, temp_hitpos, temp_hitNormal)){\n        vec3 d = temp_hitpos - cld.center;\n        if(d.x * d.x + d.z * d.z < cld.radius * cld.radius) return true;\n    }\n    vec3 oc = ray.o - cld.center;\n\n    float a = ray.d.x * ray.d.x + ray.d.z * ray.d.z;\n    float b = 2.0f * (ray.d.x * oc.x + ray.d.z * oc.z);\n    float c = oc.x * oc.x + oc.z * oc.z - cld.radius * cld.radius;\n\n    float d = b * b - 4.0f * a * c;\n\n    if(d < 0.0f) return false;\n\n    d = sqrt(d);\n    float t1 = (-b - d) / 2.0f / a;\n    float t2 = (-b + d) / 2.0f / a;\n\n    float t;\n    t = t1 < t2 ? t1 : t2;\n\n    if(t < tmin || t > tmax) return false;\n\n    vec3 hitPos = ray.o + t * ray.d;\n    if(hitPos.y > cld.center.y + cld.height) return false;\n\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a disk and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectDisk(in Disk_t disk, in Ray_t ray, in float tmin, in float tmax,\nout float t, out vec3 hitPos, out vec3 hitNormal ){\n    float temp_t;\n    vec3 temp_hitpos, temp_hitNormal;\n    if(IntersectPlane(disk.plane, ray, tmin, tmax, temp_t, temp_hitpos, temp_hitNormal)){\n        vec3 d = temp_hitpos - disk.center;\n        if(dot(d, d) <= (disk.radius * disk.radius)){\n            t = temp_t;\n            hitPos = temp_hitpos;\n            hitNormal = temp_hitNormal;\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a disk and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectDisk(in Disk_t disk, in Ray_t ray, in float tmin, in float tmax)\n{\n    float temp_t;\n    vec3 temp_hitpos, temp_hitNormal;\n    if(IntersectPlane(disk.plane, ray, tmin, tmax, temp_t, temp_hitpos, temp_hitNormal)){\n        vec3 d = temp_hitpos - disk.center;\n        if(dot(d, d) <= (disk.radius * disk.radius)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\nin Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n        light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\nout bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    for (int i = 0; i < NUM_PLANES; i++)\n    {\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit && temp_t < nearest_t)\n        {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            \n            //Create grid for the plane whose type = 1\n            float pX = mod(nearest_hitPos.x + 0.8,3.2)-1.6;\n            float pZ = mod(nearest_hitPos.z + 0.8,3.2)-1.6;\n            if(pX*pZ > 0.)\n                nearest_hitMatID = Plane[i].materialID;\n            else\n                nearest_hitMatID = Plane[i].materialID2;\n            \n        }\n    }\n\n    for(int i = 0; i < NUM_SPHERES; i++){\n        temp_hasHit = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t < nearest_t){\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Sphere[i].materialID;\n            hasHitSomething = true;\n        }\n    }\n\n    for(int i = 0; i < NUM_CYLINDERS; i++){\n        temp_hasHit = IntersectCylinder(Cylinder[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t < nearest_t){\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Cylinder[i].materialID;\n            hasHitSomething = true;\n        }\n    }\n\n    for(int i = 0; i < NUM_Disk; i++){\n        temp_hasHit = IntersectDisk(Disk[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t < nearest_t){\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Disk[i].plane.materialID;\n            hasHitSomething = true;\n        }\n    }\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 viewVec = -normalize(ray.d);\n    for(int i = 0; i < NUM_LIGHTS; i++){\n        bool inShadow = false;\n        vec3 lightVec = normalize(Light[i].position - nearest_hitPos);\n        float d = distance(nearest_hitPos, Light[i].position);\n        Ray_t lightRay;\n        lightRay.o = nearest_hitPos;\n        lightRay.d = lightVec;\n        for(int j = 0; j < NUM_PLANES && !inShadow; j++){\n            inShadow = IntersectPlane(Plane[j], lightRay, DEFAULT_TMIN, d);\n        }\n        for(int j = 0; j < NUM_SPHERES && !inShadow; j++){\n            inShadow = IntersectSphere(Sphere[j], lightRay, DEFAULT_TMIN, d);\n        }\n        for(int j = 0; j < NUM_CYLINDERS && !inShadow; j++){\n            inShadow = IntersectCylinder(Cylinder[j], lightRay, DEFAULT_TMIN, d);\n        }\n        for(int j = 0; j < NUM_Disk && !inShadow; j++){\n            inShadow = IntersectDisk(Disk[j], lightRay, DEFAULT_TMIN, d);\n        }\n        I_local += PhongLighting(lightVec, nearest_hitNormal, viewVec, inShadow, Material[nearest_hitMatID], Light[i]);\n    }\n\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 10.0 * sin(0.25 * iTime), 7.5 + 2.5 * cos(0.5 * iTime), abs(10.0 * cos(0.25 * iTime)) );\n    vec3 cam_lookat = vec3( 0.25, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}