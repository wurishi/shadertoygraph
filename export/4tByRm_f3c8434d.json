{"ver":"0.1","info":{"id":"4tByRm","date":"1507822283","viewed":939,"name":"Cubemap to ERP Conversion","username":"4rknova","description":"Cubemap to ERP conversion","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["cubemap","environmentmap","equirectangular","erp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  (3.14159265359) // pi\n#define PIH (1.57079632679) // half pi\n\n#define COMPACT (1)\n\n#if (COMPACT)\n#define DIR dir_compact\t\n#else\n#define DIR dir\t\n#endif\n\n/* Based on:\n** http://paulbourke.net/miscellaneous/cubemaps/\n**\n** Returns a sampling direction for given pixel coordinates\n** This can obviously be written in a more compact way, but\n** the purpose here is to illustrate the transformation in\n** a clear and easy to follow narrative.\n*/\nvec3 dir(vec2 p)\n{\n    /* First calculate spherical coords (theta, phi, R) on\n\t** 2D plane.\n\t** The mapping is simple:\n\t**\n\t** pixel coords    normalized     spherical coords\n\t** [0:w, 0:h]  ->  [-1:1,-1:1] -> [-pi:pi, -pi/2:pi/2]\n\t*/    \n    vec2 uv = p / iResolution.xy * 2. - 1.;\n    uv.x *= PI;  // phi\n    uv.y *= PIH; // theta\n        \n    /* Calculate a direction from spherical coords:\n\t** R = 1\n    ** x = R sin(phi) cos(theta)\n\t** y = R sin(phi) sin(theta)\n\t** z = R cos(phi)\n\t*/\n    return vec3(cos(uv.x)*cos(uv.y)\n              , sin(uv.y)\n              , sin(uv.x)*cos(uv.y));\n}\n\nvec3 dir_compact(vec2 p)\n{\n    #define r iResolution.xy\n    vec2 s = (p/r*2.-1.) * vec2(PI,PIH); // Spherical coords\n    vec4 t = vec4(sin(s), cos(s));       // Precalculated sin/cos values\n    return t.zyx * vec3(t.w, 1, t.w);    // Conversion to direction\n}\n\nvoid mainImage(out vec4 c, in vec2 p)\n{\n    c = vec4(texture(iChannel0, DIR(p)).xyz, 1);\n}","name":"Image","description":"","type":"image"}]}