{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"//2D Voxels by nimitz (stormoid.com) (twitter: @stormoid)\n\n//try the other maps\n#define MAP 1\n#define NUM_LAYERS 46.\n\n#define time iTime\n\nmat3 rotXY( vec2 angle ) \n{\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\t\n\treturn mat3(c.y      ,  0.0, -s.y,\n\t\t\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\t\t\ts.y * c.x, -s.x,  c.y * c.x\t);\n}\n\n#if MAP == 1\nfloat map( vec3 p ) \n{\n\t//vec3 q = mod(pos,c)-0.5*c;\n\tp *= rotXY(vec2(time*.9,time*0.6));\n\tconst float w = 1.5;\n\tvec3 q = abs(p);\n\tfloat d = max(max(q.z,q.y),q.x*0.15)-w;\n\tq*= .7;\n\td = min(d,max(max(q.z,q.x),q.y*0.15))-w;\n\tq*= .5;\n\td = min(d,max(max(q.x,q.y),q.z*0.15))-w;\n\t\n\treturn d;\n}\n#elif MAP == 2\n//sphere/cube subtract\nfloat map( vec3 p )\n{\n\tp *= rotXY(vec2(time*0.6,time*.9));\n\t\t\n\tfloat d1 = length(p)-20.;\n\tfloat d2 = length(max(abs(p)-16., 0.));\n\t\n\treturn max(d2, -d1);\t\n}\n#else\n//heightmap (can handle many layers, 200 works fine here)\nfloat map( vec3 p ) \n{\n\tp *= rotXY(vec2(0.5,10.6));\n\tp.y += sin(p.z*0.1+time)*(3.+sin(time)*1.);\n\tp.y += sin(p.x*0.5+time)*(3.+sin(time)*1.);\n\treturn length(p.y)-2.;\n}\n#endif\n\nvec3 lgt;\n\n//modified from iq's \"Hexagons - distance\" (https://www.shadertoy.com/view/Xd2GR3)\n//return values: x = trigger, y = voxel shading, z = distance to voxel edge, w = lighting\nvec4 voxelize( vec2 p, float bias ) \n{\n\t//displace based on layer\n\tp.x += 0.866025*bias;\n\tp.y += 0.5*bias;\n\t\n\t//setup coord system\n\tvec2 q = vec2( p.x*2.0*0.5773503, p.y + p.x*0.5773503 );\n\tvec2 pi = floor(q);\n\tvec2 pf = fract(q);\n\n\tfloat v = mod(pi.x + pi.y, 3.0);\n\n\tfloat ca = step(1.0,v);\n\tfloat cb = step(2.0,v);\n\tvec2  ma = step(pf.xy,pf.yx);\n\t\n    // distance to borders\n\tvec2 bz = 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy);\n\tfloat e = dot( ma, bz );\t\n\t\n\t//voxel shading\n\tfloat top = cb*ma.y+clamp((1.-(ca+ma.y)),0.,1.);\n\tfloat left = 0.5+step(ca,cb)*0.75;\n\t\n\tvec2 j = pi + ca - cb*ma;\n\tfloat sdf = map(vec3(j,bias));\n\t\n\t//faked light (using the normal only, actual lighting gets pretty heavy)\n\tfloat nl = max(dot(normalize(lgt),normalize(vec3(j,bias))),0.);\n\treturn vec4( step(sdf,.01),left+top, e, nl*2. );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    lgt =  vec3(4.+sin(time*0.4)*20.,4.+sin(time*.1)*10.,5.);\n    vec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n\tvec2 bp = p;\n\tp *= 100.+sin(time*0.5)*80.;\n\tp.x += sin(time)*10.;\n\tp.y += cos(time*0.9+0.5)*4.;\n\t\n\tfloat st = sin(time*0.2)*0.3+1.;\n\tvec3 col = vec3(0.);\n\tfor (float i=-NUM_LAYERS/2.;i<NUM_LAYERS/2.;i++) \n\t{\n\t\tvec4 rz = voxelize(p,i);\n\t\t//vec3 colx = (.95 + 0.8*sin( hash11(rz.x+i)*1.5 + 2.0 + vec3(1.5+i*0.2, st*1.5+i*0.1, 1.0+i*0.01) ))*rz.x*4.;\n\t\tvec3 colx = vec3(0.15+cos(time+0.1)*0.1,0.2,0.3+sin(time)*0.1)*rz.x*3.;\n\t\t//borders\n\t\t//colx *= smoothstep(0., 0.1, rz.z);\n\t\t//simple shading\n\t\tcolx *= .4+rz.z*.9;\n\t\t//voxel shading\n\t\tcolx *= rz.y*.5;\n\t\t//faked lighting\n\t\tcolx *= rz.w*0.5+0.5;\n\t\t//painter's algo\n\t\tcol = col*step(colx,vec3(0.))+colx;\n\t\t//max blending (transparency! :P)\n\t\t//col += colx*0.4;\n\t}\n\t\n\tfloat d = distance(lgt,vec3(p,1.));\n\tcol += 1.-smoothstep(0.92,1.,(d*.24));\n\t\n\tfragColor = vec4( col*1.3, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4slXW7","date":"1402436501","viewed":12715,"name":"2D Voxels","username":"nimitz","description":"Insipred by iq's \"Hexagons - distance\" (https://www.shadertoy.com/view/Xd2GR3).  \n\nAny SDF can be used with the voxelize function, it also performs rather well with degenerate SDFs. Feel free to reuse for your shadertoys.","likes":98,"published":1,"flags":0,"usePreview":0,"tags":["2d","voxels","sdf"],"hasliked":0,"parentid":"","parentname":""}}