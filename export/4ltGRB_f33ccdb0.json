{"ver":"0.1","info":{"id":"4ltGRB","date":"1470002491","viewed":586,"name":"brushed metal test","username":"tly","description":"basic brushed metal test","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["spherebrdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nconst float PI = 3.14156;\n\nstruct Ray{\n\tvec3 p,v;\n};\n\t\nstruct Sphere{\n\tvec3 o;\n\tfloat r;\n};\n\t\nstruct Hit{\n\tbool hit;\n\tvec3 p;\n};\n\t\nHit hit(Ray ray,Sphere sphere){\n\tvec3 o = sphere.o - ray.p;\n\tfloat p = - 2.0 * dot(ray.v,o)  / dot(ray.v,ray.v);\n\tfloat q = (dot(o,o) - sphere.r * sphere.r) / dot(ray.v,ray.v);\n\tfloat temp = p*p*0.25 - q;\n\treturn Hit(\n\t\ttemp >= 0.0, temp >= 0.0 ? ray.p + ray.v * (-p*0.5 - sqrt(temp)) : vec3(0)\n\t);\n}\n\nvec3 rotateY(in vec3 v, in float a) {\n\treturn vec3(cos(a)*v.x + sin(a)*v.z, v.y,-sin(a)*v.x + cos(a)*v.z);\n}\n\nvec3 rotateX(in vec3 v, in float a) {\n\treturn vec3(v.x,cos(a)*v.y + sin(a)*v.z,-sin(a)*v.y + cos(a)*v.z);\n}\n\nfloat hash2 (vec2 p) {\n\treturn fract(sin(p.x*13.0 + p.y*15.7)*493347.37);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = vec4(0);\n\tvec2 uv = ( fragCoord.xy / iResolution.xy ) - 0.5;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tRay ray = Ray(vec3(0,0,0),normalize(vec3(uv.x,-uv.y,-1)));\n    ray.v = rotateX(ray.v,-0.4);\n    ray.v = rotateY(ray.v,0.1 * iTime);\n    ray.p = rotateX(5.0 * vec3(0,0,1),-0.4);\n    ray.p = rotateY(ray.p,0.1 * iTime);\n\tSphere sphere = Sphere(vec3(0.0),2.0);\n\t\n\tHit h = hit(ray,sphere);\n\t\t\n    if(h.hit){\n        vec3 n = normalize(sphere.o - h.p);\n    \tvec3 l = normalize(vec3(0,0.6,-1));\n\n\t\tfloat angleX = (atan(n.x,n.y) + PI)/(2.0 * PI);\n\t\tfloat angleY = acos(n.z)/PI;\n        \n        vec3 t = normalize(cross(n,vec3(0,1,0)));\n        vec3 b=normalize(cross(n,t)); \n        \n        float sumWeight = 0.;\n        fragColor.w = 1.0;\n        for(int i = 0; i < 100; i++){\n            //float u = hash2(vec2(float(i) + 984.1 * n.x * 453.0,n.y * 3420.0));\n            float u = float(i) / 100.0;\n            float w = 2.0 * (0.5 - abs(u-0.5));\n            //float w = 1.0;\n            sumWeight += w;\n            \n            vec3 r = vec3(0,0,1);\n            r = rotateY(r,0.6 * (u-0.5));\n            \n            vec3 n2 = mat3(b,t,n) * r;\n            //vec3 n2 = mat3(t,b,n) * r;\n            float light = max(0.,dot(n2,l));\n    \t\tvec3 col = texture(iChannel0,reflect(ray.v,n2)).xyz;\n            fragColor.xyz += w* mix(vec3(light),vec3(col),0.8);\n        }\n        fragColor.xyz /= sumWeight;\n    }else{\n    \tfragColor = vec4(texture(iChannel0,ray.v).xyz,1);\n    }\n\n}","name":"Image","description":"","type":"image"}]}