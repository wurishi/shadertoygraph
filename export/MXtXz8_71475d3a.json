{"ver":"0.1","info":{"id":"MXtXz8","date":"1718839741","viewed":135,"name":"whirling inferno","username":"pb","description":"yup - mandelbox (more or less)","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["fractal","raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip,bertani@gmail.com\n//Buffer A is where it is at\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    \n    vec2 texel = 1./iResolution.xy;\n    vec4 total_color;\n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n    fragColor = total_color;\n    \n \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\n//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float  glow=0., glow2=0., mmaxDist=100.;\nvec3 ro, light_dir;\n\nmat2 rot(float an) {return mat2(cos(an),-sin(an),sin(an),cos(an));}\n\nfloat de(vec3 p) {\n  vec3 origP= p;  \n  \n  float nn = 2.;\n  p = mod(p  + nn, 2.*nn) -nn;\n \n  vec4 q0 = vec4 (p, .6), q = q0; float i=0.;\n  \n  for (; i<7.; i ++) {\n    q.xyz = clamp (q.xyz, -1.-.05, 1.+.05) * 2.15\n            - 1.35*q.xyz;    \n    q.xz *= rot(i*i + iTime );\n\n    q = q * .59\n        / clamp (  max( dot(q.yz,q.yz), max(dot (q.xz, q.xz),  dot(q.xy,q.xy) ) ), \n        .1, 1.3) + q0;\n        \n  } \n\n  return length (q.xyz) / q.w ; \n}\n\nfloat march(vec3 ro, vec3 rd, float mx) {\n    \n    float t=0.,eps = 1e-4, distfac=50., hitThreshold = eps;\n    for(int i = 0; i < 200; i++) {\n        vec3 pos = ro + rd*t;\n        float d = de(pos);      \n           \n        if ( (d < hitThreshold && t>15.) || t >= mx) break;\n        t += d;\n        hitThreshold = eps*(1.+t*t*distfac);       \n        float zz = pos.y - light_dir.y;\n        zz*=zz;\n        \n        glow += exp(-max( (-exp(-zz))-d,0.) ); \n      \n        glow2 += exp(-d*d)*exp(-t*t/20.);\n        \n    }\n    return t;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    \n\n    light_dir = ro  ;  light_dir.y += 8.*sin(iTime);\n  \n    float t = march(ro, rd, mmaxDist);\n    vec3 glowCol;\n    vec3 pos = ro + rd*t; \n    vec3 glowSource = light_dir;\n    float glowStr = exp( -length(pos.y - glowSource.y) / 4.);\n    glow *= glowStr;\n    \n\n    return   1e-2*pow(glow2,2.)*vec3(.06,.03,0)  \n             +1e-9*pow(glow,5.)*vec3(.03,.015,0); \n \n        ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p  = (2.*fragCoord.xy-iResolution.xy)/iResolution.y*.7;    \n    \n    vec3 rd = normalize( vec3(p,1.6 ) );\n    \n    ro = vec3(0.2,-.8, iTime/4.);\n    \n    rd.xz *= rot(.2);\n    rd.yz *=rot(-.5);\n\n \n    vec3 col = clamp(render(ro, rd),1e-4,1e6);\n    col = 1. - exp(-sqrt(col));\n    \n    fragColor = vec4( col, 1.);\n    \n}\n","name":"Buffer A","description":"","type":"buffer"}]}