{"ver":"0.1","info":{"id":"MfVczm","date":"1731672186","viewed":55,"name":"ShaderAmp NeonOctagonalAudioVis","username":"ArthurTent","description":"Just playing around with some audio visualization!\nExample on YT: https://www.youtube.com/watch?v=8FmvUGyTrwc\nShaderAmp version is currently available in 'dev/more-shaders' branch.\nhttps://github.com/ArthurTent/ShaderAmp/tree/dev/more-shaders/dist/shaders","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["audio","visualizer","neon","octagonal"],"hasliked":0,"parentid":"Wd23Rw","parentname":"Neon Octagonal Audio Visualizer"},"renderpass":[{"inputs":[{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/Wd23Rw\n// Modified by ArthurTent\n// Neon Octagonal Audio Visualizer by Emiel\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n// line antialiasing using smoothstep technique by FabriceNeyret2 (https://www.shadertoy.com/view/4dcfW8)\n\n\n#define freq(f) texture(iChannel0, vec2(f, 0.25)).x * 0.8\n#define wave(f) texture(iChannel0, vec2(f, 0.75)).x\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\nfloat snd = 0.;\nconst float PI = 3.1415926;\n\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        //q*= snd/10.;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\nvoid camera(vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t)\n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    rd = normalize(vec3(fragCoord, 1.0));\n\n    ro = vec3(0.0, 0.0, -15.);\n\n    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y))+sin(iTime/20.);\n    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));\n    //m.y = -m.y;\n    m.y = sin(m.y*0.5)*0.3 + 0.5;\n\n    vec2 sm = sin(m)*(1.+sin(iTime/10.)/2.), cm = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);\n    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);\n\n    t = rotY * rotX;\n\n    ro = t * ro;\n    rd = t * rd;\n\n    rd = normalize(rd);\n}\n\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 hsl(float h, float s, float l) {\n    vec3 rgb = clamp(abs(mod(h * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    return l + s * (rgb - 0.5) * (1.0 - abs(2.0 * l - 1.0));\n}\n\nfloat avgFreq(float start, float end, float step) {\n    float div = 0.0;\n    float total = 0.0;\n    for (float pos = start; pos < end; pos += step) {\n        div += 1.0;\n        total += freq(pos);\n    }\n    return total / div;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int max_freq = 100;\n    for(int i=1; i < max_freq; i++){\n        snd +=FFT(i)*float(i);\n    }\n    snd /=float(max_freq*20);\n    vec2 R = iResolution.xy;\n    \n    //vec2 uv = -1.0 + 2.0 *vUv;\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    //uv *= vec2(1.0, iResolution.y / iResolution.x);\n    \n\t//camera + rd for stars\n    vec3 ro = vec3(0.0);//rd = vec3( 0.0 );\n\tvec3 rd = normalize(vec3(uv,-1.5));\n    mat3 t = mat3(1.0);\n\tcamera(uv, ro, rd, t);\n    uv *= vec2(1.0, iResolution.y / iResolution.x);\n\n    vec3 col = vec3(0.0);\n    \n    float bassFreq = pow(avgFreq(0.0, 0.1, 0.01), 0.85);\n    float medFreq = pow(avgFreq(0.1, 0.6, 0.01), 0.85);\n    float topFreq = pow(avgFreq(0.6, 1.0, 0.01), 0.85);\n    float ccnt = 8.0;\n    \n    float hue = iTime;\n    float speed = iTime * 0.5 + topFreq * 0.1;\n    \n    bool first = false;\n    \n    for (int j = 0; j < int(ccnt); j++) {\n        float i = float(j);\n        float spos = speed + i * 3.14 * 2. / ccnt;\n        \n        if (rand(i * 100.0 + floor(iTime * 15.0) * 50.0) < bassFreq * 0.1) continue;\n        \n        vec2 cpos = vec2(cos(spos), sin(spos)) * (bassFreq * 0.15 + 0.005);\n        \n        float csize = (0.02 + medFreq * 0.08 + bassFreq * 0.002);\n        float cdist = length(uv - cpos) - csize;\n        \n        if (cdist < 0.0) {\n            bool draw = true;\n            if (j == 0) first = true;\n                \n            if (j == int(ccnt) - 1) {\n                draw = !first;\n            }\n            \n            if (draw) {\n                col = hsl(hue, bassFreq * 0.1, topFreq*1.25) * ((bassFreq*8.0* csize) - cdist * 5.0);\n            }\n        }\n    }\n    \n    \n    if (length(col) < 0.001) {\n        col = hsl(hue, bassFreq * 0.1, medFreq * 0.5) * length(uv);\n    }\n    \n    for (int j = 0; j < int(ccnt); j++) {\n    \tfor (int k= 0; k < int(ccnt); k++) {\n            float i = float(j);\n            float l = float(k);\n            float spos = speed + i * 3.14 * 2. / ccnt;\n            float spos2 = speed + l * 3.14 * 2. / ccnt;\n\n            if (rand(i * 100.0 + l + floor(iTime * 50.0) * 50.0) > bassFreq * 0.8) continue;\n            \n            vec2 cpos = vec2(sin(spos), cos(spos)) * (bassFreq * 0.25 + 0.005) * 2.0;\n            vec2 cpos2 = vec2(sin(spos2), cos(spos2)) * (bassFreq * 0.25 + 0.005) * 2.0;\n\n            float lineDist = sdLine(uv, cpos, cpos2);\n            float width = 1.1*  1.0 / iResolution.x*bassFreq*30.*topFreq*bassFreq;\n                col += hsl(hue, bassFreq * 0.1 + 0.5, 0.1 + bassFreq * .4) \n                    * smoothstep(width, 0., lineDist);\n    \t}\n        \n    }\n    \n    fragColor = vec4(col,1.0);\n    fragColor *= pow(max(fragColor - .2, 0.), vec4(1.4)) * 5.5*topFreq;\n    rd.x+=sin(iTime/1000.)*2.;\n\tvec3 bg = stars(rd)*(1.+30.*snd);\n\tfragColor+=vec4(bg, 1.);\n}","name":"Image","description":"","type":"image"}]}