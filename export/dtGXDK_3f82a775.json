{"ver":"0.1","info":{"id":"dtGXDK","date":"1686350215","viewed":29,"name":"sky kaleidoscope","username":"ctwm","description":"exploring creative coding assisted by ai","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sky","kaleidoscope","ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    // Polar coordinates\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    \n    // Repeat the space 8 times around the origin to create a kaleidoscope effect\n    float kaleidoscope = 8.0;\n    theta = mod(theta, 1.0 * PI / kaleidoscope);\n    \n    // Convert back to Cartesian coordinates\n    uv = r * vec2(cos(theta), sin(theta));\n    \n    // Create a fractal pattern using sine and cosine functions\n    float pattern = 0.5 + 0.5 * cos(10.0 * uv.x + iTime) * sin(10.0 * uv.y + iTime);\n    \n    // Create a color gradient based on the fractal pattern\n    vec3 color = vec3(0.5 * sin(pattern) + 0.5, 0.2 * pattern, 0.5 * cos(pattern) + 0.5);\n    color *= 0.9;\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}