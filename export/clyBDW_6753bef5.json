{"ver":"0.1","info":{"id":"clyBDW","date":"1702050245","viewed":34,"name":"Hot color grading stuff","username":"ErnstHot","description":"Gain, lift and gamma color grading. Also some curves/slopey stuff.\n\nMade this years ago, don't know why I didn't publish it. Now I have.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["postprocessing","colorgrading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SPLIT_SCREEN 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 prmLiftColor   = vec3(0.25, 0.1, 0.25);\n    vec3 prmGainColor   = vec3(0.5, 0.4, 0.6);\n    vec3 prmGammaColor  = vec3(0.5, 0.4, 0.7);\n    float prmSlope      = 0.7;\n    float prmLowIn      = 0.1;\n    float prmHighIn     = 0.8;\n    float prmLowOut     = 0.0;\n    float prmHighOut    = 1.0;\n    float prmHue        = 0.4;\n    float prmSaturation = 1.0;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    vec3 col2 = col;\n\n    // Color grading\n\tvec3 ycbcr = RGB2YCbCr(col);\n\tycbcr = YCbCrLumScale(ycbcr, prmLowIn, prmHighIn, prmSlope, prmLowOut, prmHighOut);\n\tycbcr = YCbCrHueSat(ycbcr, prmHue, prmSaturation);\n\tcol = YCbCr2RGB(ycbcr);\n\tcol = gainLiftGamma(col, prmGainColor, prmLiftColor, prmGammaColor);\n\n    // Output to screen        \n#if SPLIT_SCREEN == 1\n    fragColor = uv.x > 0.5 ? vec4(col, 1.0) : vec4(col2, 1.0);\n#else\n    fragColor = vec4(col, 1.0);\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// hotAlgorithm.glslinc\n    \nfloat linStep(in float x, in float a, in float b)\n{\n  return clamp((x - a) / (b - a), 0.0, 1.0); \n}\n\nfloat invLerp(in float x, in float a, in float b)\n{\n  return (x - a) / (b - a); \n}\n\nfloat slope(in float x, in float s)\n{\n\treturn x / (x + (1.0 - (1.0 / s)) * (x - 1.0));\n}\n\nfloat atan2(in float y, in float x)\n{\n    float s = (abs(x) > abs(y)) ?  1.0 : 0.0;\n    return mix(3.14159265358979 / 2.0 - atan(x, y), atan(y, x), s);\n}\n\nvec2 pol2car(in float r, in float a)\n{\n\treturn vec2(r * cos(a), r * sin(a));\n}\n\nvec2 car2pol(in float x, in float y)\n{\n\treturn vec2(sqrt(x * x + y * y), atan2(y, x));\n}\n\nvec2 pol2car(in vec2 pol)\n{\n\treturn vec2(pol.x * cos(pol.y), pol.x * sin(pol.y));\n}\n\nvec2 car2pol(in vec2 car)\n{\n\treturn vec2(sqrt(car.x * car.x + car.y * car.y), atan2(car.y, car.x));\n}\n\n\n\nvec3 YCbCrOffset = vec3(0.0625, 0.0, 0.0);\n\nvec3 RGB2YCbCr(in vec3 rgb)\n{\n\tmat3 mRGB2YCbCr = mat3\n\t(\n\t\t 0.183,  0.614,  0.062,\n\t\t-0.101, -0.339,  0.439,\n\t\t 0.439, -0.399, -0.04\n\t);\n\n\treturn rgb * mRGB2YCbCr + YCbCrOffset;\n}\n\nvec3 YCbCr2RGB(in vec3 ycbcr)\n{\n\tmat3 mYCbCr2RGB = mat3\n\t(\n\t\t1.164,  0.0,    1.793,\n\t\t1.164, -0.213, -0.533,\n\t\t1.164,  2.112,  0.0\n\t);\n\n\treturn (ycbcr - YCbCrOffset) * mYCbCr2RGB;\n}\n\nvec3 YCbCrHueSat(in vec3 col, in float hue, in float saturation)\n{\n\tvec2 v = vec2(col.y, col.z); // Get Cb and Cr\n\tv = car2pol(v);\n\tv.x = v.x * saturation;\n\tv.y = v.y + hue;\n\tv = pol2car(v);\n\n\treturn vec3(col.x, v.x, v.y);\n}\n\nvec3 YCbCrLumScale(in vec3 col, in float lowIn, in float highIn, in float slopeIn, in float lowOut, in float highOut)\n{\n\tcol.x = mix(lowOut, highOut, slope(linStep(col.x, lowIn, highIn), slopeIn));\n\treturn col;\n}\n\nvec3 gainLiftGamma(vec3 col, vec3 gain, vec3 lift, vec3 gamma)\n{\n\treturn pow(((gain + 0.5) * col + lift * (1.0 - col)), (1.0 / gamma));\t\n}","name":"Common","description":"","type":"common"}]}