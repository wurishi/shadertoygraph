{"ver":"0.1","info":{"id":"dlsfDH","date":"1692905708","viewed":136,"name":"Rainbow Liquid Filter","username":"ascomycody","description":"This is so fun","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["filter","fluid","rainbow","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//------All credit for fluid sim goes to capsadmin: strange fluid (https://www.shadertoy.com/view/XdcGW2)\n\n\n#define RAINBOW_AMP .5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float val = texture(iChannel0, fragCoord/iResolution.xy).r;\n \n   \t//{fragColor = vec4(val,val,val,1.0); return;}\n    fragColor = vec4(val, val, val, 1.0);\n        \n    vec4 color = mix(texture(iChannel2, fragCoord/iResolution.xy), pow(vec4(cos(val + 1.1415926), .5 * sin(val + .78539), .5 * sin(val), 1.0) * 0.5 + 0.5, vec4(0.5)), RAINBOW_AMP);\n    \n    vec3 val2 = texture(iChannel1, (fragCoord/iResolution.xy) + cos(color.rb * vec2(val))).rgb;\n    // code below taken from\n    //https://www.shadertoy.com/view/Xsd3DB\n    \n    vec2 q = fragCoord.xy/iResolution.xy;\n    \n    vec3 e = vec3(vec2(1.0)/iResolution.xy,0.);\n    float p10 = texture(iChannel0, q-e.zy).x;\n    float p01 = texture(iChannel0, q-e.xz).x;\n    float p21 = texture(iChannel0, q+e.xz).x;\n    float p12 = texture(iChannel0, q+e.zy).x;\n        \n    vec3 grad = normalize(vec3(p21 - p01, p12 - p10, 1.));\n    vec3 light = normalize(vec3(.2,-.25,.7));\n    float diffuse = dot(grad,light);\n    float spec = pow(max(0.,-reflect(light,grad).z),32.0);\n    \n    vec4 prefrag = (vec4(vec3(color.r + color.g + color.b)*.3333, 1.) * diffuse) + spec;\n    vec4 prefrag2 = (color * diffuse) + spec;\n    vec4 col = mix(prefrag2, vec4(val2, 1.), prefrag * .01);\n    \n    fragColor = col * smoothstep(0., .4, texture(iChannel2, q));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 d = vec2(1. / iResolution.x, 1. / iResolution.y);\n    \n    vec3 colx = ChanFilter(uv, d, iChannel0, XSOBEL, REZ);\n    vec3 coly = ChanFilter(uv, d, iChannel0, YSOBEL, REZ);\n    \n    fragColor = vec4(colx + coly, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define pi  3.1415\n#define pi2  pi * .5\n\nfloat random()\n{\n\treturn fract(sin(dot(gl_FragCoord.xy, vec2(12.9898,78.233))) * 43758.5453);  \n}\n\nvec4 get_pixel(float x_offset, float y_offset)\n{\n    float WC_AMP = iResolution.x * .0001;\n\treturn texture(iChannel0, (gl_FragCoord.xy / iResolution.xy) + (vec2(x_offset, y_offset) / iResolution.xy)) + (vec4(0.) + clamp(texture(iChannel1, (gl_FragCoord.xy / iResolution.xy) + (vec2(x_offset, y_offset) / iResolution.xy)).rrra * 4.,0.,1.)) * WC_AMP;//clamp((vec4(1.) - (vec4(smoothstep(0.5, .6, pow(texture(iChannel1, (gl_FragCoord.xy / iResolution.xy) + (vec2(x_offset, y_offset) / iResolution.xy)).r * WC_AMP, 1.)))))*.05, 0., .1);\n}\n\nfloat step_simulation()\n{\n\tfloat val = get_pixel(0.0, 0.0).r;\n    \n    val += random()*val*0.15; // errosion\n    \n  \tval = get_pixel(\n    \tsin(get_pixel(val, 0.0).r  - get_pixel(-val, 0.0) + pi).r  * val * 0.4, \n        cos(get_pixel(0.0, -val).r - get_pixel(0.0 , val) - pi2).r * val * 0.4\n   \t).r;\n    \n    val *= 1.0001;\n    \n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float val = step_simulation();\n \n    if(iFrame < 1)\n        val = \n        \trandom()*length(iResolution.xy)/25.0 + \n        \tsmoothstep(length(iResolution.xy)/2.0, 0.5, length(iResolution.xy * 0.5 - fragCoord.xy))*.1;\n    \n    if (iMouse.z > 0.0) \n        val += smoothstep(length(iResolution.xy)/10.0, 0.5, length(iMouse.xy - fragCoord.xy)) * .1;\n        \n    fragColor.r = val;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define REZ 1.5\n\n#define XSOBEL mat3(vec3(1., 0.,-1.),vec3( 2., 0.,-2.),vec3(-1., 0., 1.))\n#define YSOBEL mat3(vec3(1., 2., 1.),vec3( 0., 0., 0.),vec3(-1.,-2.,-1.))\n\nvec3 ApplyKernel(in mat3 r, in mat3 b, in mat3 g, in mat3 m)\n{   \n    vec3 x;\n    \n    for( int j = 0; j <= 2; j++){\n    for( int i = 0; i <= 2; i++){\n    \n        x.r += r[i][j] * m[i][j];\n        x.b += b[i][j] * m[i][j];\n        x.g += g[i][j] * m[i][j];\n    }   \n    }\n    \n    return vec3(x.r, x.b, x.g);\n}\n\nvec3 ChanFilter(in vec2 p, in vec2 d, in sampler2D tx, in mat3 f, in float a)\n{    \n\n    mat3 r;\n    mat3 b;\n    mat3 g;\n    \n    for( int j = -1; j <= 1; j++ ){\n    for( int i = -1; i <= 1; i++ ){\n    \n            ivec2 o = ivec2(i, j);\n        \n            vec2 pos = p + (vec2(o) * d * a);\n        \n            r[i + 1][j + 1] = texture(tx, pos).r;\n            b[i + 1][j + 1] = texture(tx, pos).b;\n            g[i + 1][j + 1] = texture(tx, pos).g;\n    }\n    }\n    \n    return ApplyKernel(r, b, g, f);\n}","name":"Common","description":"","type":"common"}]}