{"ver":"0.1","info":{"id":"Ml2BzW","date":"1515343484","viewed":360,"name":"try occlusion","username":"cailuming","description":"try occlusion","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["occlusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define FAR 64\n#define SMR 5.\nstruct Ray{\n   vec3 o;\n   vec3 d;\n};\n\nmat2 rot2D(float a){\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nvoid setCamera(inout Ray r,vec3 pos,vec3 tar,vec2 uv){\n    vec3 look =normalize(tar-pos);\n    vec3 right = normalize(cross(vec3(0,1,0),look));\n    vec3 up = normalize(cross(look,right));\n    r.o=pos;\n    r.d= normalize(uv.x*right+uv.y*up +look);\n}\n\nvec2 obj(vec3 p,vec3 c){\n    p-=c;\n    return vec2(length(p)-2.,0);\n}\n\nvec2 obj1(vec3 p,vec3 c){\n    p-=c;\n   \n    float arc =atan(p.y,p.x);\n    float ed=0.5*abs(sin(arc*10.));\n    ed = length(p.xy)<0.8?0.:ed;\n    float v1 =max(abs(p.x),max(abs(p.y),abs(p.z)))-3.;\n    float v2 =length(p)-1.-ed;\n    return vec2(mix(v1,v2,0.2),1);\n}\n\nvec2 obj2(vec3 p,vec3 c){\n    p-=c;\n    return vec2(-max(abs(p.x),max(abs(p.y),abs(p.z)))+25.,3);\n}\n\nvec2 obj3(vec3 p,vec3 c){\n    p-=c;\n    float arc = atan(p.z,p.x);\n    float r = sin(p.y)*0.6+0.8;\n    vec3 polor =vec3(r*cos(arc)+cos(p.y),clamp(p.y,-2.,4.),r*sin(arc)+sin(p.y));\n    return vec2(length(p-polor)-1.,1);\n}\n\n\n\nvec2 plane(vec3 p){\n    return vec2(p.y+2.,2);\n}\n\n\nvoid cmp(vec2 a,inout vec2 r){\n    r=r.x>a.x?a:r;\n}\n\nvec2 map(vec3 p){\n    vec2 r=vec2(2.,-1);\n    cmp(obj(p,vec3(0,0,10.*sin(iTime))),r);\n     \n    cmp(obj1(p,vec3(5.,0.5,0)),r);\n    cmp(obj2(p,vec3(0,0,0)),r);\n    cmp(obj3(p,vec3(-5,0,0)),r);\n  \n    \n    \n    cmp(plane(p),r);\n    return r;\n}\n\nvec3 norm(vec3 rd,float dl){\n    float m =map(rd).x;\n    vec2 d=vec2(0,1)*dl*0.01;\n    \n    return -normalize(\n        vec3(\n            m-map(rd+d.yxx).x,\n            m-map(rd+d.xyx).x,\n            m-map(rd+d.xxy).x\n        ));\n}\n\nvec2 rayHit(Ray r){\n    float t=0.0;\n    vec2 h=vec2(0);\n    \n    for(int i=0;i<FAR;i++){\n        h=map(r.o+t*r.d);\n        if(h.x<=0.0001||t>64.){\n          break; \n        }\n        \n        t+=h.x;\n    }\n    \n    return vec2(t,h.y);\n}\n\n\nvoid fog(inout vec3 col,vec3 ro,vec3 rd,float t){\n    float a =0.1;\n    float b =0.2;\n    float fogv=a * exp(-ro.y*b) * (1.0-exp( -t*rd.y*b ))/rd.y;\n    vec3  fogc  = vec3(0.5,0.6,0.7);\n    \n    fogv*=(1.-exp(-0.01*t*t));\n    col=mix( col, fogc, fogv );\n}\n\nfloat occlusion(vec3 p,vec3 norm){\n    float scalor=0.7;\n    \n    float occ =0.;\n    for(float i=0.;i<SMR;i++){\n       float k= i/SMR;\n       k*=scalor;\n       float d=map(p+k*norm).x;\n       occ+= pow(0.5,i*0.3)*(k-d);\n    }\n    occ=1.-clamp(occ,0.,1.);\n    return occ;\n}\n\n\nvoid doLight(inout vec3 col,Ray r,float t,vec3 lp){\n   vec3 p =r.o+r.d*t;\n   vec3 ld =normalize(lp-p);\n   vec3 n= norm(p,length(p));\n   float nl = clamp(dot(normalize(lp-p),n),0.,1.);\n   float sl = clamp(dot(reflect(-ld,n),n),0.,1.);\n   float ol = occlusion(p,n);\n   \n   col=vec3(mix(nl+pow(sl,80.),ol,0.6));  \n     \n}\n\n\nvoid textureMap(inout vec3 col,int id,vec3 p){\n    float v=0.;\n    if(id==0){\n        vec3 color =vec3(0.5,0.8,0.7);\n        p-=vec3(0,0,10.*sin(iTime));\n    \n        //p.xz*=rot2D(atan(cos(iTime),sin(iTime)));\n    \n        p.yz*=rot2D(-5.*sin(iTime));\n        \n        p=mod(p,2.);\n        p-=1.;\n        \n       \n        float arc =atan(p.y,p.x);\n        \n        v=0.85/(length(p)+0.2*sin(arc*8.));\n        v=max(pow(v,2.),1.);\n        col*=color*vec3(v,0.9*v,0.3*v);\n    }else if(id==1){\n        \n        float arc =atan(p.y,p.x);\n        vec3 color =vec3(1,0.6,0.2);\n        \n        col*=color;\n    }else if(id==2){\n        \n         \n        col*=texture(iChannel1,p.xz/10.).xyz;\n    }else if(id==3){\n       \n        p=mod(p,2.);\n        p-=1.;\n        \n        float arc =atan(p.y,p.x);\n        \n        v=0.85/(length(p)+0.2*sin(arc*8.));\n        v=clamp(pow(v,2.),0.,1.);\n        col*=vec3(v,0.1*v,0.5*v); \n        col*=texture(iChannel1,p.xz/10.).xyz;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy-vec2(0.5);\n    float as= iResolution.x/iResolution.y;\n    uv.x*=as;\n    Ray ray;\n    vec3 eye =vec3(0,3,-20);\n    vec3 dir =vec3(0,-1,1);\n    vec3 light =vec3(10.*sin(iTime),9,10.*cos(iTime));\n    \n    eye.xz*=rot2D(PI*0.1*iTime);\n    dir.xz*=rot2D(PI*0.1*iTime);\n     \n    setCamera(ray,eye,dir,uv);\n   \n    vec3 col =vec3(0);\n    vec2 res =rayHit(ray);\n    \n    doLight(col,ray,res.x,light);\n   \n\ttextureMap(col,int(res.y),ray.o+ray.d*res.x);\n    fog(col,ray.o,ray.d,res.x);\n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}