{"ver":"0.1","info":{"id":"4fjSz1","date":"1706035077","viewed":259,"name":"Path Traced Silver Tilings","username":"Kerdek","description":"tried some truchet-ish tilings on a sphere, startig from an icosahedron\nand tried to resemble some silver surface look.","likes":12,"published":1,"flags":32,"usePreview":1,"tags":["sphere","truchet","silver","tiling"],"hasliked":0,"parentid":"XsXfz2","parentname":"silver tilings"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float srgb_gamma(\n  float v) {\n  return v <= 0.0031308\n    ? v * 12.92\n    : 1.055 * pow(v, 0.41666666666) - 0.055; }\n\nvec3 srgb_gamma(\n  vec3 v) {\n  return vec3(\n    srgb_gamma(v.r),\n    srgb_gamma(v.g),\n    srgb_gamma(v.b)); }\n\nvoid mainImage(out vec4 o, vec2 u) {\n  o = texelFetch(iChannel0, ivec2(u), 0);\n  o.rgb /= o.a;\n  o.rgb = max(vec3(0.0), o.rgb);\n  o.rgb = srgb_gamma(o.rgb);\n  o.a = 1.0; }","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    Path Traced Dodecahedron\n    ------------------\n    \n    Another edition of difficult calculus problems\n    reduced to repetition of a fixed set of abstractions.\n    \n    This is a spectral render.\n    Three simultaneous wavelengths (no dispersion). \n    The wavelength sampling is stratified into RGB.\n    The SDF also returns its gradient.\n    We use that as the normal.\n    We also use it to normalize displacement maps.\n    Bounding cylinder for geometry optimization.\n    Blinn-Phong BRDF, corrected for incidence angle.\n    Quadratic absorption.\n    Fresnel reflectance as the Blinn-Phong specularity.\n    Multiple importance sampling with balance heuristic.\n    One-sample model (iterative path tracing).\n    Diffuse, Specular, and light source sampling.\n    Efficient sample rejection.\n    Linear congruential generator.\n    D65 sun, 1931 color matching functions.\n    DOF.\n    \n*/\n// https://cie.co.at/data-tables\nconst vec3 srgbcmf2[] = vec3 [](vec3(1.127313E-04, -9.335945E-05, 6.470841E-04), vec3(1.263916E-04, -1.048132E-04, 7.269167E-04), vec3(1.417377E-04, -1.177074E-04, 8.168770E-04), vec3(1.589762E-04, -1.322135E-04, 9.181536E-04), vec3(1.783138E-04, -1.485031E-04, 1.031935E-03), vec3(1.999571E-04, -1.667477E-04, 1.159409E-03), vec3(2.243205E-04, -1.873090E-04, 1.303088E-03), vec3(2.518190E-04, -2.105463E-04, 1.465510E-03), vec3(2.826605E-04, -2.366279E-04, 1.647903E-03), vec3(3.170527E-04, -2.657219E-04, 1.851492E-03), vec3(3.552034E-04, -2.979964E-04, 2.077504E-03), vec3(3.969669E-04, -3.332975E-04, 2.324931E-03), vec3(4.434170E-04, -3.725771E-04, 2.600384E-03), vec3(4.965910E-04, -4.176628E-04, 2.916525E-03), vec3(5.585267E-04, -4.703820E-04, 3.286015E-03), vec3(6.312602E-04, -5.325621E-04, 3.721517E-03), vec3(7.181712E-04, -6.071830E-04, 4.243816E-03), vec3(8.184578E-04, -6.934837E-04, 4.847714E-03), vec3(9.278839E-04, -7.876799E-04, 5.506901E-03), vec3(1.042215E-03, -8.859878E-04, 6.195064E-03), vec3(1.157220E-03, -9.846240E-04, 6.885893E-03), vec3(1.270019E-03, -1.081049E-03, 7.561887E-03), vec3(1.388111E-03, -1.181811E-03, 8.268888E-03), vec3(1.522821E-03, -1.296758E-03, 9.075586E-03), vec3(1.685467E-03, -1.435734E-03, 1.005067E-02), vec3(1.887376E-03, -1.608585E-03, 1.126283E-02), vec3(2.138813E-03, -1.824251E-03, 1.277431E-02), vec3(2.438576E-03, -2.081711E-03, 1.457860E-02), vec3(2.780724E-03, -2.375867E-03, 1.664135E-02), vec3(3.159331E-03, -2.701619E-03, 1.892817E-02), vec3(3.568467E-03, -3.053871E-03, 2.140472E-02), vec3(4.001336E-03, -3.426854E-03, 2.403224E-02), vec3(4.473524E-03, -3.834195E-03, 2.690542E-02), vec3(5.012702E-03, -4.299890E-03, 3.018996E-02), vec3(5.646540E-03, -4.847933E-03, 3.405152E-02), vec3(6.402712E-03, -5.502321E-03, 3.865581E-02), vec3(7.319312E-03, -6.296393E-03, 4.423674E-02), vec3(8.381912E-03, -7.218027E-03, 5.071267E-02), vec3(9.539360E-03, -8.223030E-03, 5.777592E-02), vec3(1.074051E-02, -9.267205E-03, 6.511884E-02), vec3(1.193424E-02, -1.030637E-02, 7.243374E-02), vec3(1.308619E-02, -1.131128E-02, 7.951830E-02), vec3(1.427399E-02, -1.235035E-02, 8.685778E-02), vec3(1.561434E-02, -1.352582E-02, 9.517586E-02), vec3(1.722410E-02, -1.493995E-02, 1.051962E-01), vec3(1.921999E-02, -1.669498E-02, 1.176425E-01), vec3(2.168159E-02, -1.886173E-02, 1.330282E-01), vec3(2.459168E-02, -2.142715E-02, 1.512692E-01), vec3(2.792183E-02, -2.436770E-02, 1.721930E-01), vec3(3.164372E-02, -2.765984E-02, 1.956269E-01), vec3(3.572885E-02, -3.128002E-02, 2.213985E-01), vec3(4.016245E-02, -3.521860E-02, 2.494637E-01), vec3(4.501512E-02, -3.954164E-02, 2.803327E-01), vec3(5.038678E-02, -4.433913E-02, 3.146635E-01), vec3(5.637730E-02, -4.970109E-02, 3.531143E-01), vec3(6.308650E-02, -5.571751E-02, 3.963434E-01), vec3(7.050108E-02, -6.237632E-02, 4.442758E-01), vec3(7.858161E-02, -6.965305E-02, 4.968445E-01), vec3(8.738895E-02, -7.761916E-02, 5.547196E-01), vec3(9.698360E-02, -8.634601E-02, 6.185709E-01), vec3(1.074269E-01, -9.590518E-02, 6.890682E-01), vec3(1.187857E-01, -1.063682E-01, 7.668292E-01), vec3(1.308091E-01, -1.175104E-01, 8.502860E-01), vec3(1.430797E-01, -1.289583E-01, 9.368304E-01), vec3(1.551798E-01, -1.403382E-01, 1.023854E+00), vec3(1.666917E-01, -1.512767E-01, 1.108749E+00), vec3(1.773906E-01, -1.615716E-01, 1.190115E+00), vec3(1.872780E-01, -1.712303E-01, 1.268064E+00), vec3(1.962786E-01, -1.801950E-01, 1.342258E+00), vec3(2.043160E-01, -1.884073E-01, 1.412358E+00), vec3(2.113147E-01, -1.958090E-01, 1.478026E+00), vec3(2.171695E-01, -2.023169E-01, 1.538729E+00), vec3(2.218592E-01, -2.079014E-01, 1.594219E+00), vec3(2.254343E-01, -2.125853E-01, 1.644589E+00), vec3(2.279453E-01, -2.163913E-01, 1.689929E+00), vec3(2.294428E-01, -2.193423E-01, 1.730331E+00), vec3(2.299345E-01, -2.214340E-01, 1.765770E+00), vec3(2.294192E-01, -2.226784E-01, 1.796332E+00), vec3(2.279337E-01, -2.231230E-01, 1.822277E+00), vec3(2.255138E-01, -2.228150E-01, 1.843863E+00), vec3(2.221965E-01, -2.218021E-01, 1.861350E+00), vec3(2.180095E-01, -2.201137E-01, 1.874884E+00), vec3(2.129854E-01, -2.177788E-01, 1.884771E+00), vec3(2.071663E-01, -2.148438E-01, 1.891507E+00), vec3(2.005938E-01, -2.113549E-01, 1.895590E+00), vec3(1.933103E-01, -2.073586E-01, 1.897516E+00), vec3(1.853384E-01, -2.028751E-01, 1.897503E+00), vec3(1.767124E-01, -1.979321E-01, 1.895724E+00), vec3(1.674915E-01, -1.925871E-01, 1.892609E+00), vec3(1.577348E-01, -1.868976E-01, 1.888589E+00), vec3(1.475021E-01, -1.809212E-01, 1.884095E+00), vec3(1.368543E-01, -1.747081E-01, 1.879480E+00), vec3(1.257756E-01, -1.682208E-01, 1.874452E+00), vec3(1.142092E-01, -1.613849E-01, 1.868469E+00), vec3(1.020979E-01, -1.541260E-01, 1.860990E+00), vec3(8.938536E-02, -1.463699E-01, 1.851473E+00), vec3(7.604239E-02, -1.380691E-01, 1.839614E+00), vec3(6.213436E-02, -1.292456E-01, 1.825427E+00), vec3(4.774662E-02, -1.199292E-01, 1.808853E+00), vec3(3.296404E-02, -1.101495E-01, 1.789831E+00), vec3(1.787136E-02, -9.993632E-02, 1.768302E+00), vec3(2.543948E-03, -8.933741E-02, 1.744484E+00), vec3(-1.303481E-02, -7.829617E-02, 1.718044E+00), vec3(-2.891598E-02, -6.668620E-02, 1.688094E+00), vec3(-4.515239E-02, -5.438062E-02, 1.653746E+00), vec3(-6.179508E-02, -4.125302E-02, 1.614112E+00), vec3(-7.887373E-02, -2.721691E-02, 1.568524E+00), vec3(-9.627513E-02, -1.239897E-02, 1.518003E+00), vec3(-1.138364E-01, 3.007463E-03, 1.464200E+00), vec3(-1.313948E-01, 1.880918E-02, 1.408768E+00), vec3(-1.487881E-01, 3.481304E-02, 1.353357E+00), vec3(-1.659234E-01, 5.091481E-02, 1.298853E+00), vec3(-1.828180E-01, 6.714807E-02, 1.244979E+00), vec3(-1.994756E-01, 8.352665E-02, 1.191645E+00), vec3(-2.158987E-01, 1.000638E-01, 1.138760E+00), vec3(-2.320908E-01, 1.167732E-01, 1.086233E+00), vec3(-2.480391E-01, 1.336579E-01, 1.034253E+00), vec3(-2.637234E-01, 1.506699E-01, 9.831476E-01), vec3(-2.791354E-01, 1.677469E-01, 9.330348E-01), vec3(-2.942663E-01, 1.848262E-01, 8.840316E-01), vec3(-3.091075E-01, 2.018455E-01, 8.362553E-01), vec3(-3.236736E-01, 2.187759E-01, 7.897854E-01), vec3(-3.379970E-01, 2.356807E-01, 7.447449E-01), vec3(-3.520956E-01, 2.526353E-01, 7.013151E-01), vec3(-3.659880E-01, 2.697157E-01, 6.596776E-01), vec3(-3.796925E-01, 2.869975E-01, 6.200140E-01), vec3(-3.932056E-01, 3.045142E-01, 5.824565E-01), vec3(-4.066231E-01, 3.223184E-01, 5.469220E-01), vec3(-4.201124E-01, 3.405138E-01, 5.132692E-01), vec3(-4.338408E-01, 3.592045E-01, 4.813564E-01), vec3(-4.479755E-01, 3.784944E-01, 4.510421E-01), vec3(-4.626346E-01, 3.984814E-01, 4.222628E-01), vec3(-4.778031E-01, 4.191867E-01, 3.949971E-01), vec3(-4.934481E-01, 4.405990E-01, 3.691669E-01), vec3(-5.095375E-01, 4.627076E-01, 3.446947E-01), vec3(-5.260385E-01, 4.855010E-01, 3.215025E-01), vec3(-5.428768E-01, 5.089259E-01, 2.995044E-01), vec3(-5.601270E-01, 5.330939E-01, 2.786172E-01), vec3(-5.779799E-01, 5.582418E-01, 2.587672E-01), vec3(-5.966258E-01, 5.846061E-01, 2.398810E-01), vec3(-6.162559E-01, 6.124238E-01, 2.218849E-01), vec3(-6.369976E-01, 6.418559E-01, 2.047460E-01), vec3(-6.585752E-01, 6.726950E-01, 1.883415E-01), vec3(-6.805742E-01, 7.046258E-01, 1.724623E-01), vec3(-7.025796E-01, 7.373321E-01, 1.569000E-01), vec3(-7.241769E-01, 7.704984E-01, 1.414456E-01), vec3(-7.451008E-01, 8.039106E-01, 1.259703E-01), vec3(-7.653536E-01, 8.376087E-01, 1.105310E-01), vec3(-7.849221E-01, 8.716592E-01, 9.519703E-02), vec3(-8.037929E-01, 9.061282E-01, 8.003801E-02), vec3(-8.219525E-01, 9.410819E-01, 6.512341E-02), vec3(-8.393208E-01, 9.764874E-01, 5.045077E-02), vec3(-8.556724E-01, 1.012085E+00, 3.604812E-02), vec3(-8.707763E-01, 1.047603E+00, 2.203101E-02), vec3(-8.844015E-01, 1.082766E+00, 8.514857E-03), vec3(-8.963172E-01, 1.117302E+00, -4.385030E-03), vec3(-9.064160E-01, 1.151106E+00, -1.661994E-02), vec3(-9.145960E-01, 1.184016E+00, -2.819467E-02), vec3(-9.206344E-01, 1.215669E+00, -3.907404E-02), vec3(-9.243083E-01, 1.245705E+00, -4.922277E-02), vec3(-9.253947E-01, 1.273763E+00, -5.860562E-02), vec3(-9.237279E-01, 1.299561E+00, -6.717781E-02), vec3(-9.194236E-01, 1.323231E+00, -7.500001E-02), vec3(-9.126816E-01, 1.345033E+00, -8.219503E-02), vec3(-9.037012E-01, 1.365226E+00, -8.888570E-02), vec3(-8.926821E-01, 1.384069E+00, -9.519482E-02), vec3(-8.796895E-01, 1.401660E+00, -1.011843E-01), vec3(-8.647538E-01, 1.417908E+00, -1.068469E-01), vec3(-8.480229E-01, 1.432786E+00, -1.122020E-01), vec3(-8.296450E-01, 1.446270E+00, -1.172688E-01), vec3(-8.097681E-01, 1.458336E+00, -1.220665E-01), vec3(-7.885009E-01, 1.468989E+00, -1.266250E-01), vec3(-7.658532E-01, 1.478288E+00, -1.309563E-01), vec3(-7.418241E-01, 1.486284E+00, -1.350531E-01), vec3(-7.164135E-01, 1.493032E+00, -1.389082E-01), vec3(-6.896207E-01, 1.498585E+00, -1.425143E-01), vec3(-6.614795E-01, 1.502983E+00, -1.458760E-01), vec3(-6.320166E-01, 1.506227E+00, -1.490034E-01), vec3(-6.012162E-01, 1.508312E+00, -1.518968E-01), vec3(-5.690626E-01, 1.509234E+00, -1.545567E-01), vec3(-5.355401E-01, 1.508987E+00, -1.569836E-01), vec3(-5.006487E-01, 1.507585E+00, -1.591805E-01), vec3(-4.644169E-01, 1.505056E+00, -1.611537E-01), vec3(-4.268721E-01, 1.501418E+00, -1.629082E-01), vec3(-3.880421E-01, 1.496690E+00, -1.644493E-01), vec3(-3.479546E-01, 1.490890E+00, -1.657821E-01), vec3(-3.066269E-01, 1.484021E+00, -1.669096E-01), vec3(-2.640689E-01, 1.476115E+00, -1.678400E-01), vec3(-2.202952E-01, 1.467226E+00, -1.685862E-01), vec3(-1.753211E-01, 1.457409E+00, -1.691611E-01), vec3(-1.291623E-01, 1.446721E+00, -1.695779E-01), vec3(-8.178414E-02, 1.435126E+00, -1.698379E-01), vec3(-3.322993E-02, 1.422644E+00, -1.699462E-01), vec3(1.647723E-02, 1.409282E+00, -1.699071E-01), vec3(6.731900E-02, 1.395040E+00, -1.697244E-01), vec3(1.192826E-01, 1.379913E+00, -1.694011E-01), vec3(1.723716E-01, 1.363885E+00, -1.689388E-01), vec3(2.265535E-01, 1.346947E+00, -1.683397E-01), vec3(2.817685E-01, 1.329091E+00, -1.676064E-01), vec3(3.379604E-01, 1.310306E+00, -1.667407E-01), vec3(3.950782E-01, 1.290572E+00, -1.657441E-01), vec3(4.530904E-01, 1.269858E+00, -1.646158E-01), vec3(5.119055E-01, 1.248253E+00, -1.633665E-01), vec3(5.714813E-01, 1.225795E+00, -1.620011E-01), vec3(6.317760E-01, 1.202521E+00, -1.605242E-01), vec3(6.927480E-01, 1.178470E+00, -1.589408E-01), vec3(7.543417E-01, 1.153676E+00, -1.572557E-01), vec3(8.164712E-01, 1.128159E+00, -1.554717E-01), vec3(8.790492E-01, 1.101937E+00, -1.535900E-01), vec3(9.419879E-01, 1.075027E+00, -1.516121E-01), vec3(1.005200E+00, 1.047450E+00, -1.495393E-01), vec3(1.068595E+00, 1.019229E+00, -1.473743E-01), vec3(1.132079E+00, 9.904111E-01, -1.451228E-01), vec3(1.195562E+00, 9.610470E-01, -1.427911E-01), vec3(1.258952E+00, 9.311876E-01, -1.403853E-01), vec3(1.322155E+00, 9.008838E-01, -1.379118E-01), vec3(1.385085E+00, 8.701851E-01, -1.353755E-01), vec3(1.447610E+00, 8.391317E-01, -1.327810E-01), vec3(1.509572E+00, 8.077605E-01, -1.301333E-01), vec3(1.570813E+00, 7.761082E-01, -1.274373E-01), vec3(1.631175E+00, 7.442114E-01, -1.246980E-01), vec3(1.690527E+00, 7.121119E-01, -1.219200E-01), vec3(1.748767E+00, 6.798771E-01, -1.191085E-01), vec3(1.805788E+00, 6.475815E-01, -1.162701E-01), vec3(1.861481E+00, 6.153001E-01, -1.134109E-01), vec3(1.915737E+00, 5.831081E-01, -1.105374E-01), vec3(1.968406E+00, 5.510737E-01, -1.076565E-01), vec3(2.019379E+00, 5.192531E-01, -1.047715E-01), vec3(2.068605E+00, 4.877034E-01, -1.018832E-01), vec3(2.116035E+00, 4.564816E-01, -9.899258E-02), vec3(2.161619E+00, 4.256442E-01, -9.610039E-02), vec3(2.205355E+00, 3.952283E-01, -9.320728E-02), vec3(2.247016E+00, 3.653102E-01, -9.032203E-02), vec3(2.286212E+00, 3.360053E-01, -8.745773E-02), vec3(2.322551E+00, 3.074293E-01, -8.462748E-02), vec3(2.355643E+00, 2.796983E-01, -8.184441E-02), vec3(2.385179E+00, 2.529122E-01, -7.911832E-02), vec3(2.411291E+00, 2.270562E-01, -7.644707E-02), vec3(2.434250E+00, 2.020731E-01, -7.382581E-02), vec3(2.454327E+00, 1.779059E-01, -7.124969E-02), vec3(2.471793E+00, 1.544974E-01, -6.871386E-02), vec3(2.486810E+00, 1.318213E-01, -6.621644E-02), vec3(2.499142E+00, 1.099528E-01, -6.376390E-02), vec3(2.508465E+00, 8.898728E-02, -6.136401E-02), vec3(2.514454E+00, 6.902014E-02, -5.902449E-02), vec3(2.516787E+00, 5.014650E-02, -5.675308E-02), vec3(2.515281E+00, 3.242012E-02, -5.455461E-02), vec3(2.510147E+00, 1.580008E-02, -5.242557E-02), vec3(2.501651E+00, 2.409702E-04, -5.036125E-02), vec3(2.490061E+00, -1.430293E-02, -4.835691E-02), vec3(2.475644E+00, -2.787763E-02, -4.640780E-02), vec3(2.458524E+00, -4.050184E-02, -4.451170E-02), vec3(2.438652E+00, -5.217302E-02, -4.267014E-02), vec3(2.416041E+00, -6.290465E-02, -4.088408E-02), vec3(2.390702E+00, -7.271016E-02, -3.915446E-02), vec3(2.362647E+00, -8.160284E-02, -3.748224E-02), vec3(2.332006E+00, -8.960488E-02, -3.586778E-02), vec3(2.298837E+00, -9.674343E-02, -3.430864E-02), vec3(2.263040E+00, -1.030396E-01, -3.280152E-02), vec3(2.224515E+00, -1.085144E-01, -3.134317E-02), vec3(2.183162E+00, -1.131888E-01, -2.993031E-02), vec3(2.138985E+00, -1.170885E-01, -2.856103E-02), vec3(2.092322E+00, -1.202583E-01, -2.723575E-02), vec3(2.043580E+00, -1.227489E-01, -2.595460E-02), vec3(1.993169E+00, -1.246110E-01, -2.471774E-02), vec3(1.941496E+00, -1.258955E-01, -2.352532E-02), vec3(1.888731E+00, -1.266336E-01, -2.237612E-02), vec3(1.835119E+00, -1.268719E-01, -2.126993E-02), vec3(1.781178E+00, -1.266850E-01, -2.020835E-02), vec3(1.727426E+00, -1.261471E-01, -1.919298E-02), vec3(1.674379E+00, -1.253323E-01, -1.822547E-02), vec3(1.622437E+00, -1.242991E-01, -1.730664E-02), vec3(1.571505E+00, -1.230536E-01, -1.643371E-02), vec3(1.521356E+00, -1.215911E-01, -1.560290E-02), vec3(1.471761E+00, -1.199070E-01, -1.481042E-02), vec3(1.422494E+00, -1.179971E-01, -1.405246E-02), vec3(1.373536E+00, -1.158760E-01, -1.332694E-02), vec3(1.325033E+00, -1.135714E-01, -1.263340E-02), vec3(1.277005E+00, -1.110982E-01, -1.197045E-02), vec3(1.229469E+00, -1.084710E-01, -1.133672E-02), vec3(1.182445E+00, -1.057045E-01, -1.073083E-02), vec3(1.135944E+00, -1.028140E-01, -1.015115E-02), vec3(1.090028E+00, -9.981636E-02, -9.596884E-03), vec3(1.044795E+00, -9.672766E-02, -9.067950E-03), vec3(1.000341E+00, -9.356435E-02, -8.564254E-03), vec3(9.567625E-01, -9.034315E-02, -8.085670E-03), vec3(9.140990E-01, -8.707513E-02, -7.631671E-03), vec3(8.724007E-01, -8.377818E-02, -7.200966E-03), vec3(8.317810E-01, -8.047815E-02, -6.792405E-03), vec3(7.923530E-01, -7.720093E-02, -6.404826E-03), vec3(7.542297E-01, -7.397255E-02, -6.037050E-03), vec3(7.174977E-01, -7.081290E-02, -5.687499E-03), vec3(6.821161E-01, -6.772247E-02, -5.356688E-03), vec3(6.480060E-01, -6.469796E-02, -5.043423E-03), vec3(6.150882E-01, -6.173598E-02, -4.746524E-03), vec3(5.832837E-01, -5.883315E-02, -4.464810E-03), vec3(5.525690E-01, -5.599348E-02, -4.197302E-03), vec3(5.229613E-01, -5.322388E-02, -3.943484E-03), vec3(4.944434E-01, -5.052562E-02, -3.702843E-03), vec3(4.669975E-01, -4.789990E-02, -3.474872E-03), vec3(4.406057E-01, -4.534781E-02, -3.259070E-03), vec3(4.152519E-01, -4.287098E-02, -3.054902E-03), vec3(3.909333E-01, -4.047338E-02, -2.861817E-03), vec3(3.676544E-01, -3.816022E-02, -2.679254E-03), vec3(3.454195E-01, -3.593660E-02, -2.506657E-03), vec3(3.242323E-01, -3.380752E-02, -2.343480E-03), vec3(3.040693E-01, -3.177450E-02, -2.189048E-03), vec3(2.849291E-01, -2.983837E-02, -2.043231E-03), vec3(2.668509E-01, -2.800362E-02, -1.906266E-03), vec3(2.498742E-01, -2.627477E-02, -1.778383E-03), vec3(2.340380E-01, -2.465626E-02, -1.659820E-03), vec3(2.193497E-01, -2.314998E-02, -1.550489E-03), vec3(2.057325E-01, -2.174951E-02, -1.449636E-03), vec3(1.930996E-01, -2.044691E-02, -1.356494E-03), vec3(1.813641E-01, -1.923423E-02, -1.270296E-03), vec3(1.704391E-01, -1.810348E-02, -1.190280E-03), vec3(1.602979E-01, -1.705297E-02, -1.116116E-03), vec3(1.508736E-01, -1.607578E-02, -1.047312E-03), vec3(1.420191E-01, -1.515619E-02, -9.828534E-04), vec3(1.335871E-01, -1.427846E-02, -9.217242E-04), vec3(1.254305E-01, -1.342685E-02, -8.629110E-04), vec3(1.174393E-01, -1.259004E-02, -8.056016E-04), vec3(1.096530E-01, -1.177255E-02, -7.500272E-04), vec3(1.021484E-01, -1.098251E-02, -6.967327E-04), vec3(9.500256E-02, -1.022805E-02, -6.462583E-04), vec3(8.829232E-02, -9.517274E-03, -5.991500E-04), vec3(8.203211E-02, -8.851708E-03, -5.555099E-04), vec3(7.617779E-02, -8.227100E-03, -5.149744E-04), vec3(7.071848E-02, -7.642931E-03, -4.773879E-04), vec3(6.564327E-02, -7.098648E-03, -4.425979E-04), vec3(6.094121E-02, -6.593712E-03, -4.104500E-04), vec3(5.660647E-02, -6.127880E-03, -3.808564E-04), vec3(5.262366E-02, -5.699485E-03, -3.537132E-04), vec3(4.896744E-02, -5.305849E-03, -3.288424E-04), vec3(4.561254E-02, -4.944299E-03, -3.060656E-04), vec3(4.253371E-02, -4.612173E-03, -2.852040E-04), vec3(3.971720E-02, -4.308141E-03, -2.661454E-04), vec3(3.714224E-02, -4.030052E-03, -2.487379E-04), vec3(3.477292E-02, -3.773977E-03, -2.327449E-04), vec3(3.257283E-02, -3.535837E-03, -2.179389E-04), vec3(3.050490E-02, -3.311359E-03, -2.041028E-04), vec3(2.854500E-02, -3.098607E-03, -1.909896E-04), vec3(2.669066E-02, -2.897316E-03, -1.785825E-04), vec3(2.494395E-02, -2.707708E-03, -1.668956E-04), vec3(2.330697E-02, -2.530010E-03, -1.559428E-04), vec3(2.178178E-02, -2.364448E-03, -1.457380E-04), vec3(2.036242E-02, -2.210375E-03, -1.362413E-04), vec3(1.903675E-02, -2.066471E-03, -1.273716E-04), vec3(1.779758E-02, -1.931956E-03, -1.190804E-04), vec3(1.663770E-02, -1.806050E-03, -1.113199E-04), vec3(1.554991E-02, -1.687968E-03, -1.040417E-04), vec3(1.452803E-02, -1.577042E-03, -9.720444E-05), vec3(1.356866E-02, -1.472901E-03, -9.078545E-05), vec3(1.266883E-02, -1.375222E-03, -8.476490E-05), vec3(1.182557E-02, -1.283685E-03, -7.912281E-05), vec3(1.103590E-02, -1.197966E-03, -7.383925E-05), vec3(1.029593E-02, -1.117641E-03, -6.888823E-05), vec3(9.602632E-03, -1.042382E-03, -6.424951E-05), vec3(8.954338E-03, -9.720082E-04, -5.991192E-05), vec3(8.349386E-03, -9.063396E-04, -5.586430E-05), vec3(7.786111E-03, -8.451953E-04, -5.209549E-05), vec3(7.262497E-03, -7.883560E-04, -4.859209E-05), vec3(6.775542E-03, -7.354962E-04, -4.533398E-05), vec3(6.322092E-03, -6.862735E-04, -4.230002E-05), vec3(5.898988E-03, -6.403447E-04, -3.946912E-05), vec3(5.503077E-03, -5.973682E-04, -3.682012E-05), vec3(5.131862E-03, -5.570720E-04, -3.433640E-05), vec3(4.784032E-03, -5.193144E-04, -3.200914E-05), vec3(4.458207E-03, -4.839460E-04, -2.982906E-05), vec3(4.152998E-03, -4.508148E-04, -2.778699E-05), vec3(3.867026E-03, -4.197719E-04, -2.587362E-05), vec3(3.598668E-03, -3.906416E-04, -2.407804E-05), vec3(3.346858E-03, -3.633068E-04, -2.239325E-05), vec3(3.111061E-03, -3.377106E-04, -2.081559E-05), vec3(2.890741E-03, -3.137951E-04, -1.934140E-05), vec3(2.685353E-03, -2.914995E-04, -1.796722E-05), vec3(2.494110E-03, -2.707397E-04, -1.668765E-05), vec3(2.316055E-03, -2.514116E-04, -1.549631E-05), vec3(2.150406E-03, -2.334301E-04, -1.438799E-05), vec3(1.996382E-03, -2.167106E-04, -1.335744E-05), vec3(1.853198E-03, -2.011678E-04, -1.239942E-05), vec3(1.720098E-03, -1.867195E-04, -1.150887E-05), vec3(1.596529E-03, -1.733058E-04, -1.068210E-05), vec3(1.482026E-03, -1.608764E-04, -9.915975E-06), vec3(1.376122E-03, -1.493804E-04, -9.207395E-06), vec3(1.278350E-03, -1.387670E-04, -8.553214E-06), vec3(1.188204E-03, -1.289815E-04, -7.950067E-06), vec3(1.105110E-03, -1.199616E-04, -7.394096E-06), vec3(1.028492E-03, -1.116445E-04, -6.881462E-06), vec3(9.577772E-04, -1.039683E-04, -6.408315E-06), vec3(8.923909E-04, -9.687054E-05, -5.970829E-06), vec3(8.318533E-04, -9.029906E-05, -5.565784E-06), vec3(7.758031E-04, -8.421475E-05, -5.190758E-06), vec3(7.238451E-04, -7.857461E-05, -4.843118E-06), vec3(6.755836E-04, -7.333575E-05, -4.520209E-06), vec3(6.306229E-04, -6.845517E-05, -4.219386E-06), vec3(5.885813E-04, -6.389146E-05, -3.938096E-06), vec3(5.492518E-04, -5.962221E-05, -3.674945E-06), vec3(5.125000E-04, -5.563273E-05, -3.429048E-06), vec3(4.781927E-04, -5.190862E-05, -3.199502E-06), vec3(4.461953E-04, -4.843522E-05, -2.985417E-06), vec3(4.163141E-04, -4.519157E-05, -2.785487E-06), vec3(3.883805E-04, -4.215938E-05, -2.598583E-06), vec3(3.622988E-04, -3.932813E-05, -2.424078E-06), vec3(3.379741E-04, -3.668764E-05, -2.261327E-06), vec3(3.153113E-04, -3.422754E-05, -2.109696E-06), vec3(2.941994E-04, -3.193585E-05, -1.968434E-06), vec3(2.745228E-04, -2.979994E-05, -1.836780E-06), vec3(2.561807E-04, -2.780885E-05, -1.714060E-06), vec3(2.390727E-04, -2.595174E-05, -1.599593E-06), vec3(2.230977E-04, -2.421763E-05, -1.492707E-06), vec3(2.081595E-04, -2.259606E-05, -1.392758E-06), vec3(1.941959E-04, -2.108029E-05, -1.299330E-06), vec3(1.811571E-04, -1.966490E-05, -1.212091E-06), vec3(1.689936E-04, -1.834454E-05, -1.130706E-06), vec3(1.576557E-04, -1.711379E-05, -1.054847E-06), vec3(1.470850E-04, -1.596632E-05, -9.841196E-07), vec3(1.372263E-04, -1.489614E-05, -9.181571E-07), vec3(1.280348E-04, -1.389839E-05, -8.566582E-07), vec3(1.194658E-04, -1.296821E-05, -7.993245E-07), vec3(1.114745E-04, -1.210074E-05, -7.458563E-07), vec3(1.040177E-04, -1.129130E-05, -6.959637E-07), vec3(9.705902E-05, -1.053592E-05, -6.494051E-07), vec3(9.056414E-05, -9.830888E-06, -6.059487E-07), vec3(8.449856E-05, -9.172460E-06, -5.653649E-07), vec3(7.882785E-05, -8.556894E-06, -5.274234E-07), vec3(7.351722E-05, -7.980417E-06, -4.918907E-07), vec3(6.854530E-05, -7.440704E-06, -4.586248E-07), vec3(6.389788E-05, -6.936221E-06, -4.275294E-07), vec3(5.956066E-05, -6.465411E-06, -3.985095E-07), vec3(5.551934E-05, -6.026714E-06, -3.714705E-07), vec3(5.175544E-05, -5.618137E-06, -3.462868E-07), vec3(4.824857E-05, -5.237464E-06, -3.228225E-07), vec3(4.498170E-05, -4.882838E-06, -3.009646E-07), vec3(4.193789E-05, -4.552428E-06, -2.805988E-07), vec3(3.910010E-05, -4.244380E-06, -2.616120E-07), vec3(3.645248E-05, -3.956981E-06, -2.438967E-07), vec3(3.398315E-05, -3.688929E-06, -2.273750E-07), vec3(3.168133E-05, -3.439064E-06, -2.119739E-07), vec3(2.953619E-05, -3.206200E-06, -1.976216E-07), vec3(2.753695E-05, -2.989181E-06, -1.842449E-07), vec3(2.567232E-05, -2.786774E-06, -1.717690E-07), vec3(2.393320E-05, -2.597989E-06, -1.601328E-07), vec3(2.231200E-05, -2.422005E-06, -1.492857E-07), vec3(2.080118E-05, -2.258002E-06, -1.391770E-07), vec3(1.939314E-05, -2.105157E-06, -1.297561E-07), vec3(1.807999E-05, -1.962613E-06, -1.209700E-07), vec3(1.685526E-05, -1.829667E-06, -1.127756E-07), vec3(1.571361E-05, -1.705739E-06, -1.051370E-07), vec3(1.464966E-05, -1.590245E-06, -9.801830E-08), vec3(1.365804E-05, -1.482603E-06, -9.138355E-08), vec3(1.273315E-05, -1.382205E-06, -8.519526E-08), vec3(1.187050E-05, -1.288562E-06, -7.942337E-08), vec3(1.106632E-05, -1.201267E-06, -7.404275E-08), vec3(1.031689E-05, -1.119915E-06, -6.902847E-08), vec3(9.618487E-06, -1.044103E-06, -6.435558E-08), vec3(8.967188E-06, -9.734030E-07, -5.999791E-08), vec3(8.359790E-06, -9.074688E-07, -5.593391E-08), vec3(7.793614E-06, -8.460098E-07, -5.214570E-08), vec3(7.265980E-06, -7.887344E-07, -4.861536E-08), vec3(6.774213E-06, -7.353520E-07, -4.532508E-08), vec3(6.315534E-06, -6.855617E-07, -4.225613E-08), vec3(5.887706E-06, -6.391203E-07, -3.939361E-08), vec3(5.488876E-06, -5.958267E-07, -3.672510E-08), vec3(5.117191E-06, -5.554797E-07, -3.423822E-08), vec3(4.770795E-06, -5.178776E-07, -3.192057E-08), vec3(4.447747E-06, -4.828104E-07, -2.975908E-08), vec3(4.146454E-06, -4.501045E-07, -2.774319E-08), vec3(3.865600E-06, -4.196176E-07, -2.586402E-08), vec3(3.603865E-06, -3.912058E-07, -2.411279E-08), vec3(3.359925E-06, -3.647253E-07, -2.248069E-08));\nconst float d65[] = float[](0.0341, 0.36014, 0.68618, 1.01222, 1.33826, 1.6643, 1.99034, 2.31638, 2.64242, 2.96846, 3.2945, 4.98865, 6.6828, 8.37695, 10.0711, 11.7652, 13.4594, 15.1535, 16.8477, 18.5418, 20.236, 21.9177, 23.5995, 25.2812, 26.963, 28.6447, 30.3265, 32.0082, 33.69, 35.3717, 37.0535, 37.343, 37.6326, 37.9221, 38.2116, 38.5011, 38.7907, 39.0802, 39.3697, 39.6593, 39.9488, 40.4451, 40.9414, 41.4377, 41.934, 42.4302, 42.9265, 43.4228, 43.9191, 44.4154, 44.9117, 45.0844, 45.257, 45.4297, 45.6023, 45.775, 45.9477, 46.1203, 46.293, 46.4656, 46.6383, 47.1834, 47.7285, 48.2735, 48.8186, 49.3637, 49.9088, 50.4539, 50.9989, 51.544, 52.0891, 51.8777, 51.6664, 51.455, 51.2437, 51.0323, 50.8209, 50.6096, 50.3982, 50.1869, 49.9755, 50.4428, 50.91, 51.3773, 51.8446, 52.3118, 52.7791, 53.2464, 53.7137, 54.1809, 54.6482, 57.4589, 60.2695, 63.0802, 65.8909, 68.7015, 71.5122, 74.3229, 77.1336, 79.9442, 82.7549, 83.628, 84.5011, 85.3742, 86.2473, 87.1204, 87.9936, 88.8667, 89.7398, 90.6129, 91.486, 91.6806, 91.8752, 92.0697, 92.2643, 92.4589, 92.6535, 92.8481, 93.0426, 93.2372, 93.4318, 92.7568, 92.0819, 91.4069, 90.732, 90.057, 89.3821, 88.7071, 88.0322, 87.3572, 86.6823, 88.5006, 90.3188, 92.1371, 93.9554, 95.7736, 97.5919, 99.4102, 101.228, 103.047, 104.865, 106.079, 107.294, 108.508, 109.722, 110.936, 112.151, 113.365, 114.579, 115.794, 117.008, 117.088, 117.169, 117.249, 117.33, 117.41, 117.49, 117.571, 117.651, 117.732, 117.812, 117.517, 117.222, 116.927, 116.632, 116.336, 116.041, 115.746, 115.451, 115.156, 114.861, 114.967, 115.073, 115.18, 115.286, 115.392, 115.498, 115.604, 115.711, 115.817, 115.923, 115.212, 114.501, 113.789, 113.078, 112.367, 111.656, 110.945, 110.233, 109.522, 108.811, 108.865, 108.92, 108.974, 109.028, 109.082, 109.137, 109.191, 109.245, 109.3, 109.354, 109.199, 109.044, 108.888, 108.733, 108.578, 108.423, 108.268, 108.112, 107.957, 107.802, 107.501, 107.2, 106.898, 106.597, 106.296, 105.995, 105.694, 105.392, 105.091, 104.79, 105.08, 105.37, 105.66, 105.95, 106.239, 106.529, 106.819, 107.109, 107.399, 107.689, 107.361, 107.032, 106.704, 106.375, 106.047, 105.719, 105.39, 105.062, 104.733, 104.405, 104.369, 104.333, 104.297, 104.261, 104.225, 104.19, 104.154, 104.118, 104.082, 104.046, 103.641, 103.237, 102.832, 102.428, 102.023, 101.618, 101.214, 100.809, 100.405, 100.0, 99.6334, 99.2668, 98.9003, 98.5337, 98.1671, 97.8005, 97.4339, 97.0674, 96.7008, 96.3342, 96.2796, 96.225, 96.1703, 96.1157, 96.0611, 96.0065, 95.9519, 95.8972, 95.8426, 95.788, 95.0778, 94.3675, 93.6573, 92.947, 92.2368, 91.5266, 90.8163, 90.1061, 89.3958, 88.6856, 88.8177, 88.9497, 89.0818, 89.2138, 89.3459, 89.478, 89.61, 89.7421, 89.8741, 90.0062, 89.9655, 89.9248, 89.8841, 89.8434, 89.8026, 89.7619, 89.7212, 89.6805, 89.6398, 89.5991, 89.4091, 89.219, 89.029, 88.8389, 88.6489, 88.4589, 88.2688, 88.0788, 87.8887, 87.6987, 87.2577, 86.8167, 86.3757, 85.9347, 85.4936, 85.0526, 84.6116, 84.1706, 83.7296, 83.2886, 83.3297, 83.3707, 83.4118, 83.4528, 83.4939, 83.535, 83.576, 83.6171, 83.6581, 83.6992, 83.332, 82.9647, 82.5975, 82.2302, 81.863, 81.4958, 81.1285, 80.7613, 80.394, 80.0268, 80.0456, 80.0644, 80.0831, 80.1019, 80.1207, 80.1395, 80.1583, 80.177, 80.1958, 80.2146, 80.4209, 80.6272, 80.8336, 81.0399, 81.2462, 81.4525, 81.6588, 81.8652, 82.0715, 82.2778, 81.8784, 81.4791, 81.0797, 80.6804, 80.281, 79.8816, 79.4823, 79.0829, 78.6836, 78.2842, 77.4279, 76.5716, 75.7153, 74.859, 74.0027, 73.1465, 72.2902, 71.4339, 70.5776, 69.7213, 69.9101, 70.0989, 70.2876, 70.4764, 70.6652, 70.854, 71.0428, 71.2315, 71.4203, 71.6091, 71.8831, 72.1571, 72.4311, 72.7051, 72.979, 73.253, 73.527, 73.801, 74.075, 74.349, 73.0745, 71.8, 70.5255, 69.251, 67.9765, 66.702, 65.4275, 64.153, 62.8785, 61.604, 62.4322, 63.2603, 64.0885, 64.9166, 65.7448, 66.573, 67.4011, 68.2293, 69.0574, 69.8856, 70.4057, 70.9259, 71.446, 71.9662, 72.4863, 73.0064, 73.5266, 74.0467, 74.5669, 75.087, 73.9376, 72.7881, 71.6387, 70.4893, 69.3398, 68.1904, 67.041, 65.8916, 64.7421, 63.5927, 61.8752, 60.1578, 58.4403, 56.7229, 55.0054, 53.288, 51.5705, 49.8531, 48.1356, 46.4182, 48.4569, 50.4956, 52.5344, 54.5731, 56.6118, 58.6505, 60.6892, 62.728, 64.7667, 66.8054, 66.4631, 66.1209, 65.7786, 65.4364, 65.0941, 64.7518, 64.4096, 64.0673, 63.7251, 63.3828, 63.4749, 63.567, 63.6592, 63.7513, 63.8434, 63.9355, 64.0276, 64.1198, 64.2119, 64.304, 63.8188, 63.3336, 62.8484, 62.3632, 61.8779, 61.3927, 60.9075, 60.4223, 59.9371, 59.4519, 58.7026, 57.9533, 57.204, 56.4547, 55.7054, 54.9562, 54.2069, 53.4576, 52.7083, 51.959, 52.5072, 53.0553, 53.6035, 54.1516, 54.6998, 55.248, 55.7961, 56.3443, 56.8924, 57.4406, 57.7278, 58.015, 58.3022, 58.5894, 58.8765, 59.1637, 59.4509, 59.7381, 60.0253, 60.3125);\n\n// integer domain SRGB Color Matching Functions\nvec3 srgbcmfi(\n  int l) {\n  return l >= 360 && l <= 830 ? srgbcmf2[l - 360] : vec3(0.0); }\n\n// integer domain CIE Standard Illuminant D65\nfloat cied65i(\n  int l) {\n  return l >= 300 && l <= 830 ? d65[l - 300] : 0.0; }\n\n// nonlinear sR'G'B' component to linear sRGB component\nfloat srgb_igamma(\n  float v) {\n  return v <= 0.04045\n    ? v * 0.0773993808\n    : pow((v + 0.055) * 0.94786729857, 2.4) ; }\n\nvec3 srgb_igamma(\n  vec3 v) {\n  return vec3(\n    srgb_igamma(v.r),\n    srgb_igamma(v.g),\n    srgb_igamma(v.b)); }\n\n//\n// math lib\n//\n\n// needed to produce infinities\nfloat zero = 0.0;\n\nconst float pi = acos(-1.0);\n\n// vector lib\n\n// handy nil vector\nconst vec4 nil = vec4(0.0);\n\n// basis vectors\nconst vec4 dx = vec4(1.0, nil.xyz);\nconst vec4 dy = dx.wxyz;\nconst vec4 dz = dy.wxyz;\nconst vec4 dw = dz.wxyz;\n\nvec2 dir2(\n  float a) {\n  return vec2(cos(a), sin(a)); }\n\n// transformation matrices\n\nmat4 translate(\n  vec4 by) {\n  return mat4(dx, dy, dz, dw + by); }\n\n// axis-angle rotation worked out efficiently\nmat4 rotate(\n  vec4 axis,\n  float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  vec4 l = (1.0 - c) * axis;\n  vec3 m = l.xyz * axis.yzx;\n  vec4 n = s * axis;\n  l = l * axis + c;\n  return mat4(\n    l.x, m.x - n.z, m.z + n.y, 0.0,\n    m.x + n.z, l.y, m.y - n.x, 0.0,\n    m.z - n.y, m.y + n.x, l.z, 0.0,\n    dw); }\n\n// vector projection\nvec3 projectu(\n  vec3 v,\n  vec3 u) {\n  return u * dot(v, u); }\n\n// vector rejection\nvec3 rejectu(\n  vec3 v,\n  vec3 u) {\n  return v - projectu(v, u); }\n\n// functions with partial derivatives\n\nfloat clampe(\n  float v) {\n  return clamp(v, -0.5, 0.5); }\n\nfloat clampp(\n  float v) {\n  return v <= -0.5 || v >= 0.5 ? 0.0 : 1.0; }\n\nfloat abse(\n  float v) {\n  return abs(v); }\n\nfloat absp(\n  float v) {\n  return sign(v); }\n\nfloat sine(\n  float v) {\n  return sin(v); }\n\nfloat sinp(\n  float v) {\n  return cos(v); }\n\nfloat cose(\n  float v) {\n  return cos(v); }\n  \nfloat cosp(\n  float v) {\n  return -sin(v); }\n\nfloat acose(\n  float v) {\n  return acos(v); }\n\nfloat acosp(\n  float v) {\n  return -1.0 / sqrt(1.0 - pow(v, 2.0)); }\n\nfloat atane(\n  float n,\n  float d) {\n  return atan(n, d); }\n\nfloat atanp(\n  float n,\n  float d) {\n  return 1.0 / (pow(n / d, 2.0) + 1.0); }\n\nfloat loge(\n  float v) {\n  return log(v); }\n\nfloat logp(\n  float v) {\n  return 1.0 / v; }\n\nfloat logistice(\n  float v) {\n  return 1.0 / (1.0 + exp(-v)); }\n\nfloat logisticp(\n  float v) {\n  float q = 1.0 / (1.0 + exp(v));\n  return q - q * q; }\n\nfloat sqrte(\n  float v) {\n  return sqrt(v); }\n\nfloat sqrtp(\n  float v) {\n  return 0.5 * pow(v, -0.5); }\n\n// coefficient which corrects sign of pow(abs(x), n)\nfloat powc(\n  float v,\n  float p) {\n  return (v < 0.0 ? -1.0 + 2.0 * floor(2.0 * fract(p / 2.0)) : 1.0); }\n\nfloat powe(\n  float v,\n  float p) {\n  return powc(v, p) * pow(abs(v), p); }  \n  \nfloat powp(\n  float v,\n  float p) {\n  return powc(v, p) * p * pow(abs(v), p - 1.0); }\n\n// functions with gradients\n\nvec4 constg(float c) {\n  return vec4(nil.www, c); }\n\nmat4 constg(vec3 c) {\n  return mat4(\n    constg(c.x),\n    constg(c.y),\n    constg(c.z),\n    nil); }\n\nmat4 ivg(vec3 c) {\n  return mat4(\n    dx.xyz, c.x,\n    dy.xyz, c.y,\n    dz.xyz, c.z,\n    nil); }\n\nvec4 prodg(vec4 p, vec4 q) {\n  return vec4(\n    p.w * q.x + p.x * q.w,\n    p.w * q.y + p.y * q.w,\n    p.w * q.z + p.z * q.w,\n    p.w * q.w); }\n\nmat4 scaleg(vec4 s, mat4 p) {\n  return mat4(\n    prodg(s, p[0]),\n    prodg(s, p[1]),\n    prodg(s, p[2]),\n    nil); }\n\nvec4 dotg(mat4 p, mat4 q) {\n  return prodg(p[0], q[0]) +\n    prodg(p[1], q[1]) +\n    prodg(p[2], q[2]); }\n\nvec4 sqrtg(vec4 p) {\n  return vec4(\n    sqrtp(p.w) * p.xyz,\n    sqrte(p.w)); }\n\nmat4 sqrtg(mat4 p) {\n  return mat4(\n    sqrtg(p[0]),\n    sqrtg(p[1]),\n    sqrtg(p[2]),\n    nil); }\n\nvec4 lengthg(mat4 p) {\n  return sqrtg(dotg(p, p)); }\n\nvec4 absg(vec4 p) {\n  return vec4(\n    absp(p.w) * p.xyz,\n    abse(p.w)); }\n\nmat4 absg(mat4 p) {\n  return mat4(\n    absg(p[0]),\n    absg(p[1]),\n    absg(p[2]),\n    nil); }\n\nvec4 powg(vec4 p, float c) {\n  return vec4(\n    powp(p.w, c) * p.xyz,\n    powe(p.w, c)); }\n\nmat4 powg(mat4 p, float c) {\n  return mat4(\n    powg(p[0], c),\n    powg(p[1], c),\n    powg(p[2], c),\n    nil); }\n\nvec4 maxg(vec4 p, vec4 q) {\n  return p.w > q.w ? p : q; }\n  \nvec4 ming(vec4 p, vec4 q) {\n  return p.w < q.w ? p : q; }\n\nmat4 maxg(mat4 p, mat4 q) {\n  return mat4(\n    maxg(p[0], q[0]),\n    maxg(p[1], q[1]),\n    maxg(p[2], q[2]),\n    nil); }\n  \nmat4 ming(mat4 p, mat4 q) {\n  return mat4(\n    ming(p[0], q[0]),\n    ming(p[1], q[1]),\n    ming(p[2], q[2]),\n    nil); }\n\nvec4 clampg(\n  vec4 v) {\n  return vec4(\n    clampp(v.w) * v.xyz,\n    clampe(v.w)); }\n\nvec4 sing(\n  vec4 v) {\n  return vec4(\n    sinp(v.w) * v.xyz,\n    sine(v.w)); }\n\nvec4 cosg(\n  vec4 v) {\n  return vec4(\n    cosp(v.w) * v.xyz,\n    cose(v.w)); }\n\nvec4 acosg(\n  vec4 v) {\n  return vec4(\n    acosp(v.w) * v.xyz,\n    acose(v.w)); }\n\nvec4 atang(\n  vec4 n,\n  vec4 d) {\n  return vec4(\n    atanp(n.w, d.w) * (d.w * n.xyz - n.w * d.xyz) / pow(d.w, 2.0),\n    atane(n.w, d.w)); }\n\nvec4 logg(\n  vec4 v) {\n  return vec4(\n    logp(v.w) * v.xyz,\n    loge(v.w)); }\n\n// pseudorandom\n\n// i can't believe it's an LCG\n// https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00996-5/S0025-5718-99-00996-5.pdf\nint next_hash(\n  int s) {\n  return s * 594156893; }\n  \n// multilinear congruential seed function\nint hash(\n  ivec3 p) {\n  p *= ivec3(37769685, 26757677, 20501397);\n  return next_hash(next_hash(p.x) ^ next_hash(p.y) ^ next_hash(p.z)); }\n\nint seed;\n\nvoid srand(ivec3 p) {\n  seed = hash(p); }\n\nint rand() {\n  seed = next_hash(seed);\n  return seed >> 1; }\n\nconst float rand_coef = pow(2.0, -31.0);\n\nfloat unitrand() {\n  return rand_coef * float(rand() + (1 << 30)); }\n\nfloat boxrand() {\n  return rand_coef * float(rand()); }\n\n// models an interaction with isotropic roughness\n// n - the surface normal\n// s - the azimuth of the incoming ray\n// you should supply a random value between 1.0 and -1.0 for s\nvec3 axial(\n  vec3 n,\n  float v) {\n  float u = 6.28318530718 * boxrand();\n  float r = sqrt(1.0 - pow(v, 2.0));\n  vec3 t = normalize(abs(n.y) < 0.5 ? vec3(-n.z, 0.0, n.x) : vec3(-n.y, n.x, 0.0));\n  vec3 b = cross(n.xyz, t.xyz);\n  return vec3(v * n.xyz + r * (cos(u) * t + sin(u) * b)); }\n\n// power-law sampling distribution\nvec3 power_icdf(vec3 spec_dir, float power) {\n  return axial(spec_dir, pow(unitrand(), 1.0 / (power + 1.0))); }\n\n// power-law PDF\nfloat power_pdf(\n  vec3 spec_dir,\n  float power,\n  vec3 rd) {\n  return (power + 1.0) / (2.0 * pi) * pow(max(0.0, dot(spec_dir, rd)), power); }\n\n// corrected blinn-phong radiance coefficient\nvec3 blinn_phong_coef(vec3 ri, vec3 ro, vec3 n, vec3 albedo, vec3 specularity, vec3 power) {\n  vec3 r = albedo * dot(n, ri) * (1.0 - specularity) / pi;\n  float rr = dot(n, normalize(ri - ro));\n  if (rr > 0.0) {\n    r += specularity * (power + 2.0) / (2.0 * pi) * pow(vec3(rr), power); }\n  return r; }\n\n// buggy fresnel reflectance\nfloat fresnel_reflectance(vec3 rd, vec3 n, float ior) {\n  n = -n;\n  float dt1 = dot(rd, n);\n  float ior2 = pow(ior, 2.0);\n  float dt12 = pow(dt1, 2.0);\n  float discriminant = -1.0 + ior2 + dt12;\n  if (discriminant < 0.0) {\n    return 1.0; }\n  // fresnel reflectance for positive discriminant\n  vec3 refracted_heading = normalize(\n    rd + (-dt1 + sqrt(discriminant)) * n);\n  float dt2 = dot(refracted_heading, n);\n  float dt22 = pow(dt2, 2.0);\n  float k1 = dt12 + ior2 * dt22;\n  float k2 = ior2 * dt12 + dt22;\n  float v = 2.0 * ior * dt1 * dt2;\n  return clamp(0.5 * (\n    (k1 - v) / (k1 + v)\n    + (k2 - v) / (k2 + v)), 0.0, 1.0); }\n\n// tri-planar texture mapping\n\n// Shane awesome work below\n// Tri-Planar blending function. Based on an old Nvidia tutorial.\nvec3 tex3D(sampler2D tex, vec3 p, vec3 n){\n  n = max((abs(n) - 0.2) * 7.0, 0.001);\n  n /= (n.x + n.y + n.z); \n  return (texture(tex, p.yz) * n.x + texture(tex, p.zx) * n.y + texture(tex, p.xy) * n.z).xyz; }\n\n// Texture displacement mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec4 texDisp(sampler2D tx, vec3 p, vec3 n) {\n  const vec2 e = vec2(0.002, 0);\n  // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.    \n  mat3 m = mat3(tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n)); \n  vec3 g = vec3(0.299, 0.587, 0.114) * m; // Converting to greyscale.\n  float v = dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114));\n  return vec4((g - v) / e.x, v); } // Gradient and value.\n\n// Texture displacement mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec4 texDispg(sampler2D tx, mat4 p, vec3 n) {\n  return texDisp(tx, vec3(p[0].w, p[1].w, p[2].w), n) * mat4(\n    p[0].xyz, 0.0,\n    p[1].xyz, 0.0,\n    p[2].xyz, 0.0,\n    dw); } // Gradient and value.\n\n// Texture bump mapping.\n// Bumped normal. \"bf\" - bump factor.\nvec3 texBump(sampler2D tx, vec3 p, vec3 n, float bf){\n  return normalize(n + bf * rejectu(texDisp(tx, p, n).xyz, n)); }\n\n#define G (.5+sqrt(5./4.))\n#define PI2 6.28318531\n\n#define XCHGV3(a,b) { vec3 d=a; a=b; b=d; }\n\nvoid sortXYZ(inout vec3 p1, inout vec3 p2, inout vec3 p3)\n{\n    #define W(p) (p.x+p.y*.01+p.z*.0001)\n    if(W(p3)>W(p2)) XCHGV3(p3,p2);\n    if(W(p2)>W(p1)) XCHGV3(p2,p1);\n    if(W(p3)>W(p2)) XCHGV3(p3,p2);\n    if(W(p2)>W(p1)) XCHGV3(p2,p1);\n}\n\n// get closest icosahedron triangle\nvoid getIcosaTriOld(vec3 pos, out vec3 p1, out vec3 p2, out vec3 p3)\n{\n    float dot1 = -1000.0;\n    float dot2 = -1000.0;\n    float dot3 = -1000.0;\n    for(int s1=0;s1<2;s1++)\n    {\n    \tfor(int s2=0;s2<2;s2++)\n        {\n    \t\tfor(int perm=0;perm<3;perm++)\n            {\n                vec3 p0 = normalize(vec3(G,1,0))*vec3(s1*2-1,s2*2-1,0);\n                if     (perm>1) p0 = p0.yzx;\n                else if(perm>0) p0 = p0.zxy;\n                float dot0 = dot(pos,p0);\n                if(dot0>dot1){\n                    dot3=dot2; p3=p2;\n                    dot2=dot1; p2=p1; \n                    dot1=dot0; p1=p0;\n                }\n                else if(dot0>dot2){\n                    dot3=dot2; p3=p2;\n                    dot2=dot0; p2=p0; \n                }\n                else if(dot0>dot3){\n                    dot3=dot0; p3=p0;\n                }\n            }\n        }\n    }\n}\n\nvoid getIcosaTri(vec3 pos, out vec3 p1, out vec3 p2, out vec3 p3)\n{\n    mat2 rot=mat2(0.809016994374947, 0.587785252292473, -0.587785252292473, 0.809016994374947);\n    \n    float ph = atan(pos.y,pos.x);  ph=(ph<0.)?PI2+ph:ph;\n    \n    float dang=PI2/5.;\n    float seg=ph/dang;\n    float fseg=floor(seg);\n    \n    // 3 topmost points of segment + lower point of seg (p4t)\n    vec3 p1t=vec3(0,0,1.);\n    vec3 p2t=vec3(cos(fseg*dang-vec2(0,PI2/4.))*.894427190999916,.447213595499958);\n    vec3 p4t=vec3(rot*p2t.xy,-p2t.z);\n    vec3 p3t=vec3(rot*p4t.xy, p2t.z);\n\n    if (dot(pos,cross(p2t,p4t))<0. || dot(pos,cross(p4t,p3t))<0.) {\n        // xchg p2 and p3 (because bottom is mirrored in z)\n        p1t=vec3(0,0,-1.);\n        p3t=vec3((seg-fseg<.5)?p2t.xy*rot:rot*p2t.xy,-p2t.z);\n        p4t=vec3(rot*p3t.xy,-p3t.z);\n        p2t=vec3(rot*p4t.xy, p3t.z);\n    }\n\n    // mix top or below\n    bool top=(dot(pos,cross(p2t,p3t))>0.);\n    p1=top?p1t:p4t; \n    p2=top?p2t:p3t; \n    p3=top?p3t:p2t;\n}\n\n\n// check if pos hits triangle\nbool thruTriangle(vec3 pos, vec3 v1, vec3 v2, vec3 v3)\n{\n    vec3 n = cross(v2-v1,v3-v1);\n    // calc where pos hits triangle plane\n    pos = pos*dot(v1,n)/dot(pos,n);\n    v1-=pos; v2-=pos; v3-=pos;\n \tvec3 c1=cross(v1,v2);\n    vec3 c2=cross(v2,v3);\n    vec3 c3=cross(v3,v1);\n    // check if the cross products of all the pos-edge-vectors show into the same direction\n    return dot(c1,c2)>0. && dot(c2,c3)>0. && dot(c3,c1)>0. ;\n}\n\n// subdivide 1 triangle into 4 triangles and give back closest triangle\nvoid getTriSubDivOld(vec3 pos, inout vec3 p1, inout vec3 p2, inout vec3 p3)\n{\n    vec3 p4 = normalize(p1+p2);\n    vec3 p5 = normalize(p2+p3);\n    vec3 p6 = normalize(p3+p1);\n\n    if     (thruTriangle(pos,p1,p4,p6)) { p1=p1; p2=p4; p3=p6; }\n    else if(thruTriangle(pos,p6,p5,p3)) { p1=p6; p2=p5; p3=p3; }\n    else if(thruTriangle(pos,p6,p4,p5)) { p1=p6; p2=p4; p3=p5; }\n    else if(thruTriangle(pos,p4,p2,p5)) { p1=p4; p2=p2; p3=p5; }\n}\n\nvoid getTriSubDiv(vec3 pos, inout vec3 p1, inout vec3 p2, inout vec3 p3)\n{\n    mat3 m = mat3((p2-p1)*.5,(p3-p1)*.5,p1);\n    vec3 q = inverse(m)*pos;\n    q/=q.z;\n    vec3 qf=floor(q);\n    float f=step(1.,q.x-qf.x+q.y-qf.y);\n    p1 = m*vec3( qf.xy+f,            1 );\n    p2 = m*vec3( qf.xy+vec2(1.-f,f), 1 );\n    p3 = m*vec3( qf.xy+vec2(f,1.-f), 1 );\n    p1=normalize(p1);\n    p2=normalize(p2);\n    p3=normalize(p3);\n}\n\n\n// get some 3d rand values by multiplying 2d rand in xy, yz, zx plane\nvec4 getRand(vec3 pos)\n{\n    vec4 r = vec4(1.0);\n    r*=texture(iChannel2,pos.xy)*2.-1.;\n    r*=texture(iChannel2,pos.xz)*2.-1.;\n    r*=texture(iChannel2,pos.zy)*2.-1.;\n    return r;\n}\n\n// distancefield of torus around arbitrary axis z\n// similar to https://iquilezles.org/articles/distfunctions\nfloat distTorus(vec3 pos, float r1, float r2, vec3 z)\n{\n    float pz = dot(pos,normalize(z));\n    return length(vec2(length(pos-z*pz)-r1,pz))-r2;\n}\n\nfloat getRand01Sph(vec3 pos)\n{\n    return texture(iChannel2,pos.xy*123.+pos.z).x;\n}\n\nfloat distSphere(vec3 pos, float r)\n{\n\treturn length(pos)-r;\n}\n\nfloat calcAngle(vec3 v1, vec3 v2)\n{\n    return acos(dot(v1,v2)/length(v1)/length(v2));\n}\n\n// distance to 2 torus segments in a triangle\n// each torus segment spans from the middle of one side to the middle of another side\nfloat distTruchet(vec3 pos, vec3 p1, vec3 p2, vec3 p3)\n{\n    float d = 10000.0;\n    float rnd=getRand01Sph(p1+p2+p3);\n    // random rotation of torus-start-edges\n    if      (rnd>.75) { vec3 d=p1; p1=p2; p2=d; }\n    else if (rnd>.50) { vec3 d=p1; p1=p3; p3=d; }\n    else if (rnd>.25) { vec3 d=p2; p2=p3; p3=d; }\n    \n    float r,r1,r2,fact,ang,fullAng;\n    vec3 n = normalize(cross(p2-p1,p3-p1));\n    // where pos hits triangle\n    vec3 pos2 = ((pos-p1)-dot(pos-p1,n)*n)+p1;\n    \n    // torus segments:\n    // actually i have to fade from one torus into another\n    // because not all triangles are equilateral\n    \n    // segment1\n    r1 = .5*length(p2-p1);\n    r2 = .5*length(p3-p1);\n    ang = calcAngle(pos2-p1,p2-p1);\n    fullAng = calcAngle(p3-p1,p2-p1);\n    fact = ang/fullAng;\n    r=mix(r1,r2,fact);\n\td=min(d,distTorus(pos-p1*sqrt(1.0-r*r),r,.1*r,p1));\n  \t// segment2\n    r1 = .5*length(p3-p2);\n    r2 = .5*length(p1-p2);\n    ang = calcAngle(pos2-p2,p3-p2);\n    fullAng = calcAngle(p1-p2,p3-p2);\n    fact = ang/fullAng;\n    r=mix(r1,r2,fact);\n    d=min(d,distTorus(pos-p2*sqrt(1.0-r*r),r,.1*r,p2));\n\n    return d;\n}\n\n// final distance funtion\nfloat df(vec3 pos)\n{\n    pos+=.00015*getRand(pos*1.3).xyz*4.;\n    pos+=.00006*getRand(pos*3.).xyz*4.;\n    pos+=.00040*getRand(pos*.5).xyz*4.;\n    vec3 p1,p2,p3;\n    float d = 10000.;\n    \n    // sphere in the middle\n\td=min(d,distSphere(pos,.88));\n    \n    // start with an icosahedron subdivided once\n    getIcosaTri(pos, p1, p2, p3);\n    getTriSubDiv(pos, p1, p2, p3);\n    // always sort by X, then Y, then Z - to get a unique order of the edges\n    sortXYZ(p1,p2,p3);\n    d=min(d,distTruchet(pos, p1,p2,p3));\n    \n    float sc = 1.;\n    // subdivide again for another detail\n    getTriSubDiv(pos,p1,p2,p3);\n    sortXYZ(p1,p2,p3);\n\tsc = 1./.978;\n    d=min(d,distTruchet(pos*sc, p1,p2,p3)/sc);\n    \n    // subdivide again for another detail\n\tgetTriSubDiv(pos,p1,p2,p3);\n    sortXYZ(p1,p2,p3);\n    sc = 1./.965;\n    d=min(d,distTruchet(pos*sc, p1,p2,p3)/sc);\n    d *= 0.8;\n    return d;\n}\n\n#define INTERACT\n\nfloat time;\nvec3 wl;\nvec3 ro;\nvec3 rd;\nfloat t;\nvec3 p;\nvec3 throughput = vec3(1.0);\nvec3 Lo = vec3(0.0);\n\n// CIE Standard Illuminant D65  \nvec3 cied65() {\n  return vec3(\n    cied65i(int(wl.x)),\n    cied65i(int(wl.y)),\n    cied65i(int(wl.z))); }\n\n// SRGB Color Matching Functions\nvec3 srgbcmf() {\n  return\n    srgbcmfi(int(wl.x)) * Lo.x +\n    srgbcmfi(int(wl.y)) * Lo.y +\n    srgbcmfi(int(wl.z)) * Lo.z; }\n\nvec3 quadsorb(\n  float c,\n  float w) {\n  return 1.0 + pow(abs((wl - c) / w), vec3(2.0)); }\n\nconst float eps = 1e-5;\n\nconst float sun_cocosine = 0.00000951927;\nconst float sun_cosine = 1.0 - sun_cocosine;\nconst float sun_density = 1.0 / sun_cocosine;\nconst float sun_probability_density = sun_density / (2.0 * pi);\nconst vec3 sun_dir = normalize(vec3(-1.0, 10.0, 5.0));\nvec3 sun_emission;\n\nfloat pick;\nfloat pickone(vec3 v) {\n  if (pick < 1.0 / 3.0) {\n    return v.x; }\n  else if (pick < 2.0 / 3.0) {\n    return v.y; }\n  else {\n    return v.z; } }\n    \nvec3 nf() {\n  vec2 e = vec2(eps, 0.0);\n  float d = df(p);\n  vec3 n;\n  n.x = d - df(p - e.xyy);\n  n.y = d - df(p - e.yxy);\n  n.z = d - df(p - e.yyx);\n  return normalize(n); }\n\nvoid scene() {\n  for (int i = min(0, iFrame); i < 64; ++i) {\n    float d;\n    for (int j = min(0, iFrame); j < 4; ++j) {\n      p = ro + t * rd;\n      vec3 H = vec3(0.0, 0.0, 0.0) - p;\n      float D = dot(H, H) - pow(1.2, 2.0);\n      if (D < 0.0 || dot(H, rd) > sqrt(D)) {\n        d = df(p);\n        if (d < eps) {\n          break; }\n        t += d; }\n      else {\n        t = 1.0 / zero;\n        break; } }\n    if (t == 1.0 / zero) {\n      vec3 room = srgb_igamma(texture(iChannel3, rd).bgr);\n      vec3 contrib = room / (1.2 - room);\n      if (dot(rd, sun_dir) > sun_cosine) {\n        contrib += sun_emission; }\n      Lo += throughput * contrib;\n      break; }\n    if (d > eps) {\n      continue; }\n    p = ro + t * rd;\n    vec3 n = nf();\n    if (dot(rd, n) > 0.0) {\n      t += eps;\n      continue; }\n    ro = p; t = 0.0;\n    vec3 nor = texBump(iChannel1, p, n, 0.002);\n    vec3 albedo = (length(p) < 0.9 ? 0.1 : 0.8) / quadsorb(500.0, 250.0);\n    vec3 ior = (length(p) < 0.9 ? vec3(1.8) : 1.55 / quadsorb(295.0, 34.0));\n    vec3 specularity = vec3(\n      fresnel_reflectance(rd, nor, ior.x),\n      fresnel_reflectance(rd, nor, ior.y),\n      fresnel_reflectance(rd, nor, ior.z));\n    vec3 power = vec3(200.0);\n    vec3 spec_dir = reflect(rd, nor);\n    pick = unitrand();\n    float spec_dist_albedo = sqrt(pickone(albedo));\n    float spec_dist_specularity = sqrt(pickone(specularity));\n    float spec_dist_power = pickone(power) / 2.0;\n    vec3 sun_rd = axial(sun_dir, 1.0 - sun_cocosine * unitrand());\n    vec3 spec_rd = power_icdf(spec_dir, spec_dist_power);\n    vec3 hemi_rd = power_icdf(n, 1.0);\n    float sun_prob = dot(sun_rd, n) > 0.0 ? 1.0 - spec_dist_specularity : 0.0;\n    float spec_prob = dot(spec_rd, n) > 0.0 ? spec_dist_specularity : 0.0;\n    float hemi_prob = spec_dist_albedo * (1.0 - spec_dist_specularity);\n    float prob_sum = sun_prob + spec_prob + hemi_prob;\n    if (prob_sum == 0.0) {\n      break; }\n    sun_prob /= prob_sum;\n    spec_prob /= prob_sum;\n    hemi_prob /= prob_sum;\n    float roll = unitrand();\n    vec3 rd1 =\n      roll < sun_prob ? sun_rd :\n      roll < sun_prob + spec_prob ? spec_rd :\n      hemi_rd;\n    float sun_dist = rd1 == sun_rd || dot(rd1, sun_dir) >= sun_cosine ? sun_probability_density : 0.0;\n    float spec_dist = power_pdf(spec_dir, spec_dist_power, rd1);\n    float hemi_dist = power_pdf(n, 1.0, rd1);\n    float dist = sun_prob * sun_dist + spec_prob * spec_dist + hemi_prob * hemi_dist;\n    if (dist == 0.0) {\n      break; }\n    vec3 coef = 0.5 * blinn_phong_coef(rd1, rd, nor, albedo, specularity, power);\n    throughput *= coef / dist;\n    rd = rd1; } }\n\nvoid mainImage(out vec4 o, in vec2 xy) {\n  srand(ivec3(xy, iFrame));\n  time = (iTime + unitrand() * iTimeDelta);\n  float wl_min = 360.0;\n  float wl_max = 800.0;\n  float wl_rng = wl_max - wl_min;\n  vec2 wl_pts = wl_min + vec2(1.0, 2.0) * wl_rng / 3.0;\n  wl = mix(\n    vec3(wl_min, wl_pts.x, wl_pts.y),\n    vec3(wl_pts.x, wl_pts.y, wl_max),\n    vec3(unitrand(), unitrand(), unitrand()));\n  sun_emission = 1000.0 * cied65();\n  mat4 view =\n    rotate(dy, 2.9\n#ifdef INTERACT\n      - 3.0 * pi * (iMouse.x / iResolution.x)\n#endif\n      ) *\n    rotate(dx, -0.2\n#ifdef INTERACT\n      + 3.0 * pi * (iMouse.y / iResolution.y)\n#endif\n    ) *\n    translate(vec4(0.0, 0.0, -2.5, 0.0));\n  vec2 lens_uv = sqrt(unitrand()) \n      * dir2(6.28318530718 * boxrand());\n  vec2 lenspoint = 0.005 * lens_uv;\n  ro = vec3(lenspoint, 0.0);\n  rd = normalize(vec3(\n    (xy - 0.5 * iResolution.xy + vec2(boxrand(), boxrand()))\n    / (iResolution.y * 1.0)\n    - (lenspoint / 2.0),\n    1.0));\n  ro = (view * vec4(ro, 1.0)).xyz;\n  rd = (view * vec4(rd, 0.0)).xyz;\n  t = 0.0;\n  scene();\n  o = vec4(srgbcmf(), 1.0);\n  if (iFrame != 0\n#ifdef INTERACT\n    && iMouse.z <= 0.0\n#endif\n    ) {\n    o += texelFetch(iChannel0, ivec2(xy), 0); } }\n","name":"Buffer A","description":"","type":"buffer"}]}