{"ver":"0.1","info":{"id":"NssGDf","date":"1616667657","viewed":392,"name":"Crash test for \"Gold Noise\"","username":"sciroccorics","description":"This shader illustrates the strong weakness of the \"Gold Noise\" generator by\nDominic Cesarino (dcerisano@standard3d.com)\nsee https://www.shadertoy.com/view/ltB3zD\n\nThis random generator creates visible color bandings and Moire patterns","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","generator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Crash test for the so-called \"Gold Noise\"\n//\n// This shader illustrates the strong weakness\n// of the \"Gold Noise\" generator written by\n// Dominic Cesarino (dcerisano@standard3d.com)\n// see https://www.shadertoy.com/view/ltB3zD\n\n// This random generator creates strong visible color\n// bandings and Moire patterns, as soon as you leave\n// the area near (0,0) for the pixel coordinates. This\n// mainly comes from the tangent function which become\n// numerically instable for large values. To emphasize\n// the phenomenon, I simply used some larger values\n// for the seeds (100, 300, 500), instead of the small\n// ones (1, 2, 3) that were used in the original shader\n// to hide this major defect\n\n// Click on the 'Full Screen' icon to show it even better\n\n// --------------------------------------------------------------\n// Original code from https://www.shadertoy.com/view/ltB3zD\n\n// Gold Noise ©2015 dcerisano@standard3d.com\n// - based on the Golden Ratio\n// - uniform normalized distribution\n// - fastest static noise generator function (also runs at low precision)\n\nconst float PHI = 1.61803398874989484820459; // Φ = Golden Ratio \n\nfloat gold_noise(in vec2 xy, in float seed) {\n  return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\n\n// ---------------------------------------------------------------\n// My simple crash test to illustrate bandings and Moire patterns:\n// simply choose some large seeds to create numerical instability\n// for the tangent function (of course, things are even worse on\n// low-precision devices, such as mobile SoCs)\n\nvoid mainImage(out vec4 color, in vec2 pos) {\n  color = vec4(gold_noise(pos, fract(iTime)+100.0),\n               gold_noise(pos, fract(iTime)+300.0),\n               gold_noise(pos, fract(iTime)+500.0),\n               1.0);\n}\n","name":"Image","description":"","type":"image"}]}