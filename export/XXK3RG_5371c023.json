{"ver":"0.1","info":{"id":"XXK3RG","date":"1717807035","viewed":41,"name":"Equirectangular Grid","username":"gllama","description":"Learning slowly. I achieved my goal of a grid projected into equirectangular space :)\n\nI believe [code]sphericalUV[/code] is a good base for building equirectangular shaders that can be mapped as textures onto round/spherical objects.\n\nCC0-1.0 licensed ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","cc0","equirectangular"],"hasliked":0,"parentid":"X3yGzG","parentname":"Concentric Rings Sphere Texture"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// üåéüåç Equirectangular Grid\n// License CC0-1.0\n\n#define PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    // How often to draw lines \n    float interval =.05;\n    // Line thiccness\n    float thicc = .005;\n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; \n\n    // Convert UV into 3D point over 0-2PI Alpha and 0-PI Beta \n    float alpha = 2.*PI*uv.x;\n    float beta = PI*uv.y;\n    vec3 equi = vec3(\n        sin(beta)*cos(alpha),\n        cos(beta),\n        sin(beta)*sin(alpha)\n    );\n    \n    // Use 3D point to get new Equirectangular-space UV\n    vec2 sphericalUV = vec2(\n        atan(equi.y, equi.x) / (2.0 * PI) + .5, \n        (equi.z+1.)*.5\n    );\n    \n    // Used to check if sphericalUV range is [0,1] -- it is.\n    //sphericalUV=clamp(sphericalUV,0.,1.);\n    \n    \n    // Start with black\n    vec3 col = vec3(0,0,0);\n    //Change color if we're on a grid-line\n    float offset = (thicc/2.0) - ((1.-interval)/2.);\n    if(mod(sphericalUV.x+offset,interval)<thicc || mod(sphericalUV.y+offset,interval)<thicc){\n        col = vec3(1.,0.,1.);\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    // Output to screen\n    //fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}