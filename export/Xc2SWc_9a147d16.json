{"ver":"0.1","info":{"id":"Xc2SWc","date":"1706905648","viewed":268,"name":"2D Wavy Hills","username":"incre_ment","description":"Lots of neighbor checking required here...  Thinking about if there is a way to cut that down in this case.\n\nKnowledge source:\nhttp://iquilezles.org/articles/sdfrepetition/\nOpen Simplex Noise implementation by nikat:\nhttps://www.shadertoy.com/view/XsX3zB","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["noise","domainrepetition","loop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made using knowledge from IQ's updated domain repetition webpage:\n// http://iquilezles.org/articles/sdfrepetition/\n// Open Simplex Noise implementation by nikat\n\nfloat PI = 3.14159256;\nfloat TAU = 2.0*3.14159256;\n\nfloat circSDF(in vec2 p, in float r){\n  return length(p) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n  vec3 col = vec3(0.); \n  \n  uv += vec2(1.*cos(iTime/4.0), 1.*sin(iTime/4.0));\n  \n  uv *= 32.;\n  vec2 cellID = floor(uv);\n  \n  float nFac = .06;           \n  float d = 1e20;\n  int nCheck = 4;\n  for(int j=-nCheck; j<nCheck; j++)\n  for(int i=-nCheck; i<nCheck; i++){\n    vec2 check = cellID + vec2(i,j); \n    float rad = abs(simplex3d(vec3(nFac*check.x, nFac*check.y, 4.0)));\n    float mFac = 3.*rad;\n    vec2 motion = vec2(mFac*cos(iTime), mFac*sin(iTime));\n    vec2 r = (uv + motion) - check;\n    d = min(d,  circSDF(r, .7*abs(simplex3d(vec3(nFac*check.x, nFac*check.y, 4.0)))));\n  }\n \n  col += smoothstep(0.1,-.2, d);\n\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// 3d simplex noise from https://www.shadertoy.com/view/XsX3zB\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n","name":"Common","description":"","type":"common"}]}