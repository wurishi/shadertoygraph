{"ver":"0.1","info":{"id":"wsfBRr","date":"1587592162","viewed":186,"name":"Participating Medium HDR  Demo","username":"sanjanarao","description":"CIS461 University of Pennsylvania","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cis461"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Referenced: https://www.shadertoy.com/view/4sjfzw\n//            https://www.shadertoy.com/view/4sfGzS\n\nconst vec3 lightPos = vec3(0., 7.45, -1.5);\nconst int RAY_STEPS = 256;\nconst vec3 eyePos = vec3(0.0, 2.5, -20.0);\nconst vec3 refPos = vec3(0., 2.5, 0.);\nconst float PI = 3.14159265359;\nconst float FOVY = 19.5 * PI / 180.;\nfloat invPi = 0.31830988618;\nconst int NUM_RAYS = 50;\n\n// Toggle to Convert to HDR\nconst bool CONVERT_HDR = true;\n\n// Toggle to Weight Luminance\nconst bool LUMINANCE_ONLY = true;\n\n// Toggle Gamma Correction\nconst bool GAMMA_CORRECT = true;\n\n// Modify Gamma < 1 will be lifted, > 1 will be dulled \nconst float GAMMA =  0.8;\n\n// Modify Intensity of Luminance Correction \nconst float LUMINANCE = 0.5;\n\n//Toggle Noise Range: 1 - 3\nconst float NOISE_INTENSITY = 2.;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\n/***************** BASIC SCENE SET UP *******************/\n\n#define FLOOR_SDF plane(pos, vec4(0, 1, 0, 2.5));\n#define LEFT_WALL_SDF plane(pos, vec4(1, 0, 0, 5));\n#define RIGHT_WALL_SDF plane(pos, vec4(-1, 0, 0, 5));\n#define BACK_WALL_SDF plane(pos, vec4(0, 0, -1, 5));\n#define CEILING_SDF plane(pos, vec4(0, -1, 0, 7.5));\n#define GROUND_SPHERE_SDF sphere(pos + vec3(0., 2.5, 0.), 4., vec3(0.0, 0.0, 0.0));\n#define RIGHT_SPHERE_SDF sphere(pos + vec3(0., 2.5, 0.), 4., vec3(5.0, 7.0, -2.0));\n#define LEFT_SPHERE_SDF sphere(pos + vec3(0, 2.5, 0.), 4., vec3(-5.0, 7.0, -2.0));\n    \nconst int FLOOR_ID = 0;\nconst int LEFT_WALL_ID = 1;\nconst int RIGHT_WALL_ID = 2;\nconst int BACK_WALL_ID = 3;\nconst int CEILING_ID = 4;\nconst int GROUND_SPHERE_ID = 5;\nconst int RIGHT_SPHERE_ID = 6;\nconst int LEFT_SPHERE_ID = 7;\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\nfloat sceneMap3D(vec3 pos) {\n    float flr = FLOOR_SDF;\n    float left_wall = LEFT_WALL_SDF;\n    float right_wall = RIGHT_WALL_SDF;\n    float back_wall = BACK_WALL_SDF;\n    float ceiling = CEILING_SDF;\n    float ground_sphere = GROUND_SPHERE_SDF;\n    float right_sphere = RIGHT_SPHERE_SDF;\n    float left_sphere = LEFT_SPHERE_SDF;\n    return min(back_wall, min(left_wall, min(right_wall, \n       min(ceiling, min(flr, min(ground_sphere, min(right_sphere, left_sphere)))))));\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = FLOOR_SDF;\n    obj = FLOOR_ID;\n\n    float t2 = LEFT_WALL_SDF\n    if (t2 < t) {\n        t = t2;\n        obj = LEFT_WALL_ID;\n    } \n    t2 = RIGHT_WALL_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = RIGHT_WALL_ID;\n    }\n    t2 = BACK_WALL_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = BACK_WALL_ID;\n    }\n    t2 = CEILING_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = CEILING_ID;\n     }\n    t2 = GROUND_SPHERE_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = GROUND_SPHERE_ID;\n    }\n    t2 = RIGHT_SPHERE_SDF\n    if (t2 < t) {\n        t = t2;\n        obj = RIGHT_SPHERE_ID;\n    }\n    t2 = LEFT_SPHERE_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = LEFT_SPHERE_ID;\n    }\n}\n\n\n/***************** RAY MARCHING LOGIC *******************/\n\nvec3 rayCast(vec3 eye, vec3 ref, vec2 uv) {\n\n    float len = tan(FOVY) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    return normalize(p - eye);\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)  { return; }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n/***************** EFFECTS *******************/\n\nfloat Noise3D( in vec3 v )\n{\n    vec3 i = floor(v);\n    vec3 f = fract(v);\n    f = f * f*(3.0-2.0*f);\n    vec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;\n    vec2 rg = textureLod(iChannel0, (uv+0.5)/256.0, 0.0).yx;\n    \n    return -1.+ NOISE_INTENSITY * mix( rg.x, rg.y, f.z );\n    \n}\n\nfloat fbm( in vec3 pos )\n{\n    float amplitude = 0.25;\n    float sum = 0.0;\n    for(int i = 0; i < 3; i++)\n    {\n        sum += Noise3D(pos) * amplitude;\n        amplitude *= 0.2;\n        pos *= 4.0;\n    }\n    sum -= pos.y / 1200.0;\n    return clamp(sum, 0.0, 1.0);\n}\n\nfloat phase( in float g, in float theta )\n{\n    return 0.25 * invPi * (1.0 - g * g) / (1.0 + g * g - 2.0 * g * pow(theta, 1.5));\n}\n\n\nvec3 fog(in vec3 dir, in vec3 eye, in vec3 surfaceColor, in float t) {\n      float scatteringCoeff = 0.5;\n    float t_val = 0.1;\n    float dt;\n    vec3 pos;\n    vec3 color = vec3(0.);\n    float transmittance = 1.0;\n    \n    /****** CALCULATE FOG ********/\n    for (int i = 0; i < NUM_RAYS; i++) {\n        pos = eye + t_val * dir + 0.4 * vec3(0.0, 0.0, -iTime);\n\n        float density = fbm(pos);\n        transmittance *= exp(-scatteringCoeff * density * dt);\n\n        //valuate incident lighting here\n        vec3 incidentLight = vec3(0.0);\n        vec3 lightDir = normalize(lightPos - pos);\n\n        //compute samples toward light source\n        float stepSize = 0.1;\n        vec3 light = vec3(0.6, 0.55, 0.4) * 50.0;\n        float densityStep = fbm(pos + stepSize * lightDir) * stepSize;\n        incidentLight = light * exp(-scatteringCoeff * densityStep * stepSize);\n        \n        //calculate light color \n        color += scatteringCoeff * density * \n            phase(scatteringCoeff, abs(dot(dir, lightDir))) \n            * incidentLight * transmittance * dt;\n        \n        if (transmittance <= 0.01)  { break; }\n        \n        dt = max(0.04, 0.02 * t);\n        t_val += dt;\n    } \n\n    return clamp(vec3(0.), vec3(1.), transmittance * surfaceColor + color);  \n}\n\nvec3 gammaCorrected(vec3 c, float gamma) {\n    float R = pow(c.r, gamma);\n    float G = pow(c.g, gamma);\n    float B = pow(c.b, gamma);\n    return vec3(R, G, B);\n}\n\n/***************** MATERIAL *******************/\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 nor, vec3 lightDir, vec3 view) {\n    float lambert = max(0., dot(lightDir, nor));\n\n    if (hitObj == 0) { return vec3(0.15, 0., 0.23) * lambert; }\n    if (hitObj == 1) { return vec3(0.15, 0.15, 1.0) * lambert; }\n    if (hitObj == 2) { return vec3(0.15, 0.15, 1.0) * lambert; }\n    if (hitObj == 3) { return vec3(0.15, 0.15, 1.) * lambert; }\n    if (hitObj == 4) { return vec3(0.15, 0.15, 1.) * lambert; }\n    if (hitObj == 5) { return vec3(0.6, 1., 0.3) * lambert; }\n    if (hitObj == 6) { return vec3(0.45, 0.45, 0.78) * lambert; }\n    \n    else { return vec3(0., 0., 1) * lambert; }\n}\n\n/***************** BASIC FUNCTIONALITY *******************/\n\nIntersection sdf3D(in vec3 dir, in vec3 eye)\n{\n    //calculates objects \n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = normalize(computeNormal(isect));\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = \n        computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    //compute fog\n    surfaceColor = fog(dir, eye, surfaceColor, t);\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //Convert to range [-1,1]\n    uv = uv * 2.0 - vec2(1.);\n    \n    vec3 eye = eyePos;\n    vec3 ref = refPos;\n\n    vec3 dir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(dir, eye);\n    \n    vec3 c = isect.color;\n    \n    //Convert to HDR via Reinhart Operator\n    if (CONVERT_HDR && !LUMINANCE_ONLY) { c = c / (1. + c); }\n    \n    if (CONVERT_HDR && LUMINANCE_ONLY) {\n       c.r = c.r * (1. - LUMINANCE) + LUMINANCE * c.r / (1. + c.r);\n       c.g = c.g * (1. - LUMINANCE) + LUMINANCE * c.g / (1. + c.g);\n       c.b = c.b * (1. - 0.1 * LUMINANCE) + 0.1 * LUMINANCE * c.b / (1. + c.b);\n    }\n    \n    //Gamma Correct\n    if (GAMMA_CORRECT) { c = gammaCorrected(c, GAMMA); }\n    \n    // Output to screen\n    fragColor = vec4(c, 1.);\n}\n","name":"Image","description":"","type":"image"}]}