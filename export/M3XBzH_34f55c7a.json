{"ver":"0.1","info":{"id":"M3XBzH","date":"1728006501","viewed":15,"name":"Small Colorful rectangles","username":"Fhomas180","description":"This code is for my GPR class what its doing is the small rectangles are going up and down because of the sin and cos.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FREQ = 12.0;\nconst float SPEED = 3.0;\nconst float AMP = 0.5;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\nuv.x *= 4.5;//this is scaling the x axis \nuv.x = floor(uv.x); //Quantizing x into discrete steps\nuv.y += sin(uv.x *FREQ + iTime *SPEED) * cos(2.0)*AMP; //applying a wave effect to the y axis. \nuv*= 2.1;//this is scaling the UV coordinates\n\nuv = mod(uv,1.0);//this is wrapping the coordinates to stay within[0,1]\nuv.xy = smoothstep(0.1,0.2,uv); //its smoothly clamping values within a certain range\n\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(uv.xy,1.0,5.0);\n    fragColor = vec4(uv,3.2,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}