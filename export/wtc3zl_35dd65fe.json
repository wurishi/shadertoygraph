{"ver":"0.1","info":{"id":"wtc3zl","date":"1577207691","viewed":127,"name":"Green Cell (Practice #2)","username":"Coda_","description":"Green Cell (Practice #2)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","green","cell"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time  iTime\n\nfloat map (vec3 p)\n{\n  vec3 q = fract(p) * 2.0 - 1.0;\n  return length(q) - 0.4;\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n  float t = 0.0;\n  for(int i =0;i < 100; i++)\n  {\n    vec3 p = o + r * t;\n    float d = map(p);\n    t += d* 0.05;\n  }\n  return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n  \tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  \tuv -= 0.5;\n  \tuv /= vec2(iResolution.y / iResolution.x, 1.0);\n  \tuv.xy += sin(uv.xy*mix(40.0,80.0,sin(time*0.25)*0.5+0.5)+time);\n  \tvec3 r = normalize(vec3(uv,1.0));\n  \tfloat trot = time;\n \tr.xy *= mat2(cos(trot),-sin(trot),sin(trot),cos(trot));\n  \tvec3 o = vec3(0.0,0.0,time*0.05);\n  \tfloat t = trace(o,r);\n  \n  \n  \tfloat fog = 1.0/(1.0*t*t*0.3);\n  \tvec3 col = vec3(0.0,0.08,0);\n  \n  \n\n   fragColor = vec4(vec3(fog)*col,1.0)*1.25;\n}\n","name":"Image","description":"","type":"image"}]}