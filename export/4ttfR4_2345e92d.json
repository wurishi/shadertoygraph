{"ver":"0.1","info":{"id":"4ttfR4","date":"1538887025","viewed":204,"name":"Nature Project- Raining","username":"tiff","description":"imitates rain falling","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raining"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Rotate\nmat2 rot(float a){\n    return mat2(cos(a), -sin(a),\n                sin(a), cos(a));\n}\n\n// SDF Sphere\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n}\n\nfloat random(vec2 v) {\n  return fract(tan(dot(v*.1, vec2(200.654, .746)))*.4);\n}\n\n// Map distance to all objects in the scene\nfloat map(vec3 p)\n{\n    float radius = 0.05;\n    \n    // Transform coordinate space so spheres repeat\n    vec3 q = fract(p)*0.45 -0.37;\n\n    // Signed distance of sphere\n    return sphere(q, radius);\n}\n\n\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0;\n    for (int i = 0; i < 75; ++i) {\n        vec3 p = origin +r *t ;\n        float d = map(p);\n        t += d;\n        }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv*3.0- 1.5; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y;   \n    \t\n   \tfloat FOV = 1.0;\n   \tvec3 ray = normalize(vec3(uv, FOV));\n    \n    // Rotate Y towards Z\n    //ray.yz *= -rot(iTime*0.1);    \n    \n    vec3 origin = vec3(random(uv), tan(random(uv))*8.+iTime *2., 0.0);\n    float t = trace(origin, ray);\n       \n    float linearFog = 2.0 / (1.0 - t*0.2);\n    float expFog = 3.0 / (t*t*0.1);\n    \n    vec3 color = vec3(0.1, 0.1, 1.0);\n    \n    vec3 fc = vec3(expFog)*color;\n    //vec3 fc = vec3(expFog) / cos(color)- color*0.7\n\n    // Output pixels to screen\n    fragColor = vec4(fc,2.0);\n\n    \n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}