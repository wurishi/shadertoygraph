{"ver":"0.1","info":{"id":"MsBcR3","date":"1493069886","viewed":316,"name":"Polar coordinates beginner","username":"Etilawin","description":"Here is the thing, I converted to polar coordinates but I don't know how to avoid that distortion when r.y = 0 on the left hand side ... (rotation is a plus)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["beginner","help","comments"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n\n/* void plot(float f, float y, float w, vec3 color, inout vec3 pixel)\n{\n    pixel = mix(pixel, color, smoothstep(w + 0.01, w - 0.01, abs(f - y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = (fragCoord*2. - iResolution.xy) / iResolution.y;\n    \n    float a = atan(r.y, r.x);\n    vec2 pr = vec2(length(r), a);\n    \n    // Scale if needed\n    // pr *= 2.;\n    \n    vec3 pixel = vec3(0.);\n    \n    vec3 col1 = vec3(.5, .9, .7), // Green\n         col2 = vec3(.9, .2, .5); // Red\n    \n    float a2 = iTime;\n    mat2 rotMat = mat2(cos(a2), -sin(a2), sin(a2), cos(a2));\n    \n    // Rotate\n    pr *= rotMat;\n    \n    float width = 0.01;\n    \n    // Polar\n    pixel = mix(pixel, col2, smoothstep(width, width/2., mod(pr.x, .1)));\n    pixel = mix(pixel, col2, smoothstep(width, width/2., mod(pr.y, .1)));\n    \n    // Cartesian\n    // pixel = mix(pixel, col2, step(mod(r.x, .1), 0.01));\n    // pixel = mix(pixel, col2, step(mod(r.y, .1), 0.01));\n    \n    // plot(2. * PI, pr.y, 0.03, col1, pixel);\n    \n\tfragColor = vec4(pixel ,1.0);\n} */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 r = (fragCoord*2. - iResolution.xy) / iResolution.y;\n    r*=9.;//zoom becomes more like \"bendyness\" due to polar transform.   \n    vec2 pr = vec2(length(r),atan(r.y, r.x));//carthesian to polar:\n    vec3 col1 = vec3(.2, .2, .9),\n         col2 = vec3(.6, .3, .5);\n    \n    vec3 col3 = vec3(.2, .8, .3),\n         col4 = vec3(.8, .8, .8);\n    \n    float t = iTime;\n    \n    vec2 pr2 = pr;\n    \n    float swirls = 5.;\n    const float pi = atan(-1.);\n    \n    pr.x -= pr.y * swirls / pi + 10.*t;\n    pr2.x -= pr.y * swirls / pi - t;\n    \n    vec3 color1 = mix(col1, col2, fract(pr.x/8.));\n    vec3 color2 = mix(col3, col4, fract(pr2.x/8.));\n    \n    vec3 color = mix(color1, color2, .5);\n    \n    \n    \n\tfragColor = vec4(color ,1.0);\n}\n\n\n//return polar (distance,angle) coordinates of carthesian (x,y) input.\nvec2 c2p(vec2 p){return vec2(length(p),atan(p.y,p.x));}\n//return carthesian (x,y) coordinates of polar (distance,angle) input.\nvec2 p2c(vec2 p){return p.x*vec2(cos(p.y),sin(p.y));}","name":"Image","description":"","type":"image"}]}