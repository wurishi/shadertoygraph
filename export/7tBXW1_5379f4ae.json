{"ver":"0.1","info":{"id":"7tBXW1","date":"1627540565","viewed":253,"name":"gif 01100101","username":"Carandiru","description":"saw this awesome pattern on the fork and had to modify it to the vision of how awesomely effective it really is.\noriginal at: https://www.shadertoy.com/view/7sfXD7\nmakes for an awesome gif!","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["feedback"],"hasliked":0,"parentid":"7sfXD7","parentname":"Odd little system"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/wt2yRc\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\nvec3 blackbody(float t){\n    // http://en.wikipedia.org/wiki/Planckian_locus\n\n    vec4 vx = vec4( -0.2661239e9, -0.2343580e6, 0.8776956e3, 0.179910   );\n    vec4 vy = vec4( -1.1063814,   -1.34811020,  2.18555832, -0.20219683 );\n    //vec4 vy = vec4(-0.9549476,-1.37418593,2.09137015,-0.16748867); //>2222K\n    float it = 1. / t;\n    float it2= it * it;\n    float x = dot( vx, vec4( it*it2, it2, it, 1. ) );\n    float x2 = x * x;\n    float y = dot( vy, vec4( x*x2, x2, x, 1. ) );\n    \n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    mat3 xyzToSrgb = mat3(\n         3.2404542,-1.5371385,-0.4985314,\n        -0.9692660, 1.8760108, 0.0415560,\n         0.0556434,-0.2040259, 1.0572252\n    );\n\n    vec3 srgb = vec3( x/y, 1., (1.-x-y)/y ) * xyzToSrgb;\n\n    return max( srgb, 0. );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float bloom = texture(iChannel0, uv).r;\n    float tex = texture(iChannel1, uv).r;\n    \n    float mask = step(0.00001, tex);\n    float grade = smoothstep(0.00001f, 1.0f, tex);\n    \n    grade *= 0.5f;\n    grade = mix(grade, bloom, 0.5f);\n    grade += bloom;\n    grade *= 3000.0f;\n    \n    vec3 color = vec3(0);\n    \n    color = blackbody(grade + 18667.0f) * bloom;\n    \n    color = sqrt(color);\n    \n    // Output to screen\n    fragColor = vec4(color, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 tc = fragCoord.xy / iResolution.xy;\n    \n    vec4 tex = texture(iChannel1, tc);\n    //vec4 past = texture(iChannel0, tc + vec2(0.01));\n    \n    if(iFrame < 1 || iFrame % 1500 == 0 || iMouse.z > 0.0){\n    // Seed the feedback\n         if(tc.x >0.475 && tc.x < 0.525 && tc.y > 0.475 && tc.y <0.525){\n            fragColor = vec4(1.0);\n        } else {\n            fragColor = vec4(0.0,0.0,0.0,1.0);\n        }\n    } else {\n        fragColor = tex;\n    }\n    \n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n    float fl = floor(p);\n    float fc = fract(p);\n    return mix(rand(fl), rand(fl + 1.0), fc);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texel = 1.0 / iResolution.xy;\n    \n    vec4 t = texture(iChannel0, uv);\n    \n    vec4 n = texture(iChannel0, uv + vec2(0.0, texel.y));\n    vec4 e = texture(iChannel0, uv + vec2(texel.x, 0.0));\n    vec4 w = texture(iChannel0, uv + vec2(-texel.x, 0.0));\n    vec4 s = texture(iChannel0, uv + vec2(0.0, -texel.y));\n    \n    if(iFrame % 2 == 0){ \n        fragColor = abs(e - t) + abs(w - t) ;\n    } else {\n        fragColor = abs(n - t) + abs(s - t) ;\n    }\n    \n    \n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n     \n    // Output to screen\n    vec3 color = blur(iChannel0, uv, 1.0f/iResolution.xy, vec2(1, 0));\n    color = mix( color, blur(iChannel0, uv, 1.0f/iResolution.xy, vec2(3, 0)), 0.5f);\n    //color = mix( color, blur(iChannel0, uv, 1.0f/iResolution.xy, vec2(5, 0)), 0.5f);\n    //color = mix( color, blur(iChannel0, uv, 1.0f/iResolution.xy, vec2(7, 0)), 0.5f);\n    \n    fragColor = vec4(color, 1.0f);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// single pass, single direction fast gaussian 13 tap blur - https://github.com/Jam3/glsl-fast-gaussian-blur\nvec3 blur(in sampler2D image, in vec2 uv, in vec2 inv_resolution, in vec2 direction) {\n  \n  vec3 color = textureLod(image, uv, 0.0).rgb * 0.1964825501511404;\n  direction = direction * inv_resolution; // bake distance into direction for offset\n  {\n\t  vec2 off1 = 1.411764705882353 * direction;\n\t  color += textureLod(image, uv + off1, 0.0).rgb * 0.2969069646728344;\n\t  color += textureLod(image, uv - off1, 0.0).rgb * 0.2969069646728344;\n  }\n  {\n\t  vec2 off2 = 3.2941176470588234 * direction;\n\t  color += textureLod(image, uv + off2, 0.0).rgb * 0.09447039785044732;\n\t  color += textureLod(image, uv - off2, 0.0).rgb * 0.09447039785044732;\n  }\n  {\n\t  vec2 off3 = 5.176470588235294 * direction;\n\t  color += textureLod(image, uv + off3, 0.0).rgb * 0.010381362401148057;\n\t  color += textureLod(image, uv - off3, 0.0).rgb * 0.010381362401148057;\n  }\n  return(color);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Output to screen\n    vec3 color = blur(iChannel0, uv, 1.0f/iResolution.xy, vec2(0, 1));\n    color = mix( color, blur(iChannel0, uv, 1.0f/iResolution.xy, vec2(0, 3)), 0.5f);\n    //color = mix( color, blur(iChannel0, uv, 1.0f/iResolution.xy, vec2(5, 0)), 0.5f);\n    //color = mix( color, blur(iChannel0, uv, 1.0f/iResolution.xy, vec2(7, 0)), 0.5f);\n    \n    fragColor = vec4(color, 1.0f);\n}","name":"Buffer D","description":"","type":"buffer"}]}