{"ver":"0.1","info":{"id":"XtVyDz","date":"1535818496","viewed":1001,"name":"Game Explosion","username":"Redline","description":"An explosion created using simple methods and also quite customizable","likes":19,"published":3,"flags":0,"usePreview":0,"tags":["explosion","fire","animation","smoke"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define loop\nconst int layers = 128;\nconst float blur = .1;\nconst float speed = 4.;\nconst float peaks = 8.;\nconst float peakStrength = .1;\nconst float ringSpeed = 1.5;\nconst float smoke = .4;\nconst float smokeTime = 40.;\n\nfloat hash(float seed){\n\treturn fract(sin(seed * 3602.64325) * 051.63891);\n}\n\nfloat circle(float radius, vec2 pos){\n\treturn radius - pos.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    #ifdef loop\n    time = mod(time, 5.);\n    #endif\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x /= iResolution.y / iResolution.x;\n    vec2 puv = vec2(length(uv),atan(uv.x,uv.y)); //polar coordinates\n\n    vec3 col = vec3(0);\n    for(int i = 0; i < layers;i++){\n    \tfloat prog = float(i) / float(layers);\n        float radius = prog * ((1. - 1. / pow(time * speed,1./3.)) * 2.); //decrease radius using cubed\n        radius += sin(puv.y * peaks + hash(prog) * 513.) * peakStrength; //modulate radius so it isnt enitly symetrical\n        vec3 color = vec3(\n            1. / radius,\n            .25 ,\n            .1 * (2. - radius)\n        )/ time / abs(log(time * ringSpeed) - puv.x); // base explosion color, decrease with time and with distance from center\n        color += vec3((1. - time / smokeTime) * puv.x * smoke);  //add smoke color, falloff can be controlled with smoketime variable\n        col += color * smoothstep(0.,1.,circle(radius,puv) / blur);\n    }\n\n    fragColor = vec4(col / float(layers),1.0);\n}","name":"Image","description":"","type":"image"}]}