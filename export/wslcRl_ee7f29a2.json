{"ver":"0.1","info":{"id":"wslcRl","date":"1585389555","viewed":96,"name":"TicyTacilyToe","username":"joha2nes","description":"Exercise from The Book of Shaders","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","tiled","animation","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n/* Color palette */\n#define BLACK           vec3(0.0, 0.0, 0.0)\n#define WHITE           vec3(1.0, 1.0, 1.0)\n#define RED             vec3(1.0, 0.0, 0.0)\n#define GREEN           vec3(0.0, 1.0, 0.0)\n#define BLUE            vec3(0.0, 0.0, 1.0)\n#define YELLOW          vec3(1.0, 1.0, 0.0)\n#define CYAN            vec3(0.0, 1.0, 1.0)\n#define MAGENTA         vec3(1.0, 0.0, 1.0)\n#define ORANGE          vec3(1.0, 0.5, 0.0)\n#define PURPLE          vec3(1.0, 0.0, 0.5)\n#define LIME            vec3(0.5, 1.0, 0.0)\n#define ACQUA           vec3(0.0, 1.0, 0.5)\n#define VIOLET          vec3(0.5, 0.0, 1.0)\n#define AZUR            vec3(0.0, 0.5, 1.0)\n\nmat2 rotate(float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\nmat2 translate(float x, float y)\n{\n    return mat2(x, 0.0, y, 0.0);\n}\n\nvec4 tileEmpty(in vec2 uv)\n{\n    return vec4(0.0);\n}\nvec4 tileCircle(in vec2 uv)\n{\n    float d = length(uv - vec2(0.5));\n    return vec4(BLUE, step(d, 0.35) * step(0.25, d));\n}\nvec4 tileCross(in vec2 uv)\n{\n    vec2 uvA = vec2(0.5) + rotate(PI * 0.25) * (vec2(0.5) - uv);\n    vec2 uvB = vec2(0.5) + rotate(PI * 0.75) * (vec2(0.5) - uv);\n    \n    float maskA = step(uvA.x, 0.55) * step(0.45, uvA.x)\n                * step(0.1, uvA.y) * step(uvA.y, 0.9);\n    float maskB = step(uvB.x, 0.55) * step(0.45, uvB.x)\n                * step(0.1, uvB.y) * step(uvB.y, 0.9);\n\n    return vec4(RED, max(maskA, maskB));\n}\n\nfloat grid(in vec2 uv)\n{\n    return 0.0;\n}\n\nvec3 tictactoe(in vec2 uv)\n{\n    #define rows 3.0\n    #define columns 3.0\n    \n    uv.x = uv.x * columns;\n    uv.y = uv.y * rows;\n\n    int iX = int(floor(uv.x));\n    int iY = int(floor(uv.y));\n\n    uv = fract(uv);\n\n    float grid = (abs(uv.x - 0.5) > 0.49 || abs(uv.y - 0.5) > 0.49 ? 1.0 : 0.0);\n\n    float time = 13.0 * fract(iTime / 13.0);\n\n    float anim = 1.0 + (time > 7.0 ? sin(iTime*3.0) * 0.1 : 0.0);\n\n    vec4 symbols =\n        iX == 0 && iY == 0 && time > 5.0 ? tileCross(uv*anim) :\n        iX == 1 && iY == 0 && time > 2.0 ? tileCircle(uv) :\n        iX == 2 && iY == 0 && time > 1.0 ? tileCross(uv) :\n\n        iX == 0 && iY == 1 && time > 0.0 ? tileEmpty(uv) :\n        iX == 1 && iY == 1 && time > 3.0 ? tileCross(uv*anim) :\n        iX == 2 && iY == 1 && time > 0.0 ? tileEmpty(uv) :\n        \n        iX == 0 && iY == 2 && time > 4.0 ? tileCircle(uv) : \n        iX == 1 && iY == 2 && time > 6.0 ? tileCircle(uv) : \n        iX == 2 && iY == 2 && time > 7.0 ? tileCross(uv*anim) : vec4(0.0);\n\n    vec3 color = WHITE;\n    color = mix(color, symbols.xyz, symbols.w);\n    color = mix(color, BLACK, grid);\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.xy;\n    uv *= 1.0;\n\n    vec3 color = tictactoe(uv);\n\n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}