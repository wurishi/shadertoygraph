{"ver":"0.1","info":{"id":"dsfcz7","date":"1686670499","viewed":144,"name":"CRT Oscilloscope music","username":"stduhpf","description":"simple simulation of a old school CRT oscilloscope","likes":8,"published":1,"flags":96,"usePreview":0,"tags":["simulation","music","visualisation","phosphors","exponentialdecay"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"CRT Oscilloscope\" by stduhpf. https://shadertoy.com/view/msXcz7\n// 2023-06-13 15:33:25\n\n// Music: Globetrotter by Chris Allen: https://youtu.be/J2YQD8Go_Hc\n// (link to the .wav file in the description of the original video)\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// Restart after loading to sync the tracks\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n// Soundcloud compression degrades the signals significantly\n// to work around this issue, download the .wav file, then separate the channels\n// then you can use the Shadertoy Custom Texures brower extension \n// to load directly the .wav files into the channels with a drag-and-drop\n// in the corresponding channels in BufferA (iChannel1 = left/x, iChannel2 = right/y) \n\n// Extension (chrome) : https://chrome.google.com/webstore/detail/shadertoy-custom-texures/jgeibpcndpjboeebilehgbpkopkgkjda\n// Extension (Firefox): https://addons.mozilla.org/en-US/firefox/addon/shadertoy-custom-texures/\n\n// Here is the python script I used to separate the channels (requires numpy and soundfile)\n/*\nimport soundfile as sf\nimport numpy as np\n\nfile_path = \"Globetrotter.wav\"  # Replace with the path to your stereo WAV file\nsignal, sample_rate = sf.read(file_path)\n\nsignalT = np.array(signal).transpose()\nsignalT[1]*=0\nsf.write(\"left_channel.wav\", signalT.transpose(), sample_rate)\n\nsignalT = signal.transpose()\nsignalT[0]*=0\nsf.write(\"right_channel.wav\", signalT.transpose(), sample_rate)\n*/\n\n\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n\n    if (iResolution.y<350.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Md3Gz7","filepath":"https://soundcloud.com/st-phane-du-hamel/c-allen-globetrotter-left-channel-v2-oscilloscope-music?si=194fd99f052a4dfca45054565b3b5aab&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/st-phane-du-hamel/c-allen-globetrotter-left-channel-v2-oscilloscope-music?si=194fd99f052a4dfca45054565b3b5aab&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0},{"id":"ls3Gz7","filepath":"https://soundcloud.com/st-phane-du-hamel/c-allen-globetrotter-right-channel-v2-oscilloscope-music?si=588f0e9b4b7940f5b8c7eb45a4b4029c&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/st-phane-du-hamel/c-allen-globetrotter-right-channel-v2-oscilloscope-music?si=588f0e9b4b7940f5b8c7eb45a4b4029c&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define persistence .02  //time for phosphor brightness to decay to 10% peak brightness (in seconds)\n// based on P1 phosphor\n// http://www.labguysworld.com/crt_phosphor_research.pdf\n\nconst vec3 phosphor_color = vec3(.01,.8,.02);\n\n#define speed 1. // has the same effect as just changing the persistance here\n\nfloat cursorBirghtess(float t){\n    return 1.;\n}\n\nbool isThumbnail() { return iResolution.y<350.; }\n\nvec2 cursorPos(float t){\n    if(isThumbnail()){\n        float a = t*512.;\n        return vec2(cos(a),sin(a)*cos(1.01*a))*(.75+.25*sin(t))*.5*iResolution.y;\n    }\n    vec2 uv = vec2(fract(t/(iTimeDelta*speed)),.75);\n    return (vec2(texture(iChannel1,uv).r,texture(iChannel2,uv).r)-.5)*2.*iResolution.y;\n}\n\n\nfloat drawLine(vec2 start, vec2 end, vec2 p, float t0, float dt){\n    vec2 startOffset = p - start, dir = end - start;  \n    float h = clamp( dot(startOffset,dir)/dot(dir,dir), 0.0, 1.0 );\n    return pow(10.,-dt*h/persistence)*cursorBirghtess(t0-h*dt)*smoothstep(sqrt(2.),1.,length(startOffset-dir*h));\n}\n\n\n#define SUBFRAMES 512  // sampling of the cursor position per frame\n// higher values looks better, but with a big performance penalty\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0,uv).rgb;\n    col=pow(col,vec3(2.2));\n    \n\n    float t1 = (iTime-iTimeDelta) * speed;\n    float dt = iTimeDelta * speed/float(SUBFRAMES);\n\n    for(int i=0;i<SUBFRAMES;i++){\n        float t0 = t1+dt;\n\n\n        vec2 p0 = cursorPos(t0), p1 = cursorPos(t1);\n        vec2 p = fragCoord-.5*iResolution.xy;\n \n    \n\n        // Time varying pixel color\n        col = max(col* pow(10.,-dt/persistence), phosphor_color*drawLine(p0,p1,p,t0,dt));\n        t1 = t0;\n    }\n    \n    // Output to screen\n    fragColor = vec4(pow(col,vec3(1./2.2)),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}