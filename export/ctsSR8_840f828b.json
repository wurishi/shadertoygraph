{"ver":"0.1","info":{"id":"ctsSR8","date":"1674277213","viewed":146,"name":"Crystalize's Kleinian Method","username":"Crystalize","description":"My own method for making 2D Kleinians. :)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["kleinian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI 6.283185307179586476\n#define PI 3.141592653589793238\n#define iters 1000\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\nvec2 cdiv(vec2 z, vec2 c) {\n    float r = dot(c, c);\n    return vec2(z.x * c.x + z.y * c.y, z.y * c.x - z.x * c.y) / r;\n}\n\n\nfloat l(float r) {\n    return 2.0 / PI * atan(1.0/r);\n}\n\n\nfloat hue2rgb(float p, float q, float t) {\n    do{\n      if(t < 0.0) t += 1.0;\n      if(t > 1.0) t -= 1.0;\n    } while (t < 0.0 || t > 1.0);\n\n  if(t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n  if(t < 1.0 / 2.0) return q;\n  if(t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n  return p;\n}\n\nvec3 hslToRgb(float h, float s, float l) {\n  float r, g, b;\n\n  if(s == 0.0) {\n    r = g = b = l; // achromatic\n  } else {\n    float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n    float p = 2.0 * l - q;\n\n    r = hue2rgb(p, q, h + 1.0 / 3.0);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1.0 / 3.0);\n  }\n\n  return vec3(r,g,b);\n}\n\nvec3 domainColoring(vec2 z) {\n    float H = (atan(z.y,z.x)/TWOPI) - TWOPI / 3.0;\n    float S = 1.0;\n    float L = l(length(z));\n    return hslToRgb(H,S,L);\n}\n\nvec2 crystalsMethod(vec2 z) {\n    z = cdiv(vec2(1.0,0.0),z);\n    z *= 0.5;\n    z.x += 0.5;\n    z = cmul(z,vec2(0.0,1.0));\n    for(int i = 0; i < iters; i++) {\n        z.x = abs(z.x);\n        z *= -1.;\n        z.x += 1.0;\n        if(i%3==0&&i%2!=0) {\n            z = cdiv(vec2(1.0, 0.0), -z + vec2(1.0, 0.0));\n        }\n        if(i%2==0) {\n            z = cdiv(vec2(1.0, 0.0), z + vec2(0.0, 1.0));\n        }\n    }\n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5*iResolution.xy) / -iResolution.y;\n    \n    uv = crystalsMethod(uv);\n\n    vec3 col = domainColoring(uv);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}