{"ver":"0.1","info":{"id":"wscBzN","date":"1678229875","viewed":139,"name":"2 Galleon remix moon","username":"ytktkd69","description":"2020 11 04 test1","likes":15,"published":1,"flags":0,"usePreview":1,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// original by dr2  sailing     https://www.shadertoy.com/view/MtBBRR\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\n/////////////////////////////////////////////// insert \nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\n////////////////////////////////////////////////\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 i, f, t1, t2;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  t1 = Hashv4f (dot (i.xy, cHashA3.xy));\n  t2 = Hashv4f (dot (i.zw, cHashA3.xy));\n  return vec2 (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n               mix (mix (t2.x, t2.y, f.z), mix (t2.z, t2.w, f.z), f.w));\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a, am, ap;\n  f = 0.;  a = 0.5;\n  am = 0.5;  ap = 4.;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    p *= mr * ap;  a *= am;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\n//////////////////////////////////////////////////////////////////////////////adition  \nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrEECapsDf (vec3 p, vec3 v1, vec3 v2, float r)\n{\n  vec3 s, t;\n  s = p - v1;\n  t = v2 - v1;\n  return length (s - clamp (dot (s, t) / dot (t, t), 0., 1.) * t) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\nint idObj, idObjGrp;\nconst int idHull = 1, idRud = 2, idStruc = 3, idMast = 4, idSparT = 5, idSparL = 6, idSailT = 7,\n   idSailA = 8, idSailF = 9, idFlag = 10, idRig = 11;\n\nmat3 bMat, boatMat[2];\nvec3 bPos, boatPos[2], qHit, sunDir, waterDisp,shipConf,bDeck;\nvec3 sunCol,moonCol,moonDir  ;       ///////////// ad\nfloat tCur, bAng, boatAng[2], dstFar ,fDayLt;\nbool isNight ;                       ///////////// ad \n\n/*\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol;\n  float cloudFac;\n  bgCol = vec3 (0.2, 0.4, 1.);\n  if (rd.y > 0.) {\n    ro.xz += 0.5 * tCur;\n    vec2 p = 0.01 * (rd.xz * (100. - ro.y) / rd.y + ro.xz);\n    float w = 0.65;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.3;\n    }\n    cloudFac = clamp (3. * (f - 0.1) * rd.y + 0.1, 0., 1.);\n    col = bgCol + 0.2 * pow (1. - max (rd.y, 0.), 5.);\n    col = mix (col, vec3 (0.85), cloudFac);\n  } else col = 0.9 * bgCol + 0.25;\n  return col;\n}    */\n////////////////////////////////////////////////insert from train ride\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol1 = vec3 (0.05, 0.05, 0.15), sbCol2 = vec3 (0.2, 0.25, 0.5);\n  vec3 col;\n  if (isNight) col = 0.3 * clamp (sbCol1 - 0.12 * rd.y * rd.y, 0., 1.);\n  else col = sbCol2 + 0.2 * sunCol * pow (1. - max (rd.y, 0.), 5.);\n  return col;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  const vec3 sCol1 = vec3 (0.06, 0.04, 0.02), sCol2 = vec3 (0.03, 0.03, 0.06) ;\n  vec3 mBrite = vec3(-0.5,-0.4,0.8*cos(tCur*0.5));  // de  (-0.5, -0.4, 0.77); crecent moon =>  (-0.5,-0.4,-0.8) full moon\n  const float skyHt = 150.;\n  vec3 col;   vec3 colNt,colDy ; //ad\n  float cloudFac;\n  if (rd.y > 0.) {\n    ro.x += 0.5 * tCur;\n    vec2 p = 0.02 * (rd.xz * (skyHt - ro.y) / rd.y + ro.xz);\n    float w = 0.8;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.;\n    }\n    cloudFac = clamp (5. * (f - 0.4) * rd.y - 0.1, 0., 1.);\n  } else cloudFac = 0.;\n  if (isNight) {\n    vec3 bgCol = SkyBg (rd) + sCol1 * pow (clamp (dot (rd, moonDir), 0., 1.), 30.);\n    col = bgCol;\n     float moonRad = 0.25*(1.+0.3*sin(tCur*0.3));\n    vec3 vn;\n    bool mHit = false;\n    float bs = - dot (rd, moonDir);\n    float cs = dot (moonDir, moonDir) - moonRad * moonRad;\n    float ts = bs * bs - cs;\n    if (ts > 0.) {\n      ts = - bs - sqrt (ts);\n      if (ts > 0.) {\n        vn = normalize ((ts * rd - moonDir) / moonRad);\n        mHit = true;\n      }\n    }\n    if (mHit) {\n      col += 1.4 * moonCol * clamp (dot (mBrite, vn) *\n         (0.3 + Noisefv3 (5. * vn)), 0., 1.);\n    } else {\n      vec3 st = (rd + vec3 (1.));\n      for (int j = 0; j < 10; j ++) {\n        st = 11.3 * abs (st) / dot (st, st) - 3.;  // st =11.*   de -3.;\n      }\n      col += min (1., 1.5e-6 * pow (min (16., length (st)), 4.8)); // e-6\n    }                              // de min(16.,       ,4.5 )\n    col = mix (col, sCol2, cloudFac) + bgCol;        //Night col\n //   vec3 colN = col ;                               // ad\n  } else {\n    float s = max (dot (rd, sunDir), 0.);\n    col = SkyBg (rd) + sunCol * (0.35 * pow (s, 6.) +\n       0.65 * min (pow (s, 256.), 0.3));\n    col = mix (col, vec3 (0.55), cloudFac);          // Day col\n  //  vec3 colD = col ;                              // ad\n  }\n  \n   //    col = mix(colN,colD, 1./*SmoothBump(0.1,0.75,0.1,mod(tCur/80.,1.)) */); //ad\n    //   return mix(colNt,colDy, fDayLt  ) ;   falure xxxxxxxx smooth change xxx\n     return col;\n}\n/////////////////////////////////////////////////////////\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, t4o, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.2;  wAmp = 0.525;  pRough = 5.;   // de wAmp=0.35\n  t4o.xz = tCur * vec2 (1., -0.5);  // de (1.,-1.);\n  q2 = p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 4; j ++) {\n    t4 = (t4o.xxzz + vec4 (q2, q2)) * wFreq;\n    t2 = Noisev2v4 (t4);\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + sqrt (1. - ta4 * ta4));\n    v2 = pow (1. - pow (v4.xz * v4.yw, vec2 (0.65)), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 2.;  wAmp *= 0.2;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 70; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.4, 1.2 * h) + 0.01 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.1, 1e-4 * d * d), 0.);\n  float h = WaveHt (p);\n  return normalize (vec3 (h - WaveHt (p + e.xyy), e.x, h - WaveHt (p + e.yyx)));\n}\n\n////////////////////////////////////////////////////////// insert galeon\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat BoatDf (vec3 p,float dMin)\n{\n  vec3 q, qq, w, bDeck;\n  float  d, fy, fz, gz, s, rRig, rSpar, yLim, zLim, szFac;\n  rRig = 0.02;\n  rSpar = 0.05;  szFac = 1.0 ;\n  p.yz = Rot2D (p.yz, 3.1415*0.03) ;       // ad  Rod2D(p.yz,3.1415*0.03)~PI*0.19\n  p.yz = Rot2D (p.yz, -0.4 * shipConf.z);   // de -0.4*shipConf()\n  p.xy = Rot2D (p.xy, 6. * shipConf.y);\n  p.y -= shipConf.x + 3.90 * szFac;            // de 4.0*szFac  ~2.5*szFac(down)\n  p /= szFac;\n  dMin = dstFar / szFac;\n  fy = 1. - 0.07 * p.y;\n  fz = 1. - 0.14 * step (1., abs (p.z));\n  zLim = abs (p.z) - 4.5;\n  q = p;\n  d = zLim;\n  q.z = mod (q.z + 1.4, 2.8) - 1.2;\n  d = max (d, PrCapsDf ((q - vec3 (0., 3.7 * (fz - 1.), 0.)).xzy, 0.1 * fy, 3.7 * fz));\n  DMINQ (idObjGrp+idMast);\n  q = p;\n  yLim = abs (q.y - 0.2 * fz) - 3. * fz;\n  qq = q;\n  qq.y = mod (qq.y - 3.3 * (fz - 1.), 2. * fz) - fz;\n  qq.z = mod (qq.z + 1.4, 2.8) - 1.4 + 0.1 * fz;\n  d = max (max (min (d, PrCylDf (vec3 (qq - vec3 (0., 0.05 * fy * fz, 0.1 * fz - 0.23)).xzy,\n     0.15 * fy, 0.11 * fy * fz)), yLim), zLim);\n  DMINQ (idObjGrp+idMast);\n  d = max (max (PrCapsDf (qq.yzx, 0.05, 1.23 * fy * fz), yLim), zLim);\n  DMINQ (idObjGrp+idSparT);\n  q = p;\n  d = min (d, min (PrEECapsDf (q, vec3 (0., -3.5, 4.3), vec3 (0., -2.6, 6.7), rSpar),\n     PrEECapsDf (q, vec3 (0., -4., 4.1), vec3 (0., -2.9, 6.), rSpar)));\n  d = min (d, min (PrEECapsDf (q, vec3 (0., -1.2, -3.), vec3 (0., -0.5, -4.5), rSpar),\n     PrEECapsDf (q, vec3 (0., -2.7, -3.), vec3 (0., -2.7, -4.5), rSpar)));\n  DMINQ (idObjGrp+idSparL);\n    \n  q = p;\n  qq = q;\n  qq.y = mod (qq.y - 3.1 * (fz - 1.), 2. * fz) - fz;\n  qq.z = mod (qq.z + 1.4, 2.8) - 1.4 + 0.7 * (fz - abs (qq.y)) * (fz - abs (qq.y)) - 0.1 * fz;\n  d = max (max (max (PrBoxDf (qq, vec3 ((1.7 - 0.07 * q.y) * fz, fz, 0.01)),\n     min (qq.y, 1.5 * fy * fz - length (vec2 (qq.x, qq.y + 0.9 * fy * fz)))),\n     abs (q.y - 3. * (fz - 1.)) - 2.95 * fz), - PrBox2Df (qq.yz, vec2 (0.01 * fz)));\n  d = max (d, zLim);\n  DMINQ (idObjGrp+idSailT);\n    \n  q = p;\n  q.z -= -3.8;  q.y -= -1.75 - 0.2 * q.z;\n  d = PrBoxDf (q, vec3 (0.01, 0.9 - 0.2 * q.z, 0.6));\n  DMINQ (idObjGrp+idSailA);\n  q = p;\n  q.yz -= vec2 (-1., 4.5);\n  w = vec3 (1., q.yz);\n  d = max (max (max (abs (q.x) - 0.01, - dot (w, vec3 (2.3, 1., -0.35))),\n     - dot (w, vec3 (0.68, -0.74, -1.))), - dot (w, vec3 (0.41, 0.4, 1.)));\n  DMINQ (idObjGrp+idSailF);\n  q = p;\n  d = zLim;  \n  gz = (q.z - 0.5) / 5. + 0.3;\n  gz *= gz;\n  gz = 1.05 * (1. - 0.45 * gz * gz);\n  q.x = abs (q.x);\n  q.z = mod (q.z + 1.4, 2.8) - 1.4;\n  d = max (d, min (PrEECapsDf (q, vec3 (1.05 * gz, -3.25, -0.5), vec3 (1.4 * fz, -2.95, -0.05), 0.7 * rRig),\n     PrEECapsDf (vec3 (q.xy, abs (q.z + 0.2) - 0.01 * (0.3 - 2. * q.y)), vec3 (gz, -3.2, 0.),\n     vec3 (0.05, -0.9 + 2. * (fz - 1.), 0.), rRig)));\n  q = p;\n  d = min (d, PrEECapsDf (q, vec3 (0., -3., -4.45), vec3 (0., -2.7, -4.5), 0.8 * rRig));\n  d = min (min (d, min (PrEECapsDf (q, vec3 (0., 2.45, 2.65), vec3 (0., -2.7, 6.5), rRig),\n     PrEECapsDf (q, vec3 (0., 2.5, 2.65), vec3 (0., -3.2, 4.9), rRig))),\n     PrEECapsDf (q, vec3 (0., 2.6, -3.), vec3 (0., -0.5, -4.5), rRig));\n  q.x = abs (q.x);\n  d = min (d, PrEECapsDf (q, vec3 (0.65, -3.5, 3.5), vec3 (0.05, -2.7, 6.4), rRig));\n  s = step (1.8, q.y) - step (q.y, -0.2);\n  d = min (min (d, min (PrEECapsDf (q, vec3 (0.95, 0.4, 2.7) + vec3 (-0.1, 1.7, 0.) * s,\n     vec3 (0.05, 1.1, -0.15) + vec3 (0., 2., 0.) * s, rRig),\n     PrEECapsDf (q, vec3 (1.05, 1., -0.1) + vec3 (-0.1, 2., 0.) * s,\n     vec3 (0.05, 0.5, -2.95) + vec3 (0., 1.7, 0.) * s, rRig))),\n     PrEECapsDf (q, vec3 (0.95, 0.4, -2.9) + vec3 (-0.1, 1.7, 0.) * s,\n     vec3 (0.05, 0.9, -0.25) + vec3 (0., 2., 0.) * s, rRig));\n  DMINQ (idObjGrp+idRig);\n  q = p;\n  q.yz -= vec2 (3.4, 0.18);\n  d = PrBoxDf (q, vec3 (0.01, 0.2, 0.3));\n  DMINQ (idObjGrp+idFlag);\n  q = p;\n  d = zLim;\n  q.z = mod (q.z + 1.4, 2.8) - 1.4;\n  q.yz -= vec2 (-3.4, -0.4);\n  d = max (d, PrBoxDf (q, vec3 (0.3, 0.1, 0.5)));\n  DMINQ (idObjGrp+idStruc);\n  q = p;\n  q.x = abs (q.x);\n  q.yz -= vec2 (-3.8, 0.5);\n  fz = q.z / 5. + 0.3;\n  fz *= fz;\n  fy = 1. - smoothstep (-1.3, -0.1, q.y);\n  gz = smoothstep (2., 5., q.z);\n  bDeck = vec3 ((1. - 0.45 * fz * fz) * (1.1 - 0.5 * fy * fy) *\n     (1. - 0.5 * smoothstep (-5., -2., q.y) * smoothstep (2., 5., q.z)),\n     0.78 - 0.8 * gz * gz - 0.2 * (1. - smoothstep (-5.2, -4., q.z)), 5. * (1. + 0. * 0.02 * q.y));\n  d = min (PrBoxDf (vec3 (q.x, q.y + bDeck.y - 0.6, q.z), bDeck),\n     max (PrBoxDf (q - vec3 (0., 0.72, -4.6), vec3 (bDeck.x, 0.12, 0.4)),\n     - PrBox2Df (vec2 (abs (q.x) - 0.4, q.y - 0.65), vec2 (0.2, 0.08))));\n  d = max (d, - PrBoxDf (vec3 (q.x, q.y - 0.58 - 0.1 * fz, q.z), vec3 (bDeck.x - 0.07, 0.3, bDeck.z - 0.1)));\n  q = p;\n  d = max (d, - max (PrBox2Df (vec2 (q.y + 3.35, mod (q.z + 0.25, 0.5) - 0.25), vec2 (0.08, 0.1)),\n     abs (q.z + 0.5) - 3.75));\n  DMINQ (idObjGrp+idHull);\n  q = p;\n  d = PrBoxDf (q + vec3 (0., 4.4, 4.05), vec3 (0.03, 0.35, 0.5));\n  DMINQ (idObjGrp+idRud);\n  return 0.7 * dMin * szFac;\n}\n\nvoid EvalShipConf ()\n{\n  vec4 h;\n  vec3 e;    float szFac =1.0;\n  e = vec3 (1. * szFac, 0.,0.);    // de (2.*szFac,0.,0.) ;\n  h = vec4 (WaveHt (- e), WaveHt (e), WaveHt (- e.yxz), WaveHt (e.yxz));\n  shipConf = vec3 (0.015 * dot (h, vec4 (1.)), vec2 (h.xz - h.yw) / (2. * e.x));\n}\n\n\n////////////////////////////////////////////////////////////\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  const float szFac = 1.5;\n  float dMin, d, dLim;\n  dLim = 3.;\n  dMin = dstFar;\n  dMin *= szFac;\n  q = p - boatPos[0];\n  idObjGrp = 1 * 256;\n  d = PrCylDf (q.xzy, 2., 2.);\n  dMin = (d < dLim) ? BoatDf (szFac * boatMat[0] * q, dMin) : min (dMin, d);\n  q = p - boatPos[1];\n  idObjGrp = 2 * 256;\n  d = PrCylDf (q.xzy, 2., 2.);\n  dMin = (d < dLim) ? BoatDf (szFac * boatMat[1] * q, dMin) : min (dMin, d);\n  return dMin / szFac;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 25; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 1., 20. * h / d));\n    d += min (0.05, 3. * h);\n    if (h < 0.001) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec4 BoatCol (vec3 n)\n{\n  vec3 col, nn;  vec2 cg;\n  float spec;\n  int ig, id;\n  ig = idObj / 256;\n  id = idObj - 256 * ig;\n  if (ig == 1) nn = boatMat[0] * n;\n  else nn = boatMat[1] * n;\n  spec = 0.3;\n  if (id == 1) {\n   /* if (qHit.y < 0.1 && nn.y > 0.99) {        //   delete boats color\n      col = vec3 (0.8, 0.5, 0.3) *\n         (1. - 0.4 * SmoothBump (0.42, 0.58, 0.05, mod (7. * qHit.x, 1.)));\n      spec = 0.1;\n    } else if (qHit.x * nn.x > 0. && nn.y < 0. && qHit.z < 1.99 &&\n       abs (qHit.y - 0.1) < 0.095) col = (ig == 1) ? vec3 (0.3, 0.9, 0.3) :\n       vec3 (0.9, 0.3, 0.3);\n    else col = (qHit.y > -0.3) ? vec3 (1., 1., 0.2) : vec3 (0.7, 0.7, 0.8); */\n    //-----------------------------------------------------ad galleon hull\n     if (abs (qHit.x) < bDeck.x - 0.08 && qHit.y > -3.6 && qHit.z > - bDeck.z + 0.62) {\n      col = vec3 (0.5, 0.3, 0.) * (0.5 + 0.5 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.x, 1.)));\n    } else if (qHit.y > -4.25) {\n      col = vec3 (0.7, 0.5, 0.1);\n      if (abs (qHit.z - 4.) < 0.25 && abs (qHit.y + 3.55) < 0.05) col *= 1.2;\n      else if (qHit.z < -4. && abs (qHit.x) < 0.64 && abs (qHit.y + 3.62) < 0.125) {\n    vec2 cg = step (0.2, abs (fract (vec2(4.*qHit.x, 6. * (qHit.y + 3.62)) + 0.5)-0.5));\n        if (cg.x * cg.y == 1.) col = vec3 (0.8, 0.8, 0.2)*3.5;\n        else col *= 0.8;\n      } else {\n        col *= 0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.y, 1.));\n     vec2 vf = vec2 (64., 0.3);\n      } \n    } else if (qHit.y > -4.30) {      // kissuisenn white\n      col = vec3 (0.8, 0.8, 0.8);\n    } else {\n      col = vec3 (0.5, 0.2, 0.1);   // under kissuisenn black =>brown\n     // vf = vec2 (64., 2.);\n    }\n    //------------------------------------------------------   hull end\n  } \n  \n  else if (id == 2) {\n    if (abs (abs (qHit.x) - 0.24) < 0.22 && abs (qHit.y - 0.7) < 0.15 ||\n       abs (abs (qHit.z + 0.2) - 0.5) < 0.4 && abs (qHit.y - 0.7) < 0.15) {\n       col = vec3 (0., 0., 0.1);\n       spec = 1.;\n     } else col = vec3 (1.);\n  } else if (id == 3){ col = vec3 (0.4, 0.3, 0.1);  // id==3 Struct\n    if(max(abs(qHit.x),abs(qHit.z+0.22))<0.2){\n    cg=step(0.1,abs(fract(vec2(5.*vec2(qHit.x,qHit.z+0.22))+0.5)-0.5));\n    if(cg.x*cg.y ==1.0) col = vec3(0.8,0.8,0.2)*3.5 ;\n    }\n  }\n  else if (id == 4 && ig==1) col = vec3 (1., 1., 0.4);       // idMast\n  else if (id == 4 && ig ==2) col = vec3 (0.7,0.3,0.2) ;      // idMast\n  \n  else if (id == 5) col = vec3 (0.4, 1., 0.4);\n  else if (id == 6){ col = vec3 (0.7, 0.4, 0.1);    // idSparL Top senntanPole\n    if(qHit.z>6.65)  col =vec3(1.0,1.0,0.3)*2.5;    //  Top pole senntan light\n  }\n  \n  else if (id == 7 && ig == 1){ \n  qHit.x *= (1. + 0.07 * qHit.y) * (1. + 0.14 * step (1., abs (qHit.z)));\n  col = vec3 (1., 1., 1.)* (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (4. * qHit.x, 1.))) ;  //dot line on white cloth\n   if (abs (qHit.z) < 0.2 && abs (abs (length (qHit.xy - vec2 (0., 2.097)) - 0.35*0.) - 0.15) < 0.25\n       /*||abs(qHit.z-2.9)<0.2 && abs (abs (length (qHit.xy - vec2 (0., -0.1)) - 0.35*0.) - 0.15) < 0.25  */ )\n                                    // fore middle red circle\n       col *= vec3 (1., 0., 0.);    // red circle on white cloth\n     if(abs(qHit.z-2.9)<0.2 && abs(qHit.x+0.0)<0.7 &&abs(qHit.y-(-1.4) )<1.5  )\n    //  qHit.x -=-0.2;    //  cross line  in eria range\n      col.rbg +=smoothstep(0.2,0.,abs(qHit.x+qHit.y -0.0 ))  // y =-x-0.0 line\n            + smoothstep(0.2,0.,abs(qHit.x-qHit.y -0.5))    ; // y =x-0.5 line\n                   \n      // col.rgb =>white, col.rrr=> XX,  col.r =>pink  ?black? \n  }\n  \n  else if (id == 7 && ig == 2 ) {\n  qHit.x *= (1. + 0.07 * qHit.y) * (1. + 0.14 * step (1., abs (qHit.z)));\n  col = vec3(0.7,0.7,0.8)* (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (4. * qHit.x, 1.)));// mainSAil\n     // vec3(0.4,0.7,0.3)\n  if (abs (qHit.z) < 0.2 && abs (abs (length (qHit.xy - vec2 (0., 2.09)) - 0.35*0.) - 0.15) < 0.07\n      ||abs(qHit.z-3.0)<0.27 && abs (abs (length (qHit.xy - vec2 (0., -0.148)) - 0.35*0.) - 0.15) < 0.22 )\n       col += vec3 (0.92*sin(tCur*0.2), 0.92*abs(sin(tCur*0.3)), 0.82*sin(tCur*0.1)); \n  \n  // the Emperer's symbol\n   if (abs (qHit.z) < 0.2  &&  abs (abs (length (qHit.xy - vec2 (0., 2.09)) - 0.35*0.) - 0.15) < 0.735  )   \n      col.g += smoothstep(0.30,0.,abs(0.051+ sin(atan(qHit.y-2.09,qHit.x-0.) *16.)*0.2- length(qHit.xy-vec2(0.,2.09))   )) ;\n     \n  }\n  \n  else if (id == 8) col = (ig == 1) ? vec3 (1., 0.4, 0.4) : vec3 (0.4, 1., 0.4);//backsail\n // else if (id == 9) col = (ig == 1) ? vec3 (0.92,0.9, 0.7): vec3 (0.4, 0.2, 0.85);//frontsail\n\nelse if (id == 10)col = (ig == 1) ? vec3 (1.0, 0.1,0.2) : vec3 (0.4,0.7,0.3) ; // flag\n\nelse if (id == 9) col = (ig == 1) ?     // fore Sail( sailF)\n    vec3 (0.90, 0.9,0.97)* (0.7+ 0.3*SmoothBump(0.05,0.95,0.02,mod(2.95*qHit.y+4.*qHit.z-0.5,0.5)))  // ig =1\n    : vec3 (0.95,0.4,0.28)*(0.7+0.3*SmoothBump(0.05,0.95,0.02, mod(2.95*qHit.y+4.*qHit.z-0.5,1.)))     //ig =2\n    ; //fore Sail(sailF)\n     \n\n  return vec4 (col, spec);\n}\n\nfloat WaveAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 1; j <= 4; j ++) {\n    d = 0.1 * float (j);\n    ao += max (0., d - 3. * ObjDf (ro + rd * d));\n  }\n  return clamp (1. - 0.1 * ao, 0., 1.);\n}\n\nfloat WakeFac (vec3 row)\n{\n  vec2 tw, tw1;\n  float wkFac, ba;\n  tw = row.xz - (boatPos[0].xz - Rot2D (vec2 (0., -3.), boatAng[0]));\n  tw1 = row.xz - (boatPos[1].xz - Rot2D (vec2 (0., -5.), boatAng[1]));\n  if (length (tw1) < length (tw)) {\n    tw = tw1;\n  //  ba = boatAng[1];\n  } else ba = boatAng[0];\n  tw = Rot2D (tw, - ba);\n  wkFac = 0.;\n  if (length (tw * vec2 (1., 0.5)) < 1.)\n     wkFac = clamp (1. - 1.5 * abs (tw.x), 0., 1.) * clamp (1. + 0.5 * tw.y, 0., 1.);\n  return wkFac;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, watCol, vn, vnw, row, rdw;\n  float dstObj, dstWat, wkFac, sh;\n  int idObjT;\n  bool waterRefl;\n  dstWat = WaveRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  waterRefl = (dstWat < min (dstFar, dstObj));\n  if (waterRefl) {\n    ro += rd * dstWat;\n    row = ro;\n    rdw = rd;\n    wkFac = WakeFac (row);\n    vnw = WaveNf (ro, dstWat);\n    if (wkFac > 0.) vnw = VaryNf (10. * row, vnw, 5. * wkFac);\n    rd = reflect (rd, vnw);\n    ro += 0.1 * rd;\n    idObj = -1;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (idObj < 0) dstObj = dstFar;\n  if (dstObj < dstWat) {\n    ro += dstObj * rd;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    objCol = BoatCol (vn);\n    sh = ObjSShadow (ro, sunDir);\n    col = objCol.rgb * (0.2 + 0.2 * (max (vn.y, 0.) + \n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       objCol.a * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.);\n    col = clamp (col, 0., 1.);\n  } \n    else col = SkyCol (ro, rd);\n    //--------------------------------------\n  if (waterRefl) {\n    watCol = (vec3 (0.2, 0.35, 0.4) * (0.5 + 0.5 * (max (vnw.y, 0.) +\n       0.1 * pow (max (0., dot (sunDir, reflect (rdw, vnw))), 128.)))) *\n       WaveAO (row, vec3 (0., 1., 0.));\n    col = mix (watCol, col, 0.8 * pow (1. - abs (dot (rdw, vnw)), 4.));\n    col = mix (col, vec3 (0.9),\n       pow (clamp (WaveHt (row) + 0.1 * Fbm3 (32. * row), 0., 1.), 8.));\n    if (wkFac > 0.) col = mix (col, vec3 (0.9),\n       wkFac * clamp (0.1 + Fbm3 (9.1 * row), 0., 1.));\n    col = mix (col, SkyCol (row, rdw), clamp (2. * dstWat / dstFar - 1.2, 0., 1.)); \n  }  \n  return clamp (col, 0., 1.);\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (5. * sin (0.2 * t), 0., 1.5 * t);\n}\n\nvoid BoatPM (float t, float ds)\n{\n  vec3 bDir;\n  float h[5], c, s, bAz;\n  bPos = TrackPath (t);\n  vec3 bp = TrackPath (t + 0.1) - bPos;\n  bAz = atan (bp.z, - bp.x);\n  bPos.x += ds;\n  bDir = vec3 (0., 0., 1.);\n  bDir.xz = Rot2D (bDir.xz, bAz);\n  h[0] = WaveHt (bPos);\n  h[1] = WaveHt (bPos + 0.5 * bDir);\n  h[2] = WaveHt (bPos - 0.5 * bDir);\n  bDir.xz = Rot2D (bDir.xz, -0.5 * pi);\n  h[3] = WaveHt (bPos + 1.8 * bDir);\n  h[4] = WaveHt (bPos - 1.8 * bDir);\n  bPos.y = 0.1 + 1.1 * (2. * h[0] + h[1] + h[2] + h[3] + h[4]) / 6.;\n  bMat[2] = normalize (vec3 (4., h[2] - h[1], 0.));\n  bMat[0] = normalize (vec3 (0., 0.3 + h[3] - h[4], 4.));\n  bMat[1] = cross (bMat[0], bMat[2]);\n  c = cos (bAz);\n  s = sin (bAz);\n  bMat *= mat3 (c, 0., s, 0., 1., 0., - s, 0., c);\n  bAng = 0.5 * pi - bAz;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, vd, u, bm;\n  vec2 canvas, uv, ori, ca, sa;\n  float f, az, el;        float t ; //ad time\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime*(-1.*0.5);\n  sunDir = normalize (vec3 (0.5, 0.5, -1.));\n    //////////////////////////////////////////// insert \n    sunCol =vec3(1.,0.9,0.8);          // ad\n    moonCol =vec3(1.,0.97*sin(tCur*0.2) ,.3 );          // ad\n    moonDir =normalize(vec3( -0.5*sin(tCur*0.2),0.25, 1.)) ;     // ad(2)\n    isNight = mod(floor(iTime*(-0.5)/10.),4.) !=0.  ;       // ad (3)\n    isNight = mod(floor(iTime*(-0.5)/10.),4.) !=2.  ;   \n   \n   \n  /*   t =mod(tCur/80.0,1.0) ;\n     fDayLt = SmoothBump(0.0,0.5,0.05, t) ;  */  // smooth change XXXXXXX\n   ///////////////////////////////////////////// ////\n     \n  waterDisp = 0.25 * tCur * vec3 (-1., 0., 1.);\n  BoatPM (tCur, -3.);\n  boatPos[0] = bPos;\n  boatMat[0] = bMat;\n  boatAng[0] = bAng;\n  BoatPM (tCur, 3.);\n  boatPos[1] = bPos;\n  boatMat[1] = bMat;\n  boatAng[1] = bAng;\n  dstFar = 150.;\n  az = 4. * pi * 0.03 * tCur *0. ;             //  no rotate of y axis  (11.04)\n  el = -0.01 * pi * (1. + sin (0.11 * pi * tCur)); // de 0.02*pi*(  )\n  \n  /////////// ///////////////////////////////////// Mouse ad 2021 08 08\n  vec4  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  \n    if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n    el = clamp (el, 0.05 * pi, 0.45 * pi);\n  }\n  \n  ////////////////////////////////////////////////////////////////// mouse end\n  \n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  ro = vec3 (0., 1.*0.5, -13.) * mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  bm = 0.5 * (boatPos[0]   + boatPos[1]  );\n  ro += bm;                                  // camera move with 2 boats\n  ro.y = max (ro.y + 0.105, 0.3 + WaveHt (ro));\n  bm.y += 1.0;        // bm.y +=0.5;\n  vd = normalize (bm - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, 2.5));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\n","name":"Image","description":"","type":"image"}]}