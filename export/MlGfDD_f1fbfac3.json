{"ver":"0.1","info":{"id":"MlGfDD","date":"1542633857","viewed":232,"name":"React and Diffuse","username":"huwb","description":"My first shader in a while.. Nothing too fancy, just seeing if i can get something interesting out of vanilla Gray-Scott equations.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["diffusion","reaction","grayscott"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code from Gray-Scott explorer here: http://mrob.com/pub/comp/xmorphia/ogl/index.html\n// They do 8 iterations per frame, i'm doing 4 per frame by using the aux buffers.\n\n// Another great link: http://www.karlsims.com/rd.html\n\n// cosine based palette, 4 vec3 params\n// source: https://iquilezles.org/articles/palettes\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float val = texture(iChannel0, fragCoord/iResolution.xy).y;\n    \n    // palette from https://iquilezles.org/articles/palettes\n    fragColor.rgb = palette(val, vec3(.5,.5,.5), vec3(0.5, 0.5, 0.5), vec3(\t1.0, 1.0, 1.0), vec3(0.00, 0.10, 0.20));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Code from Gray-Scott explorer here: http://mrob.com/pub/comp/xmorphia/ogl/index.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUv = fragCoord / iResolution.xy;\n    vec2 texel = 1./iResolution.xy;\n    \n    // scroll/advect upwards\n    vUv.y -= texel.y/8.;\n    \n    float feed = feed(vUv);\n    float kill = kill(vUv);\n\n    // init values\n    if(iFrame < 10 )\n    {\n        fragColor = texture(iChannel2, vUv/2.);\n        return;\n    }\n\n    vec2 dst = GreatScott(vUv, texel, feed, kill, iChannel0);\n\n    // mouse input\n    if (iMouse.z > 0.0)\n    {\n        vec2 diff = (fragCoord - iMouse.xy);\n        if (dot(diff,diff) < 5.0)\n        {\n            dst.r = 0.0; dst.g = 0.9; /* set u=0, v=0.9 */\n        }\n    }\n    \n    // add a touch of scrolling noise just to mix things up a bit\n    dst.r += .005*texture(iChannel2, vUv/2.-iTime/128.).x;\n\n    fragColor = vec4(dst.r, dst.g, 0.0, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Code from Gray-Scott explorer here: http://mrob.com/pub/comp/xmorphia/ogl/index.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUv = fragCoord / iResolution.xy;\n    vec2 texel = 1./iResolution.xy;\n    \n    float feed = feed(vUv);\n\tfloat kill = kill(vUv);\n\n    vec2 dst = GreatScott(vUv, texel, feed, kill, iChannel0);\n\n    fragColor = vec4(dst.r, dst.g, 0.0, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Code from Gray-Scott explorer here: http://mrob.com/pub/comp/xmorphia/ogl/index.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUv = fragCoord / iResolution.xy;\n    vec2 texel = 1./iResolution.xy;\n    \n\tfloat feed = feed(vUv);\n    float kill = kill(vUv);\n    \n    vec2 dst = GreatScott(vUv, texel, feed, kill, iChannel0);\n\n    fragColor = vec4(dst.r, dst.g, 0.0, 1.0);\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Code from Gray-Scott explorer here: http://mrob.com/pub/comp/xmorphia/ogl/index.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUv = fragCoord / iResolution.xy;\n    vec2 texel = 1./iResolution.xy;\n    \n\tfloat feed = feed(vUv);\n    float kill = kill(vUv);\n    \n    vec2 dst = GreatScott(vUv, texel, feed, kill, iChannel0);\n\n    fragColor = vec4(dst.r, dst.g, 0.0, 1.0);\n}\n","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Code from Gray-Scott explorer here: http://mrob.com/pub/comp/xmorphia/ogl/index.html\n\n#define dt .8\n\nfloat feed(vec2 uv)\n{\n    float feed = 0.046*(uv.x+.5-.2);\n    \n    // If enabled, the following gives a \"parameter map\" view\n\t//feed = vUv.y * 0.083;\n    \n    return feed;\n}\n\nfloat kill(vec2 uv)\n{\n    // If enabled, the following gives a \"parameter map\" view\n    //return vUv.x * 0.073;\n    return 0.063*(uv.y/2.+.8);\n}\n\nvec2 GreatScott(vec2 vUv, vec2 step, float feed, float kill, sampler2D tSource)\n{\n    /* Generate coordinates used for sampling with wraparound. */\n    float xm1 = vUv.x - step.x;\n    float xp1 = vUv.x + step.x;\n    float ym1 = vUv.y - step.y;\n    float yp1 = vUv.y + step.y;\n    xm1 = (xm1 < 0.0) ? xm1 + 1.0 : xm1;\n    xp1 = (xp1 > 1.0) ? xp1 - 1.0 : xp1;\n    ym1 = (ym1 < 0.0) ? ym1 + 1.0 : ym1;\n    yp1 = (yp1 > 1.0) ? yp1 - 1.0 : yp1;\n\n    /* Get our own U,V values, and those of 4 neighbours. */\n    vec2 uv = texture(tSource, vUv).rg;\n    vec2 uv0 = texture(tSource, vec2(xm1, vUv.y)).rg;\n    vec2 uv1 = texture(tSource, vec2(xp1, vUv.y)).rg;\n    vec2 uv2 = texture(tSource, vec2(vUv.x, ym1)).rg;\n    vec2 uv3 = texture(tSource, vec2(vUv.x, yp1)).rg;\n\n    vec2 lapl = (uv0 + uv1 + uv2 + uv3 - 4.0*uv);//10485.76;\n    float du = /*0.00002*/\n        0.2097*lapl.r - uv.r*uv.g*uv.g + feed*(1.0 - uv.r);\n    float dv = /*0.00001*/\n        0.105 *lapl.g + uv.r*uv.g*uv.g - (feed+kill)*uv.g;\n    vec2 dst = uv + dt * vec2(du, dv);\n    return dst;\n}\n\nvec2 homogen_uv(float feed, float kill)\n{\n    float sqrt_F = sqrt(feed);\n    float U = 1.0;\n    float V = 0.0;\n    if (kill < (sqrt_F - 2.0 * feed) / 2.0) {\n        float A = sqrt_F / (feed + kill);\n        U = (A - sqrt(A*A - 4.0)) / (2.0 * A);\n        U = clamp(U, 0.0, 1.0);\n        V = sqrt_F * (A + sqrt(A*A - 4.0)) / 2.0;\n        V = clamp(V, 0.0, 1.0);\n    } // else, (U,V) already set to (1,0)\n    return vec2(U, V);\n}\n\n/* Simplex noise function */\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\nfloat snoise2(vec2 v) {\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n                        -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                     + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n                            dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n","name":"Common","description":"","type":"common"}]}