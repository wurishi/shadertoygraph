{"ver":"0.1","info":{"id":"7s33D4","date":"1629823094","viewed":297,"name":"Lichtenberg figure 6","username":"rory618","description":"Use the mouse to overlay on the original image. Also works pretty good on texture \"Rock Tiles\"","likes":10,"published":1,"flags":48,"usePreview":0,"tags":["2d","particles","lightning","montecarlo","greyscale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\tO = texture(iChannel2,I/R.xy);\n    if(I.x>iMouse.x*1.2-R.x*0.1){\n        O = 1.-O/O.w*1.5;\n    } else {\n        O = 1.-O/O.w;\n    \n    \n        O *= texture(iChannel1,I/R.xy);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define cam (vec3(0.,0.,.21))\n#define theta ((iMouse.yx/iResolution.yx-.5)*vec2(-6,6))\n#define transform (mat4(1,0,-cam.x/cam.z,0,0,1,-cam.y/cam.z,0,0,0,1,0,0,0,-1./cam.z,1)*(mat4(cos(theta.y),0,-sin(theta.y),0,0,1,0,0,sin(theta.y),0,cos(theta.y),0,0,0,0,1)*mat4(1,0,0,0,0,cos(theta.x),sin(theta.x),0,0,-sin(theta.x),cos(theta.x),0,0,0,0,1)))\n\nfloat score(vec2 p){\n    return -max(.5,length(texture(iChannel0, p/R.xy)));\n}\n\n//Particle buffer\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 coord;\n    \n    int seed = int(0);\n\n    int seed2 = int(I.x + I.y*2000.)+iFrame*4000000;\n    vec2 sf = R.xy/R.y;\n    vec2 a = vec2(R.xy)*rand2(seed2^0x853647D5);\n    vec2 b = vec2(R.xy)*rand2(seed2^0x85AE84D5);\n\tvec2 c,d;\n    vec3 col = vec3(1.);\n    for(int k=0; k<24;k++){\n        int v = (200/(k+1));\n        float l = length(b-a);\n\n\n        c = (a+b)/2.+l*randn(rand2(seed^0x8593F4D5))/6.;\n        d = (a+b)/2.+l*randn(rand2(seed^0x93D35DE5))/6.;\n        \n        float cs = score(c);\n        float ds = score(d);\n        \n        for(int i = 0; i < 5; i++){\n            seed = IHash(seed^0x7d964ba9);\n            vec2 c_ = (a+b)/2.+l*randn(rand2(seed^0x8593F4D5))/6.;\n            vec2 d_ = (a+b)/2.+l*randn(rand2(seed^0x93D35DE5))/6.;\n            float cs_ = score(c_);\n            float ds_ = score(d_);\n            if(cs_>cs){\n                cs=cs_;\n                c=c_;\n            }\n            if(ds_>ds){\n                ds=ds_;\n                d=d_;\n            }\n            \n        }\n        \n\n\t\tvec4 j = rand4(seed2^IHash((iFrame*0x5da8d7da)));\n        \n        float d0 = length(a-c);\n        float d1 = length(b-c);\n        float d2 = length(c-d)/4.;\n        float s = d0+d1+d2;\n        if(j.x<d0/s){\n            b=c;\n            seed = IHash(seed^0x7d964ba9);\n            seed2 = IHash(seed2^0x7d964ba9);\n        } else if(j.x<(d0+d1)/s){\n            a=c;\n            seed = IHash(seed^0xb7798235);\n            seed2 = IHash(seed2^0xb7798235);\n        } else {\n            a=c;\n            b=d;\n            seed = IHash(seed^0x5b2a74f5);\n            seed2 = IHash(seed2^0x5b2a74f5);\n            col *= vec3(.95,.95,.956);\n        }\n            \n    }\n    \n    coord = mix(a,b,Hash(seed2));\n    //coord *= R.y*2.;\n    //coord += R.xy*vec2(.5,-1);\n\tcoord += .2*randn(rand2(seed2^0xAA91B4C3));\n    particle p = particle(!(coord.x>0.&&coord.x<R.x&&coord.y>0.&&coord.y<R.y), coord, col);\n    O.xy = packParticle(p);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define iR ivec3(R)\n#define uR uvec3(R)\n#define IHash3(x,y,z) IHash(int(x)^IHash(int(y)^IHash(int(z))))\n#define dot2(o) dot((o),(o))\n#define tx(ch,p,R) texelFetch(ch, Zmod(p,iR.xy),0)\n\n//Roboust/universal integer modulus function\n#define Zmod(x,y) (((x)+(y)+(y)+(y))-(((x)+(y)+(y)+(y))/(y))*(y))\n//#define Zmod(x,y) ((x+y*10)%y)\n\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn float(a) / float(0x7FFFFFFF);\n}\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384),\n                Hash(seed^0x253625));\n}\nvec3 rand3(int seed){\n    return vec3(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348593),\n                Hash(seed^0x8593D5));\n}\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\n\nstruct particle {\n    bool nil;\n    vec2 coord;\n    vec3 color;\n};\n    \nvec2 packParticle(particle p){\n    uvec2 px = uvec2(p.coord);\n    uvec3 c = uvec3(p.color * 7000. + 1000.);\n    uint n = uint(p.nil);\n    uint x = px.x & 0x7FFu;\n    uint y = px.y & 0x7FFu;\n    uint r = c.r & 0x1FFFu;\n    uint g = c.g & 0x1FFFu;\n    uint b = c.b & 0x1FFFu;\n    uint A = (b >> 9) | (g << 4) | (r << 17) | (n << 30);\n    uint B = (y) | (x << 11) | ((b & 0x1FFu) << 22);\n    return vec2(uintBitsToFloat(A),uintBitsToFloat(B));\n}\nparticle unpackParticle(vec2 p){\n    uint A = floatBitsToUint(p.x);\n    uint B = floatBitsToUint(p.y);\n    uint n = (A >> 30) & 0x1u;\n    uint r = (A >> 17) & 0x1FFFu;\n    uint g = (A >> 4) & 0x1FFFu;\n    uint b = ((B >> 22) & 0x1FFu) | ((A & 0xFu) << 9);\n    uint y = B & 0x7FFu;\n    uint x = (B >> 11) & 0x7FFu;\n    return particle(bool(n), vec2(x,y)+.5,(vec3(r,g,b)-1000.)/7000.);\n}\n\n#define mapping_iters 2\nvec2 forward_mapping(vec2 Z,vec3 R, int seed){\n    int p = int(R.x);\n    int q = int(R.y);\n    \n    int x=int(Z.x);\n    int y=int(Z.y);\n    \n    for(int i = 0; i < mapping_iters; i++){\n        x = Zmod(x + IHash(y^seed)%p,p);\n        y = Zmod(y + IHash(x^seed)%q,q);\n    }\n        \n    return vec2(x,y)+.5;\n    \n}\nvec2 reverse_mapping(vec2 Z,vec3 R, int seed){\n    \n    int p = int(R.x);\n    int q = int(R.y);\n    \n    int x=int(Z.x);\n    int y=int(Z.y);\n    \n    for(int i = 0; i < mapping_iters; i++){\n        x = Zmod(x - IHash(y^seed)%p,p);\n        y = Zmod(y - IHash(x^seed)%q,q);\n    }\n        \n    return vec2(x,y)+.5;\n}\n\nfloat score(particle p, vec2 I, vec3 R, int seed){\n    if(p.nil) return 1e6;\n    \n    vec2 Z = forward_mapping(p.coord, R, seed);\n    \n    vec2 D = Z-I;\n    D = mod(D+R.xy/2.,R.xy)-R.xy/2.;\n    return max(abs(D.x),abs(D.y));\n    \n}\n\n//Update ranking, save a list of two particle xy indices. O.xy is better particle, O.zw is a different not as good one\nvoid updateRank2x(particle n, inout vec4 O, inout float s0, inout float s1, vec2 I, vec3 R,int seed){\n    float sn = score(n,I,R,seed);\n    if(sn<s0){\n        //Shift down the line\n        s1=s0;\n        O.zw=O.xy;\n        s0=sn;\n        O.xy=packParticle(n);\n    } else if(sn<s1){\n        //Bump off the bottom one\n        s1=sn;\n        O.zw=packParticle(n);\n        \n    }\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    //Split frames into 8 stages\n    int stage = iFrame%8;\n    int seed = iFrame/8;\n    int size = int(.5+pow(2.45,float(7-stage)));\n    \n    \n    float s0;\n    float s1;\n    //init with top left corner and center\n    if(stage==0){\n        vec2 u0 = tx(iChannel0, ivec2(I)-size,R).xy;\n        vec2 u1 = tx(iChannel0, ivec2(I),R).xy;\n        particle p0 = unpackParticle(u0);\n        particle p1 = unpackParticle(u1);\n                                                                         \n        s0 = score(p0,I,R,seed);\n        s1 = score(p1,I,R,seed);\n        \n        O.xy=u0;\n        O.zw=u1;\n        \n        //Select the better one, make sure scores are in order with s0<s1\n        if(s0>s1){\n            vec2 _ = O.xy;\n            O.xy = O.zw;\n            O.zw = _;\n            _.x = s0;\n            s0 = s1;\n            s1 = _.x;\n        }\n    } else {\n        O = tx(iChannel1, ivec2(I)-size,R );\n        particle p0 = unpackParticle(O.xy);\n        particle p1 = unpackParticle(O.zw);\n        s0 = score(p0,I,R,seed);\n        s1 = score(p1,I,R,seed);\n    }\n    for(int i = 1; i < 9; i++){\n        if(stage==0){\n        \tvec2 u = tx(iChannel0,ivec2(I)-size+size*ivec2(i/3,i%3),R).xy;\n            particle p = unpackParticle(u);\n            updateRank2x(p,O,s0,s1,I,R,seed);\n            \n        } else {\n        \tvec4 t;\n            vec4 u = tx(iChannel1,ivec2(I)-size+size*ivec2(i/3,i%3),R); \n            particle p0 = unpackParticle(u.xy);\n            particle p1 = unpackParticle(u.zw);\n            updateRank2x(p0,O,s0,s1,I,R,seed);\n            updateRank2x(p1,O,s0,s1,I,R,seed);\n        }\n        \n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void splat(inout vec4 O, vec2 I, particle p){\n    if(floor(I) == floor(p.coord) && !p.nil){\n        O += vec4(p.color,1); \n    }\n}\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\n    O = vec4(0);\n    int seed = iFrame/8;\n    \n    if(iFrame%8==7){\n            vec2 ip = forward_mapping(I,R,seed);\n            vec4 t = texelFetch(iChannel1,ivec2(ip),0);\n            \n\n            splat(O,I,unpackParticle(t.xy));\n            splat(O,I,unpackParticle(t.zw));\n    } else {\n        O = texture(iChannel3,I/R.xy);\n    }\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n\n    O = texture(iChannel3,I/R.xy);\n\tO.w += 1.;\n    O += texture(iChannel2,I/R.xy);\n}","name":"Buffer C","description":"","type":"buffer"}]}