{"ver":"0.1","info":{"id":"4XBSDd","date":"1717004781","viewed":58,"name":"RotationWithoutMatrices","username":"Plastic","description":"Rotation using complex number multiplication.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["imaginary","complexnumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotation(vec2 a, vec2 b)\n{\n   float ar = a.x;\n   float bi = a.y;\n   float cr = b.x;\n   float di = b.y;\n   \n   vec2 final = vec2(ar*cr-bi*di, ar*di+cr*bi);\n   \n   return final;\n}\n\n\nfloat square(vec2 uv, vec2 s, vec2 off)\n{\n    float draw = abs(uv.x-off.x) < s.x && abs(uv.y-off.y) < s.y ? 1.0 : .0;\n    \n    return draw;\n}\n/*\nvec3 torender(vec2 uv)\n{\n    vec3 materials\n\n    vec2 sq = vec2(square(uv, vec2(0.5), vec2(.0)), .0);\n    \n    return vec3();\n    \n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2.* fragCoord - iResolution.xy) / iResolution.y;\n    \n    float time = iTime;\n    \n    vec2 changeduv = rotation(uv, vec2(cos(time), sin(time)));\n    \n    vec3 sq = vec3(square(changeduv, vec2(0.5), vec2(.0)));\n    \n    fragColor = vec4(sq, 1.0);\n}","name":"Image","description":"","type":"image"}]}