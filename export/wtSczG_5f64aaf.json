{"ver":"0.1","info":{"id":"wtSczG","date":"1594661180","viewed":41,"name":"sampe","username":"Add22","description":"345powerntjm","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["234"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nstruct Camera    \n{\nvec3 pos; \nvec3 dir;\nfloat zoom;   \n}\n\ncamera; \n\nstruct Sphere {\n    vec3 pos; \n    float radius; \n}\n\nsphere;\n\nvoid setupScene() \n    {\n    camera.pos = vec3(0.1,0.0,3.5); \n    camera.dir = vec3(0.0,0.,-1.0); \n    camera.zoom = 0.1;\n    \n    sphere.pos = vec3(0.,0.,0.);\n    sphere.radius= 0.2;\n     }\n\nbool Quad (float a,float b, float c, out float t0, out float t1)\n{\n float disc = b*b -4.0 * a *c; \n    \n    if (disc <0.0)     \n    {\n   return false;\n    }\n    if (disc == 0.0)\n    {\n        \n\t\tfloat t0 = -b / (2.0 *a);\n        return true; \n}\n    \n \tt0 = (-b + sqrt(disc)) / (2.0 * a);\n    t1 = (-b - sqrt(disc)) / (2.0 * a);\n    return true;    \n\n}   \n\nbool inter(vec3 dir, out float ref)\n{\n    \n    vec3 L = camera.pos - sphere.pos; \n    \n    float a = dot(dir,dir);\n    float b = 2. * dot(dir, L);\n    float c = dot(L,L) - pow(sphere.radius,2.);\n \n    float t0; \n    float t1;\n    \n    \nif(Quad(a,b,c,t0,t1)) \n{   \n    float t = t0;\n    if (t1 < t0)\n    {\n      t = t1;\n    }\n    vec3 phi = camera.pos + t  * dir;\n    vec3 sn = normalize(phi - sphere.pos);\n      ref= -dot(dir,sn);\n        return true; \n}      \nreturn false;     \n}\n\nvec3 ray(vec3 dir)\n  {\n    \n float ref = 0.0;\n if (inter(dir,ref))\n  {\n return ref * vec3(0.2,0.9,0.6);\n}  \n return vec3(0.,0.,0.);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    setupScene();  \n    vec2 uv = fragCoord/iResolution.xy -0.5;\n    uv.x *=(iResolution.x/iResolution.y); \n    vec3 dir = normalize(vec3(uv,camera.zoom) - camera.pos);\n        sphere.pos.z = cos(iTime * 5.0) / 3.0;\n        sphere.pos.y = sin(iTime * 2.5) /1.5;             \n    // Time varying pixel color\n    vec3 col = ray(dir);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}