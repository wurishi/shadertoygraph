{"ver":"0.1","info":{"id":"dtVcWh","date":"1700185724","viewed":20,"name":"Rotating Fractal Squares","username":"CS_DS","description":"11/16/2023 - First attempt at making a somewhat custom shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nvec3 sdfSquare(vec2 uv, float size, vec2 offset, float cTime) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  vec2 rotated = rotate(vec2(x,y), cTime);\n  float d = max(abs(rotated.x), abs(rotated.y)) - size;\n  \n  return d > 0. ? vec3(0.) : palette(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  float PI = 3.141592653589;\n  vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n  uv -= 0.5; // <-0.5,0.5>\n  uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n  \n  \n\n  for(float i = 0.0; i < 4.0; i+= 1.) {\n     uv = abs(uv*1.6);\n     uv -= 0.2;\n     uv *= 1.5;\n     \n     \n  }\n\n\n  vec2 offset = vec2(0.0, 0.0);\n\n  float sTime = .1;\n  float cTime = 2.*iTime;\n  \n  sTime = abs(mod(iTime-2.*PI,4.*PI) - 2.*PI) + 3.;\n\n  \n  vec3 col = sdfSquare(uv, sTime, offset, cTime*.25);\n  col = fract(col * 1.) - 0.5;\n  // Output to screen\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}