{"ver":"0.1","info":{"id":"WtcBRN","date":"1612301247","viewed":73,"name":"voronoioo2","username":"akin","description":"random effects on voronoi","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","toy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat len(vec2 a , vec2 b)\n{\n    vec2 c = abs(a-b);\n    return sqrt(pow(c.x, 2.0) + pow(c.y, 2.0));\n}\n\nvec2 getNormal(float v, float power)\n{\n    return vec2(dFdx(v), dFdy(v)) * power;\n}\n\n// https://iquilezles.org/articles/smoothvoronoi\nfloat smoothVoronoi( in vec2 x )\n{\n    ivec2 p = ivec2( x );\n    vec2  f = fract( x );\n\n    float res = 0.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        ivec2 b = ivec2( i, j );\n        vec2  r = vec2( b ) - f + rand( vec2(p + b) );\n        float d = dot( r, r );\n\n        res += 1.0/pow( d, 8.0 );\n    }\n    return pow( 1.0/res, 1.0/16.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    vec2 mid = vec2(0.0, 0.0);\n    \n    float cSpeed = 4.0;\n    vec2 uvb = uv + vec2(sin(iTime * cSpeed), cos(iTime * cSpeed)) * 0.1;\n    float val = smoothVoronoi(uvb * 4.0 + 500.0) * 2.0;\n    vec2 distort = getNormal(val, 10.0);\n    \n    uv = uv + (distort * sin(iTime));\n    \n    vec3 fufu;\n    fufu.r = smoothVoronoi(uv * 10.0 + 1000.0);\n    fufu.g = smoothVoronoi(uv * 11.0 + 1000.0);\n    fufu.b = smoothVoronoi(uv * 12.0 + 1000.0);\n    \n    fragColor = vec4(fufu, 1.0);\n}","name":"Image","description":"","type":"image"}]}