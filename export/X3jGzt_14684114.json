{"ver":"0.1","info":{"id":"X3jGzt","date":"1708728155","viewed":41,"name":"tpp1 rendu 019","username":"babaa","description":"le tp","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"4XSGzG","parentname":"tpp1"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n//plan\n\n//p: point\n//dir:normal\n//dist: taille du plan\n\n\nfloat Plan(vec3 p, vec3 dir, float dist)\n{\n//retourne la distance signée du point par rapport au plan, avec un produit scalaire entre le point donnée et la normal dir est une constante ;\n\nreturn dot(p,dir) + dist;\n\n}\n\n\n//boite\n\n//point: point\n//dim: dimension de la boite\n\n\nfloat boite(vec3 point, vec3 dim) {\n   vec3 dist = abs(point) - dim; //distance du point a la boite \n    return length(max(dist, 0.0))+ min(max(dist.x, max(dist.y, dist.z)), 0.0);\n}\n\n//po: position de l'anneau\n//c:centre\n//R: grand rayon \n//r: petit rayon\n// p: point de l'espace\n\nfloat tore(vec3 po, float R, float r, vec3 po2) {\n    vec2 dist1 = vec2(length(po2.xy - po.xy) - R, po2.z - po.z);\n    return length(dist1) - r;\n}\n\n\n//po: position point\n//c: centre du cylindre\n//ray: rayon\n//h:hauteur\n\nfloat cylindre ( vec3 po, vec3 c, float ray, float h)\n{\n\n vec2 dist1 = vec2(length(po.xy - c.xy) - ray , abs(po.z - c.z) -h);\n\nreturn max(dist1.x, dist1.y);\n\n}\n//notes: le vec centre guide le cylindre; h auteur et r rayon ou epaisseur ?\n\n//\n//faire capsule\n\nfloat capsule(vec3 p, vec3 pe, vec3 pp, float r)\n{\n  vec3 a= p-pe; //dif entre le point et le point eloigné\n  vec3 b= pe-pp; //dif entre le point et le point proche\n   float h= clamp(dot(a,b)/dot(b,b) ,0.0 , 1.0); \n    float v= length(a - b*h)-r; //calcul de la distance signé\n    \n    \n   return v;\n   \n  \n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\n\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n\n\n\n//Intersection:\n\nfloat opIntersection ( float a, float b ) {\n     return  max (a,b);\n     }\n\n//\n\n//difference:\n// a coder \n//voir mieux a quoi servent ces fonctions\n\nfloat dif( float a, float b ) {\n     return  max (-a,b); \n     }\n\n// Potential field of the object\n// point : point du point\n\nvec3 poo=vec3(1.0, -0.5, -2.0); \n\nfloat object(vec3 p) {\n\n    float c = cylindre(p, vec3(5.50, 0.0, 0.0),0.5, 0.75); //cylindre 1\n    float c2 = cylindre(p, vec3(5.50, 0.0, 1.0), 0.5, 0.75); // cylindre 2\nfloat c3 = cylindre(p, vec3(5.50, 0.0, 1.0), 0.5, 0.75); // cylindre 3\n    // Définition du tore\n    float t = tore(p, 0.75, 0.5, vec3(5.65, 0.0, 2.0)); // Tore au-dessus des cy\n    float tt =tore(p, 0.75, 0.5, vec3(5.65, 0.0, -0.99));\n\n    // Opération d'union pour combiner les formes\n    float res = Union(Union(Union(Union(c, c2), c3),t), tt); // Union des deux capsules et du tore\n\n\n//escalier de 3boites \n\n \n\n   // dime marche escalier\nvec3 dim = vec3(6.0, 1.0, 0.99);\n\n    // Calcul distance à chaque marches\nfloat a = boite(p - vec3(1.0, 2.5, 1.0), vec3(0.8, 0.8, 0.8));\nfloat b = boite(p - vec3(2.0, 2.5, 0.2), vec3(0.8, 0.8, 0.8));\nfloat x = boite(p - vec3(0.15, 2.5, 1.58), vec3(0.8, 0.8, 0.8));\n\n\n//plan\n\nfloat pp = Plan(p, vec3 (0.5,1.0,4.0), 5.0);\n    // appel union\n    float d =Union(pp, Union(res,Union(Union(a, b),x)));\n\n    return d;\n\n\n\n\n  \n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n\n","name":"Image","description":"","type":"image"}]}