{"ver":"0.1","info":{"id":"7tyfRR","date":"1663936513","viewed":88,"name":"fake perspective","username":"spontificus","description":"in defense of sharing unpolished code when the bugs are more interesting than the objective\n- what even is happening here","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["hexagonal","bugbeauty"],"hasliked":0,"parentid":"ftGfRR","parentname":"Hex Pattern Generator"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int point_i_size = 2;\n\n\nbool myInRange(int t, int v1, int v2) {\n    return (abs(t - v1) + abs(v2 - t) <= abs(v2 - v1));\n}\n\n// centered and anti-square\nivec3 screenToHex( vec2 p ) {\n    int j = int(iResolution.y-p.y)/2 - int(iResolution.y/4.);\n    int i = (int(p.x) - j )/2 - int(iResolution.x/4.);\n    return ivec3(i,j,-(i+j));\n}\n\n\n// squarerootless solution\nint hexDist(ivec3 p1, ivec3 p2) {\n    return (p2.x-p1.x)*(p2.x-p1.x) + (p2.y-p1.y)*(p2.y-p1.y) + (p2.x-p1.x)*(p2.y-p1.y);\n    //return int(sqrt(float((p2.x-p1.x)*(p2.x-p1.x) + (p2.y-p1.y)*(p2.y-p1.y) + (p2.x-p1.x)*(p2.y-p1.y))));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec3 fragHex = screenToHex(fragCoord.xy);\n    ivec3 mouseHex = screenToHex(iMouse.xy);  \n\n    vec4 col = vec4(.1,.1,.1,1.);\n   \n\n    if ( fragHex == mouseHex ) {\n        col = vec4(1., 1., 1., 1.);\n    }\n    \n    int pdist = hexDist(fragHex,mouseHex);\n    \n    \n    // center dot\n    if (fragHex.x == 0 && fragHex.y == 0) {\n        col = vec4(1., 1., 1., 1.);   \n    }\n    \n   \n    int rangeMin = -25;\n    int rangeMax = 25;\n    if (myInRange(pdist % fragHex.x,rangeMin,rangeMax)) {\n        col += vec4(1., 0., 0., 1.);   \n    }\n    \n       \n    if (myInRange(pdist % fragHex.y,rangeMin,rangeMax)) {\n        col += vec4(0., 1., 0., 1.);   \n    }\n    \n       \n    if (myInRange(pdist % (fragHex.z),rangeMin,rangeMax)) {\n   // if (pdist % mouseHex.x == 0 && pdist % mouseHex.y == 0) {\n       col += vec4(0., 0., 1., 1.);   \n    }\n    \n    fragColor = col;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}