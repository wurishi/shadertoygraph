{"ver":"0.1","info":{"id":"4csyRB","date":"1721254805","viewed":34,"name":"Sobel Quadtree Filter","username":"CollinInMySternum","description":"Make sure to change the filter to Mipmap when changing iChannel0 source.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["quadtree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Basic sobel filter implementation\n// Jeroen Baert - jeroen.baert@cs.kuleuven.be\n// \n// www.forceflow.be\n\n//https://www.shadertoy.com/view/Xdf3Rf\n\nfloat intensity(in vec4 color){\n\treturn length(color.rgb);\n}\n\nfloat sobel(float stepx, float stepy, vec2 center, float mip){\n\t// get samples around pixel\n    float tleft = intensity(textureLod(iChannel0,center + vec2(-stepx,stepy), mip));\n    float left = intensity(textureLod(iChannel0,center + vec2(-stepx,0), mip));\n    float bleft = intensity(textureLod(iChannel0,center + vec2(-stepx,-stepy), mip));\n    float top = intensity(textureLod(iChannel0,center + vec2(0,stepy), mip));\n    float bottom = intensity(textureLod(iChannel0,center + vec2(0,-stepy), mip));\n    float tright = intensity(textureLod(iChannel0,center + vec2(stepx,stepy), mip));\n    float right = intensity(textureLod(iChannel0,center + vec2(stepx,0), mip));\n    float bright = intensity(textureLod(iChannel0,center + vec2(stepx,-stepy), mip));\n \n    float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;\n    float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;\n    float color = sqrt((x*x) + (y*y));\n    return color;\n}\n\n//Where the fun begins :)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV = fragCoord / iResolution.xy;\n    float ScaleDiv = 1.;\n    float Mip = 0.;\n    \n    //I have absolutely no clue how to calculate the highest mip.\n    float xSize = iChannelResolution[0].x;\n    for(int i = 0; i < 15; i++)\n    {\n        if(xSize < 1.) break;\n        Mip = Mip + 1.;\n        xSize /= 2.;\n    }\n    vec2 quadCenter = (floor(UV * ScaleDiv) + 0.5) / ScaleDiv;\n    vec4 quadColor;\n    \n    for(int i = 0; i < 9; i++)\n    {\n        if(sqrt(sobel(1.0 /(xSize * ScaleDiv), 1.0 /(xSize * ScaleDiv), quadCenter, Mip - 1.)) < 0.5 && ScaleDiv > 32.) break;\n        \n        quadColor = texture(iChannel0, quadCenter);\n        ScaleDiv *= 2.0;\n        Mip--;\n        quadCenter = (floor(UV * ScaleDiv) + 0.5) / ScaleDiv;\n    }\n    \n    \n    //fragColor = 1.0 - vec4(Mip / 10.);\n    fragColor = quadColor;\n    //fragColor = vec4(sobel(1.0 /(iResolution.x), 1.0 /(iResolution.y), UV, 0.));\n}","name":"Image","description":"","type":"image"}]}