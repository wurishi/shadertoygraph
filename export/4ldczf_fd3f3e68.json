{"ver":"0.1","info":{"id":"4ldczf","date":"1533500373","viewed":141,"name":"Hmmm.. .","username":"Veggiebob","description":"Just a weird thing I played around with (adding to SDF instead of subtracting)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sdf","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON pow(10., -4.)\n#define LIGHT vec3(0., 0., 5.)\nvec3 tex (vec3 p, sampler2D t){\n    vec3 t1 = texture(t, p.xy).rgb/3.;\n    t1+=texture(t, p.xz).rgb/3.;\n    t1+=texture(t, p.yz).rgb/3.;\n    return t1;\n}\nfloat align (float diff, float dim){\n    if(diff>=dim){\n        return diff-dim;\n    } else {\n        return 0.;\n    }\n}\nfloat box3D (vec3 boxPos, vec3 boxSize, vec3 pos){\n    float n = align(abs(pos.x-boxPos.x), boxSize.x)+align(abs(pos.y-boxPos.y), boxSize.y);\n    n+=align(abs(pos.z-boxPos.z), boxSize.z);//just to keep the lines short\n    return n;\n}\nfloat sphere (vec3 pos, float radius, vec3 p){\n    return length(p-pos)-radius;\n}\nvec2 rotate2D (vec2 p, float angle){\n    float a = atan(p.y, p.x)+angle;\n    float m = length(p);\n    return vec2(cos(a)*m, sin(a)*m);\n}\nvec4 SDF (vec3 p){\n    vec3 matCol = vec3(-1.);\n    float total = box3D(vec3(0.), vec3(0.1), p);\n    total = min(sphere(LIGHT, 0.2, p), total);\n    total+=tex(vec3(rotate2D(p.xy, iTime), p.z), iChannel1).r*0.01;\n    return vec4(total, matCol);\n}\nvec4 trace (vec3 o, vec3 r) {\n    float t = 0.;\n    vec3 p = o;\n    for(int i = 0; i<64; i++){\n        p = o+r*t;\n        float d = SDF(p).x;\n        t+=d*0.5;\n    }\n    return vec4(p, t);\n}\n//Credit to Jamie Wong http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#surface-normals-and-lighting\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        SDF(vec3(p.x + EPSILON, p.y, p.z)).x - SDF(vec3(p.x - EPSILON, p.y, p.z)).x,\n        SDF(vec3(p.x, p.y + EPSILON, p.z)).x - SDF(vec3(p.x, p.y - EPSILON, p.z)).x,\n        SDF(vec3(p.x, p.y, p.z  + EPSILON)).x - SDF(vec3(p.x, p.y, p.z - EPSILON)).x\n    ));\n}\n\n//made this one myself with some tutorials I found out there on the \nfloat diffuseLight (vec3 n, vec3 r){\n    return max(dot(n, -r), 0.);\n}\nfloat specularLight (vec3 n, vec3 r){\n    vec3 nr = reflect(r, n);\n    float d = dot(nr, -r);\n    return pow(max(dot(nr, -r), 0.), 8.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //setup coordinates\n    vec2 mouse = iMouse.xy/iResolution.xy - vec2(0.5, 0.);\n    if(iMouse.xy == vec2(0.))mouse = vec2(0.5, 0.2);\n    mouse.x*=5.;\n    mouse.y*=2.;\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    //setup camera + rays\n    float angle = mouse.x;\n    float fov = 0.5;\n    float camDist = 1.;\n    vec3 camera = vec3(cos(mouse.x)*camDist, 0., sin(mouse.x)*camDist);\n    vec3 ray = vec3(-cos(mouse.x+uv.x*fov)*2., uv.y, -sin(mouse.x+uv.x*fov)*2.);\n    ray = normalize(ray);\n    mouse.y-=0.5;\n    mouse.y*=-2.5;\n    camera = vec3(rotate2D(camera.xy, mouse.y), camera.z);\n    ray = vec3(rotate2D(ray.xy, mouse.y), ray.z);\n    \n    vec4 v = trace(camera, ray);\n    vec3 norm = v.xyz;\n    vec3 normal = estimateNormal(v.xyz);\n    // Time varying pixel color\n    vec3 col = texture(iChannel2, norm.xz).rgb;\n    vec3 slightReflection = texture(iChannel0, reflect(ray, normal)).rgb;\n    col+=slightReflection*0.5;\n    col+=specularLight(normal, ray)*0.8;\n    col+=diffuseLight(normal, ray)*0.1;\n    float fog = 1./(1.+pow(v.w*2., 2.)*0.01);//distance shading\n\tvec3 back = texture(iChannel0, ray).rgb;\n    col = (1.-fog)*back+max(fog*col, 0.);\n    \n    \n    //flare??\n    vec3 flare = normalize(LIGHT-camera);\n    col+=pow(max(dot(flare, ray), 0.), 16.)*texture(iChannel2, uv).r;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}