{"ver":"0.1","info":{"id":"tl3cD2","date":"1609919256","viewed":176,"name":"pink zoom spiral âš™","username":"HaleyHalcyon","description":"not spaz but real trippy","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hypnotic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979;\nconst vec3 colA = vec3(1.0, 0.7, 0.9);\nconst vec3 colB = vec3(1.0, 0.5, 0.6);\n\n// xor-ish behavior for floats\nfloat flXor(float x, float y) {\n    return x + y - 2. * (x * y);\n}\n\n// folds 0>1>2>3>4... to 0>1<0>1<0...\nfloat fold(float x) {\n    return abs(1. - mod(x, 2.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scales pixel coordinates, so that\n    // the center is distance 0 and\n    // diagonals are distance 1\n    vec2 uvR = 2. * fragCoord - iResolution.xy;\n    vec2 uv = uvR / length(iResolution.xy);\n\n    float lenSq = log(length(uv));\n    float lenAdd = -0.2;\n    // logx/dx = 1/x\n    float blur = 6.0 / max(0.1, length(uvR));\n    float angle = atan(uv.y, uv.x) / PI;\n    \n    float timeScale = iTime * PI * 0.125;\n    \n    float spiral1 = smoothstep(0.5 - blur, 0.5 + blur, fold(\n         (lenSq + lenAdd) * (0.8 + 0.5 * cos(timeScale))\n       + angle * 2.\n       - iTime\n    ));\n       \n    float spiral2 = smoothstep(0.5 - blur, 0.5 + blur, fold(\n         (lenSq + lenAdd) * (1.0 + 0.5 * sin(timeScale))\n       - angle * 3.\n       - iTime\n    ));\n\n    // Time varying pixel color\n    vec3 col = mix(colA, colB, vec3(flXor(spiral1, spiral2)));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}