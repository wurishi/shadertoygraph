{"ver":"0.1","info":{"id":"Mc2cW1","date":"1722280764","viewed":33,"name":"Espiral de colorinchis","username":"miriam_ms","description":"espiral","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 resolution = iResolution.xy;\n    \n    // Normalizamos entre -1 y 1\n    vec2 uv = fragCoord / resolution;\n    uv = uv * 2.0 - 1.0;\n    \n    // Ajuste para la relaci√≥n de aspecto\n    uv.x *= resolution.x / resolution.y;\n    \n    // Coordenadas cartesianas a polares\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    \n    // Crear un efecto visual basado en la distancia a la espiral\n    float spiralEffect = sin(7.0 * (r - theta) + iTime) + 1.0;\n    spiralEffect = step(0.5, spiralEffect);\n    float s = 1000.0 * sin(uv.x * 3.0 + iTime);\n    \n    // Mapear el efecto a un color\n    vec3 col = 0.5 + 0.5 * cos(iTime + vec3(spiralEffect) + vec3(0, 2, 4));\n    vec3 color = vec3(spiralEffect) * col;\n    \n    // Definir el color para la parte negra (por ejemplo, el inverso del color calculado)\n    vec3 alternateColor =  (0.5 + 0.5 * cos(iTime + vec3(spiralEffect) + vec3(0, 2, 4)))-0.35;\n    \n    // Mezclar el color basado en el valor de spiralEffect\n    color = mix(alternateColor, color, spiralEffect);\n    \n    // Oscurecer cerca del origen\n    float distanceToCenter = length(uv)*0.7;\n    float darknessFactor = smoothstep(0.0, 1.0, distanceToCenter);\n    color *= darknessFactor+0.1;\n    \n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}