{"ver":"0.1","info":{"id":"lcdSW4","date":"1713976270","viewed":86,"name":"SOVIET UNION","username":"sergiorugani","description":"An unbreakable union of free republics,\nThe Great Rus' has sealed forever.\nLong live, the creation by the people's will,\nThe united, mighty Soviet Union!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rotate","flag","remap","ussr","sdshapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Hammer(vec2 st) \n{\n      float angle = radians(-45.0);\n      vec2 rst = rotate(st - vec2(0.5, 0.5), angle) + vec2(0.5, 0.5);\n      vec2 recPos = vec2(0.52, 0.75);\n\n      float rect = smoothstep(0.000, 0.001, sdBox(rst - recPos, vec2(0.25, 0.1)));\n      float triangle = 1. - smoothstep(0.000, 0.001, sdTriangleIsosceles(rst - vec2(recPos.x + 0.25, recPos.y - 0.1), vec2(0.2, 0.28)));\n      float stick = smoothstep(\n          0.000, \n          0.001, \n          sdUnevenCapsule(rst - vec2(0.5, -0.07), vec2(0.0, 0.0), vec2(0.0, 0.75), 0.09, 0.06)\n      );\n      return min(max(rect, triangle), stick);\n}\n\nfloat Sickle(vec2 st)\n{\n      float angle = radians(225.0);\n      vec2 rst = rotate(st - vec2(0.5, 0.45), angle) + vec2(0.5, 0.5);\n      rst.y *= 1.6;\n      float moon = smoothstep(0.0, 0.0001, sdMoon(rst - vec2(0.66, 0.72), 0.13, 0.59, 0.555));\n      \n      float angle2 = radians(45.0);\n      vec2 rst2 = rotate(st - vec2(0.58, 0.45), angle2) + vec2(0.5, 0.5); \n      float rect = 1.0 - smoothstep(0.000, 0.001, sdBox(rst2 - vec2(0.2, 0.2), vec2(0.2, 0.2)));   \n      \n      float angle3 = radians(0.0);\n      vec2 rst3 = rotate(st - vec2(0.58, 0.45), angle3) + vec2(0.5, 0.5);\n      float vesica1 = smoothstep(0.0, 0.001, sdVesicaSegment(rst3 - vec2(-0.02, 0.1), vec2(0.0, 0.0), vec2(0.12, 0.12), 0.04) - 0.03);\n      float vesica2 = smoothstep(0.0, 0.001, sdVesicaSegment(rst3 - vec2(0.12, 0.23), vec2(0.0, 0.0), vec2(0.06, 0.07), 0.015) - 0.03);\n         \n      float angle4 = radians(45.0);\n      vec2 rst4 = rotate(st - vec2(0.58, 0.14), angle4) + vec2(0.5, 0.5); \n      float rect2 =  smoothstep(0.000, 0.001, sdBox(rst4 - vec2(0.2, 0.2), vec2(0.04, 0.08))); \n      \n      return min(max(step(0.6, moon), rect), min(min(vesica1, vesica2), rect2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= aspectRatio;\n\n    vec3 col = SOVIET_RED;\n    \n    vec2 starUv = Remap(uv, 0.825, 0.280, 0.936, 0.390);\n    if (starUv.x > 0.0 && starUv.x < 1.0 && starUv.y > 0.0 && starUv.y < 1.0\n    ) {\n        col = mix(\n            SOVIET_YELLOW, \n            col,\n            smoothstep(0.015, 0.016, sdStar5(starUv - vec2(0.5), 0.5, 0.38))\n        );\n    }\n    \n    vec2 st = Remap(uv, 0.56, 0.21, 0.814, 0.462);\n    if (st.x > 0.0 && st.x < 1.0 && st.y > 0.0 && st.y < 1.0\n    ) {\n        col = mix(SOVIET_YELLOW, col, min(Hammer(st), Sickle(st)));\n    }\n    \n    // Add highlights and shadows\n    float t = uv.x * 4. - 3.5 * iTime + uv.y * 5.;\n    col += sin(t * 1.) * 0.15;                           \n    col *= 0.9 + cos(t * 0.9) * 0.10;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SOVIET_RED vec3(205, 0, 0) / 255.\n#define SOVIET_YELLOW vec3(255, 215, 0) / 255.\nfloat cro(in vec2 a, in vec2 b ) \n{ \n    return a.x*b.y - a.y*b.x; \n}\n\nvec2 rotate(vec2 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(p.x * c - p.y * s, p.x * s + p.y * c);\n}\n\nvec2 Remap(vec2 p, float b, float l, float t, float r)\n{\n    return vec2((p.x - l) / (r - l), (p.y - b) / (t - b));\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r);\n    return length(p-ba*h);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdUnevenCapsule( in vec2 p, in vec2 pa, in vec2 pb, in float ra, in float rb )\n{\n    p  -= pa;\n    pb -= pa;\n    float h = dot(pb,pb);\n    vec2  q = vec2( dot(p,vec2(pb.y,-pb.x)), dot(p,pb) )/h;\n    \n    \n    q.x = abs(q.x);\n    \n    float b = ra-rb;\n    vec2  c = vec2(sqrt(h-b*b),b);\n    \n    float k = cro(c,q);\n    float m = dot(c,q);\n    float n = dot(q,q);\n    \n         if( k < 0.0 ) return sqrt(h*(n            )) - ra;\n    else if( k > c.x ) return sqrt(h*(n+1.0-2.0*q.y)) - rb;\n                       return m                       - ra;\n}\n\nfloat sdMoon(vec2 p, float d, float ra, float rb )\n{\n    p.y = abs(p.y);\n\n    float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n    float b = sqrt(max(ra*ra-a*a,0.0));\n    if( d*(p.x*b-p.y*a) > d*d*max(b-p.y,0.0) )\n    {\n        return length(p-vec2(a,b));\n    }\n\n    return max( (length(p          )-ra),\n               -(length(p-vec2(d,0))-rb));\n}\n\nfloat sdVesicaSegment( in vec2 p, in vec2 a, in vec2 b, float w )\n{\n    // shape constants\n    float r = 0.5*length(b-a);\n    float d = 0.5*(r*r-w*w)/w;\n    \n    // center, orient and mirror\n    vec2 v = (b-a)/r;\n    vec2 c = (b+a)*0.5;\n    vec2 q = 0.5*abs(mat2(v.y,v.x,-v.x,v.y)*(p-c));\n    \n    // feature selection (vertex or body)\n    vec3 h = (r*q.x < d*(q.y-r)) ? vec3(0.0,r,0.0) : vec3(-d,0.0,d+w);\n \n    // distance\n    return length(q-h.xy) - h.z;\n}","name":"Common","description":"","type":"common"}]}