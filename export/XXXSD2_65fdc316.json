{"ver":"0.1","info":{"id":"XXXSD2","date":"1728579155","viewed":41,"name":"Mandelbrot Set 030624 part 4","username":"kukovisuals","description":"mal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float calculateMandelbrotSet(vec2 complexPoint, out float waveEffect, float iTime) {\n    const float escapeRadius = 256.0;\n    float iterationCount = 0.0;\n    vec2 z = vec2(0.0);\n    waveEffect = 1.0; // Initialize wave effect\n\n    for (int i = 0; i < 512; i++) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + complexPoint;\n        if(dot(z, z) > (escapeRadius * escapeRadius)) break;\n        iterationCount += 1.0;\n\n        // Introduce a more subtle wave effect to create fragmented edges\n        float waveFactor = sin(0.7 * (z.x + z.y) + iTime * 0.08) * cos(7.2 * (z.x - z.y) + iTime * 0.1);\n        waveEffect = min(waveEffect, abs(waveFactor));\n    }\n\n    // Apply exponential scaling to enhance visibility and create more distinct gaps\n    waveEffect = 1.0 - exp(-200.0 * waveEffect);\n\n    if(iterationCount > 511.0) return 0.0;\n\n    // Smooth iteration count\n    float smoothIterationCount = iterationCount - log2(log2(dot(z,z))) + 4.0;\n\n    return smoothIterationCount;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 normalizedCoords = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    float zoomFactor = 0.0001 + 0.0099 * (0.5 + 0.5 * sin(iTime * 0.005));\n     // Center of the zoom\n    vec2 zoomCenter = vec2(-0.742, 0.186);\n\n    // Adjust coordinates based on the zoom factor\n    vec2 adjustedCoords = (normalizedCoords - zoomCenter) * zoomFactor + zoomCenter;\n\n    // Rotation effect\n    float angle = iTime * 0.05; // Adjust for a subtle rotation\n    mat2 rotMat = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\n    // Apply rotation around the zoom center\n    vec2 rotatedCoords = rotMat * (adjustedCoords - zoomCenter) + zoomCenter;\n    \n    float waveEffect;\n    float iteration = calculateMandelbrotSet(rotatedCoords, waveEffect, iTime);\n\n    // Base color of the Mandelbrot set\n    vec3 color = vec3(0.0, 0.0, 0.0);\n\n    // Use the wave effect to create gaps in the edge visibility\n    vec3 edgeColor = vec3(0.5, 0.5, 0.5); // Color for the edges\n    color += edgeColor * clamp(waveEffect, 0.0, 1.0); // Apply wave effect based color\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}