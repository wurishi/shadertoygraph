{"ver":"0.1","info":{"id":"Ddsyzl","date":"1687120588","viewed":68,"name":"Diamond of wonder ","username":"SUBAUX","description":"Watched a tutorial and then messed with the code a bit","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["diamond","moving","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p) {\n   float d = sdBox(p, vec3(1));\n   \n   float c = cos(PI/5.), s= sqrt(0.75-c*c);\n   vec3 n = vec3(-0.5, -c, s);\n   \n   p = abs(p);\n   p -= 2.*min(0., dot(p, n))*n;\n   \n   p.xy = abs(p.xy+cos(iTime/cos(p.xy/PI)));\n   p -= 2.*min(0., dot(p, n))*n;\n   \n   p.xy = abs(p.xy/iTime);\n   p -= 2.*min(0., dot(p, n))*n;\n   \n   d = p.z-1.;\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float side) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p)*side;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.01, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), \n            GetDist(p-e.yxy),\n            GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3)*1.;\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n   \n    vec3 col = texture(iChannel0, rd).rgb;\n   \n    float d = RayMarch(ro, rd, 1.); // outside of object\n\n    float IOR = 2.4;//index of refraction\n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d; // 3d hit position\n        vec3 n = GetNormal(p); // normal of surface.. oriantaion\n        vec3 r = reflect(rd, n);\n        vec3 refOutside = texture(iChannel0, r).rgb;\n        \n        vec3 rdIn = refract(rd, n, 1./IOR); // ray entering\n        \n        vec3 pEnter = p - n*SURF_DIST*3.; \n        float dIn = RayMarch(pEnter, rdIn, -1.);// inside object\n        \n        vec3 pExit = pEnter + rdIn * dIn; // 3d position exit\n        vec3 nExit = GetNormal(pExit); \n        \n        vec3 reflTex = vec3(0.);\n        \n        vec3 rdOut = vec3(0.);\n        \n        float abb = .01;\n        //red\n        rdOut = refract(rdIn, nExit, IOR-abb);\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit); \n        reflTex.r = texture(iChannel0, rdOut).r;\n       \n       //green\n          rdOut = refract(rdIn, nExit, IOR);\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit); \n        reflTex.g = texture(iChannel0, rdOut).g;\n      \n       //blue\n         rdOut = refract(rdIn, nExit, IOR+abb);\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit); \n        reflTex.b = texture(iChannel0, rdOut).b;\n       \n       float dens = .2;\n       float optDist = exp(-dIn*dens);\n        \n         reflTex = reflTex*optDist;\n         \n         float fresnel = pow(1. + dot(rd, n), 5.);\n         \n         col = mix(reflTex, refOutside, fresnel) ;\n       // col = n*.5+.5;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}