{"ver":"0.1","info":{"id":"Ms33RM","date":"1448553673","viewed":275,"name":"Example of sprite manipulations","username":"prozacgod","description":"I'm still noobing it up a bit, but here's my take on creating sprites, we first map the uv to sprite location then map a uv coordinate system for that over a function to generate color data for that uv, scaled and combined in the output.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["numbers","sprites","examples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float simpleBitmap(float data, float w, float h, vec2 bitCoord) {\n    // 0..1.0\n    float x = floor(bitCoord.x / (1.0 / w));\n    float y = floor(bitCoord.y / (1.0 / h));\n     \n    float i = y * w + x;\n    \n    float datum = float(data) / pow(2.0, i);\n\n    datum = mod(datum, 2.0);\n        \n    return floor(datum);\n}\n\nfloat digitBitmaps(const in int x) {\n\treturn x==0?961198.0:x==1?279620.0:x==2?953902.0:x==3?953998.0:x==4?700040.0:x==5?929422.0:x==6?929454.0:x==7?952456.0:x==8?962222.0:x==9?962184.0:0.0;\n}\n\n// resolves sprite texture data for entire uv space\nvec3 resolveSpriteUV(const in int x, vec2 uv) {\n    if (x < 10) {\n        return simpleBitmap(digitBitmaps(x), 4.0, 5.0, uv) == 1.0 ? vec3(1.0, 1.0, 1.0) : vec3(-1.0, -1.0, -1.0);\n    }\n    return vec3(0.0, 0.0, 0.0);\n}\n\nvec3 resolveScaledSprite(vec2 pos, vec2 size, vec2 uv, float rotz, int sprite) {\n    vec2 tl = pos - (size/2.0);\n    vec2 br = tl + size;\n    \n    vec2 uvr = uv - tl - (size/2.0);\n   \tuvr = vec2(\n        cos(rotz) * uvr.x - sin(rotz) * uvr.y,\n        sin(rotz) * uvr.x + cos(rotz) * uvr.y\n\t);\n    uvr += tl+size/2.0;\n    \n    // if this uv coordinate is within the sprites projected uv coordinates\n    if ((uvr.x >= tl.x) && (uvr.y >= tl.y) && (uvr.x < br.x) && (uvr.y < br.y)) {\n        vec2 sprite_uv = (uvr - tl) / size;\n        return resolveSpriteUV(sprite, sprite_uv);\n    }\n    return vec3(-1.0, -1.0, -1.0);\n}\n\nvec3 spriteMix(vec3 a, vec3 b) {\n    if (b.x == -1.0) {\n        return a;\n    }\n    return b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    float t = iTime;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    int i = int(floor(mod(t, 10.0)));\n\n    //fragColor = vec4(simpleBitmap(digitBitmaps(i), 4.0, 5.0, uv), 0.0, 0.0, 0.0);\n    vec3 color = vec3(0.2, 0.2, 0.15);\n    \n    color = spriteMix(color, resolveScaledSprite(vec2(-0.5, 0), vec2(0.5, 0.5), uv, mod(t, 6.0), 0));\n    color = spriteMix(color, resolveScaledSprite(vec2(0.5, 0), vec2(0.5, 0.5), uv, mod(t, 6.0), 1));\n    \n    fragColor = vec4(color, 1.0);\n    \n    //fragColor = vec4(uv.x, 0.0, 0.0, 0.0);\n}","name":"","description":"","type":"image"}]}