{"ver":"0.1","info":{"id":"ldy3zK","date":"1455306854","viewed":4969,"name":"Gravitational waves","username":"tomkh","description":"Gravitational waves with two black holes and Kali stars :]\nWait approx. 16 second for collapse.","likes":120,"published":1,"flags":32,"usePreview":0,"tags":["ripples","water","blackhole","gravitationalwaves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// A gravitational wave effect by Tom@2016\n//\n\n//==================================================\n// Stars texture from Kali\n// https://www.shadertoy.com/view/XlfGRj\n#define iterations 15\n#define formuparam 0.53\n#define volsteps 13\n#define stepsize 0.1\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n#define brightness 0.005\n#define darkmatter 0.300\n#define distfading 0.800\n#define saturation 0.850\nvec3 kali_stars(vec3 from, vec3 dir)\n{\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n    return mix(vec3(length(v)),v,saturation)*.01;\n}\n//==================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy;\n    if (iMouse.z > 0.) {\n        float zoom_in = min(1.,200./iResolution.y);\n        coord = (coord - iMouse.xy)*zoom_in + iMouse.xy; // zoom-in with mouse\n    }\n    vec2 q = coord/iResolution.xy;\n    vec2 uv = vec2(q.x,q.y*iResolution.y/iResolution.x);\n    \n    vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n    float p10 = texture(iChannel0, q-e.zy).x;\n    float p01 = texture(iChannel0, q-e.xz).x;\n    float p21 = texture(iChannel0, q+e.xz).x;\n    float p12 = texture(iChannel0, q+e.zy).x;\n    \n    // Totally fake displacement and shading:\n    vec3 grad = normalize(vec3(p21 - p01, p12 - p10, 1.));\n    float t = iTime + 30.;\n    vec3 from = vec3(1.+t*.002,.5+t*.001,0.5);\n    vec4 c = vec4(kali_stars(from, vec3(uv*zoom, 1.) + grad*.15), 1.);\n    vec3 light = normalize(vec3(.2,-.5,.7));\n    float diffuse = dot(grad,light);\n    float spec = pow(max(0.,-reflect(light,grad).z),32.);\n    vec4 color = mix(c,vec4(.2,.6,1.,1.),.15)*.7 + pow(diffuse*.5+.5,16.)*.3 + spec*.5;\n    //*max(diffuse,0.) + spec;\n    \n    // Black holing\n    // Simulate gravity waves\n    float scale = 64.; //iResolution.y*.1;\n    float dist = cos(t*.03);\n    float phase = t * .7 / (dist+.001);\n    vec2 center = iResolution.xy*.5;\n    vec2 dpos = vec2(cos(phase),sin(phase))*scale*dist;\n    float d = smoothstep(.7*scale,.5,length(center + dpos*.7 - coord));\n    d += smoothstep(.5*scale,.5,length(center - dpos*1.4 - coord)); // one black hole is smaller\n    color *= max(0.,1.-d*4.);\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//\n// A gravitational wave effect by Tom@2016\n//\n// The water propagation is based on my previous shader:\n// https://www.shadertoy.com/view/Xsd3DB\n//\n// Originally based on: http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\n// A very old Hugo Elias water tutorial :)\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float d = 0.;\n    vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec4 c = texture(iChannel0, q);\n\t// Boundary conditions\n    bool boundary = false;\n    vec2 dir = vec2(0.);\n    if (fragCoord.y < 1.) { dir.y = 1.; boundary = true; }\n    if (fragCoord.y > iResolution.y-1.) { dir.y = -1.; boundary = true; }\n    if (fragCoord.x < 1.) { dir.x = 1.; boundary = true; }\n    if (fragCoord.x > iResolution.x-1.) { dir.x = -1.; boundary = true; }\n    if (iFrame>2 && boundary) {\n        d = texture(iChannel0, q+e.xy*dir).x;\n        fragColor = vec4(d, c.x, 0, 0);\n        return;\n    }\n\n\tfloat p11 = c.y;\n\n\tfloat p10 = texture(iChannel0, q-e.zy).x;\n\tfloat p01 = texture(iChannel0, q-e.xz).x;\n\tfloat p21 = texture(iChannel0, q+e.xz).x;\n\tfloat p12 = texture(iChannel0, q+e.zy).x;\n\n\t// Simulate gravity waves\n\tfloat t = iTime + 30.;\n\tfloat scale = 64.; //iResolution.y*.1;\n\tfloat dist = cos(t*.03);\n\tfloat phase = t * .7 / (dist+.001);\n\tvec2 center = iResolution.xy*.5;\n\tvec2 dpos = vec2(cos(phase),sin(phase))*scale*dist;\n\td = smoothstep(.7*scale,.5,length(center + dpos*.7 - fragCoord.xy));\n\td += smoothstep(.5*scale,.5,length(center - dpos*1.4 - fragCoord.xy)); // one black hole is smaller\n\n\t// The actual propagation:\n\td += -(p11-.5)*2. + (p10 + p01 + p21 + p12 - 2.);\n\td *= .99; // dampening\n\td *= float(iFrame>=2); // clear the buffer at iFrame < 2\n\td = d*.5 + .5;\n\n\t// Put previous state as \"y\":\n\tfragColor = vec4(d, c.x, 0, 0);\n}","name":"Buf A","description":"","type":"buffer"}]}