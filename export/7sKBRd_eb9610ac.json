{"ver":"0.1","info":{"id":"7sKBRd","date":"1658760999","viewed":89,"name":"Numerical integration","username":"Envy24","description":"Source: J.O.Bird \"Engineering Mathematics\"","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rectangle","numerical","simpson","trapezoid","intergation"],"hasliked":0,"parentid":"7dVfD1","parentname":"Plotter template_"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      (  8.0 / R.y  )\n#define SM(x)                     ( smoothstep(UNIT, 0., x) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define PI                          3.1415926535897932\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n\nfloat y_axis(vec2 NDC) { return SM(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SM(abs(NDC.y)); }\nfloat draw_func(vec2 NDC, float f, float dfdx)\n{\n    float df   = NDC.y - f;\n    return SM(abs(df) / sqrt(1.0 + dfdx * dfdx));\n}\n\n//#define func(x)  ( (x)*(x) ) \n//#define deriv(x) ( 2.*(x) )\n\n#define func(x)  ( abs(x) )\n#define deriv(x) ( (x)/abs(x) )\n\n/*\n    [a, b] - closed interval,\n    n - number of subintervals.\n*/\nfloat integrate_trapezoid(float a, float b, float n)\n{\n    float dx = (b-a)/n, sum = 0.5*(func(a) + func(b));   \n    \n    for (float i = 1.0; i < n; i+=1.) { sum += func(a + i * dx); }   \n    \n    return sum * dx;\n}\nfloat integrate_rectangle(float a, float b, float n)\n{\n    float dx = (b-a)/n, sum = 0.0; \n    \n    //for (float i = 0.0; i < n; i += 1.) { sum += func(a + i * dx); }\n    //for (float i = 1.0; i <= n; i += 1.) { sum += func(a + i * dx); }\n    for (float i = 0.0; i <= n; i += 1.) { sum += func(a + (i - 0.5) * dx); }   \n    \n    return sum * dx;\n}\n/* this one called Simpson 1/3 */\nfloat integrate_Simpson(float a, float b, float n)\n{\n    float dx = (b-a)/n, odd_sum = 0.0, even_sum = 0.0;\n    \n    for (float i = 2.0; i < n; i += 2.)\n    {\n        odd_sum += func(a + i * dx);\n        even_sum += func(a + (i - 1.) * dx);\n    }\n    even_sum += func(a + (n - 1.) * dx);\n    \n    return (dx*(func(a) + func(b) + 4.*even_sum+2.*odd_sum))*0.33333333;\n}\n\n//#define RULE integrate_trapezoid\n//#define RULE integrate_rectangle\n#define RULE integrate_Simpson\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n#define GSCALE 3.0\n#define YSCALE 1.0\n#define OFFSET vec2(0., 0.5)\n\n    vec2 NDC = \n        LMB_IS_HOLD ?\n            GSCALE*(TO_CENTERED_NDC(SC-(iMouse.xy-R.xy*0.5))+OFFSET) :\n            GSCALE*(TO_CENTERED_NDC(SC)+OFFSET);\n\n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n         color.rb -= draw_func(NDC, YSCALE*func(NDC.x), YSCALE*deriv(NDC.x));\n         \n         /* \"All\" values of definite integral */\n         float n = 32.0, a = 0.,  b = NDC.x,\n               y = RULE(a, b, n), yn = RULE(a, b+1./n, n);\n         color.gb -= draw_func(NDC, YSCALE*y, YSCALE*((yn-y)/(1./n)));\n    \n    /* One value of definite integral */\n    a= 0., b=sinOSC(-1.5, 1.5, iTime);\n    float dx = (b-a)/n, radius = UNIT;\n    for (float i = 0.; i <= n; i+=1.)\n    {\n        float x = a+i * dx, y = YSCALE*func(x);\n        color = mix(color, vec3(1, 0, 1), SM(diskSDF_L2(NDC, vec2(x, y), radius)));\n        color = mix(color, vec3(1, 0, 1), SM(segmentSDF_L2(NDC, vec2(x, 0.), vec2(x, y))));\n        color = mix(color, vec3(1, 0, 1), SM(diskSDF_L2(NDC, vec2(x, 0.), radius)));\n    }\n    color = mix(color, vec3(0, 0, 1), SM(diskSDF_L2(NDC, vec2(b, YSCALE*RULE(a, b, n)), radius*1.2)));\n    /**/\n        \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return length(C - NDC)-R;\n}\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0));\n}","name":"Common","description":"","type":"common"}]}