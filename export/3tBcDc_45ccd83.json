{"ver":"0.1","info":{"id":"3tBcDc","date":"1595501705","viewed":170,"name":"[CG-UTokai] Shader Practice","username":"hkubo1983","description":"renderObjects関数の213行目以降にあるtodoを完成させて，拡散反射，鏡面反射の性質と実装を理解しましょう．\nなお，289行目をtrueにするとカメラが回転するようになります．\n\nstep0: 手始めにcol変数の値を適当に，例えば(1, 0, 0)に変更してみましょう．\nvec3の各要素は(Red,Green,Blue)を表しているのでvec(1, 0, 0)は赤を意味します．\nそのためモデルが真っ赤になったのがわかります．","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shaderpractice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2018 Hiroyuki Kubo\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n    \n\n// Reference: https://iquilezles.org/articles/distfunctions\n\n\n#define AA 1   // make this 1 is your machine is too slow\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n#if 1\n    // distance bound\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n#else\n    // correct distance\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;\n#endif\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n//------------------------------------------------------------------\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\n//------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    \n    float r = 0.25;\n    vec2 res = opU( vec2( sdPlane(pos), 1.0 ),\n\t                vec2( sdSphere(pos-vec3( 0.0, r, 0.0), r),\n                         21.0 ) );\n\n\tres = opU( res, vec2( sdTorus( pos-vec3( -1.0, 0.25, 0.0), vec2(0.20, 0.10) ), 22.0 ) );\n    res = opU( res, vec2( sdCone(pos-vec3( 1.0, 0.50, 0.0), vec3(0.8,0.6,0.3) ), 23.0 ) );\n\n\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n   \n#if 1\n    // bounding volume\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0004*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\nvec3 renderFloor(in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 ref = reflect( rd, nor );\n        \n    // material        \n    col = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\n            \n    float f = checkersGradBox( 5.0*pos.xz );\n    col = 0.3 + f*vec3(0.1);\n\n\n    // lighitng        \n    float occ = calcAO( pos, nor );\n    vec3  lig = normalize( vec3(-0.4, 0.9, 0.0) );\n    vec3  hal = normalize( lig-rd );\n    float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n    float dom = smoothstep( -0.1, 0.1, ref.y );\n    float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n    dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n    dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n    float spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n        dif *\n        (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n    vec3 lin = vec3(0.0);\n\n    vec3 kd = vec3(1, 0, 0);\n    lin += 1.30*dif*vec3(1.00,0.80,0.55);\n    lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n    col = col*lin;\n\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nvec3 renderObjects(in vec3 ro, in vec3 rd )\n{\n    vec2 res = castRay(ro, rd);\n    float t = res.x;\n\tfloat m = res.y;\n    vec3 pos = ro + t*rd;\n    \n    \n    vec3 n = calcNormal( pos ); /* 法線ベクトル */\n    vec3 wo = -rd; /* 視線方向ベクトル */    \n    vec3 wi = normalize( vec3(-0.4, 0.9, 0.0) ); /* 入射方向ベクトル（光源位置） */    \n    vec3 li = vec3(1.0, 1.0, 1.0);\n        \n    vec3 col = vec3(0, 0, 0);\n    \n    /* ここでピクセルの色を決めてcolに代入する． */\n    /* step 1 拡散反射（Lambertモデル）の実装 */\n    vec3 kd = vec3(0.01, 0.2, 0.95); /* 拡散反射係数 */\n    /* Lambertのモデル */\n    //col = ...（ここにLambertのモデルを実装）．．．; \n\n\n    /* step 2 鏡面反射（Phongモデル）の実装 */\n    vec3 ks = li; /* 鏡面反射係数 */\n    float ns = 32.0;  /* shininess */\n    vec3 wr = 2.0*dot(wi, n)*n - wi; /* 正反射方向 */\n    /* Phongのモデル */\n    //col = ...（ここにPhongのモデルを実装）．．．; \n    \n    \n    /* おまけ ToonShader の実装 */\n    /* step1の拡散反射成分は同時に使わない．*/\n    //float d = dot(n, wi);\n    //．．．（ここにToonShaderを実装）．．．; \n\n    \n    return col;\n   \n}\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        if( m<1.5 ) col = renderFloor(ro, rd);\n        else col = renderObjects(ro, rd);\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera\t        \n        vec3 ro = vec3( 0, 1.5, 1.5 );\n        \n        /* TODO:カメラの回転の有効/無効の切り替え */\n        bool cameraRotOn = false;\n        \n        if(cameraRotOn) ro = vec3( 1.5*sin(0.1*iTime), 1.5, 1.5*cos(0.1*iTime));\n        \n        \n        vec3 ta = vec3( 0, 0, 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}