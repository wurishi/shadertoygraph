{"ver":"0.1","info":{"id":"dlVGDK","date":"1684716590","viewed":88,"name":"Value noise practice - linear","username":"huttarl","description":"Practicing implementation of different kinds of noise.\nThis one is value noise, with a linear ramp (lerp / mix) between lattice points.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 seed = vec2(0.593, 9.928);\nconst float res = 10.0;\n\nfloat hash(vec2 uv) {\n  return fract(sin(dot(seed + uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord*res/iResolution.y + iTime;\n    vec2 lattice = floor(uv);\n    uv = fract(uv);\n    float h00 = hash(lattice);\n    float h01 = hash(lattice + vec2(0.0, 1.0));\n    float h10 = hash(lattice + vec2(1.0, 0.0));\n    float h11 = hash(lattice + vec2(1.0, 1.0));\n    \n    // Linear ramp:\n    vec3 col = vec3(mix(\n        mix(h00, h10, uv.x),\n        mix(h01, h11, uv.x),\n        uv.y));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}