{"ver":"0.1","info":{"id":"4l3GzB","date":"1469814651","viewed":132,"name":"fug","username":"irah","description":"lel","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["byramids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define E 0.45\n\nvec3 ray(vec3 origo, vec3 focus, vec2 uv, float zoom) {\n\tvec3 w = normalize(focus - origo);\n    vec3 v = normalize(vec3(0.0, 1.0, 0.0));\n    vec3 u = cross(w, v);\n    return normalize(mat3(u, v, w) * vec3(uv.x, uv.y, zoom));\n}\n\nfloat pyramid(vec3 p, float h) {\n\tvec3 q = abs(p);\n    return max(-p.y, (q.x + 1. * q.y + q.z - h));\n}\n\nfloat pyramids(vec3 p) {\n    float py1 = pyramid(p + vec3( 2.0, 0.0, -1.0), 3.0);\n    float py2 = pyramid(p + vec3( 0.0, 0.0, -2.0), 2.0);\n    float py3 = pyramid(p + vec3(-3.0, 0.0, -3.0), 2.5);\n\treturn min(min(py1, py2),py3);\n}\n\nvec3 normal(vec3 p) {\n    float o = min(p.y, pyramids(p));\n    return normalize(vec3(.5-o, o, o));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 cs = vec2(2.3+sin(iTime)*0.3,0);\n\n    vec3 origo = 8.0 * vec3(3.0 * cs.x-2., 0.1, 1.0 * cs.y);    \n    vec2 uv = 2.0 * (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 p = origo;\n\tvec3 r = ray(origo, vec3(1.5), uv, 1.0 * 0.5 * cs.y + 10.0);\n       \n    vec3 color = vec3(0.1, 1.-fragCoord.y*0.005, 0.9-fragCoord.y*0.002);\n    \n    for (int i = 0; i < 500; i++) {\n        float d = scene(p);\n        \n        if (d < E) {             \n            color = 0.7 * normal(p) * vec3(0.5+fragCoord.y*0.01,0.3+fragCoord.y*0.2,0);\n            break;\n        }\n        \n        p += E * max(2. * E, d)*r;\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}