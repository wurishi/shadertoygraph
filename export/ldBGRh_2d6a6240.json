{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n//------------------ ------------------------------------------\n// complex number operations\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 csqr( vec2 a ) { return vec2(a.x*a.x-a.y*a.y, 2.0*a.x*a.y ); }\nvec2 csqrt( vec2 z ) { float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) ); }\nvec2 conj( vec2 z ) { return vec2(z.x,-z.y); }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\nvec2 cexp( vec2 z) {  return exp( z.x )*vec2( cos(z.y), sin(z.y) ); }\nvec2 clog( vec2 z) {  return vec2( 0.5*log(z.x*z.x+z.y*z.y), atan(z.y,z.x)); }\nvec2 csin( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*sin(z.x),(r-1.0/r)*cos(z.x));}\nvec2 ccos( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*cos(z.x),-(r-1.0/r)*sin(z.x));}\n//------------------------------------------------------------\n\nvec2 z0;\nvec2 c;\nfloat zoom= 1.0;\n\n\n\n\nvec2 f( vec2 x ){return csin(x) + z0 + c ;}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat range =10.0*zoom;\t\n    vec2 q = (fragCoord.xy-iMouse.xy) / iResolution.xy;\n    vec2 p = -0.5*range + range * q+vec2(2.0,2.0);\n    p.y *= iResolution.y/iResolution.x;\n\t\n\t\n    c = vec2( 0.0, 0.4 ) + \n        0.35*vec2( sin(0.21*iTime), cos(0.27*iTime) ) + \n\t0.05*vec2( sin(1.17*iTime), cos(1.31*iTime) );\n\n    // iterate\t\t\n\t\n    vec2 z = p;\n    z0=p;\n    float g = 1e10;\n    float k=100.0;\n    vec2 z1;\n\t\n        \n    for(int i=0; i<100; i++ )\n\t{\n        vec2 prevz=z;\n       \n\n        // function\t\t\n\tz = f( z );\n\t\t\n\tg = min( g, dot(z-1.0,z-1.0) );\n        // bailout\n        z1 = z-prevz;\t\t\n        if( dot(z1,z1)<0.00001 ){\n            k = dot(z1,z1)/0.00001;\n            z = k*z+(1.0-k)*prevz;\n            k= k+float(i);\n            break;\n        }\n        if( dot(z1,z1)>10000.0 ){\n            k = 10000.0/(dot(z1,z1));\n            z = k*z+(1.0-k)*prevz;\n            k= k+float(i);\n            break;\n            } \n\t\t\n\t}\n\t\n\tfloat it = 1.0-k/100.0;\n\t\n\t//scale down version\n\tvec3 col = 0.4+ 0.6*sin(vec3(-0.5,-0.2,0.8)+2.3+log(g));\n\t\n\t\n\t//original version : problems with Chrome\n    //vec3 col = 0.2+0.2*sin(vec3(z.y,z.y,0.0)+3.0)+ 0.6*sin(vec3(-0.5,-0.2,0.8)+2.3+log(g));\n    \n\t//Halloween version : problems with Chrome\n    //vec3 col = 0.2+0.2*sin(vec3(0.0,z.x,z.x)+3.0)+ 0.6*sin(vec3(-0.5,-0.2,0.8)+2.3+log(g));\n    \n\t\n\t//col = col*it;\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldBGRh","date":"1383406912","viewed":243,"name":"Sine Mandelbrot set","username":"guil","description":"Mandelbrot set of sin(x).\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""}}