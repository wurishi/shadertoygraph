{"ver":"0.1","info":{"id":"NlsGzs","date":"1622649678","viewed":94,"name":"equilateral triangle #7","username":"zonu","description":"For study.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["study"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 画面の中心\n    vec2 center = iResolution.xy * 0.5;\n    \n    // ピクセルの座標\n    vec2 pixel = fragCoord.xy;\n    \n    // 正三角形の高さ\n    float height = 0.7 * iResolution.y;\n    \n    // √3\n    float sqrt3 = sqrt(3.0);\n    \n    // 一辺の長さ\n    float edgeLen = height * (2.0 / sqrt3);\n    \n    // 正三角形の底辺の中点\n    vec2 bottomMidpt = center - vec2(0.0, height / 2.0);\n    \n    // bottomMidptを原点としたピクセル座標\n    vec2 diff = pixel - bottomMidpt;\n    \n    //  正三角形の各辺の内側か判定\n    float insideA = step(diff.x + diff.y / sqrt3, edgeLen / 2.0);\n    float insideB = step(-diff.x + diff.y / sqrt3, edgeLen / 2.0);\n    float insideC = step(bottomMidpt.y, pixel.y);\n    \n    //  正三角形内かを判定\n    float inside = insideA * insideB * insideC;\n    \n    // ピクセルの色を設定\n    fragColor = vec4(inside, inside, inside, 1.0);\n}","name":"Image","description":"","type":"image"}]}