{"ver":"0.1","info":{"id":"lcXyRN","date":"1720845066","viewed":66,"name":"Fast Starfield","username":"NAME_REDACTED","description":"Demonstration of flying through a starfield that instead of tracking many stars, only uses a handful of texelFetches. Uses very little resources and could make a nice background. Ok and then I went ahead and made it into a Winamp vis.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["fast","starfield","unlimited"],"hasliked":0,"parentid":"43VSDc","parentname":"Simple Starbox"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThe big disappointment I have with this one is the background stars\nhave to move at the same speed as the foreground layers, otherwise\nthe trick just doesn't work. So instead of moving through a starfield,\nit's more like we're moving through a cloud of dust.\n\nThe other downside is because of the texelfetches the field keeps repeating.\nCould probably set a random per-layer offset to fix that.\n\nStill looks pretty cool though.\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nAdapted from https://www.shadertoy.com/view/43VSDc. I figured there had to be\na way to make a moving starfield out of it.\n*/\n\n\n//fast function to convert chroma (0..1) to a star-like color\nvec3 starColorFromChroma(float chroma)\n{\n    return vec3(1. - chroma + pow(chroma, 4.), .5, chroma);\n}\n\n//same stars but with color\n//rg is the star position, a is brightness, b is chroma\nvec3 starLayer(vec2 uv, float fade, float layer)\n{\n    vec2 uvm = uv * (512. / layer); //initial cell size, furthest layer\n    float sm = fade; //initial layer brightness\n    float ex = -5. * layer * 1.75; //inverse sharpness\n    ivec2 cell = ivec2(uvm);\n    vec4 samp = texelFetch(iChannel0, abs(cell % 256), 0);\n    vec2 offs = samp.rg - .5;\n    vec2 cp = fract(uvm) - .5;\n    float star = length(cp - offs * .95); //star image\n    float br = samp.a + .1; //per-star brightness\n    //a little trick to reduce the amout of color in more distant stars\n    float chroma = .6 + (samp.b - .5) * sm * .2;\n    vec3 color = starColorFromChroma(chroma);\n    vec3 result = color * exp(ex * star) * sm * br;\n    return result;\n}\n\n//each additional layer of stars draws bigger, closer stars\n#define STAR_LAYERS 6\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //last layer\n    vec4 last = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy-.5;\n    uv.x *= iResolution.x/iResolution.y;\n    float spd = texture(iChannel2, vec2(0.)).r * .33;\n    float zoom = iTime * SPEED + abs(spd);\n    float fzoom = fract(zoom);\n    //colored stars\n     vec3 result = vec3(0.);\n    for (int i = STAR_LAYERS; i > 0; i--)\n    {\n        vec2 luv = uv / pow(2., float(i - 2) + fzoom);\n        float fade = fract(zoom) + float(i - 1) + .01;\n        vec3 col = starLayer(luv, fade, pow(2.,float(i)+fzoom));\n        result = col + result;\n    }\n \n    // Output to screen\n    fragColor = last * .9 + vec4(result,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SPEED 2.0","name":"Common","description":"","type":"common"}]}