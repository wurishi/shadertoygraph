{"ver":"0.1","info":{"id":"ftSSz1","date":"1627025076","viewed":178,"name":"Simple Rain Drop","username":"Yon","description":"Drow simple drop into a RT, and sample it with bilinear sample. I don't know how to sample a buffer with bilinear here,so try to sample its mips;","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raindrop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getHeight(vec2 uv) {\n    float warpUV;\n    warpUV = texture(iChannel1,uv).x;\n    \n    float drop;\n    drop = texture(iChannel0,uv+ warpUV*0.005,2.0).x;\n  return drop;\n}\n\nvec4 bumpFromDepth(vec2 uv, vec2 resolution, float scale) {\n  vec2 step = 1. / resolution;\n    \n  float height = getHeight(uv);\n    \n  vec2 dxy = height - vec2(\n      getHeight(uv + vec2(step.x, 0.)), \n      getHeight(uv + vec2(0., step.y))\n  );\n    \n  return vec4(normalize(vec3(dxy * scale / step, 1.)), height);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec4 nor = vec4(bumpFromDepth(uv*2.0, iResolution.xy, .1).rgb, 1.);\nfragColor = texture(iChannel2,uv+nor.xy*0.01);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float DropLayer(float rand, float speed, float fadeSpeed, float count) {\n    float Layer = 0.;\n    Layer = rand + iTime * speed;\n    Layer = pow(abs(fract(Layer)), fadeSpeed);\n    Layer *= count;\n    Layer = 1. - Layer;\n    Layer = clamp(Layer,0.,1.);\n    return Layer;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*vec2(1.,iResolution.y/iResolution.x);\n    \n    float rand;\n    rand = texture(iChannel0,uv).x;\n    \n    vec3 col = vec3(DropLayer(rand,0.05,0.7,5.));\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}