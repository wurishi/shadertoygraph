{"ver":"0.1","info":{"id":"4sjczG","date":"1492602863","viewed":128,"name":"GRAPROG Finals","username":"lyradss","description":"Vin Diesel dieded","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tags"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PATTERN 6\n\n// 1 - SANDSTORM\n// 2 - CRIME SCENE\n// 3 - FLOW\n// 4 - TARTAN-LIKE HANDKERCHIEF\n// 5 - BROKEN LED\n// 6 - WALL\n// 7 - SANDPAPER\n// 8 - TOWEL\n\nvec3 colorTO = vec3(1.000, 0.498, 0.313);\nvec3 colorLO = vec3(1.000, 0.271, 0.000);\nvec3 colorN = vec3(0.400, 0.200, 0.000);\nvec3 colorOrig = vec3(0.390, 0.265, 0.192);\nvec3 colorLW = vec3 (0.902, 0.749, 0.514);\nvec3 colorB1 = vec3(0.000, 0.000, 0.400);\nvec3 colorR1 = vec3(0.820, 0.031, 0.114);\nvec3 colorO = vec3(1.000,0.549,0.000);\nvec3 colorY = vec3(1.000,1.000,0.000);\nvec3 colorB = vec3(0.000,0.000,1.000);\nvec3 colorLB = vec3(0.000,0.749,1.000);\nvec3 colorG = vec3(0.000, 1.000, 0.000);\nvec3 colorR = vec3(1.000, 0.000, 0.000);\nvec3 colorS = vec3(0.647, 0.949, 0.952);\nvec3 colorW = vec3(1.000, 1.000, 1.000);\nvec3 colorP = vec3(1.000, 0.078, 0.576);\nvec3 colorA = vec3(0.831, 0.404, 0.098);\nvec3 colorT = vec3(0.929, 0.847, 0.733);\nvec3 colorS1 = vec3(0.860, 0.860, 0.574);\nvec3 colorBL = vec3(0.000, 0.000, 0.000);\nvec3 colorV = vec3(0.949, 0.769, 0.353);\nvec3 colorGR = vec3(0.341, 0.298, 0.235);\nvec3 colorG2 = vec3(0.502, 0.431, 0.275);\nvec3 colorB2 = vec3(0.396, 0.396, 0.506);\nvec3 colorBR = vec3(0.364, 0.298, 0.196);\nvec3 colorP1 = vec3(0.980, 0.926, 0.647);\nvec3 colorP2 = vec3(0.823, 0.682, 0.094);\nvec3 colorB3 = vec3(0.233, 0.233, 0.700);\nvec3 colorS2 = vec3(0.858, 0.820, 0.706);\n\nfloat rand(vec2 uv)\n{\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\nfloat random (in vec2 uv) {\n    return fract(sin(dot(uv.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 uv) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\n// Value noise\n\n\n// Gradient noise\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gnoise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    if (PATTERN == 1){\n        \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv * 1.;\n    vec3 value = colorT;\n      \n    value -= (noise(uv.y*vec2(30., 14.*iTime*2.)-noise(uv*vec2(100., 64.))) * .06);\n    vec3 colorVariation = vec3(fbm((uv)* 1.)) * 1.46;\n    float a = snoise(uv*vec2(cos(12222.15), sin(12222.15)));\n    colorVariation += snoise(uv*vec2(cos(a), sin(a)));\n    \n    vec3 stains = vec3(fbm((uv*12.) * 1.)) * .46;\n    value = mix(value, colorV - colorW, (1. - (smoothstep(.55, .15, stains) - smoothstep(.42, .44, stains))));\n    \n    \n\tfragColor = vec4(value,1.0);\n    }\n    \n    if (PATTERN == 2){\n        \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv * 1.;\n    vec3 value = colorGR;\n\n    float plankMask = 1.;\n    plankMask = abs(smoothstep(.22, .23, sin (uv.x*23.)+1.225));\n    plankMask *= abs(smoothstep(.22, .23, sin (uv.y*23.)+1.22));\n  \tfragColor = vec4(vec3(plankMask), 1.0);\n    value *= plankMask;\n    \n    \n    value -= (noise(uv.x*vec2(5000., 14.)+noise(uv*vec2(100000., 64.))) * .03);\n   \n    vec3 stains = vec3(fbm((uv*3.2) * 1.)) * .46;\n    value = mix(value, colorR - colorW, (1. - (smoothstep(.4, .2, stains) - smoothstep(.42, .44, stains))));\n    \n    \n\tfragColor = vec4(value,1.0);\n    }\n    \n    if (PATTERN == 3){\n        \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec3 color = colorB;\n    float zoom = 3.;\n    float scale = 1.;\n    float offset = snoise(uv*zoom+iTime)*scale;\n\t\n    float value = step(.5 + offset , uv.x) - step (.52+offset, uv.x);\n\n    value *= rand(uv*iTime);\n    \n    color = value + colorLB;\n\n    \n    fragColor = vec4(color, 1.0);\n    }\n    \n    if (PATTERN == 4){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv * 1.;\n    vec3 value = colorR;\n    \n    \n    value = mix(value, colorG, .8*vec3(fbm(uv.yy*43.)));\n    \n    value -= (noise(uv.x*vec2(5000., 14.)-noise(uv.x*vec2(1000., 64.))) * .05);\n    value -= vec3((snoise(uv.x*vec2(600., 3. )) - snoise(uv.y*vec2(300., 1.))) * .1);\n    \n\tfragColor = vec4(value,1.0);\n    }\n    \n    if (PATTERN == 5){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv * 1.;\n    vec3 value = colorG;\n    \n   \n    value = mix(value, colorY, 1.*vec3(fbm(uv.yy*6.)));\n\n            \n    value -= (noise(uv.x*vec2(500000., 12.*iTime/2.)-snoise(uv.x*vec2(100., 34.))) * 0.1*iTime*4.);\n    \n\tfragColor = vec4(value,1.0);\n    }\n    \n    if (PATTERN == 6){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv * 1.;\n    vec3 value = colorB3;\n    \n   \n    float plankMask = .3;\n   \t\n    value *= plankMask;\n    \n    value = mix(value, colorGR, 3.*vec3(fbm(uv.yy*.6)));\n        \n    value -= (noise(uv*vec2(90., 14.)-noise(uv*vec2(500., 64.))) * .06);\n    \n\tfragColor = vec4(value,1.0);\n    }\n    \n    if (PATTERN == 7 ){\n        \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv * 1.;\n    vec3 value = colorTO;\n    \n    value = mix(value, colorBL, .8*vec3(fbm(uv*500.)));\n  \n\tfragColor = vec4(value,1.0);\n    }\n    \n    if (PATTERN == 8){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv * 1.;\n    vec3 value = colorS2;\n          \n    value -= (noise(uv*vec2(900., 14.)-noise(uv*vec2(500., 64.))) * .05);\n    value -= vec3((snoise(uv*vec2(22., 2. )) - snoise(uv*vec2(13., 1.))) * .06);    \n      \n\tfragColor = vec4(value,1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}