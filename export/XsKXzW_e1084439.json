{"ver":"0.1","info":{"id":"XsKXzW","date":"1463220493","viewed":252,"name":"Diffused Reflectance","username":"MrPicuro","description":"Something I made for a class assignment\nReferences used for help:\n1. https://www.raywenderlich.com/70208/opengl-es-pixel-shaders-tutorial (this helped me A LOT)\n2. http://weworkweplay.com/play/introduction-to-glsl-and-fragment-pixel-shaders/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["phong","lighting","sphere","scroll","diffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Use the mouse to drag the texture of the circle\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec2 uv;  \t\t\t\t\t\t\t\t\t//texture space coordinates\n    \n    vec2 center = iResolution.xy/2.0;\t\t\t//defining circle at center of screen\n    \n    float radius = iResolution.x/6.0;\t\t\t//size of the circle \n    \n    vec2 pos = fragCoord.xy - center;\t\t\t//circle points offset from its center\n    \n    float z = (sqrt(radius*radius - pos.x*pos.x - pos.y*pos.y));  //calculating depth using sphere equation\n    \n    //z = z/radius;\n    \n    vec3 normal = normalize(vec3(pos.x,pos.y,z));\t\t//sphere normals\n    \n    vec3 light = normalize(vec3(1.0,0.5,2.3));  \t//defining the light source (change values to change direction of source)\n    \n    float diffuse = dot(normal,light); \t//calculating the diffused relfection component\n    \n    vec4 color;\n    \n    \n    //CREATING THE CIRCLE (more like coloring)\n    \n    if(length(pos) > radius)\n    {\n        uv = fragCoord.xy/ iResolution.xy;\n        \n        color = vec4(0,0,0,1);\n      \n       // color = texture(iChannel1,uv);\t\t\t//background texture\n        \n    }\n    else\n    {\n        uv = (fragCoord.xy+(-iMouse.xy))/ iResolution.xy; //USE THE MOUSE TO MOVE THE TEXTURE YOOOOOOO\n        \n        color = vec4(vec3(diffuse),1) * texture(iChannel0, vec2(uv.x, uv.y)/*+iTime*0.2*/); //REMOVE THIS COMMENT TO MAKE THE TEXTURE MOVE ITSELF\n       \n        //color = vec4(vec3(z),1) * texture(iChannel0,(uv));\n        \n    }\n    \n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}