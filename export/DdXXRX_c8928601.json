{"ver":"0.1","info":{"id":"DdXXRX","date":"1695668558","viewed":45,"name":"Polar Coordinates 2","username":"DigitalShadow","description":"Getting a better understanding of warping coordinate systems","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI2 6.28318530718\n\n\nmat2 rotationMatrix(float angle){\n    angle *= PI2;\n    float s = sin(angle), c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvec2 polar(vec2 uv, float zoom){\n    vec2 st = vec2(atan((uv.x)/zoom, uv.y/zoom), length(uv)/zoom);\n    return vec2(st.x / PI2, st.y - .5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //set coordinates from 0 <> 1 and account for aspect ratio\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    \n    //number of squares in grid\n    float numSquares=4.0;\n\n    //get rotation data\n    float angle = sin(iTime/5.)/2.;\n    mat2 rot = rotationMatrix(angle);\n   \n    //rotated copy of original image\n    vec2 uv1 = uv * rot;\n    \n    //polar coordinates\n    vec2 uv2 = polar(uv1, 1.0);\n    \n    //interpolated value\n    vec2 uv3 = mix(uv1, uv2, .5 + sin(iTime/2.)/2.);\n    \n    \n    //draw grid\n    vec3 col3 = vec3(mod(uv3.x,1./numSquares)*numSquares,mod(uv3.y,1./numSquares)*numSquares,(uv3.x+uv3.y)>0.);\n      \n    // Output to screen\n    fragColor = vec4(col3,1.0);\n}","name":"Image","description":"","type":"image"}]}