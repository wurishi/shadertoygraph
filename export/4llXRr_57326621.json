{"ver":"0.1","info":{"id":"4llXRr","date":"1434114670","viewed":442,"name":"sRGB corrected marble","username":"moshev","description":"Cloned from https://www.shadertoy.com/view/MtX3Ws#","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S. Guillitte 2015\n// see https://www.shadertoy.com/view/MtX3Ws#\n\nfloat zoom=1.;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nfloat map(in vec3 p) {\n\t\n\tfloat res = 0.;\n\t\n    vec3 c = p;\n\tfor (int i = 0; i < 17; ++i) {\n        p =.7*abs(p)/dot(p,p) -.7;\n        p.yz= csqr(p.yz);\n        p=p.zxy;\n        res += exp(-29. * abs(dot(p,c)));\n        \n\t}\n\treturn res/2.;\n}\n\n\n\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    float t = tminmax.x;\n    //float dt = .02;\n    float ct = cos(iTime*.25);\n    float dt = .2 - .195*(2.0 * ct * ct - 1.0);//animated\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<64; i++ )\n\t{\n        t+=dt*exp(-2.0*c);\n        if(t>tminmax.y)break;\n        vec3 pos = ro+t*rd;\n        \n        c = map(ro+t*rd);               \n        \n        col = .92*col+ .08*vec3(c*c, c, c*c*c);//green\t\n        //col = .92*col+ .08*vec3(c*c*c, c*c, c);//blue\n    }    \n    return col;\n}\n\n\nvec3 srgb_from_rgb(vec3 rgb) {\n    vec3 a = vec3(0.055, 0.055, 0.055);\n    vec3 ap1 = vec3(1.0, 1.0, 1.0) + a;\n    vec3 g = vec3(2.4, 2.4, 2.4);\n    vec3 ginv = 1.0 / g;\n    vec3 select = step(vec3(0.0031308, 0.0031308, 0.0031308), rgb);\n    vec3 lo = rgb * 12.92;\n    vec3 hi = ap1 * pow(rgb, ginv) - a;\n    return mix(lo, hi, select);\n}\n\nvec3 rgb_from_srgb(vec3 srgb) {\n    vec3 a = vec3(0.055, 0.055, 0.055);\n    vec3 ap1 = vec3(1.0, 1.0, 1.0) + a;\n    vec3 g = vec3(2.4, 2.4, 2.4);\n\tvec3 select = step(vec3(0.04045, 0.04045, 0.04045), srgb);\n    vec3 lo = srgb / 12.92;\n    vec3 hi = pow((srgb + a) / ap1, g);\n    return mix(lo, hi, select);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\n    vec3 ro = zoom*vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,2.) );\n    //tmm = vec2(0.0, 10.0);\n\n\t// raymarch\n    vec3 col = raymarch(ro,rd,tmm);\n    if (tmm.x<0.)col = rgb_from_srgb(texture(iChannel0, rd).rgb);\n    else {\n        vec3 nor=(ro+tmm.x*rd)/2.;\n        nor = reflect(rd, nor);        \n        float fre = pow(clamp(dot(nor,rd),0.0,1.0), 2. );\n        col = mix(col, rgb_from_srgb(texture(iChannel0, nor).rgb),\n                  smoothstep(0.0, 1.0, fre));\n    \n    }\n\t\n\t// shade\n    \n    col =  .5 *(log(1.+col));\n    col = clamp(col,0.,1.);\n    fragColor = vec4( srgb_from_rgb(col), 1.0 );\n\n}\n","name":"","description":"","type":"image"}]}