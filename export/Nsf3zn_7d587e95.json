{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define pi 3.14159265359\n\n\nmat2 get_rotation_matirx(float rot) {\n    return mat2(\n        cos(rot), -sin(rot), \n        sin(rot), cos(rot)\n    );\n}\n\nvec2 rotate_uv(vec2 uv, mat2 rotation, float zoom) {\n    uv -= 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    uv = rotation * uv;\n    \n    uv *= 1. - zoom;\n    \n    uv.x = uv.x / iResolution.x * iResolution.y;\n    uv += 0.5;\n    uv = abs(uv);\n    uv = step(1., uv) * 2. + sign(1.-uv) * uv;\n    return uv;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.);\n    \n    const float ITER = 12.;\n    for (float i=0.; i < ITER; ++i)\n    {\n        mat2 rot_mat = get_rotation_matirx(i*2.*pi/ITER);\n        vec2 rot_uv = rotate_uv(uv, rot_mat, 0.);\n        col = max(texture(iChannel0, rot_uv).rgb, col);\n    }\n    // col /= ITER;\n    \n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":true,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Nsf3zn","date":"1734012623","viewed":26,"name":"Bzbz.No.2","username":"avartation","description":"zxcv","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["sdfg"],"hasliked":0,"parentid":"","parentname":""}}