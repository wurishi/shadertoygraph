{"ver":"0.1","info":{"id":"mttXRM","date":"1685202666","viewed":175,"name":"2D starfield","username":"fantazista","description":"Inspired by:\nhttps://www.shadertoy.com/view/4llfzj\n\nAnd by the Art of Code and his awesome tutorial:\nhttps://www.youtube.com/watch?v=rvDo9LvfoVE\n\nGet in touch:\nhttps://www.linkedin.com/in/pavelsoldatov/\nhttps://github.com/pavsoldatov","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["galaxy","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float palette( in float a, in float b, in float c, in float d, in float x ) {\n    return a + b * cos(6.28318 * (c * x + d));\n}\n\nfloat Star(vec2 uv) {\n    float distaceToCenter = length(uv);\n    float circle = 0.065 / distaceToCenter; // control the star size, e.g. 0.002\n    circle = clamp(circle, 0.03, 5.0); // avoid flickering in tiny stars\n    circle *= smoothstep(1.0, 0.2, distaceToCenter); // cut off the glow\n    return circle;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p * vec2(sin(3.44) * 0.132, 6.91201 * cos(1.305)));\n    p += dot(p, p + 5.32);\n    return fract(p.x * p.y);\n}\n\nvec3 StarLayer(vec2 uv) {\n    vec3 color = vec3(0.0);\n    \n    vec2 gv = fract(uv.xy); // grid uv\n    \n    // a value to identify each box\n    vec2 id = floor(uv.xy) - 0.5;\n    \n    vec3 pal; // change the blue star color; achieved my color of choice randomly\n    pal.r = palette(1.5, -1.081592653589793, 0.798407346410207, 0.0, 1.0);\n    pal.g = palette(0.6, 0.658407346410207, 0.908407346410207, 0.268407346410207, 1.0); // prev - 0.5\n    pal.b = palette(0.3, -0.201592653589793, 0.318407346410207, -0.001592653589793, 1.0); // prev - 0.25\n    \n    float brightness = 3.6; // apparently, lower gives more monochrome (pale) color; reference value is 3.7\n\n    // yellowish stars\n    // pal.r = palette(1.3, -1.081592653589793, 0.798407346410207, 0.0, 1.0);\n    // pal.g = palette(0.5, 0.658407346410207, 0.908407346410207, 0.268407346410207, 1.0);\n    // pal.b = palette(0.25, -0.201592653589793, 0.318407346410207, -0.001592653589793, 1.0);\n\n    // float brightness = 3.7;\n    // starColor = starColor * vec3(0.8, 0.8, 1.0);\n    \n    // Iterate through the 3x3 neighborhood of each box\n    for (int y = -1; y <= 1; y++) {\n      for (int x = -1; x <= 1; x++) {\n        vec2 contribution = vec2(x, y);\n      \n        float num = Hash21(id + contribution); // random between 0 and 1\n        vec2 offset = vec2(num, fract(num * 34.610961)); // offset on x and y; middle is the origin\n    \n        float star = Star(gv - contribution - offset);\n        float size = fract(num * 345.32 * 0.111345);\n\n        vec3 starColor = sin(pal * fract(num * 2.2) * brightness) * 0.5 + 0.5;\n        \n        starColor = starColor * vec3(0.8, 0.8, 1.0);\n        star *= sin(iTime * 1.2 + num  * 6.2831) * 0.5 + 1.0;\n\n        color += star * size * starColor;\n      }\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    uv = uv * 42.0; // (maybe) update clamp in Star after changing uv if small stars start to twinkle too frequently\n    \n    vec3 color = vec3(0);\n    uv.y += iTime * 1.0;\n    color += StarLayer(uv);   \n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}