{"ver":"0.1","info":{"id":"Ndc3DH","date":"1629653648","viewed":424,"name":"Fork: [TWITCH] The mess I am ","username":"Danguafer","description":"Original author: Flopine\nOriginal shader: https://www.shadertoy.com/view/stfSW7\nOriginal description:\nA piece made live on Twitch, with some help from BigWings :) \nYou can watch all my streams here: https://www.twitch.tv/flopine","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["2d","chromaticaberration","pattern","live","twitch"],"hasliked":0,"parentid":"stfSW7","parentname":"[TWITCH] The mess I am"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\nvec4 diffract (vec2 uv, float offset)\n{return texture(iChannel0,uv+offset);}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uu = fragCoord.xy/iResolution.xy;\n  fragColor = texture(iChannel0, uu);\n  \n  fragColor += vec4 (\n                      diffract(uu*0.98, 0.01).r,\n                      diffract(uu*0.98, 0.015).g,\n                      diffract(uu*0.98, 0.02).b,\n                      1.\n                    )*.7;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI acos(-1.)\n#define TAU 6.283185\n#define time iTime\n\n#define circle(u,s) (length(u)-s) \n#define square(u,s) ((max(abs(u.x),abs(u.y)))-s)\n#define hr vec2(1.,sqrt(3.))\n#define hexa(u,s) (max(abs(u.x), dot(abs(u),normalize(hr)))-s*mod(iTime, 4.0))\n\n#define ss(thre, value) smoothstep(thre,thre*1.2, value)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define hash11(x) fract(sin(x)*124.4)\n\nfloat frame(vec2 uv)\n{ \n  vec2 ga=mod(uv,hr)-hr*.5 , \n  gb=mod(uv-hr*.5,hr)-hr*.5, \n  guv=(dot(ga,ga)<dot(gb,gb))?ga:gb, \n  gid = uv-guv;\n  \n  float thicc = 0.04, size=.45;\n  float shapes = ss(thicc, abs(hexa(guv,size)));\n  for (int i=0; i<3; i++)\n  {\n    thicc -= 0.008; size -= 0.1; \n    shapes *= ss(thicc, abs(hexa(guv,size)));\n  }\n\n  float rep = TAU/2.;\n  float a = mod(atan(guv.x,guv.y),rep)-rep*.5;\n  guv = vec2(cos(a),sin(a))*length(guv);\n  float foreground = shapes+ss(0.02, abs(guv.x-.3));\n  guv *= rot(PI/6.*floor(length(gid+.1)));\n  foreground *= ss(0.03, abs(hexa(guv,.49)));\n  \n  return (1.-foreground);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n  vec2 uu = fragCoord.xy/iResolution.xy;\n\n  uv *= rot(time*.08);\n\n  for(float i=0.; i<1.; i+=1./3.)\n  {\n    float zplane = fract(time*.1+i);\n    float fadeinout = smoothstep(.5, .25, abs(zplane-.5));\n\n    float size = mix(4.,.01, zplane);\n    fragColor += vec4(frame(uv*size)*fadeinout);\n  }\n}","name":"Buffer A","description":"","type":"buffer"}]}