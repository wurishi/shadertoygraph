{"ver":"0.1","info":{"id":"cl3Sz4","date":"1685063226","viewed":80,"name":"Shadertoy Colors","username":"memdbp","description":"Colors from the shadertoy website. Probably missed a few. :octopusballoon:","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["palette","shadertoy","reference"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// shadertoy theme colors\nconst vec3 s[50] = vec3[](\n// mode independent colors\n    vec3(0.), // misc. light mode misc bold text\n    vec3(1.), // misc. search box, comment box, lt. mode editor bkg.\n    vec3(1,0.25,0.3), // patreon button\n    vec3(0.31), // header button hover background\n    vec3(1.,0.5,0.13), // header button hover\n    vec3(0.25), // shadertoy header\n    vec3(0.69,0.5,0.38), //editor hover buffer\n    vec3(0.94,0.14,0.18), // octopus emoji\n    vec3(0,0.38,0.87), // search box selected border, ceckbox\n    vec3(0.14,0.45,1), // checkbox hover\n    vec3(0,0.63,0), // profile screen public shader\n    vec3(0.63,0.5,0), // profile screen unlisted shader\n    vec3(0.63,0,0), // profile screen private shader\n    vec3(0,0.53,0), // shader inputs dropdown comment\n    vec3(0.47,0,0.53), // shader inputs dropdown types, light mode editor types\n    vec3(1,0.19,0.13), // compile error\n    vec3(0,0.75,0), // compile success\n    vec3(0,0,0.75), // save successful\n    vec3(0.5), // light mode editor unselected buffer & buttons, box borders, dark mode root screen text\n    vec3(0.6), // editor line count\n    \n// dark mode colors\n    vec3(0.4,0.4,0), // dark mode search highlight\n    vec3(0.4,0.53,0.6), // dark mode editor type\n    vec3(0.4,0.53,0.67), // dark mode editor function\n    vec3(0.47,0.6,0.27), // dark mode editor comment\n    vec3(0.6,0.4,0.53), // dark mode editor number\n    vec3(0.69,0.31,0.06), // dakr mode editor selected buffer\n    vec3(0.63,0.75,0.88), // dark mode button, export/delete button, profile name text\n    vec3(0.56,0.75,0.94), // dark mode profile name\n    vec3(0.7), // dark mode editor text\n    vec3(0.87), // dark mode editor line count separator\n    vec3(0.11), // dark mode avg from background texture\n    vec3(0.22), // dark mode footer, text box\n    vec3(0.54,0.49,0.28), // dark mode emoji face color\n    vec3(0.46,0.09,0.09), // dark mode heart emoji color\n    vec3(0.75), // dark mode root screen bold text\n    \n// light mode colors\n    vec3(1,1,0.6), // light mode search highlight\n    vec3(0.68), // light mode footer avg from background texture\n    vec3(0.94), // light mode editor top and bottom bar\n    vec3(0.97), // light mode editor line count background\n    vec3(0.88), // light mode text boxes\n    vec3(0.92,0.95,0.96), // light mode description box selected\n    vec3(0.69,0.8,0.85), // light mode descriptoin box selected border\n    vec3(0.97,0.69,0.19), // light mode editor selected buffer\n    vec3(0.07,0.4,0.27), // light mode editor numbers\n    vec3(0.67,0.33,0), // light mode editor comment\n    vec3(0.2,0,0.67), // light mode editor function\n    vec3(0.82), // light mode avg from background texture\n    vec3(0.88,0.84,0.62), // light mode emoji face color\n    vec3(0.8,0.44,0.44), // light mode heart emoji color\n    vec3(0.69) // light mode editor add new buffer button, text\n);\n    \n    \n// shadertoy theme colors sorted\nconst vec3 s2[50] = vec3[](\n    vec3(0.), // misc. light mode misc bold text\n    vec3(0.11), // dark mode avg from background texture\n    vec3(0.22), // dark mode footer, text box\n    vec3(0.25), // shadertoy header\n    vec3(0.31), // header button hover background\n    vec3(0.5), // light mode editor unselected buffer & buttons, box borders, dark mode root screen text\n    vec3(0.6), // editor line count\n    vec3(0.68), // light mode footer avg from background texture\n    vec3(0.69), // light mode editor add new buffer button, text\n    vec3(0.7), // dark mode editor text\n    vec3(0.75), // dark mode root screen bold text\n    vec3(0.82), // light mode avg from background texture\n    vec3(0.87), // dark mode editor line count separator\n    vec3(0.88), // light mode text boxes\n    vec3(0.94), // light mode editor top and bottom bar\n    vec3(0.97), // light mode editor line count background\n    vec3(1.), // misc. search box, comment box, lt. mode editor bkg.\n    vec3(0.46,0.09,0.09), // dark mode heart emoji color\n    vec3(0.69,0.5,0.38), //editor hover buffer\n    vec3(0.63,0,0), // profile screen private shader\n    vec3(0.8,0.44,0.44), // light mode heart emoji color \n    vec3(0.94,0.14,0.18), // octopus emoji\n    vec3(1,0.19,0.13), // compile error\n    vec3(1,0.25,0.3), // patreon button\n    vec3(1.,0.5,0.13), // header button hover\n    vec3(0.69,0.31,0.06), // dakr mode editor selected buffer\n    vec3(0.67,0.33,0), // light mode editor comment\n    vec3(0.63,0.5,0), // profile screen unlist4ed shader\n    vec3(0.97,0.69,0.19), // light mode editor selected buffer\n    vec3(1,1,0.6), // light mode search highlight\n    vec3(0.88,0.84,0.62), // light mode emoji face color\n    vec3(0.54,0.49,0.28), // dark mode emoji face color\n    vec3(0.4,0.4,0), // dark mode search highlight\n    vec3(0.07,0.4,0.27), // light mode editor numbers\n    vec3(0,0.53,0), // shader inputs dropdown comment\n    vec3(0,0.63,0), // profile screen public shader\n    vec3(0,0.75,0), // compile success\n    vec3(0.47,0.6,0.27), // dark mode editor comment\n    vec3(0.4,0.53,0.6), // dark mode editor type\n    vec3(0.4,0.53,0.67), // dark mode editor function\n    vec3(0.2,0,0.67), // light mode editor function\n    vec3(0,0,0.75), // save successful\n    vec3(0.69,0.8,0.85), // light mode descriptoin box selected border\n    vec3(0,0.38,0.87), // search box selected border, ceckbox\n    vec3(0.63,0.75,0.88), // dark mode button, export/delete button, profile name text\n    vec3(0.56,0.75,0.94), // dark mode profile name\n    vec3(0.92,0.95,0.96), // light mode description box selected\n    vec3(0.14,0.45,1), // checkbox hover\n    vec3(0.47,0,0.53), // shader inputs dropdown types, light mode editor types\n    vec3(0.6,0.4,0.53) // dark mode editor number\n);","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void vec4winsertionSort(inout vec4 array[s.length()]) {\n  for (int i = 1; i < s.length(); i++) {\n    vec4 key = array[i];\n    int j = i - 1;\n    // Shift elements greater than the key to the right\n    while (j >= 0 && array[j].w > key.w) {\n      array[j + 1] = array[j];\n      j = j - 1;\n    }\n    array[j + 1] = key;\n  }\n}\n\nvoid vec3xyzinsertionSort(inout vec3 array[s.length()]) {\n  for (int i = 1; i < s.length(); i++) {\n    vec3 key = array[i];\n    int j = i - 1;\n    // Shift elements greater than the key to the right\n    while (j >= 0 && any(greaterThan(array[j], key))) {\n      array[j + 1] = array[j];\n      j = j - 1;\n    }\n    array[j + 1] = key;\n  }\n}\n\n// https://stackoverflow.com/questions/596216/formula-to-determine-perceived-brightness-of-rgb-color\nfloat luminance1(in vec3 col) { return (0.2126*col.x + 0.7152*col.y + 0.0722*col.z); }\n\nfloat luminance2(in vec3 col) { return (0.299*col.x + 0.587*col.y + 0.114*col.z); }\n\nfloat luminance3(in vec3 col){ return sqrt( (0.299*pow(col.x,2.)) + (0.587*pow(col.y,2.)) + (0.114*pow(col.z,2.)) ); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    if(iFrame==0 ){\n        vec2 uv = fragCoord/iResolution.xy;\n        vec3 t[s.length()] = s;\n        if (uv.y>.14) t = s2;\n        if (uv.y>.28) vec3xyzinsertionSort(t);\n        if (uv.y>.42) vec3xyzinsertionSort(t);\n        if (uv.y>.57){\n            vec4 l[s.length()];\n            for (int i = 0; i < s.length(); i++) {\n                if (uv.y>.57) l[i] = vec4(t[i], luminance1(t[i]));\n                if (uv.y>.71) l[i] = vec4(t[i], luminance2(t[i]));\n                if (uv.y>.85) l[i] = vec4(t[i], luminance3(t[i]));\n            }\n            vec4winsertionSort(l);\n            fragColor = l[int(uv.x*float(t.length()))];\n        } else {\n            vec3 col = t[int(uv.x*float(t.length()))];\n            fragColor = vec4(col,1.0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}