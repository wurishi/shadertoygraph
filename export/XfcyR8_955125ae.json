{"ver":"0.1","info":{"id":"XfcyR8","date":"1730205384","viewed":37,"name":"Menger sponge,","username":"iqwsd","description":"raymarched menger sponge","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mengersponge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst vec3 camera_p = vec3(-3.93, 4.0, -1.52);\nconst vec2 camera_r = vec2(0.2, -10.705);\n\nconst vec3 _Color = vec3(0.6);\nconst vec3 _Sun = vec3(0.0, -100000.0, 0.0);\nconst vec3 _Sky_Color = vec3(174.0, 188.0, 231.0)/255.0;\nconst float _Size = 34.0;\nconst int _Iterations = 6;\nconst float _Attenuation = 0.0045;\nconst float _Max_Dist = 1000.0;\n\nmat3 rotateX( float theta ) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY( float theta ) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) \n         + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat menger( vec3 p ) {\n    float d = sdBox(p, vec3(_Size));\n    float s = 1.0/_Size;\n    for (int m=0; m<_Iterations; m++) {\n        vec3 a = mod( p*s, 2.0 )-1.0;\n        s *= 3.0;\n        vec3 r = abs(1.0 - 3.0*abs(a));\n        float da = max(r.x,r.y);\n        float db = max(r.y,r.z);\n        float dc = max(r.z,r.x);\n        float c = (min(da,min(db,dc))-1.0)/s;\n        d = max(d,c);\n    }\n    return d;\n}\n\nfloat map( vec3 p ) {\n    p *= rotateX(iTime * 0.1);\n    p *= rotateY(iTime * 0.15);\n    float dist = menger(p);\n    return dist;\n}\n\nvec3 calcnormal(vec3 p) {\n\tconst float h = 0.00002;\n\tconst vec2 k = vec2(1,-1);\n\treturn normalize( k.xyy*map( p + k.xyy*h ) + \n\t\t\t\t\t  k.yyx*map( p + k.yyx*h ) + \n\t\t\t\t\t  k.yxy*map( p + k.yxy*h ) + \n\t\t\t\t\t  k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float w )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    float t = mint;\n    for( int i=0; i<256 && t<maxt; i++ )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, d/(w*max(0.0,t-y)) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvec3 ray(vec3 origin, vec3 direction) {\n\tfloat d = 0.0;\n\tvec3 p = vec3(0);\n\tfor (int i = 0; i < 256; i++) {\n\t\tp = origin + direction * d;\n\t\tfloat dist = map(p);\n\t\td += dist;\n\t\tif (d > _Max_Dist) break;\n\t\tif (d < 0.0005) break;\n\t}\n\treturn p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 rd = normalize(vec3(uv, 1.0));\n    rd *= rotateX(camera_r.x);\n    rd *= rotateY(camera_r.y);\n    \n    vec3 pos = ray(camera_p, rd);\n    vec3 normal = calcnormal(pos);\n    \n    vec3 lr = normalize(_Sun-pos);\n    vec3 d = vec3(max(dot(normal, normalize(lr)), 0.1));\n    float s = max( softshadow(pos, lr, 0.02, _Max_Dist, 0.0125), 0.0);\n    vec3 color = _Color * (d * s + (1.0+normal.y)/2.0 * _Sky_Color/10.0\n                                 + dot(normal, -lr) * _Color/10.0)\n                                 + 0.02 + s * _Sky_Color/2.0 * vec3(0.5, 0.2, 0.0);\n                                 \n    float t = length(pos);\n    vec3 lambda = exp(-_Attenuation * t * vec3(2.4, 2.0, 4.0));\n    \n    color = lambda * color + (1.0 - lambda) * vec3(0.4);\n    color = smoothstep(0.0, 1.0, color);\n    color = max(color, 0.01);\n    color = pow(color, vec3(1.0, 1.0, 0.9)) + vec3(0.05, 0.05, 0.0)/2.0;\n    \n    fragColor = vec4(color, 1.0);\n    \n    if (length(pos - camera_p)>= _Max_Dist*0.5) {\n        fragColor = vec4( _Sky_Color - 0.4 * normalize(pos).y, 1.0 );\n    }\n}","name":"Image","description":"","type":"image"}]}