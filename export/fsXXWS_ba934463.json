{"ver":"0.1","info":{"id":"fsXXWS","date":"1619108607","viewed":39,"name":"313_Nurkenov_v1v2","username":"nurkensultan","description":"cg","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e9;\nconst float EPS = 1e-3;\nconst vec3 CAMERA_POS = vec3(1.3, 1.2, -6);\nvec3 LIGHT1_POS = vec3(-4, 1.6, 6.0);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.3, 0.1, 0.45);\nvec3 LIGHT2_POS = vec3(1.7, 1.0, 2.0);\nconst float LIGHT2_RADIUS = 0.6;\nconst vec3 LIGHT2_COLOR = vec3(0.8, 0.3, 0.1);\nvec3 randDir;\n\nstruct Triangle {\n\tvec3 v0;\n    vec3 v1;\n    vec3 v2;\n};\n\nvec3[5] tops = vec3[5] (\n    vec3(0, 1, 0),\n    vec3(-0.8, -1, -0.8),\n    vec3(0.8, -1, -0.8),\n    vec3(0.8, -1, 0.8),\n    vec3(-0.8, -1, 0.8)\n);\n\nvec3[6] centers = vec3[6] (\n    vec3(0, 0, 0),\n    vec3(0, 0.6, 0),\n    vec3(-0.4, 0.6, -0.4),\n    vec3(0.4, 0.6, -0.4),\n    vec3(-0.4, 0.6, 0.4),\n    vec3(0.4, 0.6, 0.4)\n);\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 normal, Triangle obj)\n{\n    vec3 d1 = obj.v1 - obj.v0;\n    vec3 d2 = obj.v2 - obj.v0;\n    vec3 dPos = pos - obj.v0;\n    vec3 v1 = cross(d1, d2);\n    vec3 v2 = cross(dPos, dir);\n    float d = 1.0 / dot(dir, v1);\n    \n    if (abs(d) < EPS) {\n        return INF;\n    }\n    \n    float t = d * dot(-v1, dPos);\n    float y = d * dot(-v2, d2);\n    float z = d * dot(v2, d1);\n    \n    if (y < 0.0 || z < 0.0 || y + z > 1.0) {\n        return INF;\n    }\n    \n    normal = normalize(cross(d1, d2));\n    if (dot(normal, dir) > 0.0) {\n        normal = normalize(cross(d2, d1));\n    }\n    \n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    return t;\n}\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 normal) {\n    Triangle t1 = Triangle(tops[2], tops[1], tops[0]);\n    Triangle t2 = Triangle(tops[0], tops[2], tops[3]);\n    Triangle t3 = Triangle(tops[0], tops[3], tops[4]);\n    Triangle t4 = Triangle(tops[0], tops[4], tops[1]);\n    Triangle t5 = Triangle(tops[1], tops[2], tops[3]);\n    Triangle t6 = Triangle(tops[1], tops[4], tops[3]);\n    \n    Triangle triangles[6] = Triangle[6](t1, t2, t3, t4, t5, t6);\n    vec3 tmpNormal;\n    float t = INF;\n    for (int i = 0; i < 6; i++) {\n        float triT = traceTriangle(pos, dir, tmpNormal, triangles[i]);\n        if (triT < t) {\n            t = triT;\n            normal = tmpNormal;\n        }\n    }\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 2.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.0;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 pyrNorm;\n    float pyrT = tracePyramid(pos, dir, pyrNorm);\n    if (pyrT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    vec4 globalColor = vec4(0, 0, 0, 0);\n        \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    const float DIAMOND_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float DIAMOND_R = pow2(AIR_N - DIAMOND_N) / pow2(AIR_N + DIAMOND_N);\n    LIGHT1_POS = LIGHT1_POS + randVals*0.1;\n    LIGHT2_POS = LIGHT2_POS + randVals*0.1;\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 sphNorm;\n        for (int i = 0; i < 6; i++) {\n            float radius = 0.1;\n            if (i == 1)\n                radius = 0.2;\n            float sph2T = traceSphere(curPos + centers[i], curDir, radius, sphNorm);\n            if (sph2T < t) {\n                t = sph2T;\n                normal = sphNorm;\n                if (randVals.x < DIAMOND_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= vec3(1, 0.5, 0.75);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = GLASS_N;\n                    } else {\n                        nEnter = DIAMOND_N;\n                    }\n                }\n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos\n        , curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        vec3 pyramidNorm;\n        float pyrT = tracePyramid(curPos, curDir, pyramidNorm);\n        if (pyrT < t) {\n            t = pyrT;\n            normal = pyramidNorm;\n            if (dot(curDir, normal) > 0.0) {\n                nEnter = AIR_N;\n            } else {\n                nEnter = GLASS_N;\n            }\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n            }\n            vec2 p = (fragCoord.xy / iResolution.xy) - 0.5;\n        }\n\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            globalColor += vec4(texture(iChannel0, worldPos.xz).rgb * 0.1, 0.0); \n            if (materialType == EMISSION) {\n                globalColor += vec4(color, 0.0);\n                break;\n            } else if (materialType == DIFFUSE) {\n                globalColor += vec4(computeLight(worldPos, color, normal), 0.0);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            globalColor += vec4(texture(iChannel1, curDir).rgb * 0.1, 0.0);\n        }\n    }\n    fragColor = globalColor;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}