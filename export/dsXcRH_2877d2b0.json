{"ver":"0.1","info":{"id":"dsXcRH","date":"1686572844","viewed":141,"name":"FBM Texture Generator","username":"MartinRGB","description":"this is the shader code of my article:https://martinrgb.github.io/blog/#/FBM.\nPress to trigger animation,the right part used sample in the bottom left-most texture.\n\n","likes":6,"published":1,"flags":32,"usePreview":1,"tags":["fogfbmtexturegeneratorfoggy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author @MartinRGB - 2019\n \n#ifdef GL_ES\nprecision mediump float;\n#endif\n \nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\nuniform sampler2D u_tex;\n \n#define texScale 1.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    // st += st * abs(sin(u_time*0.1)*3.0);\n    vec3 color = vec3(0.0);\n    //r -> \n    //fragColor=texture(iChannel0,uv/3.+vec2(0.5/3. * -1.,2./3.));\n    vec2 getQ = texture(iChannel0,uv/3.+vec2(0.5/3. * -1.,0./3.)*texScale).xx;\n    \n    \n    //g ->   \n    //fragColor=texture(iChannel0,uv/3.+vec2(0.5/3. * 0.,2./3.));\n    vec2 getR = texture(iChannel0,uv/3.+vec2(0.5/3. * -1.,0./3.)*texScale).yy;\n    \n    //b ->\n    //fragColor=texture(iChannel0,uv/3.+vec2(0.5/3. * 1.,2./3.));\n    float getF = texture(iChannel0,uv/3.+vec2(0.5/3. * -1.,0./3.)*texScale).z;\n    \n    \n    color = mix(vec3(uv.x,uv.y,1.),\n                vec3(uv.x,1.-uv.y,1.),\n                clamp((getF*getF)*4.0,0.0,1.0));\n \n    color = mix(color,\n                vec3(uv.x,1.-uv.y,1.),\n                clamp(length(getQ),0.0,1.0));\n \n    color = mix(color,\n                vec3(uv.x,uv.y,uv.y),\n                clamp(length(getR.x),0.0,1.0));\n \n    float f = getF;\n    \n    fragColor = texture(iChannel0,uv);\n    \n    if(uv.x>0.5){\n        fragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.);\n    }\n        \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Author @MartinRGB - 2019\n// FBM Texture Generator\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n \n#define u_resolution iResolution\n#define u_time iTime\n#define texScale 10.\n \n// ---------------------------- Util ----------------------------\n#define BlendMultiply(base, blend)      (base * blend)\n#define BlendLightenf(base, blend)      max(blend, base)\n#define RED vec3(1.,0.,0.)\n#define GREEN vec3(0.,1.,0.)\n#define BLUE vec3(0.,0.,1.)\n \n \n// ---------------------------- Para Setting ----------------------------\n#define uBrightness 0.0\n#define uGamma 1.0\n#define uContrast 1.0\n \n#define enableColorAdjust true\n#define loop false\n//0 ~ 8\n#define texMode 1\n \n \n#define col1Offset1 ((iMouse.z > 0.)?vec2(10. + u_time):vec2(10.))\n#define col1Offset2 ((iMouse.z > 0.)?vec2(10. + u_time):vec2(10.))\n#define col2Offset1 ((iMouse.z > 0.)?vec2(50. + u_time):vec2(50.))\n#define col2Offset2 ((iMouse.z > 0.)?vec2(50. + u_time):vec2(50.))\n#define col3Offset1 ((iMouse.z > 0.)?vec2(0. + u_time):vec2(0.))\n#define col3Offset2 ((iMouse.z > 0.)?vec2(200. + u_time):vec2(200.))\n \n// ---------------------------- Tex Selector ----------------------------\n \n#define texOutputMethod ((loop == false) ? texMode : int((sin(u_time/2.)+1.)/2.*8.))\n \n// ---------------------------- ColorAdjust ----------------------------\n \nvec3 brightnessContrast(vec3 value, float brightness, float contrast)\n{\n    return (value - 0.5) * contrast + 0.5 + brightness;\n}\n \nvec3 Gamma(vec3 value, float param)\n{\n    return vec3(pow(abs(value.r), param),pow(abs(value.g), param),pow(abs(value.b), param));\n}\n \n// ---------------------------- Method1 ----------------------------\n \nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n \n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n \n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n \n    vec2 u = f * f * (3.0 - 2.0 * f);\n \n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n \n#define NUM_OCTAVES 8\n \nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n \nvec2 getQ(in vec2 st,in vec2 offset){\n    vec2 q = vec2(0.);\n    q.x = fbm( st + offset);\n    q.y = fbm( st + vec2(1.0));\n    return q;\n}\n \nvec2 getR(in vec2 st,in vec2 offset1,in vec2 offset2){\n    vec2 q = vec2(0.);\n    q.x = fbm( st + offset1);\n    q.y = fbm( st + vec2(1.0));\n    \n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15 * 4.);\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.15 * 4. + offset2);\n    return r;\n}\n \nfloat getF(in vec2 st,in vec2 offset1,in vec2 offset2,in vec2 offset3){\n    vec2 q = vec2(0.);\n    q.x = fbm( st + offset1);\n    q.y = fbm( st + vec2(1.0));\n    \n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15 * 4.);\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.15 * 4. + offset2);\n    \n    float f = fbm(st + r + offset3);\n    return f;\n}\n \nvec3 method1(in vec2 st){\n    \n    // ### Change Coord Mapping & Offset\n    vec3 color = vec3(0.0);\n \n    vec2 q = vec2(0.);\n    q.x = fbm( st + col1Offset1);\n    q.y = fbm( st + vec2(1.0));\n \n    \n    \n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15 * 4.);\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.15 * 4. + col1Offset2);\n \n    float f = fbm(st + r + col2Offset1);\n    \n    \n    color = BlendLightenf(BlendLightenf(r.x*GREEN,q.y*RED),f*BLUE);\n    \n    \n    \n    if(enableColorAdjust == true){\n        color.r = clamp(color.r, 0.0, 0.7);\n        color.g = clamp(color.g, 0.0, 0.9);\n        color = brightnessContrast(color, -uBrightness, uContrast);\n        color = Gamma(color, uGamma);\n    }\n \n    return color;\n}\n \nvec3 method1Extend(in vec2 st,in int method){\n    vec3 color = vec3(0.0);\n    if(method == 3)\n    \tcolor = BlendLightenf(BlendLightenf(getQ(st,col1Offset1).x*GREEN,getQ(st,col3Offset1).x*RED),getQ(st,col3Offset1).y*BLUE);\n    if(method == 4)\n    \tcolor = BlendLightenf(BlendLightenf(getR(st,col1Offset1,col1Offset2).y*GREEN,getR(st,col2Offset1,col2Offset2).x*RED),getR(st,col3Offset1,col3Offset2).y*BLUE);\n    if(method == 5)\n    \tcolor = BlendLightenf(BlendLightenf(getF(st,col1Offset1,col1Offset2,col2Offset1)*GREEN,getF(st,col2Offset1,col2Offset2,col3Offset1)*RED),getF(st,col3Offset1,col3Offset2,col1Offset1)*BLUE);\n    \n    if(enableColorAdjust == true){\n        color.r = clamp(color.r, 0.0, 0.7);\n        color.g = clamp(color.g, 0.0, 0.9);\n        color = brightnessContrast(color, -uBrightness, uContrast);\n        color = Gamma(color, uGamma);\n    }\n \treturn color;\n}\n \n// ---------------------------- Method2 ----------------------------\n \nvec3 method2FinColor(in vec2 st,in vec2 offset1, in vec2 offset2){\n \n    vec3 color = vec3(0.0);\n    \n \tvec2 q = vec2(0.);\n    q.x = fbm( st + offset1);\n    q.y = fbm( st - offset1);\n    \n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2) + offset2);\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8) - offset2);\n \n    float f = fbm(st+r);\n    \n    color = mix(vec3(0.101961,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp(length(f*f)*1.0,0.0,1.0));\n    \n  \tcolor = mix(color,vec3(0,0,0.164706),\n                clamp(length(q.y),0.0,1.0));\n    \n    color = mix(color,vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n    \n    color = (f*f*f+.6*f*f+.5*f)*color;\n    \n    if(enableColorAdjust == true){\n        color.r = clamp(color.r, 0.0, 0.7);\n        color.g = clamp(color.g, 0.0, 0.9);\n \n        color = brightnessContrast(color, -uBrightness, uContrast);\n        color = Gamma(color, uGamma);\n    \n    }\n    \n    return color;\n    \n}\n \nvec3 method2(in vec2 st){\n \n    // ### Change Coord Mapping & Offset\n    vec3 color1 = method2FinColor(st,col1Offset1,col1Offset2);\n    vec3 color2 = method2FinColor(vec2(st.x,st.y),col2Offset1,col2Offset2);\n    vec3 color3 = method2FinColor(vec2(st.x,st.y),col3Offset1,col3Offset2);\n    \n    vec3 color = BlendLightenf(BlendLightenf(color1*GREEN,color2*RED),color3*BLUE);\n    \n    return color;\n}\n \n \n// ---------------------------- Method3 ----------------------------\n \n \nfloat pattern0( in vec2 p )\n{\n\treturn fbm( p );\n}\n \nfloat pattern1( in vec2 p )\n{\n    vec2 q = vec2( fbm( p + vec2(0.0,0.0) ),\n                   fbm( p + vec2(5.2,1.3) ) );\n \n    return fbm( p + 4.0*q );\n}\n \nfloat pattern2( in vec2 p )\n{\n    vec2 q = vec2(fbm( p + vec2(0.0,0.0) ),fbm( p + vec2(5.2,1.3) ) );\n \n    vec2 r = vec2(fbm( p + 4.0*q + vec2(1.7,9.2) ),fbm( p + 4.0*q + vec2(8.3,2.8) ) );\n \n    return fbm( p + 4.0*r );\n}\n \nvec3 method3FinColor(in vec2 st,vec2 offset1,vec2 offset2,int tex_mode){\n    vec3 color = vec3(0.0);\n \n    vec2 q = vec2(0.);\n\tq = vec2(pattern0(st ));\n \n    \n    vec2 r = vec2(0.);\n    r= vec2(pattern1(st + offset1));\n \n \n    float f = (fbm(st+r + offset2));\n    \n \tcolor = mix(vec3(0.101961,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp(length(f*f)*4.0,0.0,1.0));\n    \n  \tcolor = mix(color,vec3(0,0,0.164706),\n                clamp(length(q.y),0.0,1.0));\n    \n    color = mix(color,vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n    \n \n    if(tex_mode == 6)\n        color = (pattern0(st + offset1))*color;\n    else if(tex_mode == 7)\n        color = (pattern1(st + offset1))*color;\n    else if(tex_mode == 8)\n        color = (pattern2(st + offset1))*color;\n    else\n        color = (f*f*f+.6*f*f+.5*f)*color;\n    \n    \n    \n    \n    if(enableColorAdjust == true){\n        color.r = clamp(color.r, 0.0, 0.7);\n        color.g = clamp(color.g, 0.0, 0.9);\n \n        color = brightnessContrast(color, -uBrightness, uContrast);\n        color = Gamma(color, uGamma);\n    \n    }\n    return color;\n}\n \n \nvec3 method3(in vec2 st,int tex_mode){\n   \n    // ### Change Coord Mapping & Offset\n    vec3 color1 = method3FinColor(st,col1Offset1,col1Offset2,tex_mode);\n    vec3 color2 = method3FinColor(vec2(st.x,st.y),col2Offset1,col2Offset2,tex_mode);\n    vec3 color3 = method3FinColor(vec2(st.x,st.y),col3Offset1,col3Offset2,tex_mode);\n    \n    vec3 color = BlendLightenf(BlendLightenf(BlendMultiply(color1,GREEN),BlendMultiply(color2,RED)),\n                                                           BlendMultiply(color3,BLUE));\n    \n    return color;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = gl_FragCoord.xy/u_resolution.y*texScale;\n    \n    vec2 uv = gl_FragCoord.xy/u_resolution.xy;\n    \n    int yAxis = int(floor(uv.y/0.3333333333));\n    int xAxis = int(floor(uv.x/0.1666666));\n    \n    //gl_FragColor = gl_FragColor*vec4(BLUE,1.);\n    \n    if(yAxis == 0){\n    \n        if(xAxis == 0)\n            fragColor = vec4(method1(st),1.);\n        if(xAxis == 1)\n            fragColor = vec4(method2(st),1.);\n        if(xAxis == 2)\n            fragColor = vec4(method3(st,0),1.);\n    \n    }\n    \n    if(yAxis == 1){\n\n        if(xAxis == 0)\n            fragColor = vec4(method1Extend(st,3),1.);\n        if(xAxis == 1)\n            fragColor = vec4(method1Extend(st,4),1.);\n        if(xAxis == 2)\n            fragColor = vec4(method1Extend(st,5),1.);\n    }\n    \n    if(yAxis == 2){\n    \n        if(xAxis == 0){\n            fragColor = vec4(method3(st,6),1.);\n            fragColor = fragColor*vec4(RED,1.);\n        }\n        if(xAxis == 1){\n            fragColor = vec4(method3(st,7),1.);\n            fragColor = fragColor*vec4(GREEN,1.);\n        }\n        \n        if(xAxis == 2){\n            fragColor = vec4(method3(st,8),1.);\n            fragColor = fragColor*vec4(BLUE,1.);\n        }\n    }\n\n    \n    \n}\n","name":"Buffer A","description":"","type":"buffer"}]}