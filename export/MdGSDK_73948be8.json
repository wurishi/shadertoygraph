{"ver":"0.1","info":{"id":"MdGSDK","date":"1466605037","viewed":905,"name":"SSS Shader","username":"Yoshimaster96","description":"Renders a sphere with subsurface scattering.\n\n[EDIT] Camera motion implemented.\n[EDIT 2] Changes being made, please wait. Camera motion temporarily deleted.\n[EDIT 3] Changes have been made, enjoy!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sss","scattering","subsurface"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 abColor = vec4(2.0,1.0,0.0,0.0);\nvec4 scColor = vec4(0.0,1.0,2.0,0.0);\nvec4 emColor = vec4(0.0,0.0,0.0,0.0);\nfloat ior = 1.333;\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 randpt(vec2 co1,vec2 co2)\n{\n    float r1 = rand(co1)*6.28318530717958;\n    float r2 = rand(co2)*2.0 - 1.0;\n    return vec3(cos(r1)*sqrt(1.0-r2*r2),sin(r1)*sqrt(1.0-r2*r2),r2);\n}\n\nvec3 rotvec(vec3 a)\n{\n    float theta = iTime;\n    float b = a.x*cos(theta)-a.z*sin(theta);\n    float c = a.x*sin(theta)+a.z*cos(theta);\n    return vec3(b,a.y,c);\n}\n\nvec4 diffeq(vec3 nrm,vec2 co)\n{\n    vec4 tally = texture(iChannel0,rotvec(nrm));\n    vec4 a = abColor+scColor;\n    vec4 e = emColor;\n    float depth = 2.0*sqrt(1.0-pow(length(co),2.0));\n    for(float i=0.001; i<1.0; i+=0.002)\n    {\n        vec3 pt1 = vec3(co,depth*i-depth*0.5);\n        vec3 pt2 = randpt(co+vec2(i),co+vec2(i+1.0));\n        vec4 ins = texture(iChannel0,rotvec(pt1-pt2));\n        tally += 0.002*depth*(tally*-a+e+scColor*ins);\n    }\n    return tally;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(0.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = (uv*4.0)-vec2(2.0);\n    uv *= vec2(iResolution.x/iResolution.y, 1.0);\n\tif(length(uv)<1.0)\n\t{\n\t\tvec3 nrm0 = vec3(uv,sqrt(1.0-pow(length(uv),2.0)));\n        float r0 = pow((ior-1.0)/(ior+1.0),2.0);\n        float fres = r0+(1.0-r0)*pow(1.0-nrm0.z,5.0);\n\t\tvec3 nrm1 = normalize(vec3(uv,-2.0));\n        fragColor = fres*texture(iChannel0,rotvec(reflect(nrm1,nrm0)))\n\t\t\t+(1.0-fres)*diffeq(refract(nrm1,nrm0,1.0/ior),uv);\n        //fragColor = diffeq(nrm1,uv);\n\t}\n    else\n    {\n        fragColor = texture(iChannel0,rotvec(vec3(uv,-2.0)));\n    }\n}","name":"Image","description":"","type":"image"}]}