{"ver":"0.1","info":{"id":"DldSzn","date":"1684954407","viewed":32,"name":"shader_shader1","username":"maria_s","description":"1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int n = 3;\nvec3 colAr[n] = vec3[n](vec3(0.992, 0.647, 0.8), vec3(0.803, 0.643, 0.87), vec3(0.923, 0.672, 0.849));\nvec3 BGcol = vec3(1.0, 0.81,1.0);\n\nbool Circle(vec2 uv, in vec2 m, float r) {\n    if (length(vec2(uv.x, uv.y) - m) - r < 0.0){\n    return true;\n    }\n    return false;\n}\n\nbool Triangle(in vec2 uv){ \n    if ((uv.x>=uv.y)&&(uv.x<=0.66-uv.y)&&(uv.y>0.05)){\n    return true; \n    }\n  return false;\n}\n\nfloat Square(vec2 uv, float size, vec2 m) {\n  float d = max(abs(uv.x - m.x), abs(uv.y - m.y)) - size;\n  return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.x; \n  uv -= 0.22;\n  vec3 col = BGcol;\n  vec2 m = vec2(sin(1.5*iTime)*0.35+0.15);\n  vec2 m1 = vec2(cos(iTime)*0.28+0.3, sin(3.*iTime)*0.2);\n  vec2 offset = vec2(0.11, 0.0);\n  vec2 fg = fragCoord/iResolution.xy;\n  float D = Square(uv, 0.13, m1);\n  if (Circle(uv, m, .14)) col = colAr[1];\n  else if (Triangle(uv)) col = colAr[0];\n  else if (D < 0.0) col = colAr[2];\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}