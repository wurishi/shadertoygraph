{"ver":"0.1","info":{"id":"clGfW3","date":"1702532859","viewed":122,"name":"sea bacteria","username":"Efim","description":"simple sea bacteria","likes":17,"published":1,"flags":0,"usePreview":1,"tags":["raymarching","noise","sdf","repetition","bacteria"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\nconst float dist_infin = 10.0;\n#define nn 128\nconst float eps = 0.001;\n\nvec3 sdfColor;\nvec3 resColor;\nvec3 col1 = vec3(0.3764, 0.8196, 0.3725);\nvec3 col2 = vec3(0.8117, 0.1764, 0.8078);\n\n//https://iquilezles.org/articles/smin/\n// polynomial smooth min 1 (k=0.1)\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat rand(float t) {\n    return fract(sin(t * 213.12234));\n}\n\nfloat heirw(vec3 p, float h, float r, float r0, float fi) {\n    h = h * (1.0 + 0.05 * cos(iTime * 4. + fi));\n    float z = clamp(p.z, 0., h), // radius pimple \n    x = sin(z * PI * 2.0 + iTime * 4. + fi) * h * 0.3 * z * (h - z) / h / h, y = sin(z * PI * 2.0 - iTime * 4. + fi) * h * 0.3 * z * (h - z) / h / h;\n\n    vec3 p2 = vec3(x, y, z);\n    //Color\n    sdfColor = mix(col1, col2, pow(vec3(p.z / h), vec3(3.)));\n    return length(p - p2) * 0.5 - r * (h - z) / h - r0;\n}\n\nfloat bbody(vec3 p) {\n\n    float h = 1.1, //height pimple\n    r = 0.3, n = 15., m = 6., z = clamp(p.z, r, h + r);\n    vec3 p2 = vec3(0., 0., z);\n    float dz = length(p - p2) - r;\n\n    float dlon = TAU / n, dlat = h / m, l = length(p.xy), lon = mod(atan(p.y, p.x), TAU), lat = p.z - r, //longitude and latitude\n    i = floor(lon / dlon), j = clamp(floor(lat / dlat), 0., m), dp = dz, x1 = lon / TAU, y1 = clamp(p.z, 0., h + 2. * r) / (h + 2. * r);\n\n    float lon1 = i * dlon + 0.5 * dlon, dx = (lon - lon1) * r, lat1 = j * dlat + 0.5 * dlat, //longitude and latitude nearest pimple\n    dy = lat - lat1, num = (i + 1.) * m + (j + 1.), fi = rand(num) * PI, d = heirw(vec3(dx, dy, dz), 0.5, 0.01, 0.001, fi);\n    if(d < dp) {\n        resColor = sdfColor;\n        dp = d;\n    }\n\n    //texture\n    //vec3 cl = texture(iChannel0, vec2(x1, y1)).rgb;\n    vec3 cl = textureLod( iChannel0, vec2(x1, y1), 0.0 ).rgb;\n    float disp = dot(cl, vec3(0.3, 0.59, 0.11));\n    disp *= r * 0.1;\n    dz -= disp;\n    if(dz < dp)\n        resColor = cl;\n\n    return smin(dp, dz, 0.01);\n\n}\n\nfloat map(vec3 p) {\n    p.xz *=rot(PI / 2.); //rotate object\n    float d = dist_infin;\n    if(p.z < 0.) {\n        p.z *= -1.;\n        d = heirw(p, 1.8, 0.03, 0.003, 0.);\n        resColor = sdfColor;\n    } else {\n        d = bbody(p);\n    }\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(pos + k.xyy * h) +\n        k.yyx * map(pos + k.yyx * h) +\n        k.yxy * map(pos + k.yxy * h) +\n        k.xxx * map(pos + k.xxx * h));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\n//#define AA 1\n\nvec3 calccolor(vec3 col_in, vec3 backcol, vec3 rd, vec3 light1, vec3 light2, vec3 nor) {\n    vec3 col = col_in;\n    float d = dot(rd, nor);\n    if(d < 0.0)\n        col = backcol;\n\n    nor *= -sign(d);\n    float difu1 = dot(nor, light1);\n    float difu2 = dot(nor, light2);\n    float difu = max(difu1, difu2);\n    col *= clamp(difu, 0.3, 1.0);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); //light\n    vec3 light2 = normalize(vec3(0.0, -1.0, 2.5)); //light\n    vec2 mo = vec2(0.0, 0.0);\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, 2.5); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y * PI);\n    ro.xz *= rot(-mo.x * TAU);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 b1 = vec3(0.0509, 0.2980, 0.4705), b2 = vec3(0.3764, 0.7529, 0.8784), bg = mix(b1, b2, vec3((1.0 - abs(fragCoord.x - iResolution.x / 2.) / iResolution.y * 2.) * fragCoord.y / iResolution.x));   \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n\n            vec3 col = bg * bg; // background  \n            //==========================raymatch=============================\n            float td = 0.;\n            vec3 pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                if(h < eps || td >= dist_infin)\n                    break;\n                td += h;\n            }\n            if(td < dist_infin) {\n                col = resColor;\n                vec3 nor = calcNormal(pos);\n                col = calccolor(col, col, -rd, light, light2, nor);\n\n            }\n            //==========================raymatch=============================\n            tot += col;\n        }\n    tot = sqrt(tot) / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}