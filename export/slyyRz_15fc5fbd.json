{"ver":"0.1","info":{"id":"slyyRz","date":"1660845327","viewed":99,"name":"Flat circular simplex noise","username":"SolalDR","description":"Flat circular simplex noise, can be used for transition with `intensity` parameter  ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","mask"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n#define SATURATION 2.5\n#define WAVE_SPEED 0.2\n#define WAVE_FREQ 1.0\n\n//#define WAVE_SPEED 0.0\n//#define WAVE_FREQ 0.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float intensity = 0.0; // Between -1 (white) and 1 (black) \n    // intensity = sin(iTime); // uncomment to see B/W transition\n    \n    \n    float mixValue = intensity * 1.1 - 0.2;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 diffCenterUv = uv - vec2(0.5);\n    float l = length(diffCenterUv) * 2.0;\n\n    vec2 uv1 = vec2(uv.x * 1.0, uv.y * -1.0);\n    vec2 uv2 = vec2(uv.x * 1.5, uv.y * -1.5);\n    vec2 uv3 = vec2(uv.x * -0.5, uv.y * 0.5);\n    \n    vec2 t1 = vec2(iTime * 0.06) + sin(l * WAVE_FREQ - iTime * WAVE_SPEED);\n    vec2 t2 = vec2(iTime * 0.11) + sin(l * WAVE_FREQ - iTime * WAVE_SPEED + 1.7);\n    vec2 t3 = vec2(iTime * 0.2) + sin(l * WAVE_FREQ - iTime * WAVE_SPEED + 3.14);\n\n    // Time varying pixel color\n    float noise1 = snoise(vec3(uv1.x + t1.x, uv1.y + t1.x, 0.0));\n    float noise2 = snoise(vec3(uv2.x + t2.x, uv2.y + t2.x, 0.3));\n    float noise3 = snoise(vec3(uv3.x + t3.x, uv3.y + t3.x, 0.6));\n\n    float noise4 = snoise(vec3(noise1, noise2, noise3));\n    float noiseComb = (noise4 - mixValue) * SATURATION;\n    \n    // Output to screen\n    fragColor = vec4(vec3(noiseComb),1.0);\n}","name":"Image","description":"","type":"image"}]}