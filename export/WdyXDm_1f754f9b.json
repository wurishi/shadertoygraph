{"ver":"0.1","info":{"id":"WdyXDm","date":"1574578225","viewed":477,"name":"Hyperspace Streaks","username":"blue_max","description":"Based on Louis Sugy's shader. I've only tweaked and simplified a few bits of the effect to make it look closer to the effect we see in Solo. I'll add it to the old X-Wing Alliance videogame soon.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["hyperspace","starwars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n * Based on https://www.shadertoy.com/view/Wl2GRz\n * Created by Louis Sugy, 2019\n * You can use it under the terms of the MIT license\n * (free to use even in commercial projects, attribution required)\n */\n\n#define PI 3.14159265\n#define ATAN5 1.37340076695\n\nvec3 blue_col = vec3(0.5,0.7,1);\n\nconst float t2 = 2.0;\n\nvec2 cart2polar(vec2 cart) {\n    return vec2(atan(cart.y, cart.x), length(cart));\n}\n\n// From https://www.shadertoy.com/view/4sc3z2\n// and https://www.shadertoy.com/view/XsX3zB\n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nfloat simplexNoise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat jumpstep(float low, float high, float val)\n{\n    /*\n     This curve is plotted here:\n\n     https://iquilezles.org/apps/graphtoy/?f1(x)=atan(10%20*%20x%20-%205.0)%20/%20(2%20*%20atan(5.0))%20+%200.5&f2(x)=clamp(f1(x),%200,%201)&f3(x)=(10%20*%20x%20-%205.0)%20/%20(2%20*%20atan(5.0))%20+%200.5\n    */\n    // This part of the curve looks like a smoothstep going from 0\n    // to halfway up the curve\n    float f1 =  clamp(\n       atan(8.0 * (val-low) / (high-low) - 5.0) / (2.0 * ATAN5) + 0.5, \n       0.0, 1.0\n    );\n    // This is a linear curve\n    float f2 = (8.0 * (val-low) / (high-low) - 5.0) / (2.0 * ATAN5) + 0.5;\n    return max(f1, f2);\n}\n\nvec3 pixelVal(vec2 coord)\n{    \n    // Pixel to point (the center of the screen is (0,0)\n    //float t1 = 2.8, t2 = 4.5;\n    vec3 resolution = iResolution * 4.0;\n    vec2 uv = (2.0 * coord - resolution.xy) / resolution.x;\n    vec2 ad = cart2polar(uv);\n    // ad: polar coords\n    // ad.x = angle\n    // ad.y = radius\n    \n    // Loop forever\n    float time = mod(iTime, t2);\n    \n    // Uncomment this line to revert the effect\n    //time = t2 - time;\n    \n    //time = 0.5 * t2; // DEBUG\n    float t = time / t2; // normalized [0..1] time\n    \n    vec3 bg = vec3(0.0);\n    vec3 fg = 0.75 * vec3(0.082, 0.443, 0.7);\n    vec3 col = mix(bg, fg, t);\n    // whiteout:\n    col = mix(col, vec3(1.0), smoothstep(0.5, 0.9, t));\n \n    //time = 1.25; // DEBUG\n    float intensity = 1.0;\n    // Smaller r's produce longer streaks\n    float r = ad.y;\n    r = r * 40.0 / (5.0 + 60.0 * jumpstep(0.0, t2, 0.5*pow(time, 3.5)));\n\n    // Lower values in the multiplier for ad.x yield thicker streaks\n    float noiseVal = simplexNoise(vec3(60.0 * ad.x, r, 0.0));\n    float noiseGain = 1.0 + 2.0 * smoothstep(0.5, 0.9, t);\n    noiseVal *= noiseGain;\n    \n    // Let's remove a few streaks:\n    float lo_t = clamp(mix(0.25, 0.0, t), 0.0, 1.0);\n    noiseVal = smoothstep(lo_t, 1.0, noiseVal);\n    \n    // Overall intensity of the streaks\n    intensity = mix(0.0, 10.0, t * 1.5);\n    // Multiplying by ad.y darkens the center streaks a little bit\n    noiseVal *= ad.y * intensity * noiseVal;\n    float white_level = smoothstep(0.0, 1.0, noiseVal);\n    white_level *= white_level;\n\n    col += intensity * blue_col * vec3(noiseVal) + vec3(white_level);\n    \n    ///////////////////////////////////////\n    // Add the white disk in the center\n    ///////////////////////////////////////\n    float disk_size = 0.025, falloff, disk_col;\n    float disk_intensity;\n    disk_intensity = smoothstep(0.25, 0.65, t);\n    //disk_size = jumpstep(0.0, t2 - 0.3, 0.5*pow(time, 3.5));\n        \n    falloff = 3.0; // 100 = short fallof, 3.0 = bigger, nicer falloff\n    // Negative fallofs will make a black disk surrounded by a halo\n    disk_col = exp(-(ad.y - disk_size) * falloff);\n    col += disk_intensity * disk_col * vec3(0.913, 0.964, 0.980);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 avgcol = vec3(0.0);\n    \n    for(int i = -1; i <= 1; i++)\n        for(int j = -1; j <= 1; j++)\n            avgcol += pixelVal(4.0 * fragCoord + vec2(i, j));\n    avgcol /= 9.0;\n\n    // Output to screen\n    fragColor = vec4(avgcol, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}