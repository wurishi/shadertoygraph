{"ver":"0.1","info":{"id":"wdyyWG","date":"1603597524","viewed":318,"name":"ScanRowsFromWebcam","username":"dnery","description":"Simple vertical scan line filter using the webcam as input.","likes":4,"published":1,"flags":34,"usePreview":0,"tags":["lines","filter","scan","webcam","rows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Customize params in Common\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        \n    vec3 solvedCamCol = texture(iChannel0, uv).rgb;\n    \n    float line = smoothstep(CURSOR - PRANGE, CURSOR, dot(uv, DIRVEC)) -\n        \t\t smoothstep(CURSOR, CURSOR + PRANGE, dot(uv, DIRVEC));\n    \n    fragColor = vec4(mix(solvedCamCol, LINCOL, line), 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Customize params in Common\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 old = texture(iChannel0, uv).xyz;\n    vec3 new = texture(iChannel1, uv).xyz;\n    \n    // note: if you invert smoothstep range, it behaves as expected\n    vec3 col = mix(old, new, smoothstep(CURSOR - PRANGE, CURSOR + PRANGE, dot(uv, DIRVEC)));\n                      \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Customize\n#define USE_MOUSE\t0\n#define SPEED\t\t0.5\n#define PERIOD\t\t1.0\n#define PRANGE \t\t1e-2\n//#define DIRECTION\t0.0, 1.0\n//#define DIRECTION\t1.0, 0.0\n#define DIRECTION\t0.0, -1.0\n//#define DIRECTION\t-1.0, 0.0\n//#define DIRECTION\tcos(M_PI / 4.0), sin(M_PI / 4.0)\n//#define DIRECTION\tcos(3.0 * (M_PI / 4.0)), sin(3.0 * (M_PI / 4.0))\n//#define DIRECTION\tcos(5.0 * (M_PI / 4.0)), sin(5.0 * (M_PI / 4.0))\n//#define DIRECTION\tcos(7.0 * (M_PI / 4.0)), sin(7.0 * (M_PI / 4.0))\n#define LINECOLOR\t0.95, 0.25, 0.35\n\n// Internal\n#define LINCOL\t\tget_linecolor()\n#define DIRVEC\t\tget_direction()\n#define CURSOR \t\tget_cursor(iTime, iMouse, iResolution)\n#define M_PI \t\t3.1415926535897932384626433832795\n\nvec3 get_linecolor()\n{\n    return vec3(LINECOLOR);\n}\n\nvec2 get_direction()\n{\n    return vec2(DIRECTION);\n}\n\nfloat get_cursor(in float iTime, in vec4 iMouse, in vec3 iResolution)\n{\n#if !USE_MOUSE\n    vec2 start;\n\tvec2 dir = DIRVEC;\n    vec2 vel = vec2(mod(iTime * SPEED, PERIOD));\n\n\tif (dir.x < 0.0f) {\n      \tstart.x = 1.0f;\n        vel.x *= -1.0f;\n    }\n    if (dir.y < 0.0f) {\n        start.y = 1.0f;\n\t\tvel.y *= -1.0f;\n    }\n        \n    return dot(start + vel, DIRVEC);\n#endif\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    return dot(mouse, DIRVEC);\n}","name":"Common","description":"","type":"common"}]}