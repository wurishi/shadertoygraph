{"ver":"0.1","info":{"id":"MdVXDd","date":"1467516462","viewed":216,"name":"gamma blending (interactive)","username":"aji","description":"click on it! uses gamma correction to blend two colors in a more natural way\n\ncontrols:\nx mouse controls blur size\ny mouse controls gamma (bottom=1.0, top=3.0)\ngamma ~2.0 = most natural\ngamma 1.0 = typical blending (too dark)\ngamma 3.0 = noticeably bright","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blend","gamma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float logistic(float sigma, float x)\n{\n    return 1.0 / (1.0 + exp(-x * sigma));\n}\n\nvec3 blend(vec3 a, vec3 b, float f, float gamma)\n{\n    vec3 g = vec3(gamma);\n    return pow((1.0 - f) * pow(a, g) + f * pow(b, g), 1.0 / g);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 a = vec3(1.0, 0.0, 1.0);\n    vec3 b = vec3(0.0, 1.0, 1.0);\n    float gamma = 1.0 + 2.0 * iMouse.y / iResolution.y;\n    float sigma = 8.0 * (1.0 + iResolution.x / iMouse.x);\n    float x = fragCoord.x / iResolution.x;\n    float amount = logistic(sigma, 2.0 * x - 1.0);\n    vec3 color = blend(a, b, amount, gamma);\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}