{"ver":"0.1","info":{"id":"7d3XWN","date":"1633131164","viewed":84,"name":"23/49","username":"tono","description":"49","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["49"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat bo(vec3 p , vec3 s){p = abs(p) - s;return max(p.x,max(p.y,p.z));}\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\nvec3 random33(vec3 st)\n{\n    st = vec3(dot(st,vec3(127.1, 311.7,811.5)),\n                dot(st, vec3(269.5, 183.3,211.91)),\n                dot(st, vec3(511.3, 631.19,431.81))\n                );\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\nfloat norm(vec3 p, float n)\n{\n    vec3 t=pow(abs(p),vec3(n));\n    return pow(t.x+t.y,1./n);\n}\n\nvec4 celler3D(vec3 i,vec3 sepc)\n{\n    float siTime = iTime / 1.5;\n    vec3 sep = i * sepc;\n    vec3 fp = floor(sep);\n    vec3 sp = fract(sep);\n    float dist = 5.;\n    vec3 mp = vec3(0.);\n\tvec3 opos = vec3(0.);\n    \n    for (int z = -1; z <= 1; z++)\n    {\n        for (int y = -1; y <= 1; y++)\n        {\n            for (int x = -1; x <= 1; x++)\n            {\n                vec3 neighbor = vec3(x, y ,z);\n                vec3 rpos = vec3(random33(fp+neighbor));\n                vec3 pos = sin( (rpos*50. +siTime/(230. + 100.*cos(siTime/130.) ) ) ) * 0.5 + 0.5;\n                float shape = 0.5 + clamp(sin(siTime),0.,1.) *30.;\n                float divs = length(neighbor + pos - sp);\n                \n                if(dist > divs)\n                {\n                    opos = neighbor + fp + rpos;\n                    mp   = pos;\n                \tdist = divs;\n                }\n            }\n        }\n    }\n    return vec4(opos,dist);\n}\n\nvec2 map(vec3 p)\n{\n    float o = 10.;\n    float id = 0.;\n    \n    o = length(p + vec3(tan(iTime/5.),sin(iTime),cos(iTime))) - .8;\n    p.xz *= rot(iTime);\n    p.yz *= rot(iTime);\n    float bb = length(p + vec3(0,cos(iTime/3.),0)) - 1.;\n    bb = mix(bo(p + vec3(0.,sin(iTime),0.),vec3(1.) ),bb,clamp(sin(iTime) , -.5,.5) + .5 );\n    o = smin(o,bb,3.);\n    \n    return vec2(o,id);\n}\n\nvec2 march(vec3 cp , vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0 ; i< 66 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(abs(d.x) < 0.01)\n        {\n            return vec2(depth,d.y);\n        }\n        depth += d.x;\n    }\n    return vec2(-depth , 0.);\n}\n\nvec3 getNormal(vec3 pos)\n{\n    vec2 e = vec2(1.0, -1.0) * 0.005;\n    vec3 N = normalize(\n              e.xyy * map(pos + e.xyy).x +\n              e.yyx * map(pos + e.yyx).x +\n              e.yxy * map(pos + e.yxy).x +\n              e.xxx * map(pos + e.xxx).x);\n    return N;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 cp = vec3(0.,0.,-6.);\n    vec3 target = vec3(0.);\n    \n    vec3 col = vec3(0.);\n    \n    vec3 cd = normalize(vec3(target - cp));\n    vec3 cs = normalize(cross(cd , vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    float fov = 2.5;\n    \n    vec3 rd = normalize(cd * fov + cs * p.x + cu * p.y);\n    p = vec2(length(p),acos(p));\n    //vec4 cells = celler3D(vec3(p * rot(iTime + p.x),1.).zxy,vec3(2.3));\n    vec3 rdd = rd;\n    rdd.xz *= rot(iTime/4.);\n    rdd.yz *= rot(iTime/6.);\n    vec4 cells = celler3D(rdd,vec3(3.3));\n    col = cells.xyz * (1.-cells.w);\n    vec3 bg = col;\n    vec2 d = march(cp,rd);\n    if( d.x > 0.)\n    {\n        vec3 pos = cp + rd * d.x;\n        vec4 cell = celler3D(pos,vec3(3.));\n        cell.xyz /= 3.;\n        col = cell.xyz;\n        vec3 N = getNormal(cell.xyz);\n        \n        vec3 sun = normalize(vec3(2.,4.,0.));\n        float diff = max(0.,dot(-sun,N));\n        diff = mix(diff , 1.,.1);\n        float sp = max(0.,dot(rd,reflect(N,sun)));\n        sp = pow(sp,16.) * 1.;\n        float rim = pow(clamp(1. - dot(N, -rd), 0., 1.), 13.);\n        vec3 mat = vec3(0.,1.,1.);\n        \n        vec4 ref = celler3D(reflect(N,sun),vec3(3.3));\n        ref.xyz = ref.xyz * (1.-ref.w);\n        \n        col = sp * ref.xyz + diff * mat + rim;\n        col += cell.xyz/10.;\n        col *= max(ref.xyz,0.);\n        //col = bg;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}