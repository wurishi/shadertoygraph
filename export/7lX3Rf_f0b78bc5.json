{"ver":"0.1","info":{"id":"7lX3Rf","date":"1622508719","viewed":115,"name":"voronoi shader - jairoandre","username":"jairoandre","description":"Another art of code tutorial. (Credits to Martijn for the excellent video).","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 n22(vec2 p) {\n    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    float m = 0.;\n    float t = iTime * .2;\n    \n    float minDist = 100.;\n    float cellIdx = 0.;\n    \n    vec3 col = vec3(0);\n    \n    if (false) {\n        // Naive approach (less performant)\n        for (float i=0.; i < 50.; i++) {\n            vec2 n = n22(vec2(i));\n            vec2 p = sin(n*t);\n            float d = length(uv-p);\n            m += smoothstep(.02, .01, d);\n\n            if (d < minDist) {\n                minDist = d;\n                cellIdx = i;\n            }\n        }\n    } else {\n        uv *= 2.;\n        vec2 gv = fract(uv) - .5;\n        vec2 id = floor(uv);\n        vec2 cid = vec2(0);\n        \n        for (float y = -1.; y <= 1.; y++) {\n            for (float x = -1.; x <= 1.; x++) {\n                vec2 offs = vec2(x, y);\n                vec2 n = n22(id + offs);\n                vec2 p = offs + sin(n*t)*.5;\n                p -= gv;\n                float ed = length(p); // euclidean distance\n                float md = abs(p.x) + abs(p.y); // manhattan distance\n                //float d =  mix(ed, md, sin(iTime * 2.)*.5 + .5);\n                float d = ed;\n                \n                if (d < minDist) {\n                    minDist = d;\n                    cid = id + offs;\n                }\n            }       \n        }\n        col = vec3(minDist);\n        //col.rg = cid * .1;\n        \n    }\n    //vec3 col = vec3(minDist);\n    //vec3 col = vec3(cellIdx/50.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}