{"ver":"0.1","info":{"id":"csBcDm","date":"1687758200","viewed":52,"name":"3.1 - Rectangles","username":"retonym","description":"exercises done while going through thebookofshaders.com\nhttps://thebookofshaders.com/07/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["thebookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 drawRect(vec2 bottomLeftPt, vec2 upperRightPt, vec3 rectColor, vec2 uv)\n{\n    vec2 uv1 = uv;\n    vec2 uv2 = 1.0-uv;\n    \n    vec2 bl = step(bottomLeftPt, uv);\n    vec2 ur = step((1.0 - upperRightPt), 1.0-uv);\n    \n    float pct = bl.x * bl.y * ur.x * ur.y;\n    \n    // color on white background\n    vec3 col = vec3(pct);\n    col *= (1.0 - rectColor);\n    col = 1.0 - col;\n    \n    return col;\n}\n\nvec3 drawRectOutline(vec2 bottomLeftPt, vec2 upperRightPt, vec3 rectOutlineColor, float outlineWidth, vec2 uv)\n{\n    vec2 uv1 = uv;\n    vec2 uv2 = 1.0-uv;\n    \n    vec2 bottomLeftPtInner = bottomLeftPt + outlineWidth;\n    vec2 upperRightPtInner = upperRightPt - outlineWidth;\n    \n    vec2 bl = step(bottomLeftPt, uv);\n    vec2 ur = step((1.0 - upperRightPt), 1.0-uv);\n    \n    vec2 blInner = step(bottomLeftPtInner, uv);\n    vec2 urInner = step((1.0 - upperRightPtInner), 1.0-uv);\n    \n    float rect = bl.x * bl.y * ur.x * ur.y;\n    float innerRect = blInner.x * blInner.y * urInner.x * urInner.y;\n    \n    // color on white background\n    vec3 col = vec3(rect - innerRect);\n    col *= (1.0 - rectOutlineColor);\n    col = 1.0 - col;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = vec2(0.0, 0.0);\n    float screenRatio = iResolution.x/iResolution.y;\n    uv.x = (fragCoord.x/iResolution.x) * screenRatio;\n    uv.y = fragCoord.y/iResolution.y;\n\n    // shared variables\n    vec2 bl = vec2(0.0, 0.0);\n    vec2 ur = vec2(0.0, 0.0);\n    float pct = 0.0;\n    vec3 col = vec3(0.0);\n    \n    \n    // exercise 1 - step version\n    bl = step(vec2(0.1), uv);\n    ur = step(vec2(0.1), 1.0-uv);\n    \n    // exercise 2 - smoothstep version\n    bl = smoothstep(vec2(0.1), vec2(0.15), uv);\n    ur = smoothstep(vec2(0.1), vec2(0.15), 1.0-uv);\n\n    // exercise 3 - floor version\n    bl = vec2(floor(.1 - uv.x), floor(.1 - uv.y));\n    ur = vec2(ceil(.9 - uv.x), ceil(.9 - uv.y));\n    \n    pct = bl.x * bl.y * ur.x * ur.y;\n    col = vec3(pct);\n    \n    // exercise 4 - define a drawRect method and use it\n    bl = vec2(0.2, 0.1);\n    ur = vec2(0.7, 0.6);\n    vec3 rectColor = vec3(1.0, 0.0, 0.0);\n    col = drawRect(bl, ur, rectColor, uv);\n    \n    // exercise 5 - make another method that draws just the outline of the rect\n    col = drawRectOutline(bl, ur, rectColor, .01, uv);\n    \n    \n    // exercise 6 - piet mondrian\n    // palette\n    const vec3 red = vec3(0.8, 0.0, 0.0);\n    const vec3 yellow = vec3(1.0, 0.8, 0.0);\n    const vec3 blue = vec3(0.0, 0.3, .8);\n    const vec3 black = vec3(0.0);\n    const vec3 white = vec3(1.0, .96, .88);\n    \n    // reset canvas to white\n    col = white;\n    float blackRightSide = 1.0 - step(1.0, uv.x);\n    col *= blackRightSide;\n    \n    // rectangles\n    col *= drawRect(vec2(0.0, 0.6), vec2(0.2, 1.0), red, uv);\n    col *= drawRectOutline(vec2(-.02, 0.6), vec2(0.2, 1.02), black, .03, uv);\n    col *= drawRectOutline(vec2(-.03, 0.6), vec2(01.03, 0.84), black, .03, uv);\n    \n    col *= drawRect(vec2(0.96, 0.6), vec2(1.0, 1.0), yellow, uv);\n    col *= drawRectOutline(vec2(0.75, -0.03), vec2(1.03, 1.03), black, .03, uv);\n    col *= drawRectOutline(vec2(0.94, -0.03), vec2(1.03, 1.03), black, .03, uv);\n    \n    col *= drawRect(vec2(0.75, 0.0), vec2(1.0, 0.07), blue, uv);\n    col *= drawRectOutline(vec2(0.75, -0.03), vec2(1.03, 0.073), black, .03, uv);\n    col *= drawRectOutline(vec2(0.17, -0.03), vec2(1.03, 0.073), black, .03, uv);\n    col *= drawRectOutline(vec2(0.17, -0.03), vec2(1.03, 0.84), black, .03, uv);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}