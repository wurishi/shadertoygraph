{"ver":"0.1","info":{"id":"4XcSWB","date":"1719460001","viewed":66,"name":"Lattes Morphing","username":"Borthralla","description":"Lattes Transform is f(z) = (z^2+1)^2/4z(z^2-1), this can be iterated for interesting results, this loops through iterations up to 5 times\nSee https://www.reddit.com/r/math/comments/q9eyyk/lattes_example_iterates_of_fz_z2124zz21/","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard","mobius","transform"],"hasliked":0,"parentid":"433SWB","parentname":"Lattes Transform"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nvec2 cMul(in vec2 z1, in vec2 z2) {\n    return  mat2(z1,-z1.y,z1.x) * z2;\n}\n\nvec2 cDiv(in vec2 z1, in vec2 z2) {\n    return z1 * mat2(z2,-z2.y,z2.x) / dot(z2,z2);\n}\n\nvec2 lattes(in vec2 z) {\n    vec2 z_2 = cMul(z, z);\n    vec2 numerator = z_2 + vec2(1.0, 0.);\n    numerator = cMul(numerator, numerator);\n    vec2 denom = cMul(vec2(4.0, 0.), cMul(z, z_2 - vec2(1.0, 0.)));\n    return cDiv(numerator, denom);\n}\n\nvec2 lattes_n(in vec2 z, in int n) {\n    vec2 result = z;\n    for (int i =0; i < n; i++) {\n        result = lattes(result);\n    }\n    return result;\n}\n\nvec2 lattes_n_fl(in vec2 z, in float n) {\n    vec2 result = z;\n    int fl = int(floor(n));\n    float factor = fract(n);\n    vec2 low = lattes_n(z, fl);\n    vec2 high = lattes(low);\n    return (1. - factor) * low + factor * high;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = 4. * (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y);\n    vec2 unit = vec2(1., 0.);\n    float factor = abs(sin(iTime * .1)) * 5.;\n    p = lattes_n_fl(p, factor); // 2 fixed points, loxodromic\n    //p = cDiv(unit, p); // 1 fixed point, parabolic\n    \n    // Use these for elliptic/hyperbolic/loxodromic transforms depending on where itime is\n    // itime on both means loxodromic\n    // just on theta is elliptic\n    // just on length is hyerbolic\n    float theta = atan(p.y, p.x);\n    float len = length(p);\n    float x_index = sin( PI* ( theta * 12. / PI - iTime ));\n    float y_index = sin( PI* ( log(len) * 4.  - iTime));\n   \n    // Use these for parabolic mobious transformations\n    //float x_index = sin( PI* ( p.x * 10. + iTime ));\n    //float y_index = sin( PI* ( p.y * 10.  ));\n    \n    float v = x_index*y_index;\n    \n    \n    //Thank you to Fabrice for the anti anliasing tip\n    fragColor = vec4( .5 + v/fwidth(v) );\n}","name":"Image","description":"","type":"image"}]}