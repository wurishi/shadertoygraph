{"ver":"0.1","info":{"id":"lfKGDw","date":"1712910329","viewed":163,"name":"Tetris Megistus","username":"DrNoob","description":"Inspired by https://thelastindex.com/gentle/ by Aric Maddux aka Tetris Megistus.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["grid","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Thomas Stehle\n// Title: Tetris Megistus\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n//\n// Inspired by https://thelastindex.com/gentle/ by Aric Maddux aka Tetris Megistus.\n\n#define ANIMATION\n\nconst vec3 k_bgColor  = vec3(236, 254, 250) / 255.0;\nconst vec3 k_palette0 = vec3( 35,  50,  80) / 255.0;\nconst vec3 k_palette1 = vec3( 78, 111, 146) / 255.0;\nconst vec3 k_palette2 = vec3(171, 214, 228) / 255.0;\nconst vec3 k_palette3 = vec3(187,  69,  65) / 255.0;\nconst float k_fillThresh = 0.6;              // Fill boxes above this noise threshold\nconst float k_numCols    = 40.0;             // Number of grid columns\nconst vec2 k_rowsIv      = vec2(10.0, 40.0); // Number of rows in a column is sampled from this interval\nconst vec2 k_boxWidthIv  = vec2(0.03, 0.09); // Box width is sampled from this interval\nconst vec2 k_boxHeightIv = vec2(0.10, 0.47); // Box height is sampled from this interval\nconst vec2 k_speedIv     = vec2(0.01, 0.02); // Speed of each column is sampled from this interval\n\n// Alpha-blend a source color onto a target color\nvec4 blend(in vec4 src, in vec4 tgt) {\n    float a = src.a + tgt.a * (1.0 - src.a);\n    vec3 rgb = (src.rgb * src.a + tgt.rgb * tgt.a * (1.0 - src.a)) / a;\n    return vec4(rgb, a);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash(in float p) {\n    p = fract(p * 0.011);\n    p *= p + 7.5;\n    p *= p + p;\n    return fract(p);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash(in vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * 0.13);\n    p3 += dot(p3, p3.yzx + 3.333);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Value noise for 2D input by Morgan McGuire\n// https://www.shadertoy.com/view/4dS3Wd\nfloat vnoise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    // Four corners in 2D of a tile\n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Smooth interpolation\n    vec2 u = f*f * (3.0 - 2.0*f);\n\n    // Mix 4 corners\n    float v = mix(a, b, u.x) +\n                 (c - a)* u.y * (1.0 - u.x) +\n                 (d - b) * u.x * u.y;\n    return -1.0 + 2.0 * v;\n}\n\nfloat sdf_box(in vec2 p, in vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nvec3 palette_color(in float r) {\n    return (r < 0.25) ? k_palette0 :\n           (r < 0.50) ? k_palette1 :\n           (r < 0.75) ? k_palette2 : k_palette3;\n}\n\nvec4 grid(vec2 p) {\n    // Column\n    float x = p.x * k_numCols;\n    float colId = floor(x);\n    \n    // Column-dependent parameters\n    float r0 = hash(colId);\n    float r1 = hash(13.1 * colId);\n    float numRows = floor(mix(k_rowsIv.x, k_rowsIv.y, r0));\n#ifdef ANIMATION\n    float speed = mix(k_speedIv.x, k_speedIv.y, r1);\n#else\n    float speed = 0.0;\n#endif\n    \n    // Row\n    float y = (p.y + 0.5 * sin(speed * iTime)) * numRows;\n    float rowId = floor(y);\n    \n    // Cell\n    vec2 cellId = vec2(colId, rowId);\n    vec2 cc = vec2(fract(x), fract(y));\n    \n    // Cell-dependent parameters\n    float r2 = hash(37.3 * cellId);\n    float r3 = hash(47.1 * cellId);\n    float bw = mix(k_boxWidthIv.x, k_boxWidthIv.y, r2);\n    float bh = mix(k_boxHeightIv.x, k_boxHeightIv.y, r3);\n    \n    // Box SDF\n    vec2 bc = cc - 0.5;\n    bc.x *= numRows / k_numCols;\n    float d = sdf_box(bc, vec2(bw, bh));\n    \n    // Cell-dependent color\n    float r4 = hash(73.3 * cellId);\n    vec3 color = palette_color(r4);\n    \n    // Cell- and value noise-dependent fill mode\n    float n = 0.5 + 0.5 * vnoise(0.1 * cellId);\n    float a = (n > k_fillThresh) ?\n                  step(d, 0.0) : \n                  smoothstep(1.0, 0.0, abs(d) / min(0.025, fwidth(d)));\n    \n    return vec4(color, a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.y;\n    fragColor = blend(grid(st), vec4(k_bgColor, 1.0));\n}\n","name":"Image","description":"","type":"image"}]}