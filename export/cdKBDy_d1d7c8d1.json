{"ver":"0.1","info":{"id":"cdKBDy","date":"1698613063","viewed":566,"name":"Bricks [300]","username":"Xor","description":"I wanted to try the [url=https://www.shadertoy.com/view/dsyBDy]double mod pattern[/url] in 3D.","likes":64,"published":1,"flags":0,"usePreview":0,"tags":["3d","voxels","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"Bricks\" by @XorDev\n    \n    I wanted to try the double mod pattern (shadertoy.com/view/dsyBDy) in 3D.\n\n    X: X.com/XorDev/status/1718731726434824357\n    twigl: twigl.app/?ol=true&ss=-NhxByN14idHvVurpv8Q\n    \n    <300 chars playlist: shadertoy.com/playlist/fXlGDN\n    -5 Thanks to FabriceNeyret2\n*/\n\n\nvoid mainImage( out vec4 O, vec2 I)\n{\n    int i;\n    for(vec2 c = iResolution.xy, \n             u = (c*.5 - roundEven(I)) / c.y, \n             p, z = p+2e1\n           ; i = int(p)^int(p.y)^int(z), z.x < 1e2 && i%93%43 < 32\n           ; p = iTime*vec2(2,9) - u*z \n       )\n        z += min( fract(-z), min( c = fract(p*sign(u)) / abs(u),c.yx) ) + 2e-5,\n        O = ( 1e2 - z.x ) * ( 2. - cos(vec4(i/=3,i+5,i+4,0)) );\n    O /= 2e2 + fwidth(O.g)*5e2;\n}\n//Original [300]\n/*\nvoid mainImage( out vec4 O, vec2 I)\n{\n    //Voxel index for coloring\n    int i;\n    //Resolution, rounded/centered screen coords, xy pos, z (vec2 for convenience), closest plane\n    for(vec2 c=iResolution.xy, u=(roundEven(I)-c*.5)/c.y, p, z=p+2e1;\n            //Loop to a max distance of 100 or when you hit something (xor + double mod technique)\n            z.x<1e2 && (i=int(p)^int(p.y)^int(z))%93%43<32; //Try playing with these numbers!\n            //Compute next xy pos with time offset\n            p=u*z+iTime*vec2(2,9))\n\n        //Compute the distance to the nearest x and y planes\n        c=fract(-p*sign(u))/abs(u),\n        //March to next nearest x, y and z plane\n        z+=min(min(c,c.yx), fract(-z))+2e-5,\n        //Colorize with depth and voxel index\n        O.rgb=(1e2-z.x)*(2.-cos(vec3(i/=3,i+5,i+4)));\n    \n    //Dampen and shade\n    O/=2e2+fwidth(O.g)*5e2;\n}\n*/","name":"Image","description":"","type":"image"}]}