{"ver":"0.1","info":{"id":"7lKBzt","date":"1665098734","viewed":168,"name":"wet hallway automata","username":"Carandiru","description":"investigating the superformula again, fixed nans.   * 30s *   100s oooze!!","likes":3,"published":3,"flags":48,"usePreview":0,"tags":["automata","life","cellular"],"hasliked":0,"parentid":"sstfWj","parentname":"automata super"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// investigating the superformula again, fixed nans.   * 30s *   100s oooze!!\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0f - 1.0f;\n    uv *= mix(1.0f, 0.7f, smoothstep(0.0f, 1.0f, iTime*0.25f));\n    uv = uv * 0.5f + 0.5f;\n    \n    float s = textureLod(iChannel0, uv, 0.0).r;\n    \n    vec3 color = vec3(s*s*s*s);\n\n    fragColor = vec4(pow(color, vec3(1.0f/2.2f)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime + 50.0f;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float k = 0.0f;\n    \n    int prev_keys = 0;\n    k = texelFetch(iChannel0, ivec2(fragCoord), 0).a;\n    prev_keys = int(k * 16.0f);\n    \n    int keys = 0;\n    keys |= (int(texelFetch( iChannel2, ivec2(KEY_LEFT,1),0 ).x) << 0);\n    keys |= (int(texelFetch( iChannel2, ivec2(KEY_RIGHT,1),0 ).x) << 1);\n    keys |= (int(texelFetch( iChannel2, ivec2(KEY_UP,1),0 ).x) << 2);\n    keys |= (int(texelFetch( iChannel2, ivec2(KEY_DOWN,1),0 ).x) << 3);\n    \n    k = float(keys) / 16.0f;\n    \n    bvec4 directions = bvec4(false, false, false, false);\n    \n    directions[0] = bool((0x1 & keys) | (0x1 & prev_keys));\n    directions[1] = bool((0x2 & keys) | (0x2 & prev_keys));\n    directions[2] = bool((0x4 & keys) | (0x4 & prev_keys));\n    directions[3] = bool((0x8 & keys) | (0x8 & prev_keys));\n    \n    float s = 0.0, n = 0.0, v = 0.0;\n    \n    s += textureLod(iChannel0, uv, 0.0).r * 0.5f;\n    \n    n = textureLod(iChannel0, (fragCoord.xy + vec2(0, -1))/iResolution.xy, 0.0).r;\n    v = max(v, n);\n    s += n;\n    \n    n = textureLod(iChannel0, (fragCoord.xy + vec2(-1,  0))/iResolution.xy, 0.0).r;\n    v = max(v, n);\n    s += n;\n    \n    n = textureLod(iChannel0, (fragCoord.xy + vec2( 0, 1))/iResolution.xy, 0.0).r;\n    v = max(v, n);\n    s += n;\n    \n    n = textureLod(iChannel0, (fragCoord.xy + vec2( 1,  0))/iResolution.xy, 0.0).r;\n    v = max(v, n);\n    s += n;\n    \n    n = textureLod(iChannel0, (fragCoord.xy + vec2(-1, -1))/iResolution.xy, 0.0).r;\n    v = max(v, n);\n    s += n;\n    \n    n = textureLod(iChannel0, (fragCoord.xy + vec2(-1,  1))/iResolution.xy, 0.0).r;\n    v = max(v, n);\n    s += n;\n    \n    n = textureLod(iChannel0, (fragCoord.xy + vec2( 1, -1))/iResolution.xy, 0.0).r;\n    v = max(v, n);\n    s += n;\n    \n    n = textureLod(iChannel0, (fragCoord.xy + vec2( 1,  1))/iResolution.xy, 0.0).r;\n    v = max(v, n);\n    s += n;\n    \n    float n1 = 2.0/s;\n    float n2 = v;\n    float n3 = v * 9.0f;\n    float m = (GOLDEN_RATIO_ZERO - (GOLDEN_RATIO)) * mix(GOLDEN_RATIO, 0.01f * t, smoothstep(0.0f, 1.0f, t*0.1f)) * s / (v);\n    float a = GOLDEN_RATIO_ZERO;\n    float b = GOLDEN_RATIO * 0.58f;\n    \n    s = gielisFormula(uv * 2.0 - 1.0, vec3(n1, n2, n3), vec3(a, b, m));\n    \n    /////////////////////\n    if (iFrame < 100) {\n    \n        s = textureLod(iChannel1, (fragCoord + float(iFrame)*64.0)/1024.0, 0.0).r;\n    }\n    \n    s = abs(clamp(s, -100.0f, 10.0f));\n    s = s * linearstep(-100.0f, 10.0f, s);\n    \n    fragColor = vec4(vec3(s), k);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define GOLDEN_RATIO (1.61803398874989484820)\n#define GOLDEN_RATIO_ZERO (0.61803398874989484820)\n\n// from https://www.shadertoy.com/view/fstfDS\nfloat gielisFormula(vec2 teta, vec3 n, vec3 abm){\n    float b1 = pow(abs(cos((abm.z*teta.x)/4.0) / abm.x), n.y);\n    float b2 = pow(abs(sin((abm.z*teta.y)/4.0) / abm.y), n.z);\n    return pow(b1+b2, -1.0/(n.x));\n}\n\n// https://www.shadertoy.com/view/Xt23zV - Dave Hoskins \n// Linear Step - give it a range [edge0, edge1] and a fraction between [0...1]\n// returns the normalized [0...1] equivalent of whatever range [edge0, edge1] is, linearly.\n// (like smoothstep, except it's purely linear\nfloat linearstep(in float edge0, in float edge1, in float x)\n{\n    return( clamp((x - edge0) / (edge1 - edge0), 0.0f, 1.0f) );\n}","name":"Common","description":"","type":"common"}]}