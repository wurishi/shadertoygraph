{"ver":"0.1","info":{"id":"tsBcDR","date":"1586453349","viewed":161,"name":"projet final graphique","username":"bouiflanemaryam","description":"graphique","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["graphique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Maryam Bouiflane\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.01; // Marching epsilon\nconst int Steps = 200;      // Number of steps\n\n// Lipschitz constant\nconst float K=2.0;\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Terrain -----------------------------------------------------------------------------------------------\n      \n// Smooth compactly supported polynomial\n// x : Real\n// r : Radius\nfloat Smooth( in float x, in float r)\n{\n    x/=r;\n    x=clamp(x,0.0,1.0);\n    float y=(1.0-x*x);\n    return y*y*y;\n}\n\nfloat Plat (float h,in float cz)\t\n{\t\n    return cz;\t\n}\n\n// Sphere \n// p : Point, z will be used for height of flat part\n// c : Center \n// r : Radius\nfloat Flatten( in vec2 p, in float h, in vec3 c, in float r)\t\n{\t\n    float d = length(p-c.xy);\t\n    float u = Smooth(d,r);\t\n    float h1=h;\t\n    float h2=Plat(h,c.z);\t\n    return mix(h1,h2,u);\t\n}\n\nfloat Flatten2( in vec2 p, in float h, in vec3 c, in float r)\t\n{\t\n    float d = length(p-c.xy);\t\n    float u = Smooth(d,r);\t\n    float h1=h;\t\n    float h2=c.z+20.0*sin((p.x-c.x)/20.0);\t\n    return mix(h1,h2,u);\t\n}\n\nfloat Gain ( float z, float z1, float z2)\t\n{\t\n    if (z<z1) return z;\t\n    if ( z>z2) return z;\t\n    float t=(z-z1)/(z2-z1);\t\n    float zz=z1+(z2-z1)*t*t*t;\t\n    return zz; \t\n}\n\nfloat Smooth ( in float x, in float ri, float re)\t\n{\t\n    if (x>ri) return 1.0;\t\n    x=(x-ri)/(re-ri);\t\n    return Smooth(x,1.0);\t\n}\n\nfloat Plateau (in vec2 p, in float h, in vec3 c, in float r, in float z1, in float z2)\t\n{\t\n    float d= length(p-c.xy);\t\n    float u= Smooth(d,r,2.0*r);\t\n    float h1=h;\t\n    float h2=Gain(h,z1,z2);\t\n    return mix(h1,h2,u);\t\n}\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Terrain( in vec2 p )\n{\n\tconst float reduir = 210.0;\n    // Rotation matrix\n\tconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\n\n    const float l0=530.0;\n    const float a0=195.0;\n    \n\t// Scale\n    p = p/l0;\n    \n    float a = 0.0;\n    float b = 1.0;\n    for( int i=0; i<9; i++ )\n    {\n        float n = Noise(p);\n        a += b*n;\n\t\tb *= 0.5;\n        p *= m2*2.0;\t\n    }\t\n\treturn a0*a - reduir;\n} \n\n// Implicit surface defining the terrain\n// p : Point\nV ImplicitTerrain(in vec3 p,int index)\t\n{\t\n    float z = Terrain( p.xy );\t\n\tz = Flatten(p.xy, z, vec3(200.0,200.0,150.0), 200.0); //montagne du milieu\n    z = Flatten2(p.xy, z, vec3(-100.0,210.0,200.0), 200.0);\t//montagne de gauche\n    z = Flatten(p.xy, z, vec3(100.0,10.0,5.0), 160.0); //applanissemnt du milieu(vers maisonette)\n    z = Flatten(p.xy, z, vec3(350.0,0.0,230.0), 120.0); //montagne de droite\n    z = Plateau(p.xy,z,vec3(10.0,10.0,100.0), 400.0,10.0,50.00); //plateau de droite\t\n    float h = p.z - z; \t\n    return V(h,index);\t\n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\n// index : Texture index\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\n// index : Texture index\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n// Union, preserve the color of the first object\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        if (a.v<0.0)\n        {\n        \treturn V(b.v,a.i);\n        }\n        else\n        {\n            return V(b.v,b.i);\n        }\n    }\n}\n\nV Union3(V a, V b, V c) {\n\treturn Union(Union(a, b), c);\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Inter(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\nV Inter3(V a, V b, V c) {\n    return Inter(a, Inter(b, c));\n}\n\nV Inter6(V a, V b, V c, V d, V e, V f) {\n    return Inter(Inter3(a, b, c), Inter3(d, e, f));\n}\n\n//Différence ( max(a,-b) )\nV diff(V a,V b)\n{\n\treturn V(max(a.v,-b.v),a.i);\n}\n\n// cree un cube parallele au plan, selon deux sommets opposés a et b\n// p : point\n// a, b : sommets opposés l'un l'autre\nV boite ( vec3 p, vec3 a, vec3 b, int i ) {\n    vec3 x = vec3(1.0, 0.0, 0.0);\n  \tvec3 y = vec3(0.0, 1.0, 0.0);\n  \tvec3 z = vec3(0.0, 0.0, 1.0);\n    return Inter6(\n            Plane(p, -x, a, i),\n            Plane(p, -y, a, i),\n            Plane(p, -z, a, i),\n            Plane(p, x, b, i),\n            Plane(p, y, b, i),\n            Plane(p, z, b, i)\n        );\n}\n\n// cree un cylindre selon un centre de base a, une normale u, et un rayon r\n// p : point\n// a : \nV CylindreInf( vec3 p, vec3 a, vec3 u, float r, int i ) {\n    float l= dot((p-a), u);\n    float d = distance(p, a); \n    return V( (sqrt(d*d - l*l) - r), i);\n}\n\nV Cylindre( vec3 p, vec3 a, vec3 b, float r, int i ) {\n    vec3 r3 = vec3(r, r, r);\n    vec3 l = (b-a)/length(b-a);\n    V ci = CylindreInf(p, a, l, r, i);\n    V pa = Plane(p, a, l, i);\n    V pb = Plane(p, b, -l, i);\n    return Inter( ci, boite(p, a-r, b+r, 3) );\n}\n\n// maisonnette\nV cube (vec3 p, vec3 o, float t) {\n\tvec3 a = vec3(-t, -t, -0.2*t) + o;\n    vec3 b = vec3(t, t, 1.8*t) + o;\n    return boite(p, a, b, 7);\n}\n\n// Water ------------------------------------------------------------------------------------------------\n\n// Water heightfield\n// x : Position in the plane\nfloat Water( in vec2 x )\n{\n    return 14.0*Noise(x/30.0+iTime)- 14.0;\n} \n\n// Implicit surface defining the terrain\n// p : Point\n// index : texture index\nV ImplicitWater(in vec3 p, int index)\n{\n\tfloat h = p.z - Water( p.xy );\n    return V(h,index);\n}\n\n// Scene --------------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nV Object(vec3 p)\n{\n   V u =Union(ImplicitTerrain(p,0),\n              ImplicitWater(p,1)\n  \t\t\t );\n    \n      u=Inter(u,Sphere(p,vec3(0.0,0.0,0.0),450.0,2)\n             );\n    \n\t  u= diff(u,\n             Cylindre(p,vec3(-100,-100.0,55.0),vec3(300.0,300.0,45.0),40.0,6)\n             );\n    \n      u=Union3(u,\n               Union(Cylindre(p,vec3(30.0,-405.0, 30.0),vec3(30.0,-405.0, 60.0),10.0,6),\n             \t  Sphere(p,vec3(30.0,-405.0, 90.0),20.0,8)\n                    ),\n               Union(Cylindre(p,vec3(-25.0,-405.0, 30.0),vec3(-25.0,-405.0, 60.0),10.0,6),\n             \t  Sphere(p,vec3(-25.0,-405.0, 90.0),20.0,5)\n                    )\n              );\n    \n       u=Union(u,\n               Union(cube(p, vec3(10.0,-100.0, 10.0), 25.0), \n              \t\tcube(p, vec3(10.0,-100.0, 50.0), 10.0)\n        \t\t\t)\n               );\n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n    float v = Object(p).v;\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/K);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nvec3 TextureRock(in vec3 p) {\n  return (mix(vec3(0.92,0.91,0.90),vec3(0.64,0.52,0.32),Fbm(p/50.0)) - vec3(0.2, 0.2, 0.2));   \n}\n\nvec3 TextureWater(in vec3 p)\n{\n    vec3 q = p + 1.0*N3(p) + 0.5*N3(p/0.5);\n    q.z=(q.x+5.0*iTime);\n    vec3 Bleu = vec3(0.08,0.59,0.97);\n    vec3 Bleu2 = vec3(0.08,0.18,0.97);\n    vec3 col = mix(Bleu,Bleu2,Fbm(q/2.0));\n    return col;    \n}\n\nvec3 TextureBorder(in vec3 p)\n{\n    return vec3(0.25,0.24,0.24);   \n}\n\nvec3 TextureEcume(in vec3 p)\n{ \n    return vec3(1.0,1.0,1.0);\n}\n\nvec3 TextureHerbe(vec3 p) {\n    vec3 q = p + 1.0*N3(p) + 0.5*N3(p/0.5);\n    q.z=(q.x);\n \tvec3 Vert = vec3(0.1,0.3,0.1);\n    vec3 Vert2 = vec3(0.0,0.1,0.0);\n    vec3 col = mix(Vert,Vert2,Fbm(q/2.0));\n    return col;\n}\n\nvec3 TexturePierre(in vec3 p) {\n    return mix(vec3(0.22,0.22,0.30),vec3(0.60,0.62,0.80),1.0*Noise(p/3.0));\n}\n\nvec3 TextureBois(in vec3 p) {\n    \n    float d=sqrt(p.x*p.x+p.y*p.y);\n    float u=d/1.5;\n\n    float s=sin(u*2.0*3.14);\n\n    s=(s+1.0)/2.0;\n\n    return mix(vec3(0.45,0.2,0.1),vec3(0.4,0.15,0.05),s);\n}\n\nvec3 TextureDamier (in vec3 p)\n{\n   if (sin(p.x) >= 0.0 == sin(p.y) >= 0.0 == sin(p.z) >= 0.0)\n   {\n       return vec3(0.0,0.0,0.0);\n   }\n    \n   if (sin(p.x) <= 0.0 != sin(p.y) <= 0.0 != sin(p.z) <= 0.0)\n   {\n       return vec3(1.0,1.0,1.0);\n   } \n}\n\n//texture marbre\nfloat Turbulence(vec3 p)\n{\n    float d=sqrt(p.x*p.x+p.y*p.y);\n\tfloat t=Noise(p);\n    for (float i=0.5; i<0.05; i/=2.0)\n    {\n     \tt+=i+Noise(p/i);   \n    }\n    t/=2.0;\n \treturn t; \n}\n\nvec3 Noise3D(vec3 p)\n{\n \treturn vec3(Noise(p), Noise(p + vec3(165.0,126.0,127.0)), Noise(p + vec3(34.0,242.0,342.0)));\n}\n\nfloat Ligne(vec3 p)\n{\n \tvec3 q=p+1.0*Noise3D(p)+0.5*Noise3D(p/0.5);\n    float z=abs(mod(q.z,0.5)-0.5)*3.0*Noise(p);\n    return smoothstep(z,0.0,0.02);\n}\n\nvec3 rayure(vec3 p,vec3 c1,vec3 c2)\n{\n    float l=Ligne(p);\n    return mix(c1,c2,l);\n}\n\nvec3 TextureMarbre(vec3 p,vec3 c1,vec3 c2)\n{\n \t vec3 q=p+10.0*Turbulence(vec3(Noise(p),Noise(p+vec3(5.2,7.1,2.3)),Noise(p+vec3(4.5,8.7,9.1))));\n     return rayure(q,c1,c2);\n}\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n    V vp= Object(p);\n    if (vp.i==0)\n    {      \n        return TextureRock(p);\n    }\n    else if (vp.i==1)\n    {\n        return TextureWater(p);\n    }\n    else if (vp.i==2)\n    {\n        return TextureBorder(p);\n    }\n    else if (vp.i==3)\n    {\n        return TextureEcume(p);\n    }\n    else if (vp.i==4)\n    {\n        return TextureHerbe(p);\n    }\n    else if (vp.i==5)\n    {\n        return TexturePierre(p);\n    }\n    else if (vp.i==6)\n    {\n        return TextureBois(p);\n    }\n    else if (vp.i==7)\n    {\n        return TextureDamier(p);\n    }   \n    else if (vp.i==8)\n    {\n        return TextureMarbre(p,vec3(0.0,0.0,0.0),vec3(1.0,1.0,1.0));\n    }\n}\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n\tvec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\n    V vp= Object(p);\n    vec3 n = ObjectNormal( p );\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        // Mountains\t\t\n        if (vp.i==0)\n        {\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n            \n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.2,0.2,0.2);\n            \n        //Herbe\n        float herbe = 1.0;\n        herbe = smoothstep(150.0, 10.0, p.z + 150.0*Noise(p/250.0)); \n        col = mix(col,TextureHerbe(p/50.0), herbe);\n          \n         // Neige\n         float neige = 0.0;\n            // Neige selon hauteur\n            neige = smoothstep(150.0, 230.0, p.z + 150.0*Noise(p/250.0));\n            // Neige selon pente\n            if(dot(n, vec3(0.0,0.0,1.0)) < 0.6) neige = 0.0;\n            // Pas de neige négative\n            if(neige < 0.0) neige = 0.0;\n         col = mix(col, vec3(0.9, 0.9, 1.0), neige);\n        \n        }\n        \n        // Water\n        if (vp.i==1)\n        {\n       \n     /* //Reflets 1 water\n        float reflet = 1.0;\n        reflet = smoothstep(0.95,0.90,dot(n, vec3(0.0,0.0,1.0)));\n        col = mix(col,vec3(0.95,0.96,0.96), reflet);\n     */  \n            \n         //Reflets 2 water\n         vec3 ref = reflect( rd, n ); \n         bool br;\n         int itr;\n         float tr = SphereTrace(p + 0.15*n, ref, View, br, itr);\n         if (br)\n         {  col = mix(TextureEcume(p), TextureWater(p), p.z);}\n         \n\t\t // Pseudo diffuse lighting\n\t\t float dif = 0.5*(1.0+dot( light1, n ));\n         dif*=dif;\n           \n         col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n        }\n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col), t );\n    }\n}\n\n\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float time = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( time, ro);   \n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing\n// Eric Galin\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\nvec3 N3(vec3 p) {\n    return vec3(Noise(p), Noise(p + vec3(165.0,126.0,127.0)), Noise(p + vec3(34.0,242.0,342.0)));\n}\n\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1350.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,70.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}