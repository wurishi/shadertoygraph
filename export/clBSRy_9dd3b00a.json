{"ver":"0.1","info":{"id":"clBSRy","date":"1676238672","viewed":76,"name":"Helping coloring things","username":"ianertson","description":"In response to someone who needed help here:\nhttps://www.shadertoy.com/view/DlBXRG","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["help","response","reply"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define T (iTime)\n\n\n// `id` here is an unique id for each ball,\n// you can use this to choose a color\nvec3 getColorForBall(float id) {\n    const vec3 colors[4] = vec3[4](vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, 1),vec3(1, 0, 1));\n    return colors[int(abs(id))%4];\n}\n\nfloat circle(vec2 uv, vec2 p, float r) {\n    return 1.0 - smoothstep(r-(r*0.2), r+(r*0.2), distance(uv, p));\n}\n\nvec3 grid(vec2 uv, float gridSize) {\n    vec3 col = vec3(0.0);\n    uv *= max(1.0, gridSize);\n    vec2 id = floor(uv);\n    vec2 lv = fract(uv);\n    float ii = id.x*gridSize+id.y; // 1D id\n    \n    \n    vec3 ballColor = getColorForBall(ii); // get a unique color for current ball\n    \n    uv.x += cos((ii+1.)*(T+ii))*0.1; // just some unique movement for each ball using their ID\n    \n    vec2 d = normalize(id);\n    col += ballColor * circle((uv+(lv*2.0-1.0)), vec2((ceil(lv.x)*0.5)+(id.x), 0.0), 0.2);\n    \n    col += max(0.0, 1.0-ceil(min(lv.x, lv.y)-0.01));\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = (fc-0.5*R.xy)/R.y;\n    \n    col += grid(uv, 2.);\n    \n    O = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}