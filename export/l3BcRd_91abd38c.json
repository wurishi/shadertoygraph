{"ver":"0.1","info":{"id":"l3BcRd","date":"1727574721","viewed":61,"name":"Taiji with Bagua","username":"ivan777","description":"Taiji with Bagua","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1416\nbool cut_sides = false;\n\nmat2 rotate2D(float angle){\n\tmat2 matrix = mat2(\n\t\tvec2(cos(angle), -sin(angle)), \n\t\tvec2(sin(angle), cos(angle))\n\t);\n\treturn matrix;\n}\n\nfloat bar_mask(vec2 uv, float dist, int idx){\n\t// idx==0 for inner\n    // idx==1 for mid\n    // idx==2 for outter\n\tuv *= 2.0;\n\tfloat a = (atan(uv.y, uv.x) + PI)  ;\n\tfloat r = length(uv) * 2.0;\n\t\n\tfloat a_f = fract(a * 4.0 / PI + 0.5);\n\tfloat a_sec = 2.0 * PI / 8.0; \n\tfloat d = cos(floor(0.5 + a / a_sec) * a_sec - a) * length(uv);\n\t\n\tfloat cut_mask = smoothstep(0.38 + 1e-4, 0.38, abs(a_f - 0.5));\n\tfloat mask = smoothstep(0.03 + 1e-4, 0.03, abs(d - dist)) * cut_mask;\n\t\n\t// cut bars in the middle\n\tfloat size = 0.03;\n\tcut_mask = 0.0;\n\tif (idx == 0){\n\t\tuv = rotate2D(0.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(1.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(5.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(1.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t} else if (idx == 1){\n\t\tuv = rotate2D(4.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(1.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(1.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(1.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t} else if (idx == 2){\n\t\tuv = rotate2D(0.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(3.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(2.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t\tuv = rotate2D(1.0 * a_sec) * uv;\n\t\tcut_mask += smoothstep(size + 1e-4, size, abs(uv.y)) * smoothstep(0.03 + 1e-4, 0.03, abs(uv.x - dist));\n\t}\n\t\n\t// cut sides\n\tif (cut_sides){\n\t\tcut_mask += (smoothstep(0.05 + 1e-4, 0.05, abs(uv.x-0.24)) + \n\t\t\t\t\tsmoothstep(0.05 + 1e-4, 0.05, abs(uv.x+0.24))) ;\n\t\tuv = rotate2D(a_sec) * uv;\n\t\tcut_mask += (smoothstep(0.05 + 1e-4, 0.05, abs(uv.x-0.24)) + \n\t\t\t\t\tsmoothstep(0.05 + 1e-4, 0.05, abs(uv.x+0.24))) ;\n\t\tuv = rotate2D(a_sec) * uv;\n\t\tcut_mask += (smoothstep(0.05 + 1e-4, 0.05, abs(uv.x-0.24)) + \n\t\t\t\t\tsmoothstep(0.05 + 1e-4, 0.05, abs(uv.x+0.24))) ;\n\t\tuv = rotate2D(a_sec) * uv;\n\t\tcut_mask += (smoothstep(0.05 + 1e-4, 0.05, abs(uv.x-0.24)) + \n\t\t\t\t\tsmoothstep(0.05 + 1e-4, 0.05, abs(uv.x+0.24))) ;\n\t}\n\t\n\tmask -= cut_mask;\n\tmask = clamp(mask, 0.0, 1.0);\n\treturn mask;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n\tvec3 color = vec3(1.0);\n    float TIME = iTime;\n    \n\tuv *= 2.0;\n    uv = rotate2D(PI / 2.0) * uv;\n\tuv = rotate2D(-TIME / 2.0) * uv;\n\t\n\tfloat curve = sign(-uv.x) * 0.25 * sqrt(1.0 - pow(sign(-uv.x) * 4.0 * -uv.x - 1.0, 2.0));\n\tcolor *= smoothstep(0.0, 1e-4, uv.y - curve);\n\tcolor += smoothstep(0.5, 0.5 + 1e-4, length(uv));\n\t\n\tcolor -= smoothstep(0.08 + 1e-4, 0.08, distance(uv, vec2(0.25, 0.0)));\n\tcolor += smoothstep(0.08 + 1e-4, 0.08, distance(uv, vec2(-0.25, 0.0)));\n\t\n\tcolor *= smoothstep(0.52, 0.52 + 1e-4, length(uv)) + smoothstep(0.5 + 1e-4, 0.5, length(uv));\n\tcolor = clamp(color, 0.0, 1.0);\n    \n\tuv = rotate2D(TIME / 2.0) * uv;\n    uv = rotate2D(-PI / 2.0) * uv;\n\tuv /= 2.0;\n    \n    \n\tfloat SCALED_TIME = TIME / 1.5;\n\tfloat a_sec = 2.0 * PI / 8.0; \n    \n\tfloat rotate_angle = step(1.0, mod(SCALED_TIME, 2.0)) * \n                         floor((SCALED_TIME+1.0)/2.0) + (SCALED_TIME-floor(0.5 * SCALED_TIME)) * \n                         step(1.0, mod((SCALED_TIME-1.0), 2.0));\n\trotate_angle *= a_sec / 2.0;\n    \n\tuv = rotate2D(rotate_angle) * uv;\n\tcolor -= vec3(bar_mask(uv, 0.89, 2));\n\tuv = rotate2D(2.0 * -rotate_angle) * uv;\n\tcolor -= bar_mask(uv, 0.77, 1);\n\tuv = rotate2D(2.0 * rotate_angle) * uv;\n\tcolor -= bar_mask(uv, 0.65, 0);\n    color = clamp(color, 0.0, 1.0);\n    \n    \n\t\n\tfragColor = vec4(color, 1.0);\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}