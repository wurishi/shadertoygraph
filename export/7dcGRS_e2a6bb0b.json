{"ver":"0.1","info":{"id":"7dcGRS","date":"1630042188","viewed":210,"name":"filtered grid proto bug","username":"Carandiru","description":"prototyping usage of filtered grid by iq.\ntrying to find out why it at the very top, there is a hair-width of black. uv = (1.0f - uv) - 0.5f seems balanced to draw the other side. both sides must be drawn to align my grid properly. bottom-left & top-right","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["grid","filtered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// prototyping usage of filtered grid by iq.\n// trying to find out why it at the very top, there is a hair-width of black. \n// uv = (1.0f - uv) - 0.5f seems balanced to draw the other side.\n// this is all used on an isometric 3d surface eventually where the filtering is required.\n// where is the problem? is it because the resolution of the shader toy is odd? it's (for me)\n// 1000x563 <--- shouldn't this be even, and possibly always a multiple of 8?\n// im using a ultrawide monitor. 2560x1080.\n\nconst float   _divisions = 1.0f;  // = n x n   grid\nconst float   _invthick = 64.0;\n\n// iq - https://iquilezles.org/articles/filterableprocedurals\nfloat filteredGrid( in vec2 p, in vec2 dpdx, in vec2 dpdy, in float N )\n{\n    vec2 w = max(abs(dpdx), abs(dpdy));\n    vec2 a = p + 0.5*w;                        \n    vec2 b = p - 0.5*w;           \n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-\n              floor(b)-min(fract(b)*N,1.0))/(N*w);\n    return (1.0-i.x)*(1.0-i.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv.x *= iResolution.x/iResolution.y;\n    \n    uv = mod(uv * _divisions * 0.5f, 0.5f); \n    \n    vec2 dfdx_uv = dFdx( uv ); \n    vec2 dfdy_uv = dFdy( uv ); \n\n    float grid = 0.0f;\n    \n    // draw bottom left //\n    grid += 1.0f - filteredGrid(uv, dfdx_uv, dfdy_uv, _invthick);\n    \n    // draw top right //\n    uv = (1.0f - uv) - 0.5f;\n    grid += 1.0f - filteredGrid(uv, dfdx_uv, dfdy_uv, _invthick);\n    \n    vec3 color;\n    \n    color = vec3(1) * (grid);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}