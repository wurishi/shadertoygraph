{"ver":"0.1","info":{"id":"WddBWM","date":"1605265241","viewed":235,"name":"Contrast small-big","username":"illus0r","description":"Contrast small-big","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["inversion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f(float t) {\n    // just finetuning the time. \n    // looks difficult, hence here's simplified version\n    // which makes pretty the same:\n    //return sin(t)*.5+.5;\n    return .1+pow(10.*(sin(t*3.+3.1415)*.5+.5), 1.);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    // two similar 3-liners below draw two circles:\n    \n    // `- vec2(.05,0.)` is optional. It moves a circle a bit to the right\n    vec2 uv1 = uv - vec2(.05,0.);\n    // it's the most difficult part.\n    // Learn more on https://en.wikipedia.org/wiki/Inversive_geometry\n    // try commenting this line out to see the shape without the inversion.\n    uv1 = normalize(uv1)/length(uv1);\n\t// drawing the shape which is just a right half of the screen.\n    float sph1 = step(f(iTime),uv1.x);\n\n    // move a circle a bit to the left\n    vec2 uv2 = uv - vec2(-.05,0.);\n    // inversion\n    uv2 = normalize(uv2)/length(uv2);\n    // here are two differences from above:\n    // +3.1415 is for make circles move in different phases\n    // `-uv2.x` to color the left half of the screen.\n    //                        ↓↓↓↓↓↓  ↓ \n    float sph2 = step(f(iTime+3.1415),-uv2.x);\n\n    // `max` is to show both circles at once\n    fragColor = vec4(vec3(max(sph1, sph2)),1.0);\n}","name":"Image","description":"","type":"image"}]}