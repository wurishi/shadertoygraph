{"ver":"0.1","info":{"id":"NtdXzj","date":"1639414484","viewed":166,"name":"artline christmas ","username":"drschizzo","description":"a simple shader for chirstmas\n\nlot of things to clean up in the code... :)","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","christmas","glass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 250\n#define MAX_DIST 250.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nstruct Hit{\n    float d;\n    float ds;\n    vec3 id;\n    float obj;\n};\n\n\n\n\nfloat rand(vec3 co){\n   // return gold_noise(co.xy,co.z);\n    return fract(sin(dot(co, vec3(12.9898, 78.233,145.1313))) * 43758.5453);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    p.yz*=Rot(3.14159/2.);\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  float q = length(p.xz);\n  return max(dot(c,vec2(q,p.y)),-h-p.y);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nHit sdTree(vec3 p,vec3 id){\n\n \n\n    float d=10000.;\n        float r=rand(id.xxz);\n\n    float h=(r+1.)*(.5+.5*sin(iTime+id.x*id.z));\n        float dc=sdCappedCylinder(p,.1*h,h);\n\n    \n    p+=vec3(0,-h*1.5,0);\n    float a=smoothstep(-.5,.5,fract((p.y)*5.+((r-.5)*2.))-.3)+r;\n    vec3 s=vec3(2.+a,.8,2.+a);\n    p*=s;\n  \n    \n    vec2 c=vec2(.5);\n    float nb=10.;\n    d=sdCone(p,c,h);\n    float fact=30.;\n    float ymix=smoothstep(-.5,.2,fract((p.y)*5.+((r-.5)*2.))-.3)+r;\n    float d2=cos(p.x*fact)*sin(p.y*fact*.3)*sin(p.z*fact)*ymix*.02;\n    \n    float i=1.;\n    if(d2>d)\n        i=0.;\n    d+=d2;\n    if(d>dc)\n        i=2.;\n    d=min(d,dc);\n    \n    return Hit(d/length(s),0.,id,i);\n}\n\n\n\nHit GetDist2(vec3 p, bool toBall) {\n    float ds=length(p)-6.;\n\n\n    if(toBall)\n        return Hit(ds,ds,vec3(0.),0.); \n    \n    \n    \n    p.xz*=Rot(T/2.);\n    \n    float f=1.5;\n    vec3 l=vec3(15.,0.,15.);\n        \n  \n    vec3 id=round(p/f);\n    \n    float obj=0.;\n        \n    vec3 q = p-f*clamp(id,-l,l);\n    \n    float disp=.25*(.7+.3*sin(iTime+id.x*id.z));\n    q-=vec3(0.,disp,0.);\n   // q.y=p.y;\n    Hit td=sdTree(q,id);\n\n    \n   float d=p.y;\n   \n   \n   \n   \n   for(float i=-1.;i<=1.;i++){\n       for(float j=-1.;j<=1.;j++){\n       \n        f=4.;\n       id=round((p+vec3(f*i,0,f*j))/f);\n\n         q = p-f*clamp(id,-l,l);\n         disp=.25*(.7+.3*sin(iTime+id.x*id.z));\n        q-=vec3(0.,disp,0.)*1.;\n        q.y=p.y;\n        d=opSmoothUnion(d,length(q+vec3(0,disp*4.,0))-disp*6.,disp*8.);\n       }\n   }\n   if(td.d<d)\n       obj=td.obj;\n   else\n       obj=0.;\n   \n    d=min(d,td.d);\n    \n    \n    if(ds>d)\n        obj=3.;\n    \n\n    d=max(d,ds);\n    \n   // float db=sdBox(p-vec3(0,6,0),vec3(.5));\n    float db=sdCappedCylinder(p-vec3(0,6,0),.5,.4);\n    \n    float dt=sdTorus(p-vec3(0,7,0),vec2(.5,.1));\n    db=min(db,dt);\n    if(db<d)\n        obj=4.;\n    d=min(d,db);\n\n\n    \n    return Hit(d,ds,id,obj);\n}\n\n\nHit Boxesold(vec3 p){\n\n    float d=MAX_DIST;\n        vec3 rep=vec3(30.,0.,30.);\n\n    \n\n    float repd=50.;\n    //p.xz-=repd/2.;\n    \n    vec3 id=round((vec3(p.x,0.,p.z))/(repd));\n    float rid=rand(id);\n    \n    vec3 q = p-(repd)*clamp(id,-rep,rep);\n    vec3 cpos=q-vec3(0.,mix(50.,-50.,max(0.,fract(T/4.-rid))),0.);\n\n    cpos.yz*=Rot(T+rid);\n    cpos.xy*=Rot(T+rid);\n\n    //cpos+=(rid-.5)*5.;\n     // d=min(d,sdRoundBox(cpos,vec3(rand(id)*3.),.3));\n     // d=min(d,sdBox(cpos,vec3(rid*3.)));\n      d=min(d,length(cpos)-6.);\n    return Hit(d,0.,id,5.);\n}\n\nHit Boxes(vec3 p){\n\n    float d=MAX_DIST;\n        \n        float r=35.;\n\n\n    vec3 q=mod(p,r)-r/2.;\n    vec3 id=floor(p-q);\n\n\n    float rid=rand(id);\n    vec3 cpos=q-(vec3(rid-.5)*15.);\n    cpos.yz*=Rot(T+rid);\n    cpos.xy*=Rot(T+rid);\n    \n    float s=1.;\n    if(abs(sin(T+rid*3.14159))>.5)\n        s=0.;\n    //d=min(d,length(cpos)-1.5*s*(rid*3.));\n    d=min(d,sdBox(cpos,vec3(rid*5.*s)));\n    return Hit(d*.7,0.,id,5.);\n}\n\n\n\n\nHit GetDist(vec3 p,bool toBall){\n\n\n\nHit cd=Boxes(p);\n\n\n\np.xz*=Rot(T/3.);\n\n\n\ncd.d=max(-length(p)+150.,cd.d);\n\n\n\n\nfloat f=15.;\n    vec3 l=vec3(1.,0.,1.);\n\n        \n    \n    vec3 id=round((vec3(p.x,0.,p.z))/f);\n    p.y+=sin(T+rand(id))*3.5;  \n    float obj=0.;\n        \n    vec3 q = p-f*clamp(id,-l,l);\n    Hit h=GetDist2(q,toBall);\n        h.id=id;\n\n\n    if(cd.d<h.d){\n        h.obj=cd.obj;\n        h.id=cd.id;\n        }\n    h.d=min(h.d,cd.d);\n    return h;\n\n}\n\nHit RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    vec3 id=vec3(0.);\n    float obj=0.;\n    float dsp=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dsp;\n        \n        Hit h=GetDist(p,true);\n        float dS = h.ds;\n        dsp+=h.ds;\n        \n        if(dsp>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n  //  if(dsp<MAX_DIST)\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        \n        Hit h=GetDist(p,false);\n        float dS = h.d;\n        id=h.id;\n        obj=h.obj;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n//    else\n//        dO=MAX_DIST;\n    \n    return Hit(dO,dsp,id,obj);\n}\n\n\n\nvec3 GetNormal(vec3 p, bool toBall) {\n\tfloat d = GetDist(p,toBall).d;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy,toBall).d,\n        GetDist(p-e.yxy,toBall).d,\n        GetDist(p-e.yyx,toBall).d);\n    \n    return normalize(n);\n}\n\n//from https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float d = GetDist(ro + rd*t,false).d;\n        if( d<.01 )\n            return 0.0;\n        res = min( res, k*(d*.2)/t );\n        t += d;\n    }\n    return res;\n}\n\n\n\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\nvec3 render(vec3 ro,vec3 rd){\n    vec3 col = vec3(0);\n\n\n    Hit h = RayMarch(ro, rd);\n    \n    if(h.ds<MAX_DIST && h.d>MAX_DIST){\n        vec3 n = GetNormal(ro+rd*h.ds,true);\n            vec3 r = reflect(rd, n);\n            col=vec3(.5);\n            col*=(texture(iChannel1,r).rgb*pow(1.-dot(n,r),2.));\n            \n    }\n    \n    if(h.d<MAX_DIST) {\n        vec3 p = ro + rd * h.d;\n        vec3 n = GetNormal(p,false);\n        vec3 r = reflect(rd, n);\n        vec3 l=vec3(0,30,0);\n        float dif = dot(n, normalize(l));\n        col += vec3(0.025,0.05,0.08) + dif*vec3(1.0,0.9,0.8);\n       \n       float shadow=softshadow(p, normalize(l-p),.1,10.,50.);\n       \n        if(h.obj>.9 && h.obj<1.5)\n            col*=vec3(.1,.6,.2);\n        else if(h.obj>1.9 && h.obj<2.5)\n            col*=vec3(.3,.3,.05);\n        else if(h.obj>2.9 && h.obj<3.5){\n            col=.5+.5*sin(vec3(.8,.3,.2)*h.id*10.);\n            col*=2.;\n            col*=texture(iChannel1,r).rgb*pow(1.-dot(n,r),2.);\n            shadow=1.;\n        }\n        else if(h.obj>3.9 && h.obj<4.5){\n            col=vec3(.9,.9,.1);\n            col*=texture(iChannel1,r).rgb*pow(1.-dot(n,r),2.);\n            shadow=1.;\n        }\n        else if(h.obj>4.9 && h.obj<5.5){\n            col*=(rand(h.id)>.5?vec3(.4,0.,0.02):vec3(0,.4,.03));\n           // col=h.id/10.;\n            //col*=vec3(.4,.4,.01);\n            //col*=2.;\n            //col*=texture(iChannel1,r).rgb*pow(1.-dot(n,r),2.);\n            shadow=1.;\n        }\n            \n            \n        \n                col*=shadow;\n\n    }\n    else{\n    //   col+=vec3(.05);\n        \n    }\n    //return vec3(length(ro + rd * h.d)/50.);\n    return mix(col,col+vec3(.1,.1,.25),pow((min(length(ro + rd * h.d)/100.,1.)),2.));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0., 5., -40.);\n\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n   \n    col=render(ro,rd);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}