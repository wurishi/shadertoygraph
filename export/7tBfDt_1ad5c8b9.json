{"ver":"0.1","info":{"id":"7tBfDt","date":"1670387580","viewed":67,"name":"Julia Plotter 1","username":"complexbezier","description":"Just a julia fractal plotter. z^2 + c -> z, you know the drill.\nClick and drag with the left-mouse button modify the C parameter.","likes":1,"published":1,"flags":16,"usePreview":0,"tags":["fractal","julia","interactive","plotting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float xmin = -2.0f;\nfloat xmax = 2.0f;\nfloat ymin = -1.0f;\nfloat ymax = 1.0f;\nint maxIterations = 64;\n\n//Keyboard input handler, thanks iq 2013-08-05\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\n//Return normalized coordinates based on pixel position\nvec2 normalizePixels(vec2 pxpos) {\n    return (pxpos / iResolution.xy) * vec2(xmax-xmin, ymax-ymin) + vec2(xmin, ymin);\n}\n\nvec2 cmult(vec2 z1, vec2 z2) {\n    return vec2(z1.x*z2.x - z1.y*z2.y, z1.x*z2.y + z1.y*z2.x);\n}\n\nvec2 iterFunc(vec2 z, vec2 C) {\n    return cmult(z,z) + C;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //Change max iterations based on keyboard input\n    if (int(texelFetch(iChannel0, ivec2(KEY_RIGHT, 0), 0).x) != 0) {\n        maxIterations = 64;\n    }\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * vec2(xmax-xmin, ymax-ymin) + vec2(xmin, ymin);\n\n        \n    \n    vec2 C = normalizePixels(iMouse.xy);\n    if (iMouse.xy==vec2(0)) {\n        C = 0.65*vec2(-sin(iTime*0.34)-.3,cos(iTime*0.34));\n    }\n    float mag = length(C);\n    float arg = atan(C.y, C.x);\n    C = vec2(cos(arg), sin(arg)) * length(C);\n    vec2 uv0 = uv;\n    int i;\n    for (i = 0; i < maxIterations; ++i) {\n        uv = iterFunc(uv, C);\n    }\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //Draw red dot\n    if (length(uv0 - C) < 0.02)\n        col = vec3(1,0,0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}