{"ver":"0.1","info":{"id":"ctKfz3","date":"1702632288","viewed":25,"name":"Dissolve attempt 1","username":"roey_shap","description":"Playing with math","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define maxAnimationSeconds 5.0\n\nint seed = 123456789;\nint a = 1103515245;\nint c = 12345;\nint m = 2147483648;\n\nfloat map(float min1, float max1, float value, float min2, float max2)\n{\n    float d2 = max2 - min2;\n    float d1 = max1 - min1;\n    float sizeRatio = d2 / d1;\n\n    return (value * sizeRatio) - (min1 * sizeRatio) + min2;\n}\n\nfloat floorTo(float val, float snap)\n{\n    return floor(val / snap) * snap;\n}\n\nint rand(vec2 position)\n{\n    int _x = int(position.x);\n    int _y = int(position.y);\n    seed = (a * seed * _y + c + _x * _y) % m;\n    return seed;\n}\n\nfloat randf(vec2 position)\n{\n    int r = rand(position);\n    return float(r) / float(m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;  // from (0,0) -> (1,1)\n    float startingTime = maxAnimationSeconds * (1.0 - uv.y);\n    float timeSinceStart = iTime - startingTime;\n    \n    float particleSnapValueY = 0.03 + (0.02 * randf(fragCoord));\n    float particleLivingTime = 0.3 + (0.1 * map(0.0, 1.0, randf(fragCoord), -1.0, 1.0));\n    \n    bool myRowHasStarted = floorTo(timeSinceStart, particleSnapValueY) > 0.0;\n    \n    float animPercent = clamp(map(0.0, particleLivingTime, floorTo(timeSinceStart, particleSnapValueY), 1.0, 0.0), 0.0, 1.0);\n    \n    float particleHeight = 0.6;\n    float xOffset = sin(sin(iTime * 6.0) * 2.0) * 0.04;\n    float yOffset = -clamp(map(0.0, maxAnimationSeconds, timeSinceStart, 0.0, 1.0), 0.0, 1.0) * particleHeight;\n    vec2 targetUV = uv + vec2(xOffset * (1.0 - animPercent), yOffset);\n\n\n    vec3 col = vec3(0.0);\n    col += texture(iChannel0, targetUV).rgb;\n    \n\n    col *= animPercent;\n    fragColor = vec4(col, 1.0);\n//    fragColor += vec4(vec3(1.0), 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float smallerDim = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / smallerDim;\n\n    vec3 col = vec3(0.0);\n    col += float(length(uv) <= 0.25);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}