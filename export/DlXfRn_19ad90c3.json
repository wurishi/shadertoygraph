{"ver":"0.1","info":{"id":"DlXfRn","date":"1711232198","viewed":87,"name":"SwirlyNoise","username":"elifront","description":"swirl","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["swirl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.x;\n\n    vec3 col = vec3(0.0);\n    \n    float speed = 0.2;\n    float scale = 30.;\n    \n    for( int i=0; i<64; i++ )\n    {\n        vec2 f = vec2(0.002);\n        vec2 v = scale*uv.yx + speed*iTime;\n        \n        f *= cos(v);\n        uv += f;\n        \n        col += noise(uv*(sin(iTime)+1.)*20.)*0.018;\n    }\n   \n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}