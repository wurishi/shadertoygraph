{"ver":"0.1","info":{"id":"ssjGDy","date":"1618663884","viewed":51,"name":"Medvedev Ivan Task 2","username":"Belgan","description":"CG2021","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["hometask"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 CAMERA_POS = vec3(1.5, 1.6, -6.0);\nconst float INF = 1e10;\n\nconst vec3 LIGHT1_POS = vec3(-3, 2.0, 4.0);\nconst vec3 LIGHT1_COLOR = vec3(0.0, 0.5, 1.0);\nconst float LIGHT1_RADIUS = 0.5;\n\nconst vec3 LIGHT2_POS = vec3(1.5, 0.5, 3.0);\nconst vec3 LIGHT2_COLOR = vec3(1.5, 1.7, 1.9);\nconst float LIGHT2_RADIUS = 0.5;\n\nvec3 randDir;\nvec3 randVals;\n\nconst float TIME = 17.0;\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\n// port of minecraft\n\nbool getMaterialColor( int i, vec2 coord, out vec3 color ) {\n\t// 16x16 tex\n\tvec2 uv = floor( coord );\n\n    float n = uv.x + uv.y*347.0 + 4321.0 * float(i);\n\tfloat h = hash(n);\n\t\t\n    float br = 1. - h * (96./255.\n\t\t\t\t\t\t);\n\tcolor = vec3( 150./255., 108./255.,  74./255.); // 0x966C4A;\n\t\n\tif (i == 4) {\n\t\tcolor = vec3( 127./255., 127./255., 127./255.); // 0x7F7F7F;\n\t}\n\t\n\tfloat xm1 = mod((uv.x * uv.x * 3. + uv.x * 81.) / 4., 4.);\n\t\n\tif (i == 1) {\n\t\tif( uv.y < (xm1 + 18.)) {\n\t\t\tcolor = vec3( 106./255., 170./255.,  64./255.); // 0x6AAA40;\n\t\t} else if (uv.y < (xm1 + 19.)) {\n\t\t\tbr = br * (2. / 3.);\n\t\t}\n\t}\n\t\n\tif (i == 7) {\n\t\tcolor = vec3( 103./255., 82./255.,  49./255.); // 0x675231;\n\t\tif (uv.x > 0. && uv.x < 15.\n\t\t\t&& ((uv.y > 0. && uv.y < 15.) || (uv.y > 32. && uv.y < 47.))) {\n\t\t\tcolor = vec3( 188./255., 152./255.,  98./255.); // 0xBC9862;\n\t\t\tfloat xd = (uv.x - 7.);\n\t\t\tfloat yd = (mod(uv.y, 16.) - 7.);\n\t\t\tif (xd < 0.)\n\t\t\t\txd = 1. - xd;\n\t\t\tif (yd < 0.)\n\t\t\t\tyd = 1. - yd;\n\t\t\tif (yd > xd)\n\t\t\t\txd = yd;\n\t\t\t\n\t\t\tbr = 1. - (h * (32./255.) + mod(xd, 4.) * (32./255.));\n\t\t} else if ( h < 0.5 ) {\n\t\t\tbr = br * (1.5 - mod(uv.x, 2.));\n\t\t}\n\t}\n\t\n\tif (i == 5) {\n\t\tcolor = vec3( 181./255.,  58./255.,  21./255.); // 0xB53A15;\n\t\tif ( mod(uv.x + (floor(uv.y / 4.) * 5.), 8.) == 0. || mod( uv.y, 4.) == 0.) {\n\t\t\tcolor = vec3( 188./255., 175./255., 165./255.); // 0xBCAFA5;\n\t\t}\n\t}\n\tif (i == 9) {\n\t\tcolor = vec3(  64./255.,  64./255., 255./255.); // 0x4040ff;\n\t}\n\t\n\tfloat brr = br;\n\tif (uv.y >= 32.)\n\t\tbrr /= 2.;\n\t\n\tif (i == 8) {\n\t\tcolor = vec3(  80./255., 217./255.,  55./255.); // 0x50D937;\n\t\tif ( h < 0.5) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tcolor *= brr;\n\t\n\treturn true;\n}\n\nint getMap( vec3 pos ) {\t\n\tvec3 posf = floor( (pos - vec3(32.))  );\n    \n\tfloat n = posf.x + posf.y*517.0 + 1313.0*posf.z;\n    float h = hash(n);\n\t\n\tif( h > sqrt( sqrt( dot( posf.yz, posf.yz )*0.16 ) ) - 0.8  ) {\n        return 0;\n\t}\t\n\t\n\treturn int( hash( n * 465.233 ) * 16. );\n}\n\nvec3 renderMinecraft( vec2 uv ) {\n    float xRot = sin( TIME*0.5 ) * 0.4 + (3.1415 / 2.);\n    float yRot = cos( TIME*0.5 ) * 0.4;\n    float yCos = cos(yRot);\n    float ySin = sin(yRot);\n    float xCos = cos(xRot);\n    float xSin = sin(xRot);\n\n\tvec3 opos = vec3( 32.5 + TIME * 6.4, 32.5, 32.5 );\n\t\n\tfloat gggxd = (uv.x - 0.5) * (iResolution.x / iResolution.y );\n\tfloat ggyd = (1.-uv.y - 0.5);\n\tfloat ggzd = 1.;\n\t\n\tfloat gggzd = ggzd * yCos + ggyd * ySin;\n\t\n\tvec3 _posd = vec3( gggxd * xCos + gggzd * xSin,\n\t\t\t\t\t   ggyd * yCos - ggzd * ySin,\n\t\t\t\t\t   gggzd * xCos - gggxd * xSin );\n\t\n\tvec3 col = vec3( 0. );\n\tfloat br = 1.;\n\tvec3 bdist = vec3( 255. - 100., 255. -   0., 255. -  50.  );\n\tfloat ddist = 0.;\n\t\n\tfloat closest = 32.;\n\t\n\tfor ( int d = 0; d < 3; d++) {\n\t\tfloat dimLength = _posd[d];\n\t\t\n\t\tfloat ll = abs( 1. / dimLength );\n\t\tvec3 posd = _posd * ll;;\n\t\t\n\t\tfloat initial = fract( opos[d] );\n\t\tif (dimLength > 0.) initial = 1. - initial;\n\t\t\n\t\tfloat dist = ll * initial;\n\t\t\n\t\tvec3 pos = opos + posd * initial;\n\t\t\n\t\tif (dimLength < 0.) {\n\t\t\tpos[d] -= 1.;\n\t\t}\n\t\t\n\t\tfor (int i=0; i<30; i++) {\n\t\t\tif( dist > closest )continue;\n\t\t\t\n\t\t\t//int tex = getMap( mod( pos, 64. ) );\n\t\t\tint tex = getMap( pos );\n\t\t\t\n\t\t\tif (tex > 0) {\n\t\t\t\tvec2 texcoord;\n\t\t\t\ttexcoord.x = mod(((pos.x + pos.z) * 16.), 16.);\n\t\t\t\ttexcoord.y = mod((pos.y * 16.), 16.) + 16.;\n\t\t\t\tif (d == 1) {\n\t\t\t\t\ttexcoord.x = mod(pos.x * 16., 16.);\n\t\t\t\t\ttexcoord.y = mod(pos.z * 16., 16.);\n\t\t\t\t\tif (posd.y < 0.)\n\t\t\t\t\t\ttexcoord.y += 32.;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( getMaterialColor( tex, texcoord, col ) ) {\n\t\t\t\t\tddist = 1. - (dist / 32.);\n\t\t\t\t\tbr = bdist[d];\n\t\t\t\t\tclosest = dist;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpos += posd;\n\t\t\tdist += ll;\n\t\t}\n\t}\n\t\n\treturn col * ddist * (br/255.);\n}\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.4 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = normalize(vec3(0, 1, 0) + (texture(iChannel0, worldPos.xz * 0.3).rgb * 2.0 - 1.0)* 0.7);\n    return t;\n}\n\n// (CAMERA_POS + t * viewVec).y == -1 && (CAMERA_POS + t * viewVec).x < 2  && (CAMERA_POS + t * viewVec).y > -&& (CAMERA_POS + t * viewVec).z\n// t < (2 - CAMERA_POS.y) / viewVec.y;\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat traceCube(vec3 pos, vec3 dir, out vec3 normal, out int isMine) {\n    float t = -1.0;\n    \n    \n    float leftX = (1.0 - pos.x) / dir.x;\n    if (leftX > 0.0 &&\n        (pos + leftX * dir).y < 1.0 &&\n        (pos + leftX * dir).y > -1.0 &&\n        (pos + leftX * dir).z < 1.0 &&\n        (pos + leftX * dir).z > -1.0) {\n        t = leftX;\n        normal = vec3(-1, 0, 0);\n        isMine = 0;\n    }\n    \n    \n    float rightX = (-1.0 - pos.x) / dir.x;\n    if (rightX > 0.0 && (t >= rightX || t == -1.0) &&\n        (pos + rightX * dir).y < 1.0 &&\n        (pos + rightX * dir).y > -1.0 &&\n        (pos + rightX * dir).z < 1.0 &&\n        (pos + rightX * dir).z > -1.0) {\n        t = rightX;\n        normal = vec3(1, 0, 0);\n        isMine = 2;\n    }\n    \n    \n    float frontZ = (-1.0 - pos.z) / dir.z;\n    if (frontZ > 0.0 && (t >= frontZ || t == -1.0) &&\n        (pos + frontZ * dir).y < 1.0 &&\n        (pos + frontZ * dir).y > -1.0 &&\n        (pos + frontZ * dir).x < 1.0 &&\n        (pos + frontZ * dir).x > -1.0) {\n        t = frontZ;\n        normal = vec3(0, 0, 1);\n        isMine = 0;\n    }\n    \n    \n    float backZ = (1.0 - pos.z) / dir.z;\n    if (backZ > 0.0 && (t >= backZ || t == -1.0) &&\n        (pos + backZ * dir).y < 1.0 &&\n        (pos + backZ * dir).y > -1.0 &&\n        (pos + backZ * dir).x < 1.0 &&\n        (pos + backZ * dir).x > -1.0) {\n        t = backZ;\n        normal = vec3(0, 0, -1);\n        isMine = 1;\n    }\n    \n    \n    float topY = (1.0 - pos.y) / dir.y;\n    if (topY > 0.0 && (t >= topY || t == -1.0) &&\n        (pos + topY * dir).z < 1.0 &&\n        (pos + topY * dir).z > -1.0 &&\n        (pos + topY * dir).x < 1.0 &&\n        (pos + topY * dir).x > -1.0) {\n        t = topY;\n        normal = vec3(0, -1, 0);\n        isMine = 0;\n    }\n    \n    \n    float botY = (-0.99 - pos.y) / dir.y;\n    if (botY > 0.0 && (t >= botY || t == -1.0) &&\n        (pos + botY * dir).z < 1.0 &&\n        (pos + botY * dir).z > -1.0 &&\n        (pos + botY * dir).x < 1.0 &&\n        (pos + botY * dir).x > -1.0) {\n        t = botY;\n        normal = vec3(0, 1, 0);\n        isMine = 3;\n    }\n    \n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    return t;\n}\n\nfloat traceSquare(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (1.0 - pos.z) / dir.z;\n    if (t > 0.0 &&\n        (pos + t * dir).y < 0.8 &&\n        (pos + t * dir).y > -0.8 &&\n        (pos + t * dir).x < 0.8 &&\n        (pos + t * dir).x > -0.8) {\n        normal = vec3(0, 0, 1);\n    } else {\n        return INF;\n    }\n    \n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float R, out vec3 normal) {\nfloat a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - R * R;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    float r = 2.5;\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < r) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    int isMine;\n    vec3 cubeNorm;\n    float cubeT = traceCube(pos, dir, cubeNorm, isMine);\n    if (cubeT < dist)\n        return true;\n        \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.15\n    );\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat fogSdf(vec3 pos, float r)\n{\n    return length(pos) - r;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 minecraft(vec3 pos, vec3 dir, in vec2 fragCoord)\n{\n    float t = fogSdf(pos, 1.4);\n    const float MARCH_SIZE = 0.02;\n    float opacity = 1.0;\n    float absorption = 8.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos, 1.4);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    vec3 color = renderMinecraft(fragCoord.xy / iResolution.xy);\n    return vec4(color * totalAbs, 1.0 - opacity);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir, in vec2 fragCoord)\n{\n    float t = fogSdf(pos, 1.7);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos, 1.7);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4( vec3(0.1, 0.5, 0.7) * totalAbs, 1.0 - opacity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals * 2.0 - 1.0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const int MINECRAFT = 4;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    float mult = 1.0;\n    vec3 color;\n    int materialType;\n    \n    vec3 colorMult = vec3(1, 1, 1);\n\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            if (randVals.y > 0.35) {\n                materialType = DIFFUSE;\n            } else {\n                materialType = REFLECTION;\n            }\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.15).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 cubeNorm;\n        int isMine;\n        float cubeT = traceCube(curPos, curDir, cubeNorm, isMine);\n        if (cubeT < t) {\n            t = cubeT;\n            normal = cubeNorm;\n            if (randVals.x < GLASS_R * 1. / dot(viewVec, normal)) {\n                materialType = REFLECTION;\n            } else {\n                if (dot(viewVec, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n                colorMult *= vec3(0.3, 0.8, 0.8);\n                materialType = REFRACTION;\n            }\n        }\n        \n        /*vec3 squareNorm;\n        float squareT = traceSquare(curPos, curDir, squareNorm);\n        if (squareT < t) {\n            t = squareT;\n            materialType = MINECRAFT;\n            vec3 worldPos = t * curDir + curPos;\n            color = renderMinecraft(worldPos.xy).rgb;\n            normal = squareNorm;\n        }*/\n\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n                break;\n            } else if (materialType == REFLECTION) {\n                fragColor.rgb += mult * computeLight(worldPos, color, normal) * colorMult;\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                vec4 fog = minecraft(curPos, curDir, fragCoord);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                fog = sampleFog(curPos, curDir, fragCoord);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n                n1 = nEnter;\n            } else if (materialType == MINECRAFT) {\n                fragColor.rgb = color * colorMult;\n                break;\n            }\n        } else {\n            fragColor.rgb += mult * texture(iChannel1, curDir).rgb * colorMult * 0.5;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}