{"ver":"0.1","info":{"id":"dtGyRy","date":"1700342757","viewed":28,"name":"domino to lozenge not one-to-one","username":"jt","description":"I hoped a general domino tiling could be translated into a general lozenge tiling, but it appears that's not so easy:\nfloor/ceiling lozenges require corresponding horizontal dominos to be arranged in a brick pattern, but that requires chains of flips.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["triangle","random","fail","tiling","lozenge","domino"],"hasliked":0,"parentid":"mlyczG","parentname":"randomly colored triangle tiling"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dtGyRy domino to lozenge not one-to-one, 2023 by jt\n\n// I hoped a general domino tiling could be translated into a general lozenge tiling,\n// but it appears that's not so easy:\n// floor/ceiling lozenges require corresponding horizontal dominos\n// to be arranged in a brick pattern, but that requires chains of flips,\n// when trying to switch horizontal dominos to vertical dominos.\n// Looks like a general local lozenge implementation might not be possible.\n// (Easier for general dominos because less constrained).\n\n// A failed experiment but an interesting insight.\n\n// Related:\n// general domino tiling\n// https://www.shadertoy.com/view/mtyyDR random domino tiling int\n// domino tiling from lozenge tiling\n// https://www.shadertoy.com/view/mlGczD domino lozenge relation quantize\n\n// tags: triangle, random, fail, tiling, lozenge, domino\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint triple32(int x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bb;\n    x ^= x >> 11;\n    x *= 0xac4c1b51;\n    x ^= x >> 15;\n    x *= 0x31848bab;\n    x ^= x >> 14;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n\nint ihash(ivec2 v)\n{\n    return HASH(v.x + HASH(v.y));\n}\n\nbool bhash(ivec2 v)\n{\n    return (ihash(v) & 1) != 0;\n}\n\nivec2 split(ivec2 tile, ivec2 quadrant, bool flip)\n{\n    // NOTE: double square index to avoid overlapping indices for dominos\n    //       (would be exact for one dimensional index,\n    //        in the case of the two-dimensional index\n    //        some (a quarter?) indices will be unused)\n    return 2*tile + (flip ? ivec2(quadrant.x, 0) : ivec2(0, quadrant.y));\n}\n\n// random domino tiling, returns unique tile index (but some indices unused)\nivec2 random_domino_tiling(ivec2 position) // https://www.shadertoy.com/view/mtyyDR random domino tiling int (jt)\n{\n    ivec2 quadrant = position & 1; // [0,0] to [1,1]\n    ivec2 tile = position - quadrant; // round down to even number\n    bool flip = bhash(tile);\n    \n    if(flip)\n    {\n        if(bhash(tile + 2 * ivec2(quadrant.x * 2 - 1, 0))) // neighbor tile aligned?\n        {\n            tile += ivec2(quadrant.x * 2 - 1, 0); // adjust index to merged tile\n            quadrant.x ^= 1; // horizontal merge: flip horizontal quadrant\n            return split(tile, quadrant, bhash(tile));\n        }\n    }\n    else\n    {\n        if(!bhash(tile + 2 * ivec2(0, quadrant.y * 2 - 1))) // neighbor tile aligned?\n        {\n            tile += ivec2(0, quadrant.y * 2 - 1); // adjust index to merged tile\n            quadrant.y ^= 1; // vertical merge: flip vertical quadrant\n            return split(tile, quadrant, bhash(tile));\n        }\n    }\n\n    return split(tile, quadrant, flip);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 triangular(vec2 p) // via 3x3 matrix\n{\n/*\n    // full 3x3 matrix\n    mat3 M =\n        mat3\n        (\n            normalize(vec3(-1,-1,+2)),\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1,-1))\n        );\n    return M*vec3(p,0); // additionally rotate 90 degrees to align hexagonal coordinates with triangular coordinates\n    */\n    // essential 2x3 matrix (to triangular, with additional 90 degree rotation)\n    return mat2x3(normalize(vec3(-1,-1,+2)),normalize(vec3(+1,-1, 0)))*p;\n}\n\n#define scale (8.0*sqrt(3.0))\n\nvoid mainImage( out vec4 o, in vec2 I )\n{\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I/R - 1.0;\n    I = (2.0 * I - R) / R.y; // mind aspect ratio\n\n    vec3 t = triangular(I*scale);\n\n    ivec3 tile = ivec3(floor(t));\n    ivec2 domino = ivec2(tile.x-tile.y, tile.z);\n    ivec2 id = random_domino_tiling(domino);\n\n    //o = vec4(hash33(vec3(tile)),1);\n    //o = vec4(domino.x&1,domino.y&1,0,1);\n    o = vec4(hash32(vec2(id)),1);\n    o = sqrt(o); // gamma\n}\n","name":"Image","description":"","type":"image"}]}