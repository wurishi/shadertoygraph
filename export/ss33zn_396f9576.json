{"ver":"0.1","info":{"id":"ss33zn","date":"1628975091","viewed":141,"name":"Chain reaction","username":"Flopine","description":"One of the end result I came up with for my 15 minutes performance at SIGGRAPH Real Time Live Event!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","palette","animation","isometric","mograph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define BPM 105./60.\n#define time iTime\n#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define mo(p,d) p=abs(p)-d;if(p.y>p.x)p=p.yx\n#define rep(p,r) (p=mod(p,r)-r*0.5)\n#define crep(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n#define pal(t,c,d) (vec3(0.9)+vec3(0.5)*cos(TAU*(c*t+d)))\n\n#define frt(sp,off) fract((time+off)*sp)\n#define flt(sp,off) floor((time+off)*sp)\n#define swi(sp,off) floor(sin(frt(sp,off)*TAU)+1.)\n\nfloat triprism (vec3 p, vec2 h)\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat cid;\nfloat column (vec3 p, float o)\n{\n    float per=1.1;\n    cid = floor(p.z/per);\n    float off = cid*o,\n    anim = PI/3.*(flt(BPM,off)+pow(frt(BPM,off),3.));\n   \n    rep(p.z,per);\n    mo(p.xy,vec2(.9));\n    p.y -= 2.;\n    p.xy*=rot(anim);\n  \n    return triprism(p,vec2(3.,per*.15));\n}\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(atan(1./sqrt(2.)));\n    if (swi(BPM/4.,0.)<0.5) p.xz*=rot(PI/4.);\n    \n    float id = round(p.x/9.);\n    crep(p.x,9.,4.);\n    float d = column(p,abs(id)-1.*0.2);\n    \n    return d;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n  vec2 a = vec2(abs(uv.x*0.5),0.25);\n  vec3 ro = vec3(uv*17.,-100.), rd=vec3(0.,0.,1.),p=ro,\n    col=vec3(0.),  \n    l=normalize(vec3(1.,2.,-3.));\n\n    bool hit=false;\n    for (float i=0.; i<64.;i++)\n    {\n        float d = SDF(p);\n        if (d<0.0001)\n        {hit = true; break;}\n        p += d*rd*0.5;\n    }    \n    if (hit)\n    {\n        vec3 n = gn(p);\n        float li = dot(n,l)*.5+.5;\n        col = pal(cid,vec3(0.1),vec3(0.1,0.8,0.3))*li;\n    }\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}