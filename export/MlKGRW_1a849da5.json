{"ver":"0.1","info":{"id":"MlKGRW","date":"1473589002","viewed":151,"name":"circles","username":"akst","description":".","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["begininer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MsS3RW","filepath":"http://soundcloud.com/angus_kst/morning-before-my-exam","previewfilepath":"http://soundcloud.com/angus_kst/morning-before-my-exam","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n/**\n * rgba(229, 84, 84, 0.5) \n * \n * r = 229/255 -> r = 0.89\n * b =  84/255 -> b = 0.32\n * g =  84/255 -> g = 0.32\n * \n * scale down by 1.25\n * \n * r /= 1.25 -> r = 0.712\n * b /= 1.25 -> b = 0.25\n * g /= 1.25 -> g = 0.25\n */\n\nconst vec3 BLACK_VEC4 = vec3(0.0, 0.0, 0.0);\nconst vec3 WHITE_VEC4 = vec3(1.0, 1.0, 1.0);\nconst vec3 RED_VEC4   = vec3(1.0, 0.0, 0.0);\nconst vec3 GREEN_VEC4 = vec3(0.0, 1.0, 0.0);\nconst vec3 BLUE_VEC4  = vec3(0.0, 0.0, 1.0);\n\nconst vec3 MY_RED_VEC4 = vec3(0.89, 0.32, 0.32);\n\n\n// fraction\nstruct frac { int n, d; };\n\n\nfloat random(vec2 j) {\n    return fract(sin(dot(j ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat random(float i) {\n    return random(vec2(i, i));\n}\n\nvec4 graident(vec2 coord, float base_p, float rand_p, float sico_p, float rate) {\n    vec2 uv = coord / iResolution.xy;\n    float base = base_p;\n    float rand = rand_p * random(iTime);\n    float sico = sico_p * sin(iTime * rate) * cos(iTime * rate);\n\treturn vec4(uv,base + rand + sico,1.0);\n}\n\nfloat distance_percent(vec2 coord) {\n    vec2 center = iResolution.xy / 2.0;\n    float a_dist = distance(center, coord);\n    return a_dist / iResolution.y;   \n}\n\nfloat percent(frac f) {\n    return (1.0 / float(f.d)) * float(f.n);\n}\n\nfloat freq_per(frac f) {\n    float per = percent(f);\n    float freq_pos = floor(iChannelResolution[0].y * per);\n    vec2 audio_pos = vec2(freq_pos, iTime);\n    \n    vec4 sound_pos = texture(iChannel0, audio_pos);\n    return sound_pos.r;\n}\n\nvec4 whitten(vec4 colour, frac f) {\n    float white_per = percent(f);\n    float colour_per = 1.0 - white_per;\n    colour = (colour * colour_per) + white_per;\n    return colour;\n}\n\nfloat random_percent(frac min, frac max) {\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = fragCoord.xy;\n    vec3 featureColour = MY_RED_VEC4;\n    \n    float dist = distance_percent(position);\n    \n    float ampilify = 1.5;\n\n    float hihi = freq_per(frac(9, 10)) * 0.75;\n    float hi = ((freq_per(frac(4, 5)) * 0.50) - 0.10) * ampilify;\n    float mi = ((freq_per(frac(1, 3)) * 0.70) - 0.15) * ampilify;\n    float lo = ((freq_per(frac(1, 5)) * 0.90) - 0.20) * ampilify;\n    \n    if (dist < lo) {\n        vec4 c = vec4(featureColour, 1.0);\n        vec4 colour = vec4(BLACK_VEC4, 1.0);\n        \n        if (dist < hi) {\n            colour += c;\n        }\n        else if (dist < mi) {\n            colour += whitten(c, frac(1, 3));\n        }\n        else {\n            colour += whitten(c, frac(1, 2));\n        }\n        fragColor = colour;\n    }\n    else {\n        vec4 colour = vec4(WHITE_VEC4, 1.0);\n        vec4 anit = vec4(WHITE_VEC4 - featureColour, 0.0);\n        if (random(position) * 0.4 > 1.0 - hihi) {\n            colour -= anit * 0.5;\n        }\n        if (random(position) * 0.6 > 1.0 - hihi) {\n            colour -= anit * 0.5;\n        }\n        fragColor = colour;\n    }\n}\n\n","name":"Image","description":"","type":"image"}]}