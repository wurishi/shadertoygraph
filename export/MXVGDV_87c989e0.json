{"ver":"0.1","info":{"id":"MXVGDV","date":"1718283961","viewed":73,"name":"No Stretch Rounded Rectangle","username":"megabits_mzq","description":"A rounded rectangle that resizes with the canvas without being stretched.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["simple","basic","beginner","roundedrectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawRoundedRect(in float longSide, in float shortSide, in float differenceXY, float circleDistanceAlongShortSide) {\n    if (longSide < 0.) {\n        differenceXY = -differenceXY;\n    }\n\n    if (abs(longSide) < abs(differenceXY) + circleDistanceAlongShortSide) {\n        // Space between the circle along the longSide.\n        // Always use the longest distance possible to cover the space.\n        longSide = 0. - circleDistanceAlongShortSide;\n    } else {\n        // Increase the circle distance along the longSide by differenceXY.\n        longSide -= differenceXY;\n    }\n\n    if (abs(shortSide) < circleDistanceAlongShortSide) {\n        // Space between the circle along the shortSide.\n        // Same as above.\n        shortSide = 0. - circleDistanceAlongShortSide;\n    }\n\n    float rawDistanceToCenter = length(abs(vec2(longSide, shortSide)) - circleDistanceAlongShortSide);\n    return rawDistanceToCenter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float spacing = 10.;\n    vec2 resizeVector = vec2((iResolution.x - spacing) / iResolution.x, (iResolution.y - spacing) / iResolution.y);\n    vec2 resizedResolution = iResolution.xy * resizeVector;\n    // Move the coordinate zero to the center.\n    vec2 centeredCoordinate = gl_FragCoord.xy - resizedResolution / 2. / resizeVector;\n    \n    float cornerRadius = 100.;\n    float circleDistanceAlongShortSide = min(resizedResolution.x, resizedResolution.y) / 2. - cornerRadius;\n\n    float differenceXY = (resizedResolution.x - resizedResolution.y) / 2.;\n    if (differenceXY > 0.) {\n        // The resolution is wider than it is tall.\n        float distanceToCenter = drawRoundedRect(centeredCoordinate.x, centeredCoordinate.y, differenceXY, circleDistanceAlongShortSide);\n        float relativeDistanceToCenter = log(distanceToCenter / (resizedResolution.y / 2. - circleDistanceAlongShortSide));\n        fragColor = vec4(vec3(step(0., relativeDistanceToCenter)),1.0);\n    } else {\n        // The resolution is taller than it is wide.\n        differenceXY = abs(differenceXY);\n        float distanceToCenter = drawRoundedRect(centeredCoordinate.y, centeredCoordinate.x, differenceXY, circleDistanceAlongShortSide);\n        float relativeDistanceToCenter = log(distanceToCenter / (resizedResolution.x / 2. - circleDistanceAlongShortSide));\n        fragColor = vec4(vec3(step(0., relativeDistanceToCenter)),1.0);\n    }\n\n}","name":"Image","description":"","type":"image"}]}