{"ver":"0.1","info":{"id":"NdfXWn","date":"1618839000","viewed":165,"name":"Aku Aku","username":"ad_lucem","description":"Tribute to crash bandicoot ","likes":16,"published":1,"flags":96,"usePreview":0,"tags":["raymarching","sdf","pbr","aku"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"llfSzS","filepath":"https://soundcloud.com/user-171906638/crash-bandicoot-the-great-hallending-theme","previewfilepath":"https://soundcloud.com/user-171906638/crash-bandicoot-the-great-hallending-theme","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cR 3.5\n#define EX 1.0\n\nvec3 Uncharted2Tonemap(vec3 col)\n{\n\tfloat A = 0.15;\n\tfloat B = 0.50;\n\tfloat C = 0.10;\n\tfloat D = 0.20;\n\tfloat E = 0.02;\n\tfloat F = 0.30;\n\tfloat W = 11.2;\n\treturn ((col*(A*col+C*B)+D*E)/(col*(A*col+B)+D*F))-E/F;\n}\n\nvec3 tonemap(vec3 color)\n{\n\tvec3 outcol = Uncharted2Tonemap(color.rgb * EX);\n\toutcol = outcol * (1.0 / Uncharted2Tonemap(vec3(11.2)));\t\n\treturn vec3(pow(outcol, vec3(1.0 / 2.2)));\n}\n\nvec3 getBloom(vec2 uv)\n{\n    vec3 bloom = pow(texture(iChannel1, uv * exp2(-2.)).rgb,vec3(2.2));\n    return bloom * cR;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tvec2 uv = U.xy / R.xy;\n    vec3 k = vec3(2.2);\n    vec3 color = pow(texture(iChannel0, uv).rgb * cR, k);\n    color = pow(color, k);\n#if TERMS == 0\n    color += pow(getBloom(uv), k);\n#endif\n    color = pow(color, vec3(1.0 / 2.2));  \n    color = tonemap(color);\n\tO = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define EPS 0.001\n#define MAX_LENGTH 7.\n\n#define PI  3.14159\n#define PI_2 1.57078\n#define PI_4 0.78540\n\n/*** Random ***/\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n/*** Camera ***/\nmat3 cam(vec3 cO, vec3 t, float r)\n{\n    vec3 w = normalize(t - cO);\n    vec3 up = vec3(sin(r),cos(r), 0.0);\n    vec3 u = normalize(cross(up,w));\n    vec3 v = normalize(cross(w,u));\n    return mat3(u,v,w);\n}\n\n/*** Rotations ***/\nmat3 rotY(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(c, 0.0, s, 0.0, 1.0, 0.0, -s, 0.0, c);\n}\n\nmat3 rotZ(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(c,-s, 0.0, s, c, 0.0, 0.0, 0.0, 1.0);\n}\n\nmat3 rotX(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(1.0, 0.0, 0.0, 0.0, c, -s, 0.0, s, c);\n}\n\n// From @iq - https://iquilezles.org/articles/distfunctions\n/*** SDF Operators ***/ \nfloat opUs( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);    \n}\n\n/*** SDF Shapes ***/\nfloat sbox(vec3 p, vec3 b, float r)\n{\n    vec3 q = abs(p) - b + r;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat pyramid( vec3 p, float h, float r)\n{\n  float m2 = h*h + 0.25;   \n  p.xz = abs(p.xz);\n  p.xz = (p.z>p.x) ? p.zx : p.xz;\n  p.xz -= 0.5;\n  vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);   \n  float s = max(-q.x,0.0);\n  float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );   \n  float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n  float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);    \n  float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);    \n  return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y)) - r;\n}\n\nfloat ellipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/( r * r ));\n  return k0 * (k0 - 1.0) / k1;\n}\n\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2( length( p.xz ) - t.x, p.y);\n  return length(q) - t.y;\n}\n\nfloat vcap( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat prism( vec3 p, vec2 h )\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n/*** Parts SDF Functions ***/\nfloat feather(vec3 p)\n{\n    vec3 q = p;\n    p.y-=abs(p.x);\n    \n    vec3 a = vec3(.25+0.04*sin(p.y*100.0),.55,.01);    \n    float d = ellipsoid(q, a);\n    \n    q.y+=1.;\n    \n    float f = vcap(q, 1., 0.01);\n    \n    d = min(d,f);\n    \n    return d;\n}\n\nfloat nose(vec3 p)\n{\n    float f;\n    vec3 q = p;\n    \n    { // Nose\n        q.z+=.10;\n        q.xy*=vec2(4.,3.);\n        \n        q.y+=.75;\n        q.x+=0.15;\n        \n        if(q.y < 0.0) q.y*=3.0;        \n               \n        q *= rotX(PI_2);\n        q *= rotY(PI_4);\n        \n        f = pyramid(q, .3, 0.1);\n    }\n    \n    { // Nostrils\n        q=p;\n        q.z+=.20;\n        q.xy*=vec2(4.,3.5);\n        q.x+=0.15;\n        q.x = abs(q.x);       \n        q.z+=.10; \n        q.x+=-0.02-q.z*3.5;        \n        q.y+=.75;\n\n        float n = sbox(q,vec3(.3, 0.15, .22),.1);\n        f = opUs(f,n,0.1);\n    }\n    \n    return f;\n}\n\nfloat beard(vec3 p)\n{\n  float d;\n  p *= rotX(PI_2);\n  p.z+=0.05;\n  p.z+=abs(p.x)*0.7;\n \n  { \n    float rb = 0.01;\n    vec2 c = vec2( length(p.xz)-2.0*(0.1+0.01*sin(p.z*100.))+rb, abs(p.y) - 0.05 );\n    d =  min(max(c.x,c.y),0.0) + length(max(c,0.0)) - rb;\n  }\n     \n   return d;\n}\n\nvec2 akuaku(vec3 p)\n{\n    vec2 d = vec2(MAX_LENGTH,0.0);\n    float a;\n    \n    vec3 q = p;\n    \n    { // body = 0\n        \n        float r = 3.8;\n        q.y-=r;\n        q.x*=q.y*.8/r;\n        q.y+=r;\n        q.y-=.02;\n        \n        float c = 1.0 + 2.0*smoothstep(0.0,0.7,sin(q.x*20.+q.y));\n        d.x = sbox(q, vec3(0.5,.90+c*0.01,.1),0.01);\n    }\n    \n    { // Eyebrows = 1      \n        q=p;       \n        q.x=abs(q.x);\n        q.y-=.70;\n        q.x-=0.38;\n        q.z+=.15;\n        \n        q *= rotZ(-.6*q.y);\n        q *= rotZ(-.25);        \n        if(p.x > 0.0) q *= rotZ(-.25);\n        \n        float f = sbox(q, vec3(.35,.15,.05), 0.01);\n        \n        if(f < d.x) d.y = 1.0;\n        d.x = opUs(d.x, f, 0.02);\n    }\n    \n    { // Eyes = 2\n        q=p;        \n        q.x = abs(q.x);       \n        q.x-=.3;\n        q.y-=.35;\n        q.z*=2.5;\n        q.y*=.85;\n        q.z+=.20;\n        \n        if(p.x < 0.0) q *= 1.11;\n        \n        float f = sphere(q,.25);\n        f = max(q.z, f);\n        \n        if(f < d.x) d.y = 2.0;\n        d.x = opUs(d.x, f,0.02);\n        \n        { // Eye bags = 3\n            q *= rotX(PI_2);\n            \n            f = torus(q, vec2(.25,0.1-p.y*.08));\n            \n            if(f < d.x) d.y = 3.0;\n            d.x = min(d.x, f);\n        }\n    }\n       \n    { // Mouth = 4\n        // Upper lip\n        q=p;\n        q.y+=.35;\n        q.z+=.1;\n        q.x=abs(q.x);\n        q.x-=.5;\n        q.z*=2.0;\n\n        float pxa = abs(p.x*1.12); \n        if(pxa > .02) q.y -= 0.3*(pxa-.02);\n        if(pxa > 0.3) q.y += 0.5*(pxa-.3);\n        if(pxa > 0.4) q.y += 2.0*(pxa-.4);\n        \n        q*=rotY(PI*-0.5);\n        q*=rotZ(PI*-0.23);              \n        \n        float f = prism(q,vec2(.15,.5));\n        f = max(q.z, f);\n        \n        if(f<d.x) d.y = 4.0;\n        d.x = opUs(d.x,f,0.01);\n        \n        //Lower lip\n        q=p;   \n        q.y+=.65;\n        q.z+=.1;\n        q.x=abs(q.x);\n        q.x-=.5;\n        q*=rotY(PI*-0.5);\n        q*=rotZ(PI*-0.23);              \n\n        f = prism(q,vec2(.15-0.05*abs(p.x),.5));\n        f=max(q.z, f);\n\n        if(f<d.x) d.y = 4.0;\n        d.x=min(d.x,f);\n\n        { // tooth = 5 \n            q=p;\n            q.z+=.1;\n            q.y+=.5;\n            q*=rotZ(PI*.5);\n            vec3 l = vec3(1.0,2.0,0.0);\n            vec3 pair = vec3(1.0,1.0,0.0);\n            float s = 0.10;\n            float c = s*2.0;\n            q.xy-=s;\n            q = q-c*clamp(round(q/c),-l,l-pair);\n            f = sbox(q,vec3(s-0.01+0.005*sin((abs(p.x)-p.y)*5.),s,0.01),0.02);\n            if(f<d.x) d.y = 5.0;\n            d.x = min(d.x,f);\n        }\n    }\n      \n    { // Nose = 6\n        q=p;\n        q*=1.2;\n        q.y *=0.8;\n        q.y-=0.12;\n        float f = nose(q); \n        if(f<d.x) d.y = 6.0;\n        d.x = opUs(d.x,f,0.05);\n    }\n    \n    { // feathers = 7 to 12\n        q=p;        \n        a=-.09*p.y;\n        q=rotX(a)*p;\n        a=0.15*q.x;\n        q*=rotZ(a);\n        q*=2.0;\n        q.x+=0.1;\n        q.y-=3.5;\n        q.z-=0.1;\n        q.x-=.5;\n        q.y*=0.45;\n\n        float c = .75;\n        vec3 l = vec3(2.0,.0,.0);\n        q = q-c*clamp(round(q/c),-l,l-vec3(1.0,.0,.0));\n        float f = feather(q);\n        if(f<d.x) d.y = 9.0 + floor(p.x*2.0);\n        d.x = min(d.x,f);\n        q.x-=0.75;\n    }\n    \n    { // Beard Ring = 11\n        q=p;\n        q.z-=0.01;\n        q.x*=.70;\n        q.y+=.95;\n        q.y*=.4;\n        float f = torus(q, vec2(.1,.022));\n        if(f < d.x) d.y = 11.;\n        d.x = min(d.x, f);      \n    }\n    \n    {// Beard = 12\n      q=p;\n      q.y+=1.;\n      q.z-=0.01;\n      float f = beard(q);\n      if(f < d.x) d.y = 12.;\n      d.x = min(d.x, f);\n    }\n    \n    d.x *= 0.25;\n    return d;\n}\n\n/*** Raymarch ***/\nvec2 sceneSDF(vec3 p)\n{\n    \n    { // Bending\n        p *= rotX(.09 * p.y);\n        p *= rotY(0.5 * p.x);\n        p *= rotZ(0.25 * p.z);\n        p *= rotY(-PI * 0.05);\n        p.y += .5;\n    }\n    \n    return akuaku(p);\n}\n\nvec2 tr(vec3 ro,  vec3 rd, out float occ, out float sh)\n{\n    occ = 0.0;\n    sh = 1.0;\n    \n    float d = 0.0;\n    float ds = 0.0;\n    float id = 0.0;\n    float t = 0.0;\n    vec3 p;\n    vec2 sc;\n    float ph = 1e20;\n    for(int i = 0; i < 200; i++)\n    {\n        p = ro + rd * d;\n        sc = sceneSDF(p);\n        ds = sc.x;       \n        if(ds < EPS){ d =- d; id = sc.y; break; }\n        if(d > MAX_LENGTH) break;\n        occ += ds * (1. - hash12(gl_FragCoord.xy + T) * 0.15);\n        sh = min(sh, 8. * ds / d);\n        float y = ds * ds /(2.0 * ph);\n        float e = sqrt(ds * ds - y * y);\n        sh = min( sh, 16. * e / max(0.0, d-y) );\n        ph = ds;\n        d += ds;\n        t += 1.0;\n    }\n    \n    occ *= 6.5 / t;\n    \n    return vec2(d, id);\n}\n\n/*** Shading ***/\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(EPS,.0);\n    float d =  sceneSDF(p).x;\n    return normalize(d-vec3(\n    sceneSDF(p - e.xyy).x,\n    sceneSDF(p - e.yxy).x,\n    sceneSDF(p - e.yyx).x));\n}\n\nvec3 shade(vec3 p, vec3 n, vec3 v, int id, vec2 uv)\n{\n    const vec3 lD = -normalize(vec3(-.1, -.32, .80));\n    const vec3 lC = vec3(3.0);\n   \n    vec3 h = normalize(v+lD);\n    \n    //Shadows\n    float occ;\n    float sh;  \n    vec2 d = tr(p + n*EPS, lD, occ, sh);\n    \n    vec3 cD;\n    vec3 cE;\n    vec3 cS = vec3(0.153,0.153,0.149);\n    vec4 tex = texture(iChannel0, p.yx);\n    \n    float kD = max(0.001,dot(n, lD));\n    float kS = max(0.0,dot(n, h));\n    float kHV = clamp(max(0.0,dot(v, h)),0.0,1.0);\n    float kV = max(0.001, dot(n, v));\n    float kp = 128.;\n    float r = .2;\n    float m = 0.;\n    \n    vec3 fO = vec3(0.04);\n    if(id == 0) // Body\n    {\n      cD = vec3(0.773,0.522,0.286)*tex.rgb;    \n      cS = vec3(1.000,0.992,0.800);\n      kp = 128.;\n    }\n    else if (id == 1 || id == 4) // Eyebrows & lips\n    {\n      cD = vec3(0.690,0.090,0.090)*tex.rgb;\n    }\n    else if (id == 2) // Eyes\n    {\n        vec3 eyeD = normalize(vec3(.0, 0., -1.));\n        float a = atan(n.y, n.x);\n        float t = 0.02*sin(T*1.+20.*(length(n.xy)*2.0 + a- 0.5 * T));\n        float kY = max(0.0,dot(eyeD,n)+t);\n        cD =  mix(vec3(0.902,0.361,0.000), vec3(0.980,0.949,0.000),pow(kY,8.));\n        cE = cD*0.3;\n    }\n    else if (id == 3) // Eye bags\n    {\n        cD = vec3(0.016,1.000,0.000)*tex.rgb;\n    }\n    else if( id == 5) // Tooth\n    {\n        cD = mix(vec3(0.969,0.941,0.851),vec3(1.000,0.733,0.000),1.-kS);\n    }\n    else if( id == 6) // Nose\n    {\n        cD = vec3(1.,0.86,0.57)*tex.rgb;\n    }\n    else if (id == 7) // Blue feather\n    {\n        cD = vec3(0.020,0.212,0.780);\n        r=1.0;\n    }\n    else if (id == 8) // Yellow feather\n    {\n        cD = vec3(0.933,0.882,0.169);\n        r = 1.0;\n    }\n    else if (id == 9) // Red feather\n    {\n        cD = vec3(0.824,0.016,0.016);\n        r=1.0;\n\n    }\n    else if (id == 10) // Purple feather\n    {\n        cD = vec3(0.757,0.039,0.902);\n        r=1.0;\n    }\n    else if(id == 11)\n    {\n        cD = vec3(0.000,0.000,0.000);\n        fO = vec3(1.00,0.86,0.57);\n        r=.1;\n    }\n    else if(id == 12)\n    {\n        cD = vec3(0.000,0.561,0.067);\n        r = 0.;\n    }\n   \n    vec3 F = fO+(1.-fO)*pow(1.-abs(kHV), 5.);\n    float a = r * r;\n    float s = (kS * a - kS) * kS + 1.0;\n\tfloat D = a / (PI * s * s);\n    float attL = 2.0 * kD / (kD + sqrt(a + (1.0 - a) * (kD * kD)));\n\tfloat attV = 2.0 * kV / (kV + sqrt(a + (1.0 - a) * (kV * kV)));\n\tfloat G = attL * attV;\n    vec3 b = F*D*G/(4.*kD*kV);\n    cD = (1.0/PI)*cD;\n    \n    vec3 refl = -normalize(reflect(v, n));\n\tvec3 dA = cD * pow(texture(iChannel2, n).rgb, vec3(2.2));\n    vec3 sA = F * pow(textureLod(iChannel2, refl, 2.+r*10.).rgb, vec3(2.2));\n    vec3 cA = dA + sA;\n    \n    vec3 col = sh * (cA + cE + lC * kD * ((1.0-F)* cD + cS * b));\n    \n#if TERMS\n    float fx = floor((uv.x*.5+sin(iTime*0.2)*2.5));   \n    if(fx < -2.){return vec3(F);} // Fresnel Reflectance\n    if(fx < -1.){return vec3(G);} // Geometry factor - Shadowing\n    if(fx < 0.){return vec3(D);} // NDF\n    if(fx < 1.){return b;} // BRDF  \n#endif\n\n    return col;\n}\n\n/*** Feather shading ***/\n// From  hat https://www.shadertoy.com/view/XsfSR8\n// doesn't work yet\nconst float featherDepth = 1.;\nconst int featherLayers = 20;\nconst float featherRayStep = featherDepth * 2.0 / float(featherLayers);\nconst float featherThreshold = 0.05;\n\nvec2 coordToSpherical(vec3 p) \n{\t\n    float r = length(p);\n    p = normalize(p);\n    float t = (r - (1.0 - featherDepth)) / featherDepth;\n    vec2 uv = vec2(atan(p.y, p.x), acos(p.z));\t\t\n    uv.y -= t * t;\n    return uv;\n}\n    \nfloat featherDensity(vec3 p, vec3 o) \n{\n    vec2 uv = coordToSpherical(p.xzy);\t\n    vec4 tex = textureLod(iChannel1, uv * 0.5, 0.0);\n    float density = smoothstep(featherThreshold, 1.0, tex.x);\n    float r = length(p-o) - 1.0;\n    float t = (r - (1. - featherDepth)) / featherDepth;\n    return density * (1. - t);\n}\n\nvec3 featherNormal(vec3 p, vec3 o, float density) \n{\n    vec2 eps = vec2(EPS,0.);\n    return normalize( vec3(\n    featherDensity( p * eps.xyy, o),\n    featherDensity( p * eps.yxy, o),\n    featherDensity( p * eps.yyx, o))\n    -density);\n}\n\nvec3 featherShade(vec3 p, vec3 o, vec3 color, vec3 light, vec3 eye, float density) {\n\n    vec3 v = normalize(light - p);\n    vec3 n = featherNormal(p, o, density);\n    vec3 ev = normalize(p - eye);\n    vec3 h = reflect(ev, n);\n\n    float diff = max(0.0, dot(v, n)) + 0.4;\n    float spec = pow(max(0.0, dot(v, h)), 64.);\n\n    float r = length(p);\n    float t = (r - (1.0 - featherDepth)) / featherDepth;\n    t = clamp(t, 0.3, 1.);\n\n    diff = mix(diff, 1., 0.5);\n\n    return color * t * (diff + 1.9 * spec);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = (2.*U.xy-R.xy)/R.y;\n    \n    float a = PI * 0.5 + 1.95 * PI * (2. * -iMouse.x - R.x ) / R.x;\n    vec3 cO = vec3(cos(a), 0.0, sin(a)) * -5.2;\n    vec3 t = vec3(0.0, .02, 0.0);\n    mat3 mCam = cam(cO, t, 0.0);\n    \n    vec3 cD = mCam * normalize( vec3(uv, 2.5) );\n    \n    float occ;\n    float sh;\n    vec2 d = tr(cO, cD, occ, sh);\n    \n    vec3 col;\n    \n    // Background\n    if(d.x > 0.0)\n    {\n        col = vec3(sin(uv.y) * 0.2 + 0.3, 0.4, sin(uv.x) * 0.1 + 0.32);\n        col *= 1.0 - length(uv * 0.4);\n        O.rgb = col;\n        return;\n    }\n    \n    // Hit something!\n    int id = int(floor(d.y));\n    vec3 p = cO + cD * abs(d.x);\n    vec3 v = normalize(cO - p);\n    vec3 n = getNormal(p);\n    vec2 e = vec2(EPS, 0.0);  \n    \n    col = shade(p, n, v, id, uv);\n\n    // Shades feathers\n    if(id == 7 || id == 8 || id == 9 || id == 10)\n    {\n        vec4 c = vec4(0.0);\n        vec3 o = vec3(-1. + float(id - 7) * .5, 1.50, 1.0);\n\n        for(int i = 0; i < featherLayers; i++) \n        {\n            vec4 sc;\n            sc.a = featherDensity(p,o);\n            \n            if( c.a > 0.99 ) break;\n            \n            if (sc.a > 0.) {\n                sc.rgb = sc.a * featherShade(p, o, col , vec3(0.0, 2.0, -2.0), -v, sc.a);\n                c = c + sc * (1.0 - c.a);\n            }\n            \n            p += cD * featherRayStep;\n        }\n\n        if(length(c) < 0.1)\n        {\n            col = vec3(sin(uv.y)*0.2+0.3, 0.4, sin(uv.x)*0.1+0.32);\n            col *= 1.0 - length(uv*0.35);\n        }\n        else\n        {\n           col = c.xyz;\n        }\n    }\n    else\n    {\n        // No AO on feathers\n        //col = vec3(occ);\n        col *= occ;\n    }\n    \n    O.rgb = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define T iTime\n\n// Set 1 to see brdf terms\n#define TERMS 0","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Adapted from robobo1221 - https://www.shadertoy.com/view/lsBfRc\nvec3 bloom(vec2 uv, float f)\n{ \n    vec2 p = 1. / vec2(R.x, R.y);\n    float lf = exp2(2.);\n    vec3 res = vec3(0.);\n    vec2 sc = lf * p;\n    float wg = 0., tw = 0.;\n    vec3 k = vec3(2.2);\n    vec3 col;\n    \n    uv = (uv.xy-p)*lf;\n    \n    for (int i = -5; i < 5; i++) \n    {\n        for (int j = -5; j < 5; j++) \n        {\n            wg = pow(1.-length(vec2(i,j)) * f, 6.);\n            col = texture(iChannel0,vec2(i,j) * sc + lf * p + uv, 2.).rgb;\n            res = pow(col,k)*wg + res;\n            tw += wg;\n        }\n    }\n\n    res /= tw;\n    return res;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = U / R.xy;\n\tvec3 blur = bloom(uv, 0.12);\n    O = vec4(pow(blur, vec3(0.4545)), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}