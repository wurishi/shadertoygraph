{"ver":"0.1","info":{"id":"mtycz3","date":"1700571085","viewed":41,"name":"Light Transmissive Properties 1 ","username":"roey_shap","description":"Testing implementing specific algorithms and phemonena and using external tools (there must be a better way than copy-pasting people's Perlin noise functions...).\nClouds!!\nI probably flubbed it somewhere but as a first experiment I'll take it.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(float min1, float max1, float value, float min2, float max2)\n{\n    float d2 = max2 - min2;\n    float d1 = max1 - min1;\n    float sizeRatio = d2 / d1;\n\n    return (value * sizeRatio) - (min1 * sizeRatio) + min2;\n}\n\nvec2 rotateBy(vec2 inputVector, float angle) \n{\n    mat2 rotationMatrix;\n    float sinOf = sin(angle);\n    float cosOf = cos(angle);\n    rotationMatrix[0] = vec2(sinOf, cosOf);\n    rotationMatrix[1] = vec2(-cosOf, sinOf);\n    \n    return inputVector * rotationMatrix;\n}\n\nvec2 getSphereIntersectionDistances(vec3 rayOrigin, vec3 rayDirection, \n                                    vec3 sphereCenter, float radius)\n{\n    vec3 originToSphere = sphereCenter - rayOrigin;\n    float distToSphereCenter = length(originToSphere);\n    float distToChordBisector = dot(originToSphere, rayDirection);\n    if (distToChordBisector > 0.0) \n    {\n        float distFromChordBisectorToCenterSquared = (distToSphereCenter * distToSphereCenter) - (distToChordBisector * distToChordBisector);\n        float d = sqrt((radius*radius) - distFromChordBisectorToCenterSquared);\n        if (d > 0.0) \n        {\n            return vec2(distToChordBisector - d, distToChordBisector + d);\n        }\n    } \n       \n    return vec2(0, 0);\n}\n\n///////////////////\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n///////////////////\n\n// the Henyey-Greenstein phase function\nfloat phase(float g, float cos_theta)\n{\n    float g_sq = g*g;\n    float denom = 1.0 + g_sq - (2.0 * g * cos_theta);\n    \n    return 1.0 / (4.0 * 3.1415926) * (1.0 - g_sq / (denom * sqrt(denom)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float canvasRatio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouseUV = iMouse.xy/iResolution.xy;\n    vec2 mousePos = mouseUV - 0.5;\n    mousePos.x *= canvasRatio;\n    uv -= 0.5;\n    uv.x *= canvasRatio;\n    float focalDistance = 1.0;\n    int numSamples = 8;\n\n    float g = 0.8; // asymmetry factor of the phase function\n    \n    //uint seed = 0x578437adU; // can be set to something else if you want a different set of random values\n    //float perlinFrequency = 8.0;\n    // float value = perlinNoise(position * frequency, seed); // single octave perlin noise\n    //float perlinValue = perlinNoise(uv + iTime, 1, 6, 0.5, 2.0, seed); // multiple octaves\n    //perlinValue = (perlinValue + 1.0) * 0.5; // convert from range [-1, 1] to range [0, 1]\n    \n    \n    vec3 color;\n\n    vec3 camera = vec3(0.0, 0.0, focalDistance);\n    vec3 rayDirection = normalize(vec3(uv.xy, 0) - camera);\n    \n    vec3 sphere = vec3(0.0, 0.0, -2.0);\n    float radius = 1.0;\n    \n    vec3 light = vec3(mousePos.x, mousePos.y, -focalDistance/2.0);\n    vec3 lightColor = vec3(1); //vec3(1.3, 0.3, 0.9);\n    \n    vec3 backgroundColor = vec3(0.572, 0.772, 0.921);\n    vec3 objectColor = vec3(0.8, 0.1, 0.5);\n    //lightColor += objectColor;\n    float absorption = 2.0; //map(0.0, 1.0, mouseUV.x, 0.0, 0.5); // absorption coefficient\n    float scattering = 0.3;\n    float extinction = absorption + scattering;\n    float noiseScale = 4.5;\n    \n    vec2 intersectionDistances = getSphereIntersectionDistances(camera, rayDirection,\n                                                                sphere, radius);\n    if (intersectionDistances.x > 0.0) \n    {\n        float distanceTravelled = intersectionDistances.y - intersectionDistances.x;\n        //float density = 1.0;\n        vec3 scatteredColor = vec3(0);\n        vec3 insidePoint = camera + (rayDirection * intersectionDistances.x);\n        float stepSize = distanceTravelled / float(numSamples);\n        float transmission = 1.0;\n        for (int i = 0; i < numSamples; i++)\n        {\n            insidePoint += stepSize * rayDirection;\n            float distFromCenter = length(insidePoint - sphere);\n            //float density = map(-1.0, 1.0, perlinNoise((0.01 * (insidePoint.xy + insidePoint.z) * (iTime+1.0)) * perlinFrequency, seed), 0.0, 1.0);\n            float density = map(-1.0, 1.0, snoise(1.0 + insidePoint*noiseScale + iTime), 0.0, 1.0) * smoothstep(0.01, 1.0, 1.0 - (distFromCenter / radius));\n            float sampleAttenuation = exp(-stepSize * density * extinction);\n        \n            vec3 lightToPoint = normalize(insidePoint - light);\n            vec2 disLightToInside = getSphereIntersectionDistances(light, lightToPoint, sphere, radius);\n             \n            transmission *= sampleAttenuation;\n            if (disLightToInside.x > 0.0) {\n                vec3 hitPoint = light + (lightToPoint * disLightToInside.x);\n                float distToHitPoint = length(insidePoint - hitPoint);\n                float attentuation = exp(-distToHitPoint * density * extinction);\n                scatteredColor += attentuation * phase(g, dot(-lightToPoint, -rayDirection))  * transmission * lightColor * scattering * density * stepSize;\n            }\n            \n            //scatteredColor *= sampleAttenuation;\n        }\n        \n        float distance = distanceTravelled;\n        float T = exp(-distance * absorption);\n        //color = (mix(objectColor, backgroundColor, T) * transmission) + scatteredColor;\n        color = (backgroundColor * transmission) + scatteredColor;\n    } \n    else \n    {\n        color = backgroundColor;\n    }\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}