{"ver":"0.1","info":{"id":"Nt23Ry","date":"1624150488","viewed":265,"name":"Voroflies","username":"ENDESGA","description":"Detecting voronoi vertices.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["2d","voronoi","edgedetection","edges"],"hasliked":0,"parentid":"stX3zS","parentname":"Easy Voronoi Edges"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 getPoint(in vec2 cell) {\n    return cell + 0.5 + 0.5 * vec2(\n    sin((cell.x - cell.y + iTime + fract(length(cell))) * 7.777),\n    sin((cell.x - fract(length(cell))) * 7.777) * sin((cell.x + cell.y * iTime) * 7.777));\n}\n\nfloat getId(in vec2 cell) {\n    return fract(sin(cell.x * 4647.543 + cell.y * 2435.32) * 9658.65);\n}\n\nfloat voronoi(in vec2 pixel) {\n    vec2 uv = (pixel - 0.5 * iResolution.xy) / iResolution.y * (2.0);\n    \n    uv *= distance(uv, vec2(0.0));\n    uv += vec2(cos(iTime * 0.777) + 0.777);\n    vec2 cell = floor(uv);\n\n    float minDist = 1e20;\n    float id = 0.0;\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            vec2 curCell = cell + (vec2(i, j));\n            float curDist = length(uv - getPoint(curCell));\n            if (curDist < minDist) {\n                id = getId(curCell);\n                minDist = curDist;\n            }\n        }\n    }\n\n    return id;\n}\n\nvec4 render(in vec2 px) {\n    float  d1 = voronoi(px + vec2(1.0, 0.0)),\n           d2 = voronoi(px - vec2(1.0, 0.0)),\n           d3 = voronoi(px + vec2(0.0, 1.0)),\n           d4 = voronoi(px - vec2(0.0, 1.0)),\n           n = (abs(d1-d2)>0.?1.:0.) \n                +(abs(d1-d3)*abs(d2-d3)>0.?1.:0.)\n                +(abs(d1-d4)*abs(d2-d4)*abs(d3-d4)>0.0?1.:0.);\n    return step(vec4(2,2,2,0),vec4(n));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = (render(fragCoord));\n}","name":"Image","description":"","type":"image"}]}