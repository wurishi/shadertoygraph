{"ver":"0.1","info":{"id":"sslyRB","date":"1642325007","viewed":139,"name":"Box Subtraction (exterior)","username":"kastorp","description":"correct exterior for box subtraction, as an union of residual boxes\nblue=relative difference with cheap sub\n[url=https://www.shadertoy.com/view/fsXyz2]here[/url] the same with circles ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["box","subtraction","exterior"],"hasliked":0,"parentid":"NlKSDd","parentname":"Box Union (interior)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Box Subtraction (exterior) by Kastorp\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdBoxS( in vec2 p, in vec2 b )\n{\n    vec2 d = max(abs(p)-b,0.);\n    return dot(d,d);\n}\n// b= first  box size\n// c2= second  box center\n// b2= second  box size\nvec2 sdBoxSub( in vec2 p,vec2 b, vec2 c2,vec2 b2)\n{\n    //max(...)  for interior is exact\n    float de= max( sdBox(p,b),-sdBox(p-c2,b2));\n     \n    //symmetry (thanks Iq)\n    if( c2.x<0.0 ) {c2.x=-c2.x; p.x=-p.x; }\n    if( c2.y<0.0 ) {c2.y=-c2.y; p.y=-p.y; }\n    \n    //if interior or no intersection, use the basic subtraction\n    if(de<0. ||max(c2.x-b2.x-b.x,c2.y-b2.y-b.y)>0.  ) return vec2(de);\n \n    vec4 oBox= vec4(min(-b,c2-b2),max(b,c2+b2));     //outer box\n    vec4 iBox= vec4(max(-b,c2-b2),min(b,c2+b2));     //intersection box    \n\n    float di = 1e10;\n    if((b.x>=oBox.z))   di=min(di,sdBoxS(p -vec2((oBox.z+ iBox.z)*.5,0), vec2(abs(oBox.z -iBox.z)*.5,b.y) )); //right \n    if((-b.x<=oBox.x))  di=min(di,sdBoxS(p -vec2((oBox.x+ iBox.x)*.5,0), vec2(abs(oBox.x -iBox.x)*.5,b.y) )); //left \n    if((b.y>=oBox.w))   di=min(di,sdBoxS(p -vec2(0,(oBox.w+ iBox.w)*.5), vec2(b.x,abs(oBox.w -iBox.w)*.5) )); //top \n    if((-b.y<=oBox.y))  di=min(di,sdBoxS(p -vec2(0,(oBox.y+ iBox.y)*.5), vec2(b.x,abs(oBox.y -iBox.y)*.5) )); //bottom \n\n    return vec2(sqrt(di),de); \n}\n\n//cloned from Iq's\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m1 = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    // distance\n    vec2 d = sdBoxSub(p,vec2(.7,.5),vec2(.6*sin(iTime),.5*cos(iTime)),vec2(.4+.3*sin(iTime*3.1),.4+.2*cos(iTime*3.1))); \n      \n    // custom box\n    if( iMouse.z>0.001 )\n    {\n       d = sdBoxSub(p,vec2(.7,.5),m1,vec2(.8,.2));\n    }\n    \n    // coloring\n    vec3 col = (d.x>0.0) ? vec3(0.3,0.6,0.3) : vec3(0.7,0.3,.3);\n    col *= 1.0 - exp(-7.0*abs(d.x));\n    col *= 0.8 + 0.2*cos(128.0*abs(d.x));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d.x)) );\n    col.z+= abs(1.-d.y/d.x)*.3;\n\n\tfragColor = vec4(col, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}