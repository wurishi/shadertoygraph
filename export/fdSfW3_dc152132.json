{"ver":"0.1","info":{"id":"fdSfW3","date":"1647185173","viewed":94,"name":"kifs'ed tube extrusion","username":"rodgzilla","description":"Mini repeated kifs tube extrusion from a different kifs sphere.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time .6 * iTime\n#define ZPOS -50.\n\nvec3 glow = vec3(0, 0, 0);\n\nmat2 rot2d(float a){\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\nfloat sph(vec3 p, float r) {\n  return length(p) - r;\n}\n\nvec3 kifs(vec3 p, float m1, float m2, float s, float r, float it) {\n  for (float i = 0.; i < it; i++) {\n    p.xy *= rot2d(time * m1 + i);\n    p.yz *= rot2d(time * m2 - i);\n    p = abs(p);\n    p -= s;\n    s *= r;\n  }\n  \n  return p;\n}\n\n\nvec3 repeat(vec3 p, vec3 r) {\n  vec3 q = mod(p, r) - .5 * r;\n  return q;\n}\n\nvec2 repeat_2(vec2 p, vec2 r){\n  vec2 q = mod(p, r) - .5 * r;\n  \n  return q;\n}\n\nfloat at = 0.;\nfloat map(vec3 p) {\n  float d = 1000.;\n  \n  float wave_1 = .5 * sin(.2 * time + .214) + .5;\n  float wave_2 = .5 * sin(.3 * time + .16) + .5;\n  float wave_3 = .5 * sin(.14 * time + .11) + .5;\n  float wave_4 = .5 * sin(.25 * time + 2.) + .5;\n  float wave_5 = .5 * sin(.1 * time + 26.) + .5;\n  float wave_6 = .5 * sin(.32 * time + 19.) + .5;\n  vec3 p_kifs_1 = kifs(p, .3, .5, 6. + 1. * wave_1, .7 - .1 * wave_3, 4.);\n  vec3 p_kifs_2 = kifs(p, .5, .3, 3. + 2. * wave_2 , .3 + .2 * wave_4, 4.);\n  \n  float s = sph(p_kifs_1 - vec3(0, 0, 0.), 1. + .4 * wave_6);\n  float tunnel = 0.5 + .3 * wave_5 - length(repeat_2(p_kifs_2.xy, vec2(1., 1.)));\n  \n  float ts = max(tunnel, s);\n  d = min(d, ts);\n  d = min(d, 50. - length(p.xy));\n\n  at += 1. / (d * 8.);\n  \n  return d;\n  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 0, ZPOS);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    float d = 0.;\n    vec3 glow = vec3(0);\n\n    for (int i = 0; i < 100; i++) {\n      vec3 p = ro + d * rd;\n      float ds = map(p);\n    \n      if (ds < 0.01 || ds > 100.) {\n        break;\n      }\n      d += ds * 1.;\n      glow += .001 * at * vec3(.75, .13, .93);\n    }\n  \n    vec3 p = ro + d * rd;\n    vec2 e = vec2(0.01, 0);\n    vec3 n = normalize(map(p) - \n      vec3(\n        map(p - e.xyy),\n        map(p - e.yxy),\n        map(p - e.yyx)\n      )\n    );\n\n    vec3 lp = vec3(0., 0., ZPOS);\n    vec3 tl = lp - p;\n    vec3 tln = normalize(tl);\n    float dif = dot(tln, n);\n  \n    col = vec3(dif);\n    col = dif * glow;\n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}