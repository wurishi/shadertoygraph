{"ver":"0.1","info":{"id":"DsV3Dw","date":"1678648408","viewed":181,"name":"3D Voronoi Diagram","username":"PrzemyslawZaworski","description":"3D Voronoi Diagram (brute-force technique). Example presents how to generate 64x64x64 volume texture and write into 2D buffer. \nRecommended minimal screen resolution: 800 x 450","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","voronoi","volume","texture","map","triangulation","diagram","delaunay","jfa","tetrahedralization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float _Alpha = 1.0;\nconst vec3 _SliceMin = vec3(-0.51,-0.51,-0.51);\nconst vec3 _SliceMax = vec3( 0.51, 0.51, 0.51);\n\n// http://http.download.nvidia.com/developer/presentations/2005/GDC/Sponsored_Day/GDC_2005_VolumeRenderingForGames.pdf\nbool IntersectBox(vec3 ro, vec3 rd, vec3 boxmin, vec3 boxmax, out float tnear, out float tfar)\n{\n\tvec3 invR = 1.0 / rd;\n\tvec3 tbot = invR * (boxmin.xyz - ro);\n\tvec3 ttop = invR * (boxmax.xyz - ro);\n\tvec3 tmin = min (ttop, tbot);\n\tvec3 tmax = max (ttop, tbot);\n\tvec2 t0 = max (tmin.xx, tmin.yz);\n\ttnear = max (t0.x, t0.y);\n\tt0 = min (tmax.xx, tmax.yz);\n\ttfar = min (t0.x, t0.y);\n\treturn (tnear > tfar) ? false : true;\n}\n\nmat3 RotationY(float y) \n{\n\treturn mat3(cos(y),0.0,-sin(y),0.0,1.0,0.0,sin(y),0.0,cos(y));\n}\n\nivec2 Map3DTo2D(vec3 coords, uint size)\n{\n    uvec3 uvw = uvec3(coords * float(size));\n    uint instance = uvw.z * size * size + uvw.y * size + uvw.x;\n    return ivec2(instance % uint(iResolution.x - 2.), instance / uint(iResolution.x - 2.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 ro = vec3(0.0, sin(iTime * 0.33) * 0.85, -1.5) * RotationY(iTime);\n\tvec3 rd = normalize(vec3(uv, 2.0)) * RotationY(iTime);\n\tvec4 color = vec4(0.0);\n\tfloat near = 0.0, far = 0.0;\n    uint size = 64u; // resolution of volume texture\n\tbool hit = IntersectBox(ro, rd, vec3(-0.5), vec3(0.5), near, far);\n\tif (hit)\n\t{\n\t\tfloat stepSize = 0.01;\n\t\tfor(float t = near; t < far; t += stepSize)\n\t\t{\n\t\t\tvec3 p = ro + t * rd;\n            ivec2 uv = Map3DTo2D(p + vec3(0.49999), size);\n\t\t\tvec4 s = texelFetch(iChannel0, uv, 0);\n            s.a *= _Alpha;\n\t\t\tbool insideSlice = all(greaterThan(p, _SliceMin)) && all(lessThan(p, _SliceMax));\n\t\t\tfloat weight = (1.0 - color.a) * s.a;\n\t\t\tcolor.rgb += insideSlice ? weight * s.rgb : vec3(0.0);\n\t\t\tcolor.a += insideSlice ? weight : 0.0;    \n\t\t}\n\t}\n    fragColor = vec4(color.rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"struct Seed\n{\n    vec3 Location; // coordinates\n    vec3 Color; // normalized rgb\n};\n\nSeed _Seeds[32] = Seed[32]\n(\n    Seed(vec3( 13,  22,  28), vec3( 0.735,\t0.703,\t0.947)),\n    Seed(vec3( 23,  40,  15), vec3( 0.190,\t0.697,\t0.592)),\n    Seed(vec3( 47,   7,  51), vec3( 0.666,\t0.297,\t0.898)),\n    Seed(vec3( 56,   9,  46), vec3( 0.053,\t0.039,\t0.462)),\n    Seed(vec3( 21,  30,  14), vec3( 0.445,\t0.785,\t0.934)),\n    Seed(vec3( 59,  38,  17), vec3( 0.876,\t0.093,\t0.917)),\n    Seed(vec3( 37,  48,  54), vec3( 0.851,\t0.379,\t0.441)),\n    Seed(vec3( 58,  55,  11), vec3( 0.586,\t0.042,\t0.241)),\n    Seed(vec3( 34,  45,  24), vec3( 0.245,\t0.242,\t0.276)),\n    Seed(vec3( 49,  10,  53), vec3( 0.330,\t0.753,\t0.439)),\n    Seed(vec3( 19,  39,  42), vec3( 0.713,\t0.343,\t0.551)),\n    Seed(vec3( 44,  50,  57), vec3( 0.655,\t0.558,\t0.760)),\n    Seed(vec3( 35,  26,  41), vec3( 0.802,\t0.349,\t0.123)),\n    Seed(vec3( 25,  12,  33), vec3( 0.475,\t0.097,\t0.297)),\n    Seed(vec3( 61,  32,   8), vec3( 0.256,\t0.729,\t0.368)),\n    Seed(vec3( 60,  36,  20), vec3( 0.573,\t0.251,\t0.285)),  \n    Seed(vec3( 16,  36,   7), vec3( 0.791,\t0.491,\t0.431)),\n    Seed(vec3( 48,  61,  39), vec3( 0.542,\t0.352,\t0.542)),\n    Seed(vec3(  2,  11,  47), vec3( 0.033,\t0.123,\t0.823)),\n    Seed(vec3( 14,  23,  54), vec3( 0.794,\t0.824,\t0.984)),\n    Seed(vec3( 28,   8,  17), vec3( 0.305,\t0.565,\t0.475)),\n    Seed(vec3( 12,  31,   4), vec3( 0.596,\t0.056,\t0.526)),\n    Seed(vec3( 27,  19,  43), vec3( 0.187,\t0.937,\t0.307)),\n    Seed(vec3( 46,  30,  58), vec3( 0.458,\t0.168,\t0.408)),\n    Seed(vec3(  3,  13,  55), vec3( 0.419,\t0.289,\t0.859)),\n    Seed(vec3(  5,  34,  10), vec3( 0.111,\t0.501,\t0.421)),\n    Seed(vec3( 40,  42,  15), vec3( 0.632,\t0.132,\t0.993)),\n    Seed(vec3( 18,  44,  49), vec3( 0.133,\t0.193,\t0.823)),\n    Seed(vec3( 41,  26,  35), vec3( 0.864,\t0.884,\t0.843)),\n    Seed(vec3( 38,  63,  56), vec3( 0.975,\t0.205,\t0.845)),\n    Seed(vec3( 50,  21,  62), vec3( 0.396,\t0.286,\t0.305)),\n    Seed(vec3( 33,   5,  25), vec3( 0.847,\t0.047,\t0.235))    \n);\n\nvec3 Map2DTo3D(vec2 coords, uint size)\n{\n    uint instance = uint(coords.x) + uint(iResolution.x - 2.0) * uint(coords.y);\n    return vec3(instance % size, (instance / size) % size, instance / (size * size));\n}\n\nvec4 Voronoi (vec3 fragCoord, uint size)\n{\n\tvec2 bestInfo = vec2(9999.0, 0.0);\n\tfor (int i = 0; i < _Seeds.length(); i++)\n\t{\n        float angle = iTime + float(i);\n        _Seeds[i].Location += vec3(sin(angle), cos(angle), cos(1.0 - angle)) * 10.0;\n        _Seeds[i].Location = clamp(_Seeds[i].Location, vec3(0.0), vec3(float(size) - 1.)); \n\t\tfloat magnitude = distance(fragCoord, _Seeds[i].Location);\n\t\tbestInfo = (magnitude < bestInfo.x) ? vec2(magnitude, i) : bestInfo;\n\t} \n    return vec4(_Seeds[int(floor(bestInfo.y))].Color, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uint size = 64u; // resolution of volume texture\n    vec3 coords = Map2DTo3D(fragCoord, size);\n    vec3 uvw = coords / vec3(size); // normalized UVW coordinates for debug\n    fragColor = Voronoi(coords, size);\n}","name":"Buffer A","description":"","type":"buffer"}]}