{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// By default, assume we're inside the Mandelbrot set and make the color black\n\tfragColor = vec4(0, 0, 0, 1.0);\n\t\n\t// Calculate the resolution-independent coordinate of this pixel\n\tvec2 uv = fragCoord.xy / iResolution.y;\n\t\n\t// Ping-pong the time from 0.0 to 24.0 and back to 0.0\n\tfloat time = mod(iTime, 48.0);\n\tif (time > 24.0)\n\t\ttime = 48.0-time;\n\t\n\t// Determine the location in the set we're currently visiting\n\tint cycle = int(iTime / 48.0);\n\tint destination = int(mod(float(cycle), 3.0));\n\t\n\t// Set the destination coordinates to a point in the set\t\n\tfloat ox;\n\tfloat oy;\n\tif (destination == 0)\n\t{\n\t\tox = 0.273976;\n\t\toy = 0.48501;\n\t}\n\telse if (destination == 1)\n\t{\n\t\tox = -1.90748;\n\t\toy = -0.00001;\n\t}\n\telse if (destination == 2)\n\t{\n\t\tox = -0.088975;\n\t\toy = 0.654355;\n\t}\n\t\n\t// Calculate an alpha to be used for ease-in and ease-out towards\n\t// the destination point.  We'll use an s-curve to keep it smooth.\n\tfloat alpha = time / 3.0;\n\tif (alpha > 1.0) alpha = 1.0;\n\talpha = 3.0*alpha*alpha - 2.0*alpha*alpha*alpha;\n\n\t// Zoom into the set over time\n\tfloat scale = 10.0 * pow(0.6, time);\n\t\n\t// Calculate the coordinate of this fragment within the set\n\tfloat cx = (uv.x - 0.5 * iResolution.x / iResolution.y) * scale + ox * alpha - 0.75 * (1.0 - alpha);\n\tfloat cy = (uv.y - 0.5) * scale + oy * alpha;\n\n\tfloat x = cx;\n\tfloat y = cy;\n\n\tfor (int i=0; i < 1000; i++)\n\t{\n\t\t// Mandelbrot iteration: z' = z^2 + c (with all values complex)\n\t\t// c = (cx, cy)\n\t\t// z = (x, y)\n\t\tfloat xNew = x*x - y*y + cx;\t// Real part\n\t\tfloat yNew = 2.0*x*y + cy;\t\t// Imaginary part\n\t\t\n\t\tx = xNew;\n\t\ty = yNew;\n\t\t\n\t\t// If the magnitude of z has escaped towards infinity...\n\t\tif (x*x + y*y > 2.0e18)\n\t\t{\n\t\t\t// ...then set the fragment's color based on how many iterations it took to escape.\n\t\t\t// For color continuity, use a color gradient based on three sinusoids of different period.\n\t\t\tfloat angle = float(i) / 1000.0;\n\t\t\tfragColor = clamp(vec4(sin(angle*13.0)+1.0, sin(angle*17.0)+1.0, sin(angle*37.0)+1.0, 1) / 2.0, 0.0, 1.0);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdXGRs","date":"1376705573","viewed":347,"name":"Mandelbrot Tour","username":"gsnethen","description":"A brief visit to different locations in the Mandelbrot set.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""}}