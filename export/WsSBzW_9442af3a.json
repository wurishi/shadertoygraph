{"ver":"0.1","info":{"id":"WsSBzW","date":"1589547702","viewed":413,"name":"Downscale aliasing methods - for","username":"alvarobyrne","description":"test SF downscale","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["downscale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Downscale aliasing methods\" by DarkZeros. https://shadertoy.com/view/3sSBzW\n// 2020-05-15 12:58:35\n\nvec3 getTexture(vec2 uv){\n\treturn texture(iChannel0, uv).rgb;\n}\n\nvec3 down_scaler(vec2 uv)\n{\n    vec2 origSize = iResolution.xy;\n    // Calculate the size of a texel in the original texture\n    vec2 origTexelOffset = vec2(1.0, 1.0) / origSize;\n\n    // Find out the coordinates for the nearest point in between pixels\n    vec2 texCoordsCentrePoint = round(uv*origSize)/origSize;\n\n    // Move our texture lookup coordinates one up and to the left\n    vec2 topLeftTexCoords = texCoordsCentrePoint - origTexelOffset;\n    \n    // Get all 4 centrepoints\n    vec3 topLeftColor = getTexture(topLeftTexCoords);\n    vec3 topRightColor = getTexture(topLeftTexCoords + (origTexelOffset*vec2(2.0, 0.0)));\n    vec3 botLeftColor = getTexture(topLeftTexCoords + (origTexelOffset*vec2(0.0, 2.0)));\n    vec3 botRightColor = getTexture(topLeftTexCoords + (origTexelOffset*vec2(2.0, 2.0)));\n\n    // Perform bilinear again\n    vec2 a = (uv - topLeftTexCoords) / (vec2(2.0, 2.0)*origTexelOffset);\n    vec3 topColor = mix(topLeftColor, topRightColor, a.x);\n    vec3 botColor = mix(botLeftColor, botRightColor, a.x);\n\n    return mix(topColor, botColor, a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    if (uv.y < 0.2)\n\t  fragColor = vec4(getTexture(uv),1.0);\n    else if (uv.y < 0.4)\n      fragColor = vec4(getTexture(round(uv*320.0)/320.0),1.0);\n    else if (uv.y < 0.6)\n      fragColor = vec4(getTexture(round(uv*160.0)/160.0),1.0);\n    else if (uv.y < 0.8)\n      fragColor = vec4(getTexture(round(uv*80.0)/80.0),1.0);\n    else\n      fragColor = vec4(down_scaler((uv*80.0)/80.0),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(vec3((1.0+sin(uv.x*uv.x*640.0))/2.0),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}