{"ver":"0.1","info":{"id":"4scSRN","date":"1457839218","viewed":416,"name":"Shader Lesson #5, animation","username":"hubbe","description":"Demonstrates simple shapes, transparency, translation, rotation and time-based movement.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["educational"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Scroll down to the scene function to find things to modify.\n\n// Input is a position, output is color, forming red bars.\nvec4 red_bars(vec2 pos) {\n   \treturn vec4(cos(pos.x * 30.0), 0,0,1);\n}\n\n// If input position is inside a square, return a green color,\n// otherwise return a transparent color.\nvec4 square(vec2 pos) {\n    if (abs(pos.x) < 0.1 && abs(pos.y) < 0.1) {\n        return vec4(0,1,0,1);\n    } else {\n        return vec4(0,0,0,0); // transparent\n    }\n}\n\n// If input position is inside a circle, return a semitransparent\n// blue color, otherwise return a completely transparent color.\nvec4 circle(vec2 pos) {\n    if (length(pos) < 0.08) {\n        return vec4(0, 0, 1, 0.5); // semitransparent\n    } else {\n        return vec4(0,0,0,0);\n    }\n}\n\n// Rotate the position around 0,0.\nvec2 rotate(vec2 pos, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, s, -s, c) * pos;\n}\n\n// Move the position adding 0.1 to x.\nvec2 translate(vec2 pos) {\n    return pos + vec2(0.1, 0.0);\n}\n\n// Input is position, return the color.\nvec4 scene(vec2 pos) {\n    vec2 square_pos = pos;\n    vec2 bar_pos = pos;\n    vec2 circle_pos = pos;\n\n    // Uncomment any combination of the translate and rotate lines below.\n        \n    // square_pos = translate(square_pos);\n    square_pos = rotate(square_pos, -iTime);\n    // square_pos = translate(square_pos);\n    \n    // bar_pos = translate(bar_pos);\n    bar_pos = rotate(bar_pos, iTime);\n    //bar_pos = translate(bar_pos);\n\n    // circle_pos = translate(circle_pos);\n    circle_pos = rotate(circle_pos, iTime * 2.0);\n    circle_pos = translate(circle_pos);\n    circle_pos = translate(circle_pos);\n\n    // Now call the shape functions.\n    vec4 s = square(square_pos);\n    vec4 c = circle(circle_pos);\n    vec4 b = red_bars(bar_pos);\n\n    // Can you make the square bigger?\n    \n        \n    // Blend the colors together based on transparency.\n    vec4 ret = b;\n    ret = mix(ret, c, c.w);\n    ret = mix(ret, s, s.w);\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / iResolution.xx;\n    fragColor = scene(uv);\n}","name":"Image","description":"","type":"image"}]}