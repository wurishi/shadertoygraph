{"ver":"0.1","info":{"id":"MXcSWj","date":"1719813803","viewed":46,"name":"@musix/polar projection","username":"MusixNotMusic","description":"grid  to polar projection","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["polarprojection"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n#define HPI 1.5707963267948966\n\nfloat minEle = HPI * 0.2;\nfloat maxEle = HPI * 0.5;\nfloat R = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = fragCoord / iResolution.x;\n    \n    uv = uv.yx;\n    \n    vec2 o2 = vec2(1.0, 0.0);\n\n    float r = length(uv);\n    \n    float delta = HPI - acos(uv.x / length(uv));\n    \n    if (delta > minEle && delta < maxEle && r < R) {\n    \n        // float aphla = (acos(delta) - acos(minEle)) / (acos(maxEle) - acos(minEle));        \n        \n        float aphla = (delta - minEle) / (maxEle - minEle);\n        \n        vec4 col = texture(iChannel0, vec2(r / R, aphla));\n        \n        fragColor = col;\n    }\n    \n    if (abs(delta - maxEle) < 0.001) {\n       fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    \n    if (abs(delta - minEle) < 0.001) {\n       fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}