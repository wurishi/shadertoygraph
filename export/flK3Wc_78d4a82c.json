{"ver":"0.1","info":{"id":"flK3Wc","date":"1638458592","viewed":153,"name":"Clowns in Parameter Space","username":"SafetySkull","description":"Found a secret clown meeting in the parameters of my attempt at a magnetic pendulum.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","hsv","magnet","clown"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926536\n\n#define G 1.0\n#define MU 1.0\n\n#define AA 4\n\n#define DT 1.0\n#define MIN_DIST 0.1\n#define NUM_BODIES 8\n#define ITER 200\n\n// Clowns in parameter space:\n/*\n#define PI 3.1415926536\n\n#define G 1.0\n#define MU 1.0\n\n#define AA 4\n\n#define DT 1.0\n#define MIN_DIST 0.1\n#define NUM_BODIES 8\n#define ITER 200\n*/\n\nvec3 hsv2rgb_smooth( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float pixel_width = 2.0/iResolution.y;\n    float scale = 2.0;\n    uv *= scale;\n    pixel_width *= scale;\n    \n    vec2[NUM_BODIES] bodies;\n    for (int i = 0; i < NUM_BODIES; i++) {\n        bodies[i] = vec2(cos(2.0*PI*float(i)/float(NUM_BODIES)), sin(2.0*PI*float(i)/float(NUM_BODIES)));\n    }\n    vec3 col = vec3(0.0);\n    for (int nx = 0; nx < AA; nx++) {\n        for (int ny = 0; ny < AA; ny++) {\n        \n            vec2 pos = uv + pixel_width*vec2(nx,ny)/float(AA);\n            vec2 vel = vec2(0.0);\n            vec2 acc = vec2(0.0);\n            \n            float dist;\n            int dist_i;\n            for (int i = 0; i < ITER; i++) {\n                dist = 2.0*scale;\n                dist_i = -1;\n                bool tooClose = false;\n                for (int bod = 0; bod < NUM_BODIES; bod++) {\n                    vec2 body = bodies[bod];\n                    vec2 r = (body-pos);\n                    float r_ = length(r);\n                    if (r_<dist) {\n                        dist = r_;\n                        dist_i = bod;\n                    }\n                    if (dist<MIN_DIST) {\n                        tooClose = true;\n                        break;\n                    }\n                    acc += -G*r/pow(r_,3.0);\n                }\n                if(tooClose) break;\n                acc -= vel*MU;\n                \n                vel += DT*acc;\n                pos += DT*acc;\n            }\n            col += hsv2rgb_smooth(vec3(fract(float(dist_i)/float(NUM_BODIES)+0.2*iTime),1.0-0.2*dist,1.0));\n        }\n    }\n    col /= float(AA*AA);\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}