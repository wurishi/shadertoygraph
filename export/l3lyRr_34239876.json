{"ver":"0.1","info":{"id":"l3lyRr","date":"1725766024","viewed":14,"name":"Phases of the moon","username":"azgc","description":"这个作品缘于一个学生在地理课上的奇想|\nThe creation of this work originated from a student's whimsy in geography class (machine translation)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Pi 3.1415926\n#define Speed.2\n\nmat2 Rot2D(float angle)\n{\n    float s=sin(angle);\n    float c=cos(angle);\n    return mat2(c,-s,s,c);\n}\n\nfloat circle(vec2 p,float r,float t,vec2 uv)\n{\n    uv-=p;\n    float t1=(1.-cos(t*Pi))/2.;\n    float z=t-floor((t+1.)/2.)*2.;\n    float a=-sqrt(r*r-uv.y*uv.y)*(z/abs(z));\n    float x1=a*(2.*t1-1.);\n    return float(uv.x>=min(x1,-a)&&uv.x<=max(x1,-a));\n}\n\nfloat Ball(vec3 p)\n{\n    return length(p-vec3(0,-50.,0))-50.;\n}\nfloat Ball2(vec3 p)\n{\n    return length(p-vec3(1.,0.,-4))-2.;\n}\nfloat Floor(vec3 p)\n{\n    return p.y;\n}\nfloat Sky(vec3 p)\n{\n    return 100.1-length(p-vec3(0,-50.,0));\n}\n\nfloat Map(vec3 p)\n{\n    float ball=Ball(p);\n    float ball2=Ball2(p);\n    float s=Sky(p);\n    return min(ball2,min(s,ball));\n}\n\nfloat RayMarch(vec3 ro,vec3 rd)\n{\n    float t=0.;\n    int s=80;\n    float mind=1000.;\n    for(s;bool(s--);)\n    {\n        vec3 p=ro+rd*t;\n        float d=Map(p);\n        mind=min(mind,d);\n        t+=d;\n        if(d<.01||t>100.)break;\n    }\n    return t;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d=Map(p);\n    vec2 e=vec2(.01,0.);\n    vec3 n=d-vec3(\n        Map(p-e.xyy),\n        Map(p-e.yxy),\n        Map(p-e.yyx)\n    );\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lp=vec3(0.,50,2.);\n    lp.xy*=Rot2D(iTime*Pi*2.*Speed);\n    vec3 ld=normalize(lp-p);\n    vec3 n=GetNormal(p);\n    float t=RayMarch(p+n*.011,ld);\n    float l=clamp(dot(n,ld),.4,1.);\n    if(t<length(lp-p))l*=.3;\n    return l;//length(lp*10.-p)/10./10.;\n}\n\nvec3 getCol(vec3 p,vec2 uv){\n    float l=GetLight(p);\n    float d=Map(p);\n    if(d<.2){\n        if(d==Ball(p))\n        {\n            float a=step(fract(p.x),.5)+step(fract(p.z),.5);\n            return(clamp(vec3(a==1.),.7,1.))*vec3(.2471,.702,.2314)*vec3(l);\n        }\n        else if(d==Sky(p))\n        {\n            float speed=iTime*Speed;\n            \n            float sun=0.;\n            float moon=0.;\n            vec3 p1=p;\n            p1.xy*=Rot2D(speed*Pi*2.);\n            p1.zy*=Rot2D(.4+sin(speed*Pi*2./365.)*.4);\n            if(p1.y>=30.)\n            {\n                sun=circle(vec2(0.,0.),4.,1.,p1.xz);\n            }\n            p1=p;\n            p1.xy*=Rot2D(speed*Pi*(2.-2./30.));\n            p1.zy*=Rot2D(.5);\n            if(p1.y>=30.)\n            {\n                moon=circle(vec2(0.,0.),4.,speed/15.,p1.xz);\n            }\n            vec3 col=vec3(.1294,.9255-p.y/50.,.8863)*clamp(cos(speed*Pi*2.),.05,1.);\n            col=vec3(1.)*moon+col*(1.-moon);\n            col=vec3(.9529,.2392,.1451)*sun+col*(1.-sun);\n            return col;\n        }\n        else if(d==Ball2(p))\n        {\n            return vec3(0.,0.,1.)*vec3(l);\n        }\n    }\n    return vec3(0.);\n    \n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=(fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec2 m=(iMouse.xy*vec2(Pi*2.,Pi)-vec2(iResolution.x*Pi*1.,iResolution.y*Pi/2.))/iResolution.y;\n    \n    vec3 col=vec3(0.);\n    \n    vec3 ro=vec3(0.,.5,0.);\n    vec3 rd=normalize(vec3(uv,1.));\n    \n    rd.yz*=Rot2D(-m.y);\n    rd.xz*=Rot2D(-m.x);\n    \n    //ro.xz+=Ro(vec2(0.,3.),iMouse.x/100.);\n    //rd.xz=Ro(rd.xy,-iMouse.x/100.);\n    \n    float d=RayMarch(ro,rd);\n    vec3 p=ro+rd*d;\n    \n    col=getCol(p,uv);\n    \n    fragColor=vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}