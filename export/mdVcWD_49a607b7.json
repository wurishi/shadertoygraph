{"ver":"0.1","info":{"id":"mdVcWD","date":"1696164264","viewed":182,"name":"Peano Monofractal","username":"MartyMcFly","description":"First implementation of the original Peano curve on shadertoy! The peano curve is the OG among the space filling curves, discovered by Guiseppe Peano in 1890","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["hilbert","spacefillingcurve","peano","sfc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2023 Pascal Gilcher\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// Efficient implementation of the original Peano Curve / Peano Monofractal\n// discovered by Guiseppe Peano in 1890\n//\n// In literature, all space filling curves are sometimes referred to as Peano curves,\n// such as the Hilbert curve or the Z-Curve.\n//\n\n#define LEVELS 7 \n\n//top down is a bit harder to wrap my head around, \n//but the order reversal of the indices is easier this way\nint peano(ivec2 p, int level)\n{\n    int i = 0;\n    for(int b = int(round(pow(3.0, float(level)))); b > 0; b /= 3) //b = blocksize\n    {\n        ivec2 t = p / b;        \n        int ti = 3 * t.x + t.y + (t.x * 2 & 2) * (1 - t.y);         //the 3x3 snake       \n        i = i * 9 + ti;                                             //add current octave to total      \n\n        p -= b * t;                                                 //p %= blocksize       \n                                                                    \n        if(t.y == 1) p.x = b - p.x - 1;                             //flip sub-blocks so next subfractals connect  \n        if(t.x == 1) p.y = b - p.y - 1;       \n    }\n    \n    return i;\n}\n\n\n//thanks IQ\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb=clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z*mix(vec3(1.0),rgb,c.y);\n}\n\nvec3 gradient(float t) \n{\n    float h = 0.6666 * (1.0 - t*t);\n    float s = 0.75;\n    float v = 1.0 - 0.9*(1.0 - t) * (1.0 - t);\n\treturn hsv2rgb(vec3(h,s,v));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    uint N = uint(round(pow(3.0, float(LEVELS)))) ; \n    \n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;    \n    \n    float r = max(0.0, 1.0 - dot(uv, uv) * 0.3);   \n    fragColor = vec4(r);      \n     \n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.3;\n    \n    float fade = max(abs(uv.x), abs(uv.y)) - 1.0;\n    \n    fragColor *= fade / (0.005 + fade);\n     \n    if(abs(uv.x) < 1.0 && abs(uv.y) < 1.0)\n    {\n        uv = uv * 0.5 + 0.5;\n        ivec2 pos = ivec2(uv * float(N));\n        \n        uint mode = uint(iTime*0.125) % 3u;\n        \n        int i = peano(pos, LEVELS);        \n        float t = float(i) / float(N * N);\n        t = fract(t - iTime * 0.125);\n        fragColor = vec4(gradient(t), 1.0);        \n    }  \n}","name":"Image","description":"","type":"image"}]}