{"ver":"0.1","info":{"id":"WdsGDX","date":"1547662923","viewed":715,"name":"int-in-float precision issues","username":"FabriceNeyret2","description":"White if ( x / y ) * y is still an integer.  ( (x,y) = integer screen coordinate ).\n\nJust a gentle reminder that integers encoded by floats are precise for +,-,*,  \nbut they are for / and mod *only* if the second value is a power of 2 ( in light red ).","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["precision","ieee","bug","float"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Z 3.                           // zoom factor\n\n  #define test(i) ( i == floor(i) )    // true iif i is integer\n//#define test(i) ( fract(i) == 0. )   // variant. same result\n//#define test(i) ( fract(i) < 1e-8 )  // variant. same result\n\nfloat e = 1E-5;\n//#define test(i) ( abs(fract(i+e)-e) <  e ) // variant with tolerance\n//#define test(i) ( abs(fract(i+e)-e) <= e ) // not the same result !\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = floor( (u-.5) / Z);   // float representing an integer\n    float x = 2.*U.x/U.y - 1.,\n          i = x*U.y;               // should be integer again\n    O -= O;\n    \n    O = vec4( test(i) ) ;\n    \n#if 1                              // pattern above changes if active\n    O.r = float ( test(x*U.y) ) ;  // should be same as i\n    \n#endif\n    \n    i = log2(U.y); if (test(i)) O.gb *= .8;  \n}","name":"Image","description":"","type":"image"}]}