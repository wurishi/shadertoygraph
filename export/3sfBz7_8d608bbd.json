{"ver":"0.1","info":{"id":"3sfBz7","date":"1587879520","viewed":146,"name":"Varying Frequency Sine Waves","username":"dmemes","description":"Varying frequency sine waves","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["wave","sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    #ifdef SHOW_IMAGE\n    fragColor = vec4(0.0);\n    fragColor.rgb = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    fragColor.b += texelFetch(iChannel1, ivec2(fragCoord), 0).r;\n    #else\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    int i = int(fragCoord.y) * int(iResolution.x) + int(fragCoord.x);\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    float sx = fragColor.x * (2.0 * PI);\n    float y = fragColor.y * 2.0 - 1.0;\n    \n    float height = iResolution.y / (float(COUNT) + 1.0);\n    float baseline = iResolution.y / 2.0 + (float(i) - float(COUNT-1)/2.0) * height;\n   \tvec2 uv = vec2(float(iFrame) * SPEED, baseline + y * height / 2.0) / iResolution.xy;\n\n    float f = length(texture(iChannel1, uv).rgb);\n    float frequency = FREQ_FACTOR + FREQ_SHIFT_FACTOR * f;\n    \n    sx += frequency * SPEED;\n    y = sin(sx);\n    \n    while (sx > 2.0 * PI) sx -= 2.0 * PI;\n    \n    if (iFrame == 0) {\n        y = 0.0;\n        sx = texelFetch(iChannel3, ivec2(i % 256, i / 256), 0).r * 2.0 * PI;\n        frequency = FREQ_FACTOR;\n\t}\n    \n    fragColor = vec4(sx / (2.0 * PI), y * 0.5 + 0.5, fragColor.y, f);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 ifragCoord = ivec2(fragCoord);\n    fragColor = texelFetch(iChannel0, ifragCoord, 0);\n    \n    float height = iResolution.y / (float(COUNT) + 1.0);\n    \n    int w = int(iResolution.x);\n    for (int i = 0; i < COUNT; i++){\n        float baseline = iResolution.y / 2.0 + (float(i) - float(COUNT-1)/2.0) * height;\n        \n        vec4 buf = texelFetch(iChannel1, ivec2(i % w, i / w), 0);\n\n        \n        vec2 p0 = vec2(float(iFrame) * SPEED,   baseline + (buf.y * 2.0 - 1.0) * (height - PADDING) / 2.0);\n        vec2 p1 = vec2(float(iFrame-1) * SPEED, baseline + (buf.z * 2.0 - 1.0) * (height - PADDING) / 2.0);\n\t\t\n        float width = mix(MIN_WIDTH, MAX_WIDTH, buf.w);\n\t\t\t\n        vec2 u = fragCoord - p0;\n        vec2 v = p1 - p0;\n        float d = length(u - v * clamp(dot(u, v) / dot(v, v), 0.0, 1.0));\n        if (d < width) {\n            float fac = 1.0 - clamp(d - (width - 2.0), 0.0, 2.0) / 2.0;\n            fragColor = max(fragColor, vec4(fac));\n        }\n    }\n    \n    if (iFrame == 0) fragColor = vec4(0.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define MIN_WIDTH 1.2\n#define MAX_WIDTH 1.6\n\n#define PI 3.1415926\n\n#define FREQ_FACTOR 0.1\n#define FREQ_SHIFT_FACTOR 0.5\n#define SPEED 1.0\n#define COUNT 32\n\n#define PADDING 2.0\n\n//#define SHOW_IMAGE","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec3 rgb2hsv(vec3 rgb) {\n    vec4 k = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(rgb.bg, k.wz), vec4(rgb.gb, k.xy), step(rgb.b, rgb.g));\n    vec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\nfloat ChromaKey(vec3 col) {\n    vec3 hsv = rgb2hsv(col.rgb);\n    vec3 key = rgb2hsv(vec3(0.0, 1.0, 0.0));\n    vec3 d = abs(hsv - key) / vec3(0.1, 0.5, 0.5);\n   \treturn clamp(length(d) - 1.0, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    //vec4 col = texture(iChannel0, uv * vec2(386.0 / 640.0, 1.0));\n    //float c = length(ChromaKey(col.rgb)) * length(col.rgb);\n    \n    uv = uv * vec2(.16, 1.0);\n    vec4 col = texture(iChannel0, uv);\n    float c = (1.0 - col.r);\n    \n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) c = 0.0;\n    \n    fragColor = vec4(c, c, c, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}