{"ver":"0.1","info":{"id":"llGyWW","date":"1536193467","viewed":81,"name":"Homework1AH","username":"alexander_hart21","description":"Homework","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["eku"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//formula for a triangle that i could actually work with\n// Source:  //http://blackpawn.com/texts/pointinpoly/\nbool triangle(in vec2 a, in vec2 b, in vec2 c, in vec2 p)\n{    \n    // define edges of triangle\n\tvec2 vac = c - a;\n    vec2 vab = b - a;\n    vec2 vap = p - a;\n    \n    // define dotproducts we need\n    float dotVac = dot(vac, vac);\n    float dotVacab = dot(vac, vab);\n    float dotVacap = dot(vac, vap);\n    float dotVab = dot(vab, vab);\n    float dotVabap = dot(vab, vap);\n    \n    // compute missing variables u and v\n    float u = ((dotVab * dotVacap) - (dotVacab * dotVabap)) / \n        ((dotVac * dotVab) - (dotVacab * dotVacab));\n    \n    float v = ((dotVac * dotVabap) - (dotVacab * dotVacap)) / \n        ((dotVac * dotVab) - (dotVacab * dotVacab));\n    \n    // if u and v are greater than 0 but combined less than 1\n    // point is inside triangle\n    return (u >= 0.0) && (v >= 0.0) && (u + v < 1.0);\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 'x' range 640 pixels\n    // ' y ' range 0 to 360\n    \n    vec2 r = vec2( fragCoord.xy - 0.5*iResolution.xy );\n\tr = 2.0 * r.xy / iResolution.xy;\n    // Time varying pixel color\n    vec3 backCol = vec3(1.0);\n    \n    \n\tvec3 col = backCol;\n    \n    // black rectangle outline\n    if(fragCoord.x < 10.0 || fragCoord.x > 630.0 \n       || fragCoord.y < 10.0 || fragCoord.y > 350.0){\n        col = vec3(0.0);\n    }\n    \n    // draw green circle\n    vec2 circOneCent = vec2(200.0);\n    float circOneRadius = 30.0 * sin(45.0 + iTime);\n    if(distance(fragCoord.xy, circOneCent) < circOneRadius){\n        col = vec3(0.0, 1.0, 0.0);\n    }\n    \n    // draw red square\n    vec2 squareUpLeft = vec2(iMouse.x - 50.0, iMouse.y + 100.0);\n    vec2 squareLowRight = vec2(iMouse.x + 100.0, iMouse.y - 50.0);\n    if(fragCoord.x < squareLowRight.x && fragCoord.x > squareUpLeft.x\n       && fragCoord.y < squareUpLeft.y && fragCoord.y > squareLowRight.y){\n        col = vec3(mod(r.x + r.y, 2.), 1, 0);\n    }\n    \n    \n    \t// make a triangle \n    vec2 pointOne = vec2 (1,1);\n    vec2 pointTwo = sin(vec2 (0,1)+2.0);\n    vec2 pointThree = sin(vec2 (2,7)+1.0);\n    bool Triangle = triangle(pointOne, pointTwo, pointThree, r);\n    \n    if(Triangle)\n        col = vec3(0.5, 0, 1.0);\n        \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}