{"ver":"0.1","info":{"id":"wtXBRS","date":"1596991736","viewed":108,"name":"Ray Marching - Wobbly Sphere","username":"kylehovey","description":"My first attempt at lighting a ray-marched surface.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["ray","lighting","sphere","marching","march"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 100.0\n#define MAX_STEPS 255\n#define EPSILON 0.0001\n\nfloat sphereSDF(vec3 point) {\n  return length(point) - 1.0 + 0.1*sin(30.0*point.y - iTime*5.0);\n}\n\nvec3 sphereNormal(vec3 point) {\n  vec2 e = vec2(EPSILON, 0.0);\n\n  return normalize(\n      sphereSDF(point) - vec3(\n        sphereSDF(point + e.xyy),\n        sphereSDF(point + e.yxy),\n        sphereSDF(point + e.yyx)\n      )\n  );\n}\n\nfloat trace(vec3 ro, vec3 rd) {\n  float depth = 0.0;\n\n  for (int i = 0; i < MAX_STEPS; ++i) {\n    float dist = sphereSDF(ro + depth * rd);\n\n    if (dist < EPSILON) return depth;\n\n    depth += dist;\n\n    if (depth > MAX_DIST) return MAX_DIST;\n  }\n\n  return MAX_DIST;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 xy = fragCoord - iResolution.xy / 2.0;\n  vec3 ro = vec3(0.0, 0.0, 5.0);\n  vec3 rd = normalize(vec3(xy, -iResolution.y / tan(radians(50.0 + 10.0*sin(iTime)) / 2.0)));\n\n  vec3 light = vec3(sin(iTime), cos(iTime), cos(iTime));\n\n  float dist = trace(ro, rd);\n\n  if (dist < MAX_DIST) {\n    vec3 normal = sphereNormal(ro + dist * rd);\n\n    fragColor = vec4(vec3(dot(normal, light)), 1.0);\n\n    return;\n  }\n\n  fragColor = vec4(vec3(0.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}