{"ver":"0.1","info":{"id":"XXjGRt","date":"1708723898","viewed":50,"name":"Ray-marching infinite color cube","username":"akr51","description":"Attempt at ray-marching cubes. It's not efficient. Anyone know how to improve? It runs smoothly with very low increment (dt = 0.1) with a low limit = 5. \n\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nmat3 roty(float theta)\n{\n\n    \n    return mat3(cos(theta), 0.0, sin(theta),\n         0.0, 1.0, 0.0,\n         -sin(theta), 0.0, cos(theta));\n\n}\n\n\nmat3 rotx(float theta)\n{\n\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(theta), -sin(theta),\n                0.0, sin(theta), cos(theta));\n    \n\n}\n\nfloat cube(vec3 rayOrigin, vec3 rayDirection, vec3 pos, in mat3 rot)\n{\n\n\n    float dt = 0.01;\n    float limit = 5.0;\n    \n    for (float t = 0.0; t < limit; t += dt)\n    {\n    \n        \n       \n        vec3 p = rayOrigin + t * rayDirection;\n        p += pos;\n        p *= rot;\n        \n        \n        float mx = max(abs(sin(p.x * 4.0)), abs(sin(p.y * 4.0)));\n        float mz = max(mx, abs(sin(p.z * 4.0)));\n     \n        \n        if (mz < 0.75)\n        {\n        \n            \n            return distance(rayOrigin, p) / 5.0;\n        \n        }\n    \n    }\n    \n    return 0.0;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n\n    vec3 rayOrigin = vec3(0.0, 0.25, -1.0);\n    vec3 rayDirection = normalize(vec3(vec3(uv, 0.0) - rayOrigin));\n    \n    float f = cube(rayOrigin , rayDirection, vec3(0.0, -0.2 + sin(iTime) * 4.0, 0.5), roty(iTime * 0.25) * rotx(iTime * 0.25));\n    float r = pow(sin(f * 4.0 + iTime), 4.0);\n    float g = pow(cos(f * 3.0 + iTime * 1.1), 4.0);\n    float b = pow(cos(f * 2.5) * sin(f), 4.0);\n    \n    fragColor = vec4(vec3(r, g, b), 1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}