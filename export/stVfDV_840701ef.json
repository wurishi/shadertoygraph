{"ver":"0.1","info":{"id":"stVfDV","date":"1665323014","viewed":144,"name":"Sorting algoritms test","username":"Envy24","description":"Radix, Quick, Shaker sorts.\n\nUpper half of frame unsorted data, lower - sorted.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","sort","quickselect","quicksort","radixsort","shakersort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define PIXEL_SIZE 50.00 // for 800x450 resolution\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\n// for 800*450 resolution\nconst float width = 16.;\nfloat buffer[int(width)];\nconst int num_of_elements = int(width);\n\n#define HASH(w) ( hash11(uint(w)) )\n\nvoid shaker_sort(inout float array[num_of_elements])\n{\n    for (int L = num_of_elements - 1, E = 1, C = -1; L > E; --L, ++E)\n    {  \n        while (++C < L)\n        {\n            if (array[C] > array[C + 1])\n            {           \n                float A = array[C]; array[C] = array[C + 1]; array[C + 1] = A;\n            }\n        }       \n\n        while (--C >= E)\n        {\n            if (array[C - 1] > array[C])\n            {            \n                float A = array[C - 1]; array[C - 1] = array[C]; array[C] = A;\n            }\n        }\n    }\n}\n\nvoid radix_sort(inout float array[num_of_elements])\n{\n    const int max_num_of_digits = 3; // base 10 digits for max element value 255.\n    const int base = 10;\n\n    int temp[num_of_elements];\n    int digits_array[10];\n    int power = 1;\n    float inv = 1./255.;\n\n    for (int k = 0; k < max_num_of_digits; ++k)\n    {\n        for (int i = 0; i < 10; ++i) { digits_array[i] = 0; }\n    \n        for (int i = 0; i < num_of_elements; ++i)\n        {\n            int value = int(array[i] * 255.);\n            int digit = (value / power) % base;\n            ++digits_array[digit];\n            temp[i] = value;\n        }\n\n        for (int i = 0; i < 9; ++i) { digits_array[i + 1] += digits_array[i]; }\n        \n        for (int i = num_of_elements - 1; i >= 0; --i)\n        {\n            float value = float(temp[i]) * inv;\n            int digit = (temp[i] / power) % base;\n            array[--digits_array[digit]] = value;\n        }\n        \n        power *= base;\n    }\n}\n\nvoid quick_sort(inout float array[num_of_elements])\n{\n    int pairs[2 * num_of_elements], rw_offset = 0;\n\n    pairs[rw_offset++] = 0; pairs[rw_offset++] = num_of_elements - 1;\n\n    while (rw_offset != 0)\n    {\n        /* Tony Hoare's partition. */\n        int high = pairs[--rw_offset], low = pairs[--rw_offset];\n\n        float pivot = (array[low] + array[high]) * 0.5;\n        int i = low, j = high;\n\n        for (int k = 0; k < num_of_elements; ++k)\n        {\n            while (array[i] < pivot) { ++i; }\n            while (array[j] > pivot) { --j; }\n\n            if (i >= j) { break; }\n\n            float t = array[i]; array[i] = array[j]; array[j] = t;\n            ++i; --j;\n        }\n        /* Tony Hoare's partition. */\n\n        if (low < j) { pairs[rw_offset++] = low; pairs[rw_offset++] = j; }\n        if (j + 1 < high) { pairs[rw_offset++] = j + 1; pairs[rw_offset++] = high; }\n    }\n}\n\nvoid mainImage(out vec4 O, vec2 SC)\n{\n    vec2 CC = floor(SC / PIXEL_SIZE);\n    \n    // Fill array.\n    for (float c = 0.; c < width; c += 1.) { buffer[int(c)] = HASH(iTime + width+c); }\n        \n    // Store unsorted value.\n    float gray = buffer[int(CC.x)];\n    \n    // Sort array.\n    //shaker_sort(buffer);\n    radix_sort(buffer);\n    //quick_sort(buffer);\n    \n    O = \n        SC.y > R.y * 0.5 ?\n            vec4( gray ) :\n            vec4( buffer[int(CC.x)] );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n    Returns hash in range [0.0; 1.0].\n*/\nfloat hash11(uint value)\n{\n    // Try different values.\n    const uint seed0 = 12345u;\n    const uint seed1 = 67890u;\n\n    // Calculate hash.\n\tvalue += seed1;\n\tvalue *= 445593459u;\n\tvalue ^= seed0;\n\n    // 1.0f / 4294967295.0f = 2.32830644e-10\n    \n    return float(value * value * value) * 2.32830644e-10;\n}","name":"Common","description":"","type":"common"}]}