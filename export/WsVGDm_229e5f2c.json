{"ver":"0.1","info":{"id":"WsVGDm","date":"1570342335","viewed":333,"name":"shadetober #05 (build)","username":"percentcer","description":"Inktober, but with shaders","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["inktober","shadertober","shadetober","inktober2019"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // define a \"target\" height, the arbitrary point between earth and sky\n    // this will be the value of the red channel at a single row of our input texture\n    // for dynamism, change which row it is as time passes\n    // (we also offset and scale the result slightly to appease the aesthetic \"rule of thirds\")\n    vec2 sampledrow = vec2(uv.x, iTime * .005);\n    float redvalue = texture(iChannel0, sampledrow).r;\n    float filltarget = .1 + (redvalue) * .7;\n    \n    vec3 earthcolor = vec3(uv.y * 2., 0., 0.);\n    vec3 skycolor = vec3(1.-(uv.y * uv.y), (1.-(uv.y * uv.y))/2., .2);\n    vec3 col = mix( skycolor, earthcolor, 1. - step(filltarget, uv.y) );\n    \n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}