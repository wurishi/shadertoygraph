{"ver":"0.1","info":{"id":"ltB3WD","date":"1429132146","viewed":872,"name":"helloworld lens blur","username":"phl","description":"--\n\n   * Click in x-axis to set blur amount, y-axis for colour aberration.\n","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration","radialblur","lensblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float blurMax = 0.2;\nconst float aberrationMax = 1.2;\n\nconst int numIters = 51;\n\nfloat weightedColour(float colour, int offset, float mid) {\n    \n    return colour * 1.0 * (mid - abs(mid-float(offset)))/mid;\n}\n\nvoid mainImage(out vec4 fragColour, in vec2 fragCoord ) {\n    \n    vec2 scaledInput = iMouse.xy / iResolution.xy;    \n\n    float blur = -blurMax * scaledInput.x;\n\tfloat aberration = 1.0 + (aberrationMax * (1.0 - scaledInput.y));\n\n\tint channelspread = int(float(numIters) / aberration);\n\tfloat mid = float(channelspread+1)/2.0;\n\n    ivec3 lobound = ivec3(numIters-channelspread,(numIters-channelspread)/2,0.0);\n    ivec3 hibound = ivec3(numIters,(numIters+channelspread)/2,channelspread);\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    if (iChannelTime[0]==0.0) uv.y = 1.0-uv.y;\n    \n\tconst vec2 centre = vec2(0.5,0.5);\n    uv -= centre; \n\n    vec4 colour = vec4(0.0);\n\n\tfloat blurPerIter = blur / float(numIters-1); \n    for(int i = 0; i < numIters; i++) {\n        float scale = 1.0 + (blurPerIter * float(i));\n        vec4 txColour = texture(iChannel0, centre + (uv * scale));\n       \n        ivec3 kk = ivec3(i+1) - lobound;\n        \n        if (i>=lobound.x && i<hibound.x) {\n            colour.x += weightedColour(txColour.x,kk.x,mid);\n        } \n        if (i>=lobound.y && i<hibound.y) {\n            colour.y += weightedColour(txColour.y,kk.y,mid);\n        }\n        if (i>=lobound.z && i<hibound.z) {\n            colour.z += weightedColour(txColour.z,kk.z,mid);\n        }\n    }\n    \n    \n\tfragColour = colour / (0.5*float(channelspread+1));\n}\n\n","name":"","description":"","type":"image"}]}