{"ver":"0.1","info":{"id":"Mt3BDN","date":"1539637656","viewed":221,"name":"Chanel Doodle #6","username":"Flopine","description":"15 minutes improvisation training for a performance at the Chanel Foundation gala","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","performance","15mins"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui and Coyhot for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Cookie Collective rulz\n\n\n#define ITER 64.\n#define PI 3.141592\n#define time iTime\n#define BPM 25./2.\n#define tempo BPM/60.\n\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{return a+b*cos(2.*PI*(c*t+d));}\n\nfloat random (vec2 st)\n{return fract(sin(dot(st.xy, vec2(12.2544, 35.1571)))*5418.548416);}\n\nvec2 moda (vec2 p, float per)\n{\n    float a = atan(p.y, p.x);\n    float l = length(p);\n    a = mod(a-per/2., per)-per/2.;\n    return vec2(cos(a),sin(a))*l;\n}\n\nvec2 mo(vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y > p.x) p.xy = p.yx;\n    return p;\n}\n\nfloat stmin(float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5 * (u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 );\n    return min( a, b ) - h*h*0.25/k;\n}\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\nfloat od (vec3 p, float d)\n{return dot(p, normalize(sign(p)))-d;}\n\nfloat cyl (vec2 p, float r)\n{return length(p)-r;}\n\nfloat box( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p.xyz, p.yzx);\n    return min(p.x, min(p.y,p.z)) - d;\n}\n\nfloat prim1 (vec3 p)\n{\n    float s = sphe(p, 1.);\n    p.xz = moda(p.xz, 2.*PI/4.);\n    p.x -= 1.;\n    return max(s, -od (p,.5));\n}\n\nfloat prim2(vec3 p)\n{\n    p.xy = mo(p.xy, vec2(2.));\n    float p1 = prim1(p);\n    p.xz *= rot(time*tempo);\n    p.xz *= rot(p.y);\n    p.xz = moda(p.xz, 2.*PI/8.);\n    p.x -= 1.;\n    return stmin(cyl(p.xz, 0.1), p1, 0.5, 4.);\n}\n\nfloat prim3(vec3 p)\n{\n    p.xy = moda(p.xy, 2.*PI/3.);\n    p.x -= 4.;\n    return prim2(p);\n}\n\nfloat prim4 (vec3 p)\n{\n    float per = 3.;\n    p.xy *= rot(p.z*0.5);\n    p.z = mod(p.z-per/2., per)-per/2.;\n    return prim3(p);\n}\n\nfloat prim5(vec3 p)\n{\n    p.xz *= rot(time*tempo);\n    p.xy *= rot(time * tempo);\n    p *= 1.5;\n    return stmin(sphe(p,1.), od(p,1.), 0.5, 4.);\n}\n\nfloat g = 0.;\nfloat SDF(vec3 p)\n{\n    float d = min(prim4(p), prim5(p));\n    g+=0.1/(0.1+d*d); \n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 ro = vec3(0.001,0.001,-10.); vec3 p = ro;\n    vec3 rd = normalize(vec3(uv,1.));\n\n    float shad = 0.;\n    float dither = random(uv);\n\n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = i/ITER;\n            break;\n        }\n        d *= 0.9 + dither*0.1;\n        p += d*rd * 0.8;\n    }\n\n    float t = length(ro-p);\n\n    vec3 pal = palette\n        (abs(uv.y),\n         vec3(0.5),\n         vec3(0.5),\n         vec3(0.5),\n         vec3(0.5,0.3,0.2));\n\n    vec3 c = vec3(shad) * pal;\n    c = mix(c, vec3(0.,0.,0.2), 1.-exp(-0.01*t*t));\n    c += g*0.05*(1.-length(uv));\n    fragColor = vec4(pow(c, vec3(0.45)),1.);\n}","name":"Image","description":"","type":"image"}]}