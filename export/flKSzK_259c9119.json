{"ver":"0.1","info":{"id":"flKSzK","date":"1641060399","viewed":60,"name":"Fork Sound Visu rockes 037","username":"rockes","description":"A quick look at the source of ShaderToy and you can see how they encode audio onto a canvas element. \n\nThe following is a visualization of that data to better understand how it all works.","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["noise","sin","square","saw"],"hasliked":0,"parentid":"llfSDj","parentname":"Sound Visualizer"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*************************************************************************\n* Synth Primitives\n* Everything you should need to get sound on your shaders!\n* Last Updated: Sun Sep 14 2015 @ 12:00PM EST\n* By Alain Galvan (Alain.xyz) | Lukas Borges (Lukas.xyz)\n**************************************************************************\n* Constants\n*************************************************************************/\n#define TAU 6.283185\n\n/*************************************************************************\n* Utilities\n*************************************************************************/\n// note number to frequency\nfloat ntof(float n)\n{\n\treturn 440.0 * pow(2.0, (n - 69.0) / 12.0);\n}\n\n/*************************************************************************\n* Synths\n*************************************************************************/\n//Sin \nfloat synthSin(float f, float x) {\n    return sin(mod(f * x * TAU, TAU));\n}\n\nfloat synthSquare(float f, float x)\n{\n    return floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 );\n}\n\nfloat synthNoise( float x )\n{\n    return fract( sin( 123523.9898 * x ) * 43758.5453 );\n}\n\n/*************************************************************************\n* Main\n*************************************************************************/\nvec2 mainSound(float time) {\n    float tone = synthSquare(ntof(67.0), time);\n    float tone2 = synthSquare(ntof(74.0), time);\n    float tone3 = synthSquare(ntof(79.0), time);\n    return vec2(mix(tone3, mix(tone,tone2, 0.5),0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \tvec2 uv = iTime + fragCoord.xy / iResolution.xy;\n        float t = iTime + (uv.x + uv.y * 512.0) / 44100.0;\n        vec2 y = mainSound(t);\n        vec2 v = floor((0.5 + 0.5 * y) * 65536.0);\n        vec2 vl = mod(v, 256.0) / 255.0;\n        vec2 vh = floor(v / 256.0) / 255.0;\n        fragColor = vec4(vl.x, vh.x, vl.y, vh.y);\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"/*************************************************************************\n* Synth Primitives\n* Everything you should need to get sound on your shaders!\n* Last Updated: Sun Sep 14 2015 @ 12:00PM EST\n* By Alain Galvan (Alain.xyz) | Lukas Borges (Lukas.xyz)\n**************************************************************************\n* Constants\n*************************************************************************/\n#define TAU 6.283185\n\n/*************************************************************************\n* Utilities\n*************************************************************************/\n// note number to frequency\nfloat ntof(float n)\n{\n\treturn 440.0 * pow(2.0, (n - 69.0) / 12.0);\n}\n\n/*************************************************************************\n* Synths\n*************************************************************************/\n//Sin \nfloat synthSin(float f, float x) {\n    return sin(mod(f * x * TAU, TAU));\n}\n\nfloat synthSquare(float f, float x)\n{\n    return floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 );\n}\n\nfloat synthNoise( float x )\n{\n    return fract( sin( 123523.9898 * x ) * 43758.5453 );\n}\n\n/*************************************************************************\n* Main\n*************************************************************************/\nvec2 mainSound( in int samp,float time)\n{\n    float tone = synthSquare(ntof(67.0), time);\n    float tone2 = synthSquare(ntof(74.0), time);\n    float tone3 = synthSquare(ntof(79.0), time);\n    //return vec2(mix(tone3, mix(tone,tone2, 0.5),0.5));\n    float tone4 = synthSin(ntof(67.0), time);\n    float tone5 = synthSin(ntof(74.0), time);\n    float tone6 = synthSin(ntof(79.0), time);\n    float volume = .1;\n    return vec2(mix(tone6, mix(tone4,tone5, 0.5),0.5)) * volume;\n}","name":"Sound","description":"","type":"sound"}]}