{"ver":"0.1","info":{"id":"tt2cDW","date":"1594415778","viewed":451,"name":"sobel not sobel (fast!)","username":"pronce","description":"quick and cheap edge filter. when speed is more important than quality. have fun!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sobel","postprocessing","fast","detection","edgefilter","edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"sobel not sobel\" filter\n// simple edge filter with only 2 texture lookups\n\n/*\n\there's the trick: sample another resolution of the input image and compare it with the standard version of the image. \n\tsimple as that. free to use!\n\n*/ \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // sampling constant\n    vec2 d = iResolution.xy;\n    \n    // amplify the result by taking the resolution difference into account\n    float filterAmplification = length(iResolution.xy)  /  length(vec2(textureSize(iChannel0, 0).xy));\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n   \t// reduced uv coordinates\n    vec2 uv_e = floor(uv * d) / d;\n\n    // read the texture\n    vec3 col0 = texture(iChannel0, uv).rgb;\n    \n    // read the reduced version\n    vec3 col1 = texture(iChannel0, uv_e).rgb;\n\n    // just an outline:\n    vec3 edge_outline = vec3(max(0.0, 1.0 - length(col1 - col0) * filterAmplification));\n    \n    fragColor = vec4(edge_outline, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}