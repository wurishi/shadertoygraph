{"ver":"0.1","info":{"id":"wstBzn","date":"1604257240","viewed":174,"name":"Julia set cloud","username":"Mablung","description":"What could be better than seeing all the Julia sets at once! These Julia sets are made iterating the expression z = z^2 + c. Here z is varied on the two horisontals. The real part of c is varied on the vertical axis and the imaginary part trought time.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["math","mandelbrot","juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 csquare(vec2 a){\n    return vec2(a.x*a.x-a.y*a.y, 2.0*a.x*a.y);\n}\n\nfloat mandelbrot(vec2 z, vec2 c, int max_it){\n    for(int it = 0; it < max_it; it++){\n        z = csquare(z) + c;\n        if(z.x*z.x+z.y*z.y > 4.0){\n            return float(it);\n        }\n    }\n    return float(max_it);\n}\n\nvec3 angles2vec3(float a,float b){\n    return normalize(vec3(cos(a)*cos(b), sin(a)*cos(b), sin(b)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float alfa = iTime/7.0;\n    float beeta = iTime/5.0;\n    \n    vec3 cameraDir = angles2vec3(alfa,beeta);\n    \n    vec3 screenX = angles2vec3(alfa + 3.1416/2.0, 0.0);\n    vec3 screenY = angles2vec3(alfa, beeta + 3.1416/2.0);\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*vec2(8,4.5) + vec2(-4.0, -2.25);\n    vec3 ray = cameraDir*3.0 + uv.x*screenX + uv.y*screenY;\n    \n    vec3 rayStep = normalize(ray-cameraDir*100.0)/60.0;\n    \n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    int max_ray_steps = 300;\n    float sum = 0.0;\n    \n    for(int stepCount = 0; stepCount <  max_ray_steps; stepCount++){\n    \n        vec2 z = vec2(ray.x,ray.y);\n        vec2 c = vec2(ray.z, sin(iTime/30.0+1.7)); \n\n        float a = mandelbrot(z,c,200)/200.0;\n        sum += a;\n        \n        if( a < 0.0 ){\n            float b = 0.5-float(stepCount)/400.0;\n            col = vec3(b,b,b);\n            break;\n        }\n        \n        if( stepCount == max_ray_steps - 1 ){\n            sum = log(sum)+1.0;\n            col = vec3(sum/10.0,sum/10.0,sum/10.0);\n        }\n        \n        ray += rayStep;\n\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}