{"ver":"0.1","info":{"id":"4tyXDW","date":"1484302826","viewed":155,"name":"3D in 2D","username":"Void_Scroll","description":"Realized for ISART Digital, Math class\n\nIt looks like a blue, wavy curtain. I like it.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["waves","simple","math","draft","educational"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Void Scroll\n// A multi-layered sea with parallax effect\n\n// Draws a wave\nbool drawWave(in float amplitude, in float frequency, in float phase, in float height, in vec2 pixCoords)\n{\n    // Does some simple math\n    float wavePos = amplitude * sin((pixCoords.x + phase * iTime) * frequency) + height;\n    \n    return (pixCoords.y < wavePos);\n}\n\nvoid mainImage( out vec4 pixColor, in vec2 pixCoords )\n{\n    // Parameters    \n        const int waveNum = 100;\n    \t// Tinker with that variable to change the amount of waves generated\n        // (Warning: High numbers will increase the stress on your CPU)\n    \n        float ratio = 0.9940;\n    \t// Closer to 0 → Easy to tell sinuses apart\n    \t// Closer to 1 → Harder to tell sinuses apart\n    \n        float shakeIntensity = 5;\n    \t// How intense the camera shaking is\n    \n        float shakeSpeed = 0.3;\n    \t// How fast the shaking is\n    \n    \tfloat mouseSensitivity = 4.0;\n    \t// How sensitive the camera is to mouse movements\n    \n        bool LSDmode = false;\n    \t// Turn on to turn the smooth colors into a violent flurry of rainbows\n    \n    \tfloat rotation = 0.9 * (cos(iTime) * sin(iTime));\n    // End of Parameters\n    \n    // Constants\n    vec4 mainColor;\n    vec4 bgColor;\n    \n    if (LSDmode) {\n        mainColor = vec4(max(0.1, 0.5 * cos(iTime)), max(0.1, 0.5 * sin(iTime)), max(0.1, 0.5 * cos(-sin(iTime))), 1.0);\n        bgColor = vec4(max(0.3, 0.7 * -tan(iTime)), max(0.1, 0.7 * -sin(iTime)), max(0.1, 0.7 * -cos(sin(iTime))), 1.0);\n    } else {\n        mainColor = vec4(0.037, 0.37, 0.74, 1.00);\n    \tbgColor = vec4(0.05, 0.05, 0.15, 1.0);\n    }\n    \n    vec2 screenDimensions = iResolution.xy;\n    const float mainAmplitude = 200.0;\n    const float mainFrequency = 1.0 / 100.0;\n    const float mainPhase = 500.0;\n    float mainHeight = screenDimensions.x / 1.0;\n    \n    // Variables\n    vec4 color = mainColor;\n    float amplitude = mainAmplitude;\n    float frequency = mainFrequency;\n    float phase = mainPhase;\n    float height = mainHeight;\n    \n    // Centralize the camera\n    pixCoords.x -= iResolution.x * 0.50 * (shakeIntensity * cos(iTime * shakeSpeed));\n    pixCoords.y += iResolution.y * 0.50 * (shakeIntensity * sin(iTime * shakeSpeed)) + iResolution.y / 2.0;\n    \n    // Moves the camera with the mouse\n    pixCoords.x += (iMouse.x * mouseSensitivity) - (iResolution.x * mouseSensitivity * 0.5);\n    pixCoords.y += (iMouse.y * mouseSensitivity / 4.0) - iResolution.y / 2.0;\n    \n    // Rotates everything !\n    pixCoords.x += pixCoords.x * cos(rotation) + pixCoords.y * sin(rotation);\n    pixCoords.y += -pixCoords.x * sin(rotation) + pixCoords.y * cos(rotation);\n    \n    // Begin\n    pixColor = bgColor;\n    \n    for (int i = 0; i < waveNum; i++) {\n        bool isWave = drawWave(amplitude, frequency, phase, height, pixCoords);\n        if (isWave) pixColor = color;\n        amplitude /= ratio;\n        frequency *= ratio;\n        phase /= ratio;\n        height *= ratio;\n        color *= ratio;\n    }\n}","name":"Image","description":"","type":"image"}]}