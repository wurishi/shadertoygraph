{"ver":"0.1","info":{"id":"tttfRS","date":"1612988089","viewed":251,"name":"AA Gouraud Triangle","username":"tholzer","description":"Draw antialiased Gouraud Triangle by calculating the barycentric coordinates of each pixel.","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["2d","triangle","rgb","gouraud","barycentric","antialiased","coordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MlXXRM","filepath":"https://soundcloud.com/cyberpunk-networlddesign/wrath-of-the-demon","previewfilepath":"https://soundcloud.com/cyberpunk-networlddesign/wrath-of-the-demon","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//---------------------------------------------------------\n// AAGouraudTriangle.glsl   2021-02-13\n//\n// Draw antialiased Gouraud Triangle by calculating \n// the barycentric coordinates of each pixel.\n//\n// based on https://www.shadertoy.com/view/lsl3Wn by nuclear \n//\n// tags: 2d, gouraud, barycentric, coordinates, rgb, antialiased, triangle\n//---------------------------------------------------------\n// get barycentric coordinates\nvec3 barycentric (vec3 A, vec3 B, vec3 C  // triangle\n                 ,vec3 P, vec3 normal)\n{\n\tfloat area = dot(cross(B - A, C - A), normal);\n\t//if(abs(area) < 0.0001) return vec3(0.0);\n\tvec3 u = A - P;\n\tvec3 v = B - P;\n\tvec3 w = C - P;\n\tvec3 asub = vec3(dot(cross(v, w), normal),\n\t\t\t\t\t dot(cross(w, u), normal),\n\t\t\t\t\t dot(cross(u, v), normal));\n\treturn abs(asub) / abs(area);\n}\n//---------------------------------------------------------\nvec3 rotate(in vec3 v, float angle) \n{\n  float c = cos(angle), s = sin(angle);\n  return vec3(v.x*c + v.y*s, v.y*c - v.x*s, v.z);\n}\n//---------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  #define R iResolution\n  vec2 uv = (2.0*fragCoord.xy - R.xy) / R.y;\n  float t = iTime * 0.25;\n  vec3 A = rotate(vec3( 0.4*sin(iTime), 0.5, 0.0), t);\n  vec3 B = rotate(vec3( 0.5, -0.2, 0.0), t);\n  vec3 C = rotate(vec3(-0.5, -0.4, 0.0), t);\n  const vec3 normal = vec3(0.0, 0.0, 1.0);\n\n  vec3 bc = barycentric(A,B,C, vec3(uv, 0.0), normal);\n  float sum = bc.x + bc.y + bc.z; \n  float s = 10. / iResolution.y;\n  bc = mix (bc/4., 2.*bc, smoothstep(1.+s, 1.-s, sum));\n  fragColor = vec4(bc, 1.0);\n}","name":"Image","description":"","type":"image"}]}