{"ver":"0.1","info":{"id":"7dyGz1","date":"1631049204","viewed":157,"name":"Julia minibrot unwinding","username":"Eriksonn","description":"shows how the complexity near each minibrot is enough to reconstruct the entire surrounding julia set","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 Mult(vec2 A,vec2 B)\n{\n    return vec2(A.x*B.x-A.y*B.y,A.x*B.y+A.y*B.x);\n}\nvec2 Exp(vec2 A)\n{\n    return exp(A.x)*vec2(cos(A.y),sin(A.y));\n}\nvec2 Log(vec2 A)\n{\n    return vec2(log(length(A)),atan(A.y,A.x));\n}\nvec2 Sqrt(vec2 A)\n{\n    float L = length(A)+0.0001;\n    \n    return vec2(sqrt((L+A.x)/2.0),(A.y>=0.0?1.0:-1.0)*sqrt((L-A.x)/2.0));\n}\nfloat lerp(float x,float y, float t)\n{\n    return x*(1.0-t)+y*t;\n}\nfloat zoom=1.0;\nfloat ColorOffset=0.0;\nvec3 GetFromPixel(vec2 pixel,bool override)\n{\n    if(pixel.x>iResolution.x||pixel.x<0.0||pixel.y>iResolution.y||pixel.y<0.0&&!override)\n        return vec3(0);\n    vec2 C = (pixel-iResolution.xy*0.5)/iResolution.x;\n    C=zoom*C;\n    vec2 Offset =vec2(-1.770663,0.016333);\n    C+=Offset;\n    vec2 Z = vec2(0);\n    \n    for(int i =0;i<200;i++)\n    {\n        Z=Mult(Z,Z)+C;\n        \n        float D = Z.x*Z.x+Z.y*Z.y;\n        if(D>10.0)\n        {\n            return (cos(vec3(float(i)*0.2)+vec3(0,2,4)+ColorOffset)*0.5+0.5);\n            \n        }\n    }\n    return vec3(0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*0.25-0.25;\n    float U = clamp((time-3.5)*2.0,0.0,1.0);\n    float U2 = clamp((time-4.2)*2.0,0.0,1.0);\n    \n    zoom = exp(lerp(log(2.0),log(0.0012),clamp(time-0.0,0.0,1.0)));\n    \n    zoom = exp(lerp(log(zoom),log(0.0001),clamp((time-1.2)*2.0,0.0,1.0)));\n    vec2 Center=iResolution.xy*0.5*(1.0+vec2(-0.046,0.017));\n    //Center = vec2((iMouse.xy-Center)/10.0)+Center;\n    vec2 P = (fragCoord-Center-vec2(U*iResolution.x/4.0,0))/iResolution.x;\n    \n    float K=clamp(time-2.2,0.0,1.0);\n    float angleOffset=0.45*U;\n    float scale=lerp(4.0,6.0,U);\n    P*=scale;\n    vec2 S1=Exp(Log(P)*(1.0-0.5*K)+vec2(0,angleOffset));\n    vec2 S2=Exp(Log(P)*(1.0-0.5*K)+vec2(0,3.1415*K+angleOffset));\n    S1/=scale;\n    S2/=scale;\n    vec3 C1 = GetFromPixel(S1*iResolution.x+Center,false);\n    vec3 C2 = GetFromPixel(S2*iResolution.x+Center,false);\n    if(fragCoord.x>U*iResolution.x/2.0)\n    {\n    \n        fragColor=vec4((C1+C2)/2.0,1);\n    }else\n    {\n        zoom = exp(lerp(log(zoom),log(0.0012),U2));\n        ColorOffset=U2*2.3;\n        fragColor=vec4(GetFromPixel(fragCoord-vec2((U-1.5)*iResolution.x/2.0,0),true),1);\n    }\n    \n    \n    \n    //fragColor=vec4(GetFromPixel(fragCoord),1);\n    //if(length(fragCoord-Center)<5.0)\n    //fragColor+=vec4(0.5);\n}","name":"Image","description":"","type":"image"}]}