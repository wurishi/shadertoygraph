{"ver":"0.1","info":{"id":"3tByDc","date":"1620274204","viewed":263,"name":"LMS Chromaticity Chart + Outline","username":"Tynach","description":"My chromaticity diagram, improved and now in 'lm' space instead of 'xy' space:\n\n- Real spectral data for limiting displayed colors to only real colors representable with real light\n- RGB gamut triangle (sRGB by default)\n- Gamma-correct antialiasing","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["color","rgb","gamma","xyz","xy","science","srgb","lms","chromaticity","lm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/******************************************************************************\n * Scroll to just above the functions to change the parameters used to draw   *\n * the diagram                                                                *\n ******************************************************************************/\n\nprecision highp float;\n\n\n/*\n * Structures\n */\n\n// Parameters for transfer characteristics (gamma curves)\nstruct transfer {\n\t// Exponent used to linearize the signal\n\tfloat power;\n\n\t// Offset from 0.0 for the exponential curve\n\tfloat off;\n\n\t// Slope of linear segment near 0\n\tfloat slope;\n\n\t// Values below this are divided by slope during linearization\n\tfloat cutoffToLinear;\n\n\t// Values below this are multiplied by slope during gamma correction\n\tfloat cutoffToGamma;\n};\n\n// Parameters for a colorspace\nstruct rgb_space {\n\t// Chromaticity coordinates (xyz) for Red, Green, and Blue primaries\n\tmat3 primaries;\n\n\t// Chromaticity coordinates (xyz) for white point\n\tvec3 white;\n\n\t// Linearization and gamma correction parameters\n\ttransfer trc;\n};\n\n\n/*\n * Preprocessor 'functions' that help build colorspaces as constants\n */\n\n// Turns 6 chromaticity coordinates into a 3x3 matrix\n#define \\\nPrimaries(rx, ry, gx, gy, bx, by)\\\n\tmat3(\\\n\t\t(rx), (ry), 1.0 - (rx) - (ry),\\\n\t\t(gx), (gy), 1.0 - (gx) - (gy),\\\n\t\t(bx), (by), 1.0 - (bx) - (by))\n\n// Scale a color to 100% luminosity\n#define \\\nBright(v)\\\n\t(v)/(v).y\n\n// Creates a whitepoint's xyz chromaticity coordinates from the given xy coordinates\n#define \\\nWhite(x, y)\\\n\tvec3((x)/(y), 1.0, (1.0 - (x) - (y))/(y))\n\n// Calculates x coordinate for a white point on the daylight locus, given the\n// correlated color temperature 't'\n#define WhiteDx(t)\\\n\tdot(t <= 7000.0\\\n\t       ? vec4(0.244063, 99.11, 2967800.0, -4607000000.0)\\\n\t       : vec4(0.23704, 247.48, 1901800.0, -2006400000.0),\\\n\t    1.0/vec4(1, (t), pow((t), 2.0), pow((t), 3.0)))\n\n// Calculates xy coordinates for a white point on the daylight locus, given the\n// correlated color temperature 't'\n#define WhiteD(t)\\\n\tWhite(WhiteDx(t),\\\n\t      -3.0*pow(WhiteDx(t), 2.0) + 2.87*WhiteDx(t) - 0.275)\n\n// Creates a scaling matrix using a vec3 to set the xyz scalars\n#define \\\ndiag(v)\\\n\tmatrixCompMult(mat3(1), outerProduct((v), vec3(1)))\n\n/*#define \\\ndiag(v)\\\n\tmat3(\\\n\t\t(v).x, 0.0, 0.0,\\\n\t\t0.0, (v).y, 0.0,\\\n\t\t0.0, 0.0, (v).z)*/\n\n// Creates a conversion matrix that turns RGB colors into XYZ colors\n#define \\\nrgbToXyz(space)\\\n\tspace.primaries*diag((inverse(space.primaries)*space.white))\n\n// Creates a conversion matrix that turns XYZ colors into RGB colors\n#define \\\nxyzToRgb(space)\\\n\tinverse(rgbToXyz(space))\n\n\n/*\n * LMS curves data\n */\n\n// Number of points for the LMS curve data. Usually 291, but that gives a harder\n// to process shape in this case, hence commenting out several of the last points\n#define NUM_POINTS 287\n\n// LMS curves points; goes from 410nm to 700nm\nvec3 lmsCurves[NUM_POINTS] = vec3[NUM_POINTS](\n\tvec3(8.72126562E-03, 8.79368990E-03, 2.33008318E-01), vec3(9.61879153E-03, 9.81865357E-03, 2.60183226E-01),\n\tvec3(1.05323536E-02, 1.09044480E-02, 2.88722693E-01), vec3(1.14619761E-02, 1.20508507E-02, 3.18511681E-01),\n\tvec3(1.24104616E-02, 1.32582230E-02, 3.49431207E-01), vec3(1.33836930E-02, 1.45277327E-02, 3.81363350E-01),\n\tvec3(1.43870208E-02, 1.58600151E-02, 4.14140896E-01), vec3(1.54116155E-02, 1.72495960E-02, 4.47350309E-01),\n\tvec3(1.64424078E-02, 1.86877573E-02, 4.80439025E-01), vec3(1.74614455E-02, 2.01637692E-02, 5.12767135E-01),\n\tvec3(1.84480328E-02, 2.16648593E-02, 5.43618105E-01), vec3(1.93852304E-02, 2.31800771E-02, 5.72399437E-01),\n\tvec3(2.02811387E-02, 2.47139091E-02, 5.99284259E-01), vec3(2.11544610E-02, 2.62784761E-02, 6.24785633E-01),\n\tvec3(2.20286383E-02, 2.78904592E-02, 6.49575739E-01), vec3(2.29317499E-02, 2.95714420E-02, 6.74474074E-01),\n\tvec3(2.38896150E-02, 3.13437635E-02, 7.00186409E-01), vec3(2.49026216E-02, 3.32150920E-02, 7.26460271E-01),\n\tvec3(2.59631430E-02, 3.51888593E-02, 7.52725805E-01), vec3(2.70618851E-02, 3.72683413E-02, 7.78333016E-01),\n\tvec3(2.81877052E-02, 3.94566147E-02, 8.02554955E-01), vec3(2.93303393E-02, 4.17545976E-02, 8.24817858E-01),\n\tvec3(3.04898213E-02, 4.41543810E-02, 8.45422394E-01), vec3(3.16694350E-02, 4.66432409E-02, 8.64961201E-01),\n\tvec3(3.28730969E-02, 4.92050252E-02, 8.84100149E-01), vec3(3.41053893E-02, 5.18198823E-02, 9.03572547E-01),\n\tvec3(3.53670491E-02, 5.44644516E-02, 9.23844418E-01), vec3(3.66400331E-02, 5.71130840E-02, 9.44055273E-01),\n\tvec3(3.78988484E-02, 5.97369425E-02, 9.62919656E-01), vec3(3.91148083E-02, 6.23037817E-02, 9.79057060E-01),\n\tvec3(4.02562524E-02, 6.47782187E-02, 9.91020299E-01), vec3(4.12989224E-02, 6.71329339E-02, 9.97764785E-01),\n\tvec3(4.22582196E-02, 6.93844290E-02, 9.99981961E-01), vec3(4.31627409E-02, 7.15658156E-02, 9.98860947E-01),\n\tvec3(4.40443720E-02, 7.37163628E-02, 9.95628403E-01), vec3(4.49379920E-02, 7.58812175E-02, 9.91515250E-01),\n\tvec3(4.58728905E-02, 7.80979917E-02, 9.87377323E-01), vec3(4.68459041E-02, 8.03537509E-02, 9.82619286E-01),\n\tvec3(4.78446315E-02, 8.26198303E-02, 9.76301170E-01), vec3(4.88555461E-02, 8.48643801E-02, 9.67512827E-01),\n\tvec3(4.98639402E-02, 8.70523965E-02, 9.55393000E-01), vec3(5.08618457E-02, 8.91639889E-02, 9.39498618E-01),\n\tvec3(5.18730928E-02, 9.12522896E-02, 9.20807415E-01), vec3(5.29317333E-02, 9.33950398E-02, 9.00592250E-01),\n\tvec3(5.40746201E-02, 9.56775066E-02, 8.80040181E-01), vec3(5.53418498E-02, 9.81933595E-02, 8.60240453E-01),\n\tvec3(5.67734433E-02, 1.01031383E-01, 8.42031293E-01), vec3(5.83973435E-02, 1.04229303E-01, 8.25571506E-01),\n\tvec3(6.02408731E-02, 1.07814112E-01, 8.10860447E-01), vec3(6.23352567E-02, 1.11816660E-01, 7.97901650E-01),\n\tvec3(6.47164360E-02, 1.16272079E-01, 7.86703893E-01), vec3(6.74130612E-02, 1.21204305E-01, 7.77118717E-01),\n\tvec3(7.04040119E-02, 1.26573030E-01, 7.68364561E-01), vec3(7.36488902E-02, 1.32310541E-01, 7.59537988E-01),\n\tvec3(7.70978002E-02, 1.38333533E-01, 7.49777186E-01), vec3(8.06893625E-02, 1.44540604E-01, 7.38267621E-01),\n\tvec3(8.43613293E-02, 1.50827804E-01, 7.24389338E-01), vec3(8.80904420E-02, 1.57145687E-01, 7.08112614E-01),\n\tvec3(9.18629938E-02, 1.63457016E-01, 6.89571829E-01), vec3(9.56636658E-02, 1.69720863E-01, 6.68926552E-01),\n\tvec3(9.94755270E-02, 1.75892769E-01, 6.46359219E-01), vec3(1.03285638E-01, 1.81937722E-01, 6.22112167E-01),\n\tvec3(1.07103485E-01, 1.87871999E-01, 5.96590777E-01), vec3(1.10947170E-01, 1.93730862E-01, 5.70215640E-01),\n\tvec3(1.14838313E-01, 1.99556529E-01, 5.43373087E-01), vec3(1.18802152E-01, 2.05398073E-01, 5.16410649E-01),\n\tvec3(1.22862603E-01, 2.11302131E-01, 4.89647329E-01), vec3(1.27025792E-01, 2.17283004E-01, 4.63405762E-01),\n\tvec3(1.31293061E-01, 2.23347021E-01, 4.37965017E-01), vec3(1.35665739E-01, 2.29501355E-01, 4.13549483E-01),\n\tvec3(1.40145131E-01, 2.35754060E-01, 3.90333407E-01), vec3(1.44730863E-01, 2.42108491E-01, 3.68393733E-01),\n\tvec3(1.49415456E-01, 2.48545289E-01, 3.47581782E-01), vec3(1.54188534E-01, 2.55037126E-01, 3.27723819E-01),\n\tvec3(1.59038311E-01, 2.61553968E-01, 3.08676241E-01), vec3(1.63951537E-01, 2.68063038E-01, 2.90322411E-01),\n\tvec3(1.68932334E-01, 2.74561420E-01, 2.72626410E-01), vec3(1.74063331E-01, 2.81180052E-01, 2.55771784E-01),\n\tvec3(1.79457342E-01, 2.88097133E-01, 2.39945108E-01), vec3(1.85240873E-01, 2.95508395E-01, 2.25280158E-01),\n\tvec3(1.91556224E-01, 3.03629653E-01, 2.11866834E-01), vec3(1.98532355E-01, 3.12649158E-01, 1.99718535E-01),\n\tvec3(2.06182424E-01, 3.22564974E-01, 1.88674025E-01), vec3(2.14484817E-01, 3.33319240E-01, 1.78556779E-01),\n\tvec3(2.23411375E-01, 3.44844385E-01, 1.69216691E-01), vec3(2.32925516E-01, 3.57060581E-01, 1.60525792E-01),\n\tvec3(2.42992175E-01, 3.69895499E-01, 1.52368238E-01), vec3(2.53615531E-01, 3.83355071E-01, 1.44620438E-01),\n\tvec3(2.64809627E-01, 3.97467012E-01, 1.37173181E-01), vec3(2.76587210E-01, 4.12260159E-01, 1.29936675E-01),\n\tvec3(2.88959412E-01, 4.27764487E-01, 1.22838921E-01), vec3(3.01933704E-01, 4.44000827E-01, 1.15833617E-01),\n\tvec3(3.15507769E-01, 4.60946806E-01, 1.08922157E-01), vec3(3.29673082E-01, 4.78561797E-01, 1.02118262E-01),\n\tvec3(3.44415858E-01, 4.96795479E-01, 9.54374347E-02), vec3(3.59716421E-01, 5.15586863E-01, 8.88965361E-02),\n\tvec3(3.75550447E-01, 5.34867541E-01, 8.25343122E-02), vec3(3.91894602E-01, 5.54574593E-01, 7.64613376E-02),\n\tvec3(4.08721523E-01, 5.74639585E-01, 7.07768506E-02), vec3(4.25997662E-01, 5.94984257E-01, 6.55491245E-02),\n\tvec3(4.43682863E-01, 6.15520174E-01, 6.08209513E-02), vec3(4.61731088E-01, 6.36162030E-01, 5.65919008E-02),\n\tvec3(4.80093753E-01, 6.56871646E-01, 5.27658978E-02), vec3(4.98716765E-01, 6.77623604E-01, 4.92440039E-02),\n\tvec3(5.17539319E-01, 6.98392699E-01, 4.59470203E-02), vec3(5.36493787E-01, 7.19154047E-01, 4.28122756E-02),\n\tvec3(5.55492678E-01, 7.39844183E-01, 3.98013706E-02), vec3(5.74386124E-01, 7.60235488E-01, 3.69227010E-02),\n\tvec3(5.92994956E-01, 7.80038616E-01, 3.41908878E-02), vec3(6.11123546E-01, 7.98940996E-01, 3.16158257E-02),\n\tvec3(6.28561087E-01, 8.16609632E-01, 2.92032829E-02), vec3(6.45138591E-01, 8.32782761E-01, 2.69535703E-02),\n\tvec3(6.60907396E-01, 8.47550216E-01, 2.48575196E-02), vec3(6.75993265E-01, 8.61113469E-01, 2.29046814E-02),\n\tvec3(6.90542475E-01, 8.73697924E-01, 2.10854954E-02), vec3(7.04720332E-01, 8.85549719E-01, 1.93911943E-02),\n\tvec3(7.18662310E-01, 8.96872538E-01, 1.78145088E-02), vec3(7.32322897E-01, 9.07638015E-01, 1.63514395E-02),\n\tvec3(7.45605717E-01, 9.17756577E-01, 1.49980399E-02), vec3(7.58409759E-01, 9.27137002E-01, 1.37496906E-02),\n\tvec3(7.70629906E-01, 9.35687022E-01, 1.26012838E-02), vec3(7.82207895E-01, 9.43361575E-01, 1.15465960E-02),\n\tvec3(7.93289637E-01, 9.50308999E-01, 1.05765907E-02), vec3(8.04083976E-01, 9.56732838E-01, 9.68267908E-03),\n\tvec3(8.14812845E-01, 9.62843704E-01, 8.85745717E-03), vec3(8.25710771E-01, 9.68858338E-01, 8.09453368E-03),\n\tvec3(8.36942718E-01, 9.74919067E-01, 7.38889974E-03), vec3(8.48348797E-01, 9.80849502E-01, 6.73798703E-03),\n\tvec3(8.59675605E-01, 9.86387994E-01, 6.13946693E-03), vec3(8.70656228E-01, 9.91267411E-01, 5.59073481E-03),\n\tvec3(8.81010908E-01, 9.95216550E-01, 5.08900051E-03), vec3(8.90495937E-01, 9.98007488E-01, 4.63119668E-03),\n\tvec3(8.99051792E-01, 9.99594634E-01, 4.21365825E-03), vec3(9.06668909E-01, 9.99981748E-01, 3.83286115E-03),\n\tvec3(9.13341335E-01, 9.99176952E-01, 3.48559480E-03), vec3(9.19066658E-01, 9.97192616E-01, 3.16893322E-03),\n\tvec3(9.23897675E-01, 9.94101614E-01, 2.88020697E-03), vec3(9.28099312E-01, 9.90204438E-01, 2.61697507E-03),\n\tvec3(9.31995493E-01, 9.85855446E-01, 2.37701167E-03), vec3(9.35916341E-01, 9.81403969E-01, 2.15828823E-03),\n\tvec3(9.40197682E-01, 9.77193335E-01, 1.95895533E-03), vec3(9.45075812E-01, 9.73440778E-01, 1.77737071E-03),\n\tvec3(9.50366568E-01, 9.69880983E-01, 1.61218479E-03), vec3(9.55775099E-01, 9.66133321E-01, 1.46214596E-03),\n\tvec3(9.60999943E-01, 9.61823142E-01, 1.32605500E-03), vec3(9.65733133E-01, 9.56583237E-01, 1.20277126E-03),\n\tvec3(9.69744189E-01, 9.50166600E-01, 1.09118319E-03), vec3(9.73133076E-01, 9.42773123E-01, 9.90135012E-04),\n\tvec3(9.76086087E-01, 9.34708698E-01, 8.98563819E-04), vec3(9.78792641E-01, 9.26271394E-01, 8.15524167E-04),\n\tvec3(9.81444621E-01, 9.17749837E-01, 7.40173919E-04), vec3(9.84186485E-01, 9.09338868E-01, 6.71772381E-04),\n\tvec3(9.86965393E-01, 9.00894806E-01, 6.09693161E-04), vec3(9.89678050E-01, 8.92197240E-01, 5.53372350E-04),\n\tvec3(9.92220033E-01, 8.83034571E-01, 5.02292483E-04), vec3(9.94485919E-01, 8.73204873E-01, 4.55979308E-04),\n\tvec3(9.96385799E-01, 8.62565296E-01, 4.13996781E-04), vec3(9.97894643E-01, 8.51172855E-01, 3.75939804E-04),\n\tvec3(9.99004045E-01, 8.39131971E-01, 3.41439153E-04), vec3(9.99706046E-01, 8.26544532E-01, 3.10160251E-04),\n\tvec3(9.99993160E-01, 8.13509255E-01, 2.81799951E-04), vec3(9.99836906E-01, 8.00082372E-01, 2.56083822E-04),\n\tvec3(9.99123467E-01, 7.86166191E-01, 2.32763970E-04), vec3(9.97718715E-01, 7.71635006E-01, 2.11615771E-04),\n\tvec3(9.95490549E-01, 7.56376136E-01, 1.92435527E-04), vec3(9.92309909E-01, 7.40291037E-01, 1.75038547E-04),\n\tvec3(9.88145905E-01, 7.23368777E-01, 1.59257316E-04), vec3(9.83345096E-01, 7.05889868E-01, 1.44939678E-04),\n\tvec3(9.78342318E-01, 6.88184300E-01, 1.31947783E-04), vec3(9.73564193E-01, 6.70554222E-01, 1.20156843E-04),\n\tvec3(9.69429172E-01, 6.53273547E-01, 1.09453897E-04), vec3(9.66211047E-01, 6.36524204E-01, 9.97366706E-05),\n\tvec3(9.63629933E-01, 6.20217289E-01, 9.09125196E-05), vec3(9.61272895E-01, 6.04210507E-01, 8.28975884E-05),\n\tvec3(9.58731517E-01, 5.88375391E-01, 7.56159926E-05), vec3(9.55601819E-01, 5.72596792E-01, 6.89990581E-05),\n\tvec3(9.51568637E-01, 5.56783148E-01, 6.29846143E-05), vec3(9.46653575E-01, 5.40895608E-01, 5.75163304E-05),\n\tvec3(9.40962330E-01, 5.24912224E-01, 5.25432225E-05), vec3(9.34600447E-01, 5.08816788E-01, 4.80191572E-05),\n\tvec3(9.27672559E-01, 4.92598798E-01, 4.39023849E-05), vec3(9.20264315E-01, 4.76267813E-01, 4.01551079E-05),\n\tvec3(9.12390740E-01, 4.59892636E-01, 3.67430788E-05), vec3(9.04050350E-01, 4.43550966E-01, 3.36352927E-05),\n\tvec3(8.95242882E-01, 4.27313848E-01, 3.08036839E-05), vec3(8.85969334E-01, 4.11245617E-01, 2.82228417E-05),\n\tvec3(8.76242466E-01, 3.95396356E-01, 2.58697494E-05), vec3(8.66117284E-01, 3.79781665E-01, 2.37235394E-05),\n\tvec3(8.55657805E-01, 3.64409629E-01, 2.17653077E-05), vec3(8.44926107E-01, 3.49288891E-01, 1.99779303E-05),\n\tvec3(8.33982132E-01, 3.34428550E-01, 1.83458912E-05), vec3(8.22858885E-01, 3.19842911E-01, 1.68551252E-05),\n\tvec3(8.11491117E-01, 3.05564226E-01, 1.54928703E-05), vec3(7.99794023E-01, 2.91625076E-01, 1.42475548E-05),\n\tvec3(7.87688857E-01, 2.78053259E-01, 1.31086855E-05), vec3(7.75103324E-01, 2.64872009E-01, 1.20667447E-05),\n\tvec3(7.61995930E-01, 2.52099488E-01, 1.11130939E-05), vec3(7.48424747E-01, 2.39747055E-01, 1.02398848E-05),\n\tvec3(7.34469825E-01, 2.27822335E-01, 9.43999216E-06), vec3(7.20208108E-01, 2.16330273E-01, 8.70694726E-06),\n\tvec3(7.05713103E-01, 2.05273346E-01, 8.03487566E-06), vec3(6.91043503E-01, 1.94649648E-01, 7.41844055E-06),\n\tvec3(6.76211520E-01, 1.84447615E-01, 6.85279186E-06), vec3(6.61219505E-01, 1.74654040E-01, 6.33352032E-06),\n\tvec3(6.46071535E-01, 1.65256374E-01, 5.85661599E-06), vec3(6.30773388E-01, 1.56242654E-01, 5.41843079E-06),\n\tvec3(6.15349220E-01, 1.47602388E-01, 0), vec3(5.99888258E-01, 1.39328896E-01, 0),\n\tvec3(5.84488739E-01, 1.31415765E-01, 0), vec3(5.69240353E-01, 1.23855877E-01, 0),\n\tvec3(5.54224372E-01, 1.16641491E-01, 0), vec3(5.39469305E-01, 1.09765763E-01, 0),\n\tvec3(5.24827070E-01, 1.03226432E-01, 0), vec3(5.10123556E-01, 9.70205151E-02, 0),\n\tvec3(4.95205531E-01, 9.11430058E-02, 0), vec3(4.79940995E-01, 8.55871752E-02, 0),\n\tvec3(4.64269520E-01, 8.03427998E-02, 0), vec3(4.48338311E-01, 7.53912660E-02, 0),\n\tvec3(4.32329322E-01, 7.07135564E-02, 0), vec3(4.16405540E-01, 6.62923873E-02, 0),\n\tvec3(4.00710831E-01, 6.21120321E-02, 0), vec3(3.85355429E-01, 5.81594780E-02, 0),\n\tvec3(3.70376724E-01, 5.44275517E-02, 0), vec3(3.55792605E-01, 5.09097902E-02, 0),\n\tvec3(3.41617724E-01, 4.75990951E-02, 0), vec3(3.27863707E-01, 4.44878727E-02, 0),\n\tvec3(3.14540835E-01, 4.15659453E-02, 0), vec3(3.01662231E-01, 3.88151890E-02, 0),\n\tvec3(2.89238816E-01, 3.62180917E-02, 0), vec3(2.77278035E-01, 3.37598910E-02, 0),\n\tvec3(2.65784185E-01, 3.14282295E-02, 0), vec3(2.54739669E-01, 2.92175652E-02, 0),\n\tvec3(2.44054451E-01, 2.71403387E-02, 0), vec3(2.33633978E-01, 2.52084169E-02, 0),\n\tvec3(2.23398785E-01, 2.34286294E-02, 0), vec3(2.13283643E-01, 2.18037465E-02, 0),\n\tvec3(2.03256632E-01, 2.03284511E-02, 0), vec3(1.93370014E-01, 1.89779190E-02, 0),\n\tvec3(1.83687512E-01, 1.77272061E-02, 0), vec3(1.74262972E-01, 1.65560098E-02, 0),\n\tvec3(1.65140826E-01, 1.54479552E-02, 0), vec3(1.56353734E-01, 1.43923782E-02, 0),\n\tvec3(1.47915648E-01, 1.33895734E-02, 0), vec3(1.39833545E-01, 1.24414195E-02, 0),\n\tvec3(1.32111108E-01, 1.15488447E-02, 0), vec3(1.24749078E-01, 1.07119605E-02, 0),\n\tvec3(1.17743591E-01, 9.92994435E-03, 0), vec3(1.11081356E-01, 9.20056706E-03, 0),\n\tvec3(1.04747491E-01, 8.52126391E-03, 0), vec3(9.87277483E-02, 7.88945111E-03, 0),\n\tvec3(9.30084863E-02, 7.30255150E-03, 0), vec3(8.75769371E-02, 6.75820484E-03, 0),\n\tvec3(8.24219445E-02, 6.25473908E-03, 0), vec3(7.75328030E-02, 5.79045265E-03, 0),\n\tvec3(7.28989439E-02, 5.36346743E-03, 0), vec3(6.85099590E-02, 4.97179190E-03, 0),\n\tvec3(6.43554002E-02, 4.61300300E-03, 0), vec3(6.04242407E-02, 4.28338721E-03, 0),\n\tvec3(5.67057277E-02, 3.97940401E-03, 0), vec3(5.31896065E-02, 3.69802741E-03, 0),\n\tvec3(4.98660938E-02, 3.43667061E-03, 0), vec3(4.67258325E-02, 3.19326237E-03, 0),\n\tvec3(4.37598140E-02, 2.96653255E-03, 0), vec3(4.09594391E-02, 2.75542939E-03, 0),\n\tvec3(3.83165189E-02, 2.55895674E-03, 0), vec3(3.58232509E-02, 2.37617227E-03, 0),\n\tvec3(3.34724721E-02, 2.20617719E-03, 0), vec3(3.12583135E-02, 2.04809376E-03, 0),\n\tvec3(2.91751380E-02, 1.90109614E-03, 0), vec3(2.72172710E-02, 1.76441584E-03, 0),\n\tvec3(2.53790394E-02, 1.63733769E-03, 0), vec3(2.36540832E-02, 1.51916415E-03, 0),\n\tvec3(2.20336126E-02, 1.40913442E-03, 0), vec3(2.05092130E-02, 1.30654517E-03, 0),\n\tvec3(1.90735277E-02, 1.21077578E-03, 0), vec3(1.77201275E-02, 1.12127805E-03, 0),\n\tvec3(1.64450960E-02, 1.03765879E-03, 0), vec3(1.52510378E-02, 9.59891569E-04, 0),\n\tvec3(1.41403568E-02, 8.87951392E-04, 0), vec3(1.31136596E-02, 8.21729099E-04, 0),\n\tvec3(1.21701123E-02, 7.61050801E-04, 0), vec3(1.13063241E-02, 7.05623212E-04, 0),\n\tvec3(1.05131103E-02, 6.54873950E-04, 0), vec3(9.78126875E-03, 6.08240457E-04, 0),\n\tvec3(9.10300059E-03, 5.65239773E-04, 0), vec3(8.47170037E-03, 5.25456816E-04, 0),\n\tvec3(7.88226553E-03, 4.88549556E-04, 0)/*, vec3(7.33213030E-03, 4.54277238E-04, 0),\n\tvec3(6.81928276E-03, 4.22435937E-04, 0), vec3(6.34172502E-03, 3.92839391E-04, 0),\n\tvec3(5.89748808E-03, 3.65317316E-04, 0)*/\n);\n\n\n/*\n * Chromaticities for RGB primaries\n */\n\n// Original CIE RGB primaries, formed from monochromatic (single-wavelength) colors:\n// R = 700nm, G = 546.1nm, B = 435.8nm\nconst mat3 primariesCie = Primaries(\n\t0.734690, 0.265310,\n\t0.273675, 0.717432,\n\t0.166536, 0.008881\n);\n\n// Original 1953 NTSC primaries\nconst mat3 primariesNtsc = Primaries(\n\t0.67, 0.33,\n\t0.21, 0.71,\n\t0.14, 0.08\n);\n\n// Never-popular and antiquated 'HDTV' primaries based mostly on 1953 NTSC\nconst mat3 primaries240m = Primaries(\n\t0.67, 0.33,\n\t0.21, 0.71,\n\t0.15, 0.06\n);\n\n// European Broadcasting Union primaries for SDTV and Rec. 601 (625 lines)\nconst mat3 primariesEbu = Primaries(\n\t0.64, 0.33,\n\t0.29, 0.6,\n\t0.15, 0.06\n);\n\n// P22 Phosphor primaries (allegedly; only found one source)\n// Used by older versions of SMPTE-C, before specific chromaticities were given\nconst mat3 primariesP22 = Primaries(\n\t0.61, 0.342,\n\t0.298, 0.588,\n\t0.151, 0.064\n);\n\n// Modern day SMPTE-C primaries, used in modern NTSC and Rec. 601 (525 lines)\nconst mat3 primariesSmpteC = Primaries(\n\t0.63, 0.34,\n\t0.31, 0.595,\n\t0.155, 0.07\n);\n\n// Alleged primaries for old Sony TVs with a very blue whitepoint\nconst mat3 primariesSony = Primaries(\n\t0.625, 0.34,\n\t0.28, 0.595,\n\t0.155, 0.07\n);\n\n// Rec. 709 (HDTV) and sRGB primaries\nconst mat3 primaries709 = Primaries(\n\t0.64, 0.33,\n\t0.3, 0.6,\n\t0.15, 0.06\n);\n\n// Adobe RGB 1998\nconst mat3 primariesAdobe = Primaries(\n\t0.64, 0.33,\n\t0.21, 0.71,\n\t0.15, 0.06\n);\n\n// Rec. 2020 UHDTV primaries\nconst mat3 primaries2020 = Primaries(\n\t0.708, 0.292,\n\t0.17, 0.797,\n\t0.131, 0.046\n);\n\n// LMS primaries as chromaticity coordinates, computed from\n// http://www.cvrl.org/ciepr8dp.htm, and\n// http://www.cvrl.org/database/text/cienewxyz/cie2012xyz2.htm\n/*const mat3 primariesLms = Primaries(\n\t0.73840145, 0.26159855,\n\t1.32671635, -0.32671635,\n\t0.15861916, 0.0\n);*/\n\n// Same as above, but in fractional form\nconst mat3 primariesLms = Primaries(\n\t194735469.0/263725741.0, 68990272.0/263725741.0,\n\t141445123.0/106612934.0, -34832189.0/106612934.0,\n\t36476327.0/229961670.0, 0.0\n);\n\n// Original LMS matrix used to derive above primaries\nconst mat3 xyzFromLms = mat3(\n\t1.94735469, 0.68990272, 0,\n\t-1.41445123, 0.34832189, 0,\n\t0.36476327, 0, 1.93485343\n);\n\n\n/*\n * Chromaticities for white points\n */\n\n// Standard Illuminant C. White point for the original 1953 NTSC color system\nconst vec3 whiteC = White(0.310063, 0.316158);\n\n// Standard illuminant E (also known as the 'equal energy' white point)\nconst vec3 whiteE = vec3(1.0);\n\n// Alleged whitepoint to use with the P22 phosphors (D65 might be more proper)\nconst vec3 whiteP22 = White(0.313, 0.329);\n\n// Standard illuminant D65. Color temperature is roughly 6504 K (originally\n// 6500K, but complex science stuff made them realize that was innaccurate)\nconst vec3 whiteD65 = WhiteD(6500.0);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n// Standard illuminant D65, as used in both sRGB and Rec 709\nconst vec3 whiteD65S = White(0.3127, 0.3290);\n\n// Standard illuminant D50. Content for Rec. 709 and sRGB is recommended to be\n// produced using a D50 whitepoint. For the same reason as D65, the color\n// temperature is 5003 K instead of 5000 K\nconst vec3 whiteD50 = WhiteD(5000.0);\n\n// Standard illuminant D50 according to ICC standards (they specify a hex value\n// for the 16-bit integer representation, as well as a specific way to decode it,\n// so I did some math to figure out exactly the values they expect)\n//const vec3 whiteD50I = White(31595.0/91393.0, 32768.0/91393.0);\n\n// Floating point representation of ICC D50\nconst vec3 whiteD50I = White(3214.0/9297.0, 10000.0/27891.0);\n\n// Very blue white point for old Sony televisions. Color temperature of 9300 K.\n// Use with the 'primariesSony' RGB primaries defined above\nconst vec3 whiteSony = White(0.283, 0.298);\n\n// White balance for LMS so that each channel's spectral sensitivities peak at\n// exactly 1.0, at least according to the 2006 cone fundamentals\n//const vec3 whiteLmsUnity = White(89766673.0/387074477.0, 103822461.0/387074477.0);\nconst vec3 whiteLmsUnity = vec3(0.89766673, 1.03822461, 1.93485343);\n\n\n/*\n * Gamma curve parameters\n */\n\n// Linear gamma\nconst transfer gam10 = transfer(1.0, 0.0, 1.0, 0.0, 0.0);\n\n// Gamma of 2.2; not linear near 0. Was defined abstractly to be used by early\n// NTSC systems, before SMPTE 170M was modified to specify a more exact curve\nconst transfer gam22 = transfer(2.2, 0.0, 1.0, 0.0, 0.0);\n\n// Gamma of 2.4; not linear near 0. Seems a popular choice among some people\n// online, so I included it. I don't think any standard uses this\nconst transfer gam24 = transfer(2.4, 0.0, 1.0, 0.0, 0.0);\n\n// Gamma of 2.5; not linear near 0. Approximately what old Sony TVs used\nconst transfer gam25 = transfer(2.5, 0.0, 1.0, 0.0, 0.0);\n\n// Gamma of 2.8; not linear near 0. Loosely defined gamma for European SDTV\nconst transfer gam28 = transfer(2.8, 0.0, 1.0, 0.0, 0.0);\n\n// Modern SMPTE 170M, as well as Rec. 601, Rec. 709, and a rough approximation\n// for Rec. 2020 content as well. Do not use with Rec. 2020 if you work with\n// high bit depths!\nconst transfer gam170m = transfer(1.0/0.45, 0.099, 4.5, 0.0812, 0.018);\n\n// Gamma for sRGB. This is the only difference between sRGB and Rec. 709.\nconst transfer gamSrgb = transfer(2.4, 0.055, 12.92, 0.04045, 0.0031308);\n\n\n/*\n * RGB Colorspaces\n */\n\n// Original 1953 NTSC\nconst rgb_space Ntsc = rgb_space(primariesNtsc, whiteC, gam22);\n\n// Mostly unused and early HDTV standard (SMPTE 240M)\nconst rgb_space Smpte240m = rgb_space(primaries240m, whiteD65S, gam22);\n\n// European Broadcasting Union SDTV\nconst rgb_space Ebu = rgb_space(primariesEbu, whiteD65S, gam28);\n\n// Original, imprecise colorspace for NTSC after 1987 (probably incorrect)\nconst rgb_space SmpteC = rgb_space(primariesP22, whiteD65S, gam22);\n\n// Modern SMPTE \"C\" colorimetry\nconst rgb_space Smpte170m = rgb_space(primariesSmpteC, whiteD65S, gam170m);\n\n// Old Sony displays using high temperature white point\nconst rgb_space Sony = rgb_space(primariesSony, whiteSony, gam25);\n\n// Rec. 709 (HDTV)\nconst rgb_space Rec709 = rgb_space(primaries709, whiteD65S, gam170m);\n\n// sRGB (mostly the same as Rec. 709, but different gamma)\nconst rgb_space Srgb = rgb_space(primaries709, whiteD65S, gamSrgb);\n\n// Rec. 2020\nconst rgb_space Rec2020 = rgb_space(primaries2020, whiteD65S, gam170m);\n\n// LMS RGB space\nconst rgb_space LmsRgb = rgb_space(primariesLms, whiteLmsUnity, gam10);\n\n\n/*********************************************************************\n * Change these to change what colorspace is being converted from/to *\n *********************************************************************/\nconst rgb_space from = rgb_space(primaries709, whiteD65S, gamSrgb);\nconst rgb_space to = rgb_space(primaries709, whiteD65S, gamSrgb);\n\nconst vec3 whiteCam = to.white;\n\nconst mat3 toLms = xyzToRgb(LmsRgb);\nconst mat3 frLms = rgbToXyz(LmsRgb);\n\nconst mat3 whiteBalFr = diag((toLms*whiteCam)/(toLms*from.white));\nconst mat3 whiteBalTo = diag((toLms*whiteCam)/(toLms*to.white));\n\nconst mat3 toRgb1 = xyzToRgb(from)*frLms*inverse(whiteBalFr)*toLms;\nconst mat3 frRgb1 = frLms*whiteBalFr*toLms*rgbToXyz(from);\nconst mat3 toRgb2 = xyzToRgb(to)*frLms*inverse(whiteBalTo)*toLms;\nconst mat3 frRgb2 = frLms*whiteBalTo*toLms*rgbToXyz(to);\n\nconst mat3 conv = toRgb2*frRgb1;\n\n\n/*\n * Conversion Functions\n */\n\n// Converts RGB colors to a linear light scale\nvec4 toLinear(vec4 color, const transfer trc)\n{\n\tbvec4 cutoff = lessThan(color, vec4(trc.cutoffToLinear));\n\tbvec4 negCutoff = lessThanEqual(color, vec4(-1.0*trc.cutoffToLinear));\n\tvec4 higher = pow((color + trc.off)/(1.0 + trc.off), vec4(trc.power));\n\tvec4 lower = color/trc.slope;\n\tvec4 neg = -1.0*pow((color - trc.off)/(-1.0 - trc.off), vec4(trc.power));\n\n\tcolor = mix(higher, lower, cutoff);\n\tcolor = mix(color, neg, negCutoff);\n\n\treturn color;\n}\n\n// Gamma-corrects RGB colors to be sent to a display\nvec4 toGamma(vec4 color, const transfer trc)\n{\n\tbvec4 cutoff = lessThan(color, vec4(trc.cutoffToGamma));\n\tbvec4 negCutoff = lessThanEqual(color, vec4(-1.0*trc.cutoffToGamma));\n\tvec4 higher = (1.0 + trc.off)*pow(color, vec4(1.0/trc.power)) - trc.off;\n\tvec4 lower = color*trc.slope;\n\tvec4 neg = (-1.0 - trc.off)*pow(-1.0*color, vec4(1.0/trc.power)) + trc.off;\n\n\tcolor = mix(higher, lower, cutoff);\n\tcolor = mix(color, neg, negCutoff);\n\n\treturn color;\n}\n\n// Scales a color to the closest in-gamut representation of that color\nvec4 gamutScale(vec4 color, float luma)\n{\n\tfloat low = min(color.r, min(color.g, min(color.b, 0.0)));\n\tfloat high = max(color.r, max(color.g, max(color.b, 1.0)));\n\n\tfloat lowScale = low/(low - luma);\n\tfloat highScale = (high - 1.0)/(high - luma);\n\tfloat scale = max(lowScale, highScale);\n\tcolor.rgb += scale*(luma - color.rgb);\n\n\treturn color;\n}\n\n// Converts from lms to RGB\nvec4 convert(vec4 color)\n{\n\tfloat luma = 1.000001;\n\n\t// Convert from lms to XYZ, then RGB\n\tcolor.xyz = frLms*color.rgb;\n\tcolor.xyz *= luma/color.y;\n\tcolor.rgb = toRgb1*color.xyz;\n\n\t// Max normalization\n\t//color.rgb /= max(color.r, max(color.g, color.b));\n\n\t// Standard Euclidian normalization (equivalent to 'norm = 2.0' below)\n\t//color.rgb = normalize(color.rgb);\n\n\t// Custom normalization for brighter white point\n\t// Wikipedia's chart roughly uses 'norm = 5.0'\n\tconst float norm = 4.0;\n\tcolor.rgb /= pow(dot(pow(abs(color.rgb), vec3(norm)), vec3(1.0)), 1.0/norm);\n\n\t// Wikipedia's description for one of their chromaticity diagrams claims\n\t// that the top left should have more cyan than most charts do. This\n\t// is solved by scaling out-of-gamut colors to be in-gamut\n\tcolor = gamutScale(color, luma);\n\n\t// Scale colors so that the highest RGB value for the white point or primaries\n\t// of the 'from' colorspace, is scaled to equal 1.0 in the 'to' colorspace\n\tconst vec3 newCyan = conv*vec3(0, 1, 1);\n\tconst vec3 newMagenta = conv*vec3(1, 0, 1);\n\tconst vec3 newYellow = conv*vec3(1, 1, 0);\n\tconst vec3 newWhite = conv*vec3(1);\n\tconst vec3 maxColors =\n\t\tmax(conv[0], max(conv[1], max(conv[2],\n\t\tmax(newCyan, max(newMagenta, max(newYellow, newWhite))))));\n\n\tcolor.rgb /= max(maxColors.r, max(maxColors.g, maxColors.b));\n\n\t// Grab new luma values to emulate display brightness more accurately\n\tluma = (frRgb1*color.rgb).y;\n\n\t// Convert from one colorspace to another, to show how one display\n\t// might show the colorspace of another\n\tcolor.rgb = conv*color.rgb;\n\tcolor = gamutScale(color, luma);\n\n\treturn color;\n}\n\n\n/*\n * Utility Functions\n */\n\n// Distance from a line segment\nfloat segDist(vec2 pos, vec2 p1, vec2 p2)\n{\n\t// Ray representing the line segment\n\tvec2 ray = p2 - p1;\n\n\t// Length of the ray squared (to avoid sqrt)\n\tfloat lenSq = dot(ray*ray, vec2(1));\n\n\t// Distance from the start of the segment, where a line going through it and\n\t// position will be perpendicular to the ray\n\tfloat perp = clamp(dot(pos - p1, ray)/lenSq, 0.0, 1.0);\n\n\t// Intersection of perpendicular line and the original line segment,\n\t// projecting position onto the line segment\n\tvec2 proj = p1 + perp*ray;\n\n\treturn distance(pos, proj);\n}\n\n// Distance from a line\nfloat lineDist(vec2 pos, vec2 p1, vec2 p2)\n{\n\t// Ray representing the line segment\n\tvec2 ray = p2 - p1;\n\n\t// Length of the ray squared (to avoid sqrt)\n\tfloat lenSq = dot(ray*ray, vec2(1));\n\n\t// Distance from the start of the segment, where a line going through it and\n\t// position will be perpendicular to the ray\n\tfloat perp = dot(pos - p1, ray)/lenSq;\n\n\t// Intersection of perpendicular line and the original line segment,\n\t// projecting position onto the line segment\n\tvec2 proj = p1 + perp*ray;\n\n\treturn distance(pos, proj);\n}\n\n#define min3(a, b, c) min(a, min(b, c))\n\n\nvoid mainImage(out vec4 color, in vec2 fragCoord)\n{\n\t// Maximum logical coordinates guaranteed to be shown\n\tconst vec2 bounds = vec2(1.0, 2.0/3.0);\n\tfloat scaleFac = max(bounds.x/iResolution.x, bounds.y/iResolution.y);\n\n\t// Scale chart to a bounding size, then center the chart\n\tcolor.xy = fragCoord*scaleFac;\n\tcolor.xy -= (iResolution.xy*scaleFac - bounds)/2.0;\n\n\tcolor.z = 1.0 - color.x - color.y;\n\n\t// Distance to the gamut boundary; starts as the width or height, whichever is shorter\n\tfloat gamutDist = 1.0/scaleFac;\n\n\tbool draw = true;\n\n\tfor (int i = 0; draw && (i < NUM_POINTS); ++i) {\n\t\t// Grab current and next point, wrapping around to first point at the end\n\t\tvec3 a = lmsCurves[i];\n\t\tvec3 b = lmsCurves[(i + 1) % NUM_POINTS];\n\n\t\t// Rescale values based on new LMS colorspace white point\n\t\ta = toLms*xyzFromLms*a;\n\t\tb = toLms*xyzFromLms*b;\n\n\t\t// Convert cone spectral sensitivity curves into chromaticity coordinates\n\t\ta /= dot(a, vec3(1));\n\t\tb /= dot(b, vec3(1));\n\n\t\t// See if the current pixel is closer to this boundary than previous ones\n\t\tgamutDist = min(gamutDist, lineDist(color.xy, a.xy, b.xy)/scaleFac);\n\n\t\t// Calculate which side of this line segment the current pixel is on\n\t\tdraw = draw && ((b.x - a.x)*(color.y - a.y) < (b.y - a.y)*(color.x - a.x));\n\t}\n\n\t// Apply white balance to 'from' primaries\n\tmat3 xyPrimsFr = whiteBalFr*toLms*from.primaries;\n\txyPrimsFr = mat3(\n\t\txyPrimsFr[0]/dot(xyPrimsFr[0], vec3(1)),\n\t\txyPrimsFr[1]/dot(xyPrimsFr[1], vec3(1)),\n\t\txyPrimsFr[2]/dot(xyPrimsFr[2], vec3(1))\n\t);\n\n\t// Apply white balance to 'to' primaries\n\tmat3 xyPrimsTo = whiteBalTo*toLms*to.primaries;\n\txyPrimsTo = mat3(\n\t\txyPrimsTo[0]/dot(xyPrimsTo[0], vec3(1)),\n\t\txyPrimsTo[1]/dot(xyPrimsTo[1], vec3(1)),\n\t\txyPrimsTo[2]/dot(xyPrimsTo[2], vec3(1))\n\t);\n\n\tfloat rgbDistFr = min3(\n\t\tsegDist(color.xy, xyPrimsFr[0].xy, xyPrimsFr[1].xy),\n\t\tsegDist(color.xy, xyPrimsFr[1].xy, xyPrimsFr[2].xy),\n\t\tsegDist(color.xy, xyPrimsFr[2].xy, xyPrimsFr[0].xy)\n\t)/scaleFac;\n\n\tfloat rgbDistTo = min3(\n\t\tsegDist(color.xy, xyPrimsTo[0].xy, xyPrimsTo[1].xy),\n\t\tsegDist(color.xy, xyPrimsTo[1].xy, xyPrimsTo[2].xy),\n\t\tsegDist(color.xy, xyPrimsTo[2].xy, xyPrimsTo[0].xy)\n\t)/scaleFac;\n\n\tfloat rgbDist = min(rgbDistFr, rgbDistTo);\n\n\t// Convert to RGB and turn imaginary colors black\n\tcolor = convert(color);\n\tcolor.rgb *= vec3(draw);\n\n\t// Antialias edges of real colors\n\tcolor.rgb = mix(vec3(0), color.rgb, clamp(gamutDist, 0.0, 1.0));\n\n\t// Draw triangle showing the RGB color space's gamut\n\tcolor.rgb = mix(vec3(0), color.rgb, clamp(rgbDist - 1.0/4.0, 0.0, 1.0));\n\n\tcolor = toGamma(color, to.trc);\n}","name":"Image","description":"","type":"image"}]}