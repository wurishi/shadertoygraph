{"ver":"0.1","info":{"id":"wtjXW1","date":"1565804228","viewed":83,"name":"脊椎塔(Spine Towers)","username":"Hirai_worthless","description":"aaa","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\n//use for differential\nconst float EPS = 0.001;\n\n\n//tracing result structure\nstruct TraceData {\n\tvec3 normal;\n    float t;\n    float nearestT;\n    float nearestD;\n    int uniqueID;\n    \n};\n\n//common function\nmat2 genRot(float val){\n\treturn mat2(cos(val), -sin(val),\n               sin(val), cos(val));\n}\n\nfloat rand (float x){\n    x = fract(sin(x*416.31434));\n    x = fract(sin(x*234.41523));\n    x = fract(sin(x*235.51424));\n\treturn x;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\nvec2 pmod(vec2 p,float c){\n    float tmp = PI * 2. / c;\n\tfloat l = length(p);\n    float theta = atan(p.y/p.x);\n    theta = mod(theta,PI * 2. / c);\n    return vec2(l * cos(theta), l * sin(theta));\n    \n}\n\n\n//Common SDF\n\nfloat sphere(vec3 p,vec3 o,float r){\n\treturn length(p - o) - r;\n}\n\nfloat cylinder(vec2 p,vec2 o,float r){\n\treturn length(p - o) - r;\n}\n\nfloat cube(vec3 p,vec3 o,vec3 s){\n    float x = abs(p.x - o.x) - s.x/2.;\n    float y = abs(p.y - o.y) - s.y/2.;\n    float z = abs(p.z - o.z) - s.z/2.;\n    return max(x,max(y,z));\n}\n\nfloat line(vec3 p,vec3 q1,vec3 q2,float r){\n\tfloat t = clamp(\n    \tdot(q2 - p,q2 -q1)/dot(q2-q1,q2-q1),\n    \t0.,\n        1.\n    );\n    vec3 q = t * q1 + (1. - t) * q2;\n    return length(q - p) - r;\n}\n\n\n//Gathering SDF\nfloat randRoute(float t){\n\tfloat res = 0.0;\n    float amp = 1.0;\n    float T = 8.0;\n    for(int i = 0; i < 6; i++){\n    \tres += amp * sin(t / T);\n        amp *= 0.5;\n        T *= 2.0;\n    }\n    return res;\n}\n\nfloat map(vec3 p){\n    vec2 route = vec2(randRoute(p.z),randRoute(p.z + PI/2.)) * 4.0;\n    p.xy -= route;\n    p.xy = (fract(p.xy/10. + 0.5)-0.5) * 10.;\n    float cyl = max(-cylinder(p.xy,vec2(0.),1.0),\n    cylinder(p.xy,vec2(0.),1.1));\n    cyl = max(cyl,fract(p.z) - 0.25);\n    p.xy *= genRot(PI/4. + p.z);\n    p.xy = pmod(p.xy,4.);\n    p.xy *= genRot(-PI/4.);\n    p.z = (fract(p.z /0.5 + 0.5) - 0.5) * 0.5;\n    float a1 = max(cylinder(p.yz,vec2(0.),0.05),- p.x + 0.55);\n    a1 = max(a1,p.x - 4.5);\n    float a2 = max(cylinder(p.xy,vec2(0.),0.6),\n                 -cylinder(p.xy,vec2(0.),0.5));\n    a2 = max(a2, -(fract(p.z) - 0.95));\n    a2 = max(a2, - abs(p.y) + 0.25);\n    float a = min(a1,a2);\n    return min(cyl,a);\n}\n\n//Getting Normal\n\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(p + vec3(EPS, 0.0, 0.0)) - map(p + vec3(-EPS,  0.0,  0.0)),\n        map(p + vec3(0.0, EPS, 0.0)) - map(p + vec3( 0.0, -EPS,  0.0)),\n        map(p + vec3(0.0, 0.0, EPS)) - map(p + vec3( 0.0,  0.0, -EPS))\n    ));\n}\n\n//Setting CameraPos\nvec3 Camera(float t){\n    float time = iTime * 2.0;\n    vec2 route = vec2(randRoute(time),randRoute(time + PI/2.)) * 4.0;\n\treturn vec3(route + vec2(4.0),time);\n}\n\n//Setting Ray\nvec3 Ray(vec2 uv, float z){\n\tvec3 r = normalize(vec3(uv,z));\n    r.xz *= genRot(PI/4.);\n    r.yz *= genRot(-PI/8.);\n    r.xy *= genRot(iTime/8.);\n    return r;\n}\n\n//Tracing Ray\n\nTraceData trace (vec3 o, vec3 r){\n    TraceData data;\n\tfloat t = 0.0;\n    float nearestT = 10000000.0;\n    float nearestD = 10000000.0;\n    vec3 p = vec3(0.0,0.0,0.0);\n    \n    for(int i = 0; i < 256; ++i){\n        p = o + r * t;\n        float d = map(p);\n        t += d * 0.15;\n        nearestT = d < nearestD ? t : nearestT;\n        nearestD = min(nearestD,d);\n        \n    }\n    data.nearestD = nearestD;\n    data.nearestT = nearestT;\n    data.normal = getNormal(p);\n    data.t = t;\n    return data;\n}\n\n//Making color\nvec3 getColor(vec3 o,vec3 r,TraceData data){\n    float t = data.t;\n    float fog = 1.0 / (1.0 + t * t * 0.025);\n    float a = dot(data.normal,r);\n    vec3 p = o + r * t;\n    vec3 fc = vec3(0.05);\n    vec3 ccol = vec3(\n    \tsin(p.x),\n        cos(p.y),\n        sin(p.z)\n    );\n    fc = mix(fc,vec3(1.),1. + a*1.5);\n    fc +=fract(length(p)/ 4.0) < 0.1 ? ccol : vec3(0.);\n    fc = mix(vec3(0.95),fc,fog);\n    return fc;\n}\n//Drawing\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //set canvas\n    vec2 uv = fragCoord.xy /iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    //set camera and ray\n    vec3 r = Ray(uv,1.2);\n    vec3 o = Camera(iTime);\n    \n    //trace ray\n    TraceData data = trace(o,r);\n    vec3 fc = getColor(o,r,data) ;\n\t//fc = vec3(fog);\n    // Output to screen\n    float vig = 1. - length(uv) * 0.25;\n    fragColor = vec4(fc * vig,1.0);\n}","name":"Image","description":"","type":"image"}]}