{"ver":"0.1","info":{"id":"Ms3GDf","date":"1454641588","viewed":1117,"name":"3d pseudo fluid volume","username":"public_int_i","description":"using a 2d texture as a 3d volume texture, click and move mouse to interact","likes":19,"published":3,"flags":32,"usePreview":0,"tags":["3d","volume","fluid","feedback","pseudo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Shulman 2016\n\n\n//VOLUME_SIZE.x*VOLUME_SIZE.y*VOLUME_SIZE.z must be smaller than iResolution.x*iResolution.y\nconst ivec3 VOLUME_SIZE = ivec3(40,20,40);\nvec3 NORMALIZED_VOLUME_SIZE = normalize(vec3(VOLUME_SIZE));\n\nvec2 w2t(in vec3 p) {\n    int id = int(p.x)+int(p.y)*VOLUME_SIZE.x+int(p.z)*(VOLUME_SIZE.x*VOLUME_SIZE.y);\n    return vec2(fract(float(id)/iResolution.x), float(id/int(iResolution.x))/iResolution.y)+.5/iResolution.xy;\n}\nvec3 t2w(in vec2 uv) {\n    int id = int(uv.x*iResolution.x)+int(uv.y*iResolution.y)*int(iResolution.x);\n    return vec3( mod(float(id),float(VOLUME_SIZE.x)),\n                 mod(float(id/VOLUME_SIZE.x),float(VOLUME_SIZE.y)),\n                 float(id/(VOLUME_SIZE.x*VOLUME_SIZE.y)) );\n}\n\n\nvec2 rot(in vec2 v, in float ang) {\n    float si = sin(ang);\n    float co = cos(ang);\n    return v*mat2(si,co,-co,si);\n}\n\n\nfloat rayBox(in vec3 rp, in vec3 rd, in vec3 lb, in vec3 rt) {\n    vec3 df = 1./rd;\n    \n\tvec3 t_lb = (lb-rp)*df,\n         t_rt = (rt-rp)*df;\n\n    float tmin = max(max(min(t_lb.x, t_rt.x), min(t_lb.y, t_rt.y)), min(t_lb.z, t_rt.z));\n    float tmax = min(min(max(t_lb.x, t_rt.x), max(t_lb.y, t_rt.y)), max(t_lb.z, t_rt.z));\n\n    if (tmax < 0.) return -1.;\n\tif (tmin > tmax) return -1.;\n\n\treturn tmin;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 R = iResolution.xy,\n        uv = (fragCoord*2.-R)/R.y;\n    \n    float rotTime = iTime*.1;\n    /*if (iMouse.w > 0.) {\n        rotTime = (iMouse.x/iResolution.x)*6.28;\n    }*/\n    \n    vec3 rp = vec3(sin(rotTime)*(float(VOLUME_SIZE.x)+10.),4.,cos(rotTime)*(float(VOLUME_SIZE.z)+10.));\n    \n    vec3 rd = normalize(vec3(uv*.5,-1.));\n    \n    rd.yz = rot(rd.yz,1.4);\n    rd.xz = rot(rd.xz,-rotTime - 4.7);\n    \n        \n    #define PRECISION .5\n    \n    float dst = rayBox(rp,rd,-vec3(VOLUME_SIZE)/2.,vec3(VOLUME_SIZE)/2.);\n    if (dst > -1.) {\n        \n        rp += rd*dst;\n        \n        vec3 c = vec3(0.);\n        float sum = 0., nSamples = 0.;\n        for (int i = 0; i < 128; i++) {\n            rp += rd*PRECISION;\n            if (abs(rp.x) > float(VOLUME_SIZE.x)/2. || \n                abs(rp.y) > float(VOLUME_SIZE.y)/2. || \n                abs(rp.z) > float(VOLUME_SIZE.z)/2.) break;\n        \t\n            vec3 srp = rp+cos(rp.yzx*60.143)*.4+cos(rp*1450.4834+345.243)*.15+vec3(VOLUME_SIZE)/2.;\n\n            vec4 s = texture(iChannel0, w2t(srp));\n            c += abs(s.xyz*2.-1.);\n            \n        \tnSamples++;\n        }\n        \n        c = pow((c/nSamples)*1.3, vec3(.65));\n        fragColor = vec4(mix(vec3(length(max(abs(mod(abs(rp),6.)-3.)-2.5,0.))),\n            \t\t\t\t c, clamp(length(c),0.,1.) ), 1.);\n        \n    } else fragColor = vec4(0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Ethan Shulman 2016\n\n//click and move mouse to interact\n\n\n#define AUTO_CURSOR\n\n//VOLUME_SIZE.x*VOLUME_SIZE.y*VOLUME_SIZE.z must be smaller than iResolution.x*iResolution.y\nconst ivec3 VOLUME_SIZE = ivec3(40,20,40);\n\nvec2 w2t(in vec3 p) {\n    int id = int(p.x)+int(p.y)*VOLUME_SIZE.x+int(p.z)*(VOLUME_SIZE.x*VOLUME_SIZE.y);\n    return vec2(fract(float(id)/iResolution.x), float(id/int(iResolution.x))/iResolution.y)+.5/iResolution.xy;\n}\nvec3 t2w(in vec2 uv) {\n    int id = int(uv.x*iResolution.x)+int(uv.y*iResolution.y)*int(iResolution.x);\n    return vec3( mod(float(id),float(VOLUME_SIZE.x)),\n                 mod(float(id/VOLUME_SIZE.x),float(VOLUME_SIZE.y)),\n                 float(id/(VOLUME_SIZE.x*VOLUME_SIZE.y)) );\n}\n\n\nvec2 rot(in vec2 v, in float ang) {\n    float si = sin(ang);\n    float co = cos(ang);\n    return v*mat2(si,co,-co,si);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float frameTime = float(iFrame)/360000.;\n    if (iFrame < 60) {\n        fragColor = vec4(.5,.5,.5, frameTime);\n        //fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n        return;\n    }\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n\tvec3 wp = t2w(uv);\n    \n    if (wp.x < 0. || wp.x > float(VOLUME_SIZE.x) ||\n        wp.y < 0. || wp.y > float(VOLUME_SIZE.y) ||\n        wp.z < 0. || wp.z > float(VOLUME_SIZE.z))\n    { discard; return; }\n    \n    if (iMouse.w > 0.) {\n        vec3 m3d = vec3(iMouse.x/iResolution.x-.5, 1.+(iMouse.y/iResolution.y)*float(VOLUME_SIZE.y-2), 0.);\n        m3d.xz = rot(m3d.xz, iTime*-.1-4.7);\n        m3d.xz = 1.+(m3d.xz+.5)*vec2(VOLUME_SIZE.xz-2);\n        if (length(wp-m3d) < 5.) {\n            \n             fragColor = vec4( normalize(wp-vec3(VOLUME_SIZE)/2.+.5)*.5+.5, frameTime);\n\t\t\treturn;\n        }\n    } else {\n        #ifdef AUTO_CURSOR\n        if (cos(iTime*.5) > -.5 && length(wp-vec3(VOLUME_SIZE)/2.-cos(iTime*.3*vec3(1.,.84,.78))*7.) < 5.) {\n            fragColor = vec4( (normalize(cos(iTime*.3*vec3(1.,.84,.78))))*.5+.5, frameTime);\n            return;\n        }\n        #endif\n    }\n    \n    \n    const float total = 3.*3.*3. - 1.;\n    bvec3 flip = bvec3(false,false,false);\n    vec4 c = vec4(0.);\n    for (float x = -1.; x < 2.; x++) {\n        for (float y = -1.; y < 2.; y++) {\n            for (float z = -1.; z < 2.; z++) {\n                vec3 v = vec3(x,y,z);\n                if (length(v) == 0.) continue;\n                vec3 p = v+wp;\n                /*\n                if (p.x > float(VOLUME_SIZE.x) || p.x < 0.) {\n                    flip.x = true;\n                    continue;\n                }\n                if (p.y > float(VOLUME_SIZE.y) || p.y < 0.) {\n                    flip.y = true;\n                    continue;\n                }\n                if (p.z > float(VOLUME_SIZE.z) || p.z < 0.) {\n                    flip.z = true;\n                    continue;\n                }*/\n                    \n                vec4 n = texture(iChannel0, w2t(fract((wp+v)/vec3(VOLUME_SIZE))*vec3(VOLUME_SIZE)));\n//                  vec4 n = texture(iChannel0, w2t(p));\n                              \n                n.xyz = n.xyz*2.-1.;\n                c.xyz += n.xyz*ceil(max(0., dot(normalize(v),normalize(n.xyz))))*2.;\n            }\n        }\n    }\n\t\n\n    c.xyz = clamp(c.xyz/total, -1., 1.);\n    /*\n\tif (flip.x) c.x = -c.x;\n    if (flip.y) c.y = -c.y;\n    if (flip.z) c.z = - c.z;\n*/    \n\n    c.xyz = c.xyz*.5+.5;\n    \n    fragColor = c;\n}","name":"Buf A","description":"","type":"buffer"}]}