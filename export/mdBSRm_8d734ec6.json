{"ver":"0.1","info":{"id":"mdBSRm","date":"1670059476","viewed":143,"name":"ChatGPT sphere","username":"Impossible","description":"Used ChatGPT (https://chat.openai.com/chat) with these prompts\n\n\"write a shadertoy shader that renders a raymarched sphere\"\n\n\"write a shadertoy shader that renders a raymarched lit sphere\"\n\nI had to modify the output slightly to get the correct aspect\n\n\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sphere","aigenerated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized device coordinates\n    vec2 uv = (fragCoord/iResolution.xy - vec2(0.5,0.5));\n    uv.x *= iResolution.x/iResolution.y;\n\n    // The camera is at (0, 0, 3)\n    vec3 camera = vec3(0, 0, 3);\n\n    // The ray direction is the normal\n    vec3 ray = normalize(vec3(uv, -1.0));\n\n    // The sphere has radius 1 and is centered at (0, 0, 0)\n    vec3 center = vec3(0, 0, 0);\n\n    // Raymarch the sphere\n    float t = 0.0;\n    for (int i = 0; i < 256; i++)\n    {\n        vec3 pos = camera + t * ray;\n        if (length(pos - center) < 1.0)\n        {\n            vec3 normal = normalize(pos - center);\n\n            // Calculate the lighting\n            vec3 light = normalize(vec3(0, 1, 1));\n            float diffuse = dot(normal, light);\n\n            // Set the color of the sphere\n            fragColor = vec4(diffuse, 0.5 * diffuse, 0.0, 1.0);\n            return;\n        }\n        t += 0.01;\n    }\n\n    // We didn't hit the sphere, so set the color to black\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}