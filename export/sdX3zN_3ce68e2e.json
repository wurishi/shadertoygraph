{"ver":"0.1","info":{"id":"sdX3zN","date":"1615575654","viewed":870,"name":"Multiple 2D Shapes v3","username":"inspirnathan","description":"Example on how to draw multiple 2D shapes to the scene using mix function and SDFs that return a float value with step functions. Learn more about how this all works in my tutorial: [url]https://inspirnathan.com/posts/50-shadertoy-tutorial-part-4/[/url]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","shapes","2dshapes","inspirnathan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Visit my tutorial to learn how this works: https://inspirnathan.com/posts/50-shadertoy-tutorial-part-4\n\nvec3 getBackgroundColor(vec2 uv) {\n    uv = uv * 0.5 + 0.5; // remap uv from <-0.5,0.5> to <0.25,0.75>\n    vec3 gradientStartColor = vec3(1., 0., 1.);\n    vec3 gradientEndColor = vec3(0., 1., 1.);\n    return mix(gradientStartColor, gradientEndColor, uv.y); // gradient goes from bottom to top\n}\n\nfloat sdSquare(vec2 uv, float size, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n\n    return max(abs(x), abs(y)) - size;\n}\n\nfloat sdCircle(vec2 uv, float r, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    return length(vec2(x, y)) - r;\n}\n\nfloat sdHeart(vec2 uv, float size, vec2 offset) {\n// Credit: https://mathworld.wolfram.com/HeartCurve.html\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    float xx = x * x;\n    float yy = y * y;\n    float yyy = yy * y;\n    float group = xx + yy - size;\n    \n    return group * group * group - xx * yyy;\n}\n\nfloat sdStar5(vec2 p, float r, float rf, vec2 offset)\n// Credit: https://iquilezles.org/articles/distfunctions2d\n{\n    p -= offset;\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nvec3 drawScene(vec2 uv) {\n    vec3 col = getBackgroundColor(uv);\n    float heart = sdHeart(uv, 0.04, vec2(-0.5, 0.));\n    float square = sdSquare(uv, 0.1, vec2(0., 0.));\n    float circle = sdCircle(uv, 0.1, vec2(0.3, 0.));\n    float star = sdStar5(uv, 0.12, 0.45, vec2(0.6, 0.));\n    \n    col = mix(vec3(1, 0, 0), col, step(0., heart));\n    col = mix(vec3(0, 1, 0), col, step(0., square));\n    col = mix(vec3(0, 0, 1), col, step(0., circle));\n    col = mix(vec3(1, 1, 0), col, step(0., star));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n    vec3 col = drawScene(uv);\n\n    fragColor = vec4(col,1.0); // Output to screen\n}","name":"Image","description":"","type":"image"}]}