{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const int numPoints = 12;\nconst bool showFolds = false;\n\nfloat rand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nstruct Ray\n{\n\tvec2 point;\n\tvec2 direction;\n};\n\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvec2 noise2(vec2 n)\n{\n\treturn vec2(noise(vec2(n.x+0.2, n.y-0.6)), noise(vec2(n.y+3., n.x-4.)));\n}\n\nRay GetRay(float i)\n{\n\tvec2 position = noise2(vec2(i*6.12+iTime*0.1, i*4.43+iTime*0.1));\n\treturn Ray(\n\t\tposition,\n\t\tnormalize(noise2(vec2(i*7.+iTime*0.05, i*6.))*2.0-1.0));\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / min(iResolution.x,iResolution.y);\n\tvec2 curPos = uv;\n\t\n\tfor(int i=0;i<numPoints;i++)\n\t{\n\t\tRay ray=GetRay(float(i+1)*3.);\t\n\t\t\t\n\t\tif(length(ray.point-curPos)<0.01 && showFolds)\n\t\t{\n\t\t\tfragColor.rgb = vec3(1,1,1);\n\t\t\treturn;\n\t\t}\n\t\telse if (length(curPos-(ray.point+ray.direction*0.1))<0.01 && showFolds)\n\t\t{\n\t\t\tfragColor.rgb = vec3(1,0,0);\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfloat offset=dot(curPos-ray.point, ray.direction);\n\t\t\tif(abs(offset)<0.001 && showFolds)\n\t\t\t{\n\t\t\t\tfragColor.rgb = vec3(0,0,1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(offset<0.)\n\t\t\t{\n\t\t\t\tcurPos -= ray.direction*offset*2.0;\n\t\t\t}\t\t\t\t\t\t\t\t\t\n\t\t}\n\t}\n\t\n\tfragColor.rgb = texture( iChannel0, vec2(curPos.x,curPos.y) ).xyz;\t\n\tfragColor.a = 1.0;\t\t\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XslGz7","date":"1366229229","viewed":3106,"name":"Kaleidoscope Ett","username":"mfagerlund","description":"A simple kaleidoscope, where a series of lines are reated and points which are on the \"wrong\" side of the line are reflected to the other side of the line.\n\nSet showFolds to true to see where it's folding.","likes":22,"published":1,"flags":0,"usePreview":1,"tags":["2d","folding","kaleidoscope"],"hasliked":0,"parentid":"","parentname":""}}