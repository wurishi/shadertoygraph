{"ver":"0.1","info":{"id":"Ms3fW8","date":"1524845594","viewed":4020,"name":"Modular Times table","username":"akhgary","description":"move mouse around and find cool patterns.\n\n initialize arbitrary equal min and max values to get constant results.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["line","circle","draw","pattern","modular","times","timestable","timestables","timestablemodular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ===========================================\n// Times tables\n// a great video by Mathologer\n// https://www.youtube.com/watch?v=qhbuKbxJsk8\n// ===========================================\n// Hue:\n// https://www.shadertoy.com/view/ll2cDc\n// ===========================================\n\nconst float pi = 3.14159265359;\nconst float scale = 1.2;\nconst float blur = 1.0*scale;\nconst float thickness = 3.0*scale+blur;\n\n// initialize arbitrary values.\nconst float timesMin = -100.0;\nconst float timesMax = 100.0;\nconst int modularMin = 10;\nconst int modularMax = 200;\nconst bool truncate = true; // truncate times value or not\n\nvec2 uvmap(vec2 uv)\n{\n    return (2.0*uv - iResolution.xy)/iResolution.y;\n}\n\nfloat map(float x, float oldMin, float oldMax, float newMin, float newMax) {\n    return newMin + (x - oldMin)/(oldMax - oldMin)*(newMax - newMin);\n}\n\nvec2 mouse(float xmin, float xmax, float ymin, float ymax)\n{\n    vec2 xy = iMouse.xy;\n    xy.x = map(xy.x, 0.0, iResolution.x, xmin, xmax);\n    xy.y = map(xy.y, 0.0, iResolution.y, ymin, ymax);\n    return xy;\n}\n\nvec3 pickColor(float n) {\n    return 0.6+0.6*cos(6.3*n+vec3(0,23,21));\n}\n\nfloat smoothout(float dist){\n    return smoothstep(thickness/iResolution.y,-blur/iResolution.y,dist);\n}\n\nfloat circle(vec2 uv, vec2 C, float r, bool fill)\n{\n    vec2 p = uv-C;\n    float fx = length(p)-r;\n    float dist = fill? fx:abs(fx);\n    return smoothout(dist);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p - a, ba = b - a; \n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    float dist = length(pa - ba * h);\n    return smoothout(dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = uvmap(fragCoord.xy)*scale;\n    vec3 col = vec3(0);\n    vec2 m = mouse(timesMin,timesMax,float(modularMin), float(modularMax));\n    \n    if(iMouse.xy==vec2(0)) m.x=2.0, m.y = 200.0; // change icon :]\n    \n    float times = truncate?floor(m.x):m.x;\n    int modular = int(m.y); \t\t\t// number of divisions\n    float len = 2.0*pi/float(modular); \t// length of each division\n    \n    col+=circle(uv,vec2(0),1.0,false); // draw circle\n    \n    for(int i = 0; i < modular; i++) {\n        float n = float(i);\n        \n        // calculate coordinates on circle\n        vec2 c = -vec2(cos(n*len),sin(n*len));\n        vec2 p = -vec2(cos(n*len*times),sin(n*len*times));\n        \n        // draw dots and lines\n        col+= circle(uv,c,0.005,true);\n        col+= line(uv,c,p)*pickColor(n/float(modular)/3.+iTime/10.0);\n    }\n    \n    // output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}