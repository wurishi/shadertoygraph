{"ver":"0.1","info":{"id":"7tVBWW","date":"1665034130","viewed":95,"name":"Math Series:  Stretch UV by Sine","username":"nllorcajr","description":"Summary: A basic study and visualization of math functions used commonly in game development.\nIm new here in shadertoy, for any mistake, or needs improvement, \nyour constructive feedback is highly appreciated!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Noel Llorca Jr, Technical Artist, Ubisoft PHL\n\n// Summary: A basic study and visualization of math functions used commonly in game development.\n// Im new here in shadertoy, for any mistake, or needs improvement, \n// your constructive feedback is highly appreciated!\n\n// Function taken from my previous work: https://www.shadertoy.com/view/stGfRd\n// Parameters: Size1, Size2, UV, function, background, linecolor\nvec3 DrawLine(float s1, float s2,vec2 st, float fn, vec3 c1,  vec3 c2)\n{\n  float line = smoothstep( fn - s1, fn, st.y) - smoothstep( fn, fn + s2, st.y);\n  return c1  * (1. - line) + line * c2;\n}\n\n// Pi, the ratio of a circle's circumference to its diameter.\nconst float PI = 3.1415;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Colors\n    vec3 color = vec3(.23);\n    vec3 LineColor = vec3(1.000,0.000,0.635);\n\n    // Time and Speed where time is = amplitude in 0-2 range\n    float TimeAmp =  min(1.,fract(iTime / 3.5)); \n    \n    // 0 -1 range of half period of sin \n    float TheFunction = sin( uv.x * PI ) * TimeAmp; \n\n    \n    // UV movement\n    vec2 q = uv;\n    q.y += 1. - TheFunction;\n    \n    // Texture normal workflow nothing change, uv changed by function\n    vec3 Texture = vec3(texture(iChannel0, q).rgb); \n    \n    // Vis Function\n    color = DrawLine(.01, .01, uv, TheFunction, Texture, LineColor); \n   \n    // Finally render!     \n    fragColor  = vec4(color , 1.0);\n}\n","name":"Image","description":"","type":"image"}]}