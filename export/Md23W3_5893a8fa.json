{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define MAX_RAY_STEPS 75\n#define PI 3.14159265\n\n#define t iTime*2.0\n\nmat3 ball_rot;\n\nvec2 polarRepeat(vec2 p, float r) {\n    float a = mod( atan(p.y,p.x), r) - r*0.5;\n    return vec2(cos(a),sin(a)) * length(p.xy);\n}\n\nfloat ball(vec3 p, vec2 sides, float size, out vec3 c) {\n\t\n\tmat3 r = ball_rot;\n\t\n\tp = r * p;\n\t\n\tp.xz = polarRepeat(p.xz, PI/sides.x);\n\tp.xy = polarRepeat(p.xy, PI/sides.y);\n\n\tfloat checkers = max(0.0,step(p.y*p.z, 0.0));\n\t\n\tc = vec3(1.0, vec2(checkers)) * 2.0;\n\t\n\treturn dot(p,vec3(1.0,0.0,0.0))-size;\n}\n\nfloat fourth_wall = 0.0;\n\nvec4 scene(vec3 p) {\n\t\n\tvec3 c;\n\t\n\tfloat width =12.0;\n\t\n\tfloat x = width*abs(fract(t/10.0)-0.5) - width*0.25;\n\tfloat z = width*abs(fract((-t+2.)/10.0)-0.5) - width*0.25 + 0.2;\n\t\t\n\tfloat t2 = max(t*4.0 - 15.0,0.0);\n\t\n\tfloat bounce = 1.0 + max(15.0-t*4.0,0.0) + 0.35*log(1.0+abs(10.0*sin(t2*0.33)));\n\t\n\tvec3 pos = p - vec3(x, bounce, z);\n\t\n\tfloat b = ball(pos, vec2(8.0,8.0), 2.0, c);\n\n\tfloat g = dot(p,vec3(0.0,1.0,0.0)) + 1.0;\n\n\tif(fourth_wall > 0.0) p.z = abs(p.z);\n\t\n\tfloat w1 = dot(p,vec3(0.0,0.0,-1.0)) + 5.0;\n\tfloat w2 = dot(vec3(abs(p.x),p.yz),vec3(-1.0,0.0,0.0)) + 5.0;\t\n\t\n\tvec3 wallc = vec3(0.67) + normalize(p)*0.05;\n\n\tvec4 d = g<b ? vec4(g,wallc) : vec4(b,c);\n\t\n\td = w1<d.x ? vec4(w1,wallc) : d;\n\td = w2<d.x ? vec4(w2,wallc) : d;\n\t\n\treturn d;\n}\n\nvec3 normal(vec3 p) {\n\n    vec2 o = vec2(0.00001,0.0);\n\n\tfloat d = scene(p).x;\n\t\n    float d1 = d-scene(p+o.xyy).x;\n    float d2 = d-scene(p+o.yxy).x;\n    float d3 = d-scene(p+o.yyx).x;\n\n    return normalize(vec3(d1,d2,d3));\n}\n\nfloat AO(vec3 p, vec3 normal) {\n\n    float a = 1.1;\n\n\tfloat c = 0.0;\n    float s = 0.25;\n\n    for(int i=0; i<4; i++) {\n\t    c += s;\n        a *= 1.0-max(0.0, (c -scene(p + normal*c).x) * s / c);\n    }\n\t\n    return clamp(a,0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float ball_angle = t/3.0;\n    vec3 forward = vec3(0.0,-cos(ball_angle),sin(ball_angle));\n    vec3 side    = normalize(cross(forward, vec3(1.0, 0.0, 0.0)));\n    vec3 up      = normalize(cross(forward, side));\n\n    ball_rot = mat3(forward,side,up);\n\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\t\n    vec3 dir = normalize(vec3(uv.x, uv.y * (iResolution.y/iResolution.x), 1.0));\t\n\t\n    vec3 cam = vec3(0.0,1.8,-10.0);\n\n\tvec3 p = cam;\n\n\tvec4 d;\n\t\n\tfourth_wall  = 0.0;\n\t\n    for(int i=0; i<MAX_RAY_STEPS; i++) {\n\t\td = scene(p);\n        p += d.x * dir;\n    }\n\t\n\tfourth_wall = 1.0;\n\t\n    vec3 n = -normal(p-dir*0.00001);\n\n    vec3 l = vec3(0.0,7,-4.0);\n\n\tvec3 diffuse = d.yzw;\n\t\t\n\tfloat ao = AO(p, 0.5*(n+normalize(n+l)));\n\t\n\tvec3 c = diffuse * ao;\n\t\n\tc += pow(max(0.0, dot(n, normalize(l-p))),1.5);\n\t\n\tc -= c * length(cam-p)*0.055;\n\t\t\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Md23W3","date":"1394708744","viewed":1069,"name":"Boink!","username":"andyalias","description":"Inspired by the old Amiga 'Boing' demos and some ShaderToy physics demos like ioccc_fan's excellent https://www.shadertoy.com/view/4dl3Wf.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["amiga","boing","physics"],"hasliked":0,"parentid":"","parentname":""}}