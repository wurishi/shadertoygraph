{"ver":"0.1","info":{"id":"MsKSDV","date":"1477169542","viewed":180,"name":"Glowing Tunnel","username":"VoidChicken","description":"A glowing tunnel with Phong lighting. My first shader to use it. (No, Tablet Universe used Blinn-Phong and it was after this one)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","tunnel","phong","raymarch","lighting","glow","vignette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\nfloat smin( float a, float b)\n{\n    float h = clamp( 0.5+0.5*(b-a)/.1, 0.0, 1.0 );\n    return mix( b, a, h ) - .1*h*(1.0-h);\n}\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\nfloat fbm (vec3 r) {\n    float mip = 0.;\n            mip += snoise(r/16.);\n            mip += snoise(r/8.);\n            mip += snoise(r/4.);\n            mip += snoise(r/2.);\n            mip += snoise(r/1.);\n    return mip/5.;\n}\nfloat map (vec3 v) {\n    float df = 0.;\n    float si = 5.;\n    float offs =  0.;\n   \tdf = sdPlane(v, vec4(normalize(vec3(0,1,0)),si+offs));\n    df = smin(df,sdPlane(v, vec4(normalize(vec3(0,-1,0)),si+offs)));\n    df = smin(df,sdPlane(v, vec4(normalize(vec3(1,0,0)),si+offs)));\n    df = smin(df,sdPlane(v, vec4(normalize(vec3(-1,0,0)),si+offs)));\n    return df;\n}\nvec3 normal(vec3 x )\n{\n    vec2 e = vec2( .001, 0.0 );\n    return normalize( vec3( map(x+e.xyy) - map(x-e.xyy),\n                            map(x+e.yxy) - map(x-e.yxy),\n                            map(x+e.yyx) - map(x-e.yyx) ) );\n}\nvec3 marchc(vec3 ro, vec3 rd) {\n    float t = 1.;\n    for (int i = 0; i < 2; i++) {\n        vec3 r = ro+rd*t;\n        float df = abs(map(r));\n        if (df<.1) {\n            \n            vec3 col = vec3(150./255.,140./255.,1);\n            vec3 n = normal(r);\n            float rr = fbm(r+100.);\n            float no =fbm(r);\n            r+=n*((no+rr)/2.);\n            float rmd = rr*no/(1./(rr+no));\n            n=normal(r);\n            vec4 b = texture(iChannel0,(r.xy+r.xz+r.yz)/3.);\n            vec4 c = texture(iChannel1,(r.xy+r.xz+r.yz)/3.);\n            \n            b = mix(b,c,no);\n     \t\tif (rmd > .1)\n            {\n                b = vec4(0, 0, 1,1);\n            }\n           vec3 light = ro+vec3(0, 0, 10);\n            vec3 dir = normalize(light-r);\n            float dist = distance(light,r);\n            float ndotl =dot(n,dir);\n            ndotl = clamp(ndotl,0.,1.);\n            vec3 spec = vec3(0.);\n            vec3 rn = reflect(-dir,n);\n            float v = max(dot(-rd,rn),0.);\n            spec = pow(v,4.)*col;\n            vec3 final = ndotl*col*3./dist;\n            return b.rgb*final+clamp(spec*rr,0.,1.);\n        }\n        t+=df;\n    }\n    return vec3(0);\n}\nvec3 march(vec3 ro, vec3 rd) {\n    float t = 0.;\n    bool hit = false;\n    vec3 r ;\n    for (int i = 0; i < 64; i++) {\n        \n        \n         r = ro+rd*t;\n        float df = abs(map(r));\n        if (df<.001) {\n            hit = true;\n           \n        }\n        t+=df;\n    }\n    \n    vec3 col = vec3(0);\n    if (hit) {\n    col = vec3(150./255.,140./255.,1);\n            vec3 n = normal(r);\n            float rr = fbm(r+100.);\n            float no =fbm(r);\n            r+=n*((no+rr)/2.);\n            float rmd = rr*no/(1./(rr+no));\n            n=normal(r);\n            vec4 b = texture(iChannel0,(r.xy+r.xz+r.yz)/3.);\n            vec4 c = texture(iChannel1,(r.xy+r.xz+r.yz)/3.);\n            \n            b = mix(b,c,no);\n            bool dsp = true;\n     \t\tif (rmd > .1)\n            {\n                dsp = false;\n                vec4 c2 = vec4(marchc(r, reflect(rd, n)),1);\n                b = vec4(0,.9,1,1) * (c2.x+c2.y+c2.z)/3.;\n            }\n            vec3 spec = vec3(0.);\n            \n               vec3 light = ro+vec3(0, 0, 10);\n                vec3 dir = normalize(light-r);\n                float dist = distance(light,r);\n                float ndotl =dot(n,dir);\n                ndotl = clamp(ndotl,0.,1.);\n           if (dsp) {     \n                vec3 rn = reflect(-dir,n);\n                float v = max(dot(-rd,rn),0.);\n                spec = pow(v,4.)*col;\n            }\n            vec3 final = ndotl*col*3./dist;\n            return dsp?b.rgb*final+clamp(spec*rr,0.,1.):b.rgb;\n    }\n    return col;\n}\nvoid mainImage( out vec4 c, in vec2 f )\n{\n\tvec2 R=iResolution.xy,u = f / R;\n    vec3 rd = vec3 (u*2.-1.,1);\n\tc = (vec4(march(vec3(0, 0, iDate.w), rd),1))*(1.-length(u-.5)/1.62);\n}","name":"Image","description":"","type":"image"}]}