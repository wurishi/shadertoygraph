{"ver":"0.1","info":{"id":"X32fDw","date":"1729536579","viewed":35,"name":"DICOM GSDF vs gamma2.2","username":"ivar","description":"This supposes the screen uses a gamma 2.2 curve (but this is only approximative).\nThe JND of black and white of the screen should be filled in for more accuracy.\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["eotf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Screen characteristics\n// You need to know the luminance range\n// of the display to use the GSDF correctly.\n#define screenBlackJnd 30.0\n#define screenWhiteJnd 630.0\n#define screenWhiteLuminance 298.9195\n\n// should be higher than 1.0\n#define nbBands 6.0\n\n// GSDF variables\nfloat a = -1.3011877;\nfloat b = -2.5840191E-2;\nfloat c = 8.0242636E-2;\nfloat d = -1.0320229E-1;\nfloat e = 1.3646699E-1;\nfloat f = 2.8745620E-2;\nfloat g = -2.5468404E-2;\nfloat h = -3.1978977E-3;\nfloat k = 1.2992634E-4;\nfloat m = 1.3635334E-3;\n\nfloat gsdf(float band) {\n    // first compute normalized luminance by applying GSDF\n    float idx = band * (screenWhiteJnd - screenBlackJnd) + screenBlackJnd;\n    float log10 = a + c * log(idx) + e * log(idx) * log(idx);\n    log10 += g * log(idx) * log(idx) * log(idx) + m * log(idx) * log(idx) * log(idx) * log(idx);\n    float den = 1.0 + b * log(idx) + d * log(idx) * log(idx);\n    den += f * log(idx) * log(idx) * log(idx) + h * log(idx) * log(idx) * log(idx) * log(idx);\n    den += k * log(idx) * log(idx) * log(idx) * log(idx) * log(idx);\n    log10 /= den;\n    float lum = pow(10.0, log10);\n    lum /= screenWhiteLuminance;\n    \n    // then apply inverse gamma 2.2\n    if (lum <= 0.0031308) {\n        return 12.92 * lum;\n    } else {\n        return 1.055 * pow(lum, 1.0 / 2.4) - 0.055;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float band = floor(uv.x * nbBands) / (nbBands - 1.0);\n    \n    \n    \n    if (uv.y > 0.5) {\n        fragColor = vec4(vec3(band), 1.0);\n    } else {\n        fragColor = vec4(vec3(gsdf(band)), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}