{"ver":"0.1","info":{"id":"fsKyzy","date":"1664047524","viewed":182,"name":"Line segment spiral","username":"ChunderFPV","description":"Line segmented logarithmic number spiral.  Mouse y to zoom.  600 seconds to traverse number line.","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["2d","spiral","logarithmic","loopless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 2.5\n#define PI radians(180.0)\n#define TAU (PI*2.0)\n#define CS(a) vec2(cos(a), sin(a))\n#define PT(u,r) smoothstep(0.0, r, r-length(u))\n#define CL(x,a,b) smoothstep(0.0,1.0,(2.0/3.0)*(x-a)/(b-a)+(1.0/6.0))*(b-a)+a // https://www.shadertoy.com/view/Ws3Xzr\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy;\n    vec4 m = iMouse; m.xy = m.xy*2.0/R-1.0; // ±1x, ±1y\n    float z = (m.z > 0.0) ? pow(1.0-abs(m.y), 2.0*sign(m.y)): 1.0; // zoom from mouse y\n    float sec = 600.0; // time to cycle through number line\n    float range = ((mod(iTime, sec)/sec)-0.5)*4.0; // -2 to +2\n    float n = (abs(range) > 1.0) ? 1.0/(2.0*sign(range)-range): range; // n from time\n    float az = (n < 0.0) ? pow(40.0, n): pow(300.0, n); // autozoom\n    az = clamp(az, CL(az, 1e-16, 1e-15), CL(az, 1e+17, 1e+18)); // clamp at precision lost\n    \n    vec2 uv = (U-0.5*R)/R.y; // screen coords with cartesian and aspect ratio fix applied\n    vec2 u = uv*SCALE*z*az; // new screen coords with zoom applied\n    float px = length(fwidth(u)*0.7); // pixel size (line radius)\n    vec3 c = vec3(0); // background color\n    \n    float rt = (iTime*TAU)/(sec/10.0); // rotation time\n    float l = length(u); // hypot of xy\n    float r = pow(l, 1.0/n); // spiral radius\n    float sa = round(r)*TAU; // segmented spiral arc\n    float g = min(abs(n), abs(1.0/n)); // smooth gradient of n\n    float p = (r > 0.5) ? 1.0: -1.0; // polarity flipper to reverse trail\n    c += max(1.0-mod(atan(-u.x*p, u.y)-p*rt-sa/n, TAU)/PI, 0.0)*vec3(1.0, g, 1.0-g)*0.1; // trail 1\n    c += max(1.0-mod(atan(u.x*p, -u.y)-p*rt-sa/n, TAU)/PI, 0.0)*vec3(1.0-g, g, 1.0)*0.1; // trail 2\n    c *= texture(iChannel0, CS(PI/2.0+(1.0/n))*length(uv)*g*z).xyz*3.0; // multiply with texture\n    c *= max(cos(r/n), 0.4)*2.0; // brightness variation\n    \n    float ro = -(PI/2.0); // rotation\n    vec2 xy = CS(sa/n+rt-ro)*l; // xy point coords\n    c += PT(u-xy, px*2.0); // line 1\n    c += PT(u+xy, px*2.0); // line 2\n    c += PT(u-xy, px*25.0)*vec3(0.9, 0.7, 0.1)*0.3; // glow 1\n    c += PT(u+xy, px*25.0)*vec3(0.1, 0.4, 1.0)*0.3; // glow 2\n    \n    float d = mod(r+0.5, 1.0); // gradient to smooth edges\n    c *= min(d, 1.0-d)*3.0; // radial smooth\n    \n    c = min(c, pow(l/az, -0.25/n)); // dark gradient\n    if (n > 0.0 && r < 1.0) c *= min(20.0/(floor(1.0/n)-l), 1.0); // fade transition at halfway\n    \n    u *= exp(log(l)/n*0.5); // warp coords\n    vec3 gl = vec3(0.5, 0.3, 0.5)*length(u)*0.005; // form glow\n    if (n < 0.0 && r > 1.0) c = max(c, min(gl, 10.0*abs(n))); // add glow\n    \n    O = vec4(c*sqrt(c)*2.0, 1.0); // draw\n}","name":"Image","description":"","type":"image"}]}