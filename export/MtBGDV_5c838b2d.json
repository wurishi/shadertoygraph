{"ver":"0.1","info":{"id":"MtBGDV","date":"1432437556","viewed":232,"name":"triangle interpolation raytrace","username":"public_int_i","description":"raytracing spheres to show points on a triangle, added basic lighting","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangle","raytrace","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n#define FAR 100000.\n\nfloat sphere(in vec3 rp, in vec3 rd) {\n\tfloat sc = dot(rp, rp) - .05;\n\tfloat sb = dot(rd, rp);\n\n\tfloat sd = sb*sb - sc;\n\tfloat st = -sb - sqrt(abs(sd));\n\n    if (!(sd < 0.0 || st < 0.0)) {\n        return st;\n    }\n    return FAR;\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy-vec2(.5);\n    uv.y *= iResolution.y/iResolution.x;\n    \n    float ct = iMouse.x/iResolution.x*6.15;\n    vec3 rp = vec3(sin(ct)*8.,0.,cos(ct)*8.);\n    vec3 rd = normalize(-rp);\n    rp.y += 2.;\n    \n    vec3 rr = cross(vec3(0.,1.,0.),rd);\n    rd = normalize(rd*.4+uv.x*rr+uv.y*cross(rd,rr));\n    \n    \n    const float utimes = 9.;\n    const float vtimes = 9.;\n    const float us = 1./utimes;\n    const float vs = 1./vtimes;\n    \n    vec3 t1 = vec3(cos(iTime)*2.5,sin(iTime)*2.5,0.);\n    vec3 t2 = vec3(0.,5.,5.);\n    vec3 t3 = vec3(sin(iTime)*2.5+2.5,cos(iTime)*2.5+2.5,cos(iTime*.6)*2.);\n    \n    vec3 ud = t2-t1;\n    vec3 vd = t3-t2;\n    \n    float d = FAR;\n    vec2 fuv = vec2(0.);\n    float sd;\n    \n    for (float u = 0.; u < 1.; u+=us) {\n        for (float v = 0.; v < 1.; v+=vs) {\n            if (v > u) break;\n            vec3 sp = t1+u*ud+v*vd;\n            sd=sphere(rp-sp,rd);\n            d = min(d,sd);\n            sd = sign(sd-d);\n            fuv = fuv*sd+(1.-sd)*vec2(u,v);\n        }\n    }\n    if (d < FAR) {\n        rp += rd*d;\n        rp -= t1+fuv.x*ud+fuv.y*vd;\n        \n        vec3 c =  texture(iChannel0,fuv).xyz;\n        c = c*.2+\n            max(0.,dot(normalize(vec3(4.,10.,-6.)),normalize(rp)))*c;\n        \n        fragColor = vec4(c,1.);\n    } else {\n       fragColor = vec4(.2); \n    }\n}","name":"","description":"","type":"image"}]}