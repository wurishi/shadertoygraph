{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"struct rectangle\n{\n    vec2 pos;\n    vec2 bounding;\n};\n    \nvec4 drawRectangle(vec2 uv, rectangle targetRect, vec3 color)\n{\n    float alpha = 1.0;\n    \n    if (uv.x < targetRect.pos.x || uv.x >= targetRect.pos.x + targetRect.bounding.x) alpha = 0.0;\n    if (uv.y < targetRect.pos.y || uv.y >= targetRect.pos.y + targetRect.bounding.y) alpha = 0.0;\n    \n    return vec4(color, alpha);\n}\n\nvec3 rgbToDecimal(float r, float g, float b)\n{\n    return vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nvec4 drawMaxilla(vec2 uv, vec2 pos, float skullUnit, vec3 skullColour)\n{\n    float alpha = 0.0;\n    \n    if (uv.x - pos.x - (30.0 * skullUnit) <= uv.y - pos.y\n        && uv.y < pos.y - 30.0 * skullUnit\n        && uv.y > pos.y - 40.0 * skullUnit\n        && uv.x > pos.x - 60.0 * skullUnit) alpha = 1.0;\n    if (uv.x - pos.x + (30.0 * skullUnit) >= iResolution.y - uv.y - pos.y\n        && uv.y < pos.y - 30.0 * skullUnit\n        && uv.y > pos.y - 40.0 * skullUnit\n        && uv.x < pos.x + 60.0 * skullUnit) alpha = 1.0;\n\n    return vec4(skullColour, alpha);\n}\n\nvec4 drawSkull(vec2 uv, vec2 pos, vec3 skullColour)\n{\n    vec4        skullVec                            = vec4(0.0, 0.0, 0.0, 0.0);\n    float       skullWidth                          = 0.25 * iResolution.x;\n    float       skullUnit                           = skullWidth / 256.0;\n    const int   skullComponentSize                  = 5;\n    rectangle   skullComponents[skullComponentSize];\n    \n    skullComponents[0].bounding = vec2(120.0 * skullUnit, 50.0 * skullUnit);\n    skullComponents[0].pos = pos - vec2(skullComponents[0].bounding.x / 2.0, 0.0);\n    \n    skullComponents[1].bounding = vec2(20.0 * skullUnit, 30.0 * skullUnit);\n    skullComponents[1].pos = pos - vec2(60.0 * skullUnit, 30.0 * skullUnit);\n\n    skullComponents[2].bounding = vec2(20.0 * skullUnit, 30.0 * skullUnit);\n    skullComponents[2].pos = pos - vec2(10.0 * skullUnit, 30.0 * skullUnit);\n    \n    skullComponents[3].bounding = vec2(20.0 * skullUnit, 30.0 * skullUnit);\n    skullComponents[3].pos = pos - vec2(-40.0 * skullUnit, 30.0 * skullUnit);\n    \n    skullComponents[4].bounding = vec2(60.0 * skullUnit, 15.0 * skullUnit);\n    skullComponents[4].pos = pos - vec2(30.0 * skullUnit, 55.0 * skullUnit);\n\n    for (int i = 0; i < skullComponentSize; i++)\n    {\n        skullVec += drawRectangle(uv, skullComponents[i], skullColour);\n    }\n    \n    skullVec += drawMaxilla(uv, pos, skullUnit, skullColour);\n\n    return skullVec;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy;\n    vec2 centre = iResolution.xy * 0.5;\n\n\tvec2 backgrounduv = fragCoord.xy / iResolution.xy;\n    vec4 background = vec4(backgrounduv,0.5+0.5*sin(iTime),1.0);\n    vec4 skullVec = drawSkull(uv, centre, rgbToDecimal(255.0, 255.0, 255.0));\n    \n    fragColor = mix(background, skullVec, skullVec.a);\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsfXzl","date":"1405589426","viewed":251,"name":"2D Skull","username":"andystanton","description":"A shader for drawing the skull from glfw skeleton. This is my first shader.\n\nhttps://github.com/andystanton/glfw-skeleton","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","rectangle","skull"],"hasliked":0,"parentid":"","parentname":""}}