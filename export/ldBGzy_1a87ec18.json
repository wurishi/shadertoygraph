{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define HARMONICS 64.0\n\n// http://en.wikipedia.org/wiki/Square_wave\n// http://en.wikipedia.org/wiki/Sawtooth_wave\n\n// Left out the PI, sorry, feel free to put it back in! :)\n\t\nfloat Wave( vec2 uv, float time){\n\t\n\tfloat t = (time/16.0-uv.x+.12) * 25.0;\n\ttime = mod(time*8.0, HARMONICS*2.0);\n\tif (time > HARMONICS) time = HARMONICS*2.0 - time;\n\ttime += 1.0;\n\n\tfloat x = 0.0;\n\tfor (float i = 1.0; i <= HARMONICS; i+=1.0)\n\t{\n\t\tif (i > time) continue;\n\t\t// Square wave...\n\t\tfloat h = i * 2.0 - 1.0;\n\t\tfloat square = sin(h*t) / h;\n\n\t\t\n\t\tfloat saw = .5*(sin(i*t) / i);\n\n\t\t// Mix across the centre line...\n\t\tfloat n = smoothstep(.4, .601, uv.x);\n\t\tx += mix(square, saw, n);\n\t}\n\tfloat y = uv.y*2.0-1.0;\t\n\treturn smoothstep(y+.02, y-.04, x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat a = 0.0;\n\t// Anti-alias the x direction...\n\tfor (int x = 0; x < 4; x++)\n\t{\n\t\ta += Wave(uv, iTime);\n\t\tuv.x += (.25 / iResolution.x);\n\t}\n\ta *= .25;\n\tfragColor = vec4( vec3(a), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldBGzy","date":"1390050590","viewed":663,"name":"Square/Sawtooth wave","username":"Dave_Hoskins","description":"An almost direct copy of aki's triangle wave shader ( https://www.shadertoy.com/view/lsB3RG ). For generating square and sawtooth waves with sinusoidal harmonics.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["squarewave"],"hasliked":0,"parentid":"","parentname":""}}