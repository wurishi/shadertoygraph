{"ver":"0.1","info":{"id":"MffXD7","date":"1705335861","viewed":259,"name":"3-regular automata 2","username":"SnoopethDuckDuck","description":"slightly different rule with growth","likes":14,"published":3,"flags":32,"usePreview":0,"tags":["graph","ca","cellularautomata","retract"],"hasliked":0,"parentid":"XfXXWN","parentname":"3-regular automata"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, vec2 px )\n{\n    o = cell(px);   \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define res iResolution.xy\n#define cell(p) texelFetch(iChannel0, ivec2(mod(p, res)), 0)\n\n// from Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 o, vec2 px )\n{   \n    if (iFrame < 1) { // Initial state\n        vec2 u = (px - .5 * res) / res.y;\n        vec2 f = fract(16.*u) - .5;\n        float d = length(f);\n        float s = step(d, .25);\n        o = 0.*o + s * hash12(1e3*fract(iDate[3]) + 1e-5*px);\n    }\n    else {\n        o = cell(px);\n        \n        float sum, t;\n        vec2 p;\n        \n        float n = 5.;\n        for (float i = -n; i <= n; i++)\n        for (float j = -n; j <= n; j++) {\n            // Weight each neighbor\n            float w = max(abs(i), abs(j));\n            \n            // Neighbor value * weight\n            float c = cell(px + vec2(i, j)).x * w;\n\n            sum += c;            // Sum neighbor val * weight\n            p += c * vec2(i, j); // Sum weighted relative positions\n            t += w;              // Sum weights\n        }\n        \n        sum /= t; // Map to [0,1] range\n        p /= t;   // Map to [-1,1]^2 range (I think)\n        \n        // Magical equation I don't understand\n        o -= 2. * sum * dot(p,p)\n           * (step(sum+sqrt(sum), length(p)) - .5);\n        \n        o = clamp(o, 0., 1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}