{"ver":"0.1","info":{"id":"wdsSRf","date":"1551805330","viewed":196,"name":"track3 [excerpt]","username":"nabr","description":"one plane with a ray marched texture and sound","likes":6,"published":1,"flags":8,"usePreview":0,"tags":["raymarch","sound","displace","synth","neosmixtape","artforthebroken"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nabr\n// https://www.shadertoy.com/view/wdsSRf\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\n// soundin shader by FabriceNeyret2\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n} // EOL soundin shader\n\n\n\n\n// just in case someone wonder what the heck going on here\n// here the minimal version of the shader https://www.shadertoy.com/view/4lGcRy\n// the difference is the displace function\n\nvec3 tex(vec3 st) \n{\n    #define pi 3.14159\n    vec3 c = vec3(1.0, 1.0, 1.0), bg = vec3(1.0, 1.0, 1.0);\n    \n\tvec3 ro =  vec3(0.);\n    \n    vec3 rd = normalize(vec3(st[0], st[1] - .2, .15));\n    vec3 tmp = rd;\n   \n    // ----------------------- RAYMARCH\n    \n    float tt = 0., s = 1. / 99.;\n    \n    for (float ii = 0.; ii <= 1.; ii += s)\n    {\n\n       ro = vec3(0.001, 0.001, -9.) + tt * rd;\n        \n        float tm = (ro[1] - .0314) + iTime;\n        \n        // displace\n        float n =\n            distance(dot(rd,\n\t\t\tvec3(-.25, mainSound( 0,rd.z - tm) * (atan(rd.x, rd.z) * .5 ) ) + ro),\n                dot(rd, vec3( mainSound( 0,iTime).x * 4. , -.5,   -1.)));\n        \n        \n        ro = cos(tm) * vec3(ro[0], -1., ro[2]) \n            \t+ (sin(tm) * vec3(ro[2], ro[0], 0.001 ));\n\n        \n        float rot = (.8 - \n                     sin(((length(ro * ro - (n * vec3(ro[1], ro[0], ro[2]) \n                                             * (pi * .65))) \n                                / length(vec3(ro[1], -ro[0], ro[2]))) * pi)));\n\n        float sph = (length(ro) - pi);\n\n        float sur = sqrt(.008 + max(sph + rot, -sph - rot));\n\n        float d = ((sur * .9) * sur);\n\n        tt += clamp((max(d, .01) * (n * .004)) + (max(d, 0.01) * (0.098)), 0., 1.);\n        \n        if (tt > 50. || d < .0051) break;\n\n    };\n    \n    // #define R(p, a) p = cos(a) * p + sin(a) * vec3(p[1], -p[0], -1.)\n    // R(tmp, mainSound( in int samp,tmp.z * .5 - iTime).x * 4.);\n    \n\tfloat a = mainSound( 0,tmp.z * .25 - iTime).x * 3.; \n\ttmp.xy = cos(a) * tmp.xy + sin(a) * vec2(tmp[1], -tmp[0]); \n    tmp.zx = cos(a) * tmp.zx + sin(a) * vec2(-tmp[0], tmp[1]); \n    // tmp.z = sin(iTime);\n    \n    c = rd * .5 + (cross(tmp, \n                         vec3( .1, sin( iTime *.5 ) * .5 -.5 ,   -1.))) \n        \t\t\t\t + tt * vec3(.1, .1, .01);\n    \n    // c = rd + tt * vec3(.1, .1, .01);\n    return min(c, bg);\n    \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n\t// call soundin shader \n\tif (iResolution.y<2000.) {float c=message((fragCoord/iResolution.y-vec2(.06,.1))*10.);if(c>=0.){fragColor=vec4(c);return;}}\n\n  \n    vec2 st = 2. * (fragCoord.xy / iResolution.xy) - 1.;\n    float aspect = (iResolution.x / iResolution.y);\n    \n    // frame\n    if (asin(abs(st.x)) > .55) \n    {\n        fragColor.rgb = vec3(.095)\n            +.09 * texture(iChannel3,vec2(st.x*aspect, st.y)\n                   -vec2(0,int[](int(iTime * 16. ) % int(iResolution.y*.5) )[0])/15. ).x;\n        return;\n    };\n        \n  \tvec3 c = vec3(0.0, 0.0, 0.0); // color\n    \n\tvec3 pl = vec3(0.0, 1.0, 1.57), \n        \tpn = normalize(vec3(0.0, .05, 1.)); // plane\n    \n\t// ----------------------- CAMERA\n    vec3 ro = vec3(-.5, 0, -7.);\n   \n    vec3 up = vec3(0, 0, 1);\n\n    float fov = 25.+(sin(iTime)-sqrt(-log2(fract(iTime*.888))));\n    \n    vec3 lookAt = vec3(0);\n    vec3 g = normalize(lookAt - ro.xyz);\n    vec3 u = normalize(cross(g, up));\n    vec3 v = normalize(cross(u, g));\n    u = u * tan(radians(fov * 0.5));\n    v = v * tan(radians(fov * 0.5)) / aspect;\n    \n    vec3 rd = normalize(g + st.x * u + st.y * v);\n\n    // plane raytrace \n    float t = dot(-pl, pn) / -rd[2];\n \n    \n    // ----------------------- SHADE\n    \n    float r = 2. + fract(iTime * .5 -5. + cos(iTime)); //some variation\n    \n    c = ((tex(vec3(-rd[1] * t, rd[0] * t, rd[2] )) \n          \t * (tex(vec3(-rd[1] * (t / r), rd[0] * (t / r), rd[2] * 0.5001)))));\n    \n    \n    float lum = dot(vec3(0.2, 0.26, 0.925), \n                    pow(min(c, tex(vec3(rd[1] * t, rd[0] * t, 0.) )), vec3(2.5)));\n    \n    vec3 ll = vec3(clamp(lum, 0., 1.));\n    \n    \n    fragColor.rgb = vec3(1., 0., 0.) + ll + c; \n    fragColor.a = 1.;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// nabr\n// https://www.shadertoy.com/view/wdsSRf\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n/*      _                           _      ____  \n *     | |                         | |    |___ \\ \n *     | |_   _ __    __ _    ___  | | __   __) |\n *     | __| | '__|  / _` |  / __| | |/ /  |__ < \n *     | |_  | |    | (_| | | (__  |   <   ___) |\n *      \\__| |_|     \\__,_|  \\___| |_|\\_\\ |____/ \n */\n\n\n\n#define VOLUME .95\n\n\n\nfloat tone( in float freq, in float deca, in float time) \n{\n    \n    float y = sin(6.2831 * freq * time);\n\n    y = abs(1. - cos(deca * y * 10.)) * (exp(-4. * deca));\n\n    y *= 1. - abs(sin(y * deca * 5.));\n\n    return y;\n}\n\n\nvoid fx( in float f, in float t, out float snd, out float snd2) \n{\n    float wet = 1.;\n    \n    (mod(t, .334) > 0.1 ) \n    \t? (wet = 18.,   snd2 -= exp( -5. * f  ) )\n            : (wet = 1., snd2 *= t - sqrt( -log2( ( (t *.5) )  ) ) );\n    \n\t// attack decay (avoid click)  \n   \tsnd2 = sign(snd2) - max(0. , 1. - fract( t * .5 ) ) * min(1.,  fract( t * .5 ) * 30. ); \n    \n    \n\tf -= f - (.25 + asin(f * mod(t, 3.) * wet));\n\n    // ---------------- OUT\n    \n    // ---- snd\n    f *= abs(cos(f * mod(t, .666) * 10.) - 2.);\n    snd = sign(snd) - f;\n}\n\n\nvec2 mainSound( in int samp,float time) \n{\n    float dummy = .001;\n\n    float p = .0119;\n    \n    if (mod(time, 12.) > 8.) p = .02;\n    \n    #define instr(p, t) sin(p) * exp(-5.4 * t)\n    \n    // -------- RYTHM \n    float rythm = instr(float(int(floor(gl_FragCoord.x * p)) * 2 << 16), fract(time));\n\n    float disto_rythm = rythm;\n\n    \n    // --------- BELL \n    float bell = instr(float(int(floor(gl_FragCoord.x * .05)) * 8 >> 2), fract(time * .333));\n\n    float disto_bell = bell;\n\n \t\n    fx(bell, time, dummy, disto_bell);\n    fx(rythm, time, disto_rythm, dummy);\n\n    \n    float tmm = 2.57;\n    \n    ( mod(time  , 12. ) > 9.3333 ) ? tmm : tmm = 1.57;\n    \n    float y = 0.0001, a = 1.7, mtm = time * tmm;\n    \n    // borrowed from iq https://www.shadertoy.com/view/4l2BW3\n \tfor (int i = 0; i < 7; i++) \n    {\n        \n        float hime = mtm - 6.333 * float(i) / 7.0;\n        \n        (mod(hime * 6., 11.999) > 8.) ? p = .5 : p = .85;\n        \n        float freq = p * float[](200., 400., 300., 270.)[int(hime * 2.) % 4];;\n        \n\t\tfloat deca = fract( .35 * mtm );\n        \n        y +=  a *  tone(freq,  deca, hime)   ;\n\t\t\n        a *=   0.5;\n    };\n   \n    // -------- MASTER\n \n        \n\tvec2 chan1 = vec2(((sign(disto_bell) * .1) - bell * .06),\n                       ((sign(disto_bell) * .1) + bell * .1));\n\n\tvec2 chan2 = vec2((sign(disto_rythm) * .1) + (rythm * .15), \n                      ((sign(disto_rythm) * .1) - (rythm * .15)));\n\n    chan1 =    clamp(chan1, 0., 1.);\n    chan2 =   y  + clamp(chan2, 0., 1.); \n    \n\treturn (mix(chan1, chan2, .5)) * VOLUME;\n\t\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"// see common tab","name":"Sound","description":"","type":"sound"}]}