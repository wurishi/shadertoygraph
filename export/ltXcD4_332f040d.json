{"ver":"0.1","info":{"id":"ltXcD4","date":"1504843731","viewed":134,"name":"ZX Spectrum video scanout","username":"baskanov","description":"DRAM row and column access pattern during video scanout.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["spectrum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float g_fade_time = 256. * 64.;\nconst float g_pixel_clock = 512.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1. / max(1., floor(min(iResolution.x / (192. + 256.), iResolution.y / 192.)));\n\tvec2 pixel = floor(scale * vec2(fragCoord.x, iResolution.y - fragCoord.y));\n    \n    float counter = iTime * g_pixel_clock;\n\n    fragColor = vec4(0., 0., 0., 1.);\n    \n    float dram_row = pixel.y;\n    float dram_column = pixel.x;\n    if (dram_row < 128. && dram_column < 128.)\n    {\n        float dram_cell_counter = -1.;\n        if (dram_column < 48.)\n        {\n            float display_byte_index\n                = mod(dram_row, 32.)\n                + 32. * mod(floor(dram_column / 2.), 8.)\n                + 256. * mod(floor(dram_row / 32.), 4.)\n                + 1024. * mod(dram_column, 2.)\n                + 2048. * mod(floor(dram_column / 16.), 4.);\n            dram_cell_counter = 4. * mod(display_byte_index, 2.) + 16. * floor(display_byte_index / 2.);\n            dram_cell_counter += 256. * 192. * floor((counter - dram_cell_counter) / (256. * 192.));\n        }\n        else if (dram_column < 54.)\n        {\n            float attribute_byte_index\n                = mod(dram_row, 32.)\n                + 256. * mod(floor(dram_row / 32.), 4.)\n                + 1024. * mod(dram_column, 8.);\n            dram_cell_counter = 4. * mod(attribute_byte_index, 2.) + 16. * floor(attribute_byte_index / 2.) + 2.;\n            dram_cell_counter += 256. * 192. * floor((counter - dram_cell_counter) / (256. * 192.));\n            dram_cell_counter += 256. * min(7., floor((counter - dram_cell_counter) / 256.));\n        }\n        fragColor = vec4(0., 0., 0.5, 1.);\n        if (dram_cell_counter != -1.)\n        {\n            float time_since_access = counter - dram_cell_counter;\n            float value = max(0., 1. - time_since_access / g_fade_time);\n            fragColor = mix(vec4(0., 0., 0.5, 1.), vec4(1., 1., 0., 1.), value);\n        }\n    }\n    \n    float screen_row = pixel.y;\n    float screen_column = pixel.x - 192.;\n    if (0. <= screen_row && screen_row < 192. && 0. <= screen_column && screen_column < 256.)\n    {\n        float screen_pixel_counter = screen_row * 256. + screen_column;\n        screen_pixel_counter += 256. * 192. * floor((counter - screen_pixel_counter) / (256. * 192.));\n        float time_since_update = counter - screen_pixel_counter;\n        float value = max(0., 1. - time_since_update / g_fade_time);\n        fragColor = mix(vec4(0., 0., 0.5, 1.), vec4(1., 1., 0., 1.), value);\n    }\n}\n","name":"Image","description":"","type":"image"}]}