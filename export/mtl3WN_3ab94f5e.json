{"ver":"0.1","info":{"id":"mtl3WN","date":"1671803493","viewed":373,"name":"chat-gpt terrain lol","username":"Emil","description":"I asked chat-gpt the following:\n\"Hi. Write a shadertoy shader for me where we're moving through a terrain landscape as if we're flying\"\nThe code was almost functional. I just had to reorder the functions since they were placed in the wrong order. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noisy","chatgpt","aigenerated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This function generates a random value for each integer input position\nvec3 hash(vec3 p)\n{\n    // Generate a random value for each integer input position\n    float n = sin(dot(p, vec3(7, 157, 113)));\n\n    // Return the random value as a 3D vector\n    return vec3(fract(n * 43758.5453123), fract(n * 43856.5453123), fract(n * 43954.5453123));\n}\n// This function generates noise using the Perlin noise algorithm\nfloat noise(vec3 p)\n{\n    // Calculate the integer part of the input position\n    vec3 i = floor(p);\n\n    // Calculate the fractional part of the input position\n    vec3 f = p - i;\n\n    // Calculate the weights for the four corners of the cell\n    vec3 w = smoothstep(0.0, 1.0, f);\n\n    // Calculate the Perlin noise value for each corner of the cell\n    float n = dot(hash(i + 0.0), f - 0.0);\n    n += dot(hash(i + 1.0), f - 1.0);\n    n += dot(hash(i + 2.0), f - 2.0);\n\n    // Interpolate the four noise values and return the result\n    return mix(mix(n, dot(hash(i + 1.0), f - vec3(1.0, 0.0, 0.0)), w.x),\n               mix(dot(hash(i + 2.0), f - vec3(0.0, 1.0, 0.0)), dot(hash(i + 3.0), f - vec3(1.0, 1.0, 0.0)), w.x), w.y);\n}\n\n\n// This function generates the terrain height\nfloat terrain(vec3 p)\n{\n    // Generate some noise to create the terrain\n    float h = noise(p * 0.1+ p.x * 0.5);\n\n    // Add some hills to the terrain\n    h += 0.3 * sin(p.x * 0.1 + p.y * 0.2 + iTime * 0.5);\n    h += 0.2 * sin(p.x * 0.2 + p.y * 0.4 + iTime * 0.3);\n    h += 0.1 * sin(p.x * 0.4 + p.y * 0.8 + iTime * 0.1);\n\n    return h;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set up the 3D scene\n    vec3 camPos = vec3(0.0, 0.0, -5.0);  // camera position\n    vec3 camTar = vec3(0.0, 0.0, 0.0);   // camera target\n    vec3 camUp = vec3(0.0, 1.0, 0.0);    // camera up vector\n\n    // Calculate the camera's view matrix\n    vec3 camDir = normalize(camTar - camPos);\n    vec3 camRight = normalize(cross(camDir, camUp));\n    camUp = cross(camRight, camDir);\n    mat3 view = mat3(camRight, camUp, camDir);\n\n    // Set up the projection matrix\n    float fov = 3.1415 / 3.0; // field of view\n    float aspect = iResolution.x / iResolution.y; // aspect ratio\n    mat3 proj = mat3(1.0 / tan(fov / 2.0), 0.0, 0.0, 0.0, aspect / tan(fov / 2.0), 0.0, 0.0, 0.0, -(10.0) / (10.0 - 0.1)); // projection matrix\n\n    // Calculate the ray direction\n    vec3 rayDir = normalize(proj * view * vec3((2.0 * fragCoord.xy - iResolution.xy) / iResolution.y, 1.0));\n\n    // Calculate the intersection point of the ray with the terrain\n    vec3 pos = camPos;\n    float t = 0.0;\n    float h = 0.0;\n    for (int i = 0; i < 50; i++)\n    {\n        h = terrain(pos);\n        t += h;\n        pos += t * rayDir;\n    }\n\n    // Calculate the surface normal\n    vec3 eps = vec3(0.001, 0.0, 0.0);\n    vec3 nor = normalize(vec3(terrain(pos + eps.xyy) - terrain(pos - eps.xyy),\n                              terrain(pos + eps.yxy) - terrain(pos - eps.yxy),\n                              terrain(pos + eps.yyx) - terrain(pos - eps.yyx)));\n\n    // Calculate the lighting\n    vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n    float diff = max(dot(nor, lightDir), 0.0);\n    vec3 diffuse = diff * vec3(1.0, 1.0, 1.0);\n    vec3 ambient = vec3(0.1, 0.1, 0.1);\n\n    // Calculate the color of the pixel\n    vec3 color = (diffuse + ambient) * h;\n\n    // Output the color of the pixel\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}