{"ver":"0.1","info":{"id":"X3jyzm","date":"1727104183","viewed":24,"name":"TP1 - Infographique M1","username":"samyzaknoun","description":"Modélisation / Eclairement","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["m12024"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.09.15\n// Eric Galin\n\n//source des sdf boite et sdTorus : https://iquilezles.org/articles/distfunctions/\n\nstruct Ray{\n    vec3 o;// Origin\n    vec3 d;// Direction\n};\n\nstruct Val {\n  float v; // Signed distance\n  int index; // Cost\n};\n\nstruct Texture {\n    vec3 color;\n    vec3 specular;\n    };\n\n// Compute point on ray\n// ray : The ray\n//   t : Distance\nvec3 Point(Ray ray,float t)\n{\n    return ray.o+t*ray.d;\n}\n\n// Random direction in a hemisphere\n// seed : Integer seed, from 0 to N\n//    n : Direction of the hemisphere\nvec3 Hemisphere(int seed,vec3 n)\n{\n    float a=fract(sin(176.19*float(seed)));// Uniform randoms\n    float b=fract(sin(164.19*float(seed)));\n    \n    float u=2.*3.1415*a;// Random angle\n    float v=acos(2.*b-1.);// Arccosine distribution to compensate at poles\n    \n    vec3 d=vec3(cos(u)*cos(v),sin(u)*cos(v),sin(v));// Direction\n    if(dot(d,n)<0.){d=-d;}// Hemisphere\n    \n    return d;\n}\n\n// Camera -------------------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n\n// Translation\n// v : Translation vector\nvec3 Trans(vec3 o,vec3 v)\n{\n    return vec3(o.x+v.x,o.y+v.y,o.z+v.z);\n}\n\n// Scale matrix\n// s : Value\nmat3 Scale(float s)\n{\n    return mat3(s,0.,0.,0.,s,0.,0.,0.,s);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n \n  // Origin\n  vec3 ro=vec3(60.,0.,20.);\n  ro*=Rz(a);\n \n  // Target point\n  vec3 ta=vec3(0.,0.,6.);\n \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives -------------------------------------------------------------------------------\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nVal Sphere(vec3 p,vec3 c,float r,int i)\n{\n  return Val(length(p-c)-r,i);\n}\n\n// Plane\n// p : point\n// n : Normal of plane\n// o : Point on plane\n\n\nVal Plan(vec3 p, vec3 o, vec3 n,int i)\n{\n    return Val(dot(p-o,n),i);\n}\n\n\n\n// Demi Sphere\n// p : point\n// c : centre\n// r : rayon\n// n : normal\n\nVal demiSph(vec3 p, vec3 c,float r, vec3 n,int i)\n{\n    Val v1=Sphere(p,c,r,i);\n    Val v2=Plan(p,c,n,i);\n    return Val(max(v1.v,v2.v),i);\n}\n\n\nVal capsule(vec3 p, vec3 a, vec3 b,float r,int i)\n{\n   vec3 u=normalize(b-a);\n   if(dot(-u,p-a)>0.)\n       {return Val(length(p-a)-r,2);}\n   else if(dot(u,p-b)>0.)\n       {return Val(length(p-b)-r,2);}\n   else{float h =length(dot(p-a,u));\n        return Val(sqrt(pow(length(p-a),2.)-pow(h,2.))-r,i); }\n}\n\nVal boite(vec3 p,vec3 o,vec3 r,int i)\n{\n    vec3 q=abs(p-o)-r;\n    return Val(length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.0),i);\n}\n\nVal cylindre(vec3 p,vec3 a,vec3 b,float r,int i)\n{\n    vec3 u=normalize(b-a);\n   if(dot(-u,p-a)>0.)\n       {\n       return Val(max(Plan(p,a,-u,i).v,capsule(p,a,b,r,i).v),i);\n       }\n   else if(dot(u,p-b)>0.)\n       {\n       return Val(max(Plan(p,b,u,i).v,capsule(p,a,b,r,i).v),i);\n       }\n   else{float h =length(dot(p-a,u));\n        return Val(sqrt(pow(length(p-a),2.)-pow(h,2.))-r,i); }\n}\n\nVal sdTorus( vec3 p, vec2 t,int i )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return Val(length(q)-t.y,i);\n}\n\n\n\n// Operators --------------------------------------------------------------------------------------------------\n\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nVal Union(Val a,Val b)\n{\n    if (a.v<b.v)\n        return Val(a.v,a.index);\n    else \n    {\n        return Val(b.v,b.index);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nVal Intersection(Val a,Val b)\n{\n    if (a.v>b.v)\n    {\n        return Val(a.v,a.index);\n    }\n    else \n    {\n        return Val(b.v,a.index);\n    }\n}\n\n\n// Union lisse\nVal Unionlisse( Val a, Val b, float k ) {\n    float h = max( k-abs(a.v-b.v), 0.0 )/k;\n    if(a.v<b.v) \n    return Val(min( a.v, b.v ) - h*h*h*k*(1.0/6.0),a.index);\n    else return Val(min( a.v, b.v ) - h*h*h*k*(1.0/6.0),b.index);\n}\n\n\n// Rotation\n\nvec3 rotate(vec3 p, vec3 c, float deg)\n{\n    return Rz(deg)*(p-c)+c;\n}\n\n// Homothétie\n\nvec3 Scale(vec3 p, vec3 c,float sc)\n{\n    return (p-c)*Scale(1./sc)+c;\n}\n\n// Potential field of the object\n// p : point\nVal object(vec3 p)\n{\n\n    Val v= Val(10000.,0);\n    v=Union(v,boite(p,vec3(0.,0.,0.5),vec3(20.,20.,0.5),1));\n    v=Union(v,cylindre(p,vec3(-2.,15.,1.),vec3(-2.,15.,14.),0.5,2));\n    \n    v=Unionlisse(v,demiSph(p,vec3(-2.,15.,1.),1.,vec3(0.,0.,-1.),3),0.25);\n    v=Unionlisse(v,demiSph(p,vec3(-2.,15.,14.),1.,vec3(0.,0.,1.),3),0.25);\n    \n    v=Union(v,cylindre(p,vec3(2.,15.,1.),vec3(2.,15.,14.),0.5,2));\n    \n    v=Unionlisse(v,demiSph(p,vec3(2.,15.,1.),1.,vec3(0.,0.,-1.),3),0.25);\n    v=Unionlisse(v,demiSph(p,vec3(2.,15.,14.),1.,vec3(0.,0.,1.),3),0.25);\n    \n    v=Union(v,cylindre(p,vec3(-2.,10.,3.),vec3(-2.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(2.,10.,3.),vec3(2.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(-5.,10.,3.),vec3(-5.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(5.,10.,3.),vec3(5.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(-8.,10.,3.),vec3(-8.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(8.,10.,3.),vec3(8.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(-11.,10.,3.),vec3(-11.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(11.,10.,3.),vec3(11.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(-14.,10.,3.),vec3(-14.,10.,14.),0.5,2));\n    v=Union(v,cylindre(p,vec3(14.,10.,3.),vec3(14.,10.,14.),0.5,2));\n    \n    v=Union(v,boite(p,vec3(0,-4,2.),vec3(15.,15.,1.),4));\n    v=Union(v,boite(p,vec3(0,-4,15.),vec3(15.,15.,1.),4));\n    v=Union(v,boite(p,vec3(0.,13.25,15.),vec3(3.,2.75,1.),4));\n    \n    vec3 q = rotate(p,vec3(0.,1.,0.),radians(20.));\n    \n    v=Union(v,boite(q,vec3(-7.5,-4.,17.),vec3(7.5,15.,0.5),4));\n     q = rotate(p,vec3(7.5,-4,16.),20.);\n    v=Union(v,boite(q,vec3(7.5,-4.,17.),vec3(7.5,15.,0.5),4));\n    \n   \n    \n    v=Union(v,Plan(p, vec3(0.,0.,0.),vec3(0.,0.,1.),5));\n  \n \n    return v;\n}\n\n\n// Analysis of the scalar field -----------------------------------------------------------------\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  Val val=object(p);\n  float v=val.v;\n  n.x=object(vec3(p.x+eps,p.y,p.z)).v-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z)).v-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps)).v-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : The ray\n//   e : Maximum distance\n//   h : hit\n//   s : Number of steps\n//   c : cost\nbool SphereTrace(Ray ray,float e,out float t,out int s,out int c)\n{\n  bool h=false;\n \n  // Start at the origin\n  t=0.0;\n  c=0;\n \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    Val val=object(p);\n    float v=val.v;\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return h;\n}\n\n// Lighting -------------------------------------------------------------------------------\n\n// Background color\n// ray : Ray\nvec3 background(Ray ray)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),ray.d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  float t;\n  int s;\n  int c;\n  bool hit=SphereTrace(Ray(p+Epsilon*n,l),100.,t,s,c);\n  if(!hit)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n//   p : Point\n//   n : Normal at point\n// eye : Eye direction\nvec3 Shade(vec3 p,vec3 n,Ray eye)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n \n  // Ambient color\n  vec3 ambient=.25+.25*background(Ray(p,n));\n \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n \n  // Specular\n  vec3 r=reflect(eye.d,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n,int m)\n{\n  float t=float(n)/(float(m));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{  \n  // Convert pixel coordinates\n    vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n \n  // Trace ray\n \n  // Hit and number of steps\n  float t=0.0;\n  int s=0;\n  int c;\n  bool hit=SphereTrace(ray,100.,t,s,c);\n \n  // Shade background\n  vec3 rgb=background(ray);\n \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray);\n  }\n \n  // Uncomment this line to shade image with false colors representing the number of steps\n    //rgb=ShadeSteps(s,Steps);\n \n   // Uncomment this line to shade cost\n  //rgb=ShadeSteps(c,500);\n  color=vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"}]}