{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by Javier Barandiaran Martirena 2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat noise( in vec2 x ){return texture(iChannel0, x).x;}\n\nfloat fbm( vec2 p )\n{\n    float f = 0.50000*noise( p ); p = p*2.04;\n    f += 0.25000*noise( p ); p = p*2.02;\n    f += 0.12500*noise( p ); p = p*2.03;\n    f += 0.06250*noise( p ); p = p*2.05;\n    f += 0.03125*noise( p );\n\n    return f/0.96875;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t\n    vec2 distv = fragCoord.xy - 0.5 * iResolution.xy;\n    float dist = sqrt( dot( distv, distv ) );\n\n    //remap coordinates between (-1,1)\n    vec2 p = -1.0 + 2.0 * uv; \n    p.y *= iResolution.y / iResolution.x; //remove aspect ratio    \n    \n    //polar coordinates\n    float r = sqrt( dot( p, p ) );\n    float a = atan( p.y, p.x );\n    //polar coordinates with 90 degrees rotation\n    vec2 p2 = vec2( p.x*cos( 1.57 ) - p.y *sin( 1.57 ), p.y * cos( 1.57 ) + p.x * sin( 1.57 ) );    \n    float a2 = atan( p2.y, p2.x );\n\n    \n    float irisRadius = iResolution.y*0.45;\n    float irisGrad = iResolution.y*0.04;\n    float pupilRadius = iResolution.y*0.15;\n    float pupilGrad = iResolution.y*0.03;    \n    float scleraRadius = iResolution.y*0.85;\n    float scleraGrad = iResolution.y*0.1;\n    \n    // Calculate average frequency of the music\n    float fftAvg = 0.0;\n    float x = 0.0;\n    for ( int i = 0; i < 10; ++ i)\n    {\n        float fft  = texture( iChannel1, vec2(x,0.25) ).x;\n        x+=0.1;       \n        fftAvg += fft;                \n    }\t\n    float mul = 0.8+fftAvg * 0.15;\n    \n\t// Modify pupil radius with the music\n    pupilRadius *= mul;\n    pupilGrad *= mul;    \n    \n    const vec3 irisColor = vec3(0.7,0.85,0.99);\n    const vec3 irisColor2 = vec3(0.4,0.2,0.2);\n    const vec3 irisColor3 = vec3(0.7,0.99,0.85);\n    const vec3 irisColor4 = vec3(0.9,0.99,0.5);\n    const vec3 scleraColor = vec3(0.98,0.95,0.98);\n    \n    float factor =  smoothstep( irisRadius*1.1, pupilRadius, dist );\n    factor *= factor;\n    float animIris = 1.0/mul;    \n    //The internal radius of the iris should contract and dilate with the pupil\n    //but the external radius remains fixed\n    float f2 = fbm( vec2( (1.0-factor) * 0.5*r + factor*animIris*0.4*r, 0.2*a2) );\n    float f3 = fbm( vec2( (1.0-factor) * 0.4*r + factor*animIris*0.2*r, 0.2*a2) );\n    float f4 = fbm( vec2( (1.0-factor) * 0.2*r + factor*animIris*0.1*r,0.5+ 0.1*a2 ) );\n    float f5 = fbm( vec2( (1.0-factor) * 0.4*r + factor*animIris*0.4*r, 0.5*a2 ) );\n              \n    vec3 col = mix( irisColor, vec3(0.1), f2 ); //blue\n    vec3 col2 = mix( irisColor3, vec3(0.2), f2 ); //green\n    vec3 col3 = mix( irisColor4, vec3(0.1), f2 ); //green\n    //green in the center around the pupil\n    col=mix( col, col2, smoothstep( 3.0*pupilRadius, 0.0, dist ) );\n    //green spots\n    col=mix( col, col2,smoothstep( 0.4, 0.6, ( f3 ) ) );\n    //green spots\n    col=mix( col, col3, 0.4*smoothstep( 0.4, 0.6, f4 ) );\n    //white lines\n    col=mix( col, vec3(1.0), 0.4*smoothstep( 0.3, 1.0, f5 ) );\n     \n    //darken the external perimeter of the iris\n    col *= clamp( 0.6+smoothstep( irisRadius, 0.0, dist ), 0.0, 1.0 );\n\n    //iris circle\n    float f = smoothstep(irisRadius-irisGrad,irisRadius, dist );\n    //sclera\n    //red veins\n    float f6 = smoothstep(0.49, 1.0, fbm( vec2( 0.5*r, a+fbm(0.07*p) ) ) );    \n    vec3 scleraColor2 = mix( scleraColor, vec3(1.0,0.0,0.0), 0.3*f6 );\n    //mix sclera and iris\n    col = mix( col, scleraColor2, f );\n\n    //eyeball\n    //darken the external radius of the eyeball\n    f = smoothstep(irisRadius,scleraRadius, dist );\n    col = mix( col, 0.5*scleraColor, 0.4*f ); \n    //red corners\n    f = smoothstep(scleraRadius-scleraGrad,scleraRadius, dist );    \n    col = mix( col, vec3(0.8,0.0,0.0), 0.3*f ); \n\n    //pupil black circle\n    f = 1.0 - smoothstep( pupilRadius- pupilGrad, pupilRadius, dist );\n    col = mix( col, vec3(0.0), f );\n    \n    //Corneal reflections\n    col += 0.4*smoothstep( 0.05, 0.0, length( p - vec2( 0.1, 0.1 ) ) );\n    col += smoothstep( 0.3, 0.0, length( p - vec2( 0.2, 0.2 ) ) );\n    col += 0.4*smoothstep( 0.2, 0.0, length( p - vec2( -0.2, -0.2 ) ) );\n        \n    //Eyelid\n   \tvec3 eyelidShadow = vec3( smoothstep( 0.0, 0.17, -0.4 - p.y + 0.4*p.x * p.x ) +\n                smoothstep( 0.0, 0.17, -0.12 + p.y + 0.2*p.x * p.x ) );    \n    vec3 eyelid = vec3( smoothstep( 0.0, 0.015, -0.5 - p.y + 0.4*p.x * p.x ) +\n                smoothstep( 0.0, 0.015, -0.3 + p.y + 0.3*p.x * p.x ) );\n\tcol = mix( col, vec3( 0.0, 0.0, 0.0 ), 0.7*eyelidShadow );\n    col = mix( col, vec3( 0.79, 0.69, 0.69 ), eyelid );\n\t\n    //darken the top of the image\n    col *= 0.5 + 0.5 * pow(1.0-uv.y,0.4);\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dSXDR","date":"1411507642","viewed":434,"name":"Another eye","username":"jaba","description":"The pupil is animated with the music.\nInpired by Inigo Quilez tutorial","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","music","eye","iris"],"hasliked":0,"parentid":"","parentname":""}}