{"ver":"0.1","info":{"id":"cs2cRd","date":"1688099140","viewed":163,"name":"兔子 - 次表面散射","username":"amuda","description":"light from behind stanford bunny. \nclick on canvas can rotate.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["subsurfacescattering","stanfordbunny"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.001\n#define BACKGROUND_COLOR vec3(0.1, 0.2, 0.3)\n#define PI 3.1416\n#define LIGHT_LENGTH 10.0\n//#define AA 2.0\n\nfloat bunny(vec3 p)\n{\n    // from https://www.shadertoy.com/view/wtVyWK\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n    //neural networks can be really compact... when they want to be\n    vec4 f00=sin(p.y*vec4(-3.02,1.95,-3.42,-.60)+p.z*vec4(3.08,.85,-2.25,-.24)-p.x*vec4(-.29,1.16,-3.74,2.89)+vec4(-.71,4.50,-3.24,-3.50));\n    vec4 f01=sin(p.y*vec4(-.40,-3.61,3.23,-.14)+p.z*vec4(-.36,3.64,-3.91,2.66)-p.x*vec4(2.90,-.54,-2.75,2.71)+vec4(7.02,-5.41,-1.12,-7.41));\n    vec4 f02=sin(p.y*vec4(-1.77,-1.28,-4.29,-3.20)+p.z*vec4(-3.49,-2.81,-.64,2.79)-p.x*vec4(3.15,2.14,-3.85,1.83)+vec4(-2.07,4.49,5.33,-2.17));\n    vec4 f03=sin(p.y*vec4(-.49,.68,3.05,.42)+p.z*vec4(-2.87,.78,3.78,-3.41)-p.x*vec4(-2.65,.33,.07,-.64)+vec4(-3.24,-5.90,1.14,-4.71));\n    vec4 f10=sin(mat4(-.34,.06,-.59,-.76,.10,-.19,-.12,.44,.64,-.02,-.26,.15,-.16,.21,.91,.15)*f00+\n        mat4(.01,.54,-.77,.11,.06,-.14,.43,.51,-.18,.08,.39,.20,.33,-.49,-.10,.19)*f01+\n        mat4(.27,.22,.43,.53,.18,-.17,.23,-.64,-.14,.02,-.10,.16,-.13,-.06,-.04,-.36)*f02+\n        mat4(-.13,.29,-.29,.08,1.13,.02,-.83,.32,-.32,.04,-.31,-.16,.14,-.03,-.20,.39)*f03+\n        vec4(.73,-4.28,-1.56,-1.80))/1.0+f00;\n    vec4 f11=sin(mat4(-1.11,.55,-.12,-1.00,.16,.15,-.30,.31,-.01,.01,.31,-.42,-.29,.38,-.04,.71)*f00+\n        mat4(.96,-.02,.86,.52,-.14,.60,.44,.43,.02,-.15,-.49,-.05,-.06,-.25,-.03,-.22)*f01+\n        mat4(.52,.44,-.05,-.11,-.56,-.10,-.61,-.40,-.04,.55,.32,-.07,-.02,.28,.26,-.49)*f02+\n        mat4(.02,-.32,.06,-.17,-.59,.00,-.24,.60,-.06,.13,-.21,-.27,-.12,-.14,.58,-.55)*f03+\n        vec4(-2.24,-3.48,-.80,1.41))/1.0+f01;\n    vec4 f12=sin(mat4(.44,-.06,-.79,-.46,.05,-.60,.30,.36,.35,.12,.02,.12,.40,-.26,.63,-.21)*f00+\n        mat4(-.48,.43,-.73,-.40,.11,-.01,.71,.05,-.25,.25,-.28,-.20,.32,-.02,-.84,.16)*f01+\n        mat4(.39,-.07,.90,.36,-.38,-.27,-1.86,-.39,.48,-.20,-.05,.10,-.00,-.21,.29,.63)*f02+\n        mat4(.46,-.32,.06,.09,.72,-.47,.81,.78,.90,.02,-.21,.08,-.16,.22,.32,-.13)*f03+\n        vec4(3.38,1.20,.84,1.41))/1.0+f02;\n    vec4 f13=sin(mat4(-.41,-.24,-.71,-.25,-.24,-.75,-.09,.02,-.27,-.42,.02,.03,-.01,.51,-.12,-1.24)*f00+\n        mat4(.64,.31,-1.36,.61,-.34,.11,.14,.79,.22,-.16,-.29,-.70,.02,-.37,.49,.39)*f01+\n        mat4(.79,.47,.54,-.47,-1.13,-.35,-1.03,-.22,-.67,-.26,.10,.21,-.07,-.73,-.11,.72)*f02+\n        mat4(.43,-.23,.13,.09,1.38,-.63,1.57,-.20,.39,-.14,.42,.13,-.57,-.08,-.21,.21)*f03+\n        vec4(-.34,-3.28,.43,-.52))/1.0+f03;\n    f00=sin(mat4(-.72,.23,-.89,.52,.38,.19,-.16,-.88,.26,-.37,.09,.63,.29,-.72,.30,-.95)*f10+\n        mat4(-.22,-.51,-.42,-.73,-.32,.00,-1.03,1.17,-.20,-.03,-.13,-.16,-.41,.09,.36,-.84)*f11+\n        mat4(-.21,.01,.33,.47,.05,.20,-.44,-1.04,.13,.12,-.13,.31,.01,-.34,.41,-.34)*f12+\n        mat4(-.13,-.06,-.39,-.22,.48,.25,.24,-.97,-.34,.14,.42,-.00,-.44,.05,.09,-.95)*f13+\n        vec4(.48,.87,-.87,-2.06))/1.4+f10;\n    f01=sin(mat4(-.27,.29,-.21,.15,.34,-.23,.85,-.09,-1.15,-.24,-.05,-.25,-.12,-.73,-.17,-.37)*f10+\n        mat4(-1.11,.35,-.93,-.06,-.79,-.03,-.46,-.37,.60,-.37,-.14,.45,-.03,-.21,.02,.59)*f11+\n        mat4(-.92,-.17,-.58,-.18,.58,.60,.83,-1.04,-.80,-.16,.23,-.11,.08,.16,.76,.61)*f12+\n        mat4(.29,.45,.30,.39,-.91,.66,-.35,-.35,.21,.16,-.54,-.63,1.10,-.38,.20,.15)*f13+\n        vec4(-1.72,-.14,1.92,2.08))/1.4+f11;\n    f02=sin(mat4(1.00,.66,1.30,-.51,.88,.25,-.67,.03,-.68,-.08,-.12,-.14,.46,1.15,.38,-.10)*f10+\n        mat4(.51,-.57,.41,-.09,.68,-.50,-.04,-1.01,.20,.44,-.60,.46,-.09,-.37,-1.30,.04)*f11+\n        mat4(.14,.29,-.45,-.06,-.65,.33,-.37,-.95,.71,-.07,1.00,-.60,-1.68,-.20,-.00,-.70)*f12+\n        mat4(-.31,.69,.56,.13,.95,.36,.56,.59,-.63,.52,-.30,.17,1.23,.72,.95,.75)*f13+\n        vec4(-.90,-3.26,-.44,-3.11))/1.4+f12;\n    f03=sin(mat4(.51,-.98,-.28,.16,-.22,-.17,-1.03,.22,.70,-.15,.12,.43,.78,.67,-.85,-.25)*f10+\n        mat4(.81,.60,-.89,.61,-1.03,-.33,.60,-.11,-.06,.01,-.02,-.44,.73,.69,1.02,.62)*f11+\n        mat4(-.10,.52,.80,-.65,.40,-.75,.47,1.56,.03,.05,.08,.31,-.03,.22,-1.63,.07)*f12+\n        mat4(-.18,-.07,-1.22,.48,-.01,.56,.07,.15,.24,.25,-.09,-.54,.23,-.08,.20,.36)*f13+\n        vec4(-1.11,-4.28,1.02,-.23))/1.4+f13;\n    return dot(f00,vec4(.09,.12,-.07,-.03))+dot(f01,vec4(-.04,.07,-.08,.05))+\n        dot(f02,vec4(-.01,.06,-.02,.07))+dot(f03,vec4(-.05,.07,.03,.04))-0.16;\n}\n\n\nvec2 map(vec3 p)\n{\n    return vec2(bunny(p.xzy), 1.0);\n}\n\nvec2 rayMarching(vec3 dir, vec3 o)\n{\n    float t = 0.0;\n    while(t < LIGHT_LENGTH)\n    {\n        vec3 p = o + dir * t;\n        vec2 r = map(p);\n        if(r.x < EPSILON)\n        {\n            return vec2(t, r.y);\n        }\n        t += r.x * 0.7;\n    }\n\n    return vec2(-1.0, -1.0);\n}\n\nvec2 inGlassRayMarching(vec3 dir, vec3 o)\n{\n    float t = 0.0;\n    int i = 0;\n    while(t < LIGHT_LENGTH && i < 200)\n    {\n        ++i;\n        vec3 p = o + dir * t;\n        vec2 r = map(p);\n        if(r.x > EPSILON)\n        {\n            return vec2(t, r.y);\n        }\n        t += (-r.x) * clamp(2.0 / (-r.x + 0.1), 0.1, 4.0);\n    }\n\n    return vec2(t, -1.0);\n}\n\nvec3 calcNormal(in vec3 p) // for function f(p)\n{\n    vec3 e = vec3(EPSILON, 0.0, 0.0);\n    vec3 n;\n    n.x = map(p + e.xyy).x - map(p - e.xyy).x;\n    n.y = map(p + e.yxy).x - map(p - e.yxy).x;\n    n.z = map(p + e.yyx).x - map(p - e.yyx).x;\n    return normalize(n);\n}\n\nvec3 Shade(float matIndex, vec3 pos, vec3 eyeDir)\n{\n    vec3 n = calcNormal(pos);\n    vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n\n    vec3 ambientColor = vec3(0.32f, 0.29f, 0.21f);\n\n    vec3 diffuseColor = vec3(164.0/255.0, 116.0/255.0, 76.0/255.0);\n    float diffuseRatio = clamp(dot(lightDir, n), 0.0, 1.0);\n\n    vec3 specularColor = vec3(1.0, 1.0, 1.0);\n    vec3 h = normalize(lightDir + eyeDir);\n    float specularRatio = pow(clamp(dot(n, h), 0.0, 1.0), 4.0);\n\n    // shadow \n    vec2 r = rayMarching(lightDir, pos + n * EPSILON);\n    float shadowIndex = smoothstep(0.05, -0.05, r.x);\n\n\n    vec3 color = ambientColor;\n    color += (diffuseColor * diffuseRatio * 0.7 + specularColor * specularRatio * 0.2) * shadowIndex;\n\n    vec2 inraymarchingr = inGlassRayMarching(eyeDir, pos - n * 0.1);\n    float sss = clamp(dot(-(lightDir + 0.1 * n), eyeDir), 0.0, 1.0) * exp(- (2.0 * inraymarchingr.x));\n    color += vec3(0.93f, 0.26f, 0.07f) * vec3(sss);\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float ratio = 1.0 / min(iResolution.x, iResolution.y);\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) * ratio;\n\n    float ang = 0.5 * PI * iTime;\n    if(iMouse.z > 0.0) ang = iMouse.x*0.01;\n    vec3 cameraPos = 2.0 * vec3(sin(ang), 0.2, cos(ang));\n    vec3 lookPos = vec3(0.0, 0.0, 0.0);\n    vec3 w = normalize(lookPos - cameraPos);\n    vec3 u = normalize(-cross(vec3(0.0, 1.0, 0.0), w));\n    vec3 v = normalize(-cross(w, u));\n\n    vec3 color = vec3(0.0, 0.0, 0.0);\n#ifdef AA\n    for(float x = 0.0; x < AA; x++)\n    {\n        for(float y = 0.0; y < AA; y++)\n        {\n            float a = uv.x + ratio * float(x) / AA;\n            float b = uv.y + ratio * float(y) / AA;\n            vec3 rayDir = normalize(u * a + v * b + w * 1.0);\n\n            vec2 r = rayMarching(rayDir, cameraPos);\n\n            if (r.y > 0.0)\n            {\n                vec3 pos = cameraPos + r.x * rayDir;\n                color += Shade(r.y, pos, -rayDir) * 1.0 / (AA * AA);\n            }\n            else\n            {\n                color = BACKGROUND_COLOR;\n            }\n        }\n    }\n#else\n    vec3 rayDir = normalize(u * uv.x + v * uv.y + w * 1.0);\n\n    vec2 r = rayMarching(rayDir, cameraPos);\n    if (r.y > 0.0)\n    {\n        vec3 pos = cameraPos + r.x * rayDir;\n        color = Shade(r.y, pos, -rayDir);\n    }\n    else\n    {\n        color = BACKGROUND_COLOR;\n    }\n#endif\n\n    color = pow(color, vec3(1.0 / 2.2));\n    \n    vec2 q = fragCoord / iResolution.xy;\n    color *= 0.4 + 0.6 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.4);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}