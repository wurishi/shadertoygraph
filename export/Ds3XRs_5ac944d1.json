{"ver":"0.1","info":{"id":"Ds3XRs","date":"1680227759","viewed":94,"name":"Smol Dithering Test","username":"RosieSapphire","description":"Just a fun little thing I did to practice my understanding of Bayer 4x4 dithering. Which is an effect I really love! ^w^","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BIT_DEPTH (8.0 - 1.0)\n\nconst int bayer[4 * 4] = int[] (\n    0, 8, 2, 10,\n    12, 4, 14, 6,\n    3, 11, 1, 9,\n    15, 7, 13, 5\n);\n\nfloat get_dithered_value(ivec2 pixel, float spread)\n{\n    int x = pixel.x % 4;\n    int y = pixel.y % 4;\n    float bayer_val = (float(bayer[y * 4 + x]) / 16.0) - 0.5;\n    \n    return bayer_val * spread;\n}\n\nivec2 get_pixel_scaled(in vec2 coord, int scale)\n{\n    return ivec2(vec2(ivec2(coord / vec2(scale))) * vec2(scale));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pixel = get_pixel_scaled(fragCoord, 2);\n    vec2 uv = vec2(pixel) / iResolution.xy;\n    vec4 base = texture(iChannel0, uv) + get_dithered_value(pixel, 0.4);\n    vec4 truncated = vec4(ivec4(base * BIT_DEPTH)) / BIT_DEPTH;\n    \n    fragColor = vec4(truncated);\n}","name":"Image","description":"","type":"image"}]}