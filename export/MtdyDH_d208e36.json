{"ver":"0.1","info":{"id":"MtdyDH","date":"1532508155","viewed":242,"name":"curl noise 测试","username":"Kevin85304","description":"试试curl,最终输出以速度大小为依据。","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noisetest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// 1    x           y            z\n// 2    y+31.416    z-47.853    x+12.793\n// 3    z-233.145   x-113.408   y-185.31\n#define Offset3 vec2(-233.145,-133.31)\n#define Offset2 vec2(31.416,-47.853)\n#define Offset1 vec2(0.,0.)\n\n#define Offset3_x vec2(-233.145,-113.408)\n#define Offset2_x vec2(31.416,12.793)\n#define Offset1_x vec2(0.,0.)\n\n#define Offset3_3 vec3(-233.145,-113.408,-185.31)\n#define Offset2_3 vec3(31.416,-47.853,12.793)\n#define Offset1_3 vec3(0.,0.,0.)\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec2 hash22(vec2 p)\n{\n    p = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)));\n    \n    //return normalize(-1.0 + 2.0 * fract(sin(p)*43758.5453123));\n    return -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));//-1~1\n}\n\nvec3 hash33_sin(vec3 p3)\n{\n    p3 = vec3( dot(p3,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p3,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p3,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p3)*43758.5453123);\n}\n\n\nfloat simplex_noise(vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    \n    vec2 i = floor(p + (p.x + p.y) * K1);\n    \n    vec2 a = p - (i - (i.x + i.y) * K2);\n    vec2 o = (a.x < a.y) ? vec2(0.0, 1.0) : vec2(1.0, 0.0);\n    vec2 b = a - (o - K2);\n    vec2 c = a - (1.0 - 2.0 * K2);\n    \n    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n    vec3 n = h * h * h * h * vec3(dot(a, hash22(i)), dot(b, hash22(i + o)), dot(c, hash22(i + 1.0)));\n    \n    return dot(vec3(70.0, 70.0, 70.0), n);\n}\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nvec3 perlin_noise_1(vec3 p)  // 返回向量插值\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    //vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    vec3 w = 6.*pf*pf*pf*pf*pf-15.*pf*pf*pf*pf+10.*pf*pf*pf;\n    vec3 v_1 = length(pf - vec3(0, 0, 0))*hash33_sin(pi + vec3(0, 0, 0));\n    vec3 v_2 = length(pf - vec3(1, 0, 0))*hash33_sin(pi + vec3(1, 0, 0));\n    vec3 v_3 = length(pf - vec3(0, 0, 1))*hash33_sin(pi + vec3(0, 0, 1));\n    vec3 v_4 = length(pf - vec3(1, 0, 1))*hash33_sin(pi + vec3(1, 0, 1));\n    vec3 v_5 = length(pf - vec3(0, 1, 0))*hash33_sin(pi + vec3(0, 1, 0));\n    vec3 v_6 = length(pf - vec3(1, 1, 0))*hash33_sin(pi + vec3(1, 1, 0));\n    vec3 v_7 = length(pf - vec3(0, 1, 1))*hash33_sin(pi + vec3(0, 1, 1));\n    vec3 v_8 = length(pf - vec3(1, 1, 1))*hash33_sin(pi + vec3(1, 1, 1));\n    \n    //return v_1+v_2+v_3+v_4+v_5+v_6+v_7+v_8;\n    vec3 final = w.y*(w.z*(w.x*v_1+(1.-w.x)*v_2)+(1.-w.z)*(w.x*v_3+(1.-w.x)*v_4))+(1.-w.y)*(w.z*(w.x*v_5+(1.-w.x)*v_6)+(1.-w.z)*(w.x*v_7+(1.-w.x)*v_8));\n    return final;\n      \n}\n\nfloat noise(vec2 p)\n{\n    return simplex_noise(p);\n}\nfloat noise(vec3 p)\n{\n    return simplex_noise(p);\n}\n\nvec3 noise_v(vec3 p)\n{\n    return hash33(p);\n}\n\nfloat noise_sum(vec2 p)\n{\n    float f = 0.0;\n    p = p * 4.0;\n    f += 1.0000 * noise(p); p = 2.0 * p;\n    f += 0.5000 * noise(p); p = 2.0 * p;\n\tf += 0.2500 * noise(p); p = 2.0 * p;\n\tf += 0.1250 * noise(p); p = 2.0 * p;\n\tf += 0.0625 * noise(p); p = 2.0 * p;\n    \n    return f;\n}\n\nfloat noise_sum(vec3 p)\n{\n    float f = 0.0;\n    p = p * 4.0;\n    f += 1.0000 * noise(p); p = 2.0 * p;\n    f += 0.5000 * noise(p); p = 2.0 * p;\n\tf += 0.2500 * noise(p); p = 2.0 * p;\n\tf += 0.1250 * noise(p); p = 2.0 * p;\n\tf += 0.0625 * noise(p); p = 2.0 * p;\n    \n    return f;\n}\n\n\nvec3 noise_sum_v(vec3 p)\n{\n    vec3 f = vec3(0.0);\n    p = p * 4.0;\n    f += 1.0000 * noise_v(p); p = 2.0 * p;\n    f += 0.5000 * noise_v(p); p = 2.0 * p;\n\tf += 0.2500 * noise_v(p); p = 2.0 * p;\n\tf += 0.1250 * noise_v(p); p = 2.0 * p;\n\tf += 0.0625 * noise_v(p); p = 2.0 * p;\n    \n    return f;\n}\n\n/*vec3 potential_sum(float f_1,float f_2,float f_3)\n{\n    return vec3(f_1,f_2,f_3);\n}*/\n\nfloat calc_partialD(vec2 uv,vec2 offset,vec2 delta)\n{\n    //float f_1,f_2;\n    float f_1 = noise_sum(uv+offset+delta);\n    float f_2 = noise_sum(uv+offset-delta);\n    return (f_1-f_2)/(2.*length(delta));\n}\n\nfloat calc_partialD(vec3 uv,vec3 offset,vec3 delta)\n{\n    //float f_1,f_2;\n    float f_1 = noise_sum(uv+offset+delta);\n    float f_2 = noise_sum(uv+offset-delta);\n    return (f_1-f_2)/(2.*length(delta));\n}\n\nfloat calc_partialD_v(vec3 uv,vec3 delta,float a)\n{\n    vec3 potential_1 = noise_sum_v(uv+delta);\n    vec3 potential_2 = noise_sum_v(uv-delta);\n    vec3 D_poten = potential_1-potential_2;\n    \n    //return length((D_poten*delta)/(2.*length(delta)*length(delta)));\n    if(a == 1.)\n        return (D_poten/(2.*length(delta))).x;\n    else if(a==2.)\n        return (D_poten/(2.*length(delta))).y;\n    else if(a==3.)\n        return (D_poten/(2.*length(delta))).z;\n            \n     \n}\n\n\nvec3 calc_velocity(vec2 uv)  \n{\n    float y_3 = calc_partialD(vec2(uv.y,uv.x),Offset3,vec2(0.,0.0001));\n    float z_2 = calc_partialD(uv,Offset2,vec2(0.,0.0001));\n    float z_1 = calc_partialD(uv,Offset1,vec2(0.,0.0001));\n    \n    float x_3 = calc_partialD(vec2(uv.y,uv.x),Offset3,vec2(0.0001,0.));\n    float x_2 = calc_partialD(uv,Offset2,vec2(0.0001,0.));\n    float y_1 = calc_partialD(uv,Offset1,vec2(0.0001,0.));\n    \n    return vec3(y_3-z_2,z_1-x_3,x_2-y_1);\n}\n\nvec3 calc_velocity(vec3 p)\n{\n    // 1    x           y            z\n    // 2    y+31.416    z-47.853    x+12.793\n    // 3    z-233.145   x-113.408   y-185.31\n    float y_3 = calc_partialD(vec2(p.z,p.x),Offset3_x,vec2(0.,0.0001));\n    float z_2 = calc_partialD(vec2(p.y,p.x),Offset2_x,vec2(0.,0.0001));\n    float z_1 = calc_partialD(vec2(p.y,p.z),Offset1_x,vec2(0.,0.0001));\n    \n    float x_3 = calc_partialD(vec2(p.z,p.x),Offset3_x,vec2(0.0001,0.));\n    float x_2 = calc_partialD(vec2(p.y,p.x),Offset2_x,vec2(0.0001,0.));\n    float y_1 = calc_partialD(vec2(p.y,p.z),Offset1_x,vec2(0.0001,0.));\n    \n    return vec3(y_3-z_2,z_1-x_3,x_2-y_1);\n}\nvec3 calc_velocity_2(vec3 p)\n{\n   //vec3 potential = noise_sum(p);\n   float y_3 = calc_partialD_v(p,vec3(0.,0.0001,0.),3.);\n   float z_2 = calc_partialD_v(p,vec3(0.,0.,0.0001),2.);\n   float z_1 = calc_partialD_v(p,vec3(0.,0.,0.0001),1.);\n    \n    float x_3 = calc_partialD_v(p,vec3(0.0001,0.,0.),3.);\n    float x_2 = calc_partialD_v(p,vec3(0.0001,0.,0.),2.);\n    float y_1 = calc_partialD_v(p,vec3(0.,0.0001,0.),1.); \n    \n    return vec3(y_3-z_2,z_1-x_3,x_2-y_1);\n}\nvec3 calc_velocity_3(vec3 p)\n{\n    // 1    x           y            z\n    // 2    y+31.416    z-47.853    x+12.793\n    // 3    z-233.145   x-113.408   y-185.31\n    float y_3 = calc_partialD(vec3(p.z,p.x,p.y),Offset3_3,vec3(0.,0.0001,0.));\n    float z_2 = calc_partialD(vec3(p.y,p.x,p.z),Offset2_3,vec3(0.,0.,0.0001));\n    float z_1 = calc_partialD(vec3(p.y,p.z,p.x),Offset1_3,vec3(0.,0.,0.0001));\n    \n    float x_3 = calc_partialD(vec3(p.z,p.x,p.y),Offset3_3,vec3(0.0001,0.,0.));\n    float x_2 = calc_partialD(vec3(p.y,p.x,p.z),Offset2_3,vec3(0.0001,0.,0.));\n    float y_1 = calc_partialD(vec3(p.y,p.z,p.x),Offset1_3,vec3(0.,0.0001,0.));\n    \n    return vec3(y_3-z_2,z_1-x_3,x_2-y_1);\n}\n\n\nvec3 draw_cloud(float f)\n{\n    f = f * 0.5 + 0.5;\n    return mix(\tvec3(8.0/255.0, 65.0/255.0, 82.0/255.0),\n              \tvec3(178.0/255.0, 161.0/255.0, 205.0/255.0),\n               \tf*f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 p = fragCoord.xy / iResolution.xy;\n    vec2 uv = p * vec2(iResolution.x/iResolution.y, 1.0);\n     float f = 0.0;\n    vec3 col = vec3(0.0, 0.0, 0.0);\n\n     //float f_1 = noise_sum(uv);                    //y,z\n   // float f_2 = noise_sum(vec2(uv.x+31.416,uv.y-47.853));        //x,z\n   // float f_3 =noise_sum(vec2(uv.y-233.145,uv.x-185.31));                //x,y\n     //col = vec3(f_1,f_2,f_3);\n    \n    //vec3 v = calc_velocity((uv+vec2(iTime/10.))/5.);\n   //vec3 v =calc_velocity(vec3(uv.x,uv.y,iTime/100.)/5.);\n    vec3 v =calc_velocity_3(vec3(uv.x,uv.y,iTime/200.));\n    //vec3 v = calc_velocity_2(vec3(uv.x,uv.y,iTime/200000.))/200.;  \n    \n    col =vec3(length(v)/64.);\n    //col =vec3(length(v)*length(v)/64./64.);\n    // f = f * 0.5 + 0.5;\n    // Output to screen\n    \n    //col = hash33_sin(vec3(uv.x,uv.y,iTime));\n    //col = noise_sum(vec3(uv.x,uv.y,iTime));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}