{"ver":"0.1","info":{"id":"Dl3BWM","date":"1705105349","viewed":162,"name":"Colabsing Tunnel","username":"MaggiMeister3000","description":"Creates the illusion of a moving tunnel that collapses at one point and then reappears. The center also looks cool, but not because of the shader code (it just makes circles), but rather because of the diplaying code of your device","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["circles","tunnel","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 palette( float t ){\n    vec3 a = vec3(1.288, 0.348, 0.108);\n    vec3 b = vec3(0.500, 0.500, 0.500);\n    vec3 c = vec3(1.000, 1.000, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n\n    return a + b*cos( 6.28318*(c*t+d));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord *2.0 - iResolution.xy) / iResolution.xy;\n    vec3 fcol = vec3(0.0);\n    vec2 uv0 = uv;\n    \n    vec3 col = palette(length(uv0)+ +iTime*0.4);\n    \n    uv.x *= iResolution.x/iResolution.y;\n    \n    //for (float i = 0.0; i< 3.0; i++){\n    float d = length(uv);\n    //float c = 1.0;\n\n\n    d = 10.0*sin(0.1*iTime)/d;\n\n    d = sin(8.0*d+iTime*0.8)*1.5*sin(4.*iTime+.8*length(d));\n    d = smoothstep(0.0,0.9,d);\n    fcol += col*d;\n    \n    \n    \n    fragColor = vec4(fcol,1.0);\n       \n}\n\n\n\n","name":"Image","description":"","type":"image"}]}