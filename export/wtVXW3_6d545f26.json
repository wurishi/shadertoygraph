{"ver":"0.1","info":{"id":"wtVXW3","date":"1583762906","viewed":139,"name":"Simplest raymarcher","username":"NoxWings","description":"step0","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["step0"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FAR_PLANE = 20.0;\nconst float SURF_HIT = 0.01;\n\nfloat sphere(vec3 p, float radius) { \n    return length(p) - radius;\n}\n\nfloat plane(vec3 p, float height) {\n    return p.y - height;\n}\n\nfloat map(vec3 p) {\n    float ball = sphere(p, 1.0);\n    float floorPlane = plane(p, -1.0);\n    return min(ball, floorPlane);\n}\n\nvec3 mapNormal(vec3 p) {\n    vec2 e = vec2(SURF_HIT, 0);\n    float d = map(p);\n    \n    return normalize(vec3(\n        d - map(p - e.xyy),\n        d - map(p - e.yxy),\n        d - map(p - e.yyx)\n    ));\n}\n\nfloat trace(vec3 ro, vec3 rd, int maxIter, float maxD) {\n    float d = 0.0;\n    for (int i = 0; i < maxIter && d <= maxD; i++) {\n        vec3 p = ro + rd * d;\n        float s = map(p);\n        d += s;\n        if (s < SURF_HIT) break;\n    }\n    return d;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    float d = trace(ro, rd, 128, FAR_PLANE);\n\n    if (d >= FAR_PLANE) { return vec3(0); }\n    \n    vec3 p = ro + rd*d;\n    vec3 n = mapNormal(p);\n    vec3 l = normalize(vec3(1));\n    \n    float lambert = max(0.0, dot(l, n));\n    \n    return vec3(lambert);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 fakeScreen = fragCoord / iResolution.xy * 2.0 - 1.0;\n    fakeScreen.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0,0,3);\n    vec3 rd = normalize(vec3(fakeScreen, -1.73));\n    \n    vec3 col = render(ro, rd);\n    \n    fragColor = vec4(col, 0.0);\n}","name":"Image","description":"","type":"image"}]}