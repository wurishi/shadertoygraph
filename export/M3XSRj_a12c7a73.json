{"ver":"0.1","info":{"id":"M3XSRj","date":"1709709068","viewed":59,"name":"Polar coordinate wheel","username":"origo_","description":"Polar hue wheel","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["wheel","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI (3.14159265346*2.0)\n\nvec3 angle_to_hue(float angle) {\n  angle /= TWOPI;\n  return clamp((abs(fract(angle+vec3(3.0, 2.0, 1.0)/3.0)*6.0-3.0)-1.0), 0.0, 1.0);\n}\n\nvec3 sample_tx(vec2 pos)\n{\n    vec2 o = 2.0/iChannelResolution[0].xy;\n\n    vec3 col = texture(iChannel0, pos).rgb * 2.0;\n    col += texture(iChannel0, pos + vec2(o.x, 0.0)).rgb;\n    col += texture(iChannel0, pos + vec2(-o.x, 0.0)).rgb;\n    col += texture(iChannel0, pos + vec2(0.0, o.y)).rgb;\n    col += texture(iChannel0, pos + vec2(0.0, -o.y)).rgb;\n\n    return col;\n}\n\nmat2 rot(float a) {\n float c = cos(a);\n float s = sin(a);\n \n return mat2(c,-s,s,c);\n}\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord -.5*iResolution.xy ) / iResolution.y;\n\n    vec3 p = normalize(vec3(uv.xy, 0.1))/2.0;\n    \n    float a = atan(p.x, p.y)*2.0+iTime*8.0;\n    p *= rotateX(-iTime/5.0) * rotateY(-iTime/13.0);\n    p *= rotateZ(-iTime/1.0) * rotateY(-iTime/13.0);\n    vec3 samp = sample_tx(p.xy);\n    \n    float r = sqrt(p.x*p.x + p.y*p.y) * (length(samp)*0.1);\n    //float x = r*r*r*(1.0+sin(iTime))*3.0;\n    float x = pow(r, 1.337);\n    \n    r = fract(x);\n\n    if(x > 1.0) {\n        fragColor = vec4(0.0);\n    } else {\n        float o = sin(iTime/3.0)*r*(r+iTime*3.0)/214.0;\n        fragColor = sqrt(vec4(angle_to_hue(a/2.0+o)*(1.0-x*23.0), 1.0));\n    }\n}","name":"Image","description":"","type":"image"}]}