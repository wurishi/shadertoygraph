{"ver":"0.1","info":{"id":"dtcXzN","date":"1685093875","viewed":100,"name":"Blue dithering","username":"glitchapp","description":"Blue noise dithering shader.\nThis is an experiment created assisted by chatGPT. I'm attempting to create a dithering shader using blue noise texture and quantization to try to create an old retro artistic filter.\n\nFeel free to tweak it and fork it.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uniform float intensity;\nuniform sampler2D tex0; // Input texture\nuniform sampler2D tex1; // Blue noise texture\n\n#define COLOR_PALETTE_SIZE 12\n\nvec3 getColorFromPalette(int index) {\n    if (index == 0) return vec3(0.000, 0.000, 0.000);\n    if (index == 1) return vec3(0.071, 0.071, 0.071);\n    if (index == 2) return vec3(0.143, 0.143, 0.143);\n    if (index == 3) return vec3(0.214, 0.214, 0.214);\n    if (index == 4) return vec3(1.214, 0.214, 0.214);\n    if (index == 5) return vec3(0.214, 1.214, 0.214);\n    if (index == 6) return vec3(0.214, 0.214, 1.214);\n    if (index == 7) return vec3(0.000, 0.000, 0.000);\n    if (index == 8) return vec3(0.071, 0.071, 0.071);\n    if (index == 9) return vec3(0.143, 0.143, 0.143);\n    if (index == 10) return vec3(0.514, 0.214, 0.214);\n    if (index == 11) return vec3(1.214, 0.514, 0.214);\n    if (index == 12) return vec3(0.214, 1.214, 0.514);\n    \n    // Add the remaining 28 color values here\n    return vec3(0.0);\n}\n\nvec3 quantizeColor(vec3 color)\n{\n    // Calculate the index of the closest color in the palette\n    int index = 0;\n    float minDistance = distance(color, getColorFromPalette(0));\n    for (int i = 1; i < COLOR_PALETTE_SIZE; i++)\n    {\n        float distanceToColor = distance(color, getColorFromPalette(i));\n        if (distanceToColor < minDistance)\n        {\n            index = i;\n            minDistance = distanceToColor;\n        }\n    }\n\n    // Return the quantized color from the palette\n    return getColorFromPalette(index);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Get the input texture color\n    vec4 texColor1 = texture(tex0, fragCoord / iResolution.xy);\n\n    // Get the grayscale color value from the input texture\n    float gray = dot(texColor1.rgb, vec3(0.299, 0.587, 0.114));\n\n    // Calculate the dither threshold using the blue noise texture\n    vec2 noiseCoords = fragCoord / iResolution.xy;\n    float noiseValue = texture(tex1, noiseCoords).r;\n    float threshold = noiseValue * intensity;\n\n    // Apply dithering\n    float dithered = (gray + threshold) / (1.0 + intensity);\n\n    // Quantize the color\n    vec3 quantizedColor = quantizeColor(vec3(dithered));\n\n    // Output the final color with alpha from the input texture\n    fragColor = vec4(quantizedColor, texColor1.a);\n}\n","name":"Image","description":"","type":"image"}]}