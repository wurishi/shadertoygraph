{"ver":"0.1","info":{"id":"fdVXzR","date":"1634257667","viewed":143,"name":"dither experiment w/ ball cycles","username":"wnu","description":"dither dithering from https://www.shadertoy.com/view/3ljXWK\n\nmove with mouse","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["dither"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define PI 3.1415926\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec2 camera2D (vec2 uv) {\n    vec2 mouse = iMouse.xy/iResolution.xy*2.-1.;\n    vec3 p = vec3(uv,0);\n    if (iMouse.z > 0.5) {\n        p.yz *= rot(mouse.y*3.1415/2.);\n        p.xz *= rot(mouse.x*3.1415/2.);\n    }\n    return p.xy/(1.+p.z);\n}\n\nvec2 camera2D (vec3 p) {\n    vec2 mouse = iMouse.xy/iResolution.xy*2.-1.;\n    //vec3 p = vec3(uv,0);\n    if (iMouse.z > 0.5) {\n        p.yz *= rot(mouse.y*3.1415/2.);\n        p.xz *= rot(mouse.x*3.1415/2.);\n    }\n    return p.xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    vec2 uv = (fragCoord - .5*R.xy)/R.y;\n    \n    uv *= 5.;\n    //uv.y -= 0.3;\n    \n    \n    //mat4 rota = rotationMatrix(vec3(0.,1.,1.),uv.x);\n    mat4 rota2 = rotationMatrix(vec3(0.,1.,1.),iTime/2.+PI/4.+ uv.x*uv.y); \n    //could make a for loop in the for loop below to make arbitrary amounts of disconnects\n    \n\n    vec3 col = vec3(0.);\n    //vec2 gv = fract(uv)-0.5;\n    int nI = 20;\n    float nF = float(nI);\n    for(int i = 0;i<nI;i++){\n        float seg = float(i)/nF + 1.*random(uv+1.*fract(iTime))/nF;\n        float inc = 2.*PI*seg;\n        float t = iTime*2. + inc;\n        \n        float rotInd = step(0.5,seg);\n        vec3 pos = vec3(sin(t*1.),cos(1.*t),0.);\n        \n        mat4 rota = rotationMatrix(vec3(0.,1.,1.),pos.x*pos.y+cos(inc));\n        mat4 rota3 = rotationMatrix(vec3(1.,0.,0.),1.*-PI/4.);\n        pos = (rota*vec4(pos,1.)).xyz;\n        vec3 pos2 = (rota2*vec4(pos,1.)).xyz;\n        //pos = mix(pos,pos2,rotInd);\n        \n        \n        vec2 p2 = camera2D(pos.yz);\n        vec2 p3 = camera2D(pos.xyz);\n        //float d = length(uv + p2);\n        float d = length(uv + p3);\n        float s = smoothstep(0.,1.,d);\n        //float d = length(uv + pos.yz);\n        //float d = length((uv + pos.yz)/(1.+pos.x));\n        float m = 0.2*pow(d,-1.)/nF;\n        //col += m;\n        float c = mod(floor(seg*nF),2.)/3.;\n        vec3 addCol = hsl2rgb(vec3(c+0.2 + iTime/10.,0.3+1.*(cos(iTime/2.+PI/2.)+1.)/2.*0.8,m));\n        col = max(addCol,col)+ addCol*1.;\n    }\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}