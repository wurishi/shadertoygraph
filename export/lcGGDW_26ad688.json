{"ver":"0.1","info":{"id":"lcGGDW","date":"1712763197","viewed":218,"name":"AF - Truchet + Kaleidoscope FTW","username":"tristanC","description":"With more parameters to create:\n- https://youtu.be/kGLkgFSzlVE\n- https://youtu.be/vt6sazBYmMU","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope","truchet","animationfractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Forked from https://www.shadertoy.com/view/7lKSWW\n// Created by mrange in 2021-12-28\n// CC0: Truchet + Kaleidoscope FTW\n//  Bit of experimenting with kaleidoscopes and truchet turned out nice\n//  Quite similar to an earlier shader I did but I utilized a different truchet pattern this time\n\n// The shader has been adapted^Wbutchered to support new parameters\n// to be controlled from midi/audio inputs with animation-fractal.\n\n// The new inputs are:\n// - tXpY is the sum of the midi velocity of the track X's pitch Y%4\n// - icolor/imoveFWD is the sound RMS volume of a track audio stem.\n\n// Tweaks the inputs for shadertoy release\n#ifndef ANIMATION_FRACTAL\n// Simulate the pitch inputs using a smoothed stairs function STEP\n#define STEP1(x) ((x) - sin(x))\n#define STEP(x, offset, amp) (STEP1(STEP1(offset + x * amp)) * .15)\n#define is (iTime * .6)\n#define t1p1 (STEP(is, 1., 1.))\n#define t1p2 (STEP(is, 2., 3.))\n#define t1p3 (STEP(is, 3., 2.))\n#define t1p4 (STEP(is, 4., 4.))\n#define t1p5 (STEP(is, 9., 1.))\n\n#define t2p1 (STEP(is, 5., 1.))\n#define t2p2 (STEP(is, 6., 3.))\n#define t2p3 (STEP(is, 7., 2.))\n#define t2p4 (STEP(is, 8., 4.))\n#define t2p5 (STEP(is, 8., 4.))\n\n#define icolor (sin(iTime * .1))\n#define moveFWD (iTime*.4)\n\n#else\n#define t1f 1\n#define t1p1 (t1f*n1_1)\n#define t1p2 (t1f*n1_2)\n#define t1p3 (-2 + t1f*n1_3)\n#define t1p4 (t1f*n1_4)\n#define t1p5 (t1f*n1_5)\n\n#define t2f .5\n#define t2p1 (t2f*n2_1)\n#define t2p2 (t2f*n2_2)\n#define t2p3 (-2 + t2f*n2_3)\n#define t2p4 (t2f*n2_4)\n#define t2p5 (t2f*n2_5)\n#endif\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define RESOLUTION      iResolution\n#define TIME            (moveFWD * 6.)\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(x)         (0.5+0.5*cos(x))\n\n// License: Unknown, author: Unknown, found: don't remember\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 p) {\n  float a = dot(p, vec2 (127.1, 311.7));\n  return fract(sin (a)*43758.5453123);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/smin\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/index.htm\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, vec3(1.0/2.2));\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat pabs(float a, float k) {\n  return pmax(a, -a, k);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep, float kmod) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - pabs(PI/rep - abs(hpp.y), sm);\n  hpp.y = sin(kmod) + sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\n// The path function\nvec3 offset(float z) {\n  float a = z;\n  vec2 p = -0.075*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.5))));\n  return vec3(p, z);\n}\n\n// The derivate of the path function\n//  Used to generate where we are looking\nvec3 doffset(float z) {\n  float eps = 0.1;\n  return 0.5*(offset(z + eps) - offset(z - eps))/eps;\n}\n\n// The second derivate of the path function\n//  Used to generate tilt\nvec3 ddoffset(float z) {\n  float eps = 0.1;\n  return 0.125*(doffset(z + eps) - doffset(z - eps))/eps;\n}\n\nvec2 cell_df(float r, vec2 np, vec2 mp, vec2 off, float cmod) {\n  const vec2 n0 = normalize(vec2(1.0, 1.0));\n  const vec2 n1 = normalize(vec2(1.0, -1.0));\n\n  np += off;\n  mp -= off;\n\n  float hh = hash(np);\n  float h0 = hh;\n\n  vec2  p0 = mp;\n  // p0 = abs(p0);\n  p0 = abs(p0) + (0.05) * (0.4 + sin(cmod) * 0.4);\n  p0 -= 0.4;\n  float d0 = length(p0);\n  float d1 = abs(d0-r);\n\n  float dot0 = dot(n0, mp);\n  float dot1 = dot(n1, mp);\n\n  float d2 = abs(dot0);\n  float t2 = dot1;\n  d2 = abs(t2) > sqrt(0.5) ? d0 : d2;\n\n  float d3 = abs(dot1);\n  float t3 = dot0;\n  d3 = abs(t3) > sqrt(0.5) ? d0 : d3;\n\n\n  float d = d0;\n  d = min(d, d1);\n  if (h0 > .85)\n  {\n    d = min(d, d2);\n    d = min(d, d3);\n  }\n  else if(h0 > 0.5)\n  {\n    d = min(d, d2);\n  }\n  else if(h0 > 0.15)\n  {\n    d = min(d, d3);\n  }\n\n  return vec2(d, d0-r);\n}\n\nvec2 truchet_df(float r, vec2 p, float cmod) {\n  vec2 np = floor(p+0.5);\n  vec2 mp = fract(p+0.5) - 0.5;\n  return cell_df(r, np, mp, vec2(.0), cmod);\n}\n\n\nvec3 palette( float t ) {\n    t *= 3.;\n    vec3 a = vec3(0.5, 0.5, 0.9);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.1, 0.2, 0.6);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n  float h_ = hash(n);\n  float h0 = fract(1777.0*h_);\n  float h1 = fract(2087.0*h_);\n  float h2 = fract(2687.0*h_);\n  float h3 = fract(3167.0*h_);\n  float h4 = fract(3499.0*h_);\n\n  float l = length(pp - ro);\n\n  vec3 hn;\n  vec2 p = (pp-off*vec3(1.0, 1.0, 0.0)).xy;\n\n  float len = length(p);\n\n  float prot1, prot2;\n  float pmod1, pmod2;\n  float cmod;\n  if (mod(n, 2.) == 0.) { prot1 = t1p1, prot2 = -t1p2, pmod1 = t2p3, pmod2 = t2p4, cmod = t1p5; }\n  else { prot1 = -t2p1, prot2 = t2p2, pmod1 = t1p3, pmod2 = t1p4, cmod = t2p5; }\n\n  float prot, pmod;\n  if (len > .3) { prot = prot2; pmod = pmod2;\n  } else { prot = prot1; pmod = pmod1; }\n  p *= ROT(prot * 1.5);\n\n  // p *= ROT(0.5*(h4 - 0.5)*TIME);\n  float rep = 2.0*round(mix(5.0, 30.0, h2));\n  float sm = 0.05*20.0/rep;\n  float sn = smoothKaleidoscope(p, sm, rep, pmod);\n  p *= ROT(TAU*h0+0.025*TIME);\n  float z = mix(0.2, 0.4, h3);\n  p /= z;\n  p+=0.5+floor(h1*1000.0);\n  float tl = tanh_approx(0.33*l);\n  float r = mix(0.30, 0.45, PCOS(0.1*n + pmod * 2. + prot));\n  vec2 poff = vec2(1. + pmod * .3, prot * .1);\n  vec2 d2 = truchet_df(r, p, cmod);\n\n  // d2.x = d1;\n\n  // d2.x = pmin(d2.x, abs(d1) - 0.01, .05);\n  d2 *= z;\n  float d = d2.x;\n\n  float lw = 0.025*z;\n  d -= lw;\n\n  vec3 bcol = palette(abs(d) * 2. + h_ * 2. + icolor * .2);\n\n  vec3 col = mix(bcol, vec3(0.0), smoothstep(aa, -aa, d));\n  col = mix(col, vec3(0.0), smoothstep(mix(1.0, -0.5, tl), 1.0, sin(PI*100.0*d)));\n  col = mix(col, vec3(0.0), step(d2.y, 0.0));\n  float t = smoothstep(aa, -aa, -d2.y-3.0*lw)*mix(0.5, 1.0, smoothstep(aa, -aa, -d2.y-lw));\n\n  // border between the two rings\n  float ct = 1.0 - smoothstep(0.0, .02, abs(.3-len));\n  col = mix(col, vec3(0.), ct);\n  t -= ct * .1;\n\n  return vec4(col, t);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  float d = pow(max(dot(rd, vec3(0.0, 0.0, 1.0)), 0.0), 20.0);\n  return vec3(d);\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  float rdd = (2.0+1.0*tanh_approx(lp));\n//  float rdd = 2.0;\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  const float planeDist = 1.0-0.25;\n  const int furthest = 6;\n  const int fadeFrom = max(furthest-5, 0);\n\n  const float fadeDist = planeDist*float(furthest - fadeFrom);\n  float nz = floor(ro.z / planeDist);\n\n  vec3 skyCol = skyColor(ro, rd);\n\n\n  vec4 acol = vec4(0.0);\n  const float cutOff = 0.95;\n  bool cutOut = false;\n\n  // Steps from nearest to furthest plane and accumulates the color\n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0.0 && acol.w < cutOff) {\n      vec3 pp = ro + rd*pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.0*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, off, aa, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*float(furthest), planeDist*float(fadeFrom), nz);\n      float fadeOut = smoothstep(0.0, planeDist*0.1, nz);\n      pcol.xyz = mix(skyCol, pcol.xyz, fadeIn + .2);\n      pcol.w *= fadeOut;\n      pcol = clamp(pcol, 0.0, 1.0);\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      break;\n    }\n\n  }\n\n  vec3 col = alphaBlend(skyCol, acol);\n// To debug cutouts due to transparency\n//  col += cutOut ? vec3(1.0, -1.0, 0.0) : vec3(0.0);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float tm  = .127 + TIME*0.25;\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+ddro), ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  vec3 col = color(ww, uu, vv, ro, p);\n\n  return col;\n}\n\n#ifndef ANIMATION_FRACTAL\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n  col *= smoothstep(0.0, 4.0, TIME);\n  col = postProcess(col, q);\n\n  fragColor = vec4(col, 1.0);\n}\n#else\nvoid main() {\n  vec2 q = inUV;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n  col *= smoothstep(0.0, 4.0, TIME + icolor);\n  col = postProcess(col, q);\n\n  oColor = vec4(col, 1.0);\n}\n#endif\n","name":"Image","description":"","type":"image"}]}