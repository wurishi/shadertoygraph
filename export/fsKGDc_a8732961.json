{"ver":"0.1","info":{"id":"fsKGDc","date":"1634233833","viewed":82,"name":"Bug Vision Britney","username":"mwmwmw","description":"A fork of https://www.shadertoy.com/view/WlBXWG but modified so each voronoi cell is a UV space.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","tree"],"hasliked":0,"parentid":"fdKGDc","parentname":"Fork Voronoi tr mwmwmw 467"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CELL_SIZE .1\n#define PI 3.14159\n\n\nvec2 pseudorandPos(vec2 randseed)\n{\n    return abs(cos(fract(randseed * dot(sin(randseed * 242.589), vec2(42.4391588, 3.91711988))) * 294419.4857));\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nmat2 scale2d(float _scale){\n    return mat2(_scale,0.0,\n                0.0,_scale);\n}\n\n//based on : https://www.ronja-tutorials.com/2018/09/29/voronoi-noise.html\nvec2 getCell(vec2 pos)\n{\n    vec2 baseCell = floor(pos);\n    float minDistToCell = 10000.0;\n    vec2 closestCell = vec2(.0);\n    vec2 toClosestCell = vec2(.0);\n    vec2 uv = vec2(0.);\n\n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n  \n        \tvec2 cell = baseCell + vec2(i,j);\n        \tvec2 cellPos = cell + pseudorandPos(cell);\n        \tvec2 toCell = cellPos - pos;\n            \n        \tfloat distToCell = length(toCell);\n            \n            if(distToCell < minDistToCell){\n                minDistToCell = distToCell;\n                closestCell = cell;\n                toClosestCell = toCell;\n                \n                uv = (pos-cellPos);\n                \n                float scale = texture(iChannel2, closestCell/5.).x;\n                float rotation = texture(iChannel2, closestCell*0.1).x*360.;\n                \n                uv *= scale2d(scale);\n                uv *= rotate2d(rotation);\n                \n                uv += 0.5;\n                \n            }\n            \n        }\n    }\n    \n\treturn uv;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    uv /= CELL_SIZE;\n\n    uv = getCell(iTime+uv*(1.2+sin(iTime*0.2))*rotate2d(cos(iTime*0.25)));\n    \n    \n    fragColor = texture(iChannel3, uv);\n\n}","name":"Image","description":"","type":"image"}]}