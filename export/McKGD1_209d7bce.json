{"ver":"0.1","info":{"id":"McKGD1","date":"1712727477","viewed":129,"name":"MehimoNemo Serial Lain Recreatio","username":"MehimoNemo","description":"Stolen code frankensteined together\n\nhttps://www.shadertoy.com/view/DsKSWw\nhttps://www.shadertoy.com/view/ttByzW\n\n\nNot optimized in the slightest, lol\n\n","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["perlin","pixel","dithering","aesthetic"],"hasliked":0,"parentid":"XsX3zB","parentname":"3d simplex noise"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//these two floats set the amplitude(amp) and frequency(frq) of the zoom\nfloat frq = 1.0;\nfloat amp = 2.0;\n\n//this determines where on screen it zooms in on, (.5,.5) is center\nvec2 center = vec2(.5,.5);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv = fragCoord/iResolution.xy;\n\t\n    //creates a shorthand for sin(iTime)\n    float sSin = 3.2;\n    \n    //changes the uv to zoom in on the screen\n\tuv = center + (uv-center)/sSin;\n    \n    vec4 col = texture(iChannel3,uv);\n    \n\t// Output to screen\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* https://www.shadertoy.com/view/XsX3zB\n *\n * The MIT License\n * Copyright Â© 2013 Nikita Miropolskiy\n * \n * ( license has been changed from CCA-NC-SA 3.0 to MIT\n *\n *   but thanks for attributing your source code when deriving from this sample \n *   with a following link: https://www.shadertoy.com/view/XsX3zB )\n *\n * ~\n * ~ if you're looking for procedural noise implementation examples you might \n * ~ also want to look at the following shaders:\n * ~ \n * ~ Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n * ~\n * ~ Noise shaders by iq:\n * ~     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n * ~     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n * ~     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n * ~     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n * ~     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n * ~     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n * ~     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n * ~     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n * ~     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n * ~     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n * ~ \n *\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n\tvec2 p = fragCoord.xy/iResolution.x;\n\tvec3 p3 = vec3(p, iTime*0.025);\n\t\n\tfloat value;\n\t\tvalue = simplex3d_fractal(p3*8.0+8.0);\n\t\n\tvalue = 0.5 + 0.5*value;\n\t\n\tfragColor = vec4(vec3(value), 1.0) ;\n    \n\treturn;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\n    \n    \n\nvec2 Position = vec2(0.0,0.0);\nfloat Radius = 0.13;\n\n\n    \n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int blur = 10;\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    int x = (blur * 2) + 1;\n    int y = x;\n    \n    vec4 total = vec4(0.0, 0.0, 0.0, 0.0);\n    while(x > 0){\n        while(y > 0){\n            total += texture(iChannel0, vec2(fragCoord.x + float(x) - float(blur * 2),\n                                             fragCoord.y + float(y) - float(blur * 2))/iResolution.xy);\n            y = y - 1;\n        }\n        y = (blur * 2) + 1;\n        x = x - 1;\n    }\n    \n    fragColor = total / float(((blur * 2) + 1) * ((blur * 2) + 1));\n    \n    //Without changing colors\n    \n\tvec4 gradientColor = vec4(1.0 - length(Position - uv)-(1.-Radius),0.,0,1.0);\n    if(gradientColor.x < 0.0){\n        fragColor = gradientColor;\n    }\n    else{\n        fragColor = fragColor* gradientColor * 55.;\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n\n    \n    \n\nvec2 Position = vec2(0.0,0.0);\nfloat Radius = 0.;\n\n\n    \n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int blur = 10;\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    int x = (blur * 2) + 1;\n    int y = x;\n    \n    vec4 total = vec4(0.0, 0.0, 0.0, 0.0);\n    while(x > 0){\n        while(y > 0){\n            total += texture(iChannel1, vec2(fragCoord.x + float(x) - float(blur * 2),\n                                             fragCoord.y + float(y) - float(blur * 2))/iResolution.xy);\n            y = y - 1;\n        }\n        y = (blur * 2) + 1;\n        x = x - 1;\n    }\n    \n    fragColor = total / float(((blur * 2) + 1) * ((blur * 2) + 1));\n    \n    //Without changing colors\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define W vec3(0.2126, 0.7152, 0.0722)\n\nconst int dither4[4] = int[](\n 0,  2,\n 3,  1\n);\n\nconst int dither16[16] = int[](\n 0,  8,  2, 10,\n12,  4, 14,  6,\n 3, 11,  1,  9,\n15,  7, 13,  5\n);\n\nconst int dither64[64] = int[](\n 0, 32, 8,  40, 2,  34, 10, 42,\n48, 16, 56, 24, 50, 18, 58, 26,\n12, 44, 4,  36, 14, 46, 6,  38,\n60, 28, 52, 20, 62, 30, 54, 22,\n 3, 35, 11, 43, 1,  33, 9,  41,\n51, 19, 59, 27, 49, 17, 57, 25,\n15, 47, 7,  39, 13, 45, 5,  37,\n63, 31, 55, 23, 61, 29, 53, 21\n); \n\nconst float downsampleSize = 1.0;\n\nfloat GetLuminance(vec4 color)\n{\n    return W.r * color.r + W.g * color.g + W.b * color.b;\n}\n\nfloat Random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec4 GetDitherValue(vec2 coord, int kernelLevel, float lum)\n{\n    kernelLevel = clamp(kernelLevel, 1, 3); // max three maps\n    int kernelSize = int(pow(2.0, 2.0 * float(kernelLevel)));\n    int kernelSqrt = int(sqrt(float(kernelSize)));\n    float weight = 1.0 / float(kernelSize + 1);\n    if (lum < weight)\n        return vec4(0.0);\n    \n    int xMod = int(mod(coord.x, float(kernelSqrt)));\n    int yMod = int(mod(coord.y, float(kernelSqrt)));\n    int ditherIndex = yMod * kernelSqrt + xMod;\n    int ditherValue = kernelSize == 4 ? dither4[ditherIndex] : kernelSize == 16 ? dither16[ditherIndex] : dither64[ditherIndex];\n    // + 1 to shift because 0.0 * weight is already caught as early out above\n    // We have to consider 5 weights for a 2x2, because 3 * weight = 0.75, will never reach 1.0\n    float ditherThresh = float(ditherValue + 1) * weight; // TODO;: optimize by normalizing maps, \n    return lum < ditherThresh ? vec4(0.0, 0.0, 0.0, 1.0) : vec4(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Downsample\n    float x = floor(fragCoord.x / downsampleSize) * downsampleSize;\n    float y = floor(fragCoord.y / downsampleSize) * downsampleSize;\n    vec2 downsampledCoord = vec2(x, y);\n    vec2 uv = (downsampledCoord/iResolution.xy);\n    fragColor = texture(iChannel2, uv);\n    //fragColor = vec4(uv.x, uv.x, uv.x, 1.0);\n    \n    // Greyscale\n    float lum = GetLuminance(fragColor);\n\n    // Dither\n    fragColor = GetDitherValue(fragCoord, 3, lum);\n    \n    fragColor = fragColor * vec4(1.0, 0.5, 0.7, 1.);\n    \n    // Random \n    //vec4 rand = lum > Random(uv) ? vec4(1.0) : vec4(0.0, 0.0, 0.0, 1.0);\n    //fragColor = (fragColor + rand) / 2.0;\n    \n\n}","name":"Buffer D","description":"","type":"buffer"}]}