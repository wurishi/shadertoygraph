{"ver":"0.1","info":{"id":"7sVfzt","date":"1658741929","viewed":142,"name":"Point rendering idea","username":"poofoo","description":"Needs serious optimization and generalization","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["torus","points"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float PI = 3.14159265358979;\n\n    float ratio = iResolution.x/iResolution.y;\n\n    vec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.y;\n    \n    int segments = 128;\n    \n    vec3 torus[128];\n    \n    for(int p = 0; p < segments; p++){\n        \n        float pf = float(p)/4.0;\n        \n        torus[p] = vec3((0.5*sin(1.8*pf)+1.5)*cos(pf),(0.5*sin(1.8*pf)+1.5)*sin(pf),0.5*cos(1.8*pf))+vec3(0.0,0.0,3.0);\n    }\n\n    vec3 rotSpeeds = vec3(0.3,0.8,0.0);\n    vec3 calc = vec3(0.0,0.0,0.0);\n    vec3 rotCenter = vec3(0.0,0.0,3.0);\n\n    for(int i = 0; i < segments; i++){\n\n\n        vec3 bwoo = torus[i] - rotCenter;\n        \n        //how do these work i need to learn linear algebra\n\n        mat3 rotx = mat3(1.0, 0.0,                    0.0,\n                         0.0, cos(rotSpeeds.x*iTime), -sin(rotSpeeds.x*iTime),\n                         0.0, sin(rotSpeeds.x*iTime), cos(rotSpeeds.x*iTime));\n\n        mat3 roty = mat3(cos(rotSpeeds.y*iTime),  0.0, sin(rotSpeeds.y*iTime),\n                         0.0,                     1.0, 0.0,\n                         -sin(rotSpeeds.y*iTime), 0.0, cos(rotSpeeds.y*iTime));\n\n        mat3 rotz = mat3(cos(rotSpeeds.z*iTime), -sin(rotSpeeds.z*iTime),  0.0,\n                         sin(rotSpeeds.z*iTime), cos(rotSpeeds.z*iTime), 0.0,\n                         0.0,                    0.0,                     1.0);\n\n        vec3 bwee = rotx*(roty*(rotz*bwoo)) + rotCenter;\n\n        vec3 norm = -bwee/length(bwee);\n\n        //float xyAtan = -atan(norm.x/norm.y)/PI;\n        float yzAtan = -atan(norm.y/norm.z)/PI;\n        float xzAtan = -atan(norm.x/norm.z)/PI;\n\n        calc += 0.3/length(bwee)/length(uv-vec2(xzAtan,yzAtan))-1.0;\n        //calc += /*vec3(cos(float(i)/PI)+1.0, cos(float(i)/PI+PI/2.0)+1.0, 0.5) * */pow(max(-100.0*length(bwee)*length(uv-vec2(xzAtan,yzAtan))+1.0,0.0),0.1);\n    }\n    \n    // Output to screen\n    fragColor = vec4(calc,1.0);\n}\n","name":"Image","description":"","type":"image"}]}