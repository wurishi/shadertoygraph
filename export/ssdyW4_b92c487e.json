{"ver":"0.1","info":{"id":"ssdyW4","date":"1665598638","viewed":115,"name":"Segment-segment 2D intersection","username":"jaszunio15","description":"Segments intersection algorithm. I used it couple of times when prototyping.\nRay and line is defined by the origin point and a direction.\n\nPosting this in case you find it useful for some reason.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["line","intersection"],"hasliked":0,"parentid":"fdtyzr","parentname":"Line-Line 2D intersection"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DrawPoint(vec2 uv, vec2 coord, float size)\n{\n    float pixelSize = fwidth(uv.x);\n    return smoothstep(size * pixelSize + pixelSize * 0.5, size * pixelSize - pixelSize * 0.5, distance(uv, coord));\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat DrawSegment(vec2 uv, vec2 a, vec2 b, float size)\n{\n    float pixelSize = fwidth(uv.x);\n    return smoothstep(size * pixelSize + pixelSize * 0.5, size * pixelSize - pixelSize * 0.5, sdSegment(uv, a, b));\n}\n\n// a1, a2 - first segment end points; b1, b2 - second segment end points\nbool SegmentIntersection(vec2 a1, vec2 a2, vec2 b1, vec2 b2, out vec2 intersection)\n{\n    vec2 direction1 = (a1 - a2);\n    vec2 direction2 = (b1 - b2);\n    \n    vec2 normal1 = vec2(-direction1.y, direction1.x);\n    \n    float distanceToLine1 = dot(b1 - a1, normal1);\n    float origin2ExtensionDistance = distanceToLine1 / dot(-normal1, direction2);\n    \n    intersection = origin2ExtensionDistance * direction2 + b1;\n    \n    return dot(intersection - a1, intersection - a2) < 0.0 && dot(intersection - b1, intersection - b2) < 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    \n    vec2 a1 = vec2(cos(iTime * 0.5) - 0.5, sin(iTime * 0.4)) * 0.8;\n    vec2 a2 = vec2(sin(iTime * 0.6) + 0.5, sin(iTime * 0.3)) * 0.8;\n    vec2 b1 = vec2(sin(iTime * 0.3), sin(iTime * 0.5)) * 0.8;\n    vec2 b2 = vec2(cos(iTime * 1.0), sin(iTime * 0.6 + 2.0)) * 0.8;\n    \n    float line1 = DrawSegment(uv, a1, a2, 1.0);\n    float line2 = DrawSegment(uv, b1, b2, 1.0);\n    \n    vec2 intersection;\n    if (SegmentIntersection(a1, a2, b1, b2, intersection))\n    {\n        fragColor += vec4(0.0, 1.0, 0.0, 1.0) * (DrawPoint(uv, intersection, 7.0));       \n        fragColor -= vec4(0.0, 1.0, 0.0, 1.0) * (DrawPoint(uv, intersection, 5.0));   \n    }\n    \n    // Output to screen\n    fragColor += vec4(0.5, 1.0, 1.0, 1.0) * (line1 + DrawPoint(uv, a1, 5.0) + DrawPoint(uv, a2, 5.0));\n    fragColor += vec4(1.0, 0.5, 0.5, 1.0) * (line2 + DrawPoint(uv, b1, 5.0) + DrawPoint(uv, b2, 5.0));       \n\n\n}","name":"Image","description":"","type":"image"}]}