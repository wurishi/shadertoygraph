{"ver":"0.1","info":{"id":"lstSRH","date":"1457740829","viewed":355,"name":"The Death Star","username":"VoidChicken","description":"The Death Star. In the preprocessor headers change the TIE_FIGHTER_COUNT value and RESOLUTION value down if its too slow. If you have a powerful computer, you could turn it up, but it will start lagging quickly. Use  the mouse to look around.","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["3d","raymarch","space","starwars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdXGz2","filepath":"https://soundcloud.com/jimnova/imperial-march","previewfilepath":"https://soundcloud.com/jimnova/imperial-march","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//shortened by FabriceNeyret2, myself (VoidChicken), and no one else so far... \n\n\n\n\n//In a galaxy right in front of you....\n\n//    //   ) )  //    / / // | |     //    ) ) //   / /  //   ) ) /__  ___/ //   ) ) \\\\    / / \n//   ((        //___ / / //__| |    //    / / //____    //___/ /    / /    //   / /   \\\\  / /  \n//     \\\\     / ___   / / ___  |   //    / / / ____    / ___ (     / /    //   / /     \\\\/ /   \n//       ) ) //    / / //    | |  //    / / //        //   | |    / /    //   / /       / /    \n//((___ / / //    / / //     | | //____/ / //____/ / //    | |   / /    ((___/ /       / /     \n// \t\t\t\t\t\t\t\t\t\tThe Source Awakens\n#define TIE_FIGHTER_COUNT 10\n#define RESOLUTION 50\n#define AMBIENT .35\nfloat dfSphere(vec3 v, vec3 p, float r) {\n\treturn length(v-p) - r;\n}\n\nfloat cyl (vec3 v, vec3 c, float r) {\n\treturn length(vec3(v.x,c.y,v.z)-c)-r;   \n}\nfloat dfDeathStar (vec3 v, out bool i) {\n    float core =  dfSphere(v-vec3(0, 0, 10.),vec3(0), 10.);\n    float z = max(-dfSphere(v, vec3(-2.5, 2.5, -1.5), 3.),core);\n    i=z!=core;\n\treturn z;   \n}\n//iq's box\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\nmat4 rom(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\nfloat rotBox(vec3 v, vec3 b, vec3 j) {\n\tvec4 a = vec4(v,1.)*rom(vec3(1, 0, 0), j.x)*rom(vec3(0, 1, 0), j.y)*rom(vec3(0, 0, 1), j.z);   \n    return sdBox(a.rgb,b);\n}\nfloat shade_d(vec3 v) {\n    vec3 n = normalize(v-vec3(0, 0, 10));\n    float a=  dot(n, vec3(1, 1, 0));\n    return max(a,AMBIENT);\n}\n\n\nfloat tie(vec3 v, vec3 t, float s,out vec3 c){\n    float core = dfSphere(v, t, s);\n    float pole = min(dfSphere(v, t+vec3(s, 0, 0), s/4.),dfSphere(v, t+vec3(-s, 0, 0), s/4.));\n    float coreParts = min(core,pole);\n    if (coreParts ==core) c = vec3(0.25);\n    else c = vec3(.35);\n    \n   \tfloat wing = min(sdBox(v-(t+vec3(s*1.25, 0, 0)), vec3(0.1/4.*s, 1.5*s, s*1.5)),sdBox(v-(t-vec3(s*1.25, 0, 0)), vec3(0.1/4.*s, s*1.5, s*1.5)));\n    float f = min(wing, coreParts);\n    if (f == wing)\n        c=vec3(0.45);\n    return f;\n}\nfloat tie_vader(vec3 v, vec3 t, float s,out vec3 c){\n    float core = dfSphere(v, t, s);\n    float pole = min(dfSphere(v, t+vec3(s, 0, 0), s/4.),dfSphere(v, t+vec3(-s, 0, 0), s/4.));\n    float coreParts = min(core,pole);\n    if (coreParts ==core) c = vec3(0.25);\n    else c = vec3(.35);\n    \n   \tfloat wing = min(sdBox(v-(t+vec3(s*1.25, 0, 0)), vec3(0.1/4.*s, 0.5*s, s*1.5)),sdBox(v-(t-vec3(s*1.25, 0, 0)), vec3(0.1/4.*s, s*0.5, s*1.5)));\n    float wT = rotBox(v-(t+vec3(s*1.0, s*.9, 0)), vec3(0.1/4.*s, 0.5*s, s*1.5), vec3(0, 0, -.5));\n    float wTz = rotBox(v-(t+vec3(s*-1.0, s*.9, 0)), vec3(0.1/4.*s, 0.5*s, s*1.5), vec3(0, 0, .5));\n    wing = min(wing,min(wT,wTz));\n    float wB = rotBox(v-(t+vec3(s*1.0, -s*.9, 0)), vec3(0.1/4.*s, 0.5*s, s*1.5), vec3(0, 0, .5));\n    float wBz = rotBox(v-(t+vec3(s*-1.0, -s*.9, 0)), vec3(0.1/4.*s, 0.5*s, s*1.5), vec3(0, 0, -.5));\n    wing = min(wing,min(wB,wBz));\n    float f = min(wing, coreParts);\n    if (f == wing)\n        c=vec3(0.45);\n    return f;\n}\nfloat ties(vec3 v, out vec3 c) {\n    vec3 ccol;\n    float m;\n    for (int i = 0; i < TIE_FIGHTER_COUNT; i++) {\n        float t = float(i)*3.;\n        vec3 coll;\n        float j = 1.;\n        if (mod(t,2.) == 0.)\n            j = -1.;\n        float ti;\n        if (mod(t*t, 3.1415926)!=0.) {\n            ti = tie(v, vec3(.7+sin(t)*t/3., .5, mod(iTime*2.*(j)+t, 20.)-20.0), 0.125, coll);\n        } else {\n        \tti = tie_vader(v, vec3(.7+sin(t)*t/3., .5, mod(iTime*2.*(j)+t, 20.)-20.0), 0.125, coll);   \n        }\n        if (i==0) { m = ti; ccol = coll; }\n        m=min(m,ti);\n        if (m == ti) {\n       \t\tccol = coll;\n        }\n        \n    }\n    c=ccol;\n    return m;\n}\nfloat shade_t(vec3 ro) {\n    float res = 1.;\n   vec3 rd = vec3(1, 1, 0);\n  vec3 v = ro+rd*.001;\n    float dfS;\n  for (int i = 0; i < RESOLUTION; ++i) {\n      bool bb;\n      float b = dfDeathStar(v, bb);\n      vec3 tiCol;\n      int tiName;\n      float ti = ties(v, tiCol);\n      float dStar = b;\n      float wrld = min(dStar, ti);\n    v+=rd*wrld;\n      \n    if (wrld<.1) {\n\t\tres = min( res, 2.*wrld/dfS);\n\n    }\n       dfS += wrld;\n  }\n    return res;\n\n}\nvec3 a(vec3 c) {\n    return ((c.x+c.y+c.z)/3.>.9) ?vec3(1):vec3(0);\n}\nvec3 march(vec3 ro, vec3 rd, vec2 uv) {\n  rd = normalize(rd);\n  vec3 v = ro;\n  for (int i = 0; i < RESOLUTION; ++i) {\n      bool bb;\n      float b = dfDeathStar(v, bb);\n      vec3 tiCol;\n      int tiName;\n      float ti = ties(v, tiCol);\n      float dStar = b;\n      float wrld = min(dStar, ti);\n    v+=rd*wrld;\n         if(ti<.01) {\n        \treturn tiCol*shade_t(v);\n        }\n        else if(b<.05){\n        float gr = texture(iChannel0, mod(v.xy,1.), 3.).r;\n            float gr2 = texture(iChannel3, mod(v.xy,1.), 3.).r*1.5 + gr*.5;\n            gr2*=.9;\n    \t\treturn vec3(bb?gr2/3.:gr)*(1.-vec3(distance(v,ro)/20.))*shade_d(v); \n        }\n\n  }\n  \n  return a(texture(iChannel1,(rd.xy+rd.xz+rd.yz)/3.).rgb);\n}\n\nvoid mainImage(out vec4 f, in vec2 p) {\n\tvec2 R = iResolution.xy, uv = (2.*p-R)/R.y;\n\tvec4 j = vec4(uv, 1, 1);\n    j*=rom(vec3(0, 1, 0), iMouse.x/R.x*8.-4.);\n    j*=rom(vec3(1, 0, 0), -(iMouse.y/R.y*4.-2.));\n\tf = mix(vec4(0), vec4(march( vec3 (-.5, .5, -7.), j.xyz,p/R), 1.), min(iTime, 1.));  \n}","name":"Image","description":"","type":"image"}]}