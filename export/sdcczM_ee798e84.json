{"ver":"0.1","info":{"id":"sdcczM","date":"1653171755","viewed":139,"name":"Embritney","username":"LegoCylon","description":"Uses video luminance (minus chroma key) as a height map for a 3d signed distance field. ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","distance"],"hasliked":0,"parentid":"Ws3SDl","parentname":"Pyramid - distance"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// https://iquilezles.org/articles/distfunctions\n\n//  The color key (greenscreen)\nconst vec3 chromaKey = vec3(.176, .627, .176);\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat luminance(vec3 col)\n{\n    col *= vec3(.299, .587, .114);\n    float lum = col.r + col.g + col.b;\n    return pow(lum, .75);\n}\n\nvec4 map( in vec3 pos )\n{\n    vec2 uv = vec2(-pos.x, pos.z) * .5 + .5;\n    vec3 tex = texture(iChannel0, uv).rgb;\n    float lum = luminance(tex);\n\n    lum *= (ChromaMask(tex, chromaKey) - .005);\n    \n    float d = sdBox(pos,vec3(1., .125 * lum, 1.));\n    \n    return vec4(tex, d);\n}\n\n// https://iquilezles.org/articles/rmshadows/\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, in float k )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    \n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).a;\n\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        \n        t += h;\n        \n        if( res<0.0001 || t>tmax ) break;\n        \n    }\n    res = clamp( res, 0.0, 1.0 );\n    return res*res*(3.0-2.0*res);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = map( pos + h*nor ).a;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );    \n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.03;\n    return normalize( e.xyy*map( pos + e.xyy ).a + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).a + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).a + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).a );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = -1.575 + 0.125*iTime;\n\tvec3 ro = vec3( cos(an), 2. - max(0., sin(an * 3.)), sin(an) );\n    vec3 ta = vec3( 0.0, -.5, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 2.*ww );\n\n        // raymarch\n        const float tmax = 30.0;\n        float t = 0.0;\n        for( int i=0; i<1024; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos).a;\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal( pos );\n\n            // material        \n            vec3 mate = vec3(.2);\n\n            // key light\n            vec3  key = vec3(map(pos).rgb);\n            vec3  lig = normalize( vec3(-1., 9., 0.) );\n            vec3  hal = normalize( lig-rd );\n            float dif = clamp( dot( nor, lig ), 0.0, 1.0 ) *\n                        calcSoftshadow( pos, lig, 0.01, 3.0, 256. );\n\n            float spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                        dif *\n                        (0.02 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n            col = mate * 4.0*dif*key;\n            col +=      12.0*spe*key;\n\n            // ambient light\n            float occ = calcAO( pos, nor );\n            float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n            col += mate*amb*occ*vec3(0.0,0.08,0.3);\n\n            // fog\n            col *= exp( -0.005*t*t*t );\n        }\n\n        // gamma        \n        col = pow( col, vec3(0.4545) );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n//\n// Based on http://gc-films.com/chromakey.html\n\n// Convert RGB into YCbCr\n//\nvec3 YCbCr (vec3 rgb) {\n\treturn vec3(\n        dot(rgb, vec3(.299, .587, .114)), // y\n        .5 + dot(rgb, vec3(-.169, -.331, .5)), // Cb\n\t\t.5 + dot(rgb, vec3(.5, -.419, -.081)) // Cr\n    );\n}\n\nfloat ChromaMask(vec3 f, vec3 k) {\n    vec3 v = YCbCr(f);\n    \n    //  Compute the distance in the CbCr space since this ignores luminance.\n    //\n    float l = length((v - YCbCr(k)).gb);\n    \n    //  Calculate a blending mask based on the ideal distances.\n    //\n    return smoothstep(.12, .265, l);\n}\n","name":"Common","description":"","type":"common"}]}