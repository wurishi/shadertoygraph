{"ver":"0.1","info":{"id":"WdyfWh","date":"1606964299","viewed":62,"name":"Incon's Shader: Mandelbrot Set","username":"incon","description":"I was bored one time so I just made a shader that renders the Mandelbrot Set. (WIP, trying to implement zooming.)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n// map function modified from https://github.com/msfeldstein/glsl-map\n#define map(value, inMin, inMax, outMin, outMax) outMin+(outMax - outMin)*(value - inMin)/(inMax - inMin);\n\nfloat maxIters = 1000.;\nfloat fc(vec2 comp) {\n\tvec2 z = vec2(0.0);\n    vec2 Nz = vec2(0.0);\n    float iters = 0.;\n    while (iters<maxIters && abs(length(Nz)) < 2.) {\n        Nz = mat2(z, -z.y,z.x) * z + comp;\n\t\tz = Nz;\n        iters++;\n\t}\n    float sl = iters - log(log2(dot(vec2(z.x, z.y), vec2(z.x, z.y)))) + 4.;\n    float al = smoothstep(-0.1, 0., sin(0.5*6.2831));\n\treturn mix(iters, sl, al);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat zoom = 1.0;\n\t\n\tvec2 comp = map(fragCoord.xy, vec2(0.+iResolution.x/4., 0), iResolution.xy-vec2(iResolution.x/4., 0), vec2(-2), vec2(2));\n\tfloat inSet = fc(comp);\n\tfloat color = map(inSet, 0., 100., 0., 1.);\n    \n\tfragColor = vec4(vec3(color), 0.);\n}","name":"Image","description":"","type":"image"}]}