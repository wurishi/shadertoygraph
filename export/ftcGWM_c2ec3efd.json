{"ver":"0.1","info":{"id":"ftcGWM","date":"1636162318","viewed":51,"name":"My first steps","username":"arcollector","description":"cocentric circles","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool sampleCircle(vec2 point, float radius) {\n    float d = pow(point.x, 2.0) + pow(point.y, 2.0);\n    return d <= pow(radius, 2.0);\n}\n\nfloat distanceFromCenter(vec2 point) {\n    float d = sqrt(pow(point.x, 2.0) + pow(point.y, 2.0));\n    return d;\n}\n\n\nfloat toWorldSpace( in float x, in float maxX ) {\n    return x / maxX * 2.0 - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float w = iResolution.x;\n    float h = iResolution.y;\n    \n    vec3 sumColor = vec3(0);\n    for (int y = 0; y < 4; y++) {\n        for (int x = 0; x < 4; x++) {\n            vec2 offset = vec2(\n                float(x) / 4.0 - 0.5,\n                float(y) / 4.0 - 0.5\n            );\n            \n            vec2 world = vec2(\n                toWorldSpace(fragCoord.x + offset.x, w),\n                toWorldSpace(fragCoord.y + offset.y, h)\n            );\n            world.y = world.y * (h / w);\n            \n            float d = distanceFromCenter(world);\n            float xxx = fract(d)*100.0/10.0;\n            int whole = int(xxx) % 2;\n            if (whole == 0) {\n                sumColor += vec3(1.0,0.0,0.0);\n            } else {\n                sumColor += vec3(0.1,0.1,0.1);\n            }\n            \n        }\n    }\n\n    vec3 avgColor = sumColor / vec3(16);\n    fragColor = vec4(avgColor, 1.0);\n    \n\n    \n    /*bool intersect = sampleCircle(world, 0.5);\n    if (intersect) {\n        fragColor = vec4(1.0,0.0,0.0,1.0);\n    } else {\n        fragColor = vec4(0.5,0.5,0.5,1.0);\n    }*/\n\n    \n    \n\n}\n","name":"Image","description":"","type":"image"}]}