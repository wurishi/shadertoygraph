{"ver":"0.1","info":{"id":"MXlyRr","date":"1725770233","viewed":36,"name":"HGL Gravity Fractal","username":"hogolomogono","description":"Fractal computed using the outcome of a gravity simulation with three bodies","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\nvec2 update_obj_vel(vec2 pos, vec2 cur_vel, vec2 grav_pos, float delta_time) {\n    vec2 delta = grav_pos - pos;\n    float dist = length(delta);\n    vec2 dir = delta / dist;\n    \n    vec2 grav_vel = dir / (1. + dist);\n    return cur_vel + grav_vel * delta_time;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time_ratio = (1. + sin(iTime*0.8 - M_PI/2.)/2.);\n\n    float maxRes = max(iResolution.x, iResolution.y);\n    vec2 relPixel = fragCoord - iResolution.xy/2.;\n    vec2 pos = (relPixel / maxRes) * 2.;\n    \n    vec2 vel = normalize(vec2(0, 0) - pos);\n    for (int i = 0; i < 30; i++) {\n        float dt = 0.05 + time_ratio*0.31;\n        \n        float ang1 = 0.;\n        float ang2 = 2. * M_PI / 3.;\n        float ang3 = 4. * M_PI / 3.;\n        float grav_dist = 0.2;\n        \n        vec2 grav_pos1 = vec2(sin(ang1), cos(ang1))*grav_dist;\n        vec2 grav_pos2 = vec2(sin(ang2), cos(ang2))*grav_dist;\n        vec2 grav_pos3 = vec2(sin(ang3), cos(ang3))*grav_dist;\n        vel = (\n            update_obj_vel(pos, vel, grav_pos1, dt) + \n            update_obj_vel(pos, vel, grav_pos2, dt) +\n            update_obj_vel(pos, vel, grav_pos3, dt)\n        ) / 3.;\n        pos += vel * dt;\n    }\n\n    vec3 col = (vec3(pos.x, pos.y, length(vel)) + 1.) / 2.;\n\n    //float base = (pos.x + 1.) / 2.;\n    //float base = length(pos);\n    //vec3 col = vec3(base, base, base);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}