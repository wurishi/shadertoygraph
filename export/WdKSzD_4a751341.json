{"ver":"0.1","info":{"id":"WdKSzD","date":"1573545460","viewed":1731,"name":"Flip Page","username":"hypnothalamus","description":"A simple page flip using a rolling cylinder. Not optimized.","likes":15,"published":3,"flags":0,"usePreview":0,"tags":["flip","page"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n\t\"Flip Page\" by Lucian Stanculescu - 2019\n\tFree to use, credit if you want/can.\n\n\tA simple page flip - the page wraps around a rolling cylinder\n \n\tIMPROVEMENTS\n\t- normals and lighting\n\t- compute time when page exits completely\n\t- use a cone instead of the cylinder with changing radius/height/orientation\n*/ \n\n#define r 0.3\n#define rep 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float R = r * iResolution.x; // radius of rolling cylinder\n    \n    float v = 1.5 * iResolution.x / rep;\n    \n    float time = fract(iTime / rep);\n    \n    vec2 s = fragCoord; // pixel coordinates\n    \n    vec2 u = normalize(vec2(5.0, 1.0)); // direction of movement\n    \n    vec2 o = vec2(time *rep* v, 0.0); // origin of cylinder\n    \n    float d = dot(s - o, u); // distance to generator of cylinder\n    \n    vec2 h = s - u * d; // projection on generator\n    \n    bool onCylinder = abs(d) < R;\n    \n    float angle = onCylinder ? asin(d / R) : 0.0;\n    \n    bool neg = d < 0.0;\n    \n    float a0 = 3.141592653 + angle;\n    \n    float a = onCylinder ? (neg ? -angle : (3.141592653 + angle)) : 0.0; // angle\n    \n    float l = R * a; // length of arc\n    \n    vec2 p = h - u * l; // unwrapped point from cylinder to plane\n    \n    bool outside = any(lessThan(p, vec2(0.0))) || any(greaterThan(p, iResolution.xy));\n    \n    bool previous = (!onCylinder ||outside) && neg;\n    \n    vec4 color = (previous ? mix(0.1, 1.0, time): 1.0) * texture(iChannel0, (!onCylinder || outside ? fragCoord : p) / iResolution.xy);\n \n    l = R * a0; // length of arc\n    \n    p = h - u * l; // unwrapped point from cylinder to plane\n    \n    outside = any(lessThan(p, vec2(0.0))) || any(greaterThan(p, iResolution.xy));\n    \n    color = outside || !onCylinder ? color : texture(iChannel0, p / iResolution.xy);\n    \n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}