{"ver":"0.1","info":{"id":"Mc33RN","date":"1711443212","viewed":27,"name":"4d sphere in 2d and time","username":"72572279254","description":"4d sphere in 2d and time","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 2.0; // Skalieren f체r eine vollst채ndige Ansicht\n\n    // Zeitabh채ngige Rotation\n    float time = iTime * 0.2;\n    float cosTime = cos(time);\n    float sinTime = sin(time);\n\n    // Rotation im 2D-Raum, Projektion einer 3D-Sph채re\n    vec3 spherePos = vec3(cosTime * uv.x - sinTime * uv.x, sinTime * uv.y + cosTime * uv.y, cosTime);\n\n    // Wireframe-Berechnung durch Modulo-Operationen und trigonometrische Funktionen\n    float wireframe = sin(20.0 * spherePos.x) * sin(20.0 * spherePos.y) * sin(20.0 * spherePos.z);\n    wireframe = smoothstep(0.0, 0.4, abs(wireframe) * 0.5);\n\n    // Farbe und Helligkeit basierend auf dem Wireframe-Wert\n    vec3 col = mix(vec3(0, 1, 0), vec3(1, 0, 1), wireframe);\n\n    // Output\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}