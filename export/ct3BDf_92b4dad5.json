{"ver":"0.1","info":{"id":"ct3BDf","date":"1701647261","viewed":40,"name":"Caassini Oval(s) rainbow version","username":"tekano","description":"same as previous, https://www.shadertoy.com/view/Dl3fDX   but added rainbow effect centred on each P point,  ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rainbow","geometry","maths"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// adapted rainbow colored version from here https://www.shadertoy.com/view/Dl3fDX\n\nconst int MAX_POINTS = 42; // Maximum number of points\n\nvec3 rainbowColor(float angle) {\n    return vec3(0.5 + 0.5 * cos(angle), \n                0.5 + 0.5 * cos(angle + 2.0944), // 120 degrees phase shift\n                0.5 + 0.5 * cos(angle + 4.18879)); // 240 degrees phase shift\n}\n\nbool cassiniOval(in vec2 uv, in vec2 points[MAX_POINTS], int numPoints, float a, out float distProduct) {\n    distProduct = 1.0;\n    for (int i = 0; i < numPoints; i++) {\n        distProduct *= distance(uv, points[i]);\n    }\n    return (abs(distProduct - a * a) <= 0.0051); // Thickness of the oval line\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Parameters\n    int numPoints = 3; // Total number of points excluding the mouse-controlled point\n    float radius = 0.32;\n    float speed = -0.5; // Adjusted for correct spin direction\n    float numberOfStripes = 32.0; // Number of stripes\n    float stripeSize = 0.1; // Size of each stripe\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Define points including the mouse-controlled point\n    vec2 points[MAX_POINTS];\n    points[0] = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    points[0].x *= iResolution.x / iResolution.y;\n    for (int j = 1; j <= numPoints; j++) {\n        float angle = 2.0 * 3.14159 * float(j - 1) / float(numPoints) + iTime * speed;\n        points[j] = vec2(cos(angle), sin(angle)) * radius;\n    }\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0); // Initial color set to black\n\n    // Draw the Cassini oval with rainbow stripes centered on each point\n    float distProduct;\n    for (float i = 0.0; i < numberOfStripes; i++) {\n        float a = stripeSize * (i + 1.0);\n        if (cassiniOval(uv, points, numPoints + 1, a, distProduct)) {\n            vec3 colorSum = vec3(0.0);\n            for (int j = 0; j <= numPoints; j++) {\n                float stripeAngle = atan(uv.y - points[j].y, uv.x - points[j].x) - iTime * speed;\n                vec3 color = rainbowColor(stripeAngle);\n                colorSum += color;\n            }\n            vec3 averagedColor = colorSum / float(numPoints + 1);\n            fragColor = mix(fragColor, vec4(averagedColor, 0.5), smoothstep(9.0, 0.0001, distProduct));\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}