{"ver":"0.1","info":{"id":"tdt3Rr","date":"1567692094","viewed":378,"name":"loc-dep 3-points interpolation","username":"FabriceNeyret2","description":"testing various location-dependent interpolation of 3 points. ( cf #def f(d) )\nDefault: field(interp3points(pixCoords)).   Mouse: interp3points(Mouse).\nOf course, dangerous to use to compute some proceduralTtexture(pixCoords).\nSPACE: midpoint( this, grey)","likes":3,"published":3,"flags":16,"usePreview":0,"tags":["interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Try your weighting function f() here.\n// For data-interpolating, i.e. f(P1)=P1, have weightings=(1,0,0) or (infinity,v2,v3)\n//#define f(d)       ( .5-.5*cos(6.28*min(.66*(d),1.)) )\n//#define f(d)         exp(-.5*(d)*(d)/.35 )\n  #define f(d)       ( 1./pow(d,1.) ) // 1.6\n\n#define UNIQ true   // false: red switch to nearest (compare to its vertical miror)\n\n#define S(v)           smoothstep(1.5/R.y,-1.5/R.y,v)     // antialiased draw\n#define D(D,r)         S(length(D)-r)                     // draw disc\n#define keyClick(a)  ( texelFetch(iChannel3,ivec2(a,0),0).x > 0.)\n\nfloat d1,d2,d3;\nvec2 interp(vec2 K, vec2 P1, vec2 P2, vec2 P3) {          // 3-points interpolation(U)\n    d1 = length(K-P1), d2 = length(K-P2), d3 = length(K-P3);\n    float c1 = f(d1), c2 = f(d2), c3 = f(d3);\n    return ( c1*P1 + c2*P2 + c3*P3 ) / (c1+c2+c3);        // barycentric\n\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{   O-=O;\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y,\n         K = iMouse.z<0. ? U : ( 2.*iMouse.xy - R ) / R.y,\n             \n        P1 = UNIQ || K.y<0. ? vec2(0,-.6) : vec2(0,.6), \n        P2 = vec2(-1, .3), P3 = vec2(.9,.5), // the 3 points,\n        Pb = vec2(0,.2),\n         P = interp(K, P1,P2,P3),\n        Pf = (!keyClick(32)) ? P : (P+Pb)/2.;\n \n    O += D(U-Pf, .1);                       // draw interpolation rel to U or mouse (dual).\n                                            // SPACE: draw fix interpolation of this and Pb.\n \n    P = interp(U, P1,P2,P3);                // background: \n   Pf = (!keyClick(32)) ? P : (P+Pb)/2.;\n    O += S(vec4(d1,d2,d3,0) -.1)            // draw base points\n      + .4*vec4(D(U-Pb,.1));\n    O.b += .5*sin(100.*(length(U-Pf) - .1));// draw isovals of movingpoint(U)\n}","name":"Image","description":"","type":"image"}]}