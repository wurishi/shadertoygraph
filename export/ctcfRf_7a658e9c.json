{"ver":"0.1","info":{"id":"ctcfRf","date":"1701435601","viewed":73,"name":"真似","username":"Kosaku","description":"すみません、言い訳になりますがプログラミングというものに人生で触れたことがなくさっぱり分かりませんでした。\n何とか先生の作られたプログラムは再現したのですがここから独自性を生み出すには何をどうすればいいのか皆目見当つかなかったのでこの状態で提出します。\n授業内容は計算などは理解しきれていませんが、光は電磁との密接な関係性があるということに加えて、フレネルの式という光の反射等を再現するうえでコストパフォーマンスの面で重要なのだとわかりました。","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sorry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;\n    \n    uv-= vec2(0.5, 0.5) * iResolution.xy;\n    \n    vec3 col = vec3(0, 0, 0);\n    \n    float r =300.0;\n    if(uv.x * uv.x + uv.y * uv.y < r * r){\n        float z = sqrt(r * r - uv.x * uv.x - uv.y * uv.y);\n        vec3 normal = normalize(vec3(uv.x, uv.y, z));\n        vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n        float diffuse = clamp(dot(normal, light), 0.0, 1.0);\n        float I = diffuse * 0.7 + 0.3;\n        \n        vec3 d = vec3(0.0, 0.0, -1.0);\n        vec3 reflection = reflect(d, normal);\n        \n        col = vec3(1.0, 0.0, 0.0) * I +\n            vec3(1.0, 1.0, 1.0)*pow(clamp(dot(reflection, light), 0.0, 1.0), 10.0);\n    }\n\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}