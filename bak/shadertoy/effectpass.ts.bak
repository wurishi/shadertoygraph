import * as Type from './type'

export default class EffectPass {
    private mID: number
    private mInputs: Type.MyInfo[]
    private mOutputs: any[]
    private mSource: any
    private mRenderer
    private mProgramCopy
    private mCompilationTime = 0
    private mType?: Type.ShaderToyInstanceRenderPassType
    private mName = 'none'
    private mFrame = 0
    private mShaderTextureLOD: boolean
    private mIsLowEnd: boolean
    private mHeader = ''

    constructor(
        renderer: Type.Renderer,
        isLowEnd: boolean,
        hasShaderTextureLOD: boolean,
        copyProgram: Type.CreateShaderResolveSucc,
        id: number
    ) {
        this.mID = id
        this.mInputs = [null, null, null, null]
        this.mOutputs = [null, null, null, null]
        this.mSource = null

        this.mRenderer = renderer
        this.mProgramCopy = copyProgram
        this.mShaderTextureLOD = hasShaderTextureLOD
        this.mIsLowEnd = isLowEnd
    }

    public SetOutputs(id: any, sth: any) {}

    public NewTexture = (
        wa: any,
        slot: number,
        url?: Type.ShaderToyInstanceRenderPassInput,
        buffers?: any,
        cubeBuffers?: any,
        keyboard?: any
    ) => {
        if(url === null) {
            console.log('null')
        }
    }

    public Create = (
        passType: Type.ShaderToyInstanceRenderPassType,
        wa: any
    ): void => {
        this.mType = passType
        this.mSource = null

        switch (passType) {
            case 'image':
                this.Create_Image(wa)
                break
        }
    }

    private MakeHeader = () => {
        switch (this.mType) {
            case 'image':
                this.MakeHeader_Image()
                break
        }
    }

    private Create_Image = (wa: any) => {
        this.MakeHeader()
        //
    }

    private MakeHeader_Image = () => {
        let header = `
        #define HW_PERFORMANCE ${this.mIsLowEnd === true ? 0 : 1}
        uniform vec3    iResolution;
        uniform float   iTime;
        uniform float   iChannelTime[4];
        uniform vec4    iMouse;
        uniform vec4    iDate;
        uniform float   iSampleRate;
        uniform vec3    iChannelResolution[4];
        uniform int     iFrame;
        uniform float   iTimeDelta;
        uniform float   iFrameRate;
        `
        this.mInputs.forEach((inp, i) => {
            let channelType = 'sampler2D'
            if (inp?.mInfo.mType === 'cubemap') {
                channelType = 'samplerCube'
            } else if (inp?.mInfo.mType === 'volume') {
                channelType = 'sampler3D'
            }
            header += `uniform ${channelType} iChannel${i};\n`
            header += `uniform struct {
                ${channelType} sampler;
                vec3 size;
                float time;
                int loaded;
            }iCh${i};\n`
        })
        header += `
        void mainImage(out vec4 c, in vec2 f);
        void st_assert(bool cond);
        void st_assert(bool cond, int v);
        out vec4 shadertoy_out_color;
        void st_assert(bool cond, int v) {
            if(!cond) {
                if(v == 0) {
                    shadertoy_out_color.x = -1.0;
                }
                else if(v == 1) {
                    shadertoy_out_color.y = -1.0;
                }
                else if(v == 2) {
                    shadertoy_out_color.z = -1.0;
                }
                else {
                    shadertoy_out_color.w = -1.0;
                }
            }
        }
        void st_assert(bool cond) {
            if(!cond) {
                shadertoy_out_color.x = -1.0;
            }
        }
        void main(void) {
            shadertoy_out_color = vec4(1.0, 1.0, 1.0, 1.0);
            vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
            mainImage(color, gl_FragCoord.xy);
            if(shadertoy_out_color.x < 0.0) color = vec4(1.0, 0.0, 0.0, 1.0);
            if(shadertoy_out_color.y < 0.0) color = vec4(0.0, 1.0, 0.0, 1.0);
            if(shadertoy_out_color.z < 0.0) color = vec4(0.0, 0.0, 1.0, 1.0);
            if(shadertoy_out_color.w < 0.0) color = vec4(1.0, 1.0, 0.0, 1.0);
            shadertoy_out_color = vec4(color.xyz, 1.0);
        }
        `
        this.mHeader = header
    }
}
